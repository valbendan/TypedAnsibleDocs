{
  "community.network.a10_server": {
    "doc": {
      "description": "Manage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv2.",
      "has_action": false,
      "notes": "Requires A10 Networks aXAPI 2.1.\nRequires A10 Networks aXAPI 2.1.",
      "options": {
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname or IP of the A10 Networks device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "partition": {
          "aliases": [],
          "description": "set active-partition",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "Password for the C(username) account.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "server_ip": {
          "aliases": [
            "ip",
            "address"
          ],
          "description": "The SLB server IPv4 address.",
          "required": false,
          "suboptions": {}
        },
        "server_name": {
          "aliases": [
            "server"
          ],
          "description": "The SLB (Server Load Balancer) server name.",
          "required": true,
          "suboptions": {}
        },
        "server_ports": {
          "aliases": [
            "port"
          ],
          "description": "A list of ports to create for the server. Each list item should be a dictionary which specifies the C(port:) and C(protocol:), but can also optionally specify the C(status:). See the examples below for details. This parameter is required when C(state) is C(present).",
          "required": false,
          "suboptions": {}
        },
        "server_status": {
          "aliases": [
            "status"
          ],
          "description": "The SLB virtual server status.",
          "default": "enabled",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "This is to specify the operation to create, update or remove SLB server.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "An account with administrator privileges.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "write_config": {
          "aliases": [],
          "description": "If C(yes), any changes will cause a write of the running configuration to non-volatile memory. This will save I(all) configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying C(yes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' server object."
    },
    "examples": "\n- name: Create a new server\n  community.network.a10_server:\n    host: a10.mydomain.com\n    username: myadmin\n    password: mypassword\n    partition: mypartition\n    server: test\n    server_ip: 1.1.1.100\n    server_ports:\n      - port_num: 8080\n        protocol: tcp\n      - port_num: 8443\n        protocol: TCP\n"
  },
  "community.network.a10_server_axapi3": {
    "doc": {
      "description": "Manage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv3.",
      "has_action": false,
      "notes": "Requires A10 Networks aXAPI 2.1.",
      "options": {
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname or IP of the A10 Networks device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "operation": {
          "aliases": [],
          "description": "Create, Update or Remove SLB server. For create and update operation, we use the IP address and server name specified in the POST message. For delete operation, we use the server name in the request URI.",
          "default": "create",
          "required": false,
          "choices": [
            "create",
            "update",
            "remove"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "Password for the C(username) account.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "server_ip": {
          "aliases": [
            "ip",
            "address"
          ],
          "description": "The SLB (Server Load Balancer) server IPv4 address.",
          "required": true,
          "suboptions": {}
        },
        "server_name": {
          "aliases": [
            "server"
          ],
          "description": "The SLB (Server Load Balancer) server name.",
          "required": true,
          "suboptions": {}
        },
        "server_ports": {
          "aliases": [
            "port"
          ],
          "description": "A list of ports to create for the server. Each list item should be a dictionary which specifies the C(port:) and C(protocol:).",
          "required": false,
          "suboptions": {}
        },
        "server_status": {
          "aliases": [
            "action"
          ],
          "description": "The SLB (Server Load Balancer) virtual server status.",
          "default": "enable",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "An account with administrator privileges.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "write_config": {
          "aliases": [],
          "description": "If C(yes), any changes will cause a write of the running configuration to non-volatile memory. This will save I(all) configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying C(yes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices"
    },
    "examples": "\n- name: Create a new server\n  a10_server:\n    host: a10.mydomain.com\n    username: myadmin\n    password: mypassword\n    server: test\n    server_ip: 1.1.1.100\n    validate_certs: false\n    server_status: enable\n    write_config: yes\n    operation: create\n    server_ports:\n      - port-number: 8080\n        protocol: tcp\n        action: enable\n      - port-number: 8443\n        protocol: TCP\n"
  },
  "community.network.a10_service_group": {
    "doc": {
      "description": "Manage SLB (Server Load Balancing) service-group objects on A10 Networks devices via aXAPIv2.",
      "has_action": false,
      "notes": "Requires A10 Networks aXAPI 2.1.\nWhen a server doesn't exist and is added to the service-group the server will be created.\nRequires A10 Networks aXAPI 2.1.",
      "options": {
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname or IP of the A10 Networks device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "partition": {
          "aliases": [],
          "description": "set active-partition",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "Password for the C(username) account.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "servers": {
          "aliases": [
            "server",
            "member"
          ],
          "description": "A list of servers to add to the service group. Each list item should be a dictionary which specifies the C(server:) and C(port:), but can also optionally specify the C(status:). See the examples below for details.",
          "required": false,
          "suboptions": {}
        },
        "service_group": {
          "aliases": [
            "service",
            "pool",
            "group"
          ],
          "description": "The SLB (Server Load Balancing) service-group name",
          "required": true,
          "suboptions": {}
        },
        "service_group_method": {
          "aliases": [
            "method"
          ],
          "description": "The SLB service-group load balancing method, such as round-robin or weighted-rr.",
          "default": "round-robin",
          "required": false,
          "choices": [
            "round-robin",
            "weighted-rr",
            "least-connection",
            "weighted-least-connection",
            "service-least-connection",
            "service-weighted-least-connection",
            "fastest-response",
            "least-request",
            "round-robin-strict",
            "src-ip-only-hash",
            "src-ip-hash"
          ],
          "suboptions": {}
        },
        "service_group_protocol": {
          "aliases": [
            "proto",
            "protocol"
          ],
          "description": "The SLB service-group protocol of TCP or UDP.",
          "default": "tcp",
          "required": false,
          "choices": [
            "tcp",
            "udp"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If the specified service group should exists.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "An account with administrator privileges.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "write_config": {
          "aliases": [],
          "description": "If C(yes), any changes will cause a write of the running configuration to non-volatile memory. This will save I(all) configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying C(yes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' service groups."
    },
    "examples": "\n- name: Create a new service-group\n  community.network.a10_service_group:\n    host: a10.mydomain.com\n    username: myadmin\n    password: mypassword\n    partition: mypartition\n    service_group: sg-80-tcp\n    servers:\n      - server: foo1.mydomain.com\n        port: 8080\n      - server: foo2.mydomain.com\n        port: 8080\n      - server: foo3.mydomain.com\n        port: 8080\n      - server: foo4.mydomain.com\n        port: 8080\n        status: disabled\n"
  },
  "community.network.a10_virtual_server": {
    "doc": {
      "description": "Manage SLB (Server Load Balancing) virtual server objects on A10 Networks devices via aXAPIv2.",
      "has_action": false,
      "notes": "Requires A10 Networks aXAPI 2.1.\nRequires A10 Networks aXAPI 2.1.",
      "options": {
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname or IP of the A10 Networks device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "partition": {
          "aliases": [],
          "description": "set active-partition",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "Password for the C(username) account.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If the specified virtual server should exist.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "An account with administrator privileges.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "virtual_server": {
          "aliases": [
            "vip",
            "virtual"
          ],
          "description": "The SLB (Server Load Balancing) virtual server name.",
          "required": true,
          "suboptions": {}
        },
        "virtual_server_ip": {
          "aliases": [
            "ip",
            "address"
          ],
          "description": "The SLB virtual server IPv4 address.",
          "required": false,
          "suboptions": {}
        },
        "virtual_server_ports": {
          "aliases": [],
          "description": "A list of ports to create for the virtual server. Each list item should be a dictionary which specifies the C(port:) and C(type:), but can also optionally specify the C(service_group:) as well as the C(status:). See the examples below for details. This parameter is required when C(state) is C(present).",
          "required": false,
          "suboptions": {}
        },
        "virtual_server_status": {
          "aliases": [
            "status"
          ],
          "description": "The SLB virtual server status, such as enabled or disabled.",
          "default": "enable",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "write_config": {
          "aliases": [],
          "description": "If C(yes), any changes will cause a write of the running configuration to non-volatile memory. This will save I(all) configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying C(yes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' virtual servers."
    },
    "examples": "\n- name: Create a new virtual server\n  community.network.a10_virtual_server:\n    host: a10.mydomain.com\n    username: myadmin\n    password: mypassword\n    partition: mypartition\n    virtual_server: vserver1\n    virtual_server_ip: 1.1.1.1\n    virtual_server_ports:\n      - port: 80\n        protocol: TCP\n        service_group: sg-80-tcp\n      - port: 443\n        protocol: HTTPS\n        service_group: sg-443-https\n      - port: 8080\n        protocol: http\n        status: disabled\n"
  },
  "community.network.aireos_command": {
    "doc": {
      "description": "Sends arbitrary commands to an aireos node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nCommands run in configuration mode with this module are not idempotent. Please use M(community.network.aireos_config) to configure WLC devices.",
      "has_action": false,
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote aireos device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.\nThe value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.\nThis value is used to authenticate the SSH session.\nIf the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.\nThis value is the path to the key used to authenticate the SSH session.\nIf the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.\nIf the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.\nThis value is used to authenticate the SSH session.\nIf the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [
            "waitfor"
          ],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run commands on remote devices running Cisco WLC"
    },
    "examples": "\ntasks:\n  - name: Run show sysinfo on remote devices\n    community.network.aireos_command:\n      commands: show sysinfo\n\n  - name: Run show sysinfo and check to see if output contains Cisco Controller\n    community.network.aireos_command:\n      commands: show sysinfo\n      wait_for: result[0] contains 'Cisco Controller'\n\n  - name: Run multiple commands on remote nodes\n    community.network.aireos_command:\n      commands:\n        - show sysinfo\n        - show interface summary\n\n  - name: Run multiple commands and evaluate the output\n    community.network.aireos_command:\n      commands:\n        - show sysinfo\n        - show interface summary\n      wait_for:\n        - result[0] contains Cisco Controller\n        - result[1] contains Loopback0\n"
  },
  "community.network.aireos_config": {
    "doc": {
      "description": "AireOS does not use a block indent file syntax, so there are no sections or parents. This module provides an implementation for working with AireOS configurations in a deterministic way.",
      "has_action": false,
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory.  If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "diff_against": {
          "aliases": [],
          "description": "When using the C(ansible-playbook --diff) command line argument the module can generate diffs against different sources.\nWhen this option is configured as I(intended), the module will return the diff of the running-config against the configuration provided in the C(intended_config) argument.\nWhen this option is configured as I(running), the module will return the before and after diff of the running-config with respect to any changes made to the device configuration.",
          "required": false,
          "choices": [
            "intended",
            "running"
          ],
          "suboptions": {}
        },
        "diff_ignore_lines": {
          "aliases": [],
          "description": "Use this argument to specify one or more lines that should be ignored during the diff.  This is used for lines in the configuration that are automatically updated by the system.  This argument takes a list of regular expressions or exact line matches.",
          "required": false,
          "suboptions": {}
        },
        "intended_config": {
          "aliases": [],
          "description": "The C(intended_config) provides the master configuration that the node should conform to and is used to check the final running-config against.   This argument will not modify any settings on the remote device and is strictly used to check the compliance of the current device's configuration against.  When specifying this argument, the task should also modify the C(diff_against) value and set it to I(intended).",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured. The commands must be the exact same commands as found in the device run-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line. If match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "none"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.\nThe value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.\nThis value is used to authenticate the SSH session.\nIf the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.\nThis value is the path to the key used to authenticate the SSH session.\nIf the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.\nIf the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.\nThis value is used to authenticate the SSH session.\nIf the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [
            "config"
          ],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(running_config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "save": {
          "aliases": [],
          "description": "The C(save) argument instructs the module to save the running-config to startup-config.  This operation is performed after any changes are made to the current running config.  If no changes are made, the configuration is still saved to the startup config.  This option will always cause the module to return changed. This argument is mutually exclusive with I(save_when).\nThis option is deprecated as of Ansible 2.7, use C(save_when)",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "save_when": {
          "aliases": [],
          "description": "When changes are made to the device running-configuration, the changes are not copied to non-volatile storage by default.  Using this argument will change that.  If the argument is set to I(always), then the running-config will always be copied to the startup-config and the module will always return as changed. If the argument is set to I(never), the running-config will never be copied to the startup-config.  If the argument is set to I(changed), then the running-config will only be copied to the startup-config if the task has made a change.",
          "default": "never",
          "required": false,
          "choices": [
            "always",
            "never",
            "changed"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Cisco WLC configurations"
    },
    "examples": "\n- name: Configure configuration\n  community.network.aireos_config:\n    lines: sysname testDevice\n\n- name: Diff the running-config against a provided config\n  community.network.aireos_config:\n    diff_against: intended\n    intended: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: Load new acl into device\n  community.network.aireos_config:\n    lines:\n      - acl create testACL\n      - acl rule protocol testACL 1 any\n      - acl rule direction testACL 3 in\n    before: acl delete testACL\n\n- name: Configurable backup path\n  community.network.aireos_config:\n    backup: yes\n    lines: sysname testDevice\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.apconos_command": {
    "doc": {
      "description": "Sends arbitrary commands to an apcon device and returns the results read from the device. The module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.",
      "has_action": false,
      "notes": "Tested against apcon iis+ii",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.",
          "type": "list",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "type": "list",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run arbitrary commands on APCON devices",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Basic Configuration\n  community.network.apconos_command:\n    commands:\n    - show version\n    - enable ssh\n  register: result\n\n- name: Get output from single command\n  community.network.apconos_command:\n    commands: ['show version']\n  register: result\n"
  },
  "community.network.aruba_command": {
    "doc": {
      "description": "Sends arbitrary commands to an aruba node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(community.network.aruba_config) to configure Aruba devices.",
      "has_action": false,
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote aruba device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote. device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [
            "waitfor"
          ],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run commands on remote devices running Aruba Mobility Controller"
    },
    "examples": "\ntasks:\n  - name: Run show version on remote devices\n    community.network.aruba_command:\n      commands: show version\n\n  - name: Run show version and check to see if output contains Aruba\n    community.network.aruba_command:\n      commands: show version\n      wait_for: result[0] contains Aruba\n\n  - name: Run multiple commands on remote nodes\n    community.network.aruba_command:\n      commands:\n        - show version\n        - show interfaces\n\n  - name: Run multiple commands and evaluate the output\n    community.network.aruba_command:\n      commands:\n        - show version\n        - show interfaces\n      wait_for:\n        - result[0] contains Aruba\n        - result[1] contains Loopback0\n"
  },
  "community.network.aruba_config": {
    "doc": {
      "description": "Aruba configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with Aruba configuration sections in a deterministic way.",
      "has_action": false,
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "diff_against": {
          "aliases": [],
          "description": "When using the C(ansible-playbook --diff) command line argument the module can generate diffs against different sources.\nWhen this option is configure as I(startup), the module will return the diff of the running-config against the startup configuration.\nWhen this option is configured as I(intended), the module will return the diff of the running-config against the configuration provided in the C(intended_config) argument.\nWhen this option is configured as I(running), the module will return the before and after diff of the running-config with respect to any changes made to the device configuration.",
          "required": false,
          "choices": [
            "startup",
            "intended",
            "running"
          ],
          "suboptions": {}
        },
        "diff_ignore_lines": {
          "aliases": [],
          "description": "Use this argument to specify one or more lines that should be ignored during the diff.  This is used for lines in the configuration that are automatically updated by the system.  This argument takes a list of regular expressions or exact line matches.",
          "required": false,
          "suboptions": {}
        },
        "encrypt": {
          "aliases": [],
          "description": "This allows an Aruba controller's passwords and keys to be displayed in plain text when set to I(false) or encrypted when set to I(true). If set to I(false), the setting will re-encrypt at the end of the module run. Backups are still encrypted even when set to I(false).",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "intended_config": {
          "aliases": [],
          "description": "The C(intended_config) provides the master configuration that the node should conform to and is used to check the final running-config against.   This argument will not modify any settings on the remote device and is strictly used to check the compliance of the current device's configuration against.  When specifying this argument, the task should also modify the C(diff_against) value and set it to I(intended).",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote. device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "running_config": {
          "aliases": [
            "config"
          ],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(running_config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "save_when": {
          "aliases": [],
          "description": "When changes are made to the device running-configuration, the changes are not copied to non-volatile storage by default.  Using this argument will change that before.  If the argument is set to I(always), then the running-config will always be copied to the startup configuration and the I(modified) flag will always be set to True.  If the argument is set to I(modified), then the running-config will only be copied to the startup configuration if it has changed since the last save to startup configuration.  If the argument is set to I(never), the running-config will never be copied to the startup configuration.  If the argument is set to I(changed), then the running-config will only be copied to the startup configuration if the task has made a change.",
          "default": "never",
          "required": false,
          "choices": [
            "always",
            "never",
            "modified",
            "changed"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Aruba configuration sections"
    },
    "examples": "\n- name: Configure top level configuration\n  community.network.aruba_config:\n    lines: hostname {{ inventory_hostname }}\n\n- name: Diff the running-config against a provided config\n  community.network.aruba_config:\n    diff_against: intended\n    intended_config: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: Configure interface settings\n  community.network.aruba_config:\n    lines:\n      - description test interface\n      - ip access-group 1 in\n    parents: interface gigabitethernet 0/0/0\n\n- name: Load new acl into device\n  community.network.aruba_config:\n    lines:\n      - permit host 10.10.10.10\n      - ipv6 permit host fda9:97d6:32a3:3e59::3333\n    parents: ip access-list standard 1\n    before: no ip access-list standard 1\n    match: exact\n\n- name: Configurable backup path\n  community.network.aruba_config:\n    backup: yes\n    lines: hostname {{ inventory_hostname }}\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.avi_actiongroupconfig": {
    "doc": {
      "description": "This module is used to configure ActionGroupConfig object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "action_script_config_ref": {
          "aliases": [],
          "description": "Reference of the action script configuration to be used.\nIt is a reference to an object of type alertscriptconfig.",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "autoscale_trigger_notification": {
          "aliases": [],
          "description": "Trigger notification to autoscale manager.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "email_config_ref": {
          "aliases": [],
          "description": "Select the email notification configuration to use when sending alerts via email.\nIt is a reference to an object of type alertemailconfig.",
          "required": false,
          "suboptions": {}
        },
        "external_only": {
          "aliases": [],
          "description": "Generate alert only to external destinations.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "level": {
          "aliases": [],
          "description": "When an alert is generated, mark its priority via the alert level.\nEnum options - ALERT_LOW, ALERT_MEDIUM, ALERT_HIGH.\nDefault value when not specified in API or module is interpreted by Avi Controller as ALERT_LOW.",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snmp_trap_profile_ref": {
          "aliases": [],
          "description": "Select the snmp trap notification to use when sending alerts via snmp trap.\nIt is a reference to an object of type snmptrapprofile.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "syslog_config_ref": {
          "aliases": [],
          "description": "Select the syslog notification configuration to use when sending alerts via syslog.\nIt is a reference to an object of type alertsyslogconfig.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ActionGroupConfig Avi RESTful Object"
    },
    "examples": "\n- name: Example to create ActionGroupConfig object\n  community.network.avi_actiongroupconfig:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_actiongroupconfig\n"
  },
  "community.network.avi_alertconfig": {
    "doc": {
      "description": "This module is used to configure AlertConfig object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "action_group_ref": {
          "aliases": [],
          "description": "The alert config will trigger the selected alert action, which can send notifications and execute a controlscript.\nIt is a reference to an object of type actiongroupconfig.",
          "required": false,
          "suboptions": {}
        },
        "alert_rule": {
          "aliases": [],
          "description": "List of filters matching on events or client logs used for triggering alerts.",
          "required": true,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "autoscale_alert": {
          "aliases": [],
          "description": "This alert config applies to auto scale alerts.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Determines whether an alert is raised immediately when event occurs (realtime) or after specified number of events occurs within rolling time\nwindow.\nEnum options - REALTIME, ROLLINGWINDOW, WATERMARK.\nDefault value when not specified in API or module is interpreted by Avi Controller as REALTIME.",
          "required": true,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A custom description field.",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable or disable this alert config from generating new alerts.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "expiry_time": {
          "aliases": [],
          "description": "An alert is expired and deleted after the expiry time has elapsed.\nThe original event triggering the alert remains in the event's log.\nAllowed values are 1-31536000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 86400.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the alert configuration.",
          "required": true,
          "suboptions": {}
        },
        "obj_uuid": {
          "aliases": [],
          "description": "Uuid of the resource for which alert was raised.",
          "required": false,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "The object type to which the alert config is associated with.\nValid object types are - virtual service, pool, service engine.\nEnum options - VIRTUALSERVICE, POOL, HEALTHMONITOR, NETWORKPROFILE, APPLICATIONPROFILE, HTTPPOLICYSET, DNSPOLICY, SECURITYPOLICY, IPADDRGROUP,\nSTRINGGROUP, SSLPROFILE, SSLKEYANDCERTIFICATE, NETWORKSECURITYPOLICY, APPLICATIONPERSISTENCEPROFILE, ANALYTICSPROFILE, VSDATASCRIPTSET, TENANT,\nPKIPROFILE, AUTHPROFILE, CLOUD, SERVERAUTOSCALEPOLICY, AUTOSCALELAUNCHCONFIG, MICROSERVICEGROUP, IPAMPROFILE, HARDWARESECURITYMODULEGROUP,\nPOOLGROUP, PRIORITYLABELS, POOLGROUPDEPLOYMENTPOLICY, GSLBSERVICE, GSLBSERVICERUNTIME, SCHEDULER, GSLBGEODBPROFILE,\nGSLBAPPLICATIONPERSISTENCEPROFILE, TRAFFICCLONEPROFILE, VSVIP, WAFPOLICY, WAFPROFILE, ERRORPAGEPROFILE, ERRORPAGEBODY, L4POLICYSET,\nGSLBSERVICERUNTIMEBATCH, WAFPOLICYPSMGROUP, PINGACCESSAGENT, SERVICEENGINEPOLICY, NATPOLICY, SSOPOLICY, PROTOCOLPARSER, SERVICEENGINE,\nDEBUGSERVICEENGINE, DEBUGCONTROLLER, DEBUGVIRTUALSERVICE, SERVICEENGINEGROUP, SEPROPERTIES, NETWORK, CONTROLLERNODE, CONTROLLERPROPERTIES,\nSYSTEMCONFIGURATION, VRFCONTEXT, USER, ALERTCONFIG, ALERTSYSLOGCONFIG, ALERTEMAILCONFIG, ALERTTYPECONFIG, APPLICATION, ROLE, CLOUDPROPERTIES,\nSNMPTRAPPROFILE, ACTIONGROUPPROFILE, MICROSERVICE, ALERTPARAMS, ACTIONGROUPCONFIG, CLOUDCONNECTORUSER, GSLB, GSLBDNSUPDATE, GSLBSITEOPS,\nGLBMGRWARMSTART, IPAMDNSRECORD, GSLBDNSGSSTATUS, GSLBDNSGEOFILEOPS, GSLBDNSGEOUPDATE, GSLBDNSGEOCLUSTEROPS, GSLBDNSCLEANUP, GSLBSITEOPSRESYNC,\nIPAMDNSPROVIDERPROFILE, TCPSTATRUNTIME, UDPSTATRUNTIME, IPSTATRUNTIME, ARPSTATRUNTIME, MBSTATRUNTIME, IPSTKQSTATSRUNTIME, MALLOCSTATRUNTIME,\nSHMALLOCSTATRUNTIME, CPUUSAGERUNTIME, L7GLOBALSTATSRUNTIME, L7VIRTUALSERVICESTATSRUNTIME, SEAGENTVNICDBRUNTIME, SEAGENTGRAPHDBRUNTIME,\nSEAGENTSTATERUNTIME, INTERFACERUNTIME, ARPTABLERUNTIME, DISPATCHERSTATRUNTIME, DISPATCHERSTATCLEARRUNTIME, DISPATCHERTABLEDUMPRUNTIME,\nDISPATCHERREMOTETIMERLISTDUMPRUNTIME, METRICSAGENTMESSAGE, HEALTHMONITORSTATRUNTIME, METRICSENTITYRUNTIME, PERSISTENCEINTERNAL,\nHTTPPOLICYSETINTERNAL, DNSPOLICYINTERNAL, CONNECTIONDUMPRUNTIME, SHAREDDBSTATS, SHAREDDBSTATSCLEAR, ICMPSTATRUNTIME, ROUTETABLERUNTIME,\nVIRTUALMACHINE, POOLSERVER, SEVSLIST, MEMINFORUNTIME, RTERINGSTATRUNTIME, ALGOSTATRUNTIME, HEALTHMONITORRUNTIME, CPUSTATRUNTIME, SEVM, HOST,\nPORTGROUP, CLUSTER, DATACENTER, VCENTER, HTTPPOLICYSETSTATS, DNSPOLICYSTATS, METRICSSESTATS, RATELIMITERSTATRUNTIME, NETWORKSECURITYPOLICYSTATS,\nTCPCONNRUNTIME, POOLSTATS, CONNPOOLINTERNAL, CONNPOOLSTATS, VSHASHSHOWRUNTIME, SELOGSTATSRUNTIME, NETWORKSECURITYPOLICYDETAIL, LICENSERUNTIME,\nSERVERRUNTIME, METRICSRUNTIMESUMMARY, METRICSRUNTIMEDETAIL, DISPATCHERSEHMPROBETEMPDISABLERUNTIME, POOLDEBUG, VSLOGMGRMAP, SERUMINSERTIONSTATS,\nHTTPCACHE, HTTPCACHESTATS, SEDOSSTATRUNTIME, VSDOSSTATRUNTIME, SERVERUPDATEREQ, VSSCALEOUTLIST, SEMEMDISTRUNTIME, TCPCONNRUNTIMEDETAIL,\nSEUPGRADESTATUS, SEUPGRADEPREVIEW, SEFAULTINJECTEXHAUSTM, SEFAULTINJECTEXHAUSTMCL, SEFAULTINJECTEXHAUSTMCLSMALL, SEFAULTINJECTEXHAUSTCONN,\nSEHEADLESSONLINEREQ, SEUPGRADE, SEUPGRADESTATUSDETAIL, SERESERVEDVS, SERESERVEDVSCLEAR, VSCANDIDATESEHOSTLIST, SEGROUPUPGRADE, REBALANCE,\nSEGROUPREBALANCE, SEAUTHSTATSRUNTIME, AUTOSCALESTATE, VIRTUALSERVICEAUTHSTATS, NETWORKSECURITYPOLICYDOS, KEYVALINTERNAL, KEYVALSUMMARYINTERNAL,\nSERVERSTATEUPDATEINFO, CLTRACKINTERNAL, CLTRACKSUMMARYINTERNAL, MICROSERVICERUNTIME, SEMICROSERVICE, VIRTUALSERVICEANALYSIS, CLIENTINTERNAL,\nCLIENTSUMMARYINTERNAL, MICROSERVICEGROUPRUNTIME, BGPRUNTIME, REQUESTQUEUERUNTIME, MIGRATEALL, MIGRATEALLSTATUSSUMMARY, MIGRATEALLSTATUSDETAIL,\nINTERFACESUMMARYRUNTIME, INTERFACELACPRUNTIME, DNSTABLE, GSLBSERVICEDETAIL, GSLBSERVICEINTERNAL, GSLBSERVICEHMONSTAT, SETROLESREQUEST,\nTRAFFICCLONERUNTIME, GEOLOCATIONINFO, SEVSHBSTATRUNTIME, GEODBINTERNAL, GSLBSITEINTERNAL, WAFSTATS, USERDEFINEDDATASCRIPTCOUNTERS, LLDPRUNTIME,\nVSESSHARINGPOOL, NDTABLERUNTIME, IP6STATRUNTIME, ICMP6STATRUNTIME, SEVSSPLACEMENT, L4POLICYSETSTATS, L4POLICYSETINTERNAL, BGPDEBUGINFO, SHARD,\nCPUSTATRUNTIMEDETAIL, SEASSERTSTATRUNTIME, SEFAULTINJECTINFRA, SEAGENTASSERTSTATRUNTIME, SEDATASTORESTATUS, DIFFQUEUESTATUS, IP6ROUTETABLERUNTIME,\nSECURITYMGRSTATE, VIRTUALSERVICESESCALEOUTSTATUS, SHARDSERVERSTATUS, SEAGENTSHARDCLIENTRESOURCEMAP, SEAGENTCONSISTENTHASH, SEAGENTVNICDBHISTORY,\nSEAGENTSHARDCLIENTAPPMAP, SEAGENTSHARDCLIENTEVENTHISTORY, SENATSTATRUNTIME, SENATFLOWRUNTIME, SERESOURCEPROTO, SECONSUMERPROTO,\nSECREATEPENDINGPROTO, PLACEMENTSTATS, SEVIPPROTO, RMVRFPROTO, VCENTERMAP, VIMGRVCENTERRUNTIME, INTERESTEDVMS, INTERESTEDHOSTS,\nVCENTERSUPPORTEDCOUNTERS, ENTITYCOUNTERS, TRANSACTIONSTATS, SEVMCREATEPROGRESS, PLACEMENTSTATUS, VISUBFOLDERS, VIDATASTORE, VIHOSTRESOURCES,\nCLOUDCONNECTOR, VINETWORKSUBNETVMS, VIDATASTORECONTENTS, VIMGRVCENTERCLOUDRUNTIME, VIVCENTERPORTGROUPS, VIVCENTERDATACENTERS, VIMGRHOSTRUNTIME,\nPLACEMENTGLOBALS, APICCONFIGURATION, CIFTABLE, APICTRANSACTION, VIRTUALSERVICESTATEDBCACHESUMMARY, POOLSTATEDBCACHESUMMARY,\nSERVERSTATEDBCACHESUMMARY, APICAGENTINTERNAL, APICTRANSACTIONFLAP, APICGRAPHINSTANCES, APICEPGS, APICEPGEPS, APICDEVICEPKGVER, APICTENANTS,\nAPICVMMDOMAINS, NSXCONFIGURATION, NSXSGTABLE, NSXAGENTINTERNAL, NSXSGINFO, NSXSGIPS, NSXAGENTINTERNALCLI, MAXOBJECTS.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "recommendation": {
          "aliases": [],
          "description": "Recommendation of alertconfig.",
          "required": false,
          "suboptions": {}
        },
        "rolling_window": {
          "aliases": [],
          "description": "Only if the number of events is reached or exceeded within the time window will an alert be generated.\nAllowed values are 1-31536000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "Signifies system events or the type of client logsused in this alert configuration.\nEnum options - CONN_LOGS, APP_LOGS, EVENT_LOGS, METRICS.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "summary": {
          "aliases": [],
          "description": "Summary of reason why alert is generated.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "threshold": {
          "aliases": [],
          "description": "An alert is created only when the number of events meets or exceeds this number within the chosen time frame.\nAllowed values are 1-65536.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "throttle": {
          "aliases": [],
          "description": "Alerts are suppressed (throttled) for this duration of time since the last alert was raised for this alert config.\nAllowed values are 0-31536000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 600.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of AlertConfig Avi RESTful Object"
    },
    "examples": "\n- name: Example to create AlertConfig object\n  community.network.avi_alertconfig:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_alertconfig\n"
  },
  "community.network.avi_alertemailconfig": {
    "doc": {
      "description": "This module is used to configure AlertEmailConfig object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cc_emails": {
          "aliases": [],
          "description": "Alerts are copied to the comma separated list of  email recipients.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A user-friendly name of the email notification service.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "to_emails": {
          "aliases": [],
          "description": "Alerts are sent to the comma separated list of  email recipients.",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of AlertEmailConfig Avi RESTful Object"
    },
    "examples": "\n- name: Example to create AlertEmailConfig object\n  community.network.avi_alertemailconfig:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_alertemailconfig\n"
  },
  "community.network.avi_alertscriptconfig": {
    "doc": {
      "description": "This module is used to configure AlertScriptConfig object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "action_script": {
          "aliases": [],
          "description": "User defined alert action script.\nPlease refer to kb.avinetworks.com for more information.",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A user-friendly name of the script.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of AlertScriptConfig Avi RESTful Object"
    },
    "examples": "\n  - name: Create Alert Script to perform AWS server autoscaling\n    community.network.avi_alertscriptconfig:\n      username: '{{ username }}'\n      controller: '{{ controller }}'\n      password: '{{ password }}'\n      action_script: \"echo Hello\"\n      name: AWS-Launch-Script\n      tenant_ref: Demo\n"
  },
  "community.network.avi_alertsyslogconfig": {
    "doc": {
      "description": "This module is used to configure AlertSyslogConfig object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for alert syslog config.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A user-friendly name of the syslog notification.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "syslog_servers": {
          "aliases": [],
          "description": "The list of syslog servers.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of AlertSyslogConfig Avi RESTful Object"
    },
    "examples": "\n  - name: Create Alert Syslog object to forward all events to external syslog server\n    community.network.avi_alertsyslogconfig:\n      controller: '{{ controller }}'\n      name: Roberts-syslog\n      password: '{{ password }}'\n      syslog_servers:\n      - syslog_server: 10.10.0.100\n        syslog_server_port: 514\n        udp: true\n      tenant_ref: admin\n      username: '{{ username }}'\n"
  },
  "community.network.avi_analyticsprofile": {
    "doc": {
      "description": "This module is used to configure AnalyticsProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "apdex_response_threshold": {
          "aliases": [],
          "description": "If a client receives an http response in less than the satisfactory latency threshold, the request is considered satisfied.\nIt is considered tolerated if it is not satisfied and less than tolerated latency factor multiplied by the satisfactory latency threshold.\nGreater than this number and the client's request is considered frustrated.\nAllowed values are 1-30000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 500.",
          "required": false,
          "suboptions": {}
        },
        "apdex_response_tolerated_factor": {
          "aliases": [],
          "description": "Client tolerated response latency factor.\nClient must receive a response within this factor times the satisfactory threshold (apdex_response_threshold) to be considered tolerated.\nAllowed values are 1-1000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.0.",
          "required": false,
          "suboptions": {}
        },
        "apdex_rtt_threshold": {
          "aliases": [],
          "description": "Satisfactory client to avi round trip time(rtt).\nAllowed values are 1-2000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 250.",
          "required": false,
          "suboptions": {}
        },
        "apdex_rtt_tolerated_factor": {
          "aliases": [],
          "description": "Tolerated client to avi round trip time(rtt) factor.\nIt is a multiple of apdex_rtt_tolerated_factor.\nAllowed values are 1-1000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.0.",
          "required": false,
          "suboptions": {}
        },
        "apdex_rum_threshold": {
          "aliases": [],
          "description": "If a client is able to load a page in less than the satisfactory latency threshold, the pageload is considered satisfied.\nIt is considered tolerated if it is greater than satisfied but less than the tolerated latency multiplied by satisfied latency.\nGreater than this number and the client's request is considered frustrated.\nA pageload includes the time for dns lookup, download of all http objects, and page render time.\nAllowed values are 1-30000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 5000.",
          "required": false,
          "suboptions": {}
        },
        "apdex_rum_tolerated_factor": {
          "aliases": [],
          "description": "Virtual service threshold factor for tolerated page load time (plt) as multiple of apdex_rum_threshold.\nAllowed values are 1-1000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.0.",
          "required": false,
          "suboptions": {}
        },
        "apdex_server_response_threshold": {
          "aliases": [],
          "description": "A server http response is considered satisfied if latency is less than the satisfactory latency threshold.\nThe response is considered tolerated when it is greater than satisfied but less than the tolerated latency factor * s_latency.\nGreater than this number and the server response is considered frustrated.\nAllowed values are 1-30000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 400.",
          "required": false,
          "suboptions": {}
        },
        "apdex_server_response_tolerated_factor": {
          "aliases": [],
          "description": "Server tolerated response latency factor.\nServermust response within this factor times the satisfactory threshold (apdex_server_response_threshold) to be considered tolerated.\nAllowed values are 1-1000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.0.",
          "required": false,
          "suboptions": {}
        },
        "apdex_server_rtt_threshold": {
          "aliases": [],
          "description": "Satisfactory client to avi round trip time(rtt).\nAllowed values are 1-2000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 125.",
          "required": false,
          "suboptions": {}
        },
        "apdex_server_rtt_tolerated_factor": {
          "aliases": [],
          "description": "Tolerated client to avi round trip time(rtt) factor.\nIt is a multiple of apdex_rtt_tolerated_factor.\nAllowed values are 1-1000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.0.",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "client_log_config": {
          "aliases": [],
          "description": "Configure which logs are sent to the avi controller from ses and how they are processed.",
          "required": false,
          "suboptions": {}
        },
        "client_log_streaming_config": {
          "aliases": [],
          "description": "Configure to stream logs to an external server.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "conn_lossy_ooo_threshold": {
          "aliases": [],
          "description": "A connection between client and avi is considered lossy when more than this percentage of out of order packets are received.\nAllowed values are 1-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 50.",
          "required": false,
          "suboptions": {}
        },
        "conn_lossy_timeo_rexmt_threshold": {
          "aliases": [],
          "description": "A connection between client and avi is considered lossy when more than this percentage of packets are retransmitted due to timeout.\nAllowed values are 1-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 20.",
          "required": false,
          "suboptions": {}
        },
        "conn_lossy_total_rexmt_threshold": {
          "aliases": [],
          "description": "A connection between client and avi is considered lossy when more than this percentage of packets are retransmitted.\nAllowed values are 1-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 50.",
          "required": false,
          "suboptions": {}
        },
        "conn_lossy_zero_win_size_event_threshold": {
          "aliases": [],
          "description": "A client connection is considered lossy when percentage of times a packet could not be transmitted due to tcp zero window is above this threshold.\nAllowed values are 0-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2.",
          "required": false,
          "suboptions": {}
        },
        "conn_server_lossy_ooo_threshold": {
          "aliases": [],
          "description": "A connection between avi and server is considered lossy when more than this percentage of out of order packets are received.\nAllowed values are 1-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 50.",
          "required": false,
          "suboptions": {}
        },
        "conn_server_lossy_timeo_rexmt_threshold": {
          "aliases": [],
          "description": "A connection between avi and server is considered lossy when more than this percentage of packets are retransmitted due to timeout.\nAllowed values are 1-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 20.",
          "required": false,
          "suboptions": {}
        },
        "conn_server_lossy_total_rexmt_threshold": {
          "aliases": [],
          "description": "A connection between avi and server is considered lossy when more than this percentage of packets are retransmitted.\nAllowed values are 1-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 50.",
          "required": false,
          "suboptions": {}
        },
        "conn_server_lossy_zero_win_size_event_threshold": {
          "aliases": [],
          "description": "A server connection is considered lossy when percentage of times a packet could not be transmitted due to tcp zero window is above this threshold.\nAllowed values are 0-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "disable_ondemand_metrics": {
          "aliases": [],
          "description": "Virtual service (vs) metrics are processed only when there is live data traffic on the vs.\nIn case, vs is idle for a period of time as specified by ondemand_metrics_idle_timeout then metrics processing is suspended for that vs.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_se_analytics": {
          "aliases": [],
          "description": "Disable node (service engine) level analytics forvs metrics.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_server_analytics": {
          "aliases": [],
          "description": "Disable analytics on backend servers.\nThis may be desired in container environment when there are large number of ephemeral servers.\nAdditionally, no healthscore of servers is computed when server analytics is disabled.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_vs_analytics": {
          "aliases": [],
          "description": "Disable virtualservice (frontend) analytics.\nThis flag disables metrics and healthscore for virtualservice.\nField introduced in 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_advanced_analytics": {
          "aliases": [],
          "description": "Enables advanced analytics features like anomaly detection.\nIf set to false, anomaly computation (and associated rules/events) for vs, pool and server metrics will be disabled.\nHowever, setting it to false reduces cpu and memory requirements for analytics subsystem.\nField introduced in 17.2.13, 18.1.5, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_client_close_before_request_as_error": {
          "aliases": [],
          "description": "Exclude client closed connection before an http request could be completed from being classified as an error.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_dns_policy_drop_as_significant": {
          "aliases": [],
          "description": "Exclude dns policy drops from the list of errors.\nField introduced in 17.2.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_gs_down_as_error": {
          "aliases": [],
          "description": "Exclude queries to gslb services that are operationally down from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_http_error_codes": {
          "aliases": [],
          "description": "List of http status codes to be excluded from being classified as an error.\nError connections or responses impacts health score, are included as significant logs, and may be classified as part of a dos attack.",
          "required": false,
          "suboptions": {}
        },
        "exclude_invalid_dns_domain_as_error": {
          "aliases": [],
          "description": "Exclude dns queries to domains outside the domains configured in the dns application profile from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_invalid_dns_query_as_error": {
          "aliases": [],
          "description": "Exclude invalid dns queries from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_no_dns_record_as_error": {
          "aliases": [],
          "description": "Exclude queries to domains that did not have configured services/records from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_no_valid_gs_member_as_error": {
          "aliases": [],
          "description": "Exclude queries to gslb services that have no available members from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_persistence_change_as_error": {
          "aliases": [],
          "description": "Exclude persistence server changed while load balancing' from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_server_dns_error_as_error": {
          "aliases": [],
          "description": "Exclude server dns error response from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_server_tcp_reset_as_error": {
          "aliases": [],
          "description": "Exclude server tcp reset from errors.\nIt is common for applications like ms exchange.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_sip_error_codes": {
          "aliases": [],
          "description": "List of sip status codes to be excluded from being classified as an error.\nField introduced in 17.2.13, 18.1.5, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "exclude_syn_retransmit_as_error": {
          "aliases": [],
          "description": "Exclude 'server unanswered syns' from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_tcp_reset_as_error": {
          "aliases": [],
          "description": "Exclude tcp resets by client from the list of potential errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_unsupported_dns_query_as_error": {
          "aliases": [],
          "description": "Exclude unsupported dns queries from the list of errors.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "healthscore_max_server_limit": {
          "aliases": [],
          "description": "Skips health score computation of pool servers when number of servers in a pool is more than this setting.\nAllowed values are 0-5000.\nSpecial values are 0- 'server health score is disabled'.\nField introduced in 17.2.13, 18.1.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as 20.",
          "required": false,
          "suboptions": {}
        },
        "hs_event_throttle_window": {
          "aliases": [],
          "description": "Time window (in secs) within which only unique health change events should occur.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1209600.",
          "required": false,
          "suboptions": {}
        },
        "hs_max_anomaly_penalty": {
          "aliases": [],
          "description": "Maximum penalty that may be deducted from health score for anomalies.\nAllowed values are 0-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "hs_max_resources_penalty": {
          "aliases": [],
          "description": "Maximum penalty that may be deducted from health score for high resource utilization.\nAllowed values are 0-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 25.",
          "required": false,
          "suboptions": {}
        },
        "hs_max_security_penalty": {
          "aliases": [],
          "description": "Maximum penalty that may be deducted from health score based on security assessment.\nAllowed values are 0-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 100.",
          "required": false,
          "suboptions": {}
        },
        "hs_min_dos_rate": {
          "aliases": [],
          "description": "Dos connection rate below which the dos security assessment will not kick in.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1000.",
          "required": false,
          "suboptions": {}
        },
        "hs_performance_boost": {
          "aliases": [],
          "description": "Adds free performance score credits to health score.\nIt can be used for compensating health score for known slow applications.\nAllowed values are 0-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "hs_pscore_traffic_threshold_l4_client": {
          "aliases": [],
          "description": "Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_pscore_traffic_threshold_l4_server": {
          "aliases": [],
          "description": "Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_certscore_expired": {
          "aliases": [],
          "description": "Score assigned when the certificate has expired.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_certscore_gt30d": {
          "aliases": [],
          "description": "Score assigned when the certificate expires in more than 30 days.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 5.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_certscore_le07d": {
          "aliases": [],
          "description": "Score assigned when the certificate expires in less than or equal to 7 days.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_certscore_le30d": {
          "aliases": [],
          "description": "Score assigned when the certificate expires in less than or equal to 30 days.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_chain_invalidity_penalty": {
          "aliases": [],
          "description": "Penalty for allowing certificates with invalid chain.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_cipherscore_eq000b": {
          "aliases": [],
          "description": "Score assigned when the minimum cipher strength is 0 bits.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_cipherscore_ge128b": {
          "aliases": [],
          "description": "Score assigned when the minimum cipher strength is greater than equal to 128 bits.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 5.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_cipherscore_lt128b": {
          "aliases": [],
          "description": "Score assigned when the minimum cipher strength is less than 128 bits.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 3.5.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_encalgo_score_none": {
          "aliases": [],
          "description": "Score assigned when no algorithm is used for encryption.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_encalgo_score_rc4": {
          "aliases": [],
          "description": "Score assigned when rc4 algorithm is used for encryption.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2.5.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_hsts_penalty": {
          "aliases": [],
          "description": "Penalty for not enabling hsts.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_nonpfs_penalty": {
          "aliases": [],
          "description": "Penalty for allowing non-pfs handshakes.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_selfsignedcert_penalty": {
          "aliases": [],
          "description": "Deprecated.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_ssl30_score": {
          "aliases": [],
          "description": "Score assigned when supporting ssl3.0 encryption protocol.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 3.5.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_tls10_score": {
          "aliases": [],
          "description": "Score assigned when supporting tls1.0 encryption protocol.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 5.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_tls11_score": {
          "aliases": [],
          "description": "Score assigned when supporting tls1.1 encryption protocol.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 5.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_tls12_score": {
          "aliases": [],
          "description": "Score assigned when supporting tls1.2 encryption protocol.\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 5.0.",
          "required": false,
          "suboptions": {}
        },
        "hs_security_weak_signature_algo_penalty": {
          "aliases": [],
          "description": "Penalty for allowing weak signature algorithm(s).\nAllowed values are 0-5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.0.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the analytics profile.",
          "required": true,
          "suboptions": {}
        },
        "ondemand_metrics_idle_timeout": {
          "aliases": [],
          "description": "This flag sets the time duration of no live data traffic after which virtual service metrics processing is suspended.\nIt is applicable only when disable_ondemand_metrics is set to false.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1800.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ranges": {
          "aliases": [],
          "description": "List of http status code ranges to be excluded from being classified as an error.",
          "required": false,
          "suboptions": {}
        },
        "resp_code_block": {
          "aliases": [],
          "description": "Block of http response codes to be excluded from being classified as an error.\nEnum options - AP_HTTP_RSP_4XX, AP_HTTP_RSP_5XX.",
          "required": false,
          "suboptions": {}
        },
        "sensitive_log_profile": {
          "aliases": [],
          "description": "Rules applied to the http application log for filtering sensitive information.\nField introduced in 17.2.10, 18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "sip_log_depth": {
          "aliases": [],
          "description": "Maximum number of sip messages added in logs for a sip transaction.\nBy default, this value is 20.\nAllowed values are 1-1000.\nField introduced in 17.2.13, 18.1.5, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 20.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the analytics profile.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of AnalyticsProfile Avi RESTful Object"
    },
    "examples": "\n  - name: Create a custom Analytics profile object\n    community.network.avi_analyticsprofile:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      apdex_response_threshold: 500\n      apdex_response_tolerated_factor: 4.0\n      apdex_rtt_threshold: 250\n      apdex_rtt_tolerated_factor: 4.0\n      apdex_rum_threshold: 5000\n      apdex_rum_tolerated_factor: 4.0\n      apdex_server_response_threshold: 400\n      apdex_server_response_tolerated_factor: 4.0\n      apdex_server_rtt_threshold: 125\n      apdex_server_rtt_tolerated_factor: 4.0\n      conn_lossy_ooo_threshold: 50\n      conn_lossy_timeo_rexmt_threshold: 20\n      conn_lossy_total_rexmt_threshold: 50\n      conn_lossy_zero_win_size_event_threshold: 2\n      conn_server_lossy_ooo_threshold: 50\n      conn_server_lossy_timeo_rexmt_threshold: 20\n      conn_server_lossy_total_rexmt_threshold: 50\n      conn_server_lossy_zero_win_size_event_threshold: 2\n      disable_se_analytics: false\n      disable_server_analytics: false\n      exclude_client_close_before_request_as_error: false\n      exclude_persistence_change_as_error: false\n      exclude_server_tcp_reset_as_error: false\n      exclude_syn_retransmit_as_error: false\n      exclude_tcp_reset_as_error: false\n      hs_event_throttle_window: 1209600\n      hs_max_anomaly_penalty: 10\n      hs_max_resources_penalty: 25\n      hs_max_security_penalty: 100\n      hs_min_dos_rate: 1000\n      hs_performance_boost: 20\n      hs_pscore_traffic_threshold_l4_client: 10.0\n      hs_pscore_traffic_threshold_l4_server: 10.0\n      hs_security_certscore_expired: 0.0\n      hs_security_certscore_gt30d: 5.0\n      hs_security_certscore_le07d: 2.0\n      hs_security_certscore_le30d: 4.0\n      hs_security_chain_invalidity_penalty: 1.0\n      hs_security_cipherscore_eq000b: 0.0\n      hs_security_cipherscore_ge128b: 5.0\n      hs_security_cipherscore_lt128b: 3.5\n      hs_security_encalgo_score_none: 0.0\n      hs_security_encalgo_score_rc4: 2.5\n      hs_security_hsts_penalty: 0.0\n      hs_security_nonpfs_penalty: 1.0\n      hs_security_selfsignedcert_penalty: 1.0\n      hs_security_ssl30_score: 3.5\n      hs_security_tls10_score: 5.0\n      hs_security_tls11_score: 5.0\n      hs_security_tls12_score: 5.0\n      hs_security_weak_signature_algo_penalty: 1.0\n      name: jason-analytics-profile\n      tenant_ref: Demo\n"
  },
  "community.network.avi_api_session": {
    "doc": {
      "description": "This module can be used for calling any resources defined in Avi REST API. U(https://avinetworks.com/)\nThis module is useful for invoking HTTP Patch methods and accessing resources that do not have an REST object associated with them.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "HTTP body in YAML or JSON format.",
          "required": false,
          "suboptions": {}
        },
        "http_method": {
          "aliases": [],
          "description": "Allowed HTTP methods for RESTful services and are supported by Avi Controller.",
          "required": true,
          "choices": [
            "get",
            "put",
            "post",
            "patch",
            "delete"
          ],
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "Query parameters passed to the HTTP API.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path for Avi API resource. For example, C(path: virtualservice) will translate to C(api/virtualserivce).",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout (in seconds) for Avi API calls.",
          "default": "60",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Avi API Module"
    },
    "examples": "\n\n  - name: Get Pool Information using avi_api_session\n    community.network.avi_api_session:\n      controller: \"{{ controller }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      http_method: get\n      path: pool\n      params:\n        name: \"{{ pool_name }}\"\n      api_version: 16.4\n    register: pool_results\n\n  - name: Patch Pool with list of servers\n    community.network.avi_api_session:\n      controller: \"{{ controller }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      http_method: patch\n      path: \"{{ pool_path }}\"\n      api_version: 16.4\n      data:\n        add:\n          servers:\n            - ip:\n                addr: 10.10.10.10\n                type: V4\n            - ip:\n                addr: 20.20.20.20\n                type: V4\n    register: updated_pool\n\n  - name: Fetch Pool metrics bandwidth and connections rate\n    community.network.avi_api_session:\n      controller: \"{{ controller }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      http_method: get\n      path: analytics/metrics/pool\n      api_version: 16.4\n      params:\n        name: \"{{ pool_name }}\"\n        metric_id: l4_server.avg_bandwidth,l4_server.avg_complete_conns\n        step: 300\n        limit: 10\n    register: pool_metrics\n\n"
  },
  "community.network.avi_api_version": {
    "doc": {
      "description": "This module can be used to obtain the version of the Avi REST API. U(https://avinetworks.com/)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Avi API Version Module"
    },
    "examples": "\n  - name: Get AVI API version\n    community.network.avi_api_version:\n      controller: \"\"\n      username: \"\"\n      password: \"\"\n      tenant: \"\"\n    register: avi_controller_version\n"
  },
  "community.network.avi_applicationpersistenceprofile": {
    "doc": {
      "description": "This module is used to configure ApplicationPersistenceProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "app_cookie_persistence_profile": {
          "aliases": [],
          "description": "Specifies the application cookie persistence profile parameters.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "hdr_persistence_profile": {
          "aliases": [],
          "description": "Specifies the custom http header persistence profile parameters.",
          "required": false,
          "suboptions": {}
        },
        "http_cookie_persistence_profile": {
          "aliases": [],
          "description": "Specifies the http cookie persistence profile parameters.",
          "required": false,
          "suboptions": {}
        },
        "ip_persistence_profile": {
          "aliases": [],
          "description": "Specifies the client ip persistence profile parameters.",
          "required": false,
          "suboptions": {}
        },
        "is_federated": {
          "aliases": [],
          "description": "This field describes the object's replication scope.\nIf the field is set to false, then the object is visible within the controller-cluster and its associated service-engines.\nIf the field is set to true, then the object is replicated across the federation.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A user-friendly name for the persistence profile.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "persistence_type": {
          "aliases": [],
          "description": "Method used to persist clients to the same server for a duration of time or a session.\nEnum options - PERSISTENCE_TYPE_CLIENT_IP_ADDRESS, PERSISTENCE_TYPE_HTTP_COOKIE, PERSISTENCE_TYPE_TLS, PERSISTENCE_TYPE_CLIENT_IPV6_ADDRESS,\nPERSISTENCE_TYPE_CUSTOM_HTTP_HEADER, PERSISTENCE_TYPE_APP_COOKIE, PERSISTENCE_TYPE_GSLB_SITE.\nDefault value when not specified in API or module is interpreted by Avi Controller as PERSISTENCE_TYPE_CLIENT_IP_ADDRESS.",
          "required": true,
          "suboptions": {}
        },
        "server_hm_down_recovery": {
          "aliases": [],
          "description": "Specifies behavior when a persistent server has been marked down by a health monitor.\nEnum options - HM_DOWN_PICK_NEW_SERVER, HM_DOWN_ABORT_CONNECTION, HM_DOWN_CONTINUE_PERSISTENT_SERVER.\nDefault value when not specified in API or module is interpreted by Avi Controller as HM_DOWN_PICK_NEW_SERVER.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the persistence profile.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ApplicationPersistenceProfile Avi RESTful Object"
    },
    "examples": "\n  - name: Create an Application Persistence setting using http cookie.\n    community.network.avi_applicationpersistenceprofile:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      http_cookie_persistence_profile:\n        always_send_cookie: false\n        cookie_name: My-HTTP\n        key:\n        - aes_key: ShYGZdMks8j6Bpvm2sCvaXWzvXms2Z9ob+TTjRy46lQ=\n          name: c1276819-550c-4adf-912d-59efa5fd7269\n        - aes_key: OGsyVk84VCtyMENFOW0rMnRXVnNrb0RzdG5mT29oamJRb0dlbHZVSjR1az0=\n          name: a080de57-77c3-4580-a3ea-e7a6493c14fd\n        - aes_key: UVN0cU9HWmFUM2xOUzBVcmVXaHFXbnBLVUUxMU1VSktSVU5HWjJOWmVFMTBUMUV4UmxsNk4xQmFZejA9\n          name: 60478846-33c6-484d-868d-bbc324fce4a5\n        timeout: 15\n      name: My-HTTP-Cookie\n      persistence_type: PERSISTENCE_TYPE_HTTP_COOKIE\n      server_hm_down_recovery: HM_DOWN_PICK_NEW_SERVER\n      tenant_ref: Demo\n"
  },
  "community.network.avi_applicationprofile": {
    "doc": {
      "description": "This module is used to configure ApplicationProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_config_cksum": {
          "aliases": [],
          "description": "Checksum of application profiles.\nInternally set by cloud connector.\nField introduced in 17.2.14, 18.1.5, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Name of the application profile creator.\nField introduced in 17.2.14, 18.1.5, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "dns_service_profile": {
          "aliases": [],
          "description": "Specifies various dns service related controls for virtual service.",
          "required": false,
          "suboptions": {}
        },
        "dos_rl_profile": {
          "aliases": [],
          "description": "Specifies various security related controls for virtual service.",
          "required": false,
          "suboptions": {}
        },
        "http_profile": {
          "aliases": [],
          "description": "Specifies the http application proxy profile parameters.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the application profile.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "preserve_client_ip": {
          "aliases": [],
          "description": "Specifies if client ip needs to be preserved for backend connection.\nNot compatible with connection multiplexing.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "preserve_client_port": {
          "aliases": [],
          "description": "Specifies if we need to preserve client port while preserving client ip for backend connections.\nField introduced in 17.2.7.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sip_service_profile": {
          "aliases": [],
          "description": "Specifies various sip service related controls for virtual service.\nField introduced in 17.2.8, 18.1.3, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tcp_app_profile": {
          "aliases": [],
          "description": "Specifies the tcp application proxy profile parameters.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Specifies which application layer proxy is enabled for the virtual service.\nEnum options - APPLICATION_PROFILE_TYPE_L4, APPLICATION_PROFILE_TYPE_HTTP, APPLICATION_PROFILE_TYPE_SYSLOG, APPLICATION_PROFILE_TYPE_DNS,\nAPPLICATION_PROFILE_TYPE_SSL, APPLICATION_PROFILE_TYPE_SIP.",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the application profile.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ApplicationProfile Avi RESTful Object"
    },
    "examples": "\n  - name: Create an Application Profile for HTTP application enabled for SSL traffic\n    community.network.avi_applicationprofile:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      http_profile:\n        cache_config:\n          age_header: true\n          aggressive: false\n          date_header: true\n          default_expire: 600\n          enabled: false\n          heuristic_expire: false\n          max_cache_size: 0\n          max_object_size: 4194304\n          mime_types_group_refs:\n          - admin:System-Cacheable-Resource-Types\n          min_object_size: 100\n          query_cacheable: false\n          xcache_header: true\n        client_body_timeout: 0\n        client_header_timeout: 10000\n        client_max_body_size: 0\n        client_max_header_size: 12\n        client_max_request_size: 48\n        compression_profile:\n          compressible_content_ref: admin:System-Compressible-Content-Types\n          compression: false\n          remove_accept_encoding_header: true\n          type: AUTO_COMPRESSION\n        connection_multiplexing_enabled: true\n        hsts_enabled: false\n        hsts_max_age: 365\n        http_to_https: false\n        httponly_enabled: false\n        keepalive_header: false\n        keepalive_timeout: 30000\n        max_bad_rps_cip: 0\n        max_bad_rps_cip_uri: 0\n        max_bad_rps_uri: 0\n        max_rps_cip: 0\n        max_rps_cip_uri: 0\n        max_rps_unknown_cip: 0\n        max_rps_unknown_uri: 0\n        max_rps_uri: 0\n        post_accept_timeout: 30000\n        secure_cookie_enabled: false\n        server_side_redirect_to_https: false\n        spdy_enabled: false\n        spdy_fwd_proxy_mode: false\n        ssl_client_certificate_mode: SSL_CLIENT_CERTIFICATE_NONE\n        ssl_everywhere_enabled: false\n        websockets_enabled: true\n        x_forwarded_proto_enabled: false\n        xff_alternate_name: X-Forwarded-For\n        xff_enabled: true\n      name: System-HTTP\n      tenant_ref: admin\n      type: APPLICATION_PROFILE_TYPE_HTTP\n"
  },
  "community.network.avi_authprofile": {
    "doc": {
      "description": "This module is used to configure AuthProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "http": {
          "aliases": [],
          "description": "Http user authentication params.",
          "required": false,
          "suboptions": {}
        },
        "ldap": {
          "aliases": [],
          "description": "Ldap server and directory settings.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the auth profile.",
          "required": true,
          "suboptions": {}
        },
        "pa_agent_ref": {
          "aliases": [],
          "description": "Pingaccessagent uuid.\nIt is a reference to an object of type pingaccessagent.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "saml": {
          "aliases": [],
          "description": "Saml settings.\nField introduced in 17.2.3.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tacacs_plus": {
          "aliases": [],
          "description": "Tacacs+ settings.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of the auth profile.\nEnum options - AUTH_PROFILE_LDAP, AUTH_PROFILE_TACACS_PLUS, AUTH_PROFILE_SAML, AUTH_PROFILE_PINGACCESS.",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the auth profile.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of AuthProfile Avi RESTful Object"
    },
    "examples": "\n  - name: Create user authorization profile based on the LDAP\n    community.network.avi_authprofile:\n      controller: '{{ controller }}'\n      password: '{{ password }}'\n      username: '{{ username }}'\n      http:\n        cache_expiration_time: 5\n        group_member_is_full_dn: false\n      ldap:\n        base_dn: dc=avi,dc=local\n        bind_as_administrator: true\n        port: 389\n        security_mode: AUTH_LDAP_SECURE_NONE\n        server:\n        - 10.10.0.100\n        settings:\n          admin_bind_dn: user@avi.local\n          group_filter: (objectClass=*)\n          group_member_attribute: member\n          group_member_is_full_dn: true\n          group_search_dn: dc=avi,dc=local\n          group_search_scope: AUTH_LDAP_SCOPE_SUBTREE\n          ignore_referrals: true\n          password: password\n          user_id_attribute: samAccountname\n          user_search_dn: dc=avi,dc=local\n          user_search_scope: AUTH_LDAP_SCOPE_ONE\n      name: ProdAuth\n      tenant_ref: admin\n      type: AUTH_PROFILE_LDAP\n"
  },
  "community.network.avi_autoscalelaunchconfig": {
    "doc": {
      "description": "This module is used to configure AutoScaleLaunchConfig object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "image_id": {
          "aliases": [],
          "description": "Unique id of the amazon machine image (ami)  or openstack vm id.",
          "required": false,
          "suboptions": {}
        },
        "mesos": {
          "aliases": [],
          "description": "Autoscalemesossettings settings for autoscalelaunchconfig.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "openstack": {
          "aliases": [],
          "description": "Autoscaleopenstacksettings settings for autoscalelaunchconfig.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "use_external_asg": {
          "aliases": [],
          "description": "If set to true, serverautoscalepolicy will use the autoscaling group (external_autoscaling_groups) from pool to perform scale up and scale down.\nPool should have single autoscaling group configured.\nField introduced in 17.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of AutoScaleLaunchConfig Avi RESTful Object"
    },
    "examples": "\n  - name: Create an Autoscale Launch configuration.\n    community.network.avi_autoscalelaunchconfig:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      image_id: default\n      name: default-autoscalelaunchconfig\n      tenant_ref: admin\n"
  },
  "community.network.avi_backup": {
    "doc": {
      "description": "This module is used to configure Backup object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_config_ref": {
          "aliases": [],
          "description": "Backupconfiguration information.\nIt is a reference to an object of type backupconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "file_name": {
          "aliases": [],
          "description": "The file name of backup.",
          "required": true,
          "suboptions": {}
        },
        "local_file_url": {
          "aliases": [],
          "description": "Url to download the backup file.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_file_url": {
          "aliases": [],
          "description": "Url to download the backup file.",
          "required": false,
          "suboptions": {}
        },
        "scheduler_ref": {
          "aliases": [],
          "description": "Scheduler information.\nIt is a reference to an object of type scheduler.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timestamp": {
          "aliases": [],
          "description": "Unix timestamp of when the backup file is created.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Backup Avi RESTful Object"
    },
    "examples": "\n- name: Example to create Backup object\n  community.network.avi_backup:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_backup\n"
  },
  "community.network.avi_backupconfiguration": {
    "doc": {
      "description": "This module is used to configure BackupConfiguration object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "aws_access_key": {
          "aliases": [],
          "description": "Aws access key id.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "aws_bucket_id": {
          "aliases": [],
          "description": "Aws bucket.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "aws_secret_access": {
          "aliases": [],
          "description": "Aws secret access key.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "backup_file_prefix": {
          "aliases": [],
          "description": "Prefix of the exported configuration file.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "backup_passphrase": {
          "aliases": [],
          "description": "Passphrase of backup configuration.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maximum_backups_stored": {
          "aliases": [],
          "description": "Rotate the backup files based on this count.\nAllowed values are 1-20.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of backup configuration.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_directory": {
          "aliases": [],
          "description": "Directory at remote destination with write permission for ssh user.",
          "required": false,
          "suboptions": {}
        },
        "remote_hostname": {
          "aliases": [],
          "description": "Remote destination.",
          "required": false,
          "suboptions": {}
        },
        "save_local": {
          "aliases": [],
          "description": "Local backup.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssh_user_ref": {
          "aliases": [],
          "description": "Access credentials for remote destination.\nIt is a reference to an object of type cloudconnectoruser.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "upload_to_remote_host": {
          "aliases": [],
          "description": "Remote backup.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upload_to_s3": {
          "aliases": [],
          "description": "Cloud backup.\nField introduced in 18.2.3.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of BackupConfiguration Avi RESTful Object"
    },
    "examples": "\n- name: Example to create BackupConfiguration object\n  community.network.avi_backupconfiguration:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_backupconfiguration\n"
  },
  "community.network.avi_certificatemanagementprofile": {
    "doc": {
      "description": "This module is used to configure CertificateManagementProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the pki profile.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "script_params": {
          "aliases": [],
          "description": "List of customparams.",
          "required": false,
          "suboptions": {}
        },
        "script_path": {
          "aliases": [],
          "description": "Script_path of certificatemanagementprofile.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of CertificateManagementProfile Avi RESTful Object"
    },
    "examples": "\n- name: Example to create CertificateManagementProfile object\n  community.network.avi_certificatemanagementprofile:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_certificatemanagementprofile\n"
  },
  "community.network.avi_cloud": {
    "doc": {
      "description": "This module is used to configure Cloud object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "apic_configuration": {
          "aliases": [],
          "description": "Apicconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "apic_mode": {
          "aliases": [],
          "description": "Boolean flag to set apic_mode.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "autoscale_polling_interval": {
          "aliases": [],
          "description": "Cloudconnector polling interval for external autoscale groups.\nField introduced in 18.2.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "aws_configuration": {
          "aliases": [],
          "description": "Awsconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "azure_configuration": {
          "aliases": [],
          "description": "Field introduced in 17.2.1.",
          "required": false,
          "suboptions": {}
        },
        "cloudstack_configuration": {
          "aliases": [],
          "description": "Cloudstackconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_tags": {
          "aliases": [],
          "description": "Custom tags for all avi created resources in the cloud infrastructure.\nField introduced in 17.1.5.",
          "required": false,
          "suboptions": {}
        },
        "dhcp_enabled": {
          "aliases": [],
          "description": "Select the ip address management scheme.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dns_provider_ref": {
          "aliases": [],
          "description": "Dns profile for the cloud.\nIt is a reference to an object of type ipamdnsproviderprofile.",
          "required": false,
          "suboptions": {}
        },
        "docker_configuration": {
          "aliases": [],
          "description": "Dockerconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "east_west_dns_provider_ref": {
          "aliases": [],
          "description": "Dns profile for east-west services.\nIt is a reference to an object of type ipamdnsproviderprofile.",
          "required": false,
          "suboptions": {}
        },
        "east_west_ipam_provider_ref": {
          "aliases": [],
          "description": "Ipam profile for east-west services.\nWarning - please use virtual subnets in this ipam profile that do not conflict with the underlay networks or any overlay networks in the cluster.\nFor example in aws and gcp, 169.254.0.0/16 is used for storing instance metadata.\nHence, it should not be used in this profile.\nIt is a reference to an object of type ipamdnsproviderprofile.",
          "required": false,
          "suboptions": {}
        },
        "enable_vip_static_routes": {
          "aliases": [],
          "description": "Use static routes for vip side network resolution during virtualservice placement.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gcp_configuration": {
          "aliases": [],
          "description": "Google cloud platform configuration.\nField introduced in 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "ip6_autocfg_enabled": {
          "aliases": [],
          "description": "Enable ipv6 auto configuration.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ipam_provider_ref": {
          "aliases": [],
          "description": "Ipam profile for the cloud.\nIt is a reference to an object of type ipamdnsproviderprofile.",
          "required": false,
          "suboptions": {}
        },
        "license_tier": {
          "aliases": [],
          "description": "Specifies the default license tier which would be used by new se groups.\nThis field by default inherits the value from system configuration.\nEnum options - ENTERPRISE_16, ENTERPRISE_18.\nField introduced in 17.2.5.",
          "required": false,
          "suboptions": {}
        },
        "license_type": {
          "aliases": [],
          "description": "If no license type is specified then default license enforcement for the cloud type is chosen.\nThe default mappings are container cloud is max ses, openstack and vmware is cores and linux it is sockets.\nEnum options - LIC_BACKEND_SERVERS, LIC_SOCKETS, LIC_CORES, LIC_HOSTS, LIC_SE_BANDWIDTH, LIC_METERED_SE_BANDWIDTH.",
          "required": false,
          "suboptions": {}
        },
        "linuxserver_configuration": {
          "aliases": [],
          "description": "Linuxserverconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "mesos_configuration": {
          "aliases": [],
          "description": "Field deprecated in 18.2.2.",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "Mtu setting for the cloud.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1500.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "nsx_configuration": {
          "aliases": [],
          "description": "Configuration parameters for nsx manager.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "obj_name_prefix": {
          "aliases": [],
          "description": "Default prefix for all automatically created objects in this cloud.\nThis prefix can be overridden by the se-group template.",
          "required": false,
          "suboptions": {}
        },
        "openstack_configuration": {
          "aliases": [],
          "description": "Openstackconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "oshiftk8s_configuration": {
          "aliases": [],
          "description": "Oshiftk8sconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefer_static_routes": {
          "aliases": [],
          "description": "Prefer static routes over interface routes during virtualservice placement.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "proxy_configuration": {
          "aliases": [],
          "description": "Proxyconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "rancher_configuration": {
          "aliases": [],
          "description": "Rancherconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "state_based_dns_registration": {
          "aliases": [],
          "description": "Dns records for vips are added/deleted based on the operational state of the vips.\nField introduced in 17.1.12.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        },
        "vca_configuration": {
          "aliases": [],
          "description": "Vcloudairconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "vcenter_configuration": {
          "aliases": [],
          "description": "Vcenterconfiguration settings for cloud.",
          "required": false,
          "suboptions": {}
        },
        "vtype": {
          "aliases": [],
          "description": "Cloud type.\nEnum options - CLOUD_NONE, CLOUD_VCENTER, CLOUD_OPENSTACK, CLOUD_AWS, CLOUD_VCA, CLOUD_APIC, CLOUD_MESOS, CLOUD_LINUXSERVER, CLOUD_DOCKER_UCP,\nCLOUD_RANCHER, CLOUD_OSHIFT_K8S, CLOUD_AZURE, CLOUD_GCP.\nDefault value when not specified in API or module is interpreted by Avi Controller as CLOUD_NONE.",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Cloud Avi RESTful Object"
    },
    "examples": "\n  - name: Create a VMware cloud with write access mode\n    community.network.avi_cloud:\n      username: '{{ username }}'\n      controller: '{{ controller }}'\n      password: '{{ password }}'\n      apic_mode: false\n      dhcp_enabled: true\n      enable_vip_static_routes: false\n      license_type: LIC_CORES\n      mtu: 1500\n      name: vCenter Cloud\n      prefer_static_routes: false\n      tenant_ref: admin\n      vcenter_configuration:\n        datacenter_ref: /api/vimgrdcruntime/datacenter-2-10.10.20.100\n        management_network: /api/vimgrnwruntime/dvportgroup-103-10.10.20.100\n        password: password\n        privilege: WRITE_ACCESS\n        username: user\n        vcenter_url: 10.10.20.100\n      vtype: CLOUD_VCENTER\n"
  },
  "community.network.avi_cloudconnectoruser": {
    "doc": {
      "description": "This module is used to configure CloudConnectorUser object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "azure_serviceprincipal": {
          "aliases": [],
          "description": "Field introduced in 17.2.1.",
          "required": false,
          "suboptions": {}
        },
        "azure_userpass": {
          "aliases": [],
          "description": "Field introduced in 17.2.1.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gcp_credentials": {
          "aliases": [],
          "description": "Credentials for google cloud platform.\nField introduced in 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "oci_credentials": {
          "aliases": [],
          "description": "Credentials for oracle cloud infrastructure.\nField introduced in 18.2.1,18.1.3.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "private_key": {
          "aliases": [],
          "description": "Private_key of cloudconnectoruser.",
          "required": false,
          "suboptions": {}
        },
        "public_key": {
          "aliases": [],
          "description": "Public_key of cloudconnectoruser.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tencent_credentials": {
          "aliases": [],
          "description": "Credentials for tencent cloud.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of CloudConnectorUser Avi RESTful Object"
    },
    "examples": "\n  - name: Create a Cloud connector user that is used for integration into cloud platforms\n    community.network.avi_cloudconnectoruser:\n      controller: '{{ controller }}'\n      name: root\n      password: '{{ password }}'\n      private_key: |\n        -----BEGIN RSA PRIVATE KEY-----\n        -----END RSA PRIVATE KEY-----'\n      public_key: 'ssh-rsa ...'\n      tenant_ref: admin\n      username: '{{ username }}'\n"
  },
  "community.network.avi_cloudproperties": {
    "doc": {
      "description": "This module is used to configure CloudProperties object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cc_props": {
          "aliases": [],
          "description": "Cloudconnector properties.",
          "required": false,
          "suboptions": {}
        },
        "cc_vtypes": {
          "aliases": [],
          "description": "Cloud types supported by cloudconnector.\nEnum options - CLOUD_NONE, CLOUD_VCENTER, CLOUD_OPENSTACK, CLOUD_AWS, CLOUD_VCA, CLOUD_APIC, CLOUD_MESOS, CLOUD_LINUXSERVER, CLOUD_DOCKER_UCP,\nCLOUD_RANCHER, CLOUD_OSHIFT_K8S, CLOUD_AZURE, CLOUD_GCP.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hyp_props": {
          "aliases": [],
          "description": "Hypervisor properties.",
          "required": false,
          "suboptions": {}
        },
        "info": {
          "aliases": [],
          "description": "Properties specific to a cloud type.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of CloudProperties Avi RESTful Object"
    },
    "examples": "\n- name: Example to create CloudProperties object\n  community.network.avi_cloudproperties:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_cloudproperties\n"
  },
  "community.network.avi_cluster": {
    "doc": {
      "description": "This module is used to configure Cluster object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "nodes": {
          "aliases": [],
          "description": "List of clusternode.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rejoin_nodes_automatically": {
          "aliases": [],
          "description": "Re-join cluster nodes automatically in the event one of the node is reset to factory.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        },
        "virtual_ip": {
          "aliases": [],
          "description": "A virtual ip address.\nThis ip address will be dynamically reconfigured so that it always is the ip of the cluster leader.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Cluster Avi RESTful Object"
    },
    "examples": "\n- name: Example to create Cluster object\n  community.network.avi_cluster:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_cluster\n"
  },
  "community.network.avi_clusterclouddetails": {
    "doc": {
      "description": "This module is used to configure ClusterCloudDetails object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "azure_info": {
          "aliases": [],
          "description": "Azure info to configure cluster_vip on the controller.\nField introduced in 17.2.5.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Field introduced in 17.2.5.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.2.5.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Field introduced in 17.2.5.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ClusterCloudDetails Avi RESTful Object"
    },
    "examples": "\n- name: Example to create ClusterCloudDetails object\n  community.network.avi_clusterclouddetails:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_clusterclouddetails\n"
  },
  "community.network.avi_controllerproperties": {
    "doc": {
      "description": "This module is used to configure ControllerProperties object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "allow_ip_forwarding": {
          "aliases": [],
          "description": "Field introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allow_unauthenticated_apis": {
          "aliases": [],
          "description": "Allow unauthenticated access for special apis.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allow_unauthenticated_nodes": {
          "aliases": [],
          "description": "Boolean flag to set allow_unauthenticated_nodes.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_idle_timeout": {
          "aliases": [],
          "description": "Allowed values are 0-1440.\nDefault value when not specified in API or module is interpreted by Avi Controller as 15.",
          "required": false,
          "suboptions": {}
        },
        "api_perf_logging_threshold": {
          "aliases": [],
          "description": "Threshold to log request timing in portal_performance.log and server-timing response header.\nAny stage taking longer than 1% of the threshold will be included in the server-timing header.\nField introduced in 18.1.4, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10000.",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "appviewx_compat_mode": {
          "aliases": [],
          "description": "Export configuration in appviewx compatibility mode.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "attach_ip_retry_interval": {
          "aliases": [],
          "description": "Number of attach_ip_retry_interval.\nDefault value when not specified in API or module is interpreted by Avi Controller as 360.",
          "required": false,
          "suboptions": {}
        },
        "attach_ip_retry_limit": {
          "aliases": [],
          "description": "Number of attach_ip_retry_limit.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bm_use_ansible": {
          "aliases": [],
          "description": "Use ansible for se creation in baremetal.\nField introduced in 17.2.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cleanup_expired_authtoken_timeout_period": {
          "aliases": [],
          "description": "Period for auth token cleanup job.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "cleanup_sessions_timeout_period": {
          "aliases": [],
          "description": "Period for sessions cleanup job.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "cloud_reconcile": {
          "aliases": [],
          "description": "Enable/disable periodic reconcile for all the clouds.\nField introduced in 17.2.14,18.1.5,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster_ip_gratuitous_arp_period": {
          "aliases": [],
          "description": "Period for cluster ip gratuitous arp job.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "consistency_check_timeout_period": {
          "aliases": [],
          "description": "Period for consistency check job.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "crashed_se_reboot": {
          "aliases": [],
          "description": "Number of crashed_se_reboot.\nDefault value when not specified in API or module is interpreted by Avi Controller as 900.",
          "required": false,
          "suboptions": {}
        },
        "dead_se_detection_timer": {
          "aliases": [],
          "description": "Number of dead_se_detection_timer.\nDefault value when not specified in API or module is interpreted by Avi Controller as 360.",
          "required": false,
          "suboptions": {}
        },
        "dns_refresh_period": {
          "aliases": [],
          "description": "Period for refresh pool and gslb dns job.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "dummy": {
          "aliases": [],
          "description": "Number of dummy.",
          "required": false,
          "suboptions": {}
        },
        "enable_api_sharding": {
          "aliases": [],
          "description": "This setting enables the controller leader to shard api requests to the followers (if any).\nField introduced in 18.1.5, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_memory_balancer": {
          "aliases": [],
          "description": "Enable/disable memory balancer.\nField introduced in 17.2.8.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fatal_error_lease_time": {
          "aliases": [],
          "description": "Number of fatal_error_lease_time.\nDefault value when not specified in API or module is interpreted by Avi Controller as 120.",
          "required": false,
          "suboptions": {}
        },
        "max_dead_se_in_grp": {
          "aliases": [],
          "description": "Number of max_dead_se_in_grp.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "max_pcap_per_tenant": {
          "aliases": [],
          "description": "Maximum number of pcap files stored per tenant.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.",
          "required": false,
          "suboptions": {}
        },
        "max_seq_attach_ip_failures": {
          "aliases": [],
          "description": "Maximum number of consecutive attach ip failures that halts vs placement.\nField introduced in 17.2.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 3.",
          "required": false,
          "suboptions": {}
        },
        "max_seq_vnic_failures": {
          "aliases": [],
          "description": "Number of max_seq_vnic_failures.\nDefault value when not specified in API or module is interpreted by Avi Controller as 3.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "persistence_key_rotate_period": {
          "aliases": [],
          "description": "Period for rotate app persistence keys job.\nAllowed values are 1-1051200.\nSpecial values are 0 - 'disabled'.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "portal_token": {
          "aliases": [],
          "description": "Token used for uploading tech-support to portal.\nField introduced in 16.4.6,17.1.2.",
          "required": false,
          "suboptions": {}
        },
        "process_locked_useraccounts_timeout_period": {
          "aliases": [],
          "description": "Period for process locked user accounts job.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "process_pki_profile_timeout_period": {
          "aliases": [],
          "description": "Period for process pki profile job.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1440.",
          "required": false,
          "suboptions": {}
        },
        "query_host_fail": {
          "aliases": [],
          "description": "Number of query_host_fail.\nDefault value when not specified in API or module is interpreted by Avi Controller as 180.",
          "required": false,
          "suboptions": {}
        },
        "safenet_hsm_version": {
          "aliases": [],
          "description": "Version of the safenet package installed on the controller.\nField introduced in 16.5.2,17.2.3.",
          "required": false,
          "suboptions": {}
        },
        "se_create_timeout": {
          "aliases": [],
          "description": "Number of se_create_timeout.\nDefault value when not specified in API or module is interpreted by Avi Controller as 900.",
          "required": false,
          "suboptions": {}
        },
        "se_failover_attempt_interval": {
          "aliases": [],
          "description": "Interval between attempting failovers to an se.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "se_from_marketplace": {
          "aliases": [],
          "description": "This setting decides whether se is to be deployed from the cloud marketplace or to be created by the controller.\nThe setting is applicable only when byol license is selected.\nEnum options - MARKETPLACE, IMAGE.\nField introduced in 18.1.4, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as IMAGE.",
          "required": false,
          "suboptions": {}
        },
        "se_offline_del": {
          "aliases": [],
          "description": "Number of se_offline_del.\nDefault value when not specified in API or module is interpreted by Avi Controller as 172000.",
          "required": false,
          "suboptions": {}
        },
        "se_vnic_cooldown": {
          "aliases": [],
          "description": "Number of se_vnic_cooldown.\nDefault value when not specified in API or module is interpreted by Avi Controller as 120.",
          "required": false,
          "suboptions": {}
        },
        "secure_channel_cleanup_timeout": {
          "aliases": [],
          "description": "Period for secure channel cleanup job.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "secure_channel_controller_token_timeout": {
          "aliases": [],
          "description": "Number of secure_channel_controller_token_timeout.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "secure_channel_se_token_timeout": {
          "aliases": [],
          "description": "Number of secure_channel_se_token_timeout.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "seupgrade_fabric_pool_size": {
          "aliases": [],
          "description": "Pool size used for all fabric commands during se upgrade.\nDefault value when not specified in API or module is interpreted by Avi Controller as 20.",
          "required": false,
          "suboptions": {}
        },
        "seupgrade_segroup_min_dead_timeout": {
          "aliases": [],
          "description": "Time to wait before marking segroup upgrade as stuck.\nDefault value when not specified in API or module is interpreted by Avi Controller as 360.",
          "required": false,
          "suboptions": {}
        },
        "ssl_certificate_expiry_warning_days": {
          "aliases": [],
          "description": "Number of days for ssl certificate expiry warning.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unresponsive_se_reboot": {
          "aliases": [],
          "description": "Number of unresponsive_se_reboot.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "upgrade_dns_ttl": {
          "aliases": [],
          "description": "Time to account for dns ttl during upgrade.\nThis is in addition to vs_scalein_timeout_for_upgrade in se_group.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 5.",
          "required": false,
          "suboptions": {}
        },
        "upgrade_lease_time": {
          "aliases": [],
          "description": "Number of upgrade_lease_time.\nDefault value when not specified in API or module is interpreted by Avi Controller as 360.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        },
        "vnic_op_fail_time": {
          "aliases": [],
          "description": "Number of vnic_op_fail_time.\nDefault value when not specified in API or module is interpreted by Avi Controller as 180.",
          "required": false,
          "suboptions": {}
        },
        "vs_apic_scaleout_timeout": {
          "aliases": [],
          "description": "Time to wait for the scaled out se to become ready before marking the scaleout done, applies to apic configuration only.\nDefault value when not specified in API or module is interpreted by Avi Controller as 360.",
          "required": false,
          "suboptions": {}
        },
        "vs_awaiting_se_timeout": {
          "aliases": [],
          "description": "Number of vs_awaiting_se_timeout.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "vs_key_rotate_period": {
          "aliases": [],
          "description": "Period for rotate vs keys job.\nAllowed values are 1-1051200.\nSpecial values are 0 - 'disabled'.\nDefault value when not specified in API or module is interpreted by Avi Controller as 360.",
          "required": false,
          "suboptions": {}
        },
        "vs_scaleout_ready_check_interval": {
          "aliases": [],
          "description": "Interval for checking scaleout_ready status while controller is waiting for scaleoutready rpc from the service engine.\nField introduced in 18.2.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "vs_se_attach_ip_fail": {
          "aliases": [],
          "description": "Time to wait before marking attach ip operation on an se as failed.\nField introduced in 17.2.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 600.",
          "required": false,
          "suboptions": {}
        },
        "vs_se_bootup_fail": {
          "aliases": [],
          "description": "Number of vs_se_bootup_fail.\nDefault value when not specified in API or module is interpreted by Avi Controller as 480.",
          "required": false,
          "suboptions": {}
        },
        "vs_se_create_fail": {
          "aliases": [],
          "description": "Number of vs_se_create_fail.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1500.",
          "required": false,
          "suboptions": {}
        },
        "vs_se_ping_fail": {
          "aliases": [],
          "description": "Number of vs_se_ping_fail.\nDefault value when not specified in API or module is interpreted by Avi Controller as 60.",
          "required": false,
          "suboptions": {}
        },
        "vs_se_vnic_fail": {
          "aliases": [],
          "description": "Number of vs_se_vnic_fail.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "vs_se_vnic_ip_fail": {
          "aliases": [],
          "description": "Number of vs_se_vnic_ip_fail.\nDefault value when not specified in API or module is interpreted by Avi Controller as 120.",
          "required": false,
          "suboptions": {}
        },
        "warmstart_se_reconnect_wait_time": {
          "aliases": [],
          "description": "Number of warmstart_se_reconnect_wait_time.\nDefault value when not specified in API or module is interpreted by Avi Controller as 480.",
          "required": false,
          "suboptions": {}
        },
        "warmstart_vs_resync_wait_time": {
          "aliases": [],
          "description": "Timeout for warmstart vs resync.\nField introduced in 18.1.4, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ControllerProperties Avi RESTful Object"
    },
    "examples": "\n- name: Example to create ControllerProperties object\n  community.network.avi_controllerproperties:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_controllerproperties\n"
  },
  "community.network.avi_customipamdnsprofile": {
    "doc": {
      "description": "This module is used to configure CustomIpamDnsProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the custom ipam dns profile.\nField introduced in 17.1.1.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "script_params": {
          "aliases": [],
          "description": "Parameters that are always passed to the ipam/dns script.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "script_uri": {
          "aliases": [],
          "description": "Script uri of form controller //ipamdnsscripts/<file-name>.\nField introduced in 17.1.1.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Field introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of CustomIpamDnsProfile Avi RESTful Object"
    },
    "examples": "\n- name: Example to create CustomIpamDnsProfile object\n  community.network.avi_customipamdnsprofile:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_customipamdnsprofile\n"
  },
  "community.network.avi_dnspolicy": {
    "doc": {
      "description": "This module is used to configure DnsPolicy object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Field introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the dns policy.\nField introduced in 17.1.1.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Dns rules.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the dns policy.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of DnsPolicy Avi RESTful Object"
    },
    "examples": "\n- name: Example to create DnsPolicy object\n  community.network.avi_dnspolicy:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_dnspolicy\n"
  },
  "community.network.avi_errorpagebody": {
    "doc": {
      "description": "This module is used to configure ErrorPageBody object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "error_page_body": {
          "aliases": [],
          "description": "Error page body sent to client when match.\nField introduced in 17.2.4.",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "Format of an error page body html or json.\nEnum options - ERROR_PAGE_FORMAT_HTML, ERROR_PAGE_FORMAT_JSON.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as ERROR_PAGE_FORMAT_HTML.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Field introduced in 17.2.4.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.2.4.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Field introduced in 17.2.4.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ErrorPageBody Avi RESTful Object"
    },
    "examples": "\n- name: Example to create ErrorPageBody object\n  community.network.avi_errorpagebody:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_errorpagebody\n"
  },
  "community.network.avi_errorpageprofile": {
    "doc": {
      "description": "This module is used to configure ErrorPageProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "app_name": {
          "aliases": [],
          "description": "Name of the virtual service which generated the error page.\nField deprecated in 18.1.1.\nField introduced in 17.2.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as VS Name.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "company_name": {
          "aliases": [],
          "description": "Name of the company to show in error page.\nField deprecated in 18.1.1.\nField introduced in 17.2.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as Avi Networks.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "error_pages": {
          "aliases": [],
          "description": "Defined error pages for http status codes.\nField introduced in 17.2.4.",
          "required": false,
          "suboptions": {}
        },
        "host_name": {
          "aliases": [],
          "description": "Fully qualified domain name for which the error page is generated.\nField deprecated in 18.1.1.\nField introduced in 17.2.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as Host Header.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Field introduced in 17.2.4.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.2.4.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Field introduced in 17.2.4.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ErrorPageProfile Avi RESTful Object"
    },
    "examples": "\n- name: Example to create ErrorPageProfile object\n  community.network.avi_errorpageprofile:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_errorpageprofile\n"
  },
  "community.network.avi_gslb": {
    "doc": {
      "description": "This module is used to configure Gslb object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "async_interval": {
          "aliases": [],
          "description": "Frequency with which messages are propagated to vs mgr.\nValue of 0 disables async behavior and rpc are sent inline.\nAllowed values are 0-5.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "clear_on_max_retries": {
          "aliases": [],
          "description": "Max retries after which the remote site is treated as a fresh start.\nIn fresh start all the configs are downloaded.\nAllowed values are 1-1024.\nDefault value when not specified in API or module is interpreted by Avi Controller as 20.",
          "required": false,
          "suboptions": {}
        },
        "client_ip_addr_group": {
          "aliases": [],
          "description": "Group to specify if the client ip addresses are public or private.\nField introduced in 17.1.2.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "dns_configs": {
          "aliases": [],
          "description": "Sub domain configuration for the gslb.\nGslb service's fqdn must be a match one of these subdomains.",
          "required": false,
          "suboptions": {}
        },
        "is_federated": {
          "aliases": [],
          "description": "This field indicates that this object is replicated across gslb federation.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "leader_cluster_uuid": {
          "aliases": [],
          "description": "Mark this site as leader of gslb configuration.\nThis site is the one among the avi sites.",
          "required": true,
          "suboptions": {}
        },
        "maintenance_mode": {
          "aliases": [],
          "description": "This field disables the configuration operations on the leader for all federated objects.\nCud operations on gslb, gslbservice, gslbgeodbprofile and other federated objects will be rejected.\nThe rest-api disabling helps in upgrade scenarios where we don't want configuration sync operations to the gslb member when the member is being\nupgraded.\nThis configuration programmatically blocks the leader from accepting new gslb configuration when member sites are undergoing upgrade.\nField introduced in 17.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the gslb object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "send_interval": {
          "aliases": [],
          "description": "Frequency with which group members communicate.\nAllowed values are 1-3600.\nDefault value when not specified in API or module is interpreted by Avi Controller as 15.",
          "required": false,
          "suboptions": {}
        },
        "send_interval_prior_to_maintenance_mode": {
          "aliases": [],
          "description": "The user can specify a send-interval while entering maintenance mode.\nThe validity of this 'maintenance send-interval' is only during maintenance mode.\nWhen the user leaves maintenance mode, the original send-interval is reinstated.\nThis internal variable is used to store the original send-interval.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "sites": {
          "aliases": [],
          "description": "Select avi site member belonging to this gslb.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "third_party_sites": {
          "aliases": [],
          "description": "Third party site member belonging to this gslb.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the gslb object.",
          "required": false,
          "suboptions": {}
        },
        "view_id": {
          "aliases": [],
          "description": "The view-id is used in change-leader mode to differentiate partitioned groups while they have the same gslb namespace.\nEach partitioned group will be able to operate independently by using the view-id.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Gslb Avi RESTful Object"
    },
    "examples": "\n- name: Example to create Gslb object\n  community.network.avi_gslb:\n    name: \"test-gslb\"\n    avi_credentials:\n      username: '{{ username }}'\n      password: '{{ password }}'\n      controller: '{{ controller }}'\n    sites:\n      - name: \"test-site1\"\n        username: \"gslb_username\"\n        password: \"gslb_password\"\n        ip_addresses:\n          - type: \"V4\"\n            addr: \"10.10.28.83\"\n        enabled: True\n        member_type: \"GSLB_ACTIVE_MEMBER\"\n        port: 443\n        cluster_uuid: \"cluster-d4ee5fcc-3e0a-4d4f-9ae6-4182bc605829\"\n      - name: \"test-site2\"\n        username: \"gslb_username\"\n        password: \"gslb_password\"\n        ip_addresses:\n          - type: \"V4\"\n            addr: \"10.10.28.86\"\n        enabled: True\n        member_type: \"GSLB_ACTIVE_MEMBER\"\n        port: 443\n        cluster_uuid: \"cluster-0c37ae8d-ab62-410c-ad3e-06fa831950b1\"\n    dns_configs:\n      - domain_name: \"test1.com\"\n      - domain_name: \"test2.com\"\n    leader_cluster_uuid: \"cluster-d4ee5fcc-3e0a-4d4f-9ae6-4182bc605829\"\n\n- name: Update Gslb site's configurations (Patch Add Operation)\n  community.network.avi_gslb:\n    avi_credentials:\n      username: '{{ username }}'\n      password: '{{ password }}'\n      controller: '{{ controller }}'\n    avi_api_update_method: patch\n    avi_api_patch_op: add\n    leader_cluster_uuid: \"cluster-d4ee5fcc-3e0a-4d4f-9ae6-4182bc605829\"\n    name: \"test-gslb\"\n    dns_configs:\n      - domain_name: \"temp1.com\"\n      - domain_name: \"temp2.com\"\n    gslb_sites_config:\n      - ip_addr: \"10.10.28.83\"\n        dns_vses:\n          - dns_vs_uuid: \"virtualservice-f2a711cd-5e78-473f-8f47-d12de660fd62\"\n            domain_names:\n              - \"test1.com\"\n              - \"test2.com\"\n      - ip_addr: \"10.10.28.86\"\n        dns_vses:\n          - dns_vs_uuid: \"virtualservice-c1a63a16-f2a1-4f41-aab4-1e90f92a5e49\"\n            domain_names:\n              - \"temp1.com\"\n              - \"temp2.com\"\n\n- name: Update Gslb site's configurations (Patch Replace Operation)\n  community.network.avi_gslb:\n    avi_credentials:\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      controller: \"{{ controller }}\"\n    # On basis of cluster leader uuid dns_configs is set for that particular leader cluster\n    leader_cluster_uuid: \"cluster-84aa795f-8f09-42bb-97a4-5103f4a53da9\"\n    name: \"test-gslb\"\n    avi_api_update_method: patch\n    avi_api_patch_op: replace\n    dns_configs:\n      - domain_name: \"test3.com\"\n      - domain_name: \"temp3.com\"\n    gslb_sites_config:\n      # Ip address is mapping key for dns_vses field update. For the given IP address,\n      # dns_vses is updated.\n      - ip_addr: \"10.10.28.83\"\n        dns_vses:\n          - dns_vs_uuid: \"virtualservice-7c947ed4-77f3-4a52-909c-4f12afaf5bb0\"\n            domain_names:\n              - \"test3.com\"\n      - ip_addr: \"10.10.28.86\"\n        dns_vses:\n          - dns_vs_uuid: \"virtualservice-799b2c6d-7f2d-4c3f-94c6-6e813b20b674\"\n            domain_names:\n              - \"temp3.com\"\n\n- name: Update Gslb site's configurations (Patch Delete Operation)\n  community.network.avi_gslb:\n    avi_credentials:\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      controller: \"{{ controller }}\"\n    # On basis of cluster leader uuid dns_configs is set for that particular leader cluster\n    leader_cluster_uuid: \"cluster-84aa795f-8f09-42bb-97a4-5103f4a53da9\"\n    name: \"test-gslb\"\n    avi_api_update_method: patch\n    avi_api_patch_op: delete\n    dns_configs:\n    gslb_sites_config:\n      - ip_addr: \"10.10.28.83\"\n      - ip_addr: \"10.10.28.86\"\n"
  },
  "community.network.avi_gslbgeodbprofile": {
    "doc": {
      "description": "This module is used to configure GslbGeoDbProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Field introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "entries": {
          "aliases": [],
          "description": "List of geodb entries.\nAn entry can either be a geodb file or an ip address group with geo properties.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "is_federated": {
          "aliases": [],
          "description": "This field indicates that this object is replicated across gslb federation.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A user-friendly name for the geodb profile.\nField introduced in 17.1.1.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the geodb profile.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of GslbGeoDbProfile Avi RESTful Object"
    },
    "examples": "\n- name: Example to create GslbGeoDbProfile object\n  community.network.avi_gslbgeodbprofile:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_gslbgeodbprofile\n"
  },
  "community.network.avi_gslbservice": {
    "doc": {
      "description": "This module is used to configure GslbService object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "application_persistence_profile_ref": {
          "aliases": [],
          "description": "The federated application persistence associated with gslbservice site persistence functionality.\nIt is a reference to an object of type applicationpersistenceprofile.\nField introduced in 17.2.1.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_health_status_enabled": {
          "aliases": [],
          "description": "Gs member's overall health status is derived based on a combination of controller and datapath health-status inputs.\nNote that the datapath status is determined by the association of health monitor profiles.\nOnly the controller provided status is determined through this configuration.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.\nField introduced in 17.1.2.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "domain_names": {
          "aliases": [],
          "description": "Fully qualified domain name of the gslb service.",
          "required": false,
          "suboptions": {}
        },
        "down_response": {
          "aliases": [],
          "description": "Response to the client query when the gslb service is down.",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable or disable the gslb service.\nIf the gslb service is enabled, then the vips are sent in the dns responses based on reachability and configured algorithm.\nIf the gslb service is disabled, then the vips are no longer available in the dns response.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "Select list of pools belonging to this gslb service.",
          "required": false,
          "suboptions": {}
        },
        "health_monitor_refs": {
          "aliases": [],
          "description": "Verify vs health by applying one or more health monitors.\nActive monitors generate synthetic traffic from dns service engine and to mark a vs up or down based on the response.\nIt is a reference to an object of type healthmonitor.",
          "required": false,
          "suboptions": {}
        },
        "health_monitor_scope": {
          "aliases": [],
          "description": "Health monitor probe can be executed for all the members or it can be executed only for third-party members.\nThis operational mode is useful to reduce the number of health monitor probes in case of a hybrid scenario.\nIn such a case, avi members can have controller derived status while non-avi members can be probed by via health monitor probes in dataplane.\nEnum options - GSLB_SERVICE_HEALTH_MONITOR_ALL_MEMBERS, GSLB_SERVICE_HEALTH_MONITOR_ONLY_NON_AVI_MEMBERS.\nDefault value when not specified in API or module is interpreted by Avi Controller as GSLB_SERVICE_HEALTH_MONITOR_ALL_MEMBERS.",
          "required": false,
          "suboptions": {}
        },
        "hm_off": {
          "aliases": [],
          "description": "This field is an internal field and is used in se.\nField introduced in 18.2.2.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_federated": {
          "aliases": [],
          "description": "This field indicates that this object is replicated across gslb federation.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "min_members": {
          "aliases": [],
          "description": "The minimum number of members to distribute traffic to.\nAllowed values are 1-65535.\nSpecial values are 0 - 'disable'.\nField introduced in 17.2.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the gslb service.",
          "required": true,
          "suboptions": {}
        },
        "num_dns_ip": {
          "aliases": [],
          "description": "Number of ip addresses of this gslb service to be returned by the dns service.\nEnter 0 to return all ip addresses.\nAllowed values are 1-20.\nSpecial values are 0- 'return all ip addresses'.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pool_algorithm": {
          "aliases": [],
          "description": "The load balancing algorithm will pick a gslb pool within the gslb service list of available pools.\nEnum options - GSLB_SERVICE_ALGORITHM_PRIORITY, GSLB_SERVICE_ALGORITHM_GEO.\nField introduced in 17.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as GSLB_SERVICE_ALGORITHM_PRIORITY.",
          "required": false,
          "suboptions": {}
        },
        "site_persistence_enabled": {
          "aliases": [],
          "description": "Enable site-persistence for the gslbservice.\nField introduced in 17.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Ttl value (in seconds) for records served for this gslb service by the dns service.\nAllowed values are 0-86400.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "use_edns_client_subnet": {
          "aliases": [],
          "description": "Use the client ip subnet from the edns option as source ipaddress for client geo-location and consistent hash algorithm.\nDefault is true.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the gslb service.",
          "required": false,
          "suboptions": {}
        },
        "wildcard_match": {
          "aliases": [],
          "description": "Enable wild-card match of fqdn  if an exact match is not found in the dns table, the longest match is chosen by wild-carding the fqdn in the dns\nrequest.\nDefault is false.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of GslbService Avi RESTful Object"
    },
    "examples": "\n- name: Example to create GslbService object\n  community.network.avi_gslbservice:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_gslbservice\n"
  },
  "community.network.avi_gslbservice_patch_member": {
    "doc": {
      "description": "This module can be used for calling any resources defined in Avi REST API. U(https://avinetworks.com/)\nThis module is useful for invoking HTTP Patch methods and accessing resources that do not have an REST object associated with them.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "HTTP body of GSLB Service Member in YAML or JSON format.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the GSLB Service",
          "required": true,
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "Query parameters passed to the HTTP API.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied to the member. Member is\nidentified using field member.ip.addr.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Avi API Module"
    },
    "examples": "\n  - name: Patch GSLB Service to add a new member and group\n    community.network.avi_gslbservice_patch_member:\n      controller: \"{{ controller }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      name: gs-3\n      api_version: 17.2.1\n      data:\n        group:\n          name: newfoo\n          priority: 60\n          members:\n            - enabled: true\n              ip:\n                addr:  10.30.10.66\n                type: V4\n              ratio: 3\n  - name: Patch GSLB Service to delete an existing member\n    community.network.avi_gslbservice_patch_member:\n      controller: \"{{ controller }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      name: gs-3\n      state: absent\n      api_version: 17.2.1\n      data:\n        group:\n          name: newfoo\n          members:\n            - enabled: true\n              ip:\n                addr:  10.30.10.68\n                type: V4\n              ratio: 3\n  - name: Update priority of GSLB Service Pool\n    community.network.avi_gslbservice_patch_member:\n      controller: \"\"\n      username: \"\"\n      password: \"\"\n      name: gs-3\n      state: present\n      api_version: 17.2.1\n      data:\n        group:\n          name: newfoo\n          priority: 42\n"
  },
  "community.network.avi_hardwaresecuritymodulegroup": {
    "doc": {
      "description": "This module is used to configure HardwareSecurityModuleGroup object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hsm": {
          "aliases": [],
          "description": "Hardware security module configuration.",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the hsm group configuration object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the hsm group configuration object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of HardwareSecurityModuleGroup Avi RESTful Object"
    },
    "examples": "\n- name: Example to create HardwareSecurityModuleGroup object\n  community.network.avi_hardwaresecuritymodulegroup:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_hardwaresecuritymodulegroup\n"
  },
  "community.network.avi_healthmonitor": {
    "doc": {
      "description": "This module is used to configure HealthMonitor object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "dns_monitor": {
          "aliases": [],
          "description": "Healthmonitordns settings for healthmonitor.",
          "required": false,
          "suboptions": {}
        },
        "external_monitor": {
          "aliases": [],
          "description": "Healthmonitorexternal settings for healthmonitor.",
          "required": false,
          "suboptions": {}
        },
        "failed_checks": {
          "aliases": [],
          "description": "Number of continuous failed health checks before the server is marked down.\nAllowed values are 1-50.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2.",
          "required": false,
          "suboptions": {}
        },
        "http_monitor": {
          "aliases": [],
          "description": "Healthmonitorhttp settings for healthmonitor.",
          "required": false,
          "suboptions": {}
        },
        "https_monitor": {
          "aliases": [],
          "description": "Healthmonitorhttp settings for healthmonitor.",
          "required": false,
          "suboptions": {}
        },
        "is_federated": {
          "aliases": [],
          "description": "This field describes the object's replication scope.\nIf the field is set to false, then the object is visible within the controller-cluster and its associated service-engines.\nIf the field is set to true, then the object is replicated across the federation.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "monitor_port": {
          "aliases": [],
          "description": "Use this port instead of the port defined for the server in the pool.\nIf the monitor succeeds to this port, the load balanced traffic will still be sent to the port of the server defined within the pool.\nAllowed values are 1-65535.\nSpecial values are 0 - 'use server port'.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A user friendly name for this health monitor.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "radius_monitor": {
          "aliases": [],
          "description": "Health monitor for radius.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "receive_timeout": {
          "aliases": [],
          "description": "A valid response from the server is expected within the receive timeout window.\nThis timeout must be less than the send interval.\nIf server status is regularly flapping up and down, consider increasing this value.\nAllowed values are 1-2400.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.",
          "required": false,
          "suboptions": {}
        },
        "send_interval": {
          "aliases": [],
          "description": "Frequency, in seconds, that monitors are sent to a server.\nAllowed values are 1-3600.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "sip_monitor": {
          "aliases": [],
          "description": "Health monitor for sip.\nField introduced in 17.2.8, 18.1.3, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "successful_checks": {
          "aliases": [],
          "description": "Number of continuous successful health checks before server is marked up.\nAllowed values are 1-50.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2.",
          "required": false,
          "suboptions": {}
        },
        "tcp_monitor": {
          "aliases": [],
          "description": "Healthmonitortcp settings for healthmonitor.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of the health monitor.\nEnum options - HEALTH_MONITOR_PING, HEALTH_MONITOR_TCP, HEALTH_MONITOR_HTTP, HEALTH_MONITOR_HTTPS, HEALTH_MONITOR_EXTERNAL, HEALTH_MONITOR_UDP,\nHEALTH_MONITOR_DNS, HEALTH_MONITOR_GSLB, HEALTH_MONITOR_SIP, HEALTH_MONITOR_RADIUS.",
          "required": true,
          "suboptions": {}
        },
        "udp_monitor": {
          "aliases": [],
          "description": "Healthmonitorudp settings for healthmonitor.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the health monitor.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of HealthMonitor Avi RESTful Object"
    },
    "examples": "\n- name: Create a HTTPS health monitor\n  community.network.avi_healthmonitor:\n    controller: 10.10.27.90\n    username: admin\n    password: AviNetworks123!\n    https_monitor:\n      http_request: HEAD / HTTP/1.0\n      http_response_code:\n        - HTTP_2XX\n        - HTTP_3XX\n    receive_timeout: 4\n    failed_checks: 3\n    send_interval: 10\n    successful_checks: 3\n    type: HEALTH_MONITOR_HTTPS\n    name: MyWebsite-HTTPS\n"
  },
  "community.network.avi_httppolicyset": {
    "doc": {
      "description": "This module is used to configure HTTPPolicySet object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_config_cksum": {
          "aliases": [],
          "description": "Checksum of cloud configuration for pool.\nInternally set by cloud connector.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "http_request_policy": {
          "aliases": [],
          "description": "Http request policy for the virtual service.",
          "required": false,
          "suboptions": {}
        },
        "http_response_policy": {
          "aliases": [],
          "description": "Http response policy for the virtual service.",
          "required": false,
          "suboptions": {}
        },
        "http_security_policy": {
          "aliases": [],
          "description": "Http security policy for the virtual service.",
          "required": false,
          "suboptions": {}
        },
        "is_internal_policy": {
          "aliases": [],
          "description": "Boolean flag to set is_internal_policy.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the http policy set.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the http policy set.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of HTTPPolicySet Avi RESTful Object"
    },
    "examples": "\n- name: Create a HTTP Policy set two switch between testpool1 and testpool2\n  community.network.avi_httppolicyset:\n    controller: 10.10.27.90\n    username: admin\n    password: AviNetworks123!\n    name: test-HTTP-Policy-Set\n    tenant_ref: admin\n    http_request_policy:\n    rules:\n      - index: 1\n        enable: true\n        name: test-test1\n        match:\n          path:\n            match_case: INSENSITIVE\n            match_str:\n              - /test1\n            match_criteria: EQUALS\n        switching_action:\n          action: HTTP_SWITCHING_SELECT_POOL\n          status_code: HTTP_LOCAL_RESPONSE_STATUS_CODE_200\n          pool_ref: \"/api/pool?name=testpool1\"\n      - index: 2\n        enable: true\n        name: test-test2\n        match:\n          path:\n            match_case: INSENSITIVE\n            match_str:\n              - /test2\n            match_criteria: CONTAINS\n        switching_action:\n          action: HTTP_SWITCHING_SELECT_POOL\n          status_code: HTTP_LOCAL_RESPONSE_STATUS_CODE_200\n          pool_ref: \"/api/pool?name=testpool2\"\n    is_internal_policy: false\n"
  },
  "community.network.avi_ipaddrgroup": {
    "doc": {
      "description": "This module is used to configure IpAddrGroup object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "addrs": {
          "aliases": [],
          "description": "Configure ip address(es).",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "apic_epg_name": {
          "aliases": [],
          "description": "Populate ip addresses from members of this cisco apic epg.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "country_codes": {
          "aliases": [],
          "description": "Populate the ip address ranges from the geo database for this country.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "ip_ports": {
          "aliases": [],
          "description": "Configure (ip address, port) tuple(s).",
          "required": false,
          "suboptions": {}
        },
        "marathon_app_name": {
          "aliases": [],
          "description": "Populate ip addresses from tasks of this marathon app.",
          "required": false,
          "suboptions": {}
        },
        "marathon_service_port": {
          "aliases": [],
          "description": "Task port associated with marathon service port.\nIf marathon app has multiple service ports, this is required.\nElse, the first task port is used.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the ip address group.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefixes": {
          "aliases": [],
          "description": "Configure ip address prefix(es).",
          "required": false,
          "suboptions": {}
        },
        "ranges": {
          "aliases": [],
          "description": "Configure ip address range(s).",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the ip address group.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of IpAddrGroup Avi RESTful Object"
    },
    "examples": "\n  - name: Create an IP Address Group configuration\n    community.network.avi_ipaddrgroup:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      name: Client-Source-Block\n      prefixes:\n      - ip_addr:\n          addr: 10.0.0.0\n          type: V4\n        mask: 8\n      - ip_addr:\n          addr: 172.16.0.0\n          type: V4\n        mask: 12\n      - ip_addr:\n          addr: 192.168.0.0\n          type: V4\n        mask: 16\n"
  },
  "community.network.avi_ipamdnsproviderprofile": {
    "doc": {
      "description": "This module is used to configure IpamDnsProviderProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "allocate_ip_in_vrf": {
          "aliases": [],
          "description": "If this flag is set, only allocate ip from networks in the virtual service vrf.\nApplicable for avi vantage ipam only.\nField introduced in 17.2.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "aws_profile": {
          "aliases": [],
          "description": "Provider details if type is aws.",
          "required": false,
          "suboptions": {}
        },
        "azure_profile": {
          "aliases": [],
          "description": "Provider details if type is microsoft azure.\nField introduced in 17.2.1.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_profile": {
          "aliases": [],
          "description": "Provider details if type is custom.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "gcp_profile": {
          "aliases": [],
          "description": "Provider details if type is google cloud.",
          "required": false,
          "suboptions": {}
        },
        "infoblox_profile": {
          "aliases": [],
          "description": "Provider details if type is infoblox.",
          "required": false,
          "suboptions": {}
        },
        "internal_profile": {
          "aliases": [],
          "description": "Provider details if type is avi.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the ipam/dns provider profile.",
          "required": true,
          "suboptions": {}
        },
        "oci_profile": {
          "aliases": [],
          "description": "Provider details for oracle cloud.\nField introduced in 18.2.1,18.1.3.",
          "required": false,
          "suboptions": {}
        },
        "openstack_profile": {
          "aliases": [],
          "description": "Provider details if type is openstack.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_configuration": {
          "aliases": [],
          "description": "Field introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tencent_profile": {
          "aliases": [],
          "description": "Provider details for tencent cloud.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Provider type for the ipam/dns provider profile.\nEnum options - IPAMDNS_TYPE_INFOBLOX, IPAMDNS_TYPE_AWS, IPAMDNS_TYPE_OPENSTACK, IPAMDNS_TYPE_GCP, IPAMDNS_TYPE_INFOBLOX_DNS, IPAMDNS_TYPE_CUSTOM,\nIPAMDNS_TYPE_CUSTOM_DNS, IPAMDNS_TYPE_AZURE, IPAMDNS_TYPE_OCI, IPAMDNS_TYPE_TENCENT, IPAMDNS_TYPE_INTERNAL, IPAMDNS_TYPE_INTERNAL_DNS,\nIPAMDNS_TYPE_AWS_DNS, IPAMDNS_TYPE_AZURE_DNS.",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the ipam/dns provider profile.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of IpamDnsProviderProfile Avi RESTful Object"
    },
    "examples": "\n  - name: Create IPAM DNS provider setting\n    community.network.avi_ipamdnsproviderprofile:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      internal_profile:\n        dns_service_domain:\n        - domain_name: ashish.local\n          num_dns_ip: 1\n          pass_through: true\n          record_ttl: 100\n        - domain_name: guru.local\n          num_dns_ip: 1\n          pass_through: true\n          record_ttl: 200\n        ttl: 300\n      name: Ashish-DNS\n      tenant_ref: Demo\n      type: IPAMDNS_TYPE_INTERNAL\n"
  },
  "community.network.avi_l4policyset": {
    "doc": {
      "description": "This module is used to configure L4PolicySet object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.\nField introduced in 17.2.7.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Field introduced in 17.2.7.",
          "required": false,
          "suboptions": {}
        },
        "is_internal_policy": {
          "aliases": [],
          "description": "Field introduced in 17.2.7.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "l4_connection_policy": {
          "aliases": [],
          "description": "Policy to apply when a new transport connection is setup.\nField introduced in 17.2.7.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the l4 policy set.\nField introduced in 17.2.7.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.2.7.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Id of the l4 policy set.\nField introduced in 17.2.7.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of L4PolicySet Avi RESTful Object"
    },
    "examples": "\n- name: Example to create L4PolicySet object\n  community.network.avi_l4policyset:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_l4policyset\n"
  },
  "community.network.avi_microservicegroup": {
    "doc": {
      "description": "This module is used to configure MicroServiceGroup object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the microservice group.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_refs": {
          "aliases": [],
          "description": "Configure microservice(es).\nIt is a reference to an object of type microservice.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the microservice group.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of MicroServiceGroup Avi RESTful Object"
    },
    "examples": "\n  - name: Create a Microservice Group that can be used for setting up Network security policy\n    community.network.avi_microservicegroup:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      description: Group created by my Secure My App UI.\n      name: vs-msg-marketing\n      tenant_ref: admin\n"
  },
  "community.network.avi_network": {
    "doc": {
      "description": "This module is used to configure Network object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.",
          "required": false,
          "suboptions": {}
        },
        "configured_subnets": {
          "aliases": [],
          "description": "List of subnet.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dhcp_enabled": {
          "aliases": [],
          "description": "Select the ip address management scheme for this network.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_discovered_subnets": {
          "aliases": [],
          "description": "When selected, excludes all discovered subnets in this network from consideration for virtual service placement.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ip6_autocfg_enabled": {
          "aliases": [],
          "description": "Enable ipv6 auto configuration.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "synced_from_se": {
          "aliases": [],
          "description": "Boolean flag to set synced_from_se.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        },
        "vcenter_dvs": {
          "aliases": [],
          "description": "Boolean flag to set vcenter_dvs.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vimgrnw_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type vimgrnwruntime.",
          "required": false,
          "suboptions": {}
        },
        "vrf_context_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type vrfcontext.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Network Avi RESTful Object"
    },
    "examples": "\n- name: Example to create Network object\n  community.network.avi_network:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_network\n"
  },
  "community.network.avi_networkprofile": {
    "doc": {
      "description": "This module is used to configure NetworkProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "connection_mirror": {
          "aliases": [],
          "description": "When enabled, avi mirrors all tcp fastpath connections to standby.\nApplicable only in legacy ha mode.\nField introduced in 18.1.3,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the network profile.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "Networkprofileunion settings for networkprofile.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the network profile.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of NetworkProfile Avi RESTful Object"
    },
    "examples": "\n  - name: Create a network profile for an UDP application\n    community.network.avi_networkprofile:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      name: System-UDP-Fast-Path\n      profile:\n        type: PROTOCOL_TYPE_UDP_FAST_PATH\n        udp_fast_path_profile:\n          per_pkt_loadbalance: false\n          session_idle_timeout: 10\n          snat: true\n      tenant_ref: admin\n"
  },
  "community.network.avi_networksecuritypolicy": {
    "doc": {
      "description": "This module is used to configure NetworkSecurityPolicy object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_config_cksum": {
          "aliases": [],
          "description": "Checksum of cloud configuration for network sec policy.\nInternally set by cloud connector.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "List of networksecurityrule.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of NetworkSecurityPolicy Avi RESTful Object"
    },
    "examples": "\n  - name: Create a network security policy to block clients represented by ip group known_attackers\n    community.network.avi_networksecuritypolicy:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      name: vs-gurutest-ns\n      rules:\n      - action: NETWORK_SECURITY_POLICY_ACTION_TYPE_DENY\n        age: 0\n        enable: true\n        index: 1\n        log: false\n        match:\n          client_ip:\n            group_refs:\n            - Demo:known_attackers\n            match_criteria: IS_IN\n        name: Rule 1\n      tenant_ref: Demo\n"
  },
  "community.network.avi_pkiprofile": {
    "doc": {
      "description": "This module is used to configure PKIProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_certs": {
          "aliases": [],
          "description": "List of certificate authorities (root and intermediate) trusted that is used for certificate validation.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.",
          "required": false,
          "suboptions": {}
        },
        "crl_check": {
          "aliases": [],
          "description": "When enabled, avi will verify via crl checks that certificates in the trust chain have not been revoked.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "crls": {
          "aliases": [],
          "description": "Certificate revocation lists.",
          "required": false,
          "suboptions": {}
        },
        "ignore_peer_chain": {
          "aliases": [],
          "description": "When enabled, avi will not trust intermediate and root certs presented by a client.\nInstead, only the chain certs configured in the certificate authority section will be used to verify trust of the client's cert.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_federated": {
          "aliases": [],
          "description": "This field describes the object's replication scope.\nIf the field is set to false, then the object is visible within the controller-cluster and its associated service-engines.\nIf the field is set to true, then the object is replicated across the federation.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the pki profile.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        },
        "validate_only_leaf_crl": {
          "aliases": [],
          "description": "When enabled, avi will only validate the revocation status of the leaf certificate using crl.\nTo enable validation for the entire chain, disable this option and provide all the relevant crls.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of PKIProfile Avi RESTful Object"
    },
    "examples": "\n- name: Example to create PKIProfile object\n  community.network.avi_pkiprofile:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_pkiprofile\n"
  },
  "community.network.avi_pool": {
    "doc": {
      "description": "This module is used to configure Pool object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "a_pool": {
          "aliases": [],
          "description": "Name of container cloud application that constitutes a pool in a a-b pool configuration, if different from vs app.\nField deprecated in 18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "ab_pool": {
          "aliases": [],
          "description": "A/b pool configuration.\nField deprecated in 18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "ab_priority": {
          "aliases": [],
          "description": "Priority of this pool in a a-b pool pair.\nInternally used.\nField deprecated in 18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "analytics_policy": {
          "aliases": [],
          "description": "Determines analytics settings for the pool.\nField introduced in 18.1.5, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "analytics_profile_ref": {
          "aliases": [],
          "description": "Specifies settings related to analytics.\nIt is a reference to an object of type analyticsprofile.\nField introduced in 18.1.4,18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "apic_epg_name": {
          "aliases": [],
          "description": "Synchronize cisco apic epg members with pool servers.",
          "required": false,
          "suboptions": {}
        },
        "application_persistence_profile_ref": {
          "aliases": [],
          "description": "Persistence will ensure the same user sticks to the same server for a desired duration of time.\nIt is a reference to an object of type applicationpersistenceprofile.",
          "required": false,
          "suboptions": {}
        },
        "autoscale_launch_config_ref": {
          "aliases": [],
          "description": "If configured then avi will trigger orchestration of pool server creation and deletion.\nIt is only supported for container clouds like mesos, openshift, kubernetes, docker, etc.\nIt is a reference to an object of type autoscalelaunchconfig.",
          "required": false,
          "suboptions": {}
        },
        "autoscale_networks": {
          "aliases": [],
          "description": "Network ids for the launch configuration.",
          "required": false,
          "suboptions": {}
        },
        "autoscale_policy_ref": {
          "aliases": [],
          "description": "Reference to server autoscale policy.\nIt is a reference to an object of type serverautoscalepolicy.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "capacity_estimation": {
          "aliases": [],
          "description": "Inline estimation of capacity of servers.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "capacity_estimation_ttfb_thresh": {
          "aliases": [],
          "description": "The maximum time-to-first-byte of a server.\nAllowed values are 1-5000.\nSpecial values are 0 - 'automatic'.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "cloud_config_cksum": {
          "aliases": [],
          "description": "Checksum of cloud configuration for pool.\nInternally set by cloud connector.",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.",
          "required": false,
          "suboptions": {}
        },
        "conn_pool_properties": {
          "aliases": [],
          "description": "Connection pool properties.\nField introduced in 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "connection_ramp_duration": {
          "aliases": [],
          "description": "Duration for which new connections will be gradually ramped up to a server recently brought online.\nUseful for lb algorithms that are least connection based.\nAllowed values are 1-300.\nSpecial values are 0 - 'immediate'.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.",
          "required": false,
          "suboptions": {}
        },
        "default_server_port": {
          "aliases": [],
          "description": "Traffic sent to servers will use this destination server port unless overridden by the server's specific port attribute.\nThe ssl checkbox enables avi to server encryption.\nAllowed values are 1-65535.\nDefault value when not specified in API or module is interpreted by Avi Controller as 80.",
          "required": false,
          "suboptions": {}
        },
        "delete_server_on_dns_refresh": {
          "aliases": [],
          "description": "Indicates whether existing ips are disabled(false) or deleted(true) on dns hostname refreshdetail -- on a dns refresh, some ips set on pool may\nno longer be returned by the resolver.\nThese ips are deleted from the pool when this knob is set to true.\nThey are disabled, if the knob is set to false.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A description of the pool.",
          "required": false,
          "suboptions": {}
        },
        "domain_name": {
          "aliases": [],
          "description": "Comma separated list of domain names which will be used to verify the common names or subject alternative names presented by server certificates.\nIt is performed only when common name check host_check_enabled is enabled.",
          "required": false,
          "suboptions": {}
        },
        "east_west": {
          "aliases": [],
          "description": "Inherited config from virtualservice.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable or disable the pool.\nDisabling will terminate all open connections and pause health monitors.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "external_autoscale_groups": {
          "aliases": [],
          "description": "Names of external auto-scale groups for pool servers.\nCurrently available only for aws and azure.\nField introduced in 17.1.2.",
          "required": false,
          "suboptions": {}
        },
        "fail_action": {
          "aliases": [],
          "description": "Enable an action - close connection, http redirect or local http response - when a pool failure happens.\nBy default, a connection will be closed, in case the pool experiences a failure.",
          "required": false,
          "suboptions": {}
        },
        "fewest_tasks_feedback_delay": {
          "aliases": [],
          "description": "Periodicity of feedback for fewest tasks server selection algorithm.\nAllowed values are 1-300.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "graceful_disable_timeout": {
          "aliases": [],
          "description": "Used to gracefully disable a server.\nVirtual service waits for the specified time before terminating the existing connections  to the servers that are disabled.\nAllowed values are 1-7200.\nSpecial values are 0 - 'immediate', -1 - 'infinite'.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "gslb_sp_enabled": {
          "aliases": [],
          "description": "Indicates if the pool is a site-persistence pool.\nField introduced in 17.2.1.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "health_monitor_refs": {
          "aliases": [],
          "description": "Verify server health by applying one or more health monitors.\nActive monitors generate synthetic traffic from each service engine and mark a server up or down based on the response.\nThe passive monitor listens only to client to server communication.\nIt raises or lowers the ratio of traffic destined to a server based on successful responses.\nIt is a reference to an object of type healthmonitor.",
          "required": false,
          "suboptions": {}
        },
        "host_check_enabled": {
          "aliases": [],
          "description": "Enable common name check for server certificate.\nIf enabled and no explicit domain name is specified, avi will use the incoming host header to do the match.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "inline_health_monitor": {
          "aliases": [],
          "description": "The passive monitor will monitor client to server connections and requests and adjust traffic load to servers based on successful responses.\nThis may alter the expected behavior of the lb method, such as round robin.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ipaddrgroup_ref": {
          "aliases": [],
          "description": "Use list of servers from ip address group.\nIt is a reference to an object of type ipaddrgroup.",
          "required": false,
          "suboptions": {}
        },
        "lb_algorithm": {
          "aliases": [],
          "description": "The load balancing algorithm will pick a server within the pool's list of available servers.\nEnum options - LB_ALGORITHM_LEAST_CONNECTIONS, LB_ALGORITHM_ROUND_ROBIN, LB_ALGORITHM_FASTEST_RESPONSE, LB_ALGORITHM_CONSISTENT_HASH,\nLB_ALGORITHM_LEAST_LOAD, LB_ALGORITHM_FEWEST_SERVERS, LB_ALGORITHM_RANDOM, LB_ALGORITHM_FEWEST_TASKS, LB_ALGORITHM_NEAREST_SERVER,\nLB_ALGORITHM_CORE_AFFINITY, LB_ALGORITHM_TOPOLOGY.\nDefault value when not specified in API or module is interpreted by Avi Controller as LB_ALGORITHM_LEAST_CONNECTIONS.",
          "required": false,
          "suboptions": {}
        },
        "lb_algorithm_consistent_hash_hdr": {
          "aliases": [],
          "description": "Http header name to be used for the hash key.",
          "required": false,
          "suboptions": {}
        },
        "lb_algorithm_core_nonaffinity": {
          "aliases": [],
          "description": "Degree of non-affinity for core affinity based server selection.\nAllowed values are 1-65535.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2.",
          "required": false,
          "suboptions": {}
        },
        "lb_algorithm_hash": {
          "aliases": [],
          "description": "Criteria used as a key for determining the hash between the client and  server.\nEnum options - LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS, LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT,\nLB_ALGORITHM_CONSISTENT_HASH_URI, LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_HEADER, LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_STRING,\nLB_ALGORITHM_CONSISTENT_HASH_CALLID.\nDefault value when not specified in API or module is interpreted by Avi Controller as LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS.",
          "required": false,
          "suboptions": {}
        },
        "lookup_server_by_name": {
          "aliases": [],
          "description": "Allow server lookup by name.\nField introduced in 17.1.11,17.2.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "max_concurrent_connections_per_server": {
          "aliases": [],
          "description": "The maximum number of concurrent connections allowed to each server within the pool.\nNote  applied value will be no less than the number of service engines that the pool is placed on.\nIf set to 0, no limit is applied.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "max_conn_rate_per_server": {
          "aliases": [],
          "description": "Rate limit connections to each server.",
          "required": false,
          "suboptions": {}
        },
        "min_health_monitors_up": {
          "aliases": [],
          "description": "Minimum number of health monitors in up state to mark server up.\nField introduced in 18.2.1, 17.2.12.",
          "required": false,
          "suboptions": {}
        },
        "min_servers_up": {
          "aliases": [],
          "description": "Minimum number of servers in up state for marking the pool up.\nField introduced in 18.2.1, 17.2.12.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the pool.",
          "required": true,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "(internal-use) networks designated as containing servers for this pool.\nThe servers may be further narrowed down by a filter.\nThis field is used internally by avi, not editable by the user.",
          "required": false,
          "suboptions": {}
        },
        "nsx_securitygroup": {
          "aliases": [],
          "description": "A list of nsx service groups where the servers for the pool are created.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pki_profile_ref": {
          "aliases": [],
          "description": "Avi will validate the ssl certificate present by a server against the selected pki profile.\nIt is a reference to an object of type pkiprofile.",
          "required": false,
          "suboptions": {}
        },
        "placement_networks": {
          "aliases": [],
          "description": "Manually select the networks and subnets used to provide reachability to the pool's servers.\nSpecify the subnet using the following syntax  10-1-1-0/24.\nUse static routes in vrf configuration when pool servers are not directly connected butroutable from the service engine.",
          "required": false,
          "suboptions": {}
        },
        "prst_hdr_name": {
          "aliases": [],
          "description": "Header name for custom header persistence.\nField deprecated in 18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "request_queue_depth": {
          "aliases": [],
          "description": "Minimum number of requests to be queued when pool is full.\nDefault value when not specified in API or module is interpreted by Avi Controller as 128.",
          "required": false,
          "suboptions": {}
        },
        "request_queue_enabled": {
          "aliases": [],
          "description": "Enable request queue when pool is full.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rewrite_host_header_to_server_name": {
          "aliases": [],
          "description": "Rewrite incoming host header to server name of the server to which the request is proxied.\nEnabling this feature rewrites host header for requests to all servers in the pool.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rewrite_host_header_to_sni": {
          "aliases": [],
          "description": "If sni server name is specified, rewrite incoming host header to the sni server name.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "server_auto_scale": {
          "aliases": [],
          "description": "Server autoscale.\nNot used anymore.\nField deprecated in 18.1.2.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "server_count": {
          "aliases": [],
          "description": "Field deprecated in 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "server_name": {
          "aliases": [],
          "description": "Fully qualified dns hostname which will be used in the tls sni extension in server connections if sni is enabled.\nIf no value is specified, avi will use the incoming host header instead.",
          "required": false,
          "suboptions": {}
        },
        "server_reselect": {
          "aliases": [],
          "description": "Server reselect configuration for http requests.",
          "required": false,
          "suboptions": {}
        },
        "server_timeout": {
          "aliases": [],
          "description": "Server timeout value specifies the time within which a server connection needs to be established and a request-response exchange completes\nbetween avi and the server.\nValue of 0 results in using default timeout of 60 minutes.\nAllowed values are 0-3600000.\nField introduced in 18.1.5,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "servers": {
          "aliases": [],
          "description": "The pool directs load balanced traffic to this list of destination servers.\nThe servers can be configured by ip address, name, network or via ip address group.",
          "required": false,
          "suboptions": {}
        },
        "service_metadata": {
          "aliases": [],
          "description": "Metadata pertaining to the service provided by this pool.\nIn openshift/kubernetes environments, app metadata info is stored.\nAny user input to this field will be overwritten by avi vantage.\nField introduced in 17.2.14,18.1.5,18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "sni_enabled": {
          "aliases": [],
          "description": "Enable tls sni for server connections.\nIf disabled, avi will not send the sni extension as part of the handshake.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_key_and_certificate_ref": {
          "aliases": [],
          "description": "Service engines will present a client ssl certificate to the server.\nIt is a reference to an object of type sslkeyandcertificate.",
          "required": false,
          "suboptions": {}
        },
        "ssl_profile_ref": {
          "aliases": [],
          "description": "When enabled, avi re-encrypts traffic to the backend servers.\nThe specific ssl profile defines which ciphers and ssl versions will be supported.\nIt is a reference to an object of type sslprofile.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "use_service_port": {
          "aliases": [],
          "description": "Do not translate the client's destination port when sending the connection to the server.\nThe pool or servers specified service port will still be used for health monitoring.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the pool.",
          "required": false,
          "suboptions": {}
        },
        "vrf_ref": {
          "aliases": [],
          "description": "Virtual routing context that the pool is bound to.\nThis is used to provide the isolation of the set of networks the pool is attached to.\nThe pool inherits the virtual routing context of the virtual service, and this field is used only internally, and is set by pb-transform.\nIt is a reference to an object of type vrfcontext.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Pool Avi RESTful Object"
    },
    "examples": "\n- name: Create a Pool with two servers and HTTP monitor\n  community.network.avi_pool:\n    controller: 10.10.1.20\n    username: avi_user\n    password: avi_password\n    name: testpool1\n    description: testpool1\n    state: present\n    health_monitor_refs:\n        - '/api/healthmonitor?name=System-HTTP'\n    servers:\n        - ip:\n            addr: 10.10.2.20\n            type: V4\n        - ip:\n            addr: 10.10.2.21\n            type: V4\n\n- name: Patch pool with a single server using patch op and avi_credentials\n  community.network.avi_pool:\n    avi_api_update_method: patch\n    avi_api_patch_op: delete\n    avi_credentials: \"{{avi_credentials}}\"\n    name: test-pool\n    servers:\n      - ip:\n        addr: 10.90.64.13\n        type: 'V4'\n  register: pool\n  when:\n    - state | default(\"present\") == \"present\"\n"
  },
  "community.network.avi_poolgroup": {
    "doc": {
      "description": "This module is used to configure PoolGroup object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_config_cksum": {
          "aliases": [],
          "description": "Checksum of cloud configuration for poolgroup.\nInternally set by cloud connector.",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Name of the user who created the object.",
          "required": false,
          "suboptions": {}
        },
        "deployment_policy_ref": {
          "aliases": [],
          "description": "When setup autoscale manager will automatically promote new pools into production when deployment goals are met.\nIt is a reference to an object of type poolgroupdeploymentpolicy.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of pool group.",
          "required": false,
          "suboptions": {}
        },
        "fail_action": {
          "aliases": [],
          "description": "Enable an action - close connection, http redirect, or local http response - when a pool group failure happens.\nBy default, a connection will be closed, in case the pool group experiences a failure.",
          "required": false,
          "suboptions": {}
        },
        "implicit_priority_labels": {
          "aliases": [],
          "description": "Whether an implicit set of priority labels is generated.\nField introduced in 17.1.9,17.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "List of pool group members object of type poolgroupmember.",
          "required": false,
          "suboptions": {}
        },
        "min_servers": {
          "aliases": [],
          "description": "The minimum number of servers to distribute traffic to.\nAllowed values are 1-65535.\nSpecial values are 0 - 'disable'.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the pool group.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "priority_labels_ref": {
          "aliases": [],
          "description": "Uuid of the priority labels.\nIf not provided, pool group member priority label will be interpreted as a number with a larger number considered higher priority.\nIt is a reference to an object of type prioritylabels.",
          "required": false,
          "suboptions": {}
        },
        "service_metadata": {
          "aliases": [],
          "description": "Metadata pertaining to the service provided by this poolgroup.\nIn openshift/kubernetes environments, app metadata info is stored.\nAny user input to this field will be overwritten by avi vantage.\nField introduced in 17.2.14,18.1.5,18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the pool group.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of PoolGroup Avi RESTful Object"
    },
    "examples": "\n- name: Example to create PoolGroup object\n  community.network.avi_poolgroup:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_poolgroup\n"
  },
  "community.network.avi_poolgroupdeploymentpolicy": {
    "doc": {
      "description": "This module is used to configure PoolGroupDeploymentPolicy object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_disable_old_prod_pools": {
          "aliases": [],
          "description": "It will automatically disable old production pools once there is a new production candidate.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "evaluation_duration": {
          "aliases": [],
          "description": "Duration of evaluation period for automatic deployment.\nAllowed values are 60-86400.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the pool group deployment policy.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "List of pgdeploymentrule.",
          "required": false,
          "suboptions": {}
        },
        "scheme": {
          "aliases": [],
          "description": "Deployment scheme.\nEnum options - BLUE_GREEN, CANARY.\nDefault value when not specified in API or module is interpreted by Avi Controller as BLUE_GREEN.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "target_test_traffic_ratio": {
          "aliases": [],
          "description": "Target traffic ratio before pool is made production.\nAllowed values are 1-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 100.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "test_traffic_ratio_rampup": {
          "aliases": [],
          "description": "Ratio of the traffic that is sent to the pool under test.\nTest ratio of 100 means blue green.\nAllowed values are 1-100.\nDefault value when not specified in API or module is interpreted by Avi Controller as 100.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the pool group deployment policy.",
          "required": false,
          "suboptions": {}
        },
        "webhook_ref": {
          "aliases": [],
          "description": "Webhook configured with url that avi controller will pass back information about pool group, old and new pool information and current deployment\nrule results.\nIt is a reference to an object of type webhook.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of PoolGroupDeploymentPolicy Avi RESTful Object"
    },
    "examples": "\n- name: Example to create PoolGroupDeploymentPolicy object\n  community.network.avi_poolgroupdeploymentpolicy:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_poolgroupdeploymentpolicy\n"
  },
  "community.network.avi_prioritylabels": {
    "doc": {
      "description": "This module is used to configure PriorityLabels object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A description of the priority labels.",
          "required": false,
          "suboptions": {}
        },
        "equivalent_labels": {
          "aliases": [],
          "description": "Equivalent priority labels in descending order.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the priority labels.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the priority labels.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of PriorityLabels Avi RESTful Object"
    },
    "examples": "\n- name: Example to create PriorityLabels object\n  community.network.avi_prioritylabels:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_prioritylabels\n"
  },
  "community.network.avi_role": {
    "doc": {
      "description": "This module is used to configure Role object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "privileges": {
          "aliases": [],
          "description": "List of permission.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Role Avi RESTful Object"
    },
    "examples": "\n- name: Example to create Role object\n  community.network.avi_role:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_role\n"
  },
  "community.network.avi_scheduler": {
    "doc": {
      "description": "This module is used to configure Scheduler object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_config_ref": {
          "aliases": [],
          "description": "Backup configuration to be executed by this scheduler.\nIt is a reference to an object of type backupconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Boolean flag to set enabled.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "end_date_time": {
          "aliases": [],
          "description": "Scheduler end date and time.",
          "required": false,
          "suboptions": {}
        },
        "frequency": {
          "aliases": [],
          "description": "Frequency at which custom scheduler will run.\nAllowed values are 0-60.",
          "required": false,
          "suboptions": {}
        },
        "frequency_unit": {
          "aliases": [],
          "description": "Unit at which custom scheduler will run.\nEnum options - SCHEDULER_FREQUENCY_UNIT_MIN, SCHEDULER_FREQUENCY_UNIT_HOUR, SCHEDULER_FREQUENCY_UNIT_DAY, SCHEDULER_FREQUENCY_UNIT_WEEK,\nSCHEDULER_FREQUENCY_UNIT_MONTH.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of scheduler.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "run_mode": {
          "aliases": [],
          "description": "Scheduler run mode.\nEnum options - RUN_MODE_PERIODIC, RUN_MODE_AT, RUN_MODE_NOW.",
          "required": false,
          "suboptions": {}
        },
        "run_script_ref": {
          "aliases": [],
          "description": "Control script to be executed by this scheduler.\nIt is a reference to an object of type alertscriptconfig.",
          "required": false,
          "suboptions": {}
        },
        "scheduler_action": {
          "aliases": [],
          "description": "Define scheduler action.\nEnum options - SCHEDULER_ACTION_RUN_A_SCRIPT, SCHEDULER_ACTION_BACKUP.\nDefault value when not specified in API or module is interpreted by Avi Controller as SCHEDULER_ACTION_BACKUP.",
          "required": false,
          "suboptions": {}
        },
        "start_date_time": {
          "aliases": [],
          "description": "Scheduler start date and time.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Scheduler Avi RESTful Object"
    },
    "examples": "\n- name: Example to create Scheduler object\n  community.network.avi_scheduler:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_scheduler\n"
  },
  "community.network.avi_seproperties": {
    "doc": {
      "description": "This module is used to configure SeProperties object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "se_agent_properties": {
          "aliases": [],
          "description": "Seagentproperties settings for seproperties.",
          "required": false,
          "suboptions": {}
        },
        "se_bootup_properties": {
          "aliases": [],
          "description": "Sebootupproperties settings for seproperties.",
          "required": false,
          "suboptions": {}
        },
        "se_runtime_properties": {
          "aliases": [],
          "description": "Seruntimeproperties settings for seproperties.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.\nDefault value when not specified in API or module is interpreted by Avi Controller as default.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of SeProperties Avi RESTful Object"
    },
    "examples": "\n- name: Example to create SeProperties object\n  community.network.avi_seproperties:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_seproperties\n"
  },
  "community.network.avi_serverautoscalepolicy": {
    "doc": {
      "description": "This module is used to configure ServerAutoScalePolicy object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "intelligent_autoscale": {
          "aliases": [],
          "description": "Use avi intelligent autoscale algorithm where autoscale is performed by comparing load on the pool against estimated capacity of all the servers.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "intelligent_scalein_margin": {
          "aliases": [],
          "description": "Maximum extra capacity as percentage of load used by the intelligent scheme.\nScalein is triggered when available capacity is more than this margin.\nAllowed values are 1-99.\nDefault value when not specified in API or module is interpreted by Avi Controller as 40.",
          "required": false,
          "suboptions": {}
        },
        "intelligent_scaleout_margin": {
          "aliases": [],
          "description": "Minimum extra capacity as percentage of load used by the intelligent scheme.\nScaleout is triggered when available capacity is less than this margin.\nAllowed values are 1-99.\nDefault value when not specified in API or module is interpreted by Avi Controller as 20.",
          "required": false,
          "suboptions": {}
        },
        "max_scalein_adjustment_step": {
          "aliases": [],
          "description": "Maximum number of servers to scalein simultaneously.\nThe actual number of servers to scalein is chosen such that target number of servers is always more than or equal to the min_size.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "max_scaleout_adjustment_step": {
          "aliases": [],
          "description": "Maximum number of servers to scaleout simultaneously.\nThe actual number of servers to scaleout is chosen such that target number of servers is always less than or equal to the max_size.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "max_size": {
          "aliases": [],
          "description": "Maximum number of servers after scaleout.\nAllowed values are 0-400.",
          "required": false,
          "suboptions": {}
        },
        "min_size": {
          "aliases": [],
          "description": "No scale-in happens once number of operationally up servers reach min_servers.\nAllowed values are 0-400.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scalein_alertconfig_refs": {
          "aliases": [],
          "description": "Trigger scalein when alerts due to any of these alert configurations are raised.\nIt is a reference to an object of type alertconfig.",
          "required": false,
          "suboptions": {}
        },
        "scalein_cooldown": {
          "aliases": [],
          "description": "Cooldown period during which no new scalein is triggered to allow previous scalein to successfully complete.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "scaleout_alertconfig_refs": {
          "aliases": [],
          "description": "Trigger scaleout when alerts due to any of these alert configurations are raised.\nIt is a reference to an object of type alertconfig.",
          "required": false,
          "suboptions": {}
        },
        "scaleout_cooldown": {
          "aliases": [],
          "description": "Cooldown period during which no new scaleout is triggered to allow previous scaleout to successfully complete.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "use_predicted_load": {
          "aliases": [],
          "description": "Use predicted load rather than current load.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ServerAutoScalePolicy Avi RESTful Object"
    },
    "examples": "\n- name: Example to create ServerAutoScalePolicy object\n  community.network.avi_serverautoscalepolicy:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_serverautoscalepolicy\n"
  },
  "community.network.avi_serviceengine": {
    "doc": {
      "description": "This module is used to configure ServiceEngine object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Availability_zone of serviceengine.",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.",
          "required": false,
          "suboptions": {}
        },
        "container_mode": {
          "aliases": [],
          "description": "Boolean flag to set container_mode.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "container_type": {
          "aliases": [],
          "description": "Enum options - container_type_bridge, container_type_host, container_type_host_dpdk.\nDefault value when not specified in API or module is interpreted by Avi Controller as CONTAINER_TYPE_HOST.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_created": {
          "aliases": [],
          "description": "Boolean flag to set controller_created.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_ip": {
          "aliases": [],
          "description": "Controller_ip of serviceengine.",
          "required": false,
          "suboptions": {}
        },
        "data_vnics": {
          "aliases": [],
          "description": "List of vnic.",
          "required": false,
          "suboptions": {}
        },
        "enable_state": {
          "aliases": [],
          "description": "Inorder to disable se set this field appropriately.\nEnum options - SE_STATE_ENABLED, SE_STATE_DISABLED_FOR_PLACEMENT, SE_STATE_DISABLED, SE_STATE_DISABLED_FORCE.\nDefault value when not specified in API or module is interpreted by Avi Controller as SE_STATE_ENABLED.",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "Flavor of serviceengine.",
          "required": false,
          "suboptions": {}
        },
        "host_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type vimgrhostruntime.",
          "required": false,
          "suboptions": {}
        },
        "hypervisor": {
          "aliases": [],
          "description": "Enum options - default, vmware_esx, kvm, vmware_vsan, xen.",
          "required": false,
          "suboptions": {}
        },
        "mgmt_vnic": {
          "aliases": [],
          "description": "Vnic settings for serviceengine.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.\nDefault value when not specified in API or module is interpreted by Avi Controller as VM name unknown.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resources": {
          "aliases": [],
          "description": "Seresources settings for serviceengine.",
          "required": false,
          "suboptions": {}
        },
        "se_group_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type serviceenginegroup.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ServiceEngine Avi RESTful Object"
    },
    "examples": "\n- name: Example to create ServiceEngine object\n  community.network.avi_serviceengine:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_serviceengine\n"
  },
  "community.network.avi_serviceenginegroup": {
    "doc": {
      "description": "This module is used to configure ServiceEngineGroup object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "accelerated_networking": {
          "aliases": [],
          "description": "Enable accelerated networking option for azure se.\nAccelerated networking enables single root i/o virtualization (sr-iov) to a se vm.\nThis improves networking performance.\nField introduced in 17.2.14,18.1.5,18.2.1.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "active_standby": {
          "aliases": [],
          "description": "Service engines in active/standby mode for ha failover.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "additional_config_memory": {
          "aliases": [],
          "description": "Indicates the percent of config memory used for config updates.\nAllowed values are 0-90.\nField deprecated in 18.1.2.\nField introduced in 18.1.1.",
          "required": false,
          "suboptions": {}
        },
        "advertise_backend_networks": {
          "aliases": [],
          "description": "Advertise reach-ability of backend server networks via adc through bgp for default gateway feature.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "aggressive_failure_detection": {
          "aliases": [],
          "description": "Enable aggressive failover configuration for ha.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "algo": {
          "aliases": [],
          "description": "In compact placement, virtual services are placed on existing ses until max_vs_per_se limit is reached.\nEnum options - PLACEMENT_ALGO_PACKED, PLACEMENT_ALGO_DISTRIBUTED.\nDefault value when not specified in API or module is interpreted by Avi Controller as PLACEMENT_ALGO_PACKED.",
          "required": false,
          "suboptions": {}
        },
        "allow_burst": {
          "aliases": [],
          "description": "Allow ses to be created using burst license.\nField introduced in 17.2.5.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "app_cache_percent": {
          "aliases": [],
          "description": "A percent value of total se memory reserved for application caching.\nThis is an se bootup property and requires se restart.\nAllowed values are 0 - 100.\nSpecial values are 0- 'disable'.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "app_learning_memory_percent": {
          "aliases": [],
          "description": "A percent value of total se memory reserved for application learning.\nThis is an se bootup property and requires se restart.\nAllowed values are 0 - 10.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "archive_shm_limit": {
          "aliases": [],
          "description": "Amount of se memory in gb until which shared memory is collected in core archive.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 8.",
          "required": false,
          "suboptions": {}
        },
        "async_ssl": {
          "aliases": [],
          "description": "Ssl handshakes will be handled by dedicated ssl threads.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "async_ssl_threads": {
          "aliases": [],
          "description": "Number of async ssl threads per se_dp.\nAllowed values are 1-16.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "auto_rebalance": {
          "aliases": [],
          "description": "If set, virtual services will be automatically migrated when load on an se is less than minimum or more than maximum thresholds.\nOnly alerts are generated when the auto_rebalance is not set.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_rebalance_capacity_per_se": {
          "aliases": [],
          "description": "Capacities of se for auto rebalance for each criteria.\nField introduced in 17.2.4.",
          "required": false,
          "suboptions": {}
        },
        "auto_rebalance_criteria": {
          "aliases": [],
          "description": "Set of criteria for se auto rebalance.\nEnum options - SE_AUTO_REBALANCE_CPU, SE_AUTO_REBALANCE_PPS, SE_AUTO_REBALANCE_MBPS, SE_AUTO_REBALANCE_OPEN_CONNS, SE_AUTO_REBALANCE_CPS.\nField introduced in 17.2.3.",
          "required": false,
          "suboptions": {}
        },
        "auto_rebalance_interval": {
          "aliases": [],
          "description": "Frequency of rebalance, if 'auto rebalance' is enabled.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "auto_redistribute_active_standby_load": {
          "aliases": [],
          "description": "Redistribution of virtual services from the takeover se to the replacement se can cause momentary traffic loss.\nIf the auto-redistribute load option is left in its default off state, any desired rebalancing requires calls to rest api.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bgp_state_update_interval": {
          "aliases": [],
          "description": "Bgp peer state update interval.\nAllowed values are 5-100.\nField introduced in 17.2.14,18.1.5,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "buffer_se": {
          "aliases": [],
          "description": "Excess service engine capacity provisioned for ha failover.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.",
          "required": false,
          "suboptions": {}
        },
        "config_debugs_on_all_cores": {
          "aliases": [],
          "description": "Enable config debugs on all cores of se.\nField introduced in 17.2.13,18.1.5,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "connection_memory_percentage": {
          "aliases": [],
          "description": "Percentage of memory for connection state.\nThis will come at the expense of memory used for http in-memory cache.\nAllowed values are 10-90.\nDefault value when not specified in API or module is interpreted by Avi Controller as 50.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_reserve": {
          "aliases": [],
          "description": "Boolean flag to set cpu_reserve.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cpu_socket_affinity": {
          "aliases": [],
          "description": "Allocate all the cpu cores for the service engine virtual machines  on the same cpu socket.\nApplicable only for vcenter cloud.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "custom_securitygroups_data": {
          "aliases": [],
          "description": "Custom security groups to be associated with data vnics for se instances in openstack and aws clouds.\nField introduced in 17.1.3.",
          "required": false,
          "suboptions": {}
        },
        "custom_securitygroups_mgmt": {
          "aliases": [],
          "description": "Custom security groups to be associated with management vnic for se instances in openstack and aws clouds.\nField introduced in 17.1.3.",
          "required": false,
          "suboptions": {}
        },
        "custom_tag": {
          "aliases": [],
          "description": "Custom tag will be used to create the tags for se instance in aws.\nNote this is not the same as the prefix for se name.",
          "required": false,
          "suboptions": {}
        },
        "data_network_id": {
          "aliases": [],
          "description": "Subnet used to spin up the data nic for service engines, used only for azure cloud.\nOverrides the cloud level setting for service engine subnet.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "datascript_timeout": {
          "aliases": [],
          "description": "Number of instructions before datascript times out.\nAllowed values are 0-100000000.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1000000.",
          "required": false,
          "suboptions": {}
        },
        "dedicated_dispatcher_core": {
          "aliases": [],
          "description": "Dedicate the core that handles packet receive/transmit from the network to just the dispatching function.\nDon't use it for tcp/ip and ssl functions.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "disable_avi_securitygroups": {
          "aliases": [],
          "description": "By default, avi creates and manages security groups along with custom sg provided by user.\nSet this to true to disallow avi to create and manage new security groups.\nAvi will only make use of custom security groups provided by user.\nThis option is only supported for aws cloud type.\nField introduced in 17.2.13,18.1.4,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_csum_offloads": {
          "aliases": [],
          "description": "Stop using tcp/udp and ip checksum offload features of nics.\nField introduced in 17.1.14, 17.2.5, 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_gro": {
          "aliases": [],
          "description": "Disable generic receive offload (gro) in dpdk poll-mode driver packet receive path.\nGro is on by default on nics that do not support lro (large receive offload) or do not gain performance boost from lro.\nField introduced in 17.2.5, 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_se_memory_check": {
          "aliases": [],
          "description": "If set, disable the config memory check done in service engine.\nField introduced in 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_tso": {
          "aliases": [],
          "description": "Disable tcp segmentation offload (tso) in dpdk poll-mode driver packet transmit path.\nTso is on by default on nics that support it.\nField introduced in 17.2.5, 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disk_per_se": {
          "aliases": [],
          "description": "Amount of disk space for each of the service engine virtual machines.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "distribute_load_active_standby": {
          "aliases": [],
          "description": "Use both the active and standby service engines for virtual service placement in the legacy active standby ha mode.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "distribute_queues": {
          "aliases": [],
          "description": "Distributes queue ownership among cores so multiple cores handle dispatcher duties.\nField introduced in 17.2.8.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_hsm_priming": {
          "aliases": [],
          "description": "(this is a beta feature).\nEnable hsm key priming.\nIf enabled, key handles on the hsm will be synced to se before processing client connections.\nField introduced in 17.2.7, 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_multi_lb": {
          "aliases": [],
          "description": "Applicable only for azure cloud with basic sku lb.\nIf set, additional azure lbs will be automatically created if resources in existing lb are exhausted.\nField introduced in 17.2.10, 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_routing": {
          "aliases": [],
          "description": "Enable routing for this serviceenginegroup .\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_vip_on_all_interfaces": {
          "aliases": [],
          "description": "Enable vip on all interfaces of se.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_vmac": {
          "aliases": [],
          "description": "Use virtual mac address for interfaces on which floating interface ips are placed.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ephemeral_portrange_end": {
          "aliases": [],
          "description": "End local ephemeral port number for outbound connections.\nField introduced in 17.2.13, 18.1.5, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "ephemeral_portrange_start": {
          "aliases": [],
          "description": "Start local ephemeral port number for outbound connections.\nField introduced in 17.2.13, 18.1.5, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "extra_config_multiplier": {
          "aliases": [],
          "description": "Multiplier for extra config to support large vs/pool config.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.0.",
          "required": false,
          "suboptions": {}
        },
        "extra_shared_config_memory": {
          "aliases": [],
          "description": "Extra config memory to support large geo db configuration.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "floating_intf_ip": {
          "aliases": [],
          "description": "If serviceenginegroup is configured for legacy 1+1 active standby ha mode, floating ip's will be advertised only by the active se in the pair.\nVirtual services in this group must be disabled/enabled for any changes to the floating ip's to take effect.\nOnly active se hosting vs tagged with active standby se 1 tag will advertise this floating ip when manual load distribution is enabled.",
          "required": false,
          "suboptions": {}
        },
        "floating_intf_ip_se_2": {
          "aliases": [],
          "description": "If serviceenginegroup is configured for legacy 1+1 active standby ha mode, floating ip's will be advertised only by the active se in the pair.\nVirtual services in this group must be disabled/enabled for any changes to the floating ip's to take effect.\nOnly active se hosting vs tagged with active standby se 2 tag will advertise this floating ip when manual load distribution is enabled.",
          "required": false,
          "suboptions": {}
        },
        "flow_table_new_syn_max_entries": {
          "aliases": [],
          "description": "Maximum number of flow table entries that have not completed tcp three-way handshake yet.\nField introduced in 17.2.5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "free_list_size": {
          "aliases": [],
          "description": "Number of entries in the free list.\nField introduced in 17.2.10, 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1024.",
          "required": false,
          "suboptions": {}
        },
        "ha_mode": {
          "aliases": [],
          "description": "High availability mode for all the virtual services using this service engine group.\nEnum options - HA_MODE_SHARED_PAIR, HA_MODE_SHARED, HA_MODE_LEGACY_ACTIVE_STANDBY.\nDefault value when not specified in API or module is interpreted by Avi Controller as HA_MODE_SHARED.",
          "required": false,
          "suboptions": {}
        },
        "hardwaresecuritymodulegroup_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type hardwaresecuritymodulegroup.",
          "required": false,
          "suboptions": {}
        },
        "heap_minimum_config_memory": {
          "aliases": [],
          "description": "Minimum required heap memory to apply any configuration.\nAllowed values are 0-100.\nField introduced in 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 8.",
          "required": false,
          "suboptions": {}
        },
        "hm_on_standby": {
          "aliases": [],
          "description": "Enable active health monitoring from the standby se for all placed virtual services.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host_attribute_key": {
          "aliases": [],
          "description": "Key of a (key, value) pair identifying a label for a set of nodes usually in container clouds.\nNeeds to be specified together with host_attribute_value.\nSes can be configured differently including ha modes across different se groups.\nMay also be used for isolation between different classes of virtualservices.\nVirtualservices' se group may be specified via annotations/labels.\nA openshift/kubernetes namespace maybe annotated with a matching se group label as openshift.io/node-selector  apptype=prod.\nWhen multiple se groups are used in a cloud with host attributes specified,just a single se group can exist as a match-all se group without a\nhost_attribute_key.",
          "required": false,
          "suboptions": {}
        },
        "host_attribute_value": {
          "aliases": [],
          "description": "Value of a (key, value) pair identifying a label for a set of nodes usually in container clouds.\nNeeds to be specified together with host_attribute_key.",
          "required": false,
          "suboptions": {}
        },
        "host_gateway_monitor": {
          "aliases": [],
          "description": "Enable the host gateway monitor when service engine is deployed as docker container.\nDisabled by default.\nField introduced in 17.2.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hypervisor": {
          "aliases": [],
          "description": "Override default hypervisor.\nEnum options - DEFAULT, VMWARE_ESX, KVM, VMWARE_VSAN, XEN.",
          "required": false,
          "suboptions": {}
        },
        "ignore_rtt_threshold": {
          "aliases": [],
          "description": "Ignore rtt samples if it is above threshold.\nField introduced in 17.1.6,17.2.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 5000.",
          "required": false,
          "suboptions": {}
        },
        "ingress_access_data": {
          "aliases": [],
          "description": "Program se security group ingress rules to allow vip data access from remote cidr type.\nEnum options - SG_INGRESS_ACCESS_NONE, SG_INGRESS_ACCESS_ALL, SG_INGRESS_ACCESS_VPC.\nField introduced in 17.1.5.\nDefault value when not specified in API or module is interpreted by Avi Controller as SG_INGRESS_ACCESS_ALL.",
          "required": false,
          "suboptions": {}
        },
        "ingress_access_mgmt": {
          "aliases": [],
          "description": "Program se security group ingress rules to allow ssh/icmp management access from remote cidr type.\nEnum options - SG_INGRESS_ACCESS_NONE, SG_INGRESS_ACCESS_ALL, SG_INGRESS_ACCESS_VPC.\nField introduced in 17.1.5.\nDefault value when not specified in API or module is interpreted by Avi Controller as SG_INGRESS_ACCESS_ALL.",
          "required": false,
          "suboptions": {}
        },
        "instance_flavor": {
          "aliases": [],
          "description": "Instance/flavor name for se instance.",
          "required": false,
          "suboptions": {}
        },
        "iptables": {
          "aliases": [],
          "description": "Iptables rules.",
          "required": false,
          "suboptions": {}
        },
        "least_load_core_selection": {
          "aliases": [],
          "description": "Select core with least load for new flow.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "license_tier": {
          "aliases": [],
          "description": "Specifies the license tier which would be used.\nThis field by default inherits the value from cloud.\nEnum options - ENTERPRISE_16, ENTERPRISE_18.\nField introduced in 17.2.5.",
          "required": false,
          "suboptions": {}
        },
        "license_type": {
          "aliases": [],
          "description": "If no license type is specified then default license enforcement for the cloud type is chosen.\nEnum options - LIC_BACKEND_SERVERS, LIC_SOCKETS, LIC_CORES, LIC_HOSTS, LIC_SE_BANDWIDTH, LIC_METERED_SE_BANDWIDTH.\nField introduced in 17.2.5.",
          "required": false,
          "suboptions": {}
        },
        "log_disksz": {
          "aliases": [],
          "description": "Maximum disk capacity (in mb) to be allocated to an se.\nThis is exclusively used for debug and log data.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10000.",
          "required": false,
          "suboptions": {}
        },
        "max_cpu_usage": {
          "aliases": [],
          "description": "When cpu usage on an se exceeds this threshold, virtual services hosted on this se may be rebalanced to other ses to reduce load.\nA new se may be created as part of this process.\nAllowed values are 40-90.\nDefault value when not specified in API or module is interpreted by Avi Controller as 80.",
          "required": false,
          "suboptions": {}
        },
        "max_memory_per_mempool": {
          "aliases": [],
          "description": "Max bytes that can be allocated in a single mempool.\nField introduced in 18.1.5.\nDefault value when not specified in API or module is interpreted by Avi Controller as 64.",
          "required": false,
          "suboptions": {}
        },
        "max_public_ips_per_lb": {
          "aliases": [],
          "description": "Applicable to azure platform only.\nMaximum number of public ips per azure lb.\nField introduced in 17.2.12, 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 30.",
          "required": false,
          "suboptions": {}
        },
        "max_rules_per_lb": {
          "aliases": [],
          "description": "Applicable to azure platform only.\nMaximum number of rules per azure lb.\nField introduced in 17.2.12, 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 150.",
          "required": false,
          "suboptions": {}
        },
        "max_scaleout_per_vs": {
          "aliases": [],
          "description": "Maximum number of active service engines for the virtual service.\nAllowed values are 1-64.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.",
          "required": false,
          "suboptions": {}
        },
        "max_se": {
          "aliases": [],
          "description": "Maximum number of services engines in this group.\nAllowed values are 0-1000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "max_vs_per_se": {
          "aliases": [],
          "description": "Maximum number of virtual services that can be placed on a single service engine.\nEast west virtual services are excluded from this limit.\nAllowed values are 1-1000.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "mem_reserve": {
          "aliases": [],
          "description": "Boolean flag to set mem_reserve.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "memory_for_config_update": {
          "aliases": [],
          "description": "Indicates the percent of memory reserved for config updates.\nAllowed values are 0-100.\nField introduced in 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 15.",
          "required": false,
          "suboptions": {}
        },
        "memory_per_se": {
          "aliases": [],
          "description": "Amount of memory for each of the service engine virtual machines.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2048.",
          "required": false,
          "suboptions": {}
        },
        "mgmt_network_ref": {
          "aliases": [],
          "description": "Management network to use for avi service engines.\nIt is a reference to an object of type network.",
          "required": false,
          "suboptions": {}
        },
        "mgmt_subnet": {
          "aliases": [],
          "description": "Management subnet to use for avi service engines.",
          "required": false,
          "suboptions": {}
        },
        "min_cpu_usage": {
          "aliases": [],
          "description": "When cpu usage on an se falls below the minimum threshold, virtual services hosted on the se may be consolidated onto other underutilized ses.\nAfter consolidation, unused service engines may then be eligible for deletion.\nAllowed values are 20-60.\nDefault value when not specified in API or module is interpreted by Avi Controller as 30.",
          "required": false,
          "suboptions": {}
        },
        "min_scaleout_per_vs": {
          "aliases": [],
          "description": "Minimum number of active service engines for the virtual service.\nAllowed values are 1-64.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "min_se": {
          "aliases": [],
          "description": "Minimum number of services engines in this group (relevant for se autorebalance only).\nAllowed values are 0-1000.\nField introduced in 17.2.13,18.1.3,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "minimum_connection_memory": {
          "aliases": [],
          "description": "Indicates the percent of memory reserved for connections.\nAllowed values are 0-100.\nField introduced in 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 20.",
          "required": false,
          "suboptions": {}
        },
        "minimum_required_config_memory": {
          "aliases": [],
          "description": "Required available config memory to apply any configuration.\nAllowed values are 0-90.\nField deprecated in 18.1.2.\nField introduced in 18.1.1.",
          "required": false,
          "suboptions": {}
        },
        "n_log_streaming_threads": {
          "aliases": [],
          "description": "Number of threads to use for log streaming.\nAllowed values are 1-100.\nField introduced in 17.2.12, 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "non_significant_log_throttle": {
          "aliases": [],
          "description": "This setting limits the number of non-significant logs generated per second per core on this se.\nDefault is 100 logs per second.\nSet it to zero (0) to disable throttling.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 100.",
          "required": false,
          "suboptions": {}
        },
        "num_dispatcher_cores": {
          "aliases": [],
          "description": "Number of dispatcher cores (0,1,2,4,8 or 16).\nIf set to 0, then number of dispatcher cores is deduced automatically.\nAllowed values are 0,1,2,4,8,16.\nField introduced in 17.2.12, 18.1.3, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "num_flow_cores_sum_changes_to_ignore": {
          "aliases": [],
          "description": "Number of changes in num flow cores sum to ignore.\nDefault value when not specified in API or module is interpreted by Avi Controller as 8.",
          "required": false,
          "suboptions": {}
        },
        "openstack_availability_zone": {
          "aliases": [],
          "description": "Field deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "openstack_availability_zones": {
          "aliases": [],
          "description": "Field introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "openstack_mgmt_network_name": {
          "aliases": [],
          "description": "Avi management network name.",
          "required": false,
          "suboptions": {}
        },
        "openstack_mgmt_network_uuid": {
          "aliases": [],
          "description": "Management network uuid.",
          "required": false,
          "suboptions": {}
        },
        "os_reserved_memory": {
          "aliases": [],
          "description": "Amount of extra memory to be reserved for use by the operating system on a service engine.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "per_app": {
          "aliases": [],
          "description": "Per-app se mode is designed for deploying dedicated load balancers per app (vs).\nIn this mode, each se is limited to a max of 2 vss.\nVcpus in per-app ses count towards licensing usage at 25% rate.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "placement_mode": {
          "aliases": [],
          "description": "If placement mode is 'auto', virtual services are automatically placed on service engines.\nEnum options - PLACEMENT_MODE_AUTO.\nDefault value when not specified in API or module is interpreted by Avi Controller as PLACEMENT_MODE_AUTO.",
          "required": false,
          "suboptions": {}
        },
        "realtime_se_metrics": {
          "aliases": [],
          "description": "Enable or disable real time se metrics.",
          "required": false,
          "suboptions": {}
        },
        "reboot_on_stop": {
          "aliases": [],
          "description": "Reboot the system if the se is stopped.\nField introduced in 17.2.16,18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "se_bandwidth_type": {
          "aliases": [],
          "description": "Select the se bandwidth for the bandwidth license.\nEnum options - SE_BANDWIDTH_UNLIMITED, SE_BANDWIDTH_25M, SE_BANDWIDTH_200M, SE_BANDWIDTH_1000M, SE_BANDWIDTH_10000M.\nField introduced in 17.2.5.",
          "required": false,
          "suboptions": {}
        },
        "se_deprovision_delay": {
          "aliases": [],
          "description": "Duration to preserve unused service engine virtual machines before deleting them.\nIf traffic to a virtual service were to spike up abruptly, this se would still be available to be utilized again rather than creating a new se.\nIf this value is set to 0, controller will never delete any ses and administrator has to manually cleanup unused ses.\nAllowed values are 0-525600.\nDefault value when not specified in API or module is interpreted by Avi Controller as 120.",
          "required": false,
          "suboptions": {}
        },
        "se_dos_profile": {
          "aliases": [],
          "description": "Dosthresholdprofile settings for serviceenginegroup.",
          "required": false,
          "suboptions": {}
        },
        "se_dpdk_pmd": {
          "aliases": [],
          "description": "Determines if dpdk pool mode driver should be used or not   0  automatically determine based on hypervisor/nic type 1  unconditionally use dpdk\npoll mode driver 2  don't use dpdk poll mode driver.\nAllowed values are 0-2.\nField introduced in 18.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "se_flow_probe_retries": {
          "aliases": [],
          "description": "Flow probe retry count if no replies are received.\nAllowed values are 0-5.\nField introduced in 18.1.4, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 2.",
          "required": false,
          "suboptions": {}
        },
        "se_flow_probe_timer": {
          "aliases": [],
          "description": "Timeout in milliseconds for flow probe entries.\nAllowed values are 10-200.\nField introduced in 18.1.4, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 100.",
          "required": false,
          "suboptions": {}
        },
        "se_ipc_udp_port": {
          "aliases": [],
          "description": "Udp port for se_dp ipc in docker bridge mode.\nField introduced in 17.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1500.",
          "required": false,
          "suboptions": {}
        },
        "se_name_prefix": {
          "aliases": [],
          "description": "Prefix to use for virtual machine name of service engines.\nDefault value when not specified in API or module is interpreted by Avi Controller as Avi.",
          "required": false,
          "suboptions": {}
        },
        "se_pcap_lookahead": {
          "aliases": [],
          "description": "Enables lookahead mode of packet receive in pcap mode.\nIntroduced to overcome an issue with hv_netvsc driver.\nLookahead mode attempts to ensure that application and kernel's view of the receive rings are consistent.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "se_pcap_reinit_frequency": {
          "aliases": [],
          "description": "Frequency in seconds at which periodically a pcap reinit check is triggered.\nMay be used in conjunction with the configuration pcap_reinit_threshold.\n(valid range   15 mins - 12 hours, 0 - disables).\nAllowed values are 900-43200.\nSpecial values are 0- 'disable'.\nField introduced in 17.2.13, 18.1.3, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "se_pcap_reinit_threshold": {
          "aliases": [],
          "description": "Threshold for input packet receive errors in pcap mode exceeding which a pcap reinit is triggered.\nIf not set, an unconditional reinit is performed.\nThis value is checked every pcap_reinit_frequency interval.\nField introduced in 17.2.13, 18.1.3, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "se_probe_port": {
          "aliases": [],
          "description": "Tcp port on se where echo service will be run.\nField introduced in 17.2.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 7.",
          "required": false,
          "suboptions": {}
        },
        "se_remote_punt_udp_port": {
          "aliases": [],
          "description": "Udp port for punted packets in docker bridge mode.\nField introduced in 17.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1501.",
          "required": false,
          "suboptions": {}
        },
        "se_routing": {
          "aliases": [],
          "description": "Enable routing via service engine datapath.\nWhen disabled, routing is done by the linux kernel.\nIp routing needs to be enabled in service engine group for se routing to be effective.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "se_sb_dedicated_core": {
          "aliases": [],
          "description": "Sideband traffic will be handled by a dedicated core.\nField introduced in 16.5.2, 17.1.9, 17.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "se_sb_threads": {
          "aliases": [],
          "description": "Number of sideband threads per se.\nAllowed values are 1-128.\nField introduced in 16.5.2, 17.1.9, 17.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "se_thread_multiplier": {
          "aliases": [],
          "description": "Multiplier for se threads based on vcpu.\nAllowed values are 1-10.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "se_tracert_port_range": {
          "aliases": [],
          "description": "Traceroute port range.\nField introduced in 17.2.8.",
          "required": false,
          "suboptions": {}
        },
        "se_tunnel_mode": {
          "aliases": [],
          "description": "Determines if dsr from secondary se is active or not  0  automatically determine based on hypervisor type.\n1  disable dsr unconditionally.\n2  enable dsr unconditionally.\nAllowed values are 0-2.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "se_tunnel_udp_port": {
          "aliases": [],
          "description": "Udp port for tunneled packets from secondary to primary se in docker bridge mode.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1550.",
          "required": false,
          "suboptions": {}
        },
        "se_udp_encap_ipc": {
          "aliases": [],
          "description": "Determines if se-se ipc messages are encapsulated in a udp header  0  automatically determine based on hypervisor type.\n1  use udp encap unconditionally.\nAllowed values are 0-1.\nField introduced in 17.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "se_use_dpdk": {
          "aliases": [],
          "description": "Determines if dpdk library should be used or not   0  automatically determine based on hypervisor type 1  use dpdk if pcap is not enabled 2\ndon't use dpdk.\nAllowed values are 0-2.\nField introduced in 18.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "se_vs_hb_max_pkts_in_batch": {
          "aliases": [],
          "description": "Maximum number of aggregated vs heartbeat packets to send in a batch.\nAllowed values are 1-256.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 64.",
          "required": false,
          "suboptions": {}
        },
        "se_vs_hb_max_vs_in_pkt": {
          "aliases": [],
          "description": "Maximum number of virtualservices for which heartbeat messages are aggregated in one packet.\nAllowed values are 1-1024.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 256.",
          "required": false,
          "suboptions": {}
        },
        "self_se_election": {
          "aliases": [],
          "description": "Enable ses to elect a primary amongst themselves in the absence of a connectivity to controller.\nField introduced in 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "service_ip6_subnets": {
          "aliases": [],
          "description": "Ipv6 subnets assigned to the se group.\nRequired for vs group placement.\nField introduced in 18.1.1.",
          "required": false,
          "suboptions": {}
        },
        "service_ip_subnets": {
          "aliases": [],
          "description": "Subnets assigned to the se group.\nRequired for vs group placement.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "shm_minimum_config_memory": {
          "aliases": [],
          "description": "Minimum required shared memory to apply any configuration.\nAllowed values are 0-100.\nField introduced in 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.",
          "required": false,
          "suboptions": {}
        },
        "significant_log_throttle": {
          "aliases": [],
          "description": "This setting limits the number of significant logs generated per second per core on this se.\nDefault is 100 logs per second.\nSet it to zero (0) to disable throttling.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 100.",
          "required": false,
          "suboptions": {}
        },
        "ssl_preprocess_sni_hostname": {
          "aliases": [],
          "description": "(beta) preprocess ssl client hello for sni hostname extension.if set to true, this will apply sni child's ssl protocol(s), if they are different\nfrom sni parent's allowed ssl protocol(s).\nField introduced in 17.2.12, 18.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "udf_log_throttle": {
          "aliases": [],
          "description": "This setting limits the number of udf logs generated per second per core on this se.\nUdf logs are generated due to the configured client log filters or the rules with logging enabled.\nDefault is 100 logs per second.\nSet it to zero (0) to disable throttling.\nField introduced in 17.1.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 100.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "use_standard_alb": {
          "aliases": [],
          "description": "Use standard sku azure load balancer.\nBy default cloud level flag is set.\nIf not set, it inherits/uses the use_standard_alb flag from the cloud.\nField introduced in 18.2.3.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        },
        "vcenter_clusters": {
          "aliases": [],
          "description": "Vcenterclusters settings for serviceenginegroup.",
          "required": false,
          "suboptions": {}
        },
        "vcenter_datastore_mode": {
          "aliases": [],
          "description": "Enum options - vcenter_datastore_any, vcenter_datastore_local, vcenter_datastore_shared.\nDefault value when not specified in API or module is interpreted by Avi Controller as VCENTER_DATASTORE_ANY.",
          "required": false,
          "suboptions": {}
        },
        "vcenter_datastores": {
          "aliases": [],
          "description": "List of vcenterdatastore.",
          "required": false,
          "suboptions": {}
        },
        "vcenter_datastores_include": {
          "aliases": [],
          "description": "Boolean flag to set vcenter_datastores_include.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vcenter_folder": {
          "aliases": [],
          "description": "Folder to place all the service engine virtual machines in vcenter.\nDefault value when not specified in API or module is interpreted by Avi Controller as AviSeFolder.",
          "required": false,
          "suboptions": {}
        },
        "vcenter_hosts": {
          "aliases": [],
          "description": "Vcenterhosts settings for serviceenginegroup.",
          "required": false,
          "suboptions": {}
        },
        "vcpus_per_se": {
          "aliases": [],
          "description": "Number of vcpus for each of the service engine virtual machines.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        },
        "vip_asg": {
          "aliases": [],
          "description": "When vip_asg is set, vip configuration will be managed by avi.user will be able to configure vip_asg or vips individually at the time of create.\nField introduced in 17.2.12, 18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "vs_host_redundancy": {
          "aliases": [],
          "description": "Ensure primary and secondary service engines are deployed on different physical hosts.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vs_scalein_timeout": {
          "aliases": [],
          "description": "Time to wait for the scaled in se to drain existing flows before marking the scalein done.\nDefault value when not specified in API or module is interpreted by Avi Controller as 30.",
          "required": false,
          "suboptions": {}
        },
        "vs_scalein_timeout_for_upgrade": {
          "aliases": [],
          "description": "During se upgrade, time to wait for the scaled-in se to drain existing flows before marking the scalein done.\nDefault value when not specified in API or module is interpreted by Avi Controller as 30.",
          "required": false,
          "suboptions": {}
        },
        "vs_scaleout_timeout": {
          "aliases": [],
          "description": "Time to wait for the scaled out se to become ready before marking the scaleout done.\nDefault value when not specified in API or module is interpreted by Avi Controller as 600.",
          "required": false,
          "suboptions": {}
        },
        "vs_se_scaleout_additional_wait_time": {
          "aliases": [],
          "description": "Wait time for sending scaleout ready notification after virtual service is marked up.\nIn certain deployments, there may be an additional delay to accept traffic.\nFor example, for bgp, some time is needed for route advertisement.\nAllowed values are 0-20.\nField introduced in 18.1.5,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "vs_se_scaleout_ready_timeout": {
          "aliases": [],
          "description": "Timeout in seconds for service engine to sendscaleout ready notification of a virtual service.\nAllowed values are 0-60.\nField introduced in 18.1.5,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 25.",
          "required": false,
          "suboptions": {}
        },
        "vs_switchover_timeout": {
          "aliases": [],
          "description": "During se upgrade in a legacy active/standby segroup, time to wait for the new primary se to accept flows before marking the switchover done.\nField introduced in 17.2.13,18.1.4,18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as 300.",
          "required": false,
          "suboptions": {}
        },
        "vss_placement": {
          "aliases": [],
          "description": "Parameters to place virtual services on only a subset of the cores of an se.\nField introduced in 17.2.5.",
          "required": false,
          "suboptions": {}
        },
        "vss_placement_enabled": {
          "aliases": [],
          "description": "If set, virtual services will be placed on only a subset of the cores of an se.\nField introduced in 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "waf_learning_interval": {
          "aliases": [],
          "description": "Frequency with which se publishes waf learning.\nAllowed values are 1-43200.\nField deprecated in 18.2.3.\nField introduced in 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 10.",
          "required": false,
          "suboptions": {}
        },
        "waf_learning_memory": {
          "aliases": [],
          "description": "Amount of memory reserved on se for waf learning.\nCannot exceed 5% of se memory.\nField deprecated in 18.2.3.\nField introduced in 18.1.2.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "waf_mempool": {
          "aliases": [],
          "description": "Enable memory pool for waf.\nField introduced in 17.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "waf_mempool_size": {
          "aliases": [],
          "description": "Memory pool size used for waf.\nField introduced in 17.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as 64.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of ServiceEngineGroup Avi RESTful Object"
    },
    "examples": "\n- name: Example to create ServiceEngineGroup object\n  community.network.avi_serviceenginegroup:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_serviceenginegroup\n"
  },
  "community.network.avi_snmptrapprofile": {
    "doc": {
      "description": "This module is used to configure SnmpTrapProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A user-friendly name of the snmp trap configuration.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "trap_servers": {
          "aliases": [],
          "description": "The ip address or hostname of the snmp trap destination server.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the snmp trap profile object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of SnmpTrapProfile Avi RESTful Object"
    },
    "examples": "\n- name: Example to create SnmpTrapProfile object\n  community.network.avi_snmptrapprofile:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_snmptrapprofile\n"
  },
  "community.network.avi_sslkeyandcertificate": {
    "doc": {
      "description": "This module is used to configure SSLKeyAndCertificate object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_certs": {
          "aliases": [],
          "description": "Ca certificates in certificate chain.",
          "required": false,
          "suboptions": {}
        },
        "certificate": {
          "aliases": [],
          "description": "Sslcertificate settings for sslkeyandcertificate.",
          "required": true,
          "suboptions": {}
        },
        "certificate_base64": {
          "aliases": [],
          "description": "States if the certificate is base64 encoded.\nField introduced in 18.1.2, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "certificate_management_profile_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type certificatemanagementprofile.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.",
          "required": false,
          "suboptions": {}
        },
        "dynamic_params": {
          "aliases": [],
          "description": "Dynamic parameters needed for certificate management profile.",
          "required": false,
          "suboptions": {}
        },
        "enckey_base64": {
          "aliases": [],
          "description": "Encrypted private key corresponding to the private key (e.g.\nThose generated by an hsm such as thales nshield).",
          "required": false,
          "suboptions": {}
        },
        "enckey_name": {
          "aliases": [],
          "description": "Name of the encrypted private key (e.g.\nThose generated by an hsm such as thales nshield).",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "Format of the key/certificate file.\nEnum options - SSL_PEM, SSL_PKCS12.\nField introduced in 18.1.2, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as SSL_PEM.",
          "required": false,
          "suboptions": {}
        },
        "hardwaresecuritymodulegroup_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type hardwaresecuritymodulegroup.",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Private key.",
          "required": false,
          "suboptions": {}
        },
        "key_base64": {
          "aliases": [],
          "description": "States if the private key is base64 encoded.\nField introduced in 18.1.2, 18.2.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "key_params": {
          "aliases": [],
          "description": "Sslkeyparams settings for sslkeyandcertificate.",
          "required": false,
          "suboptions": {}
        },
        "key_passphrase": {
          "aliases": [],
          "description": "Passphrase used to encrypt the private key.\nField introduced in 18.1.2, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Enum options - ssl_certificate_finished, ssl_certificate_pending.\nDefault value when not specified in API or module is interpreted by Avi Controller as SSL_CERTIFICATE_FINISHED.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Enum options - ssl_certificate_type_virtualservice, ssl_certificate_type_system, ssl_certificate_type_ca.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of SSLKeyAndCertificate Avi RESTful Object"
    },
    "examples": "\n- name: Create a SSL Key and Certificate\n  community.network.avi_sslkeyandcertificate:\n    controller: 10.10.27.90\n    username: admin\n    password: AviNetworks123!\n    key: |\n        -----BEGIN PRIVATE KEY-----\n        ....\n        -----END PRIVATE KEY-----\n    certificate:\n        self_signed: true\n        certificate: |\n          -----BEGIN CERTIFICATE-----\n          ....\n          -----END CERTIFICATE-----\n    type: SSL_CERTIFICATE_TYPE_VIRTUALSERVICE\n    name: MyTestCert\n"
  },
  "community.network.avi_sslprofile": {
    "doc": {
      "description": "This module is used to configure SSLProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "accepted_ciphers": {
          "aliases": [],
          "description": "Ciphers suites represented as defined by U(http://www.openssl.org/docs/apps/ciphers.html).\nDefault value when not specified in API or module is interpreted by Avi Controller as AES:3DES:RC4.",
          "required": false,
          "suboptions": {}
        },
        "accepted_versions": {
          "aliases": [],
          "description": "Set of versions accepted by the server.",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cipher_enums": {
          "aliases": [],
          "description": "Enum options - tls_ecdhe_ecdsa_with_aes_128_gcm_sha256, tls_ecdhe_ecdsa_with_aes_256_gcm_sha384, tls_ecdhe_rsa_with_aes_128_gcm_sha256,\ntls_ecdhe_rsa_with_aes_256_gcm_sha384, tls_ecdhe_ecdsa_with_aes_128_cbc_sha256, tls_ecdhe_ecdsa_with_aes_256_cbc_sha384,\ntls_ecdhe_rsa_with_aes_128_cbc_sha256, tls_ecdhe_rsa_with_aes_256_cbc_sha384, tls_rsa_with_aes_128_gcm_sha256, tls_rsa_with_aes_256_gcm_sha384,\ntls_rsa_with_aes_128_cbc_sha256, tls_rsa_with_aes_256_cbc_sha256, tls_ecdhe_ecdsa_with_aes_128_cbc_sha, tls_ecdhe_ecdsa_with_aes_256_cbc_sha,\ntls_ecdhe_rsa_with_aes_128_cbc_sha, tls_ecdhe_rsa_with_aes_256_cbc_sha, tls_rsa_with_aes_128_cbc_sha, tls_rsa_with_aes_256_cbc_sha,\ntls_rsa_with_3des_ede_cbc_sha, tls_rsa_with_rc4_128_sha.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "dhparam": {
          "aliases": [],
          "description": "Dh parameters used in ssl.\nAt this time, it is not configurable and is set to 2048 bits.",
          "required": false,
          "suboptions": {}
        },
        "enable_ssl_session_reuse": {
          "aliases": [],
          "description": "Enable ssl session re-use.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefer_client_cipher_ordering": {
          "aliases": [],
          "description": "Prefer the ssl cipher ordering presented by the client during the ssl handshake over the one specified in the ssl profile.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "send_close_notify": {
          "aliases": [],
          "description": "Send 'close notify' alert message for a clean shutdown of the ssl connection.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_rating": {
          "aliases": [],
          "description": "Sslrating settings for sslprofile.",
          "required": false,
          "suboptions": {}
        },
        "ssl_session_timeout": {
          "aliases": [],
          "description": "The amount of time in seconds before an ssl session expires.\nDefault value when not specified in API or module is interpreted by Avi Controller as 86400.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tag.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Ssl profile type.\nEnum options - SSL_PROFILE_TYPE_APPLICATION, SSL_PROFILE_TYPE_SYSTEM.\nField introduced in 17.2.8.\nDefault value when not specified in API or module is interpreted by Avi Controller as SSL_PROFILE_TYPE_APPLICATION.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of SSLProfile Avi RESTful Object"
    },
    "examples": "\n  - name: Create SSL profile with list of allowed ciphers\n    community.network.avi_sslprofile:\n      controller: '{{ controller }}'\n      username: '{{ username }}'\n      password: '{{ password }}'\n      accepted_ciphers: >\n        ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:\n        ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:\n        AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:\n        AES256-SHA:DES-CBC3-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:\n        ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA\n      accepted_versions:\n      - type: SSL_VERSION_TLS1\n      - type: SSL_VERSION_TLS1_1\n      - type: SSL_VERSION_TLS1_2\n      cipher_enums:\n      - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n      - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n      - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n      - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n      - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\n      - TLS_RSA_WITH_AES_128_GCM_SHA256\n      - TLS_RSA_WITH_AES_256_GCM_SHA384\n      - TLS_RSA_WITH_AES_128_CBC_SHA256\n      - TLS_RSA_WITH_AES_256_CBC_SHA256\n      - TLS_RSA_WITH_AES_128_CBC_SHA\n      - TLS_RSA_WITH_AES_256_CBC_SHA\n      - TLS_RSA_WITH_3DES_EDE_CBC_SHA\n      - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n      - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\n      - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n      - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n      - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n      name: PFS-BOTH-RSA-EC\n      send_close_notify: true\n      ssl_rating:\n        compatibility_rating: SSL_SCORE_EXCELLENT\n        performance_rating: SSL_SCORE_EXCELLENT\n        security_score: '100.0'\n      tenant_ref: Demo\n"
  },
  "community.network.avi_stringgroup": {
    "doc": {
      "description": "This module is used to configure StringGroup object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "kv": {
          "aliases": [],
          "description": "Configure key value in the string group.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the string group.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of stringgroup.\nEnum options - SG_TYPE_STRING, SG_TYPE_KEYVAL.\nDefault value when not specified in API or module is interpreted by Avi Controller as SG_TYPE_STRING.",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the string group.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of StringGroup Avi RESTful Object"
    },
    "examples": "\n  - name: Create a string group configuration\n    community.network.avi_stringgroup:\n      controller: '{{ controller }}'\n      password: '{{ password }}'\n      username: '{{ username }}'\n      kv:\n      - key: text/html\n      - key: text/xml\n      - key: text/plain\n      - key: text/css\n      - key: text/javascript\n      - key: application/javascript\n      - key: application/x-javascript\n      - key: application/xml\n      - key: application/pdf\n      name: System-Compressible-Content-Types\n      tenant_ref: admin\n      type: SG_TYPE_STRING\n"
  },
  "community.network.avi_systemconfiguration": {
    "doc": {
      "description": "This module is used to configure SystemConfiguration object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "admin_auth_configuration": {
          "aliases": [],
          "description": "Adminauthconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_license_tier": {
          "aliases": [],
          "description": "Specifies the default license tier which would be used by new clouds.\nEnum options - ENTERPRISE_16, ENTERPRISE_18.\nField introduced in 17.2.5.\nDefault value when not specified in API or module is interpreted by Avi Controller as ENTERPRISE_18.",
          "required": false,
          "suboptions": {}
        },
        "dns_configuration": {
          "aliases": [],
          "description": "Dnsconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "dns_virtualservice_refs": {
          "aliases": [],
          "description": "Dns virtualservices hosting fqdn records for applications across avi vantage.\nIf no virtualservices are provided, avi vantage will provide dns services for configured applications.\nSwitching back to avi vantage from dns virtualservices is not allowed.\nIt is a reference to an object of type virtualservice.",
          "required": false,
          "suboptions": {}
        },
        "docker_mode": {
          "aliases": [],
          "description": "Boolean flag to set docker_mode.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "email_configuration": {
          "aliases": [],
          "description": "Emailconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "global_tenant_config": {
          "aliases": [],
          "description": "Tenantconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "linux_configuration": {
          "aliases": [],
          "description": "Linuxconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "mgmt_ip_access_control": {
          "aliases": [],
          "description": "Configure ip access control for controller to restrict open access.",
          "required": false,
          "suboptions": {}
        },
        "ntp_configuration": {
          "aliases": [],
          "description": "Ntpconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portal_configuration": {
          "aliases": [],
          "description": "Portalconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "proxy_configuration": {
          "aliases": [],
          "description": "Proxyconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "secure_channel_configuration": {
          "aliases": [],
          "description": "Configure secure channel properties.\nField introduced in 18.1.4, 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "snmp_configuration": {
          "aliases": [],
          "description": "Snmpconfiguration settings for systemconfiguration.",
          "required": false,
          "suboptions": {}
        },
        "ssh_ciphers": {
          "aliases": [],
          "description": "Allowed ciphers list for ssh to the management interface on the controller and service engines.\nIf this is not specified, all the default ciphers are allowed.",
          "required": false,
          "suboptions": {}
        },
        "ssh_hmacs": {
          "aliases": [],
          "description": "Allowed hmac list for ssh to the management interface on the controller and service engines.\nIf this is not specified, all the default hmacs are allowed.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        },
        "welcome_workflow_complete": {
          "aliases": [],
          "description": "This flag is set once the initial controller setup workflow is complete.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of SystemConfiguration Avi RESTful Object"
    },
    "examples": "\n- name: Example to create SystemConfiguration object\n  community.network.avi_systemconfiguration:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_systemconfiguration\n"
  },
  "community.network.avi_tenant": {
    "doc": {
      "description": "This module is used to configure Tenant object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "config_settings": {
          "aliases": [],
          "description": "Tenantconfiguration settings for tenant.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator of this tenant.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "local": {
          "aliases": [],
          "description": "Boolean flag to set local.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Tenant Avi RESTful Object"
    },
    "examples": "\n  - name: Create Tenant using Service Engines in provider mode\n    community.network.avi_tenant:\n      controller: '{{ controller }}'\n      password: '{{ password }}'\n      username: '{{ username }}'\n      config_settings:\n        se_in_provider_context: false\n        tenant_access_to_provider_se: true\n        tenant_vrf: false\n      description: VCenter, Open Stack, AWS Virtual services\n      local: true\n      name: Demo\n"
  },
  "community.network.avi_trafficcloneprofile": {
    "doc": {
      "description": "This module is used to configure TrafficCloneProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "clone_servers": {
          "aliases": [],
          "description": "Field introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the traffic clone profile.\nField introduced in 17.1.1.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "preserve_client_ip": {
          "aliases": [],
          "description": "Specifies if client ip needs to be preserved to clone destination.\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the traffic clone profile.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of TrafficCloneProfile Avi RESTful Object"
    },
    "examples": "\n- name: Example to create TrafficCloneProfile object\n  community.network.avi_trafficcloneprofile:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_trafficcloneprofile\n"
  },
  "community.network.avi_user": {
    "doc": {
      "description": "This module can be used for creation, updation and deletion of a user.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "access": {
          "aliases": [],
          "description": "Access settings (write, read, or no access) for each type of resource within Vantage.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "type": "str",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "type": "str",
          "required": false,
          "choices": [
            "post",
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_tenant_ref": {
          "aliases": [],
          "description": "Default tenant reference.\nThis can also be full URI same as it comes in response payload",
          "default": "/api/tenant?name=admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email address of the user. This field is used when a user loses their password and requests to have it reset. See Password Recovery.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_active": {
          "aliases": [],
          "description": "Activates the current user account.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_superuser": {
          "aliases": [],
          "description": "If the user will need to have the same privileges as the admin account, set it to true.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Full name of the user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "obj_password": {
          "aliases": [],
          "description": "You may either enter a case-sensitive password in this field for the new or existing user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "obj_username": {
          "aliases": [],
          "description": "Name that the user will supply when signing into Avi Vantage, such as jdoe or jdoe@avinetworks.com.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_profile_ref": {
          "aliases": [],
          "description": "Refer user profile.\nThis can also be full URI same as it comes in response payload",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Avi User Module"
    },
    "examples": "\n  - name: User creation\n    community.network.avi_user:\n      controller: \"\"\n      username: \"\"\n      password: \"\"\n      api_version: \"\"\n      name: \"testuser\"\n      obj_username: \"testuser\"\n      obj_password: \"test123\"\n      email: \"test@abc.test\"\n      access:\n        - role_ref: \"/api/role?name=Tenant-Admin\"\n          tenant_ref: \"/api/tenant/admin#admin\"\n      user_profile_ref: \"/api/useraccountprofile?name=Default-User-Account-Profile\"\n      is_active: true\n      is_superuser: true\n      default_tenant_ref: \"/api/tenant?name=admin\"\n\n  - name: User creation\n    community.network.avi_user:\n      controller: \"\"\n      username: \"\"\n      password: \"\"\n      api_version: \"\"\n      name: \"testuser\"\n      obj_username: \"testuser2\"\n      obj_password: \"password\"\n      email: \"testuser2@abc.test\"\n      access:\n        - role_ref: \"https://192.0.2.10/api/role?name=Tenant-Admin\"\n          tenant_ref: \"https://192.0.2.10/api/tenant/admin#admin\"\n      user_profile_ref: \"https://192.0.2.10/api/useraccountprofile?name=Default-User-Account-Profile\"\n      is_active: true\n      is_superuser: true\n      default_tenant_ref: \"https://192.0.2.10/api/tenant?name=admin\"\n"
  },
  "community.network.avi_useraccount": {
    "doc": {
      "description": "This module can be used for updating the password of a user.\nThis module is useful for setting up admin password for Controller bootstrap.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_change": {
          "aliases": [],
          "description": "If specifically set to true then old password is tried first for controller and then the new password is tried. If not specified this flag then the new password is tried first.",
          "default": "False",
          "required": false,
          "suboptions": {}
        },
        "old_password": {
          "aliases": [],
          "description": "Old password for update password or default password for bootstrap.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Avi UserAccount Module"
    },
    "examples": "\n  - name: Update user password\n    community.network.avi_useraccount:\n      controller: \"\"\n      username: \"\"\n      password: new_password\n      old_password: \"\"\n      api_version: \"\"\n      force_change: false\n\n  - name: Update user password using avi_credentials\n    community.network.avi_useraccount:\n      avi_credentials: \"\"\n      old_password: \"\"\n      force_change: false\n"
  },
  "community.network.avi_useraccountprofile": {
    "doc": {
      "description": "This module is used to configure UserAccountProfile object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "account_lock_timeout": {
          "aliases": [],
          "description": "Lock timeout period (in minutes).\nDefault is 30 minutes.\nDefault value when not specified in API or module is interpreted by Avi Controller as 30.",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials_timeout_threshold": {
          "aliases": [],
          "description": "The time period after which credentials expire.\nDefault is 180 days.\nDefault value when not specified in API or module is interpreted by Avi Controller as 180.",
          "required": false,
          "suboptions": {}
        },
        "max_concurrent_sessions": {
          "aliases": [],
          "description": "Maximum number of concurrent sessions allowed.\nThere are unlimited sessions by default.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "max_login_failure_count": {
          "aliases": [],
          "description": "Number of login attempts before lockout.\nDefault is 3 attempts.\nDefault value when not specified in API or module is interpreted by Avi Controller as 3.",
          "required": false,
          "suboptions": {}
        },
        "max_password_history_count": {
          "aliases": [],
          "description": "Maximum number of passwords to be maintained in the password history.\nDefault is 4 passwords.\nDefault value when not specified in API or module is interpreted by Avi Controller as 4.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of UserAccountProfile Avi RESTful Object"
    },
    "examples": "\n- name: Example to create UserAccountProfile object\n  community.network.avi_useraccountprofile:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_useraccountprofile\n"
  },
  "community.network.avi_virtualservice": {
    "doc": {
      "description": "This module is used to configure VirtualService object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "active_standby_se_tag": {
          "aliases": [],
          "description": "This configuration only applies if the virtualservice is in legacy active standby ha mode and load distribution among active standby is enabled.\nThis field is used to tag the virtualservice so that virtualservices with the same tag will share the same active serviceengine.\nVirtualservices with different tags will have different active serviceengines.\nIf one of the serviceengine's in the serviceenginegroup fails, all virtualservices will end up using the same active serviceengine.\nRedistribution of the virtualservices can be either manual or automated when the failed serviceengine recovers.\nRedistribution is based on the auto redistribute property of the serviceenginegroup.\nEnum options - ACTIVE_STANDBY_SE_1, ACTIVE_STANDBY_SE_2.\nDefault value when not specified in API or module is interpreted by Avi Controller as ACTIVE_STANDBY_SE_1.",
          "required": false,
          "suboptions": {}
        },
        "allow_invalid_client_cert": {
          "aliases": [],
          "description": "Process request even if invalid client certificate is presented.\nDatascript apis need to be used for processing of such requests.\nField introduced in 18.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "analytics_policy": {
          "aliases": [],
          "description": "Determines analytics settings for the application.",
          "required": false,
          "suboptions": {}
        },
        "analytics_profile_ref": {
          "aliases": [],
          "description": "Specifies settings related to analytics.\nIt is a reference to an object of type analyticsprofile.",
          "required": false,
          "suboptions": {}
        },
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "apic_contract_graph": {
          "aliases": [],
          "description": "The name of the contract/graph associated with the virtual service.\nShould be in the <contract name> <graph name> format.\nThis is applicable only for service integration mode with cisco apic controller.\nField introduced in 17.2.12,18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "application_profile_ref": {
          "aliases": [],
          "description": "Enable application layer specific features for the virtual service.\nIt is a reference to an object of type applicationprofile.",
          "required": false,
          "suboptions": {}
        },
        "auto_allocate_floating_ip": {
          "aliases": [],
          "description": "Auto-allocate floating/elastic ip from the cloud infrastructure.\nField deprecated in 17.1.1.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_allocate_ip": {
          "aliases": [],
          "description": "Auto-allocate vip from the provided subnet.\nField deprecated in 17.1.1.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Availability-zone to place the virtual service.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "avi_allocated_fip": {
          "aliases": [],
          "description": "(internal-use) fip allocated by avi in the cloud infrastructure.\nField deprecated in 17.1.1.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "avi_allocated_vip": {
          "aliases": [],
          "description": "(internal-use) vip allocated by avi in the cloud infrastructure.\nField deprecated in 17.1.1.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "azure_availability_set": {
          "aliases": [],
          "description": "(internal-use)applicable for azure only.\nAzure availability set to which this vs is associated.\nInternally set by the cloud connector.\nField introduced in 17.2.12, 18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "bulk_sync_kvcache": {
          "aliases": [],
          "description": "(this is a beta feature).\nSync key-value cache to the new ses when vs is scaled out.\nFor ex  ssl sessions are stored using vs's key-value cache.\nWhen the vs is scaled out, the ssl session information is synced to the new se, allowing existing ssl sessions to be reused on the new se.\nField introduced in 17.2.7, 18.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "client_auth": {
          "aliases": [],
          "description": "Http authentication configuration for protected resources.",
          "required": false,
          "suboptions": {}
        },
        "close_client_conn_on_config_update": {
          "aliases": [],
          "description": "Close client connection on vs config update.\nField introduced in 17.2.4.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_config_cksum": {
          "aliases": [],
          "description": "Checksum of cloud configuration for vs.\nInternally set by cloud connector.",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.",
          "required": false,
          "suboptions": {}
        },
        "cloud_type": {
          "aliases": [],
          "description": "Enum options - cloud_none, cloud_vcenter, cloud_openstack, cloud_aws, cloud_vca, cloud_apic, cloud_mesos, cloud_linuxserver, cloud_docker_ucp,\ncloud_rancher, cloud_oshift_k8s, cloud_azure, cloud_gcp.\nDefault value when not specified in API or module is interpreted by Avi Controller as CLOUD_NONE.",
          "required": false,
          "suboptions": {}
        },
        "connections_rate_limit": {
          "aliases": [],
          "description": "Rate limit the incoming connections to this virtual service.",
          "required": false,
          "suboptions": {}
        },
        "content_rewrite": {
          "aliases": [],
          "description": "Profile used to match and rewrite strings in request and/or response body.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.",
          "required": false,
          "suboptions": {}
        },
        "delay_fairness": {
          "aliases": [],
          "description": "Select the algorithm for qos fairness.\nThis determines how multiple virtual services sharing the same service engines will prioritize traffic over a congested network.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "discovered_network_ref": {
          "aliases": [],
          "description": "(internal-use) discovered networks providing reachability for client facing virtual service ip.\nThis field is deprecated.\nIt is a reference to an object of type network.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "discovered_networks": {
          "aliases": [],
          "description": "(internal-use) discovered networks providing reachability for client facing virtual service ip.\nThis field is used internally by avi, not editable by the user.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "discovered_subnet": {
          "aliases": [],
          "description": "(internal-use) discovered subnets providing reachability for client facing virtual service ip.\nThis field is deprecated.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "dns_info": {
          "aliases": [],
          "description": "Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record.\nNote that only one of fqdn and dns_info setting is allowed.",
          "required": false,
          "suboptions": {}
        },
        "dns_policies": {
          "aliases": [],
          "description": "Dns policies applied on the dns traffic of the virtual service.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "east_west_placement": {
          "aliases": [],
          "description": "Force placement on all se's in service group (mesos mode only).\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_autogw": {
          "aliases": [],
          "description": "Response traffic to clients will be sent back to the source mac address of the connection, rather than statically sent to a default gateway.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_rhi": {
          "aliases": [],
          "description": "Enable route health injection using the bgp config in the vrf context.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_rhi_snat": {
          "aliases": [],
          "description": "Enable route health injection for source nat'ted floating ip address using the bgp config in the vrf context.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable or disable the virtual service.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "error_page_profile_ref": {
          "aliases": [],
          "description": "Error page profile to be used for this virtualservice.this profile is used to send the custom error page to the client generated by the proxy.\nIt is a reference to an object of type errorpageprofile.\nField introduced in 17.2.4.",
          "required": false,
          "suboptions": {}
        },
        "floating_ip": {
          "aliases": [],
          "description": "Floating ip to associate with this virtual service.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "floating_subnet_uuid": {
          "aliases": [],
          "description": "If auto_allocate_floating_ip is true and more than one floating-ip subnets exist, then the subnet for the floating ip address allocation.\nThis field is applicable only if the virtualservice belongs to an openstack or aws cloud.\nIn openstack or aws cloud it is required when auto_allocate_floating_ip is selected.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "flow_dist": {
          "aliases": [],
          "description": "Criteria for flow distribution among ses.\nEnum options - LOAD_AWARE, CONSISTENT_HASH_SOURCE_IP_ADDRESS, CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT.\nDefault value when not specified in API or module is interpreted by Avi Controller as LOAD_AWARE.",
          "required": false,
          "suboptions": {}
        },
        "flow_label_type": {
          "aliases": [],
          "description": "Criteria for flow labelling.\nEnum options - NO_LABEL, APPLICATION_LABEL, SERVICE_LABEL.\nDefault value when not specified in API or module is interpreted by Avi Controller as NO_LABEL.",
          "required": false,
          "suboptions": {}
        },
        "fqdn": {
          "aliases": [],
          "description": "Dns resolvable, fully qualified domain name of the virtualservice.\nOnly one of 'fqdn' and 'dns_info' configuration is allowed.",
          "required": false,
          "suboptions": {}
        },
        "host_name_xlate": {
          "aliases": [],
          "description": "Translate the host name sent to the servers to this value.\nTranslate the host name sent from servers back to the value used by the client.",
          "required": false,
          "suboptions": {}
        },
        "http_policies": {
          "aliases": [],
          "description": "Http policies applied on the data traffic of the virtual service.",
          "required": false,
          "suboptions": {}
        },
        "ign_pool_net_reach": {
          "aliases": [],
          "description": "Ignore pool servers network reachability constraints for virtual service placement.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Ip address of the virtual service.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "ipam_network_subnet": {
          "aliases": [],
          "description": "Subnet and/or network for allocating virtualservice ip by ipam provider module.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "l4_policies": {
          "aliases": [],
          "description": "L4 policies applied to the data traffic of the virtual service.\nField introduced in 17.2.7.",
          "required": false,
          "suboptions": {}
        },
        "limit_doser": {
          "aliases": [],
          "description": "Limit potential dos attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "max_cps_per_client": {
          "aliases": [],
          "description": "Maximum connections per second per client ip.\nAllowed values are 10-1000.\nSpecial values are 0- 'unlimited'.\nDefault value when not specified in API or module is interpreted by Avi Controller as 0.",
          "required": false,
          "suboptions": {}
        },
        "microservice_ref": {
          "aliases": [],
          "description": "Microservice representing the virtual service.\nIt is a reference to an object of type microservice.",
          "required": false,
          "suboptions": {}
        },
        "min_pools_up": {
          "aliases": [],
          "description": "Minimum number of up pools to mark vs up.\nField introduced in 18.2.1, 17.2.12.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the virtual service.",
          "required": true,
          "suboptions": {}
        },
        "network_profile_ref": {
          "aliases": [],
          "description": "Determines network settings such as protocol, tcp or udp, and related options for the protocol.\nIt is a reference to an object of type networkprofile.",
          "required": false,
          "suboptions": {}
        },
        "network_ref": {
          "aliases": [],
          "description": "Manually override the network on which the virtual service is placed.\nIt is a reference to an object of type network.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "network_security_policy_ref": {
          "aliases": [],
          "description": "Network security policies for the virtual service.\nIt is a reference to an object of type networksecuritypolicy.",
          "required": false,
          "suboptions": {}
        },
        "nsx_securitygroup": {
          "aliases": [],
          "description": "A list of nsx service groups representing the clients which can access the virtual ip of the virtual service.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "performance_limits": {
          "aliases": [],
          "description": "Optional settings that determine performance limits like max connections or bandwidth etc.",
          "required": false,
          "suboptions": {}
        },
        "pool_group_ref": {
          "aliases": [],
          "description": "The pool group is an object that contains pools.\nIt is a reference to an object of type poolgroup.",
          "required": false,
          "suboptions": {}
        },
        "pool_ref": {
          "aliases": [],
          "description": "The pool is an object that contains destination servers and related attributes such as load-balancing and persistence.\nIt is a reference to an object of type pool.",
          "required": false,
          "suboptions": {}
        },
        "port_uuid": {
          "aliases": [],
          "description": "(internal-use) network port assigned to the virtual service ip address.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "remove_listening_port_on_vs_down": {
          "aliases": [],
          "description": "Remove listening port if virtualservice is down.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "requests_rate_limit": {
          "aliases": [],
          "description": "Rate limit the incoming requests to this virtual service.",
          "required": false,
          "suboptions": {}
        },
        "saml_sp_config": {
          "aliases": [],
          "description": "Application-specific saml config.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "scaleout_ecmp": {
          "aliases": [],
          "description": "Disable re-distribution of flows across service engines for a virtual service.\nEnable if the network itself performs flow hashing with ecmp in environments such as gcp.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "se_group_ref": {
          "aliases": [],
          "description": "The service engine group to use for this virtual service.\nMoving to a new se group is disruptive to existing connections for this vs.\nIt is a reference to an object of type serviceenginegroup.",
          "required": false,
          "suboptions": {}
        },
        "security_policy_ref": {
          "aliases": [],
          "description": "Security policy applied on the traffic of the virtual service.\nThis policy is used to perform security actions such as distributed denial of service (ddos) attack mitigation, etc.\nIt is a reference to an object of type securitypolicy.\nField introduced in 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "server_network_profile_ref": {
          "aliases": [],
          "description": "Determines the network settings profile for the server side of tcp proxied connections.\nLeave blank to use the same settings as the client to vs side of the connection.\nIt is a reference to an object of type networkprofile.",
          "required": false,
          "suboptions": {}
        },
        "service_metadata": {
          "aliases": [],
          "description": "Metadata pertaining to the service provided by this virtual service.\nIn openshift/kubernetes environments, egress pod info is stored.\nAny user input to this field will be overwritten by avi vantage.",
          "required": false,
          "suboptions": {}
        },
        "service_pool_select": {
          "aliases": [],
          "description": "Select pool based on destination port.",
          "required": false,
          "suboptions": {}
        },
        "services": {
          "aliases": [],
          "description": "List of services defined for this virtual service.",
          "required": false,
          "suboptions": {}
        },
        "sideband_profile": {
          "aliases": [],
          "description": "Sideband configuration to be used for this virtualservice.it can be used for sending traffic to sideband vips for external inspection etc.",
          "required": false,
          "suboptions": {}
        },
        "snat_ip": {
          "aliases": [],
          "description": "Nat'ted floating source ip address(es) for upstream connection to servers.",
          "required": false,
          "suboptions": {}
        },
        "sp_pool_refs": {
          "aliases": [],
          "description": "Gslb pools used to manage site-persistence functionality.\nEach site-persistence pool contains the virtualservices in all the other sites, that is auto-generated by the gslb manager.\nThis is a read-only field for the user.\nIt is a reference to an object of type pool.\nField introduced in 17.2.2.",
          "required": false,
          "suboptions": {}
        },
        "ssl_key_and_certificate_refs": {
          "aliases": [],
          "description": "Select or create one or two certificates, ec and/or rsa, that will be presented to ssl/tls terminated connections.\nIt is a reference to an object of type sslkeyandcertificate.",
          "required": false,
          "suboptions": {}
        },
        "ssl_profile_ref": {
          "aliases": [],
          "description": "Determines the set of ssl versions and ciphers to accept for ssl/tls terminated connections.\nIt is a reference to an object of type sslprofile.",
          "required": false,
          "suboptions": {}
        },
        "ssl_profile_selectors": {
          "aliases": [],
          "description": "Select ssl profile based on client ip address match.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "ssl_sess_cache_avg_size": {
          "aliases": [],
          "description": "Expected number of ssl session cache entries (may be exceeded).\nAllowed values are 1024-16383.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1024.",
          "required": false,
          "suboptions": {}
        },
        "sso_policy": {
          "aliases": [],
          "description": "Client authentication and authorization policy for the virtualservice.\nField deprecated in 18.2.3.\nField introduced in 18.2.1.",
          "required": false,
          "suboptions": {}
        },
        "sso_policy_ref": {
          "aliases": [],
          "description": "The sso policy attached to the virtualservice.\nIt is a reference to an object of type ssopolicy.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "static_dns_records": {
          "aliases": [],
          "description": "List of static dns records applied to this virtual service.\nThese are static entries and no health monitoring is performed against the ip addresses.",
          "required": false,
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "Subnet providing reachability for client facing virtual service ip.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "subnet_uuid": {
          "aliases": [],
          "description": "It represents subnet for the virtual service ip address allocation when auto_allocate_ip is true.it is only applicable in openstack or aws cloud.\nThis field is required if auto_allocate_ip is true.\nField deprecated in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "topology_policies": {
          "aliases": [],
          "description": "Topology policies applied on the dns traffic of the virtual service based ongslb topology algorithm.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "traffic_clone_profile_ref": {
          "aliases": [],
          "description": "Server network or list of servers for cloning traffic.\nIt is a reference to an object of type trafficcloneprofile.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "traffic_enabled": {
          "aliases": [],
          "description": "Knob to enable the virtual service traffic on its assigned service engines.\nThis setting is effective only when the enabled flag is set to true.\nField introduced in 17.2.8.\nDefault value when not specified in API or module is interpreted by Avi Controller as True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Specify if this is a normal virtual service, or if it is the parent or child of an sni-enabled virtual hosted virtual service.\nEnum options - VS_TYPE_NORMAL, VS_TYPE_VH_PARENT, VS_TYPE_VH_CHILD.\nDefault value when not specified in API or module is interpreted by Avi Controller as VS_TYPE_NORMAL.",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "use_bridge_ip_as_vip": {
          "aliases": [],
          "description": "Use bridge ip as vip on each host in mesos deployments.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_vip_as_snat": {
          "aliases": [],
          "description": "Use the virtual ip as the snat ip for health monitoring and sending traffic to the backend servers instead of the service engine interface ip.\nThe caveat of enabling this option is that the virtualservice cannot be configued in an active-active ha mode.\nDns based multi vip solution has to be used for ha & non-disruptive upgrade purposes.\nField introduced in 17.1.9,17.2.3.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the virtualservice.",
          "required": false,
          "suboptions": {}
        },
        "vh_domain_name": {
          "aliases": [],
          "description": "The exact name requested from the client's sni-enabled tls hello domain name field.\nIf this is a match, the parent vs will forward the connection to this child vs.",
          "required": false,
          "suboptions": {}
        },
        "vh_parent_vs_uuid": {
          "aliases": [],
          "description": "Specifies the virtual service acting as virtual hosting (sni) parent.",
          "required": false,
          "suboptions": {}
        },
        "vip": {
          "aliases": [],
          "description": "List of virtual service ips.\nWhile creating a 'shared vs',please use vsvip_ref to point to the shared entities.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "vrf_context_ref": {
          "aliases": [],
          "description": "Virtual routing context that the virtual service is bound to.\nThis is used to provide the isolation of the set of networks the application is attached to.\nIt is a reference to an object of type vrfcontext.",
          "required": false,
          "suboptions": {}
        },
        "vs_datascripts": {
          "aliases": [],
          "description": "Datascripts applied on the data traffic of the virtual service.",
          "required": false,
          "suboptions": {}
        },
        "vsvip_cloud_config_cksum": {
          "aliases": [],
          "description": "Checksum of cloud configuration for vsvip.\nInternally set by cloud connector.\nField introduced in 17.2.9, 18.1.2.",
          "required": false,
          "suboptions": {}
        },
        "vsvip_ref": {
          "aliases": [],
          "description": "Mostly used during the creation of shared vs, this field refers to entities that can be shared across virtual services.\nIt is a reference to an object of type vsvip.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "waf_policy_ref": {
          "aliases": [],
          "description": "Waf policy for the virtual service.\nIt is a reference to an object of type wafpolicy.\nField introduced in 17.2.1.",
          "required": false,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "The quality of service weight to assign to traffic transmitted from this virtual service.\nA higher weight will prioritize traffic versus other virtual services sharing the same service engines.\nAllowed values are 1-128.\nDefault value when not specified in API or module is interpreted by Avi Controller as 1.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of VirtualService Avi RESTful Object"
    },
    "examples": "\n- name: Create SSL Virtual Service using Pool testpool2\n  community.network.avi_virtualservice:\n    controller: 10.10.27.90\n    username: admin\n    password: AviNetworks123!\n    name: newtestvs\n    state: present\n    performance_limits:\n    max_concurrent_connections: 1000\n    services:\n        - port: 443\n          enable_ssl: true\n        - port: 80\n    ssl_profile_ref: '/api/sslprofile?name=System-Standard'\n    application_profile_ref: '/api/applicationprofile?name=System-Secure-HTTP'\n    ssl_key_and_certificate_refs:\n        - '/api/sslkeyandcertificate?name=System-Default-Cert'\n    ip_address:\n    addr: 10.90.131.103\n    type: V4\n    pool_ref: '/api/pool?name=testpool2'\n"
  },
  "community.network.avi_vrfcontext": {
    "doc": {
      "description": "This module is used to configure VrfContext object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bgp_profile": {
          "aliases": [],
          "description": "Bgp local and peer info.",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "debugvrfcontext": {
          "aliases": [],
          "description": "Configure debug flags for vrf.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "gateway_mon": {
          "aliases": [],
          "description": "Configure ping based heartbeat check for gateway in service engines of vrf.",
          "required": false,
          "suboptions": {}
        },
        "internal_gateway_monitor": {
          "aliases": [],
          "description": "Configure ping based heartbeat check for all default gateways in service engines of vrf.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the object.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "static_routes": {
          "aliases": [],
          "description": "List of staticroute.",
          "required": false,
          "suboptions": {}
        },
        "system_default": {
          "aliases": [],
          "description": "Boolean flag to set system_default.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Unique object identifier of the object.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of VrfContext Avi RESTful Object"
    },
    "examples": "\n- name: Example to create VrfContext object\n  community.network.avi_vrfcontext:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_vrfcontext\n"
  },
  "community.network.avi_vsdatascriptset": {
    "doc": {
      "description": "This module is used to configure VSDataScriptSet object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "created_by": {
          "aliases": [],
          "description": "Creator name.\nField introduced in 17.1.11,17.2.4.",
          "required": false,
          "suboptions": {}
        },
        "datascript": {
          "aliases": [],
          "description": "Datascripts to execute.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User defined description for the object.",
          "required": false,
          "suboptions": {}
        },
        "ipgroup_refs": {
          "aliases": [],
          "description": "Uuid of ip groups that could be referred by vsdatascriptset objects.\nIt is a reference to an object of type ipaddrgroup.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the virtual service datascript collection.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pool_group_refs": {
          "aliases": [],
          "description": "Uuid of pool groups that could be referred by vsdatascriptset objects.\nIt is a reference to an object of type poolgroup.",
          "required": false,
          "suboptions": {}
        },
        "pool_refs": {
          "aliases": [],
          "description": "Uuid of pools that could be referred by vsdatascriptset objects.\nIt is a reference to an object of type pool.",
          "required": false,
          "suboptions": {}
        },
        "protocol_parser_refs": {
          "aliases": [],
          "description": "List of protocol parsers that could be referred by vsdatascriptset objects.\nIt is a reference to an object of type protocolparser.\nField introduced in 18.2.3.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "string_group_refs": {
          "aliases": [],
          "description": "Uuid of string groups that could be referred by vsdatascriptset objects.\nIt is a reference to an object of type stringgroup.",
          "required": false,
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the virtual service datascript collection.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of VSDataScriptSet Avi RESTful Object"
    },
    "examples": "\n- name: Example to create VSDataScriptSet object\n  community.network.avi_vsdatascriptset:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_vsdatascriptset\n"
  },
  "community.network.avi_vsvip": {
    "doc": {
      "description": "This module is used to configure VsVip object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type cloud.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_info": {
          "aliases": [],
          "description": "Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "east_west_placement": {
          "aliases": [],
          "description": "Force placement on all service engines in the service engine group (container clouds only).\nField introduced in 17.1.1.\nDefault value when not specified in API or module is interpreted by Avi Controller as False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the vsvip object.\nField introduced in 17.1.1.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "use_standard_alb": {
          "aliases": [],
          "description": "This overrides the cloud level default and needs to match the se group value in which it will be used if the se group use_standard_alb value is\nset.\nThis is only used when fip is used for vs on azure cloud.\nField introduced in 18.2.3.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the vsvip object.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "vip": {
          "aliases": [],
          "description": "List of virtual service ips and other shareable entities.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "vrf_context_ref": {
          "aliases": [],
          "description": "Virtual routing context that the virtual service is bound to.\nThis is used to provide the isolation of the set of networks the application is attached to.\nIt is a reference to an object of type vrfcontext.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "vsvip_cloud_config_cksum": {
          "aliases": [],
          "description": "Checksum of cloud configuration for vsvip.\nInternally set by cloud connector.\nField introduced in 17.2.9, 18.1.2.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of VsVip Avi RESTful Object"
    },
    "examples": "\n- name: Example to create VsVip object\n  community.network.avi_vsvip:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_vsvip\n"
  },
  "community.network.avi_webhook": {
    "doc": {
      "description": "This module is used to configure Webhook object\nmore examples at U(https://github.com/avinetworks/devops)",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Avi Network devices see U(https://www.ansible.com/ansible-avi-networks).",
      "options": {
        "api_context": {
          "aliases": [],
          "description": "Avi API context that includes current session ID and CSRF Token.\nThis allows user to perform single login and re-use the session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Avi API version of to use for Avi API and objects.",
          "default": "16.4.4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avi_api_patch_op": {
          "aliases": [],
          "description": "Patch operation to use when using avi_api_update_method as patch.",
          "required": false,
          "choices": [
            "add",
            "replace",
            "delete"
          ],
          "suboptions": {}
        },
        "avi_api_update_method": {
          "aliases": [],
          "description": "Default method for object update is HTTP PUT.\nSetting to patch will override that behavior to use HTTP PATCH.",
          "default": "put",
          "required": false,
          "choices": [
            "put",
            "patch"
          ],
          "suboptions": {}
        },
        "avi_credentials": {
          "aliases": [],
          "description": "Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_version": {
              "aliases": [],
              "description": "Avi controller version",
              "default": "16.4.4",
              "required": false,
              "suboptions": {}
            },
            "controller": {
              "aliases": [],
              "description": "Avi controller IP or SQDN",
              "required": false,
              "suboptions": {}
            },
            "csrftoken": {
              "aliases": [],
              "description": "Avi controller API csrftoken to reuse existing session with session id",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Avi controller password",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Avi controller port",
              "required": false,
              "suboptions": {}
            },
            "session_id": {
              "aliases": [],
              "description": "Avi controller API session id to reuse existing session with csrftoken",
              "required": false,
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Avi controller tenant",
              "default": "admin",
              "required": false,
              "suboptions": {}
            },
            "tenant_uuid": {
              "aliases": [],
              "description": "Avi controller tenant UUID",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Avi controller request timeout",
              "default": "300",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Avi controller API token",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Avi controller username",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "avi_disable_session_cache_as_fact": {
          "aliases": [],
          "description": "It disables avi session information to be cached as a fact.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "callback_url": {
          "aliases": [],
          "description": "Callback url for the webhook.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Field introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the webhook profile.\nField introduced in 17.1.1.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state that should be applied on the entity.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "Name of tenant used for all Avi API calls and context of object.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_ref": {
          "aliases": [],
          "description": "It is a reference to an object of type tenant.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "tenant_uuid": {
          "aliases": [],
          "description": "UUID of tenant used for all Avi API calls and context of object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Avi controller URL of the object.",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the webhook profile.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        },
        "verification_token": {
          "aliases": [],
          "description": "Verification token sent back with the callback asquery parameters.\nField introduced in 17.1.1.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "avisdk"
      ],
      "short_description": "Module for setup of Webhook Avi RESTful Object"
    },
    "examples": "\n- name: Example to create Webhook object\n  community.network.avi_webhook:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_webhook\n"
  },
  "community.network.bcf_switch": {
    "doc": {
      "description": "Create and remove a Big Cloud Fabric switch.",
      "has_action": false,
      "options": {
        "access_token": {
          "aliases": [],
          "description": "Big Cloud Fabric access token. If this isn't set then the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "The controller IP address.",
          "required": true,
          "suboptions": {}
        },
        "fabric_role": {
          "aliases": [],
          "description": "Fabric role of the switch.",
          "required": true,
          "choices": [
            "spine",
            "leaf"
          ],
          "suboptions": {}
        },
        "leaf_group": {
          "aliases": [],
          "description": "The leaf group of the switch if the switch is a leaf.",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "The MAC address of the switch.",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the switch.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the switch should be present or absent.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create and remove a bcf switch."
    },
    "examples": "\n- name: Bcf leaf switch\n  community.network.bcf_switch:\n    name: Rack1Leaf1\n    fabric_role: leaf\n    leaf_group: R1\n    mac: 00:00:00:02:00:02\n    controller: '{{ inventory_hostname }}'\n    state: present\n    validate_certs: false\n"
  },
  "community.network.bigmon_chain": {
    "doc": {
      "description": "Create and remove a bigmon inline service chain.",
      "has_action": false,
      "options": {
        "access_token": {
          "aliases": [],
          "description": "Bigmon access token. If this isn't set, the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.",
          "required": false,
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "The controller IP address.",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the chain.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the service chain should be present or absent.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create and remove a bigmon inline service chain."
    },
    "examples": "\n- name: Bigmon inline service chain\n  community.network.bigmon_chain:\n    name: MyChain\n    controller: '{{ inventory_hostname }}'\n    state: present\n    validate_certs: false\n"
  },
  "community.network.bigmon_policy": {
    "doc": {
      "description": "Create and remove a bigmon out-of-band policy.",
      "has_action": false,
      "options": {
        "access_token": {
          "aliases": [],
          "description": "Bigmon access token. If this isn't set, the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.",
          "required": false,
          "suboptions": {}
        },
        "action": {
          "aliases": [],
          "description": "Forward matching packets to delivery interfaces, Drop is for measure rate of matching packets, but do not forward to delivery interfaces, capture packets and write to a PCAP file, or enable NetFlow generation.",
          "default": "forward",
          "required": false,
          "choices": [
            "forward",
            "drop",
            "flow-gen"
          ],
          "suboptions": {}
        },
        "controller": {
          "aliases": [],
          "description": "The controller address.",
          "required": true,
          "suboptions": {}
        },
        "delivery_packet_count": {
          "aliases": [],
          "description": "Run policy until delivery_packet_count packets are delivered.",
          "default": "0",
          "required": false,
          "suboptions": {}
        },
        "duration": {
          "aliases": [],
          "description": "Run policy for duration duration or until delivery_packet_count packets are delivered, whichever comes first.",
          "default": "0",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the policy.",
          "required": true,
          "suboptions": {}
        },
        "policy_description": {
          "aliases": [],
          "description": "Description of policy.",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "A priority associated with this policy. The higher priority policy takes precedence over a lower priority.",
          "default": "100",
          "required": false,
          "suboptions": {}
        },
        "start_time": {
          "aliases": [],
          "description": "Date the policy becomes active",
          "default": "ansible_date_time.iso8601",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the policy should be present or absent.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create and remove a bigmon out-of-band policy."
    },
    "examples": "\n- name: Policy to aggregate filter and deliver data center (DC) 1 traffic\n  community.network.bigmon_policy:\n    name: policy1\n    policy_description: DC 1 traffic policy\n    action: drop\n    controller: '{{ inventory_hostname }}'\n    state: present\n    validate_certs: false\n"
  },
  "community.network.ce_aaa_server": {
    "doc": {
      "description": "Manages AAA server global configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "accounting_mode": {
          "aliases": [],
          "description": "Accounting Mode.",
          "default": "none",
          "type": "str",
          "required": false,
          "choices": [
            "invalid",
            "hwtacacs",
            "radius",
            "none"
          ],
          "suboptions": {}
        },
        "acct_scheme_name": {
          "aliases": [],
          "description": "Accounting scheme name. The value is a string of 1 to 32 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "authen_scheme_name": {
          "aliases": [],
          "description": "Name of an authentication scheme. The value is a string of 1 to 32 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "author_scheme_name": {
          "aliases": [],
          "description": "Name of an authorization scheme. The value is a string of 1 to 32 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_name": {
          "aliases": [],
          "description": "Name of a domain. The value is a string of 1 to 64 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "first_authen_mode": {
          "aliases": [],
          "description": "Preferred authentication mode.",
          "default": "local",
          "type": "str",
          "required": false,
          "choices": [
            "invalid",
            "local",
            "hwtacacs",
            "radius",
            "none"
          ],
          "suboptions": {}
        },
        "first_author_mode": {
          "aliases": [],
          "description": "Preferred authorization mode.",
          "default": "local",
          "type": "str",
          "required": false,
          "choices": [
            "invalid",
            "local",
            "hwtacacs",
            "if-authenticated",
            "none"
          ],
          "suboptions": {}
        },
        "hwtacas_template": {
          "aliases": [],
          "description": "Name of a HWTACACS template. The value is a string of 1 to 32 case-insensitive characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_user_group": {
          "aliases": [],
          "description": "Name of the user group where the user belongs. The user inherits all the rights of the user group. The value is a string of 1 to 32 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "radius_server_group": {
          "aliases": [],
          "description": "RADIUS server group's name. The value is a string of 1 to 32 case-insensitive characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages AAA server global configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: AAA server test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Radius authentication Server Basic settings\"\n    community.network.ce_aaa_server:\n      state: present\n      authen_scheme_name: test1\n      first_authen_mode: radius\n      radius_server_group: test2\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo radius authentication Server Basic settings\"\n    community.network.ce_aaa_server:\n      state: absent\n      authen_scheme_name: test1\n      first_authen_mode: radius\n      radius_server_group: test2\n      provider: \"{{ cli }}\"\n\n  - name: \"Hwtacacs accounting Server Basic settings\"\n    community.network.ce_aaa_server:\n      state: present\n      acct_scheme_name: test1\n      accounting_mode: hwtacacs\n      hwtacas_template: test2\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo hwtacacs accounting Server Basic settings\"\n    community.network.ce_aaa_server:\n      state: absent\n      acct_scheme_name: test1\n      accounting_mode: hwtacacs\n      hwtacas_template: test2\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_aaa_server_host": {
    "doc": {
      "description": "Manages AAA server host configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "hwtacacs_is_public_net": {
          "aliases": [],
          "description": "Set the public-net.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hwtacacs_is_secondary_server": {
          "aliases": [],
          "description": "Whether the server is secondary.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hwtacacs_server_host_name": {
          "aliases": [],
          "description": "Hwtacacs server host name.",
          "required": false,
          "suboptions": {}
        },
        "hwtacacs_server_ip": {
          "aliases": [],
          "description": "Server IPv4 address. Must be a valid unicast IP address. The value is a string of 0 to 255 characters, in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "hwtacacs_server_ipv6": {
          "aliases": [],
          "description": "Server IPv6 address. Must be a valid unicast IP address. The total length is 128 bits.",
          "required": false,
          "suboptions": {}
        },
        "hwtacacs_server_type": {
          "aliases": [],
          "description": "Hwtacacs server type.",
          "required": false,
          "choices": [
            "Authentication",
            "Authorization",
            "Accounting",
            "Common"
          ],
          "suboptions": {}
        },
        "hwtacacs_template": {
          "aliases": [],
          "description": "Name of a HWTACACS template. The value is a string of 1 to 32 case-insensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "hwtacacs_vpn_name": {
          "aliases": [],
          "description": "VPN instance name.",
          "required": false,
          "suboptions": {}
        },
        "local_ftp_dir": {
          "aliases": [],
          "description": "FTP user directory. The value is a string of 1 to 255 characters.",
          "required": false,
          "suboptions": {}
        },
        "local_password": {
          "aliases": [],
          "description": "Login password of a user. The password can contain letters, numbers, and special characters. The value is a string of 1 to 255 characters.",
          "required": false,
          "suboptions": {}
        },
        "local_service_type": {
          "aliases": [],
          "description": "The type of local user login through, such as ftp ssh snmp telnet.",
          "required": false,
          "suboptions": {}
        },
        "local_user_group": {
          "aliases": [],
          "description": "Name of the user group where the user belongs. The user inherits all the rights of the user group. The value is a string of 1 to 32 characters.",
          "required": false,
          "suboptions": {}
        },
        "local_user_level": {
          "aliases": [],
          "description": "Login level of a local user. The value is an integer ranging from 0 to 15.",
          "required": false,
          "suboptions": {}
        },
        "local_user_name": {
          "aliases": [],
          "description": "Name of a local user. The value is a string of 1 to 253 characters.",
          "required": false,
          "suboptions": {}
        },
        "radius_group_name": {
          "aliases": [],
          "description": "RADIUS server group's name. The value is a string of 1 to 32 case-insensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "radius_server_ip": {
          "aliases": [],
          "description": "IPv4 address of configured server. The value is a string of 0 to 255 characters, in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "radius_server_ipv6": {
          "aliases": [],
          "description": "IPv6 address of configured server. The total length is 128 bits.",
          "required": false,
          "suboptions": {}
        },
        "radius_server_mode": {
          "aliases": [],
          "description": "Configured primary or secondary server for a particular server.",
          "required": false,
          "choices": [
            "Secondary-server",
            "Primary-server"
          ],
          "suboptions": {}
        },
        "radius_server_name": {
          "aliases": [],
          "description": "Hostname of configured server. The value is a string of 0 to 255 case-sensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "radius_server_port": {
          "aliases": [],
          "description": "Configured server port for a particular server. The value is an integer ranging from 1 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "radius_server_type": {
          "aliases": [],
          "description": "Type of Radius Server.",
          "required": false,
          "choices": [
            "Authentication",
            "Accounting"
          ],
          "suboptions": {}
        },
        "radius_vpn_name": {
          "aliases": [],
          "description": "Set VPN instance. The value is a string of 1 to 31 case-sensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages AAA server host configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: AAA server host test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config local user when use local scheme\"\n    community.network.ce_aaa_server_host:\n      state: present\n      local_user_name: user1\n      local_password: 123456\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo local user when use local scheme\"\n    community.network.ce_aaa_server_host:\n      state: absent\n      local_user_name: user1\n      local_password: 123456\n      provider: \"{{ cli }}\"\n\n  - name: \"Config radius server ip\"\n    community.network.ce_aaa_server_host:\n      state: present\n      radius_group_name: group1\n      radius_server_type: Authentication\n      radius_server_ip: 10.1.10.1\n      radius_server_port: 2000\n      radius_server_mode: Primary-server\n      radius_vpn_name: _public_\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo radius server ip\"\n    community.network.ce_aaa_server_host:\n      state: absent\n      radius_group_name: group1\n      radius_server_type: Authentication\n      radius_server_ip: 10.1.10.1\n      radius_server_port: 2000\n      radius_server_mode: Primary-server\n      radius_vpn_name: _public_\n      provider: \"{{ cli }}\"\n\n  - name: \"Config hwtacacs server ip\"\n    community.network.ce_aaa_server_host:\n      state: present\n      hwtacacs_template: template\n      hwtacacs_server_ip: 10.10.10.10\n      hwtacacs_server_type: Authorization\n      hwtacacs_vpn_name: _public_\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo hwtacacs server ip\"\n    community.network.ce_aaa_server_host:\n      state: absent\n      hwtacacs_template: template\n      hwtacacs_server_ip: 10.10.10.10\n      hwtacacs_server_type: Authorization\n      hwtacacs_vpn_name: _public_\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_acl": {
    "doc": {
      "description": "Manages base ACL configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "acl_description": {
          "aliases": [],
          "description": "ACL description. The value is a string of 1 to 127 characters.",
          "required": false,
          "suboptions": {}
        },
        "acl_name": {
          "aliases": [],
          "description": "ACL number or name. For a numbered rule group, the value ranging from 2000 to 2999 indicates a basic ACL. For a named rule group, the value is a string of 1 to 32 case-sensitive characters starting with a letter, spaces not supported.",
          "required": true,
          "suboptions": {}
        },
        "acl_num": {
          "aliases": [],
          "description": "ACL number. The value is an integer ranging from 2000 to 2999.",
          "required": false,
          "suboptions": {}
        },
        "acl_step": {
          "aliases": [],
          "description": "ACL step. The value is an integer ranging from 1 to 20. The default value is 5.",
          "required": false,
          "suboptions": {}
        },
        "frag_type": {
          "aliases": [],
          "description": "Type of packet fragmentation.",
          "required": false,
          "choices": [
            "fragment",
            "clear_fragment"
          ],
          "suboptions": {}
        },
        "log_flag": {
          "aliases": [],
          "description": "Flag of logging matched data packets.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rule_action": {
          "aliases": [],
          "description": "Matching mode of basic ACL rules.",
          "required": false,
          "choices": [
            "permit",
            "deny"
          ],
          "suboptions": {}
        },
        "rule_description": {
          "aliases": [],
          "description": "Description about an ACL rule. The value is a string of 1 to 127 characters.",
          "required": false,
          "suboptions": {}
        },
        "rule_id": {
          "aliases": [],
          "description": "ID of a basic ACL rule in configuration mode. The value is an integer ranging from 0 to 4294967294.",
          "required": false,
          "suboptions": {}
        },
        "rule_name": {
          "aliases": [],
          "description": "Name of a basic ACL rule. The value is a string of 1 to 32 characters. The value is case-insensitive, and cannot contain spaces or begin with an underscore (_).",
          "required": false,
          "suboptions": {}
        },
        "source_ip": {
          "aliases": [],
          "description": "Source IP address. The value is a string of 0 to 255 characters.The default value is 0.0.0.0. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "src_mask": {
          "aliases": [],
          "description": "Mask of a source IP address. The value is an integer ranging from 1 to 32.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "delete_acl"
          ],
          "suboptions": {}
        },
        "time_range": {
          "aliases": [],
          "description": "Name of a time range in which an ACL rule takes effect. The value is a string of 1 to 32 characters. The value is case-insensitive, and cannot contain spaces. The name must start with an uppercase or lowercase letter. In addition, the word \"all\" cannot be specified as a time range name.",
          "required": false,
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "VPN instance name. The value is a string of 1 to 31 characters.The default value is _public_.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages base ACL configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine acl test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config ACL\"\n    community.network.ce_acl:\n      state: present\n      acl_name: 2200\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo ACL\"\n    community.network.ce_acl:\n      state: delete_acl\n      acl_name: 2200\n      provider: \"{{ cli }}\"\n\n  - name: \"Config ACL base rule\"\n    community.network.ce_acl:\n      state: present\n      acl_name: 2200\n      rule_name: test_rule\n      rule_id: 111\n      rule_action: permit\n      source_ip: 10.10.10.10\n      src_mask: 24\n      frag_type: fragment\n      time_range: wdz_acl_time\n      provider: \"{{ cli }}\"\n\n  - name: \"undo ACL base rule\"\n    community.network.ce_acl:\n      state: absent\n      acl_name: 2200\n      rule_name: test_rule\n      rule_id: 111\n      rule_action: permit\n      source_ip: 10.10.10.10\n      src_mask: 24\n      frag_type: fragment\n      time_range: wdz_acl_time\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_acl_advance": {
    "doc": {
      "description": "Manages advanced ACL configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "acl_description": {
          "aliases": [],
          "description": "ACL description. The value is a string of 1 to 127 characters.",
          "required": false,
          "suboptions": {}
        },
        "acl_name": {
          "aliases": [],
          "description": "ACL number or name. For a numbered rule group, the value ranging from 3000 to 3999 indicates a advance ACL. For a named rule group, the value is a string of 1 to 32 case-sensitive characters starting with a letter, spaces not supported.",
          "required": true,
          "suboptions": {}
        },
        "acl_num": {
          "aliases": [],
          "description": "ACL number. The value is an integer ranging from 3000 to 3999.",
          "required": false,
          "suboptions": {}
        },
        "acl_step": {
          "aliases": [],
          "description": "ACL step. The value is an integer ranging from 1 to 20. The default value is 5.",
          "required": false,
          "suboptions": {}
        },
        "dest_ip": {
          "aliases": [],
          "description": "Destination IP address. The value is a string of 0 to 255 characters.The default value is 0.0.0.0. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "dest_mask": {
          "aliases": [],
          "description": "Destination IP address mask. The value is an integer ranging from 1 to 32.",
          "required": false,
          "suboptions": {}
        },
        "dest_pool_name": {
          "aliases": [],
          "description": "Name of a destination pool. The value is a string of 1 to 32 characters.",
          "required": false,
          "suboptions": {}
        },
        "dest_port_begin": {
          "aliases": [],
          "description": "Start port number of the destination port. The value is an integer ranging from 0 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "dest_port_end": {
          "aliases": [],
          "description": "End port number of the destination port. The value is an integer ranging from 0 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "dest_port_op": {
          "aliases": [],
          "description": "Range type of the destination port.",
          "required": false,
          "choices": [
            "lt",
            "eq",
            "gt",
            "range"
          ],
          "suboptions": {}
        },
        "dest_port_pool_name": {
          "aliases": [],
          "description": "Name of a destination port pool. The value is a string of 1 to 32 characters.",
          "required": false,
          "suboptions": {}
        },
        "dscp": {
          "aliases": [],
          "description": "Differentiated Services Code Point. The value is an integer ranging from 0 to 63.",
          "required": false,
          "suboptions": {}
        },
        "established": {
          "aliases": [],
          "description": "Match established connections.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "frag_type": {
          "aliases": [],
          "description": "Type of packet fragmentation.",
          "required": false,
          "choices": [
            "fragment",
            "clear_fragment"
          ],
          "suboptions": {}
        },
        "icmp_code": {
          "aliases": [],
          "description": "ICMP message code. Data packets can be filtered based on the ICMP message code. The value is an integer ranging from 0 to 255.",
          "required": false,
          "suboptions": {}
        },
        "icmp_name": {
          "aliases": [],
          "description": "ICMP name.",
          "required": false,
          "choices": [
            "unconfiged",
            "echo",
            "echo-reply",
            "fragmentneed-DFset",
            "host-redirect",
            "host-tos-redirect",
            "host-unreachable",
            "information-reply",
            "information-request",
            "net-redirect",
            "net-tos-redirect",
            "net-unreachable",
            "parameter-problem",
            "port-unreachable",
            "protocol-unreachable",
            "reassembly-timeout",
            "source-quench",
            "source-route-failed",
            "timestamp-reply",
            "timestamp-request",
            "ttl-exceeded",
            "address-mask-reply",
            "address-mask-request",
            "custom"
          ],
          "suboptions": {}
        },
        "icmp_type": {
          "aliases": [],
          "description": "ICMP type. This parameter is available only when the packet protocol is ICMP. The value is an integer ranging from 0 to 255.",
          "required": false,
          "suboptions": {}
        },
        "igmp_type": {
          "aliases": [],
          "description": "Internet Group Management Protocol.",
          "required": false,
          "choices": [
            "host-query",
            "mrouter-adver",
            "mrouter-solic",
            "mrouter-termi",
            "mtrace-resp",
            "mtrace-route",
            "v1host-report",
            "v2host-report",
            "v2leave-group",
            "v3host-report"
          ],
          "suboptions": {}
        },
        "log_flag": {
          "aliases": [],
          "description": "Flag of logging matched data packets.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "precedence": {
          "aliases": [],
          "description": "Data packets can be filtered based on the priority field. The value is an integer ranging from 0 to 7.",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Protocol type.",
          "required": false,
          "choices": [
            "ip",
            "icmp",
            "igmp",
            "ipinip",
            "tcp",
            "udp",
            "gre",
            "ospf"
          ],
          "suboptions": {}
        },
        "rule_action": {
          "aliases": [],
          "description": "Matching mode of basic ACL rules.",
          "required": false,
          "choices": [
            "permit",
            "deny"
          ],
          "suboptions": {}
        },
        "rule_description": {
          "aliases": [],
          "description": "Description about an ACL rule.",
          "required": false,
          "suboptions": {}
        },
        "rule_id": {
          "aliases": [],
          "description": "ID of a basic ACL rule in configuration mode. The value is an integer ranging from 0 to 4294967294.",
          "required": false,
          "suboptions": {}
        },
        "rule_name": {
          "aliases": [],
          "description": "Name of a basic ACL rule. The value is a string of 1 to 32 characters.",
          "required": false,
          "suboptions": {}
        },
        "source_ip": {
          "aliases": [],
          "description": "Source IP address. The value is a string of 0 to 255 characters.The default value is 0.0.0.0. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "src_mask": {
          "aliases": [],
          "description": "Source IP address mask. The value is an integer ranging from 1 to 32.",
          "required": false,
          "suboptions": {}
        },
        "src_pool_name": {
          "aliases": [],
          "description": "Name of a source pool. The value is a string of 1 to 32 characters.",
          "required": false,
          "suboptions": {}
        },
        "src_port_begin": {
          "aliases": [],
          "description": "Start port number of the source port. The value is an integer ranging from 0 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "src_port_end": {
          "aliases": [],
          "description": "End port number of the source port. The value is an integer ranging from 0 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "src_port_op": {
          "aliases": [],
          "description": "Range type of the source port.",
          "required": false,
          "choices": [
            "lt",
            "eq",
            "gt",
            "range"
          ],
          "suboptions": {}
        },
        "src_port_pool_name": {
          "aliases": [],
          "description": "Name of a source port pool. The value is a string of 1 to 32 characters.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "delete_acl"
          ],
          "suboptions": {}
        },
        "syn_flag": {
          "aliases": [],
          "description": "TCP flag value. The value is an integer ranging from 0 to 63.",
          "required": false,
          "suboptions": {}
        },
        "tcp_flag_mask": {
          "aliases": [],
          "description": "TCP flag mask value. The value is an integer ranging from 0 to 63.",
          "required": false,
          "suboptions": {}
        },
        "time_range": {
          "aliases": [],
          "description": "Name of a time range in which an ACL rule takes effect.",
          "required": false,
          "suboptions": {}
        },
        "tos": {
          "aliases": [],
          "description": "ToS value on which data packet filtering is based. The value is an integer ranging from 0 to 15.",
          "required": false,
          "suboptions": {}
        },
        "ttl_expired": {
          "aliases": [],
          "description": "Whether TTL Expired is matched, with the TTL value of 1.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "VPN instance name. The value is a string of 1 to 31 characters.The default value is _public_.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages advanced ACL configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine advance acl test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config ACL\"\n    community.network.ce_acl_advance:\n      state: present\n      acl_name: 3200\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo ACL\"\n    community.network.ce_acl_advance:\n      state: delete_acl\n      acl_name: 3200\n      provider: \"{{ cli }}\"\n\n  - name: \"Config ACL advance rule\"\n    community.network.ce_acl_advance:\n      state: present\n      acl_name: test\n      rule_name: test_rule\n      rule_id: 111\n      rule_action: permit\n      protocol: tcp\n      source_ip: 10.10.10.10\n      src_mask: 24\n      frag_type: fragment\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo ACL advance rule\"\n    community.network.ce_acl_advance:\n      state: absent\n      acl_name: test\n      rule_name: test_rule\n      rule_id: 111\n      rule_action: permit\n      protocol: tcp\n      source_ip: 10.10.10.10\n      src_mask: 24\n      frag_type: fragment\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_acl_interface": {
    "doc": {
      "description": "Manages applying ACLs to interfaces on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "acl_name": {
          "aliases": [],
          "description": "ACL number or name. For a numbered rule group, the value ranging from 2000 to 4999. For a named rule group, the value is a string of 1 to 32 case-sensitive characters starting with a letter, spaces not supported.",
          "required": true,
          "suboptions": {}
        },
        "direction": {
          "aliases": [],
          "description": "Direction ACL to be applied in on the interface.",
          "required": true,
          "choices": [
            "inbound",
            "outbound"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Interface name. Only support interface full name, such as \"40GE2/0/1\".",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages applying ACLs to interfaces on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine acl interface test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Apply acl to interface\"\n    community.network.ce_acl_interface:\n      state: present\n      acl_name: 2000\n      interface: 40GE1/0/1\n      direction: outbound\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo acl from interface\"\n    community.network.ce_acl_interface:\n      state: absent\n      acl_name: 2000\n      interface: 40GE1/0/1\n      direction: outbound\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_bfd_global": {
    "doc": {
      "description": "Manages BFD global configuration on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "bfd_enable": {
          "aliases": [],
          "description": "Enables the global Bidirectional Forwarding Detection (BFD) function.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "damp_init_wait_time": {
          "aliases": [],
          "description": "Specifies an initial flapping suppression time for a BFD session. The value is an integer ranging from 1 to 3600000, in milliseconds. The default value is 2000.",
          "required": false,
          "suboptions": {}
        },
        "damp_max_wait_time": {
          "aliases": [],
          "description": "Specifies a maximum flapping suppression time for a BFD session. The value is an integer ranging from 1 to 3600000, in milliseconds. The default value is 15000.",
          "required": false,
          "suboptions": {}
        },
        "damp_second_wait_time": {
          "aliases": [],
          "description": "Specifies a secondary flapping suppression time for a BFD session. The value is an integer ranging from 1 to 3600000, in milliseconds. The default value is 5000.",
          "required": false,
          "suboptions": {}
        },
        "default_ip": {
          "aliases": [],
          "description": "Specifies the default multicast IP address. The value ranges from 224.0.0.107 to 224.0.0.250.",
          "required": false,
          "suboptions": {}
        },
        "delay_up_time": {
          "aliases": [],
          "description": "Specifies the delay before a BFD session becomes Up. The value is an integer ranging from 1 to 600, in seconds. The default value is 0, indicating that a BFD session immediately becomes Up.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tos_exp_dynamic": {
          "aliases": [],
          "description": "Indicates the priority of BFD control packets for dynamic BFD sessions. The value is an integer ranging from 0 to 7. The default priority is 7, which is the highest priority of BFD control packets.",
          "required": false,
          "suboptions": {}
        },
        "tos_exp_static": {
          "aliases": [],
          "description": "Indicates the priority of BFD control packets for static BFD sessions. The value is an integer ranging from 0 to 7. The default priority is 7, which is the highest priority of BFD control packets.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages BFD global configuration on HUAWEI CloudEngine devices."
    },
    "examples": "\n- name: Bfd global module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Enable the global BFD function\n    community.network.ce_bfd_global:\n      bfd_enable: enable\n      provider: '{{ cli }}'\n\n  - name: Set the default multicast IP address to 224.0.0.150\n    community.network.ce_bfd_global:\n      bfd_enable: enable\n      default_ip: 224.0.0.150\n      state: present\n      provider: '{{ cli }}'\n\n  - name: Set the priority of BFD control packets for dynamic and static BFD sessions\n    community.network.ce_bfd_global:\n      bfd_enable: enable\n      tos_exp_dynamic: 5\n      tos_exp_static: 6\n      state: present\n      provider: '{{ cli }}'\n\n  - name: Disable the global BFD function\n    community.network.ce_bfd_global:\n      bfd_enable: disable\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_bfd_session": {
    "doc": {
      "description": "Manages BFD session configuration, creates a BFD session or deletes a specified BFD session on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "addr_type": {
          "aliases": [],
          "description": "Specifies the peer IP address type.",
          "required": false,
          "choices": [
            "ipv4"
          ],
          "suboptions": {}
        },
        "create_type": {
          "aliases": [],
          "description": "BFD session creation mode, the currently created BFD session only supports static or static auto-negotiation mode.",
          "default": "static",
          "required": false,
          "choices": [
            "static",
            "auto"
          ],
          "suboptions": {}
        },
        "dest_addr": {
          "aliases": [],
          "description": "Specifies the peer IP address bound to the BFD session.",
          "required": false,
          "suboptions": {}
        },
        "local_discr": {
          "aliases": [],
          "description": "The BFD session local identifier does not need to be configured when the mode is auto.",
          "required": false,
          "suboptions": {}
        },
        "out_if_name": {
          "aliases": [],
          "description": "Specifies the type and number of the interface bound to the BFD session.",
          "required": false,
          "suboptions": {}
        },
        "remote_discr": {
          "aliases": [],
          "description": "The BFD session remote identifier does not need to be configured when the mode is auto.",
          "required": false,
          "suboptions": {}
        },
        "session_name": {
          "aliases": [],
          "description": "Specifies the name of a BFD session. The value is a string of 1 to 15 case-sensitive characters without spaces.",
          "required": true,
          "suboptions": {}
        },
        "src_addr": {
          "aliases": [],
          "description": "Indicates the source IP address carried in BFD packets.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "use_default_ip": {
          "aliases": [],
          "description": "Indicates the default multicast IP address that is bound to a BFD session. By default, BFD uses the multicast IP address 224.0.0.184. You can set the multicast IP address by running the default-ip-address command. The value is a bool type.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "Specifies the name of a Virtual Private Network (VPN) instance that is bound to a BFD session. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value _public_ is reserved and cannot be used as the VPN instance name.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages BFD session configuration on HUAWEI CloudEngine devices."
    },
    "examples": "\n- name: Bfd session module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Configuring Single-hop BFD for Detecting Faults on a Layer 2 Link\n    community.network.ce_bfd_session:\n      session_name: bfd_l2link\n      use_default_ip: true\n      out_if_name: 10GE1/0/1\n      local_discr: 163\n      remote_discr: 163\n      provider: '{{ cli }}'\n\n  - name: Configuring Single-Hop BFD on a VLANIF Interface\n    community.network.ce_bfd_session:\n      session_name: bfd_vlanif\n      dest_addr: 10.1.1.6\n      out_if_name: Vlanif100\n      local_discr: 163\n      remote_discr: 163\n      provider: '{{ cli }}'\n\n  - name: Configuring Multi-Hop BFD\n    community.network.ce_bfd_session:\n      session_name: bfd_multi_hop\n      dest_addr: 10.1.1.1\n      local_discr: 163\n      remote_discr: 163\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_bfd_view": {
    "doc": {
      "description": "Manages BFD session view configuration on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "admin_down": {
          "aliases": [],
          "description": "Enables the BFD session to enter the AdminDown state. By default, a BFD session is enabled. The default value is bool type.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Specifies the description of a BFD session. The value is a string of 1 to 51 case-sensitive characters with spaces.",
          "required": false,
          "suboptions": {}
        },
        "detect_multi": {
          "aliases": [],
          "description": "Specifies the local detection multiplier of a BFD session. The value is an integer that ranges from 3 to 50.",
          "required": false,
          "suboptions": {}
        },
        "local_discr": {
          "aliases": [],
          "description": "Specifies the local discriminator of a BFD session. The value is an integer that ranges from 1 to 16384.",
          "required": false,
          "suboptions": {}
        },
        "min_rx_interval": {
          "aliases": [],
          "description": "Specifies the minimum interval for sending BFD packets. The value is an integer that ranges from 50 to 1000, in milliseconds.",
          "required": false,
          "suboptions": {}
        },
        "min_tx_interval": {
          "aliases": [],
          "description": "Specifies the minimum interval for receiving BFD packets. The value is an integer that ranges from 50 to 1000, in milliseconds.",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for cli transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(netconf).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, netconf=22).",
              "default": "0 (use common port)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh).",
              "default": "cli",
              "type": "str",
              "required": true,
              "choices": [
                "cli",
                "netconf"
              ],
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the CLI login. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "remote_discr": {
          "aliases": [],
          "description": "Specifies the remote discriminator of a BFD session. The value is an integer that ranges from 1 to 4294967295.",
          "required": false,
          "suboptions": {}
        },
        "session_name": {
          "aliases": [],
          "description": "Specifies the name of a BFD session. The value is a string of 1 to 15 case-sensitive characters without spaces.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tos_exp": {
          "aliases": [],
          "description": "Specifies a priority for BFD control packets. The value is an integer ranging from 0 to 7. The default value is 7, which is the highest priority.",
          "required": false,
          "suboptions": {}
        },
        "wtr_interval": {
          "aliases": [],
          "description": "Specifies the WTR time of a BFD session. The value is an integer that ranges from 1 to 60, in minutes. The default value is 0.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages BFD session view configuration on HUAWEI CloudEngine devices."
    },
    "examples": "\n- name: Bfd view module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Set the local discriminator of a BFD session to 80 and the remote discriminator to 800\n    community.network.ce_bfd_view:\n      session_name: atob\n      local_discr: 80\n      remote_discr: 800\n      state: present\n      provider: '{{ cli }}'\n\n  - name: Set the minimum interval for receiving BFD packets to 500 ms\n    community.network.ce_bfd_view:\n      session_name: atob\n      min_rx_interval: 500\n      state: present\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_bgp": {
    "doc": {
      "description": "Manages BGP configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "as_number": {
          "aliases": [],
          "description": "Local AS number. The value is a string of 1 to 11 characters.",
          "required": false,
          "suboptions": {}
        },
        "as_path_limit": {
          "aliases": [],
          "description": "Maximum number of AS numbers in the AS_Path attribute. The default value is 255.",
          "required": false,
          "suboptions": {}
        },
        "bgp_rid_auto_sel": {
          "aliases": [],
          "description": "The function to automatically select router IDs for all VPN BGP instances is enabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "check_first_as": {
          "aliases": [],
          "description": "Check the first AS in the AS_Path of the update messages from EBGP peers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "clear_interval": {
          "aliases": [],
          "description": "Clear interval.",
          "required": false,
          "suboptions": {}
        },
        "confed_id_number": {
          "aliases": [],
          "description": "Confederation ID. The value is a string of 1 to 11 characters.",
          "required": false,
          "suboptions": {}
        },
        "confed_nonstanded": {
          "aliases": [],
          "description": "Configure the device to be compatible with devices in a nonstandard confederation.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "confed_peer_as_num": {
          "aliases": [],
          "description": "Confederation AS number, in two-byte or four-byte format. The value is a string of 1 to 11 characters.",
          "required": false,
          "suboptions": {}
        },
        "conn_retry_time": {
          "aliases": [],
          "description": "ConnectRetry interval. The value is an integer, in seconds. The default value is 32s.",
          "required": false,
          "suboptions": {}
        },
        "default_af_type": {
          "aliases": [],
          "description": "Type of a created address family, which can be IPv4 unicast or IPv6 unicast. The default type is IPv4 unicast.",
          "required": false,
          "choices": [
            "ipv4uni",
            "ipv6uni"
          ],
          "suboptions": {}
        },
        "ebgp_if_sensitive": {
          "aliases": [],
          "description": "If the value is true, After the fast EBGP interface awareness function is enabled, EBGP sessions on an interface are deleted immediately when the interface goes Down. If the value is  false, After the fast EBGP interface awareness function is enabled, EBGP sessions on an interface are not deleted immediately when the interface goes Down.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "gr_peer_reset": {
          "aliases": [],
          "description": "Peer disconnection through GR.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "graceful_restart": {
          "aliases": [],
          "description": "Enable GR of the BGP speaker in the specified address family, peer address, or peer group.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "hold_interval": {
          "aliases": [],
          "description": "Hold interval.",
          "required": false,
          "suboptions": {}
        },
        "hold_time": {
          "aliases": [],
          "description": "Hold time, in seconds. The value of the hold time can be 0 or range from 3 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "is_shutdown": {
          "aliases": [],
          "description": "Interrupt BGP all neighbor.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "keep_all_routes": {
          "aliases": [],
          "description": "If the value is true, the system stores all route update messages received from all peers (groups) after BGP connection setup. If the value is false, the system stores only BGP update messages that are received from peers and pass the configured import policy.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "keepalive_time": {
          "aliases": [],
          "description": "If the value of a timer changes, the BGP peer relationship between the routers is disconnected. The value is an integer ranging from 0 to 21845. The default value is 60.",
          "required": false,
          "suboptions": {}
        },
        "memory_limit": {
          "aliases": [],
          "description": "Support BGP RIB memory protection.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "min_hold_time": {
          "aliases": [],
          "description": "Min hold time, in seconds. The value of the hold time can be 0 or range from 20 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "router_id": {
          "aliases": [],
          "description": "ID of a router that is in IPv4 address format.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_interval": {
          "aliases": [],
          "description": "Suppress interval.",
          "required": false,
          "suboptions": {}
        },
        "time_wait_for_rib": {
          "aliases": [],
          "description": "Period of waiting for the End-Of-RIB flag. The value is an integer ranging from 3 to 3000. The default value is 600.",
          "required": false,
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "Name of a BGP instance. The name is a case-sensitive string of characters.",
          "required": false,
          "suboptions": {}
        },
        "vrf_rid_auto_sel": {
          "aliases": [],
          "description": "If the value is true, VPN BGP instances are enabled to automatically select router IDs. If the value is false, VPN BGP instances are disabled from automatically selecting router IDs.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages BGP configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine BGP test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Enable BGP\"\n    community.network.ce_bgp:\n      state: present\n      as_number: 100\n      confed_id_number: 250\n      provider: \"{{ cli }}\"\n\n  - name: \"Disable BGP\"\n    community.network.ce_bgp:\n      state: absent\n      as_number: 100\n      confed_id_number: 250\n      provider: \"{{ cli }}\"\n\n  - name: \"Create confederation peer AS num\"\n    community.network.ce_bgp:\n      state: present\n      confed_peer_as_num: 260\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_bgp_af": {
    "doc": {
      "description": "Manages BGP Address-family configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "active_route_advertise": {
          "aliases": [],
          "description": "If the value is true, BGP is enabled to advertise only optimal routes in the RM to peers. If the value is false, BGP is not enabled to advertise only optimal routes in the RM to peers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "add_path_sel_num": {
          "aliases": [],
          "description": "Number of Add-Path routes. The value is an integer ranging from 2 to 64.",
          "required": false,
          "suboptions": {}
        },
        "af_type": {
          "aliases": [],
          "description": "Address family type of a BGP instance.",
          "required": true,
          "choices": [
            "ipv4uni",
            "ipv4multi",
            "ipv4vpn",
            "ipv6uni",
            "ipv6vpn",
            "evpn"
          ],
          "suboptions": {}
        },
        "allow_invalid_as": {
          "aliases": [],
          "description": "Allow routes with BGP origin AS validation result Invalid to be selected. If the value is true, invalid routes can participate in route selection. If the value is false, invalid routes cannot participate in route selection.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "always_compare_med": {
          "aliases": [],
          "description": "If the value is true, the MEDs of routes learned from peers in different autonomous systems are compared when BGP selects an optimal route. If the value is false, the MEDs of routes learned from peers in different autonomous systems are not compared when BGP selects an optimal route.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "as_path_neglect": {
          "aliases": [],
          "description": "If the value is true, the AS path attribute is ignored when BGP selects an optimal route. If the value is false, the AS path attribute is not ignored when BGP selects an optimal route. An AS path with a smaller length has a higher priority.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "auto_frr_enable": {
          "aliases": [],
          "description": "If the value is true, BGP auto FRR is enabled. If the value is false, BGP auto FRR is disabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "default_local_pref": {
          "aliases": [],
          "description": "Set the Local-Preference attribute. The value is an integer. The value is an integer ranging from 0 to 4294967295.",
          "required": false,
          "suboptions": {}
        },
        "default_med": {
          "aliases": [],
          "description": "Specify the Multi-Exit-Discriminator (MED) of BGP routes. The value is an integer ranging from 0 to 4294967295.",
          "required": false,
          "suboptions": {}
        },
        "default_rt_import_enable": {
          "aliases": [],
          "description": "If the value is true, importing default routes to the BGP routing table is allowed. If the value is false, importing default routes to the BGP routing table is not allowed.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "determin_med": {
          "aliases": [],
          "description": "If the value is true, BGP deterministic-MED is enabled. If the value is false, BGP deterministic-MED is disabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "ebgp_ecmp_nexthop_changed": {
          "aliases": [],
          "description": "If the value is true, the next hop of an advertised route is changed to the advertiser itself in EBGP load-balancing scenarios. If the value is false, the next hop of an advertised route is not changed to the advertiser itself in EBGP load-balancing scenarios.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "ebgp_if_sensitive": {
          "aliases": [],
          "description": "If the value is true, after the fast EBGP interface awareness function is enabled, EBGP sessions on an interface are deleted immediately when the interface goes Down. If the value is false, after the fast EBGP interface awareness function is enabled, EBGP sessions on an interface are not deleted immediately when the interface goes Down.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "ecmp_nexthop_changed": {
          "aliases": [],
          "description": "If the value is true, the next hop of an advertised route is changed to the advertiser itself in BGP load-balancing scenarios. If the value is false, the next hop of an advertised route is not changed to the advertiser itself in BGP load-balancing scenarios.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "ibgp_ecmp_nexthop_changed": {
          "aliases": [],
          "description": "If the value is true, the next hop of an advertised route is changed to the advertiser itself in IBGP load-balancing scenarios. If the value is false, the next hop of an advertised route is not changed to the advertiser itself in IBGP load-balancing scenarios.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "igp_metric_ignore": {
          "aliases": [],
          "description": "If the value is true, the metrics of next-hop IGP routes are not compared when BGP selects an optimal route. If the value is false, the metrics of next-hop IGP routes are not compared when BGP selects an optimal route. A route with a smaller metric has a higher priority.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "import_process_id": {
          "aliases": [],
          "description": "Process ID of an imported routing protocol. The value is an integer ranging from 0 to 4294967295.",
          "required": false,
          "suboptions": {}
        },
        "import_protocol": {
          "aliases": [],
          "description": "Routing protocol from which routes can be imported.",
          "required": false,
          "choices": [
            "direct",
            "ospf",
            "isis",
            "static",
            "rip",
            "ospfv3",
            "ripng"
          ],
          "suboptions": {}
        },
        "ingress_lsp_policy_name": {
          "aliases": [],
          "description": "Ingress lsp policy name.",
          "required": false,
          "suboptions": {}
        },
        "load_balancing_as_path_ignore": {
          "aliases": [],
          "description": "Load balancing as path ignore.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "lowest_priority": {
          "aliases": [],
          "description": "If the value is true, enable reduce priority to advertise route. If the value is false, disable reduce priority to advertise route.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "mask_len": {
          "aliases": [],
          "description": "Specify the mask length of an IP address. The value is an integer ranging from 0 to 128.",
          "required": false,
          "suboptions": {}
        },
        "max_load_ebgp_num": {
          "aliases": [],
          "description": "Specify the maximum number of equal-cost EBGP routes. The value is an integer ranging from 1 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "max_load_ibgp_num": {
          "aliases": [],
          "description": "Specify the maximum number of equal-cost IBGP routes. The value is an integer ranging from 1 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "maximum_load_balance": {
          "aliases": [],
          "description": "Specify the maximum number of equal-cost routes in the BGP routing table. The value is an integer ranging from 1 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "med_none_as_maximum": {
          "aliases": [],
          "description": "If the value is true, when BGP selects an optimal route, the system uses 4294967295 as the MED value of a route if the route's attribute does not carry a MED value. If the value is false, the system uses 0 as the MED value of a route if the route's attribute does not carry a MED value.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "network_address": {
          "aliases": [],
          "description": "Specify the IP address advertised by BGP. The value is a string of 0 to 255 characters.",
          "required": false,
          "suboptions": {}
        },
        "next_hop_sel_depend_type": {
          "aliases": [],
          "description": "Next hop select depend type.",
          "default": "default",
          "required": false,
          "choices": [
            "default",
            "dependTunnel",
            "dependIp"
          ],
          "suboptions": {}
        },
        "nexthop_third_party": {
          "aliases": [],
          "description": "If the value is true, the third-party next hop function is enabled. If the value is false, the third-party next hop function is disabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "nhp_relay_route_policy_name": {
          "aliases": [],
          "description": "Specify the name of a route-policy for route iteration. The value is a string of 1 to 40 characters.",
          "required": false,
          "suboptions": {}
        },
        "originator_prior": {
          "aliases": [],
          "description": "Originator prior.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "policy_ext_comm_enable": {
          "aliases": [],
          "description": "If the value is true, modifying extended community attributes is allowed. If the value is false, modifying extended community attributes is not allowed.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "policy_vpn_target": {
          "aliases": [],
          "description": "If the value is true, VPN-Target filtering function is performed for received VPN routes. If the value is false, VPN-Target filtering function is not performed for received VPN routes.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "preference_external": {
          "aliases": [],
          "description": "Set the protocol priority of EBGP routes. The value is an integer ranging from 1 to 255.",
          "required": false,
          "suboptions": {}
        },
        "preference_internal": {
          "aliases": [],
          "description": "Set the protocol priority of IBGP routes. The value is an integer ranging from 1 to 255.",
          "required": false,
          "suboptions": {}
        },
        "preference_local": {
          "aliases": [],
          "description": "Set the protocol priority of a local BGP route. The value is an integer ranging from 1 to 255.",
          "required": false,
          "suboptions": {}
        },
        "prefrence_policy_name": {
          "aliases": [],
          "description": "Set a routing policy to filter routes so that a configured priority is applied to the routes that match the specified policy. The value is a string of 1 to 40 characters.",
          "required": false,
          "suboptions": {}
        },
        "reflect_between_client": {
          "aliases": [],
          "description": "If the value is true, route reflection is enabled between clients. If the value is false, route reflection is disabled between clients.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "reflect_chg_path": {
          "aliases": [],
          "description": "If the value is true, the route reflector is enabled to modify route path attributes based on an export policy. If the value is false, the route reflector is disabled from modifying route path attributes based on an export policy.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "reflector_cluster_id": {
          "aliases": [],
          "description": "Set a cluster ID. Configuring multiple RRs in a cluster can enhance the stability of the network. The value is an integer ranging from 1 to 4294967295.",
          "required": false,
          "suboptions": {}
        },
        "reflector_cluster_ipv4": {
          "aliases": [],
          "description": "Set a cluster ipv4 address. The value is expressed in the format of an IPv4 address.",
          "required": false,
          "suboptions": {}
        },
        "relay_delay_enable": {
          "aliases": [],
          "description": "If the value is true, relay delay enable. If the value is false, relay delay disable.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "rib_only_enable": {
          "aliases": [],
          "description": "If the value is true, BGP routes cannot be advertised to the IP routing table. If the value is false, Routes preferred by BGP are advertised to the IP routing table.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "rib_only_policy_name": {
          "aliases": [],
          "description": "Specify the name of a routing policy. The value is a string of 1 to 40 characters.",
          "required": false,
          "suboptions": {}
        },
        "route_sel_delay": {
          "aliases": [],
          "description": "Route selection delay. The value is an integer ranging from 0 to 3600.",
          "required": false,
          "suboptions": {}
        },
        "router_id": {
          "aliases": [],
          "description": "ID of a router that is in IPv4 address format. The value is a string of 0 to 255 characters. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "router_id_neglect": {
          "aliases": [],
          "description": "If the value is true, the router ID attribute is ignored when BGP selects the optimal route. If the value is false, the router ID attribute is not ignored when BGP selects the optimal route.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "rr_filter_number": {
          "aliases": [],
          "description": "Set the number of the extended community filter supported by an RR group. The value is a string of 1 to 51 characters.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "summary_automatic": {
          "aliases": [],
          "description": "If the value is true, automatic aggregation is enabled for locally imported routes. If the value is false, automatic aggregation is disabled for locally imported routes.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "supernet_label_adv": {
          "aliases": [],
          "description": "If the value is true, the function to advertise supernetwork label is enabled. If the value is false, the function to advertise supernetwork label is disabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "supernet_uni_adv": {
          "aliases": [],
          "description": "If the value is true, the function to advertise supernetwork unicast routes is enabled. If the value is false, the function to advertise supernetwork unicast routes is disabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "Name of a BGP instance. The name is a case-sensitive string of characters. The BGP instance can be used only after the corresponding VPN instance is created. The value is a string of 1 to 31 case-sensitive characters.",
          "required": true,
          "suboptions": {}
        },
        "vrf_rid_auto_sel": {
          "aliases": [],
          "description": "If the value is true, VPN BGP instances are enabled to automatically select router IDs. If the value is false, VPN BGP instances are disabled from automatically selecting router IDs.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages BGP Address-family configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: CloudEngine BGP address family test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n  tasks:\n  - name: \"Config BGP Address_Family\"\n    community.network.ce_bgp_af:\n      state: present\n      vrf_name: js\n      af_type: ipv4uni\n      provider: \"{{ cli }}\"\n  - name: \"Undo BGP Address_Family\"\n    community.network.ce_bgp_af:\n      state: absent\n      vrf_name: js\n      af_type: ipv4uni\n      provider: \"{{ cli }}\"\n  - name: \"Config import route\"\n    community.network.ce_bgp_af:\n      state: present\n      vrf_name: js\n      af_type: ipv4uni\n      import_protocol: ospf\n      import_process_id: 123\n      provider: \"{{ cli }}\"\n  - name: \"Undo import route\"\n    community.network.ce_bgp_af:\n      state: absent\n      vrf_name: js\n      af_type: ipv4uni\n      import_protocol: ospf\n      import_process_id: 123\n      provider: \"{{ cli }}\"\n  - name: \"Config network route\"\n    community.network.ce_bgp_af:\n      state: present\n      vrf_name: js\n      af_type: ipv4uni\n      network_address: 1.1.1.1\n      mask_len: 24\n      provider: \"{{ cli }}\"\n  - name: \"Undo network route\"\n    community.network.ce_bgp_af:\n      state: absent\n      vrf_name: js\n      af_type: ipv4uni\n      network_address: 1.1.1.1\n      mask_len: 24\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_bgp_neighbor": {
    "doc": {
      "description": "Manages BGP peer configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "conn_retry_time": {
          "aliases": [],
          "description": "ConnectRetry interval. The value is an integer ranging from 1 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "connect_mode": {
          "aliases": [],
          "description": "The value can be Connect-only, Listen-only, or Both.",
          "required": false,
          "suboptions": {}
        },
        "conventional": {
          "aliases": [],
          "description": "If the value is true, the router has all extended capabilities. If the value is false, the router does not have all extended capabilities.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of a peer, which can be letters or digits. The value is a string of 1 to 80 characters.",
          "required": false,
          "suboptions": {}
        },
        "dual_as": {
          "aliases": [],
          "description": "If the value is true, the EBGP peer can use either a fake AS number or the actual AS number. If the value is false, the EBGP peer can only use a fake AS number.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "ebgp_max_hop": {
          "aliases": [],
          "description": "Maximum number of hops in an indirect EBGP connection. The value is an ranging from 1 to 255.",
          "required": false,
          "suboptions": {}
        },
        "fake_as": {
          "aliases": [],
          "description": "Fake AS number that is specified for a local peer. The value is a string of 1 to 11 characters.",
          "required": false,
          "suboptions": {}
        },
        "hold_time": {
          "aliases": [],
          "description": "Specify the Hold time of a peer or peer group. The value is 0 or an integer ranging from 3 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "is_bfd_block": {
          "aliases": [],
          "description": "If the value is true, peers are enabled to inherit the BFD function from the peer group. If the value is false, peers are disabled to inherit the BFD function from the peer group.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "is_bfd_enable": {
          "aliases": [],
          "description": "If the value is true, BFD is enabled. If the value is false, BFD is disabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "is_ignore": {
          "aliases": [],
          "description": "If the value is true, the session with a specified peer is torn down and all related routing entries are cleared. If the value is false, the session with a specified peer is retained.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "is_log_change": {
          "aliases": [],
          "description": "If the value is true, BGP is enabled to record peer session status and event information. If the value is false, BGP is disabled from recording peer session status and event information.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "is_single_hop": {
          "aliases": [],
          "description": "If the value is true, the system is enabled to preferentially use the single-hop mode for BFD session setup between IBGP peers. If the value is false, the system is disabled from preferentially using the single-hop mode for BFD session setup between IBGP peers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "keep_alive_time": {
          "aliases": [],
          "description": "Specify the Keepalive time of a peer or peer group. The value is an integer ranging from 0 to 21845. The default value is 60.",
          "required": false,
          "suboptions": {}
        },
        "key_chain_name": {
          "aliases": [],
          "description": "Specify the Keychain authentication name used when BGP peers establish a TCP connection. The value is a string of 1 to 47 case-insensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "local_if_name": {
          "aliases": [],
          "description": "Name of a source interface that sends BGP packets. The value is a string of 1 to 63 characters.",
          "required": false,
          "suboptions": {}
        },
        "min_hold_time": {
          "aliases": [],
          "description": "Specify the Min hold time of a peer or peer group.",
          "required": false,
          "suboptions": {}
        },
        "mpls_local_ifnet_disable": {
          "aliases": [],
          "description": "If the value is true, peer create MPLS Local IFNET disable. If the value is false, peer create MPLS Local IFNET enable.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "multiplier": {
          "aliases": [],
          "description": "Specify the detection multiplier. The default value is 3. The value is an integer ranging from 3 to 50.",
          "required": false,
          "suboptions": {}
        },
        "peer_addr": {
          "aliases": [],
          "description": "Connection address of a peer, which can be an IPv4 or IPv6 address.",
          "required": true,
          "suboptions": {}
        },
        "prepend_fake_as": {
          "aliases": [],
          "description": "Add the Fake AS number to received Update packets.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "prepend_global_as": {
          "aliases": [],
          "description": "Add the global AS number to the Update packets to be advertised.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "pswd_cipher_text": {
          "aliases": [],
          "description": "The character string in a password identifies the contents of the password, spaces not supported. The value is a string of 1 to 255 characters.",
          "required": false,
          "suboptions": {}
        },
        "pswd_type": {
          "aliases": [],
          "description": "Enable BGP peers to establish a TCP connection and perform the Message Digest 5 (MD5) authentication for BGP messages.",
          "required": false,
          "choices": [
            "null",
            "cipher",
            "simple"
          ],
          "suboptions": {}
        },
        "remote_as": {
          "aliases": [],
          "description": "AS number of a peer. The value is a string of 1 to 11 characters.",
          "required": true,
          "suboptions": {}
        },
        "route_refresh": {
          "aliases": [],
          "description": "If the value is true, BGP is enabled to advertise REFRESH packets. If the value is false, the route refresh function is enabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "rx_interval": {
          "aliases": [],
          "description": "Specify the minimum interval at which BFD packets are received. The value is an integer ranging from 50 to 1000, in milliseconds.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tcp_MSS": {
          "aliases": [],
          "description": "Maximum TCP MSS value used for TCP connection establishment for a peer. The value is an integer ranging from 176 to 4096.",
          "required": false,
          "suboptions": {}
        },
        "tx_interval": {
          "aliases": [],
          "description": "Specify the minimum interval at which BFD packets are sent. The value is an integer ranging from 50 to 1000, in milliseconds.",
          "required": false,
          "suboptions": {}
        },
        "valid_ttl_hops": {
          "aliases": [],
          "description": "Enable GTSM on a peer or peer group. The valid-TTL-Value parameter is used to specify the number of TTL hops to be detected. The value is an integer ranging from 1 to 255.",
          "required": false,
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "Name of a BGP instance. The name is a case-sensitive string of characters. The BGP instance can be used only after the corresponding VPN instance is created.",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages BGP peer configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine BGP neighbor test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config bgp peer\"\n    community.network.ce_bgp_neighbor:\n      state: present\n      vrf_name: js\n      peer_addr: 192.168.10.10\n      remote_as: 500\n      provider: \"{{ cli }}\"\n\n  - name: \"Config bgp route id\"\n    community.network.ce_bgp_neighbor:\n      state: absent\n      vrf_name: js\n      peer_addr: 192.168.10.10\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_bgp_neighbor_af": {
    "doc": {
      "description": "Manages BGP neighbor Address-family configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "add_path_mode": {
          "aliases": [],
          "description": "null, Null. receive, Support receiving Add-Path routes. send, Support sending Add-Path routes. both, Support receiving and sending Add-Path routes.",
          "required": false,
          "choices": [
            "null",
            "receive",
            "send",
            "both"
          ],
          "suboptions": {}
        },
        "adv_add_path_num": {
          "aliases": [],
          "description": "The number of addPath advertise route. The value is an integer ranging from 2 to 64.",
          "required": false,
          "suboptions": {}
        },
        "advertise_arp": {
          "aliases": [],
          "description": "If the value is true, advertised ARP routes are distinguished. If the value is false, advertised ARP routes are not distinguished.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "advertise_community": {
          "aliases": [],
          "description": "If the value is true, the community attribute is advertised to peers. If the value is false, the community attribute is not advertised to peers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "advertise_ext_community": {
          "aliases": [],
          "description": "If the value is true, the extended community attribute is advertised to peers. If the value is false, the extended community attribute is not advertised to peers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "advertise_irb": {
          "aliases": [],
          "description": "If the value is true, advertised IRB routes are distinguished. If the value is false, advertised IRB routes are not distinguished.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "advertise_remote_nexthop": {
          "aliases": [],
          "description": "If the value is true, the remote next-hop attribute is advertised to peers. If the value is false, the remote next-hop attribute is not advertised to any peers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "af_type": {
          "aliases": [],
          "description": "Address family type of a BGP instance.",
          "required": true,
          "choices": [
            "ipv4uni",
            "ipv4multi",
            "ipv4vpn",
            "ipv6uni",
            "ipv6vpn",
            "evpn"
          ],
          "suboptions": {}
        },
        "allow_as_loop_enable": {
          "aliases": [],
          "description": "If the value is true, repetitive local AS numbers are allowed. If the value is false, repetitive local AS numbers are not allowed.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "allow_as_loop_limit": {
          "aliases": [],
          "description": "Set the maximum number of repetitive local AS number. The value is an integer ranging from 1 to 10.",
          "required": false,
          "suboptions": {}
        },
        "default_rt_adv_enable": {
          "aliases": [],
          "description": "If the value is true, the function to advertise default routes to peers is enabled. If the value is false, the function to advertise default routes to peers is disabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "default_rt_adv_policy": {
          "aliases": [],
          "description": "Specify the name of a used policy. The value is a string. The value is a string of 1 to 40 characters.",
          "required": false,
          "suboptions": {}
        },
        "default_rt_match_mode": {
          "aliases": [],
          "description": "null, Null. matchall, Advertise the default route if all matching conditions are met. matchany, Advertise the default route if any matching condition is met.",
          "required": false,
          "choices": [
            "null",
            "matchall",
            "matchany"
          ],
          "suboptions": {}
        },
        "discard_ext_community": {
          "aliases": [],
          "description": "If the value is true, the extended community attribute in the peer route information is discarded. If the value is false, the extended community attribute in the peer route information is not discarded.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "export_acl_name_or_num": {
          "aliases": [],
          "description": "Apply an IPv4 ACL-based filtering policy to the routes to be advertised to a specified peer. The value is a string of 1 to 32 characters.",
          "required": false,
          "suboptions": {}
        },
        "export_as_path_filter": {
          "aliases": [],
          "description": "Apply an AS_Path-based filtering policy to the routes to be advertised to a specified peer. The value is an integer ranging from 1 to 256.",
          "required": false,
          "suboptions": {}
        },
        "export_as_path_name_or_num": {
          "aliases": [],
          "description": "Application of a AS path list based filtering policy to the routing of a specified peer.",
          "required": false,
          "suboptions": {}
        },
        "export_pref_filt_name": {
          "aliases": [],
          "description": "Specify the IPv4 filtering policy applied to the routes to be advertised to a specified peer. The value is a string of 1 to 169 characters.",
          "required": false,
          "suboptions": {}
        },
        "export_rt_policy_name": {
          "aliases": [],
          "description": "Specify the filtering policy applied to the routes to be advertised to a peer. The value is a string of 1 to 40 characters.",
          "required": false,
          "suboptions": {}
        },
        "import_acl_name_or_num": {
          "aliases": [],
          "description": "Apply an IPv4 ACL-based filtering policy to the routes received from a specified peer. The value is a string of 1 to 32 characters.",
          "required": false,
          "suboptions": {}
        },
        "import_as_path_filter": {
          "aliases": [],
          "description": "Apply an AS_Path-based filtering policy to the routes received from a specified peer. The value is an integer ranging from 1 to 256.",
          "required": false,
          "suboptions": {}
        },
        "import_as_path_name_or_num": {
          "aliases": [],
          "description": "A routing strategy based on the AS path list for routing received by a designated peer.",
          "required": false,
          "suboptions": {}
        },
        "import_pref_filt_name": {
          "aliases": [],
          "description": "Specify the IPv4 filtering policy applied to the routes received from a specified peer. The value is a string of 1 to 169 characters.",
          "required": false,
          "suboptions": {}
        },
        "import_rt_policy_name": {
          "aliases": [],
          "description": "Specify the filtering policy applied to the routes learned from a peer. The value is a string of 1 to 40 characters.",
          "required": false,
          "suboptions": {}
        },
        "ipprefix_orf_enable": {
          "aliases": [],
          "description": "If the value is true, the address prefix-based Outbound Route Filter (ORF) capability is enabled for peers. If the value is false, the address prefix-based Outbound Route Filter (ORF) capability is disabled for peers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "is_nonstd_ipprefix_mod": {
          "aliases": [],
          "description": "If the value is true, Non-standard capability codes are used during capability negotiation. If the value is false, RFC-defined standard ORF capability codes are used during capability negotiation.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "keep_all_routes": {
          "aliases": [],
          "description": "If the value is true, the system stores all route update messages received from all peers (groups) after BGP connection setup. If the value is false, the system stores only BGP update messages that are received from peers and pass the configured import policy.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "nexthop_configure": {
          "aliases": [],
          "description": "null, The next hop is not changed. local, The next hop is changed to the local IP address. invariable, Prevent the device from changing the next hop of each imported IGP route when advertising it to its BGP peers.",
          "required": false,
          "choices": [
            "null",
            "local",
            "invariable"
          ],
          "suboptions": {}
        },
        "orf_mode": {
          "aliases": [],
          "description": "ORF mode. null, Default value. receive, ORF for incoming packets. send, ORF for outgoing packets. both, ORF for incoming and outgoing packets.",
          "required": false,
          "choices": [
            "null",
            "receive",
            "send",
            "both"
          ],
          "suboptions": {}
        },
        "orftype": {
          "aliases": [],
          "description": "ORF Type. The value is an integer ranging from 0 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "origin_as_valid": {
          "aliases": [],
          "description": "If the value is true, Application results of route announcement. If the value is false, Routing application results are not notified.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "preferred_value": {
          "aliases": [],
          "description": "Assign a preferred value for the routes learned from a specified peer. The value is an integer ranging from 0 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "public_as_only": {
          "aliases": [],
          "description": "If the value is true, sent BGP update messages carry only the public AS number but do not carry private AS numbers. If the value is false, sent BGP update messages can carry private AS numbers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "public_as_only_force": {
          "aliases": [],
          "description": "If the value is true, sent BGP update messages carry only the public AS number but do not carry private AS numbers. If the value is false, sent BGP update messages can carry private AS numbers.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "public_as_only_limited": {
          "aliases": [],
          "description": "Limited use public as number.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "public_as_only_replace": {
          "aliases": [],
          "description": "Private as replaced by public as number.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "public_as_only_skip_peer_as": {
          "aliases": [],
          "description": "Public as only skip peer as.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "redirect_ip": {
          "aliases": [],
          "description": "Redirect ip.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "redirect_ip_validation": {
          "aliases": [
            "redirect_ip_vaildation"
          ],
          "description": "Redirect ip validation.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "reflect_client": {
          "aliases": [],
          "description": "If the value is true, the local device functions as the route reflector and a peer functions as a client of the route reflector. If the value is false, the route reflector and client functions are not configured.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "remote_address": {
          "aliases": [],
          "description": "IPv4 or IPv6 peer connection address.",
          "required": true,
          "suboptions": {}
        },
        "route_limit": {
          "aliases": [],
          "description": "Configure the maximum number of routes that can be accepted from a peer. The value is an integer ranging from 1 to 4294967295.",
          "required": false,
          "suboptions": {}
        },
        "route_limit_idle_timeout": {
          "aliases": [],
          "description": "Specify the value of the idle-timeout timer to automatically reestablish the connections after they are cut off when the number of routes exceeds the set threshold. The value is an integer ranging from 1 to 1200.",
          "required": false,
          "suboptions": {}
        },
        "route_limit_percent": {
          "aliases": [],
          "description": "Specify the percentage of routes when a router starts to generate an alarm. The value is an integer ranging from 1 to 100.",
          "required": false,
          "suboptions": {}
        },
        "route_limit_type": {
          "aliases": [],
          "description": "Noparameter, After the number of received routes exceeds the threshold and the timeout timer expires,no action. AlertOnly, An alarm is generated and no additional routes will be accepted if the maximum number of routes allowed have been received. IdleForever, The connection that is interrupted is not automatically re-established if the maximum number of routes allowed have been received. IdleTimeout, After the number of received routes exceeds the threshold and the timeout timer expires, the connection that is interrupted is automatically re-established.",
          "required": false,
          "choices": [
            "noparameter",
            "alertOnly",
            "idleForever",
            "idleTimeout"
          ],
          "suboptions": {}
        },
        "rt_updt_interval": {
          "aliases": [],
          "description": "Specify the minimum interval at which Update packets are sent. The value is an integer, in seconds. The value is an integer ranging from 0 to 600.",
          "required": false,
          "suboptions": {}
        },
        "soostring": {
          "aliases": [],
          "description": "Configure the Site-of-Origin (SoO) extended community attribute. The value is a string of 3 to 21 characters.",
          "required": false,
          "suboptions": {}
        },
        "substitute_as_enable": {
          "aliases": [],
          "description": "If the value is true, the function to replace a specified peer's AS number in the AS-Path attribute with the local AS number is enabled. If the value is false, the function to replace a specified peer's AS number in the AS-Path attribute with the local AS number is disabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "update_pkt_standard_compatible": {
          "aliases": [],
          "description": "If the value is true, When the vpnv4 multicast neighbor receives and updates the message, the message has no label. If the value is false, When the vpnv4 multicast neighbor receives and updates the message, the message has label.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "vpls_ad_disable": {
          "aliases": [],
          "description": "If the value is true, enable vpls-ad. If the value is false, disable vpls-ad.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "vpls_enable": {
          "aliases": [],
          "description": "If the value is true, vpls enable. If the value is false, vpls disable.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "Name of a BGP instance. The name is a case-sensitive string of characters. The BGP instance can be used only after the corresponding VPN instance is created.",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages BGP neighbor Address-family configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine BGP neighbor address family test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config BGP peer Address_Family\"\n    community.network.ce_bgp_neighbor_af:\n      state: present\n      vrf_name: js\n      af_type: ipv4uni\n      remote_address: 192.168.10.10\n      nexthop_configure: local\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo BGP peer Address_Family\"\n    community.network.ce_bgp_neighbor_af:\n      state: absent\n      vrf_name: js\n      af_type: ipv4uni\n      remote_address: 192.168.10.10\n      nexthop_configure: local\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_command": {
    "doc": {
      "description": "Sends an arbitrary command to an HUAWEI CloudEngine node and returns the results read from the device.  The ce_command module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "commands": {
          "aliases": [],
          "description": "The commands to send to the remote HUAWEI CloudEngine device over the configured provider.  The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of I(retries) has been exceeded.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command.  If the command does not pass the specified conditional, the interval indicates how to long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the I(wait_for) must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed.  The command is run on the target device every retry and evaluated against the I(wait_for) conditionals.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries, the task fails.  See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run arbitrary command on HUAWEI CloudEngine devices."
    },
    "examples": "\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n\n- name: CloudEngine command test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: \"Run display version on remote devices\"\n    community.network.ce_command:\n      commands: display version\n      provider: \"{{ cli }}\"\n\n  - name: \"Run display version and check to see if output contains HUAWEI\"\n    community.network.ce_command:\n      commands: display version\n      wait_for: result[0] contains HUAWEI\n      provider: \"{{ cli }}\"\n\n  - name: \"Run multiple commands on remote nodes\"\n    community.network.ce_command:\n      commands:\n        - display version\n        - display device\n      provider: \"{{ cli }}\"\n\n  - name: \"Run multiple commands and evaluate the output\"\n    community.network.ce_command:\n      commands:\n        - display version\n        - display device\n      wait_for:\n        - result[0] contains HUAWEI\n        - result[1] contains Device\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_config": {
    "doc": {
      "description": "Huawei CloudEngine configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with CloudEngine configuration sections in a deterministic way.  This module works with CLI transports.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(current-configuration) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The module, by default, will connect to the remote device and retrieve the current current-configuration to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current-configuration for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "defaults": {
          "aliases": [],
          "description": "The I(defaults) argument will influence how the current-configuration is collected from the device.  When the value is set to true, the command used to collect the current-configuration is append with the all keyword.  When the value is set to false, the command is issued without the all keyword.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device current-configuration.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the current-configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "save": {
          "aliases": [],
          "description": "The C(save) argument instructs the module to save the current-configuration to saved-configuration.  This operation is performed after any changes are made to the current running config.  If no changes are made, the configuration is still saved to the startup config.  This option will always cause the module to return changed.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "The I(src) argument provides a path to the configuration file to load into the remote system.  The path can either be a full system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook. This argument is mutually exclusive with the I(lines) and I(parents) arguments.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Huawei CloudEngine configuration sections."
    },
    "examples": "\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n\n- name: CloudEngine config test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: \"Configure top level configuration and save it\"\n    community.network.ce_config:\n      lines: sysname {{ inventory_hostname }}\n      save: yes\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure acl configuration and save it\"\n    community.network.ce_config:\n      lines:\n        - rule 10 permit source 1.1.1.1 32\n        - rule 20 permit source 2.2.2.2 32\n        - rule 30 permit source 3.3.3.3 32\n        - rule 40 permit source 4.4.4.4 32\n        - rule 50 permit source 5.5.5.5 32\n      parents: acl 2000\n      before: undo acl 2000\n      match: exact\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure acl configuration and save it\"\n    community.network.ce_config:\n      lines:\n        - rule 10 permit source 1.1.1.1 32\n        - rule 20 permit source 2.2.2.2 32\n        - rule 30 permit source 3.3.3.3 32\n        - rule 40 permit source 4.4.4.4 32\n      parents: acl 2000\n      before: undo acl 2000\n      replace: block\n      provider: \"{{ cli }}\"\n\n  - name: Configurable backup path\n    community.network.ce_config:\n      lines: sysname {{ inventory_hostname }}\n      provider: \"{{ cli }}\"\n      backup: yes\n      backup_options:\n        filename: backup.cfg\n        dir_path: /home/user\n"
  },
  "community.network.ce_dldp": {
    "doc": {
      "description": "Manages global DLDP configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "The relevant configurations will be deleted if DLDP is disabled using enable=disable.\nWhen using auth_mode=none, it will restore the default DLDP authentication mode. By default, DLDP packets are not authenticated.\nBy default, the working mode of DLDP is enhance, so you are advised to use work_mode=enhance to restore default DLDP working mode.\nThe default interval for sending Advertisement packets is 5 seconds, so you are advised to use time_interval=5 to restore default DLDP interval.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "auth_mode": {
          "aliases": [],
          "description": "Specifies authentication algorithm of DLDP.",
          "required": false,
          "choices": [
            "md5",
            "simple",
            "sha",
            "hmac-sha256",
            "none"
          ],
          "suboptions": {}
        },
        "auth_pwd": {
          "aliases": [],
          "description": "Specifies authentication password. The value is a string of 1 to 16 case-sensitive plaintexts or 24/32/48/108/128 case-sensitive encrypted characters. The string excludes a question mark (?).",
          "required": false,
          "suboptions": {}
        },
        "enable": {
          "aliases": [],
          "description": "Set global DLDP enable state.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "reset": {
          "aliases": [],
          "description": "Specify whether reset DLDP state of disabled interfaces.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "time_internal": {
          "aliases": [],
          "description": "Specifies the interval for sending Advertisement packets. The value is an integer ranging from 1 to 100, in seconds. The default interval for sending Advertisement packets is 5 seconds.",
          "required": false,
          "suboptions": {}
        },
        "work_mode": {
          "aliases": [],
          "description": "Set global DLDP work-mode.",
          "required": false,
          "choices": [
            "enhance",
            "normal"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages global DLDP configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: DLDP test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Configure global DLDP enable state\"\n    community.network.ce_dldp:\n      enable: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure DLDP work-mode and ensure global DLDP state is already enabled\"\n    community.network.ce_dldp:\n      enable: enable\n      work_mode: normal\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure advertisement message time interval in seconds and ensure global DLDP state is already enabled\"\n    community.network.ce_dldp:\n      enable: enable\n      time_interval: 6\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure a DLDP authentication mode and ensure global DLDP state is already enabled\"\n    community.network.ce_dldp:\n      enable: enable\n      auth_mode: md5\n      auth_pwd: abc\n      provider: \"{{ cli }}\"\n\n  - name: \"Reset DLDP state of disabled interfaces and ensure global DLDP state is already enabled\"\n    community.network.ce_dldp:\n      enable: enable\n      reset: enable\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_dldp_interface": {
    "doc": {
      "description": "Manages interface DLDP configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "If C(state=present, enable=disable), interface DLDP enable will be turned off and related interface DLDP configuration will be cleared.\nIf C(state=absent), only local_mac is supported to configure.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "enable": {
          "aliases": [],
          "description": "Set interface DLDP enable state.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Must be fully qualified interface name, i.e. GE1/0/1, 10GE1/0/1, 40GE1/0/22, 100GE1/0/1.",
          "required": true,
          "suboptions": {}
        },
        "local_mac": {
          "aliases": [],
          "description": "Set the source MAC address for DLDP packets sent in the DLDP-compatible mode. The value of MAC address is in H-H-H format. H contains 1 to 4 hexadecimal digits.",
          "required": false,
          "suboptions": {}
        },
        "mode_enable": {
          "aliases": [],
          "description": "Set DLDP compatible-mode enable state.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "reset": {
          "aliases": [],
          "description": "Specify whether reseting interface DLDP state.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages interface DLDP configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: DLDP interface test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Configure interface DLDP enable state and ensure global dldp enable is turned on\"\n    community.network.ce_dldp_interface:\n      interface: 40GE2/0/1\n      enable: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Configuire interface DLDP compatible-mode enable state  and ensure interface DLDP state is already enabled\"\n    community.network.ce_dldp_interface:\n      interface: 40GE2/0/1\n      enable: enable\n      mode_enable: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Configuire the source MAC address for DLDP packets sent in the DLDP-compatible mode  and\n           ensure interface DLDP state and compatible-mode enable state  is already enabled\"\n    community.network.ce_dldp_interface:\n      interface: 40GE2/0/1\n      enable: enable\n      mode_enable: enable\n      local_mac: aa-aa-aa\n      provider: \"{{ cli }}\"\n\n  - name: \"Reset DLDP state of specified interface and ensure interface DLDP state is already enabled\"\n    community.network.ce_dldp_interface:\n      interface: 40GE2/0/1\n      enable: enable\n      reset: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure interface DLDP local mac address when C(state=absent)\"\n    community.network.ce_dldp_interface:\n      interface: 40GE2/0/1\n      state: absent\n      local_mac: aa-aa-aa\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_eth_trunk": {
    "doc": {
      "description": "Manages Eth-Trunk specific configuration parameters on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "C(state=absent) removes the Eth-Trunk config and interface if it already exists. If members to be removed are not explicitly passed, all existing members (if any), are removed, and Eth-Trunk removed.\nMembers must be a list.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "force": {
          "aliases": [],
          "description": "When true it forces Eth-Trunk members to match what is declared in the members param. This can be used to remove members.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hash_type": {
          "aliases": [],
          "description": "Hash algorithm used for load balancing among Eth-Trunk member interfaces.",
          "required": false,
          "choices": [
            "src-dst-ip",
            "src-dst-mac",
            "enhanced",
            "dst-ip",
            "dst-mac",
            "src-ip",
            "src-mac"
          ],
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "List of interfaces that will be managed in a given Eth-Trunk. The interface name must be full name.",
          "required": false,
          "suboptions": {}
        },
        "min_links": {
          "aliases": [],
          "description": "Specifies the minimum number of Eth-Trunk member links in the Up state. The value is an integer ranging from 1 to the maximum number of interfaces that can be added to a Eth-Trunk interface.",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Specifies the working mode of an Eth-Trunk interface.",
          "required": false,
          "choices": [
            "manual",
            "lacp-dynamic",
            "lacp-static"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "trunk_id": {
          "aliases": [],
          "description": "Eth-Trunk interface number. The value is an integer. The value range depends on the assign forward eth-trunk mode command. When 256 is specified, the value ranges from 0 to 255. When 512 is specified, the value ranges from 0 to 511. When 1024 is specified, the value ranges from 0 to 1023.",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Eth_trunk module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Ensure Eth-Trunk100 is created, add two members, and set to mode lacp-static\n    community.network.ce_eth_trunk:\n      trunk_id: 100\n      members: ['10GE1/0/24','10GE1/0/25']\n      mode: 'lacp-static'\n      state: present\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_evpn_bd_vni": {
    "doc": {
      "description": "Manages Ethernet Virtual Private Network (EVPN) VXLAN Network Identifier (VNI) configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Ensure that EVPN has been configured to serve as the VXLAN control plane when state is present.\nEnsure that a bridge domain (BD) has existed when state is present.\nEnsure that a VNI has been created and associated with a broadcast domain (BD) when state is present.\nIf you configure evpn:false to delete an EVPN instance, all configurations in the EVPN instance are deleted.\nAfter an EVPN instance has been created in the BD view, you can configure an RD using route_distinguisher parameter in BD-EVPN instance view.\nBefore configuring VPN targets for a BD EVPN instance, ensure that an RD has been configured for the BD EVPN instance\nIf you unconfigure route_distinguisher, all VPN target attributes for the BD EVPN instance will be removed at the same time.\nWhen using state:absent, evpn is not supported and it will be ignored.\nWhen using state:absent to delete VPN target attributes, ensure the configuration of VPN target attributes has existed and otherwise it will report an error.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "bridge_domain_id": {
          "aliases": [],
          "description": "Specify an existed bridge domain (BD).The value is an integer ranging from 1 to 16777215.",
          "required": true,
          "suboptions": {}
        },
        "evpn": {
          "aliases": [],
          "description": "Create or delete an EVPN instance for a VXLAN in BD view.",
          "default": "enable",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "route_distinguisher": {
          "aliases": [],
          "description": "Configures a route distinguisher (RD) for a BD EVPN instance. The format of an RD can be as follows\n1) 2-byte AS number:4-byte user-defined number, for example, 1:3. An AS number is an integer ranging from 0 to 65535, and a user-defined number is an integer ranging from 0 to 4294967295. The AS and user-defined numbers cannot be both 0s. This means that an RD cannot be 0:0.\n2) Integral 4-byte AS number:2-byte user-defined number, for example, 65537:3. An AS number is an integer ranging from 65536 to 4294967295, and a user-defined number is an integer ranging from 0 to 65535.\n3) 4-byte AS number in dotted notation:2-byte user-defined number, for example, 0.0:3 or 0.1:0. A 4-byte AS number in dotted notation is in the format of x.y, where x and y are integers ranging from 0 to 65535.\n4) A user-defined number is an integer ranging from 0 to 65535. The AS and user-defined numbers cannot be both 0s. This means that an RD cannot be 0.0:0.\n5) 32-bit IP address:2-byte user-defined number. For example, 192.168.122.15:1. An IP address ranges from 0.0.0.0 to 255.255.255.255, and a user-defined number is an integer ranging from 0 to 65535.\n6) 'auto' specifies the RD that is automatically generated.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpn_target_both": {
          "aliases": [],
          "description": "Add VPN targets to both the import and export VPN target lists of a BD EVPN instance. The format is the same as route_distinguisher.",
          "required": false,
          "suboptions": {}
        },
        "vpn_target_export": {
          "aliases": [],
          "description": "Add VPN targets to the export VPN target list of a BD EVPN instance. The format is the same as route_distinguisher.",
          "required": false,
          "suboptions": {}
        },
        "vpn_target_import": {
          "aliases": [],
          "description": "Add VPN targets to the import VPN target list of a BD EVPN instance. The format is the same as route_distinguisher.",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages EVPN VXLAN Network Identifier (VNI) on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: EVPN BD VNI test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Configure an EVPN instance for a VXLAN in BD view\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      evpn: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure a route distinguisher (RD) for a BD EVPN instance\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      route_distinguisher: '22:22'\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure VPN targets to both the import and export VPN target lists of a BD EVPN instance\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      vpn_target_both: 22:100,22:101\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure VPN targets to the import VPN target list of a BD EVPN instance\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      vpn_target_import: 22:22,22:23\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure VPN targets to the export VPN target list of a BD EVPN instance\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      vpn_target_export: 22:38,22:39\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure VPN targets to both the import and export VPN target lists of a BD EVPN instance\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      vpn_target_both: '22:100'\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure VPN targets to the import VPN target list of a BD EVPN instance\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      vpn_target_import: '22:22'\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure VPN targets to the export VPN target list of a BD EVPN instance\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      vpn_target_export: '22:38'\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure a route distinguisher (RD) of a BD EVPN instance\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      route_distinguisher: '22:22'\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure an EVPN instance for a VXLAN in BD view\"\n    community.network.ce_evpn_bd_vni:\n      bridge_domain_id: 20\n      evpn: disable\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_evpn_bgp": {
    "doc": {
      "description": "This module offers the ability to configure a BGP EVPN peer relationship on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "advertise_l2vpn_evpn": {
          "aliases": [],
          "description": "Enable or disable a device to advertise IP routes imported to a VPN instance to its EVPN instance.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "advertise_router_type": {
          "aliases": [],
          "description": "Configures a device to advertise routes to its BGP EVPN peers.",
          "required": false,
          "choices": [
            "arp",
            "irb"
          ],
          "suboptions": {}
        },
        "as_number": {
          "aliases": [],
          "description": "Specifies integral AS number. The value is an integer ranging from 1 to 4294967295.",
          "required": false,
          "suboptions": {}
        },
        "bgp_instance": {
          "aliases": [],
          "description": "Name of a BGP instance. The value is a string of 1 to 31 case-sensitive characters, spaces not supported.",
          "required": true,
          "suboptions": {}
        },
        "peer_address": {
          "aliases": [],
          "description": "Specifies the IPv4 address of a BGP EVPN peer. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "peer_enable": {
          "aliases": [],
          "description": "Enable or disable a BGP device to exchange routes with a specified peer or peer group in the address family view.",
          "required": false,
          "choices": [
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "peer_group_name": {
          "aliases": [],
          "description": "Specify the name of a peer group that BGP peers need to join. The value is a string of 1 to 47 case-sensitive characters, spaces not supported.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpn_name": {
          "aliases": [],
          "description": "Associates a specified VPN instance with the IPv4 address family. The value is a string of 1 to 31 case-sensitive characters, spaces not supported.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages BGP EVPN configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Evpn bgp module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Enable peer address.\n    community.network.ce_evpn_bgp:\n      bgp_instance: 100\n      peer_address: 1.1.1.1\n      as_number: 100\n      peer_enable: true\n      provider: \"{{ cli }}\"\n\n  - name: Enable peer group arp.\n    community.network.ce_evpn_bgp:\n      bgp_instance: 100\n      peer_group_name: aaa\n      advertise_router_type: arp\n      provider: \"{{ cli }}\"\n\n  - name: Enable advertise l2vpn evpn.\n    community.network.ce_evpn_bgp:\n      bgp_instance: 100\n      vpn_name: aaa\n      advertise_l2vpn_evpn: enable\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_evpn_bgp_rr": {
    "doc": {
      "description": "Configure an RR in BGP-EVPN address family view on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Ensure that BGP view is existed.\nThe peer, peer_type, and reflect_client arguments must all exist or not exist.\nRecommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "as_number": {
          "aliases": [],
          "description": "Specifies the number of the AS, in integer format. The value is an integer that ranges from 1 to 4294967295.",
          "required": true,
          "suboptions": {}
        },
        "bgp_evpn_enable": {
          "aliases": [],
          "description": "Enable or disable the BGP-EVPN address family.",
          "default": "enable",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "bgp_instance": {
          "aliases": [],
          "description": "Specifies the name of a BGP instance. The value of instance-name can be an integer 1 or a string of 1 to 31.",
          "required": false,
          "suboptions": {}
        },
        "peer": {
          "aliases": [],
          "description": "Specifies the IPv4 address or the group name of a peer.",
          "required": false,
          "suboptions": {}
        },
        "peer_type": {
          "aliases": [],
          "description": "Specify the peer type.",
          "required": false,
          "choices": [
            "group_name",
            "ipv4_address"
          ],
          "suboptions": {}
        },
        "policy_vpn_target": {
          "aliases": [],
          "description": "Enable or disable the VPN-Target filtering.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "reflect_client": {
          "aliases": [],
          "description": "Configure the local device as the route reflector and the peer or peer group as the client of the route reflector.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages RR for the VXLAN Network on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: BGP RR test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Configure BGP-EVPN address family view and ensure that BGP view has existed.\"\n    community.network.ce_evpn_bgp_rr:\n      as_number: 20\n      bgp_evpn_enable: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure reflect client and ensure peer has existed.\"\n    community.network.ce_evpn_bgp_rr:\n      as_number: 20\n      peer_type: ipv4_address\n      peer: 192.8.3.3\n      reflect_client: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure the VPN-Target filtering.\"\n    community.network.ce_evpn_bgp_rr:\n      as_number: 20\n      policy_vpn_target: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure an RR in BGP-EVPN address family view.\"\n    community.network.ce_evpn_bgp_rr:\n      as_number: 20\n      bgp_evpn_enable: enable\n      peer_type: ipv4_address\n      peer: 192.8.3.3\n      reflect_client: enable\n      policy_vpn_target: disable\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_evpn_global": {
    "doc": {
      "description": "Manages global configuration of EVPN on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Before configuring evpn_overlay_enable=disable, delete other EVPN configurations.\nRecommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "evpn_overlay_enable": {
          "aliases": [],
          "description": "Configure EVPN as the VXLAN control plane.",
          "required": true,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages global configuration of EVPN on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Evpn global module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Configure EVPN as the VXLAN control plan\n    community.network.ce_evpn_global:\n      evpn_overlay_enable: enable\n      provider: \"{{ cli }}\"\n\n  - name: Undo EVPN as the VXLAN control plan\n    community.network.ce_evpn_global:\n      evpn_overlay_enable: disable\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_facts": {
    "doc": {
      "description": "Collects facts from CloudEngine devices running the CloudEngine operating system.  Fact collection is supported over Cli transport.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gets facts about HUAWEI CloudEngine switches."
    },
    "examples": "\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n\n- name: CloudEngine facts test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Gather_subset is all\"\n    community.network.ce_facts:\n      gather_subset: all\n      provider: \"{{ cli }}\"\n\n  - name: \"Collect only the config facts\"\n    community.network.ce_facts:\n      gather_subset: config\n      provider: \"{{ cli }}\"\n\n  - name: \"Do not collect hardware facts\"\n    community.network.ce_facts:\n      gather_subset: \"!hardware\"\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_file_copy": {
    "doc": {
      "description": "Copy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "The feature must be enabled with feature scp-server.\nIf the file is already present, no transfer will take place.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "file_system": {
          "aliases": [],
          "description": "The remote file system of the device. If omitted, devices that support a I(file_system) parameter will use their default values. File system indicates the storage medium and can be set to as follows, 1) C(flash) is root directory of the flash memory on the master MPU. 2) C(slave#flash) is root directory of the flash memory on the slave MPU. If no slave MPU exists, this drive is unavailable. 3) C(chassis ID/slot number#flash) is root directory of the flash memory on a device in a stack. For example, C(1/5#flash) indicates the flash memory whose chassis ID is 1 and slot number is 5.",
          "default": "flash:",
          "required": false,
          "suboptions": {}
        },
        "local_file": {
          "aliases": [],
          "description": "Path to local file. Local directory must exist. The maximum length of I(local_file) is C(4096).",
          "required": true,
          "suboptions": {}
        },
        "remote_file": {
          "aliases": [],
          "description": "Remote file path of the copy. Remote directories must exist. If omitted, the name of the local file will be used. The maximum length of I(remote_file) is C(4096).",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "paramiko"
      ],
      "short_description": "Copy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: File copy test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Copy a local file to remote device\"\n    community.network.ce_file_copy:\n      local_file: /usr/vrpcfg.cfg\n      remote_file: /vrpcfg.cfg\n      file_system: 'flash:'\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_info_center_debug": {
    "doc": {
      "description": "Manages information center debug configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "channel_id": {
          "aliases": [],
          "description": "Number of a channel. The value is an integer ranging from 0 to 9. The default value is 0.",
          "required": false,
          "suboptions": {}
        },
        "debug_enable": {
          "aliases": [],
          "description": "Whether a device is enabled to output debugging information.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "debug_level": {
          "aliases": [],
          "description": "Debug level permitted to output.",
          "required": false,
          "choices": [
            "emergencies",
            "alert",
            "critical",
            "error",
            "warning",
            "notification",
            "informational",
            "debugging"
          ],
          "suboptions": {}
        },
        "debug_time_stamp": {
          "aliases": [],
          "description": "Timestamp type of debugging information.",
          "required": false,
          "choices": [
            "date_boot",
            "date_second",
            "date_tenthsecond",
            "date_millisecond",
            "shortdate_second",
            "shortdate_tenthsecond",
            "shortdate_millisecond",
            "formatdate_second",
            "formatdate_tenthsecond",
            "formatdate_millisecond"
          ],
          "suboptions": {}
        },
        "module_name": {
          "aliases": [],
          "description": "Module name of the rule. The value is a string of 1 to 31 case-insensitive characters. The default value is default. Please use lower-case letter, such as [aaa, acl, arp, bfd].",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages information center debug configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine info center debug test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config debug time stamp\"\n    community.network.ce_info_center_debug:\n      state: present\n      debug_time_stamp: date_boot\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo debug time stamp\"\n    community.network.ce_info_center_debug:\n      state: absent\n      debug_time_stamp: date_boot\n      provider: \"{{ cli }}\"\n\n  - name: \"Config debug module log level\"\n    community.network.ce_info_center_debug:\n      state: present\n      module_name: aaa\n      channel_id: 1\n      debug_enable: true\n      debug_level: error\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo debug module log level\"\n    community.network.ce_info_center_debug:\n      state: absent\n      module_name: aaa\n      channel_id: 1\n      debug_enable: true\n      debug_level: error\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_info_center_global": {
    "doc": {
      "description": "This module offers the ability to be output to the log buffer, log file, console, terminal, or log host on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "channel_cfg_name": {
          "aliases": [],
          "description": "Channel name.The value is a string of 1 to 30 case-sensitive characters. The default value is console.",
          "default": "console",
          "required": false,
          "suboptions": {}
        },
        "channel_id": {
          "aliases": [],
          "description": "Number for channel. The value is an integer ranging from 0 to 9. The default value is 0.",
          "required": false,
          "suboptions": {}
        },
        "channel_name": {
          "aliases": [],
          "description": "Channel name. The value is a string of 1 to 30 case-sensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "channel_out_direct": {
          "aliases": [],
          "description": "Direction of information output.",
          "required": false,
          "choices": [
            "console",
            "monitor",
            "trapbuffer",
            "logbuffer",
            "snmp",
            "logfile"
          ],
          "suboptions": {}
        },
        "facility": {
          "aliases": [],
          "description": "Log record tool.",
          "required": false,
          "choices": [
            "local0",
            "local1",
            "local2",
            "local3",
            "local4",
            "local5",
            "local6",
            "local7"
          ],
          "suboptions": {}
        },
        "filter_feature_name": {
          "aliases": [],
          "description": "Feature name of the filtered log. The value is a string of 1 to 31 case-insensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "filter_log_name": {
          "aliases": [],
          "description": "Name of the filtered log. The value is a string of 1 to 63 case-sensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "info_center_enable": {
          "aliases": [],
          "description": "Whether the info-center function is enabled. The value is of the Boolean type.",
          "required": false,
          "choices": [
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "ip_type": {
          "aliases": [],
          "description": "Log server address type, IPv4 or IPv6.",
          "required": false,
          "choices": [
            "ipv4",
            "ipv6"
          ],
          "suboptions": {}
        },
        "is_default_vpn": {
          "aliases": [],
          "description": "Use the default VPN or not.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "level": {
          "aliases": [],
          "description": "Level of logs saved on a log server.",
          "required": false,
          "choices": [
            "emergencies",
            "alert",
            "critical",
            "error",
            "warning",
            "notification",
            "informational",
            "debugging"
          ],
          "suboptions": {}
        },
        "logfile_max_num": {
          "aliases": [],
          "description": "Maximum number of log files of the same type. The default value is 200.\nThe value range for log files is[3, 500], for security files is [1, 3],and for operation files is [1, 7].",
          "required": false,
          "suboptions": {}
        },
        "logfile_max_size": {
          "aliases": [],
          "description": "Maximum size (in MB) of a log file. The default value is 32.\nThe value range for log files is [4, 8, 16, 32], for security files is [1, 4],\nand for operation files is [1, 4].",
          "default": "32",
          "required": false,
          "choices": [
            "4",
            "8",
            "16",
            "32"
          ],
          "suboptions": {}
        },
        "packet_priority": {
          "aliases": [],
          "description": "Set the priority of the syslog packet.The value is an integer ranging from 0 to 7. The default value is 0.",
          "required": false,
          "suboptions": {}
        },
        "server_domain": {
          "aliases": [],
          "description": "Server name. The value is a string of 1 to 255 case-sensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "server_ip": {
          "aliases": [],
          "description": "Log server address, IPv4 or IPv6 type. The value is a string of 0 to 255 characters. The value can be an valid IPv4 or IPv6 address.",
          "required": false,
          "suboptions": {}
        },
        "server_port": {
          "aliases": [],
          "description": "Number of a port sending logs.The value is an integer ranging from 1 to 65535. For UDP, the default value is 514. For TCP, the default value is 601. For TSL, the default value is 6514.",
          "required": false,
          "suboptions": {}
        },
        "source_ip": {
          "aliases": [],
          "description": "Log source ip address, IPv4 or IPv6 type. The value is a string of 0 to 255. The value can be an valid IPv4 or IPv6 address.",
          "required": false,
          "suboptions": {}
        },
        "ssl_policy_name": {
          "aliases": [],
          "description": "SSL policy name. The value is a string of 1 to 23 case-sensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_enable": {
          "aliases": [],
          "description": "Whether a device is enabled to suppress duplicate statistics. The value is of the Boolean type.",
          "required": false,
          "choices": [
            "false",
            "true"
          ],
          "suboptions": {}
        },
        "timestamp": {
          "aliases": [],
          "description": "Log server timestamp. The value is of the enumerated type and case-sensitive.",
          "required": false,
          "choices": [
            "UTC",
            "localtime"
          ],
          "suboptions": {}
        },
        "transport_mode": {
          "aliases": [],
          "description": "Transport mode. The value is of the enumerated type and case-sensitive.",
          "required": false,
          "choices": [
            "tcp",
            "udp"
          ],
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "VPN name on a log server. The value is a string of 1 to 31 case-sensitive characters. The default value is _public_.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages outputting logs on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Info center global module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Config info-center enable\n    community.network.ce_info_center_global:\n      info_center_enable: true\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Config statistic-suppress enable\n    community.network.ce_info_center_global:\n      suppress_enable: true\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Config info-center syslog packet-priority 1\n    community.network.ce_info_center_global:\n      packet_priority: 2\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Config info-center channel 1 name aaa\n    community.network.ce_info_center_global:\n      channel_id: 1\n      channel_cfg_name: aaa\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Config info-center logfile size 10\n    community.network.ce_info_center_global:\n      logfile_max_num: 10\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Config info-center console channel 1\n    community.network.ce_info_center_global:\n      channel_out_direct: console\n      channel_id: 1\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Config info-center filter-id bymodule-alias snmp snmp_ipunlock\n    community.network.ce_info_center_global:\n      filter_feature_name: SNMP\n      filter_log_name: SNMP_IPLOCK\n      state: present\n      provider: \"{{ cli }}\"\n\n\n  - name: Config info-center max-logfile-number 16\n    community.network.ce_info_center_global:\n      logfile_max_size: 16\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Config syslog loghost domain.\n    community.network.ce_info_center_global:\n      server_domain: aaa\n      vrf_name: aaa\n      channel_id: 1\n      transport_mode: tcp\n      facility: local4\n      server_port: 100\n      level: alert\n      timestamp: UTC\n      state: present\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_info_center_log": {
    "doc": {
      "description": "Setting the Timestamp Format of Logs. Configuring the Device to Output Logs to the Log Buffer.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "channel_id": {
          "aliases": [],
          "description": "Specifies a channel ID. The value is an integer ranging from 0 to 9.",
          "required": false,
          "suboptions": {}
        },
        "log_buff_enable": {
          "aliases": [],
          "description": "Enables the Switch to send logs to the log buffer.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "log_buff_size": {
          "aliases": [],
          "description": "Specifies the maximum number of logs in the log buffer. The value is an integer that ranges from 0 to 10240. If logbuffer-size is 0, logs are not displayed.",
          "required": false,
          "suboptions": {}
        },
        "log_enable": {
          "aliases": [],
          "description": "Indicates whether log filtering is enabled.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "log_level": {
          "aliases": [],
          "description": "Specifies a log severity.",
          "required": false,
          "choices": [
            "emergencies",
            "alert",
            "critical",
            "error",
            "warning",
            "notification",
            "informational",
            "debugging"
          ],
          "suboptions": {}
        },
        "log_time_stamp": {
          "aliases": [],
          "description": "Sets the timestamp format of logs.",
          "required": false,
          "choices": [
            "date_boot",
            "date_second",
            "date_tenthsecond",
            "date_millisecond",
            "shortdate_second",
            "shortdate_tenthsecond",
            "shortdate_millisecond",
            "formatdate_second",
            "formatdate_tenthsecond",
            "formatdate_millisecond"
          ],
          "suboptions": {}
        },
        "module_name": {
          "aliases": [],
          "description": "Specifies the name of a module. The value is a module name in registration logs.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages information center log configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine info center log test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Setting the timestamp format of logs\"\n    community.network.ce_info_center_log:\n      log_time_stamp: date_tenthsecond\n      provider: \"{{ cli }}\"\n\n  - name: \"Enabled to output information to the log buffer\"\n    community.network.ce_info_center_log:\n      log_buff_enable: true\n      provider: \"{{ cli }}\"\n\n  - name: \"Set the maximum number of logs in the log buffer\"\n    community.network.ce_info_center_log:\n      log_buff_size: 100\n      provider: \"{{ cli }}\"\n\n  - name: \"Set a rule for outputting logs to a channel\"\n    community.network.ce_info_center_log:\n      module_name: aaa\n      channel_id: 1\n      log_enable: true\n      log_level: critical\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_info_center_trap": {
    "doc": {
      "description": "Manages information center trap configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "channel_id": {
          "aliases": [],
          "description": "Number of a channel. The value is an integer ranging from 0 to 9. The default value is 0.",
          "required": false,
          "suboptions": {}
        },
        "module_name": {
          "aliases": [],
          "description": "Module name of the rule. The value is a string of 1 to 31 case-insensitive characters. The default value is default. Please use lower-case letter, such as [aaa, acl, arp, bfd].",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "trap_buff_enable": {
          "aliases": [],
          "description": "Whether a trap buffer is enabled to output information.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "trap_buff_size": {
          "aliases": [],
          "description": "Size of a trap buffer. The value is an integer ranging from 0 to 1024. The default value is 256.",
          "required": false,
          "suboptions": {}
        },
        "trap_enable": {
          "aliases": [],
          "description": "Whether a device is enabled to output alarms.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "trap_level": {
          "aliases": [],
          "description": "Trap level permitted to output.",
          "required": false,
          "choices": [
            "emergencies",
            "alert",
            "critical",
            "error",
            "warning",
            "notification",
            "informational",
            "debugging"
          ],
          "suboptions": {}
        },
        "trap_time_stamp": {
          "aliases": [],
          "description": "Timestamp format of alarm information.",
          "required": false,
          "choices": [
            "date_boot",
            "date_second",
            "date_tenthsecond",
            "date_millisecond",
            "shortdate_second",
            "shortdate_tenthsecond",
            "shortdate_millisecond",
            "formatdate_second",
            "formatdate_tenthsecond",
            "formatdate_millisecond"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages information center trap configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine info center trap test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config trap buffer\"\n    community.network.ce_info_center_trap:\n      state: present\n      trap_buff_enable: true\n      trap_buff_size: 768\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo trap buffer\"\n    community.network.ce_info_center_trap:\n      state: absent\n      trap_buff_enable: true\n      trap_buff_size: 768\n      provider: \"{{ cli }}\"\n\n  - name: \"Config trap module log level\"\n    community.network.ce_info_center_trap:\n      state: present\n      module_name: aaa\n      channel_id: 1\n      trap_enable: true\n      trap_level: error\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo trap module log level\"\n    community.network.ce_info_center_trap:\n      state: absent\n      module_name: aaa\n      channel_id: 1\n      trap_enable: true\n      trap_level: error\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_interface": {
    "doc": {
      "description": "Manages physical attributes of interfaces on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module is also used to create logical interfaces such as vlanif and loopbacks.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "admin_state": {
          "aliases": [],
          "description": "Specifies the interface management status. The value is an enumerated type. up, An interface is in the administrative Up state. down, An interface is in the administrative Down state.",
          "required": false,
          "choices": [
            "up",
            "down"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Specifies an interface description. The value is a string of 1 to 242 case-sensitive characters, spaces supported but question marks (?) not supported.",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Full name of interface, i.e. 40GE1/0/10, Tunnel1.",
          "required": false,
          "suboptions": {}
        },
        "interface_type": {
          "aliases": [],
          "description": "Interface type to be configured from the device.",
          "required": false,
          "choices": [
            "ge",
            "10ge",
            "25ge",
            "4x10ge",
            "40ge",
            "100ge",
            "vlanif",
            "loopback",
            "meth",
            "eth-trunk",
            "nve",
            "tunnel",
            "ethernet",
            "fcoe-port",
            "fabric-port",
            "stack-port",
            "null"
          ],
          "suboptions": {}
        },
        "l2sub": {
          "aliases": [],
          "description": "Specifies whether the interface is a Layer 2 sub-interface.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Manage Layer 2 or Layer 3 state of the interface.",
          "required": false,
          "choices": [
            "layer2",
            "layer3"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "default"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages physical attributes of interfaces on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Interface module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Ensure an interface is a Layer 3 port and that it has the proper description\n    community.network.ce_interface:\n      interface: 10GE1/0/22\n      description: 'Configured by Ansible'\n      mode: layer3\n      provider: '{{ cli }}'\n\n  - name: Admin down an interface\n    community.network.ce_interface:\n      interface: 10GE1/0/22\n      admin_state: down\n      provider: '{{ cli }}'\n\n  - name: Remove all tunnel interfaces\n    community.network.ce_interface:\n      interface_type: tunnel\n      state: absent\n      provider: '{{ cli }}'\n\n  - name: Remove all logical interfaces\n    community.network.ce_interface:\n      interface_type: '{{ item }}'\n      state: absent\n      provider: '{{ cli }}'\n    with_items:\n      - loopback\n      - eth-trunk\n      - nve\n\n  - name: Admin up all 10GE interfaces\n    community.network.ce_interface:\n      interface_type: 10GE\n      admin_state: up\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_interface_ospf": {
    "doc": {
      "description": "Manages configuration of an OSPF interface instanceon HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "area": {
          "aliases": [],
          "description": "Ospf area associated with this ospf process. Valid values are a string, formatted as an IP address (i.e. \"0.0.0.0\") or as an integer between 1 and 4294967295.",
          "required": true,
          "suboptions": {}
        },
        "auth_key_id": {
          "aliases": [],
          "description": "Authentication key id when C(auth_mode) is 'hmac-sha256', 'md5' or 'hmac-md5. Valid value is an integer is in the range from 1 to 255.",
          "required": false,
          "suboptions": {}
        },
        "auth_mode": {
          "aliases": [],
          "description": "Specifies the authentication type.",
          "required": false,
          "choices": [
            "none",
            "null",
            "hmac-sha256",
            "md5",
            "hmac-md5",
            "simple"
          ],
          "suboptions": {}
        },
        "auth_text_md5": {
          "aliases": [],
          "description": "Specifies a password for MD5, HMAC-MD5, or HMAC-SHA256 authentication. The value is a string of 1 to 255 case-sensitive characters, spaces not supported.",
          "required": false,
          "suboptions": {}
        },
        "auth_text_simple": {
          "aliases": [],
          "description": "Specifies a password for simple authentication. The value is a string of 1 to 8 characters.",
          "required": false,
          "suboptions": {}
        },
        "cost": {
          "aliases": [],
          "description": "The cost associated with this interface. Valid values are an integer in the range from 1 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "dead_interval": {
          "aliases": [],
          "description": "Time interval an ospf neighbor waits for a hello packet before tearing down adjacencies. Valid values are an integer in the range from 1 to 235926000.",
          "required": false,
          "suboptions": {}
        },
        "hello_interval": {
          "aliases": [],
          "description": "Time between sending successive hello packets. Valid values are an integer in the range from 1 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Full name of interface, i.e. 40GE1/0/10.",
          "required": true,
          "suboptions": {}
        },
        "process_id": {
          "aliases": [],
          "description": "Specifies a process ID. The value is an integer ranging from 1 to 4294967295.",
          "required": true,
          "suboptions": {}
        },
        "silent_interface": {
          "aliases": [],
          "description": "Setting to true will prevent this interface from receiving HELLO packets. Valid values are 'true' and 'false'.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages configuration of an OSPF interface instanceon HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Eth_trunk module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Enables OSPF and sets the cost on an interface\n    community.network.ce_interface_ospf:\n      interface: 10GE1/0/30\n      process_id: 1\n      area: 100\n      cost: 100\n      provider: '{{ cli }}'\n\n  - name: Sets the dead interval of the OSPF neighbor\n    community.network.ce_interface_ospf:\n      interface: 10GE1/0/30\n      process_id: 1\n      area: 100\n      dead_interval: 100\n      provider: '{{ cli }}'\n\n  - name: Sets the interval for sending Hello packets on an interface\n    community.network.ce_interface_ospf:\n      interface: 10GE1/0/30\n      process_id: 1\n      area: 100\n      hello_interval: 2\n      provider: '{{ cli }}'\n\n  - name: Disables an interface from receiving and sending OSPF packets\n    community.network.ce_interface_ospf:\n      interface: 10GE1/0/30\n      process_id: 1\n      area: 100\n      silent_interface: true\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_ip_interface": {
    "doc": {
      "description": "Manages Layer 3 attributes for IPv4 and IPv6 interfaces on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Interface must already be a L3 port when using this module.\nLogical interfaces (loopback, vlanif) must be created first.\nC(mask) must be inserted in decimal format (i.e. 24) for both IPv6 and IPv4.\nA single interface can have multiple IPv6 configured.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "addr": {
          "aliases": [],
          "description": "IPv4 or IPv6 Address.",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Full name of interface, i.e. 40GE1/0/22, vlanif10.",
          "required": true,
          "suboptions": {}
        },
        "ipv4_type": {
          "aliases": [],
          "description": "Specifies an address type. The value is an enumerated type. main, primary IP address. sub, secondary IP address.",
          "default": "main",
          "required": false,
          "choices": [
            "main",
            "sub"
          ],
          "suboptions": {}
        },
        "mask": {
          "aliases": [],
          "description": "Subnet mask for IPv4 or IPv6 Address in decimal format.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "IP address version.",
          "default": "v4",
          "required": false,
          "choices": [
            "v4",
            "v6"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages L3 attributes for IPv4 and IPv6 interfaces on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Ip_interface module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Ensure ipv4 address is configured on 10GE1/0/22\n    community.network.ce_ip_interface:\n      interface: 10GE1/0/22\n      version: v4\n      state: present\n      addr: 20.20.20.20\n      mask: 24\n      provider: '{{ cli }}'\n\n  - name: Ensure ipv4 secondary address is configured on 10GE1/0/22\n    community.network.ce_ip_interface:\n      interface: 10GE1/0/22\n      version: v4\n      state: present\n      addr: 30.30.30.30\n      mask: 24\n      ipv4_type: sub\n      provider: '{{ cli }}'\n\n  - name: Ensure ipv6 is enabled on 10GE1/0/22\n    community.network.ce_ip_interface:\n      interface: 10GE1/0/22\n      version: v6\n      state: present\n      provider: '{{ cli }}'\n\n  - name: Ensure ipv6 address is configured on 10GE1/0/22\n    community.network.ce_ip_interface:\n      interface: 10GE1/0/22\n      version: v6\n      state: present\n      addr: 2001::db8:800:200c:cccb\n      mask: 64\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_is_is_instance": {
    "doc": {
      "description": "Manages  isis process id, creates a isis instance id or deletes a process id on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nThis module works with connection C(netconf).",
      "options": {
        "instance_id": {
          "aliases": [],
          "description": "Specifies the id of a isis process.The value is a number of 1 to 4294967295.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpn_name": {
          "aliases": [],
          "description": "VPN Instance, associate the VPN instance with the corresponding IS-IS process.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages isis process id configuration on HUAWEI CloudEngine devices.",
      "version_added": "0.2.0"
    },
    "examples": "\n  - name: Set isis process\n    community.network.ce_is_is_instance:\n      instance_id: 3\n      state: present\n\n  - name: Unset isis process\n    community.network.ce_is_is_instance:\n      instance_id: 3\n      state: absent\n\n  - name: Check isis process\n    community.network.ce_is_is_instance:\n      instance_id: 4294967296\n      state: present\n\n  - name: Set vpn name\n    community.network.ce_is_is_instance:\n      instance_id: 22\n      vpn_name: vpn1\n      state: present\n\n  - name: Check vpn name\n    community.network.ce_is_is_instance:\n      instance_id: 22\n      vpn_name: vpn1234567896321452212221556asdasdasdasdsadvdv\n      state: present\n"
  },
  "community.network.ce_is_is_interface": {
    "doc": {
      "description": "Manages isis process id, creates a isis instance id or deletes a process id on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "Interface must already be a L3 port when using this module.\nThis module requires the netconf system service be enabled on the remote device being managed.\nThis module works with connection C(netconf).",
      "options": {
        "bfdblocken": {
          "aliases": [],
          "description": "Blocking interfaces to dynamically create BFD features. The value is a bool type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bfdstaticen": {
          "aliases": [],
          "description": "Configure static BFD on a specific interface enabled with ISIS. The value is a bool type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ifname": {
          "aliases": [],
          "description": "A L3 interface.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "Specifies the id of a isis process. The value is a number of 1 to 4294967295.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "level1cost": {
          "aliases": [],
          "description": "Specifies the link cost of the interface when performing Level-1 SPF calculation. The value is a number of 0 to 16777215.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "level1dispriority": {
          "aliases": [],
          "description": "the dispriority of the level1. The value is a number of 1 to 127.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "level2cost": {
          "aliases": [],
          "description": "Specifies the link cost of the interface when performing Level-2 SPF calculation. The value is a number of 0 to 16777215.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "level2dispriority": {
          "aliases": [],
          "description": "the dispriority of the level1. The value is a number of 1 to 127.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "leveltype": {
          "aliases": [],
          "description": "level type for three types.",
          "type": "str",
          "required": false,
          "choices": [
            "level_1",
            "level_2",
            "level_1_2"
          ],
          "suboptions": {}
        },
        "p2pnegotiationmode": {
          "aliases": [],
          "description": "Set the P2P neighbor negotiation type.",
          "type": "str",
          "required": false,
          "choices": [
            "2_way",
            "3_way",
            "3_wayonly"
          ],
          "suboptions": {}
        },
        "p2ppeeripignore": {
          "aliases": [],
          "description": "When the P2P hello packet is received, no IP address check is performed. The value is a bool type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ppposicpcheckenable": {
          "aliases": [],
          "description": "Interface for setting PPP link protocol to check OSICP negotiation status. The value is a bool type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "silentcost": {
          "aliases": [],
          "description": "Specifies whether the routing cost of the silent interface is 0. The value is a bool type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "silentenable": {
          "aliases": [],
          "description": "enable the interface can send isis message. The value is a bool type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "snpacheck": {
          "aliases": [],
          "description": "Enable SNPA check for LSPs and SNPs. The value is a bool type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "typep2penable": {
          "aliases": [],
          "description": "Simulate the network type of the interface as P2P. The value is a bool type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages isis interface configuration on HUAWEI CloudEngine devices.",
      "version_added": "0.2.0"
    },
    "examples": "\n  - name: \"create vlan and config vlanif\"\n    ce_config:\n      lines: 'vlan {{ test_vlan_id }},quit,interface {{test_intf_vlanif}},ip address {{test_vlanif_ip}} 24'\n      match: none\n\n  - name: \"create eth-trunk and config eth-trunk\"\n    ce_config:\n      lines: 'interface {{test_intf_trunk}},undo portswitch,ip address {{test_trunk_ip}} 24'\n      match: none\n\n  - name: \"create vpn instance\"\n    ce_config:\n      lines: 'ip vpn-instance {{test_vpn}},ipv4-family'\n      match: none\n\n  - name: Set isis circuit-level\n    community.network.ce_is_is_interface:\n      instance_id: 3\n      ifname: Eth-Trunk10\n      leveltype: level_1_2\n      state: present\n\n  - name: Set isis level1dispriority\n    community.network.ce_is_is_interface:\n      instance_id: 3\n      ifname: Eth-Trunk10\n      level1dispriority: 0\n      state: present\n\n  - name: Set isis level2dispriority\n    community.network.ce_is_is_interface:\n      instance_id: 3\n      ifname: Eth-Trunk10\n      level2dispriority: 0\n      state: present\n\n  - name: Set isis silentenable\n    community.network.ce_is_is_interface:\n      instance_id: 3\n      ifname: Eth-Trunk10\n      silentenable: true\n      state: present\n\n  - name: Set vpn name\n    ce_is_is_instance:\n      instance_id: 22\n      vpn_name: vpn1\n      state: present\n"
  },
  "community.network.ce_is_is_view": {
    "doc": {
      "description": "Manages isis process id, creates a isis instance id or deletes a process id on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nThis module works with connection C(netconf).",
      "options": {
        "aclnum_or_name": {
          "aliases": [],
          "description": "Specifies the acl number or name for isis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "allow_filter": {
          "aliases": [],
          "description": "Specifies the alow filter or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allow_up_down": {
          "aliases": [],
          "description": "Specifies the alow up or down.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "autocostenable": {
          "aliases": [],
          "description": "Specifies the alow auto cost enable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "autocostenablecompatible": {
          "aliases": [],
          "description": "Specifies the alow auto cost enable compatible.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "avoid_learning": {
          "aliases": [],
          "description": "Specifies the alow avoid learning.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bfd_min_rx": {
          "aliases": [],
          "description": "Specifies the bfd min received package.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "bfd_min_tx": {
          "aliases": [],
          "description": "Specifies the bfd min sent package.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "bfd_multiplier_num": {
          "aliases": [],
          "description": "Specifies the bfd multiplier number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cost": {
          "aliases": [],
          "description": "Specifies the bfd cost.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cost_type": {
          "aliases": [],
          "description": "Specifies the cost type.",
          "type": "str",
          "required": false,
          "choices": [
            "external",
            "internal"
          ],
          "suboptions": {}
        },
        "coststyle": {
          "aliases": [],
          "description": "Specifies the cost style.",
          "type": "str",
          "required": false,
          "choices": [
            "narrow",
            "wide",
            "transition",
            "ntransition",
            "wtransition"
          ],
          "suboptions": {}
        },
        "defaultmode": {
          "aliases": [],
          "description": "Specifies the default mode.",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "matchDefault",
            "matchAny"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Specifies description of isis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enablelevel1tolevel2": {
          "aliases": [],
          "description": "Enable level1 to level2.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "export_aclnumorname": {
          "aliases": [],
          "description": "Specifies export acl number or name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "export_ipprefix": {
          "aliases": [],
          "description": "Specifies export ip prefix.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "export_policytype": {
          "aliases": [],
          "description": "Specifies the default mode.",
          "type": "str",
          "required": false,
          "choices": [
            "aclNumOrName",
            "ipPrefix",
            "routePolicy"
          ],
          "suboptions": {}
        },
        "export_processid": {
          "aliases": [],
          "description": "Specifies export process id.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "export_protocol": {
          "aliases": [],
          "description": "Specifies the export router protocol.",
          "type": "str",
          "required": false,
          "choices": [
            "direct",
            "ospf",
            "isis",
            "static",
            "rip",
            "bgp",
            "ospfv3",
            "all"
          ],
          "suboptions": {}
        },
        "export_routepolicyname": {
          "aliases": [],
          "description": "Specifies export route policy name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "import_aclnumorname": {
          "aliases": [],
          "description": "Specifies import acl number or name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "import_cost": {
          "aliases": [],
          "description": "Specifies import cost.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "import_ipprefix": {
          "aliases": [],
          "description": "Specifies import ip prefix.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "import_route_policy": {
          "aliases": [],
          "description": "Specifies import route policy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "import_routepolicy_name": {
          "aliases": [],
          "description": "Specifies import route policy name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "import_routepolicyname": {
          "aliases": [],
          "description": "Specifies import route policy name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "import_tag": {
          "aliases": [],
          "description": "Specifies import tag.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "impotr_leveltype": {
          "aliases": [],
          "description": "Specifies the export router protocol.",
          "type": "str",
          "required": false,
          "choices": [
            "level_1",
            "level_2",
            "level_1_2"
          ],
          "suboptions": {}
        },
        "inheritcost": {
          "aliases": [],
          "description": "Enable inherit cost.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "Specifies instance id.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Specifies ip address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_prefix_name": {
          "aliases": [],
          "description": "Specifies ip prefix name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "islevel": {
          "aliases": [],
          "description": "Specifies the isis level.",
          "type": "str",
          "required": false,
          "choices": [
            "level_1",
            "level_2",
            "level_1_2"
          ],
          "suboptions": {}
        },
        "level_type": {
          "aliases": [],
          "description": "Specifies the isis level type.",
          "type": "str",
          "required": false,
          "choices": [
            "level_1",
            "level_2",
            "level_1_2"
          ],
          "suboptions": {}
        },
        "max_load": {
          "aliases": [],
          "description": "Specifies route max load.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode_routepolicyname": {
          "aliases": [],
          "description": "Specifies the mode of route polic yname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode_tag": {
          "aliases": [],
          "description": "Specifies the tag of mode.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "netentity": {
          "aliases": [],
          "description": "Specifies the netentity.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "penetration_direct": {
          "aliases": [],
          "description": "Specifies the penetration direct.",
          "type": "str",
          "required": false,
          "choices": [
            "level2-level1",
            "level1-level2"
          ],
          "suboptions": {}
        },
        "permitibgp": {
          "aliases": [],
          "description": "Specifies the permitibgp.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "preference_value": {
          "aliases": [],
          "description": "Specifies the preference value.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "processid": {
          "aliases": [],
          "description": "Specifies the process id.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Specifies the protocol.",
          "type": "str",
          "required": false,
          "choices": [
            "direct",
            "ospf",
            "isis",
            "static",
            "rip",
            "bgp",
            "ospfv3",
            "all"
          ],
          "suboptions": {}
        },
        "relaxspfLimit": {
          "aliases": [],
          "description": "Specifies enable the relax spf limit.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "route_policy_name": {
          "aliases": [],
          "description": "Specifies the route policy name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "stdbandwidth": {
          "aliases": [],
          "description": "Specifies the std band width.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "stdlevel1cost": {
          "aliases": [],
          "description": "Specifies the std level1 cost.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "stdlevel2cost": {
          "aliases": [],
          "description": "Specifies the std level2 cost.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Specifies the isis tag.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "Specifies the isis weight.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages isis view configuration on HUAWEI CloudEngine devices.",
      "version_added": "0.2.0"
    },
    "examples": "\n  - name: Set isis description\n    community.network.ce_is_is_view:\n      instance_id: 3\n      description: abcdeggfs\n      state: present\n\n  - name: Set isis islevel\n    community.network.ce_is_is_view:\n      instance_id: 3\n      islevel: level_1\n      state: present\n  - name: Set isis coststyle\n    community.network.ce_is_is_view:\n      instance_id: 3\n      coststyle: narrow\n      state: present\n\n  - name: Set isis stdlevel1cost\n    community.network.ce_is_is_view:\n      instance_id: 3\n      stdlevel1cost: 63\n      state: present\n\n  - name: Set isis stdlevel2cost\n    community.network.ce_is_is_view:\n      instance_id: 3\n      stdlevel2cost: 63\n      state: present\n\n  - name: Set isis stdbandwidth\n    community.network.ce_is_is_view:\n      instance_id: 3\n      stdbandwidth: 1\n      state: present\n"
  },
  "community.network.ce_lacp": {
    "doc": {
      "description": "Manages Eth-Trunk specific configuration parameters on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "C(state=absent) removes the Eth-Trunk config and interface if it already exists. If members to be removed are not explicitly passed, all existing members (if any), are removed, and Eth-Trunk removed.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "collector_delay": {
          "aliases": [],
          "description": "Value of delay time in units of 10 microseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "fast_timeout": {
          "aliases": [],
          "description": "When lacp timeout type is 'Fast', user-defined time can be a number(3~90).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "global_priority": {
          "aliases": [],
          "description": "Configure lacp priority on system-view.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "max_active_linknumber": {
          "aliases": [],
          "description": "Max active linknumber in link aggregation group.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mixed_rate_link_enable": {
          "aliases": [],
          "description": "Value of max active linknumber.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Specifies the working mode of an Eth-Trunk interface.",
          "type": "str",
          "required": false,
          "choices": [
            "Manual",
            "Dynamic",
            "Static"
          ],
          "suboptions": {}
        },
        "port_id_extension_enable": {
          "aliases": [],
          "description": "Enable the function of extending the LACP negotiation port number.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "preempt_delay": {
          "aliases": [],
          "description": "Value of preemption delay time.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "preempt_enable": {
          "aliases": [],
          "description": "Specifies lacp preempt enable of Eth-Trunk lacp. The value is an boolean 'true' or 'false'.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "The priority of eth-trunk member interface.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "select": {
          "aliases": [],
          "description": "Select priority or speed to preempt.",
          "type": "str",
          "required": false,
          "choices": [
            "Speed",
            "Prority"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "state_flapping": {
          "aliases": [],
          "description": "Lacp dampening state-flapping.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "system_id": {
          "aliases": [],
          "description": "Link Aggregation Control Protocol System ID,interface Eth-Trunk View.\nFormate 'X-X-X',X is hex(a,aa,aaa, or aaaa)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout_type": {
          "aliases": [],
          "description": "Lacp timeout type,that may be 'Fast' or 'Slow'.",
          "type": "str",
          "required": false,
          "choices": [
            "Slow",
            "Fast"
          ],
          "suboptions": {}
        },
        "trunk_id": {
          "aliases": [],
          "description": "Eth-Trunk interface number. The value is an integer. The value range depends on the assign forward eth-trunk mode command. When 256 is specified, the value ranges from 0 to 255. When 512 is specified, the value ranges from 0 to 511. When 1024 is specified, the value ranges from 0 to 1023.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "unexpected_mac_disable": {
          "aliases": [],
          "description": "Lacp dampening unexpected-mac disable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches",
      "version_added": "0.2.0"
    },
    "examples": "\n  - name: Ensure Eth-Trunk100 is created, and set to mode lacp-static\n    community.network.ce_lacp:\n      trunk_id: 100\n      mode: 'lacp-static'\n      state: present\n  - name: Ensure Eth-Trunk100 is created, add two members, and set global priority to 1231\n    community.network.ce_lacp:\n      trunk_id: 100\n      global_priority: 1231\n      state: present\n  - name: Ensure Eth-Trunk100 is created, and set mode to Dynamic and configure other options\n    community.network.ce_lacp:\n      trunk_id: 100\n      mode: Dynamic\n      preempt_enable: True,\n      state_flapping: True,\n      port_id_extension_enable: True,\n      unexpected_mac_disable: True,\n      timeout_type: Fast,\n      fast_timeout: 123,\n      mixed_rate_link_enable: True,\n      preempt_delay: 23,\n      collector_delay: 33,\n      state: present\n"
  },
  "community.network.ce_link_status": {
    "doc": {
      "description": "Get interface link status on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Current physical state shows an interface's physical status.\nCurrent link state shows an interface's link layer protocol status.\nCurrent IPv4 state shows an interface's IPv4 protocol status.\nCurrent IPv6 state shows an interface's  IPv6 protocol status.\nInbound octets(bytes) shows the number of bytes that an interface received.\nInbound unicast(pkts) shows the number of unicast packets that an interface received.\nInbound multicast(pkts) shows the number of multicast packets that an interface received.\nInbound broadcast(pkts) shows  the number of broadcast packets that an interface received.\nInbound error(pkts) shows the number of error packets that an interface received.\nInbound drop(pkts) shows the total number of packets that were sent to the interface but dropped by an interface.\nInbound rate(byte/sec) shows the rate at which an interface receives bytes within an interval.\nInbound rate(pkts/sec) shows the rate at which an interface receives packets within an interval.\nOutbound octets(bytes) shows the number of the bytes that an interface sent.\nOutbound unicast(pkts) shows  the number of unicast packets that an interface sent.\nOutbound multicast(pkts) shows the number of multicast packets that an interface sent.\nOutbound broadcast(pkts) shows the number of broadcast packets that an interface sent.\nOutbound error(pkts) shows the total number of packets that an interface sent but dropped by the remote interface.\nOutbound drop(pkts) shows the number of dropped packets that an interface sent.\nOutbound rate(byte/sec) shows the rate at which an interface sends bytes within an interval.\nOutbound rate(pkts/sec) shows the rate at which an interface sends packets within an interval.\nSpeed shows the rate for an Ethernet interface.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "interface": {
          "aliases": [],
          "description": "For the interface parameter, you can enter C(all) to display information about all interfaces, an interface type such as C(40GE) to display information about interfaces of the specified type, or full name of an interface such as C(40GE1/0/22) or C(vlanif10) to display information about the specific interface.",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Get interface link status on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: Link status test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Get specified interface link status information\n    community.network.ce_link_status:\n      interface: 40GE1/0/1\n      provider: \"{{ cli }}\"\n\n  - name: Get specified interface type link status information\n    community.network.ce_link_status:\n      interface: 40GE\n      provider: \"{{ cli }}\"\n\n  - name: Get all interfaces link status information\n    community.network.ce_link_status:\n      interface: all\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_lldp": {
    "doc": {
      "description": "Manages LLDP configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "bind_name": {
          "aliases": [],
          "description": "Binding interface name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fast_count": {
          "aliases": [],
          "description": "The number of LLDP messages sent to the neighbor nodes by the specified device.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "hold_multiplier": {
          "aliases": [],
          "description": "Time multiplier for device information in neighbor devices.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Frequency at which LLDP advertisements are sent (in seconds).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "lldpenable": {
          "aliases": [],
          "description": "Set global LLDP enable state.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "management_address": {
          "aliases": [],
          "description": "The management IP address of LLDP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mdn_notification_interval": {
          "aliases": [],
          "description": "Delay time for sending MDN neighbor information change alarm.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mdnstatus": {
          "aliases": [],
          "description": "Set global MDN enable state.",
          "type": "str",
          "required": false,
          "choices": [
            "rxOnly",
            "disabled"
          ],
          "suboptions": {}
        },
        "notification_interval": {
          "aliases": [],
          "description": "Suppression time for sending LLDP alarm.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "restart_delay": {
          "aliases": [],
          "description": "Specifies the delay time of the interface LLDP module from disabled state to re enable.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "transmit_delay": {
          "aliases": [],
          "description": "Delay time for sending LLDP messages.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages LLDP configuration on HUAWEI CloudEngine switches.",
      "version_added": "0.2.0"
    },
    "examples": "\n  - name: \"Configure global LLDP enable state\"\n    community.network.ce_lldp:\n      lldpenable: enabled\n\n  - name: \"Configure global MDN enable state\"\n    community.network.ce_lldp:\n      mdnstatus: rxOnly\n\n  - name: \"Configure LLDP transmit interval and ensure global LLDP state is already enabled\"\n    community.network.ce_lldp:\n      enable: enable\n      interval: 32\n\n  - name: \"Configure LLDP transmit multiplier hold and ensure global LLDP state is already enabled\"\n    community.network.ce_lldp:\n      enable: enable\n      hold_multiplier: 5\n\n  - name: \"Configure the delay time of the interface LLDP module from disabled state to re enable\"\n    community.network.ce_lldp:\n      enable: enable\n      restart_delay: 3\n\n  - name: \"Reset the delay time for sending LLDP messages\"\n    community.network.ce_lldp:\n      enable: enable\n      transmit_delay: 4\n\n  - name: \"Configure device to send neighbor device information change alarm delay time\"\n    community.network.ce_lldp:\n      lldpenable: enabled\n      notification_interval: 6\n\n  - name: \"Configure the number of LLDP messages sent to the neighbor nodes by the specified device\"\n    community.network.ce_lldp:\n      enable: enable\n      fast_count: 5\n\n  - name: \"Configure the delay time for sending MDN neighbor information change alarm\"\n    community.network.ce_lldp:\n      enable: enable\n      mdn_notification_interval: 6\n  - name: \"Configuring the management IP address of LLDP\"\n    community.network.ce_lldp:\n      enable: enable\n      management_address: 10.1.0.1\n\n  - name: \"Configuring LLDP to manage the binding relationship between IP addresses and interfaces\"\n    community.network.ce_lldp:\n      enable: enable\n      bind_name: LoopBack2\n"
  },
  "community.network.ce_lldp_interface": {
    "doc": {
      "description": "Manages INTERFACE LLDP configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "dcbx": {
          "aliases": [],
          "description": "Enable the ability to send DCBX TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "eee": {
          "aliases": [],
          "description": "Enable the ability to send EEE TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "function_lldp_interface_flag": {
          "aliases": [],
          "description": "Used to distinguish between command line functions.",
          "type": "str",
          "required": false,
          "choices": [
            "disableINTERFACE",
            "tlvdisableINTERFACE",
            "tlvenableINTERFACE",
            "intervalINTERFACE"
          ],
          "suboptions": {}
        },
        "ifname": {
          "aliases": [],
          "description": "Interface name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "linkaggretxenable": {
          "aliases": [],
          "description": "Enable the ability to send link aggregation TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lldpadminstatus": {
          "aliases": [],
          "description": "Set interface lldp enable state.",
          "type": "str",
          "required": false,
          "choices": [
            "txOnly",
            "rxOnly",
            "txAndRx",
            "disabled"
          ],
          "suboptions": {}
        },
        "lldpenable": {
          "aliases": [],
          "description": "Set global LLDP enable state.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "macphytxenable": {
          "aliases": [],
          "description": "Enable MAC/PHY configuration and state TLV to be sent.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "manaddrtxenable": {
          "aliases": [],
          "description": "Make it able to send management address TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maxframetxenable": {
          "aliases": [],
          "description": "Enable the ability to send maximum frame length TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "portdesctxenable": {
          "aliases": [],
          "description": "Enabling the ability to send a description of TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "portvlantxenable": {
          "aliases": [],
          "description": "Enable port vlan tx.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "protoidtxenable": {
          "aliases": [],
          "description": "Enable the ability to send protocol identity TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "protovlantxenable": {
          "aliases": [],
          "description": "Enable protocol vlan tx.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "syscaptxenable": {
          "aliases": [],
          "description": "Enable the ability to send system capabilities TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sysdesctxenable": {
          "aliases": [],
          "description": "Enable the ability to send system description TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sysnametxenable": {
          "aliases": [],
          "description": "Enable the ability to send system name TLV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "txinterval": {
          "aliases": [],
          "description": "LLDP send message interval.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "txprotocolvlanid": {
          "aliases": [],
          "description": "Set tx protocol vlan id.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "txvlannameid": {
          "aliases": [],
          "description": "Set tx vlan name id.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type_tlv_disable": {
          "aliases": [],
          "description": "Used to distinguish between command line functions.",
          "type": "str",
          "required": false,
          "choices": [
            "basic_tlv",
            "dot3_tlv"
          ],
          "suboptions": {}
        },
        "type_tlv_enable": {
          "aliases": [],
          "description": "Used to distinguish between command line functions.",
          "type": "str",
          "required": false,
          "choices": [
            "dot1_tlv",
            "dcbx"
          ],
          "suboptions": {}
        },
        "vlannametxenable": {
          "aliases": [],
          "description": "Set vlan name tx enable or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages INTERFACE LLDP configuration on HUAWEI CloudEngine switches.",
      "version_added": "0.2.0"
    },
    "examples": "\n  - name: \"Configure global LLDP enable state\"\n    ce_lldp_interface_interface:\n      lldpenable: enabled\n\n  - name: \"Configure interface lldp enable state\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: disableINTERFACE\n      ifname: 10GE1/0/1\n      lldpadminstatus: rxOnly\n  - name: \"Configure LLDP transmit interval and ensure global LLDP state is already enabled\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: intervalINTERFACE\n      ifname: 10GE1/0/1\n      txinterval: 4\n\n  - name: \"Configure basic-tlv: management-address TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: basic_tlv\n      ifname: 10GE1/0/1\n      manaddrtxenable: true\n\n  - name: \"Configure basic-tlv: prot description TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: basic_tlv\n      ifname: 10GE1/0/1\n      portdesctxenable: true\n\n  - name: \"Configure basic-tlv: system capabilities TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: basic_tlv\n      ifname: 10GE1/0/1\n      syscaptxenable: true\n\n  - name: \"Configure basic-tlv: system description TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: basic_tlv\n      ifname: 10GE1/0/1\n      sysdesctxenable: true\n\n  - name: \"Configure basic-tlv: system name TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: basic_tlv\n      ifname: 10GE1/0/1\n      sysnametxenable: true\n\n  - name: \"TLV types that are forbidden to be published on the configuration interface, link aggregation TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: dot3_tlv\n      ifname: 10GE1/0/1\n      linkAggreTxEnable: true\n\n  - name: \"TLV types that are forbidden to be published on the configuration interface, MAC/PHY configuration/status TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: dot3_tlv\n      ifname: 10GE1/0/1\n      macPhyTxEnable: true\n\n  - name: \"TLV types that are forbidden to be published on the configuration interface, maximum frame size TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: dot3_tlv\n      ifname: 10GE1/0/1\n      maxFrameTxEnable: true\n\n  - name: \"TLV types that are forbidden to be published on the configuration interface, EEE TLV\"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvdisableINTERFACE\n      type_tlv_disable: dot3_tlv\n      ifname: 10GE1/0/1\n      eee: true\n\n  - name: \"Configure the interface to publish an optional DCBX TLV type \"\n    community.network.ce_lldp_interface:\n      function_lldp_interface_flag: tlvenableINTERFACE\n      ifname: 10GE1/0/1\n      type_tlv_enable: dcbx\n"
  },
  "community.network.ce_mdn_interface": {
    "doc": {
      "description": "Manages MDN configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nThis module works with connection C(netconf).",
      "options": {
        "ifname": {
          "aliases": [],
          "description": "Interface name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lldpenable": {
          "aliases": [],
          "description": "Set global LLDP enable state.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "mdnstatus": {
          "aliases": [],
          "description": "Set interface MDN enable state.",
          "type": "str",
          "required": false,
          "choices": [
            "rxOnly",
            "disabled"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages MDN configuration on HUAWEI CloudEngine switches.",
      "version_added": "0.2.0"
    },
    "examples": "\n  - name: \"Configure global LLDP enable state\"\n    community.network.ce_mdn_interface:\n      lldpenable: enabled\n\n  - name: \"Configure interface MDN enable state\"\n    community.network.ce_mdn_interface:\n      ifname: 10GE1/0/1\n      mdnstatus: rxOnly\n"
  },
  "community.network.ce_mlag_config": {
    "doc": {
      "description": "Manages MLAG configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "dfs_group_id": {
          "aliases": [],
          "description": "ID of a DFS group. The value is 1.",
          "default": "present",
          "required": false,
          "suboptions": {}
        },
        "eth_trunk_id": {
          "aliases": [],
          "description": "Name of the peer-link interface. The value is in the range from 0 to 511.",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "IP address bound to the DFS group. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "nickname": {
          "aliases": [],
          "description": "The nickname bound to a DFS group. The value is an integer that ranges from 1 to 65471.",
          "required": false,
          "suboptions": {}
        },
        "peer_link_id": {
          "aliases": [],
          "description": "Number of the peer-link interface. The value is 1.",
          "required": false,
          "suboptions": {}
        },
        "priority_id": {
          "aliases": [],
          "description": "Priority of a DFS group. The value is an integer that ranges from 1 to 254. The default value is 100.",
          "required": false,
          "suboptions": {}
        },
        "pseudo_nickname": {
          "aliases": [],
          "description": "A pseudo nickname of a DFS group. The value is an integer that ranges from 1 to 65471.",
          "required": false,
          "suboptions": {}
        },
        "pseudo_priority": {
          "aliases": [],
          "description": "The priority of a pseudo nickname. The value is an integer that ranges from 128 to 255. The default value is 192. A larger value indicates a higher priority.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpn_instance_name": {
          "aliases": [],
          "description": "Name of the VPN instance bound to the DFS group. The value is a string of 1 to 31 case-sensitive characters without spaces. If the character string is quoted by double quotation marks, the character string can contain spaces. The value _public_ is reserved and cannot be used as the VPN instance name.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages MLAG configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Mlag config module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Create DFS Group id\n    community.network.ce_mlag_config:\n      dfs_group_id: 1\n      provider: \"{{ cli }}\"\n  - name: Set dfs-group priority\n    community.network.ce_mlag_config:\n      dfs_group_id: 1\n      priority_id: 3\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Set pseudo nickname\n    community.network.ce_mlag_config:\n      dfs_group_id: 1\n      pseudo_nickname: 3\n      pseudo_priority: 130\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Set ip\n    community.network.ce_mlag_config:\n      dfs_group_id: 1\n      ip_address: 11.1.1.2\n      vpn_instance_name: 6\n      provider: \"{{ cli }}\"\n  - name: Set peer link\n    community.network.ce_mlag_config:\n      eth_trunk_id: 3\n      peer_link_id: 2\n      state: present\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_mlag_interface": {
    "doc": {
      "description": "Manages MLAG interface attributes on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "dfs_group_id": {
          "aliases": [],
          "description": "ID of a DFS group.The value is 1.",
          "default": "present",
          "required": false,
          "suboptions": {}
        },
        "eth_trunk_id": {
          "aliases": [],
          "description": "Name of the local M-LAG interface. The value is ranging from 0 to 511.",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Name of the interface that enters the Error-Down state when the peer-link fails. The value is a string of 1 to 63 characters.",
          "required": false,
          "suboptions": {}
        },
        "mlag_error_down": {
          "aliases": [],
          "description": "Configure the interface on the slave device to enter the Error-Down state.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "mlag_id": {
          "aliases": [],
          "description": "ID of the M-LAG. The value is an integer that ranges from 1 to 2048.",
          "required": false,
          "suboptions": {}
        },
        "mlag_priority_id": {
          "aliases": [],
          "description": "M-LAG global LACP system priority. The value is an integer ranging from 0 to 65535. The default value is 32768.",
          "required": false,
          "suboptions": {}
        },
        "mlag_system_id": {
          "aliases": [],
          "description": "M-LAG global LACP system MAC address. The value is a string of 0 to 255 characters. The default value is the MAC address of the Ethernet port of MPU.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages MLAG interfaces on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Mlag interface module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Set interface mlag error down\n    community.network.ce_mlag_interface:\n      interface: 10GE2/0/1\n      mlag_error_down: enable\n      provider: \"{{ cli }}\"\n  - name: Create mlag\n    community.network.ce_mlag_interface:\n      eth_trunk_id: 1\n      dfs_group_id: 1\n      mlag_id: 4\n      provider: \"{{ cli }}\"\n  - name: Set mlag global attribute\n    community.network.ce_mlag_interface:\n      mlag_system_id: 0020-1409-0407\n      mlag_priority_id: 5\n      provider: \"{{ cli }}\"\n  - name: Set mlag interface attribute\n    community.network.ce_mlag_interface:\n      eth_trunk_id: 1\n      mlag_system_id: 0020-1409-0400\n      mlag_priority_id: 3\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_mtu": {
    "doc": {
      "description": "Manages MTU settings on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Either C(sysmtu) param is required or C(interface) AND C(mtu) params are req'd.\nC(state=absent) unconfigures a given MTU if that value is currently present.\nRecommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "interface": {
          "aliases": [],
          "description": "Full name of interface, i.e. 40GE1/0/22.",
          "required": false,
          "suboptions": {}
        },
        "jumbo_max": {
          "aliases": [],
          "description": "Maximum frame size. The default value is 9216. The value is an integer and expressed in bytes. The value range is 1536 to 12224 for the CE12800 and 1536 to 12288 for ToR switches.",
          "required": false,
          "suboptions": {}
        },
        "jumbo_min": {
          "aliases": [],
          "description": "Non-jumbo frame size threshold. The default value is 1518. The value is an integer that ranges from 1518 to jumbo_max, in bytes.",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "MTU for a specific interface. The value is an integer ranging from 46 to 9600, in bytes.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages MTU settings on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Mtu test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config jumboframe on 40GE1/0/22\"\n    community.network.ce_mtu:\n      interface: 40GE1/0/22\n      jumbo_max: 9000\n      jumbo_min: 8000\n      provider: \"{{ cli }}\"\n\n  - name: \"Config mtu on 40GE1/0/22 (routed interface)\"\n    community.network.ce_mtu:\n      interface: 40GE1/0/22\n      mtu: 1600\n      provider: \"{{ cli }}\"\n\n  - name: \"Config mtu on 40GE1/0/23 (switched interface)\"\n    community.network.ce_mtu:\n      interface: 40GE1/0/22\n      mtu: 9216\n      provider: \"{{ cli }}\"\n\n  - name: \"Config mtu and jumboframe on 40GE1/0/22 (routed interface)\"\n    community.network.ce_mtu:\n      interface: 40GE1/0/22\n      mtu: 1601\n      jumbo_max: 9001\n      jumbo_min: 8001\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure mtu and jumboframe on a given interface\"\n    community.network.ce_mtu:\n      state: absent\n      interface: 40GE1/0/22\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_multicast_global": {
    "doc": {
      "description": "Manages multicast global on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "If no vrf is supplied, vrf is set to default.\nIf I(state=absent), the route will be removed, regardless of the non-required parameters.\nThis module requires the netconf system service be enabled on the remote device being managed.\nThis module works with connection C(netconf).",
      "options": {
        "aftype": {
          "aliases": [],
          "description": "Destination ip address family type of static route.",
          "type": "str",
          "required": true,
          "choices": [
            "v4",
            "v6"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "VPN instance of destination ip address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages multicast global configuration on HUAWEI CloudEngine switches.",
      "version_added": "0.2.0"
    },
    "examples": "\n---\n  - name: Multicast routing-enable\n    community.network.ce_multicast_global:\n      aftype: v4\n      state: absent\n      provider: \"{{ cli }}\"\n  - name: Multicast routing-enable\n    community.network.ce_multicast_global:\n      aftype: v4\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Multicast routing-enable\n    community.network.ce_multicast_global:\n      aftype: v4\n      vrf: vrf1\n      provider: \"{{ cli }}\"\n\n"
  },
  "community.network.ce_multicast_igmp_enable": {
    "doc": {
      "description": "Manages multicast igmp on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "If no vrf is supplied, vrf is set to default. If I(state=absent), the route will be removed, regardless of the non-required parameters.\nThis module requires the netconf system service be enabled on the remote device being managed.\nThis module works with connection C(netconf).",
      "options": {
        "aftype": {
          "aliases": [],
          "description": "Destination ip address family type of static route.",
          "type": "str",
          "required": true,
          "choices": [
            "v4",
            "v6"
          ],
          "suboptions": {}
        },
        "features": {
          "aliases": [],
          "description": "Distinguish between Globally Enabled IGMP or\nEnabled IGMP under vlanID.",
          "type": "str",
          "required": true,
          "choices": [
            "global",
            "vlan"
          ],
          "suboptions": {}
        },
        "igmp": {
          "aliases": [],
          "description": "Enable Layer 2 multicast Snooping in a VLAN.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "Layer 2 multicast snooping proxy is enabled.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Specifies the IGMP version that can be processed.",
          "default": "2",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "Virtual LAN identity.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages multicast igmp enable configuration on HUAWEI CloudEngine switches.",
      "version_added": "0.2.0"
    },
    "examples": "\n\n  - name: Configure global igmp enable\n    community.network.ce_multicast_igmp_enable:\n      aftype: v4\n      features: 'global'\n      state: present\n\n  - name: Configure global igmp disable\n    community.network.ce_multicast_igmp_enable:\n      features: 'global'\n      aftype: v4\n      state: absent\n\n  - name: Configure vlan igmp enable\n    community.network.ce_multicast_igmp_enable:\n      features: 'vlan'\n      aftype: v4\n      vlan_id: 1\n      igmp: true\n\n  - name: New proxy,igmp,version\n    community.network.ce_multicast_igmp_enable:\n      features: 'vlan'\n      aftype: v4\n      vlan_id: 1\n      proxy: true\n      igmp: true\n      version: 1\n\n  - name: Modify proxy,igmp,version\n    community.network.ce_multicast_igmp_enable:\n      features: 'vlan'\n      aftype: v4\n      vlan_id: 1\n      version: 2\n\n  - name: Delete proxy,igmp,version\n    community.network.ce_multicast_igmp_enable:\n      features: 'vlan'\n      aftype: v4\n      vlan_id: 1\n      state: absent\n"
  },
  "community.network.ce_netconf": {
    "doc": {
      "description": "Sends an arbitrary netconf command on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "cfg_xml": {
          "aliases": [],
          "description": "The config xml string.",
          "required": true,
          "suboptions": {}
        },
        "rpc": {
          "aliases": [],
          "description": "The type of rpc.",
          "required": true,
          "choices": [
            "get",
            "edit-config",
            "execute-action",
            "execute-cli"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Run an arbitrary netconf command on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine netconf test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Netconf get operation\"\n    community.network.ce_netconf:\n      rpc: get\n      cfg_xml: '<filter type=\"subtree\">\n                  <vlan xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n                    <vlans>\n                      <vlan>\n                        <vlanId>10</vlanId>\n                        <vlanif>\n                          <ifName></ifName>\n                          <cfgBand></cfgBand>\n                          <dampTime></dampTime>\n                        </vlanif>\n                      </vlan>\n                    </vlans>\n                  </vlan>\n                </filter>'\n      provider: \"{{ cli }}\"\n\n  - name: \"Netconf edit-config operation\"\n    community.network.ce_netconf:\n      rpc: edit-config\n      cfg_xml: '<config>\n                    <aaa xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n                      <authenticationSchemes>\n                        <authenticationScheme operation=\"create\">\n                          <authenSchemeName>default_wdz</authenSchemeName>\n                          <firstAuthenMode>local</firstAuthenMode>\n                          <secondAuthenMode>invalid</secondAuthenMode>\n                        </authenticationScheme>\n                      </authenticationSchemes>\n                    </aaa>\n                   </config>'\n      provider: \"{{ cli }}\"\n\n  - name: \"Netconf execute-action operation\"\n    community.network.ce_netconf:\n      rpc: execute-action\n      cfg_xml: '<action>\n                     <l2mc xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n                       <l2McResetAllVlanStatis>\n                         <addrFamily>ipv4unicast</addrFamily>\n                       </l2McResetAllVlanStatis>\n                     </l2mc>\n                   </action>'\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_netstream_aging": {
    "doc": {
      "description": "Manages timeout mode of NetStream on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "manual_slot": {
          "aliases": [],
          "description": "Specifies the slot number of netstream manual timeout.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout_interval": {
          "aliases": [],
          "description": "Netstream timeout interval. If is active type the interval is 1-60. If is inactive ,the interval is 5-600.",
          "default": "30",
          "required": false,
          "suboptions": {}
        },
        "timeout_type": {
          "aliases": [],
          "description": "Netstream timeout type.",
          "required": false,
          "choices": [
            "active",
            "inactive",
            "tcp-session",
            "manual"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Specifies the packet type of netstream timeout active interval.",
          "required": false,
          "choices": [
            "ip",
            "vxlan"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages timeout mode of NetStream on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Netstream aging module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Configure netstream ip timeout active interval , the interval is 40 minutes.\n    community.network.ce_netstream_aging:\n      timeout_interval: 40\n      type: ip\n      timeout_type: active\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Configure netstream vxlan timeout active interval , the interval is 40 minutes.\n    community.network.ce_netstream_aging:\n      timeout_interval: 40\n      type: vxlan\n      timeout_type: active\n      active_state: present\n      provider: \"{{ cli }}\"\n\n  - name: Delete netstream ip timeout active interval , set the ip timeout interval to 30 minutes.\n    community.network.ce_netstream_aging:\n      type: ip\n      timeout_type: active\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: Delete netstream vxlan timeout active interval , set the vxlan timeout interval to 30 minutes.\n    community.network.ce_netstream_aging:\n      type: vxlan\n      timeout_type: active\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: Enable netstream ip tcp session timeout.\n    community.network.ce_netstream_aging:\n      type: ip\n      timeout_type: tcp-session\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Enable netstream vxlan tcp session timeout.\n    community.network.ce_netstream_aging:\n      type: vxlan\n      timeout_type: tcp-session\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: Disable netstream ip tcp session timeout.\n    community.network.ce_netstream_aging:\n      type: ip\n      timeout_type: tcp-session\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: Disable netstream vxlan tcp session timeout.\n    community.network.ce_netstream_aging:\n      type: vxlan\n      timeout_type: tcp-session\n      state: absent\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_netstream_export": {
    "doc": {
      "description": "Configure NetStream flow statistics exporting and versions for exported packets on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "as_option": {
          "aliases": [],
          "description": "Specifies the AS number recorded in the statistics as the original or the peer AS number.",
          "required": false,
          "choices": [
            "origin",
            "peer"
          ],
          "suboptions": {}
        },
        "bgp_nexthop": {
          "aliases": [],
          "description": "Configures the statistics to carry BGP next hop information. Currently, only V9 supports the exported packets carrying BGP next hop information.",
          "default": "disable",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "host_ip": {
          "aliases": [],
          "description": "Specifies destination address which can be IPv6 or IPv4 of the exported NetStream packet.",
          "required": false,
          "suboptions": {}
        },
        "host_port": {
          "aliases": [],
          "description": "Specifies the destination UDP port number of the exported packets. The value is an integer that ranges from 1 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "host_vpn": {
          "aliases": [],
          "description": "Specifies the VPN instance of the exported packets carrying flow statistics. Ensure the VPN instance has been created on the device.",
          "required": false,
          "suboptions": {}
        },
        "source_ip": {
          "aliases": [],
          "description": "Specifies source address which can be IPv6 or IPv4 of the exported NetStream packet.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Specifies NetStream feature.",
          "required": true,
          "choices": [
            "ip",
            "vxlan"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Sets the version of exported packets.",
          "required": false,
          "choices": [
            "5",
            "9"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages netstream export on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Netstream export module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Configures the source address for the exported packets carrying IPv4 flow statistics.\n    community.network.ce_netstream_export:\n      type: ip\n      source_ip: 192.8.2.2\n      provider: \"{{ cli }}\"\n\n  - name: Configures the source IP address for the exported packets carrying VXLAN flexible flow statistics.\n    community.network.ce_netstream_export:\n      type: vxlan\n      source_ip: 192.8.2.3\n      provider: \"{{ cli }}\"\n\n  - name: Configures the destination IP address and destination UDP port number for the exported packets carrying IPv4 flow statistics.\n    community.network.ce_netstream_export:\n      type: ip\n      host_ip: 192.8.2.4\n      host_port: 25\n      host_vpn: test\n      provider: \"{{ cli }}\"\n\n  - name: Configures the destination IP address and destination UDP port number for the exported packets carrying VXLAN flexible flow statistics.\n    community.network.ce_netstream_export:\n      type: vxlan\n      host_ip: 192.8.2.5\n      host_port: 26\n      host_vpn: test\n      provider: \"{{ cli }}\"\n\n  - name: Configures the version number of the exported packets carrying IPv4 flow statistics.\n    community.network.ce_netstream_export:\n      type: ip\n      version: 9\n      as_option: origin\n      bgp_nexthop: enable\n      provider: \"{{ cli }}\"\n\n  - name: Configures the version for the exported packets carrying VXLAN flexible flow statistics.\n    community.network.ce_netstream_export:\n      type: vxlan\n      version: 9\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_netstream_global": {
    "doc": {
      "description": "Manages global parameters of NetStream on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "index_switch": {
          "aliases": [],
          "description": "Specifies the netstream index-switch.",
          "default": "16",
          "required": false,
          "choices": [
            "16",
            "32"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Netstream global interface.",
          "required": true,
          "suboptions": {}
        },
        "sampler_direction": {
          "aliases": [],
          "description": "Specifies the netstream sampler direction.",
          "required": false,
          "choices": [
            "inbound",
            "outbound"
          ],
          "suboptions": {}
        },
        "sampler_interval": {
          "aliases": [],
          "description": "Specifies the netstream sampler interval, length is 1 - 65535.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "statistics_direction": {
          "aliases": [],
          "description": "Specifies the netstream statistic direction.",
          "required": false,
          "choices": [
            "inbound",
            "outbound"
          ],
          "suboptions": {}
        },
        "statistics_record": {
          "aliases": [],
          "description": "Specifies the flexible netstream statistic record, length is 1 - 32.",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Specifies the type of netstream global.",
          "default": "ip",
          "required": false,
          "choices": [
            "ip",
            "vxlan"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages global parameters of NetStream on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Netstream global module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Configure a netstream sampler at interface 10ge1/0/2, direction is outbound,interval is 30.\n    community.network.ce_netstream_global:\n      interface: 10ge1/0/2\n      type: ip\n      sampler_interval: 30\n      sampler_direction: outbound\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Configure a netstream flexible statistic at interface 10ge1/0/2, record is test1, type is ip.\n    community.network.ce_netstream_global:\n      type: ip\n      interface: 10ge1/0/2\n      statistics_record: test1\n      provider: \"{{ cli }}\"\n  - name: Set the vxlan index-switch to 32.\n    community.network.ce_netstream_global:\n      type: vxlan\n      interface: all\n      index_switch: 32\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_netstream_template": {
    "doc": {
      "description": "Manages NetStream template configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "collect_counter": {
          "aliases": [],
          "description": "Configure the number of packets and bytes that are included in the flexible flow statistics sent to NSC.",
          "required": false,
          "choices": [
            "bytes",
            "packets"
          ],
          "suboptions": {}
        },
        "collect_interface": {
          "aliases": [],
          "description": "Configure the input or output interface that are included in the flexible flow statistics sent to NSC.",
          "required": false,
          "choices": [
            "input",
            "output"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Configure the description of netstream record. The value is a string of 1 to 80 case-insensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Configure flexible flow statistics template keywords.",
          "required": false,
          "choices": [
            "destination-address",
            "destination-port",
            "tos",
            "protocol",
            "source-address",
            "source-port"
          ],
          "suboptions": {}
        },
        "record_name": {
          "aliases": [],
          "description": "Configure the name of netstream record. The value is a string of 1 to 32 case-insensitive characters.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Configure the type of netstream record.",
          "required": true,
          "choices": [
            "ip",
            "vxlan"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages NetStream template configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Netstream template module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Config ipv4 netstream record\n    community.network.ce_netstream_template:\n      state: present\n      type: ip\n      record_name: test\n      provider: \"{{ cli }}\"\n  - name: Undo ipv4 netstream record\n    community.network.ce_netstream_template:\n      state: absent\n      type: ip\n      record_name: test\n      provider: \"{{ cli }}\"\n  - name: Config ipv4 netstream record collect_counter\n    community.network.ce_netstream_template:\n      state: present\n      type: ip\n      record_name: test\n      collect_counter: bytes\n      provider: \"{{ cli }}\"\n  - name: Undo ipv4 netstream record collect_counter\n    community.network.ce_netstream_template:\n      state: absent\n      type: ip\n      record_name: test\n      collect_counter: bytes\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_ntp": {
    "doc": {
      "description": "Manages core NTP configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "is_preferred": {
          "aliases": [],
          "description": "Makes given NTP server or peer the preferred NTP server or peer for the device.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "key_id": {
          "aliases": [],
          "description": "Authentication key identifier to use with given NTP server or peer.",
          "required": false,
          "suboptions": {}
        },
        "peer": {
          "aliases": [],
          "description": "Network address of NTP peer.",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Network address of NTP server.",
          "required": false,
          "suboptions": {}
        },
        "source_int": {
          "aliases": [],
          "description": "Local source interface from which NTP messages are sent. Must be fully qualified interface name, i.e. C(40GE1/0/22), C(vlanif10). Interface types, such as C(10GE), C(40GE), C(100GE), C(Eth-Trunk), C(LoopBack), C(MEth), C(NULL), C(Tunnel), C(Vlanif).",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpn_name": {
          "aliases": [],
          "description": "Makes the device communicate with the given NTP server or peer over a specific vpn.",
          "default": "_public_",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages core NTP configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: NTP test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Set NTP Server with parameters\"\n    community.network.ce_ntp:\n      server: 192.8.2.6\n      vpn_name: js\n      source_int: vlanif4001\n      is_preferred: enable\n      key_id: 32\n      provider: \"{{ cli }}\"\n\n  - name: \"Set NTP Peer with parameters\"\n    community.network.ce_ntp:\n      peer: 192.8.2.6\n      vpn_name: js\n      source_int: vlanif4001\n      is_preferred: enable\n      key_id: 32\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_ntp_auth": {
    "doc": {
      "description": "Manages NTP authentication configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "If C(state=absent), the module will attempt to remove the given key configuration. If a matching key configuration isn't found on the device, the module will fail.\nIf C(state=absent) and C(authentication=on), authentication will be turned on.\nIf C(state=absent) and C(authentication=off), authentication will be turned off.\nRecommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "auth_mode": {
          "aliases": [],
          "description": "Specify authentication algorithm.",
          "required": false,
          "choices": [
            "hmac-sha256",
            "md5"
          ],
          "suboptions": {}
        },
        "auth_pwd": {
          "aliases": [],
          "description": "Plain text with length of 1 to 255, encrypted text with length of 20 to 392.",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Whether the given password is in cleartext or has been encrypted. If in cleartext, the device will encrypt it before storing it.",
          "default": "encrypt",
          "required": false,
          "choices": [
            "text",
            "encrypt"
          ],
          "suboptions": {}
        },
        "authentication": {
          "aliases": [],
          "description": "Configure ntp authentication enable or unconfigure ntp authentication enable.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "key_id": {
          "aliases": [],
          "description": "Authentication key identifier (numeric).",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "trusted_key": {
          "aliases": [],
          "description": "Whether the given key is required to be supplied by a time source for the device to synchronize to the time source.",
          "default": "disable",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages NTP authentication configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: NTP AUTH test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Configure ntp authentication key-id\"\n    community.network.ce_ntp_auth:\n      key_id: 32\n      auth_mode: md5\n      auth_pwd: 11111111111111111111111\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure ntp authentication key-id and trusted authentication keyid\"\n    community.network.ce_ntp_auth:\n      key_id: 32\n      auth_mode: md5\n      auth_pwd: 11111111111111111111111\n      trusted_key: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Configure ntp authentication key-id and authentication enable\"\n    community.network.ce_ntp_auth:\n      key_id: 32\n      auth_mode: md5\n      auth_pwd: 11111111111111111111111\n      authentication: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure ntp authentication key-id and trusted authentication keyid\"\n    community.network.ce_ntp_auth:\n      key_id: 32\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: \"Unconfigure ntp authentication key-id and authentication enable\"\n    community.network.ce_ntp_auth:\n      key_id: 32\n      authentication: enable\n      state: absent\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_ospf": {
    "doc": {
      "description": "Manages configuration of an OSPF instance on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "addr": {
          "aliases": [],
          "description": "Specifies the address of the network segment where the interface resides. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "area": {
          "aliases": [],
          "description": "Specifies the area ID. The area with the area-id being 0 is a backbone area. Valid values are a string, formatted as an IP address (i.e. \"0.0.0.0\") or as an integer between 1 and 4294967295.",
          "required": false,
          "suboptions": {}
        },
        "auth_key_id": {
          "aliases": [],
          "description": "Authentication key id when C(auth_mode) is 'hmac-sha256', 'md5' or 'hmac-md5. Valid value is an integer is in the range from 1 to 255.",
          "required": false,
          "suboptions": {}
        },
        "auth_mode": {
          "aliases": [],
          "description": "Specifies the authentication type.",
          "required": false,
          "choices": [
            "none",
            "hmac-sha256",
            "md5",
            "hmac-md5",
            "simple"
          ],
          "suboptions": {}
        },
        "auth_text_md5": {
          "aliases": [],
          "description": "Specifies a password for MD5, HMAC-MD5, or HMAC-SHA256 authentication. The value is a string of 1 to 255 case-sensitive characters, spaces not supported.",
          "required": false,
          "suboptions": {}
        },
        "auth_text_simple": {
          "aliases": [],
          "description": "Specifies a password for simple authentication. The value is a string of 1 to 8 characters.",
          "required": false,
          "suboptions": {}
        },
        "mask": {
          "aliases": [],
          "description": "IP network wildcard bits in decimal format between 0 and 32.",
          "required": false,
          "suboptions": {}
        },
        "max_load_balance": {
          "aliases": [],
          "description": "The maximum number of paths for forward packets over multiple paths. Valid value is an integer in the range from 1 to 64.",
          "required": false,
          "suboptions": {}
        },
        "nexthop_addr": {
          "aliases": [],
          "description": "IPv4 address for configure next-hop address's weight. Valid values are a string, formatted as an IP address.",
          "required": false,
          "suboptions": {}
        },
        "nexthop_weight": {
          "aliases": [],
          "description": "Indicates the weight of the next hop. The smaller the value is, the higher the preference of the route is. It is an integer that ranges from 1 to 254.",
          "required": false,
          "suboptions": {}
        },
        "process_id": {
          "aliases": [],
          "description": "Specifies a process ID. The value is an integer ranging from 1 to 4294967295.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages configuration of an OSPF instance on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Ospf module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Configure ospf\n    community.network.ce_ospf:\n      process_id: 1\n      area: 100\n      state: present\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_ospf_vrf": {
    "doc": {
      "description": "Manages configuration of an OSPF VPN instance on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "bandwidth": {
          "aliases": [],
          "description": "Specifies the reference bandwidth used to assign ospf cost. Valid values are an integer, in Mbps, 1 - 2147483648, the default value is 100.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Specifies the description information of ospf process.",
          "required": false,
          "suboptions": {}
        },
        "lsaaholdinterval": {
          "aliases": [],
          "description": "Specifies the hold interval of arrive LSA when use the intelligent timer. Valid value is an integer, in millisecond, from 0 to 10000, the default value is 500.",
          "required": false,
          "suboptions": {}
        },
        "lsaainterval": {
          "aliases": [],
          "description": "Specifies the interval of arrive LSA when use the general timer. Valid value is an integer, in millisecond, from 0 to 10000.",
          "required": false,
          "suboptions": {}
        },
        "lsaalflag": {
          "aliases": [],
          "description": "Specifies the mode of timer to calculate interval of arrive LSA. If set the parameter but not specifies value, the default will be used. If true use general timer. If false use intelligent timer.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lsaamaxinterval": {
          "aliases": [],
          "description": "Specifies the max interval of arrive LSA when use the intelligent timer. Valid value is an integer, in millisecond, from 0 to 10000, the default value is 1000.",
          "required": false,
          "suboptions": {}
        },
        "lsaastartinterval": {
          "aliases": [],
          "description": "Specifies the start interval of arrive LSA when use the intelligent timer. Valid value is an integer, in millisecond, from 0 to 10000, the default value is 500.",
          "required": false,
          "suboptions": {}
        },
        "lsaoholdinterval": {
          "aliases": [],
          "description": "Specifies the hold interval of originate LSA . Valid value is an integer, in millisecond, from 0 to 5000, the default value is 1000.",
          "required": false,
          "suboptions": {}
        },
        "lsaointerval": {
          "aliases": [],
          "description": "Specifies the interval of originate LSA . Valid value is an integer, in second, from 0 to 10, the default value is 5.",
          "required": false,
          "suboptions": {}
        },
        "lsaointervalflag": {
          "aliases": [],
          "description": "Specifies whether cancel the interval of LSA originate or not. If set the parameter but noe specifies value, the default will be used. true:cancel the interval of LSA originate, the interval is 0. false:do not cancel the interval of LSA originate.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lsaomaxinterval": {
          "aliases": [],
          "description": "Specifies the max interval of originate LSA . Valid value is an integer, in millisecond, from 1 to 10000, the default value is 5000.",
          "required": false,
          "suboptions": {}
        },
        "lsaostartinterval": {
          "aliases": [],
          "description": "Specifies the start interval of originate LSA . Valid value is an integer, in millisecond, from 0 to 1000, the default value is 500.",
          "required": false,
          "suboptions": {}
        },
        "ospf": {
          "aliases": [],
          "description": "The ID of the ospf process. Valid values are an integer, 1 - 4294967295, the default value is 1.",
          "required": true,
          "suboptions": {}
        },
        "route_id": {
          "aliases": [],
          "description": "Specifies the ospf private route id,. Valid values are a string, formatted as an IP address (i.e. \"10.1.1.1\") the length is 0 - 20.",
          "required": false,
          "suboptions": {}
        },
        "spfholdinterval": {
          "aliases": [],
          "description": "Specifies the hold interval to calculate SPF when use intelligent timer. Valid value is an integer, in millisecond, from 1 to 5000, the default value is 200.",
          "required": false,
          "suboptions": {}
        },
        "spfinterval": {
          "aliases": [],
          "description": "Specifies the interval to calculate SPF when use second level  timer. Valid value is an integer, in second, from 1 to 10.",
          "required": false,
          "suboptions": {}
        },
        "spfintervalmi": {
          "aliases": [],
          "description": "Specifies the interval to calculate SPF when use millisecond level  timer. Valid value is an integer, in millisecond, from 1 to 10000.",
          "required": false,
          "suboptions": {}
        },
        "spfintervaltype": {
          "aliases": [],
          "description": "Specifies the mode of timer which used to calculate SPF. If set the parameter but noe specifies value, the default will be used. If is intelligent-timer, then use intelligent timer. If is timer, then use second level timer. If is millisecond, then use millisecond level timer.",
          "default": "intelligent-timer",
          "required": false,
          "choices": [
            "intelligent-timer",
            "timer",
            "millisecond"
          ],
          "suboptions": {}
        },
        "spfmaxinterval": {
          "aliases": [],
          "description": "Specifies the max interval to calculate SPF when use intelligent timer. Valid value is an integer, in millisecond, from 1 to 20000, the default value is 5000.",
          "required": false,
          "suboptions": {}
        },
        "spfstartinterval": {
          "aliases": [],
          "description": "Specifies the start interval to calculate SPF when use intelligent timer. Valid value is an integer, in millisecond, from 1 to 1000, the default value is 50.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Specifies the vpn instance which use ospf,length is 1 - 31. Valid values are a string.",
          "default": "_public_",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages configuration of an OSPF VPN instance on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Ospf vrf module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Configure ospf route id\n    community.network.ce_ospf_vrf:\n      ospf: 2\n      route_id: 2.2.2.2\n      lsaointervalflag: False\n      lsaointerval: 2\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_reboot": {
    "doc": {
      "description": "Reboot a HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "confirm": {
          "aliases": [],
          "description": "Safeguard boolean. Set to true if you're sure you want to reboot.",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "Flag indicating whether to save the configuration.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ncclient"
      ],
      "short_description": "Reboot a HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Reboot module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Reboot the device\n    community.network.ce_reboot:\n      confirm: true\n      save_config: true\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_rollback": {
    "doc": {
      "description": "This module offers the ability to set a configuration checkpoint file or rollback to a configuration checkpoint file on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "action": {
          "aliases": [],
          "description": "The operation of configuration rollback.",
          "required": true,
          "choices": [
            "rollback",
            "clear",
            "set",
            "display",
            "commit"
          ],
          "suboptions": {}
        },
        "commit_id": {
          "aliases": [],
          "description": "Specifies the label of the configuration rollback point to which system configurations are expected to roll back. The value is an integer that the system generates automatically.",
          "required": false,
          "suboptions": {}
        },
        "filename": {
          "aliases": [],
          "description": "Specifies a configuration file for configuration rollback. The value is a string of 5 to 64 case-sensitive characters in the format of *.zip, *.cfg, or *.dat, spaces not supported.",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Specifies a user label for a configuration rollback point. The value is a string of 1 to 256 case-sensitive ASCII characters, spaces not supported. The value must start with a letter and cannot be presented in a single hyphen (-).",
          "required": false,
          "suboptions": {}
        },
        "last": {
          "aliases": [],
          "description": "Specifies the number of configuration rollback points. The value is an integer that ranges from 1 to 80.",
          "required": false,
          "suboptions": {}
        },
        "oldest": {
          "aliases": [],
          "description": "Specifies the number of configuration rollback points. The value is an integer that ranges from 1 to 80.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Set a checkpoint or rollback to a checkpoint on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Rollback module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n- name: Ensure commit_id is exist, and specifies the label of the configuration rollback point to\n        which system configurations are expected to roll back.\n  community.network.ce_rollback:\n    commit_id: 1000000748\n    action: rollback\n    provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_sflow": {
    "doc": {
      "description": "Configure Sampled Flow (sFlow) to monitor traffic on an interface in real time, detect abnormal traffic, and locate the source of attack traffic, ensuring stable running of the network.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "agent_ip": {
          "aliases": [],
          "description": "Specifies the IPv4/IPv6 address of an sFlow agent.",
          "required": false,
          "suboptions": {}
        },
        "collector_datagram_size": {
          "aliases": [],
          "description": "Specifies the maximum length of sFlow packets sent from an sFlow agent to an sFlow collector. The value is an integer, in bytes. It ranges from 1024 to 8100. The default value is 1400.",
          "required": false,
          "suboptions": {}
        },
        "collector_description": {
          "aliases": [],
          "description": "Specifies the description of an sFlow collector. The value is a string of 1 to 255 case-sensitive characters without spaces.",
          "required": false,
          "suboptions": {}
        },
        "collector_id": {
          "aliases": [],
          "description": "Specifies the ID of an sFlow collector. This ID is used when you specify the collector in subsequent sFlow configuration.",
          "required": false,
          "choices": [
            "1",
            "2"
          ],
          "suboptions": {}
        },
        "collector_ip": {
          "aliases": [],
          "description": "Specifies the IPv4/IPv6 address of the sFlow collector.",
          "required": false,
          "suboptions": {}
        },
        "collector_ip_vpn": {
          "aliases": [],
          "description": "Specifies the name of a VPN instance. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value C(_public_) is reserved and cannot be used as the VPN instance name.",
          "required": false,
          "suboptions": {}
        },
        "collector_meth": {
          "aliases": [],
          "description": "Configures the device to send sFlow packets through service interfaces, enhancing the sFlow packet forwarding capability. The enhanced parameter is optional. No matter whether you configure the enhanced mode, the switch determines to send sFlow packets through service cards or management port based on the routing information on the collector. When the value is meth, the device forwards sFlow packets at the control plane. When the value is enhanced, the device forwards sFlow packets at the forwarding plane to enhance the sFlow packet forwarding capacity.",
          "required": false,
          "choices": [
            "meth",
            "enhanced"
          ],
          "suboptions": {}
        },
        "collector_udp_port": {
          "aliases": [],
          "description": "Specifies the UDP destination port number of sFlow packets. The value is an integer that ranges from 1 to 65535. The default value is 6343.",
          "required": false,
          "suboptions": {}
        },
        "counter_collector": {
          "aliases": [],
          "description": "Indicates the ID list of the counter collector.",
          "required": false,
          "suboptions": {}
        },
        "counter_interval": {
          "aliases": [],
          "description": "Indicates the counter sampling interval. The value is an integer that ranges from 10 to 4294967295, in seconds. The default value is 20.",
          "required": false,
          "suboptions": {}
        },
        "export_route": {
          "aliases": [],
          "description": "Configures the sFlow packets sent by the switch not to carry routing information.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "sample_collector": {
          "aliases": [],
          "description": "Indicates the ID list of the collector.",
          "required": false,
          "suboptions": {}
        },
        "sample_direction": {
          "aliases": [],
          "description": "Enables flow sampling in the inbound or outbound direction.",
          "required": false,
          "choices": [
            "inbound",
            "outbound",
            "both"
          ],
          "suboptions": {}
        },
        "sample_length": {
          "aliases": [],
          "description": "Specifies the maximum length of sampled packets. The value is an integer and ranges from 18 to 512, in bytes. The default value is 128.",
          "required": false,
          "suboptions": {}
        },
        "sample_rate": {
          "aliases": [],
          "description": "Specifies the flow sampling rate in the format 1/rate. The value is an integer and ranges from 1 to 4294967295. The default value is 8192.",
          "required": false,
          "suboptions": {}
        },
        "sflow_interface": {
          "aliases": [],
          "description": "Full name of interface for Flow Sampling or Counter. It must be a physical interface, Eth-Trunk, or Layer 2 subinterface.",
          "required": false,
          "suboptions": {}
        },
        "source_ip": {
          "aliases": [],
          "description": "Specifies the source IPv4/IPv6 address of sFlow packets.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages sFlow configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n---\n\n- name: Sflow module test\n  hosts: ce128\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Configuring sFlow Agent\n    community.network.ce_sflow:\n      agent_ip: 6.6.6.6\n      provider: '{{ cli }}'\n\n  - name: Configuring sFlow Collector\n    community.network.ce_sflow:\n      collector_id: 1\n      collector_ip: 7.7.7.7\n      collector_ip_vpn: vpn1\n      collector_description: Collector1\n      provider: '{{ cli }}'\n\n  - name: Configure flow sampling.\n    community.network.ce_sflow:\n      sflow_interface: 10GE2/0/2\n      sample_collector: 1\n      sample_direction: inbound\n      provider: '{{ cli }}'\n\n  - name: Configure counter sampling.\n    community.network.ce_sflow:\n      sflow_interface: 10GE2/0/2\n      counter_collector: 1\n      counter_interval: 1000\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_snmp_community": {
    "doc": {
      "description": "Manages SNMP community configuration on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "access_right": {
          "aliases": [],
          "description": "Access right read or write.",
          "required": false,
          "choices": [
            "read",
            "write"
          ],
          "suboptions": {}
        },
        "acl_number": {
          "aliases": [],
          "description": "Access control list number.",
          "required": false,
          "suboptions": {}
        },
        "community_mib_view": {
          "aliases": [],
          "description": "Mib view name.",
          "required": false,
          "suboptions": {}
        },
        "community_name": {
          "aliases": [],
          "description": "Unique name to identify the community.",
          "required": false,
          "suboptions": {}
        },
        "group_name": {
          "aliases": [],
          "description": "Unique name to identify the SNMPv3 group.",
          "required": false,
          "suboptions": {}
        },
        "notify_view": {
          "aliases": [],
          "description": "Mib view name for notification.",
          "required": false,
          "suboptions": {}
        },
        "read_view": {
          "aliases": [],
          "description": "Mib view name for read.",
          "required": false,
          "suboptions": {}
        },
        "security_level": {
          "aliases": [],
          "description": "Security level indicating whether to use authentication and encryption.",
          "required": false,
          "choices": [
            "noAuthNoPriv",
            "authentication",
            "privacy"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "write_view": {
          "aliases": [],
          "description": "Mib view name for write.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages SNMP community configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine snmp community test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config SNMP community\"\n    community.network.ce_snmp_community:\n      state: present\n      community_name: Wdz123456789\n      access_right: write\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo SNMP community\"\n    community.network.ce_snmp_community:\n      state: absent\n      community_name: Wdz123456789\n      access_right: write\n      provider: \"{{ cli }}\"\n\n  - name: \"Config SNMP group\"\n    community.network.ce_snmp_community:\n      state: present\n      group_name: wdz_group\n      security_level: noAuthNoPriv\n      acl_number: 2000\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo SNMP group\"\n    community.network.ce_snmp_community:\n      state: absent\n      group_name: wdz_group\n      security_level: noAuthNoPriv\n      acl_number: 2000\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_snmp_contact": {
    "doc": {
      "description": "Manages SNMP contact configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "contact": {
          "aliases": [],
          "description": "Contact information.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages SNMP contact configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine snmp contact test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config SNMP contact\"\n    community.network.ce_snmp_contact:\n      state: present\n      contact: call Operator at 010-99999999\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo SNMP contact\"\n    community.network.ce_snmp_contact:\n      state: absent\n      contact: call Operator at 010-99999999\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_snmp_location": {
    "doc": {
      "description": "Manages SNMP location configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "location": {
          "aliases": [],
          "description": "Location information.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages SNMP location configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine snmp location test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config SNMP location\"\n    community.network.ce_snmp_location:\n      state: present\n      location: nanjing China\n      provider: \"{{ cli }}\"\n\n  - name: \"Remove SNMP location\"\n    community.network.ce_snmp_location:\n      state: absent\n      location: nanjing China\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_snmp_target_host": {
    "doc": {
      "description": "Manages SNMP target host configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "address": {
          "aliases": [],
          "description": "Network Address.",
          "required": false,
          "suboptions": {}
        },
        "connect_port": {
          "aliases": [],
          "description": "Udp port used by SNMP agent to connect the Network management.",
          "required": false,
          "suboptions": {}
        },
        "host_name": {
          "aliases": [],
          "description": "Unique name to identify target host entry.",
          "required": false,
          "suboptions": {}
        },
        "interface_name": {
          "aliases": [],
          "description": "Name of the interface to send the trap message.",
          "required": false,
          "suboptions": {}
        },
        "is_public_net": {
          "aliases": [],
          "description": "To enable or disable Public Net-manager for target Host.",
          "default": "no_use",
          "required": false,
          "choices": [
            "no_use",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "notify_type": {
          "aliases": [],
          "description": "To configure notify type as trap or inform.",
          "required": false,
          "choices": [
            "trap",
            "inform"
          ],
          "suboptions": {}
        },
        "recv_port": {
          "aliases": [],
          "description": "UDP Port number used by network management to receive alarm messages.",
          "required": false,
          "suboptions": {}
        },
        "security_level": {
          "aliases": [],
          "description": "Security level indicating whether to use authentication and encryption.",
          "required": false,
          "choices": [
            "noAuthNoPriv",
            "authentication",
            "privacy"
          ],
          "suboptions": {}
        },
        "security_model": {
          "aliases": [],
          "description": "Security Model.",
          "required": false,
          "choices": [
            "v1",
            "v2c",
            "v3"
          ],
          "suboptions": {}
        },
        "security_name": {
          "aliases": [],
          "description": "Security Name.",
          "required": false,
          "suboptions": {}
        },
        "security_name_v3": {
          "aliases": [],
          "description": "Security Name V3.",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Version(s) Supported by SNMP Engine.",
          "required": false,
          "choices": [
            "none",
            "v1",
            "v2c",
            "v3",
            "v1v2c",
            "v1v3",
            "v2cv3",
            "all"
          ],
          "suboptions": {}
        },
        "vpn_name": {
          "aliases": [],
          "description": "VPN instance Name.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages SNMP target host configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine snmp target host test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config SNMP version\"\n    community.network.ce_snmp_target_host:\n      state: present\n      version: v2cv3\n      provider: \"{{ cli }}\"\n\n  - name: \"Config SNMP target host\"\n    community.network.ce_snmp_target_host:\n      state: present\n      host_name: test1\n      address: 1.1.1.1\n      notify_type: trap\n      vpn_name: js\n      security_model: v2c\n      security_name: wdz\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_snmp_traps": {
    "doc": {
      "description": "Manages SNMP traps configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "feature_name": {
          "aliases": [],
          "description": "Alarm feature name.",
          "required": false,
          "choices": [
            "aaa",
            "arp",
            "bfd",
            "bgp",
            "cfg",
            "configuration",
            "dad",
            "devm",
            "dhcpsnp",
            "dldp",
            "driver",
            "efm",
            "erps",
            "error-down",
            "fcoe",
            "fei",
            "fei_comm",
            "fm",
            "ifnet",
            "info",
            "ipsg",
            "ipv6",
            "isis",
            "l3vpn",
            "lacp",
            "lcs",
            "ldm",
            "ldp",
            "ldt",
            "lldp",
            "mpls_lspm",
            "msdp",
            "mstp",
            "nd",
            "netconf",
            "nqa",
            "nvo3",
            "openflow",
            "ospf",
            "ospfv3",
            "pim",
            "pim-std",
            "qos",
            "radius",
            "rm",
            "rmon",
            "securitytrap",
            "smlktrap",
            "snmp",
            "ssh",
            "stackmng",
            "sysclock",
            "sysom",
            "system",
            "tcp",
            "telnet",
            "trill",
            "trunk",
            "tty",
            "vbst",
            "vfs",
            "virtual-perception",
            "vrrp",
            "vstm",
            "all"
          ],
          "suboptions": {}
        },
        "interface_number": {
          "aliases": [],
          "description": "Interface number.",
          "required": false,
          "suboptions": {}
        },
        "interface_type": {
          "aliases": [],
          "description": "Interface type.",
          "required": false,
          "choices": [
            "Ethernet",
            "Eth-Trunk",
            "Tunnel",
            "NULL",
            "LoopBack",
            "Vlanif",
            "100GE",
            "40GE",
            "MTunnel",
            "10GE",
            "GE",
            "MEth",
            "Vbdif",
            "Nve"
          ],
          "suboptions": {}
        },
        "port_number": {
          "aliases": [],
          "description": "Source port number.",
          "required": false,
          "suboptions": {}
        },
        "trap_name": {
          "aliases": [],
          "description": "Alarm trap name.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages SNMP traps configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine snmp traps test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config SNMP trap all enable\"\n    community.network.ce_snmp_traps:\n      state: present\n      feature_name: all\n      provider: \"{{ cli }}\"\n\n  - name: \"Config SNMP trap interface\"\n    community.network.ce_snmp_traps:\n      state: present\n      interface_type: 40GE\n      interface_number: 2/0/1\n      provider: \"{{ cli }}\"\n\n  - name: \"Config SNMP trap port\"\n    community.network.ce_snmp_traps:\n      state: present\n      port_number: 2222\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_snmp_user": {
    "doc": {
      "description": "Manages SNMP user configurations on CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "aaa_local_user": {
          "aliases": [],
          "description": "Unique name to identify the local user.",
          "required": false,
          "suboptions": {}
        },
        "acl_number": {
          "aliases": [],
          "description": "Access control list number.",
          "required": false,
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "The authentication password. Password length, 8-255 characters.",
          "required": false,
          "suboptions": {}
        },
        "auth_protocol": {
          "aliases": [],
          "description": "Authentication protocol.",
          "required": false,
          "choices": [
            "noAuth",
            "md5",
            "sha"
          ],
          "suboptions": {}
        },
        "priv_key": {
          "aliases": [],
          "description": "The encryption password. Password length 8-255 characters.",
          "required": false,
          "suboptions": {}
        },
        "priv_protocol": {
          "aliases": [],
          "description": "Encryption protocol.",
          "required": false,
          "choices": [
            "noPriv",
            "des56",
            "3des168",
            "aes128",
            "aes192",
            "aes256"
          ],
          "suboptions": {}
        },
        "remote_engine_id": {
          "aliases": [],
          "description": "Remote engine id of the USM user.",
          "required": false,
          "suboptions": {}
        },
        "user_group": {
          "aliases": [],
          "description": "Name of the group where user belongs to.",
          "required": false,
          "suboptions": {}
        },
        "usm_user_name": {
          "aliases": [],
          "description": "Unique name to identify the USM user.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages SNMP user configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine snmp user test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config SNMP usm user\"\n    community.network.ce_snmp_user:\n      state: present\n      usm_user_name: wdz_snmp\n      remote_engine_id: 800007DB03389222111200\n      acl_number: 2000\n      user_group: wdz_group\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo SNMP usm user\"\n    community.network.ce_snmp_user:\n      state: absent\n      usm_user_name: wdz_snmp\n      remote_engine_id: 800007DB03389222111200\n      acl_number: 2000\n      user_group: wdz_group\n      provider: \"{{ cli }}\"\n\n  - name: \"Config SNMP local user\"\n    community.network.ce_snmp_user:\n      state: present\n      aaa_local_user: wdz_user\n      auth_protocol: md5\n      auth_key: huawei123\n      priv_protocol: des56\n      priv_key: huawei123\n      provider: \"{{ cli }}\"\n\n  - name: \"Config SNMP local user\"\n    community.network.ce_snmp_user:\n      state: absent\n      aaa_local_user: wdz_user\n      auth_protocol: md5\n      auth_key: huawei123\n      priv_protocol: des56\n      priv_key: huawei123\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_startup": {
    "doc": {
      "description": "Manages a system startup information on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "action": {
          "aliases": [],
          "description": "Display the startup information.",
          "required": false,
          "choices": [
            "display"
          ],
          "suboptions": {}
        },
        "cfg_file": {
          "aliases": [],
          "description": "Name of the configuration file that is applied for the next startup. The value is a string of 5 to 255 characters.",
          "default": "present",
          "required": false,
          "suboptions": {}
        },
        "patch_file": {
          "aliases": [],
          "description": "Name of the patch file that is applied for the next startup.",
          "required": false,
          "suboptions": {}
        },
        "slot": {
          "aliases": [],
          "description": "Position of the device.The value is a string of 1 to 32 characters. The possible value of slot is all, slave-board, or the specific slotID.",
          "required": false,
          "suboptions": {}
        },
        "software_file": {
          "aliases": [],
          "description": "File name of the system software that is applied for the next startup. The value is a string of 5 to 255 characters.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages a system startup information on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Startup module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Display startup information\n    community.network.ce_startup:\n      action: display\n      provider: \"{{ cli }}\"\n\n  - name: Set startup patch file\n    community.network.ce_startup:\n      patch_file: 2.PAT\n      slot: all\n      provider: \"{{ cli }}\"\n\n  - name: Set startup software file\n    community.network.ce_startup:\n      software_file: aa.cc\n      slot: 1\n      provider: \"{{ cli }}\"\n\n  - name: Set startup cfg file\n    community.network.ce_startup:\n      cfg_file: 2.cfg\n      slot: 1\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_static_route": {
    "doc": {
      "description": "Manages the static routes on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "If no vrf is supplied, vrf is set to default.\nIf I(state=absent), the route will be removed, regardless of the non-required parameters.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "aftype": {
          "aliases": [],
          "description": "Destination ip address family type of static route.",
          "required": true,
          "choices": [
            "v4",
            "v6"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Name of the route. Used with the name parameter on the CLI.",
          "required": false,
          "suboptions": {}
        },
        "destvrf": {
          "aliases": [],
          "description": "VPN instance of next hop ip address.",
          "required": false,
          "suboptions": {}
        },
        "mask": {
          "aliases": [],
          "description": "Destination ip mask of static route.",
          "required": true,
          "suboptions": {}
        },
        "next_hop": {
          "aliases": [],
          "description": "Next hop address of static route.",
          "required": false,
          "suboptions": {}
        },
        "nhp_interface": {
          "aliases": [],
          "description": "Next hop interface full name of static route.",
          "required": false,
          "suboptions": {}
        },
        "pref": {
          "aliases": [],
          "description": "Preference or administrative difference of route (range 1-255).",
          "required": false,
          "suboptions": {}
        },
        "prefix": {
          "aliases": [],
          "description": "Destination ip address of static route.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Route tag value (numeric).",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "VPN instance of destination ip address.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages static route configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Static route module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Config a ipv4 static route, next hop is an address and that it has the proper description\n    community.network.ce_static_route:\n      prefix: 2.1.1.2\n      mask: 24\n      next_hop: 3.1.1.2\n      description: 'Configured by Ansible'\n      aftype: v4\n      provider: \"{{ cli }}\"\n  - name: Config a ipv4 static route ,next hop is an interface and that it has the proper description\n    community.network.ce_static_route:\n      prefix: 2.1.1.2\n      mask: 24\n      next_hop: 10GE1/0/1\n      description: 'Configured by Ansible'\n      aftype: v4\n      provider: \"{{ cli }}\"\n  - name: Config a ipv6 static route, next hop is an address and that it has the proper description\n    community.network.ce_static_route:\n      prefix: fc00:0:0:2001::1\n      mask: 64\n      next_hop: fc00:0:0:2004::1\n      description: 'Configured by Ansible'\n      aftype: v6\n      provider: \"{{ cli }}\"\n  - name: Config a ipv4 static route, next hop is an interface and that it has the proper description\n    community.network.ce_static_route:\n      prefix: fc00:0:0:2001::1\n      mask: 64\n      next_hop: 10GE1/0/1\n      description: 'Configured by Ansible'\n      aftype: v6\n      provider: \"{{ cli }}\"\n  - name: Config a VRF and set ipv4 static route, next hop is an address and that it has the proper description\n    community.network.ce_static_route:\n      vrf: vpna\n      prefix: 2.1.1.2\n      mask: 24\n      next_hop: 3.1.1.2\n      description: 'Configured by Ansible'\n      aftype: v4\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_static_route_bfd": {
    "doc": {
      "description": "Manages the static routes on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.\nIf no vrf is supplied, vrf is set to default.\nIf I(state=absent), the route configuration will be removed, regardless of the non-required parameters.",
      "options": {
        "aftype": {
          "aliases": [],
          "description": "Destination ip address family type of static route.",
          "type": "str",
          "required": true,
          "choices": [
            "v4",
            "v6"
          ],
          "suboptions": {}
        },
        "bfd_session_name": {
          "aliases": [],
          "description": "bfd name (range 1-15).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "commands": {
          "aliases": [],
          "description": "Incoming command line is used to send sys,undo ip route-static default-bfd,commit.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Name of the route. Used with the name parameter on the CLI.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destvrf": {
          "aliases": [],
          "description": "VPN instance of next hop ip address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "detect_multiplier": {
          "aliases": [],
          "description": "Configure the BFD multiplier (range 3-50).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "function_flag": {
          "aliases": [],
          "description": "Used to distinguish between command line functions.",
          "type": "str",
          "required": true,
          "choices": [
            "globalBFD",
            "singleBFD",
            "dynamicBFD",
            "staticBFD"
          ],
          "suboptions": {}
        },
        "mask": {
          "aliases": [],
          "description": "Destination ip mask of static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "min_rx_interval": {
          "aliases": [],
          "description": "Set the minimum BFD receive interval (range 50-1000).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "min_tx_interval": {
          "aliases": [],
          "description": "Set the minimum BFD session sending interval (range 50-1000).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "next_hop": {
          "aliases": [],
          "description": "Next hop address of static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nhp_interface": {
          "aliases": [],
          "description": "Next hop interface full name of static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pref": {
          "aliases": [],
          "description": "Preference or administrative difference of route (range 1-255).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "prefix": {
          "aliases": [],
          "description": "Destination ip address of static route.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Route tag value (numeric).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "VPN instance of destination ip address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages static route configuration on HUAWEI CloudEngine switches.",
      "version_added": "0.2.0"
    },
    "examples": "\n  #ip route-static bfd interface-type interface-number nexthop-address [ local-address address ]\n  #[ min-rx-interval min-rx-interval | min-tx-interval min-tx-interval | detect-multiplier multiplier ]\n  - name: Config an ip route-static bfd 10GE1/0/1 3.3.3.3 min-rx-interval 50 min-tx-interval 50 detect-multiplier 5\n    community.network.ce_static_route_bfd:\n      function_flag: 'singleBFD'\n      nhp_interface: 10GE1/0/1\n      next_hop: 3.3.3.3\n      min_tx_interval: 50\n      min_rx_interval: 50\n      detect_multiplier: 5\n      aftype: v4\n      state: present\n\n  #undo ip route-static bfd [ interface-type interface-number | vpn-instance vpn-instance-name ] nexthop-address\n  - name: Undo ip route-static bfd 10GE1/0/1 3.3.3.4\n    community.network.ce_static_route_bfd:\n      function_flag: 'singleBFD'\n      nhp_interface: 10GE1/0/1\n      next_hop: 3.3.3.4\n      aftype: v4\n      state: absent\n\n  #ip route-static default-bfd { min-rx-interval {min-rx-interval} | min-tx-interval {min-tx-interval} | detect-multiplier {multiplier}}\n  - name: Config an ip route-static default-bfd min-rx-interval 50 min-tx-interval 50 detect-multiplier 6\n    community.network.ce_static_route_bfd:\n      function_flag: 'globalBFD'\n      min_tx_interval: 50\n      min_rx_interval: 50\n      detect_multiplier: 6\n      aftype: v4\n      state: present\n\n  - name: Undo ip route-static default-bfd\n    community.network.ce_static_route_bfd:\n      function_flag: 'globalBFD'\n      aftype: v4\n      state: absent\n      commands: 'sys,undo ip route-static default-bfd,commit'\n\n  - name: Config an ipv4 static route 2.2.2.0/24 2.2.2.1 preference 1 tag 2 description test for staticBFD\n    community.network.ce_static_route_bfd:\n      function_flag: 'staticBFD'\n      prefix: 2.2.2.2\n      mask: 24\n      next_hop: 2.2.2.1\n      tag: 2\n      description: test\n      pref: 1\n      aftype: v4\n      bfd_session_name: btoa\n      state: present\n"
  },
  "community.network.ce_stp": {
    "doc": {
      "description": "Manages STP configurations on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "bpdu_filter": {
          "aliases": [],
          "description": "Specify a port as a BPDU filter port.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "bpdu_protection": {
          "aliases": [],
          "description": "Configure BPDU protection on an edge port. This function prevents network flapping caused by attack packets.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "cost": {
          "aliases": [],
          "description": "Set the path cost of the current port. The default instance is 0.",
          "required": false,
          "suboptions": {}
        },
        "edged_port": {
          "aliases": [],
          "description": "Set the current port as an edge port.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Interface name. If the value is C(all), will apply configuration to all interfaces. if the value is a special name, only support input the full name.",
          "required": false,
          "suboptions": {}
        },
        "loop_protection": {
          "aliases": [],
          "description": "Enable loop protection on the current port.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "root_protection": {
          "aliases": [],
          "description": "Enable root protection on the current port.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "stp_converge": {
          "aliases": [],
          "description": "STP convergence mode. Fast means set STP aging mode to Fast. Normal means set STP aging mode to Normal.",
          "required": false,
          "choices": [
            "fast",
            "normal"
          ],
          "suboptions": {}
        },
        "stp_enable": {
          "aliases": [],
          "description": "Enable or disable STP on a switch.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "stp_mode": {
          "aliases": [],
          "description": "Set an operation mode for the current MSTP process. The mode can be STP, RSTP, or MSTP.",
          "required": false,
          "choices": [
            "stp",
            "rstp",
            "mstp"
          ],
          "suboptions": {}
        },
        "tc_protection": {
          "aliases": [],
          "description": "Configure the TC BPDU protection function for an MSTP process.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "tc_protection_interval": {
          "aliases": [],
          "description": "Set the time the MSTP device takes to handle the maximum number of TC BPDUs and immediately refresh forwarding entries. The value is an integer ranging from 1 to 600, in seconds.",
          "required": false,
          "suboptions": {}
        },
        "tc_protection_threshold": {
          "aliases": [],
          "description": "Set the maximum number of TC BPDUs that the MSTP can handle. The value is an integer ranging from 1 to 255. The default value is 1 on the switch.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages STP configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n\n- name: CloudEngine stp test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Config stp mode\"\n    community.network.ce_stp:\n      state: present\n      stp_mode: stp\n      provider: \"{{ cli }}\"\n\n  - name: \"Undo stp mode\"\n    community.network.ce_stp:\n      state: absent\n      stp_mode: stp\n      provider: \"{{ cli }}\"\n\n  - name: \"Enable bpdu protection\"\n    community.network.ce_stp:\n      state: present\n      bpdu_protection: enable\n      provider: \"{{ cli }}\"\n\n  - name: \"Disable bpdu protection\"\n    community.network.ce_stp:\n      state: present\n      bpdu_protection: disable\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_switchport": {
    "doc": {
      "description": "Manages Layer 2 switchport interfaces on HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "When C(state=absent), VLANs can be added/removed from trunk links and the existing access VLAN can be 'unconfigured' to just having VLAN 1 on that interface.\nWhen working with trunks VLANs the keywords add/remove are always sent in the C(port trunk allow-pass vlan) command. Use verbose mode to see commands sent.\nWhen C(state=unconfigured), the interface will result with having a default Layer 2 interface, i.e. vlan 1 in access mode.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "default_vlan": {
          "aliases": [],
          "description": "If C(mode=access, or mode=dot1qtunnel), used as the access VLAN ID, in the range from 1 to 4094.",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Full name of the interface, i.e. 40GE1/0/22.",
          "required": true,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The link type of an interface.",
          "required": false,
          "choices": [
            "access",
            "trunk",
            "hybrid",
            "dot1qtunnel"
          ],
          "suboptions": {}
        },
        "pvid_vlan": {
          "aliases": [],
          "description": "If C(mode=trunk, or mode=hybrid), used as the trunk native VLAN ID, in the range from 1 to 4094.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "unconfigured"
          ],
          "suboptions": {}
        },
        "tagged_vlans": {
          "aliases": [],
          "description": "If C(mode=hybrid), used as the VLAN range to ADD or REMOVE from the trunk, such as 2-10 or 2,5,10-15, etc.",
          "required": false,
          "suboptions": {}
        },
        "trunk_vlans": {
          "aliases": [],
          "description": "If C(mode=trunk), used as the VLAN range to ADD or REMOVE from the trunk, such as 2-10 or 2,5,10-15, etc.",
          "required": false,
          "suboptions": {}
        },
        "untagged_vlans": {
          "aliases": [],
          "description": "If C(mode=hybrid), used as the VLAN range to ADD or REMOVE from the trunk, such as 2-10 or 2,5,10-15, etc.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Layer 2 switchport interfaces on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Switchport module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n  - name: Ensure 10GE1/0/22 is in its default switchport state\n    community.network.ce_switchport:\n      interface: 10GE1/0/22\n      state: unconfigured\n      provider: '{{ cli }}'\n\n  - name: Ensure 10GE1/0/22 is configured for access vlan 20\n    community.network.ce_switchport:\n      interface: 10GE1/0/22\n      mode: access\n      default_vlan: 20\n      provider: '{{ cli }}'\n\n  - name: Ensure 10GE1/0/22 only has vlans 5-10 as trunk vlans\n    community.network.ce_switchport:\n      interface: 10GE1/0/22\n      mode: trunk\n      pvid_vlan: 10\n      trunk_vlans: 5-10\n      provider: '{{ cli }}'\n\n  - name: Ensure 10GE1/0/22 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)\n    community.network.ce_switchport:\n      interface: 10GE1/0/22\n      mode: trunk\n      pvid_vlan: 10\n      trunk_vlans: 2-50\n      provider: '{{ cli }}'\n\n  - name: Ensure these VLANs are not being tagged on the trunk\n    community.network.ce_switchport:\n      interface: 10GE1/0/22\n      mode: trunk\n      trunk_vlans: 51-4000\n      state: absent\n      provider: '{{ cli }}'\n"
  },
  "community.network.ce_vlan": {
    "doc": {
      "description": "Manages VLAN configurations on Huawei CloudEngine switches.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "description": {
          "aliases": [],
          "description": "Specify VLAN description, minimum of 1 character, maximum of 80 characters.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of VLAN, minimum of 1 character, maximum of 31 characters.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "Single VLAN ID, in the range from 1 to 4094.",
          "required": false,
          "suboptions": {}
        },
        "vlan_range": {
          "aliases": [],
          "description": "Range of VLANs such as C(2-10) or C(2,5,10-15), etc.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages VLAN resources and attributes on Huawei CloudEngine switches."
    },
    "examples": "\n- name: Vlan module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Ensure a range of VLANs are not present on the switch\n    community.network.ce_vlan:\n      vlan_range: \"2-10,20,50,55-60,100-150\"\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: Ensure VLAN 50 exists with the name WEB\n    community.network.ce_vlan:\n      vlan_id: 50\n      name: WEB\n      state: absent\n      provider: \"{{ cli }}\"\n\n  - name: Ensure VLAN is NOT on the device\n    community.network.ce_vlan:\n      vlan_id: 50\n      state: absent\n      provider: \"{{ cli }}\"\n\n"
  },
  "community.network.ce_vrf": {
    "doc": {
      "description": "Manages VPN instance of HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "If I(state=absent), the route will be removed, regardless of the non-required options.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "description": {
          "aliases": [],
          "description": "Description of the vrf, the string length is 1 - 242 .",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "VPN instance, the length of vrf name is 1 - 31, i.e. \"test\", but can not be C(_public_).",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages VPN instance on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Vrf module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Config a vpn install named vpna, description is test\n    community.network.ce_vrf:\n      vrf: vpna\n      description: test\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Delete a vpn install named vpna\n    community.network.ce_vrf:\n      vrf: vpna\n      state: absent\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_vrf_af": {
    "doc": {
      "description": "Manages VPN instance address family of HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "If I(state=absent), the vrf will be removed, regardless of the non-required parameters.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "evpn": {
          "aliases": [],
          "description": "Is extend vpn or normal vpn.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "route_distinguisher": {
          "aliases": [],
          "description": "VPN instance route distinguisher,the RD used to distinguish same route prefix from different vpn. The RD must be setted before setting vpn_target_value.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the af.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpn_target_state": {
          "aliases": [],
          "description": "Manage the state of the vpn target.",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpn_target_type": {
          "aliases": [],
          "description": "VPN instance vpn target type.",
          "required": false,
          "choices": [
            "export_extcommunity",
            "import_extcommunity"
          ],
          "suboptions": {}
        },
        "vpn_target_value": {
          "aliases": [],
          "description": "VPN instance target value. Such as X.X.X.X:number<0-65535> or number<0-65535>:number<0-4294967295> or number<0-65535>.number<0-65535>:number<0-65535> or number<65536-4294967295>:number<0-65535> but not support 0:0 and 0.0:0.",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "VPN instance.",
          "required": true,
          "suboptions": {}
        },
        "vrf_aftype": {
          "aliases": [],
          "description": "VPN instance address family.",
          "default": "v4",
          "required": false,
          "choices": [
            "v4",
            "v6"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages VPN instance address family on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: Vrf af module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Config vpna, set address family is ipv4\n    community.network.ce_vrf_af:\n      vrf: vpna\n      vrf_aftype: v4\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Config vpna, delete address family is ipv4\n    community.network.ce_vrf_af:\n      vrf: vpna\n      vrf_aftype: v4\n      state: absent\n      provider: \"{{ cli }}\"\n  - name: Config vpna, set address family is ipv4,rd=1:1,set vpn_target_type=export_extcommunity,vpn_target_value=2:2\n    community.network.ce_vrf_af:\n      vrf: vpna\n      vrf_aftype: v4\n      route_distinguisher: 1:1\n      vpn_target_type: export_extcommunity\n      vpn_target_value: 2:2\n      vpn_target_state: present\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Config vpna, set address family is ipv4,rd=1:1,delete vpn_target_type=export_extcommunity,vpn_target_value=2:2\n    community.network.ce_vrf_af:\n      vrf: vpna\n      vrf_aftype: v4\n      route_distinguisher: 1:1\n      vpn_target_type: export_extcommunity\n      vpn_target_value: 2:2\n      vpn_target_state: absent\n      state: present\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_vrf_interface": {
    "doc": {
      "description": "Manages interface specific VPN configuration of HUAWEI CloudEngine switches.",
      "has_action": false,
      "notes": "Ensure that a VPN instance has been created and the IPv4 address family has been enabled for the VPN instance.\nThis module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpn_interface": {
          "aliases": [],
          "description": "An interface that can binding VPN instance, i.e. 40GE1/0/22, Vlanif10. Must be fully qualified interface name. Interface types, such as 10GE, 40GE, 100GE, LoopBack, MEth, Tunnel, Vlanif....",
          "required": true,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "VPN instance, the length of vrf name is 1 ~ 31, i.e. \"test\", but can not be C(_public_).",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages interface specific VPN configuration on HUAWEI CloudEngine switches."
    },
    "examples": "\n- name: VRF interface test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Configure a VPN instance for the interface\"\n    community.network.ce_vrf_interface:\n      vpn_interface: 40GE1/0/2\n      vrf: test\n      state: present\n      provider: \"{{ cli }}\"\n\n  - name: \"Disable the association between a VPN instance and an interface\"\n    community.network.ce_vrf_interface:\n      vpn_interface: 40GE1/0/2\n      vrf: test\n      state: absent\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_vrrp": {
    "doc": {
      "description": "Manages VRRP interface attributes on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "admin_flowdown": {
          "aliases": [],
          "description": "Disable the flowdown function for service VRRP.",
          "default": "false",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "admin_ignore_if_down": {
          "aliases": [],
          "description": "mVRRP ignores an interface Down event.",
          "default": "false",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "admin_interface": {
          "aliases": [],
          "description": "Tracked mVRRP interface name. The value is a string of 1 to 63 characters.",
          "required": false,
          "suboptions": {}
        },
        "admin_vrid": {
          "aliases": [],
          "description": "Tracked mVRRP ID. The value is an integer ranging from 1 to 255.",
          "required": false,
          "suboptions": {}
        },
        "advertise_interval": {
          "aliases": [],
          "description": "Configured interval between sending advertisements, in milliseconds. Only the master router sends VRRP advertisements. The default value is 1000 milliseconds.",
          "required": false,
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "This object is set based on the authentication type. When noAuthentication is specified, the value is empty. When simpleTextPassword or md5Authentication is specified, the value is a string of 1 to 8 characters in plaintext and displayed as a blank text for security.",
          "required": false,
          "suboptions": {}
        },
        "auth_mode": {
          "aliases": [],
          "description": "Authentication type used for VRRP packet exchanges between virtual routers. The values are noAuthentication, simpleTextPassword, md5Authentication. The default value is noAuthentication.",
          "type": "str",
          "required": false,
          "choices": [
            "simple",
            "md5",
            "none"
          ],
          "suboptions": {}
        },
        "fast_resume": {
          "aliases": [],
          "description": "mVRRP's fast resume mode.",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "gratuitous_arp_interval": {
          "aliases": [],
          "description": "Interval at which gratuitous ARP packets are sent, in seconds. The value ranges from 30 to 1200.The default value is 300.",
          "required": false,
          "suboptions": {}
        },
        "holding_multiplier": {
          "aliases": [],
          "description": "The configured holdMultiplier.The value is an integer ranging from 3 to 10. The default value is 3.",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Name of an interface. The value is a string of 1 to 63 characters.",
          "required": false,
          "suboptions": {}
        },
        "is_plain": {
          "aliases": [],
          "description": "Select the display mode of an authentication key. By default, an authentication key is displayed in ciphertext.",
          "default": "false",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "preempt_timer_delay": {
          "aliases": [],
          "description": "Preemption delay. The value is an integer ranging from 0 to 3600. The default value is 0.",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Configured VRRP priority. The value ranges from 1 to 254. The default value is 100. A larger value indicates a higher priority.",
          "required": false,
          "suboptions": {}
        },
        "recover_delay": {
          "aliases": [],
          "description": "Delay in recovering after an interface goes Up. The delay is used for interface flapping suppression. The value is an integer ranging from 0 to 3600. The default value is 0 seconds.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "VRRP version. The default version is v2.",
          "type": "str",
          "required": false,
          "choices": [
            "v2",
            "v3"
          ],
          "suboptions": {}
        },
        "virtual_ip": {
          "aliases": [],
          "description": "Virtual IP address. The value is a string of 0 to 255 characters.",
          "required": false,
          "suboptions": {}
        },
        "vrid": {
          "aliases": [],
          "description": "VRRP backup group ID. The value is an integer ranging from 1 to 255.",
          "default": "present",
          "required": false,
          "suboptions": {}
        },
        "vrrp_type": {
          "aliases": [],
          "description": "Type of a VRRP backup group.",
          "type": "str",
          "required": false,
          "choices": [
            "normal",
            "member",
            "admin"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages VRRP interfaces on HUAWEI CloudEngine devices."
    },
    "examples": "\n- name: Vrrp module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n  tasks:\n  - name: Set vrrp version\n    community.network.ce_vrrp:\n      version: v3\n      provider: \"{{ cli }}\"\n  - name: Set vrrp gratuitous-arp interval\n    community.network.ce_vrrp:\n      gratuitous_arp_interval: 40\n      mlag_id: 4\n      provider: \"{{ cli }}\"\n  - name: Set vrrp recover-delay\n    community.network.ce_vrrp:\n      recover_delay: 10\n      provider: \"{{ cli }}\"\n  - name: Set vrrp vrid virtual-ip\n    community.network.ce_vrrp:\n      interface: 40GE2/0/8\n      vrid: 1\n      virtual_ip: 10.14.2.7\n      provider: \"{{ cli }}\"\n  - name: Set vrrp vrid admin\n    community.network.ce_vrrp:\n      interface: 40GE2/0/8\n      vrid: 1\n      vrrp_type: admin\n      provider: \"{{ cli }}\"\n  - name: Set vrrp vrid fast_resume\n    community.network.ce_vrrp:\n      interface: 40GE2/0/8\n      vrid: 1\n      fast_resume: enable\n      provider: \"{{ cli }}\"\n  - name: Set vrrp vrid holding-multiplier\n    community.network.ce_vrrp:\n      interface: 40GE2/0/8\n      vrid: 1\n      holding_multiplier: 4\n      provider: \"{{ cli }}\"\n  - name: Set vrrp vrid preempt timer delay\n    community.network.ce_vrrp:\n      interface: 40GE2/0/8\n      vrid: 1\n      preempt_timer_delay: 10\n      provider: \"{{ cli }}\"\n  - name: Set vrrp vrid admin-vrrp\n    community.network.ce_vrrp:\n      interface: 40GE2/0/8\n      vrid: 1\n      admin_interface: 40GE2/0/9\n      admin_vrid: 2\n      vrrp_type: member\n      provider: \"{{ cli }}\"\n  - name: Set vrrp vrid authentication-mode\n    community.network.ce_vrrp:\n      interface: 40GE2/0/8\n      vrid: 1\n      is_plain: true\n      auth_mode: simple\n      auth_key: aaa\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_vxlan_arp": {
    "doc": {
      "description": "Manages ARP attributes of VXLAN on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "arp_collect_host": {
          "aliases": [],
          "description": "Enables EVN BGP or BGP EVPN to collect host information.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "arp_suppress": {
          "aliases": [],
          "description": "Enables ARP broadcast suppression in a BD.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "bridge_domain_id": {
          "aliases": [],
          "description": "Specifies a BD(bridge domain) ID. The value is an integer ranging from 1 to 16777215.",
          "required": false,
          "suboptions": {}
        },
        "evn_bgp": {
          "aliases": [],
          "description": "Enables EVN BGP.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "evn_peer_ip": {
          "aliases": [],
          "description": "Specifies the IP address of an EVN BGP peer. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "evn_reflect_client": {
          "aliases": [],
          "description": "Configures the local device as the route reflector (RR) and its peer as the client.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "evn_server": {
          "aliases": [],
          "description": "Configures the local device as the router reflector (RR) on the EVN network.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "evn_source_ip": {
          "aliases": [],
          "description": "Specifies the source address of an EVN BGP peer. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "host_collect_protocol": {
          "aliases": [],
          "description": "Enables EVN BGP or BGP EVPN to advertise host information.",
          "required": false,
          "choices": [
            "bgp",
            "none"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vbdif_name": {
          "aliases": [],
          "description": "Full name of VBDIF interface, i.e. Vbdif100.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages ARP attributes of VXLAN on HUAWEI CloudEngine devices."
    },
    "examples": "\n- name: Vxlan arp module test\n  hosts: ce128\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Configure EVN BGP on Layer 2 and Layer 3 VXLAN gateways to establish EVN BGP peer relationships.\n    community.network.ce_vxlan_arp:\n      evn_bgp: enable\n      evn_source_ip: 6.6.6.6\n      evn_peer_ip: 7.7.7.7\n      provider: \"{{ cli }}\"\n  - name: Configure a Layer 3 VXLAN gateway as a BGP RR.\n    community.network.ce_vxlan_arp:\n      evn_bgp: enable\n      evn_server: enable\n      provider: \"{{ cli }}\"\n  - name: Enable EVN BGP on a Layer 3 VXLAN gateway to collect host information.\n    community.network.ce_vxlan_arp:\n      vbdif_name: Vbdif100\n      arp_collect_host: enable\n      provider: \"{{ cli }}\"\n  - name: Enable Layer 2 and Layer 3 VXLAN gateways to use EVN BGP to advertise host information.\n    community.network.ce_vxlan_arp:\n      host_collect_protocol: bgp\n      provider: \"{{ cli }}\"\n  - name: Enable ARP broadcast suppression on a Layer 2 VXLAN gateway.\n    community.network.ce_vxlan_arp:\n      bridge_domain_id: 100\n      arp_suppress: enable\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_vxlan_gateway": {
    "doc": {
      "description": "Configuring Centralized All-Active Gateways or Distributed Gateway for the VXLAN Network on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "Ensure All-Active Gateways or Distributed Gateway for the VXLAN Network can not configure at the same time.\nRecommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "arp_direct_route": {
          "aliases": [],
          "description": "Enable VLINK direct route on VBDIF interface.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "arp_distribute_gateway": {
          "aliases": [],
          "description": "Enable the distributed gateway function on VBDIF interface.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "dfs_all_active": {
          "aliases": [],
          "description": "Creates all-active gateways.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "dfs_id": {
          "aliases": [],
          "description": "Specifies the ID of a DFS group. The value must be 1.",
          "required": false,
          "suboptions": {}
        },
        "dfs_peer_ip": {
          "aliases": [],
          "description": "Configure the IP address of an all-active gateway peer. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "dfs_peer_vpn": {
          "aliases": [],
          "description": "Specifies the name of the VPN instance that is associated with all-active gateway peer. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value C(_public_) is reserved and cannot be used as the VPN instance name.",
          "required": false,
          "suboptions": {}
        },
        "dfs_source_ip": {
          "aliases": [],
          "description": "Specifies the IPv4 address bound to a DFS group. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "dfs_source_vpn": {
          "aliases": [],
          "description": "Specifies the name of a VPN instance bound to a DFS group. The value is a string of 1 to 31 case-sensitive characters without spaces. If the character string is quoted by double quotation marks, the character string can contain spaces. The value C(_public_) is reserved and cannot be used as the VPN instance name.",
          "required": false,
          "suboptions": {}
        },
        "dfs_udp_port": {
          "aliases": [],
          "description": "Specifies the UDP port number of the DFS group. The value is an integer that ranges from 1025 to 65535.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vbdif_bind_vpn": {
          "aliases": [],
          "description": "Specifies the name of the VPN instance that is associated with the interface. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value C(_public_) is reserved and cannot be used as the VPN instance name.",
          "required": false,
          "suboptions": {}
        },
        "vbdif_mac": {
          "aliases": [],
          "description": "Specifies a MAC address for a VBDIF interface. The value is in the format of H-H-H. Each H is a 4-digit hexadecimal number, such as C(00e0) or C(fc01). If an H contains less than four digits, 0s are added ahead. For example,  C(e0) is equal to C(00e0). A MAC address cannot be all 0s or 1s or a multicast MAC address.",
          "required": false,
          "suboptions": {}
        },
        "vbdif_name": {
          "aliases": [],
          "description": "Full name of VBDIF interface, i.e. Vbdif100.",
          "required": false,
          "suboptions": {}
        },
        "vpn_instance": {
          "aliases": [],
          "description": "Specifies the name of a VPN instance. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value C(_public_) is reserved and cannot be used as the VPN instance name.",
          "required": false,
          "suboptions": {}
        },
        "vpn_vni": {
          "aliases": [],
          "description": "Specifies a VNI ID. Binds a VXLAN network identifier (VNI) to a virtual private network (VPN) instance. The value is an integer ranging from 1 to 16000000.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages gateway for the VXLAN network on HUAWEI CloudEngine devices."
    },
    "examples": "\n- name: Vxlan gateway module test\n  hosts: ce128\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Configuring Centralized All-Active Gateways for the VXLAN Network\n    community.network.ce_vxlan_gateway:\n      dfs_id: 1\n      dfs_source_ip: 6.6.6.6\n      dfs_all_active: enable\n      dfs_peer_ip: 7.7.7.7\n      provider: \"{{ cli }}\"\n  - name: Bind the VPN instance to a Layer 3 gateway, enable distributed gateway, and configure host route advertisement.\n    community.network.ce_vxlan_gateway:\n      vbdif_name: Vbdif100\n      vbdif_bind_vpn: vpn1\n      arp_distribute_gateway: enable\n      arp_direct_route: enable\n      provider: \"{{ cli }}\"\n  - name: Assign a VNI to a VPN instance.\n    community.network.ce_vxlan_gateway:\n      vpn_instance: vpn1\n      vpn_vni: 100\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_vxlan_global": {
    "doc": {
      "description": "Manages global attributes of VXLAN and bridge domain on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "Recommended connection is C(network_cli).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "bridge_domain_id": {
          "aliases": [],
          "description": "Specifies a bridge domain ID. The value is an integer ranging from 1 to 16777215.",
          "required": false,
          "suboptions": {}
        },
        "nvo3_acl_extend": {
          "aliases": [],
          "description": "Enabling or disabling the VXLAN ACL extension function.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "nvo3_ecmp_hash": {
          "aliases": [],
          "description": "Load balancing of VXLAN packets through ECMP in optimized mode.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "nvo3_eth_trunk_hash": {
          "aliases": [],
          "description": "Eth-Trunk from load balancing VXLAN packets in optimized mode.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "nvo3_gw_enhanced": {
          "aliases": [],
          "description": "Configuring the Layer 3 VXLAN Gateway to Work in Non-loopback Mode.",
          "required": false,
          "choices": [
            "l2",
            "l3"
          ],
          "suboptions": {}
        },
        "nvo3_prevent_loops": {
          "aliases": [],
          "description": "Loop prevention of VXLAN traffic in non-enhanced mode. When the device works in non-enhanced mode, inter-card forwarding of VXLAN traffic may result in loops.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "nvo3_service_extend": {
          "aliases": [],
          "description": "Enabling or disabling the VXLAN service extension function.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tunnel_mode_vxlan": {
          "aliases": [],
          "description": "Set the tunnel mode to VXLAN when configuring the VXLAN feature.",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages global attributes of VXLAN and bridge domain on HUAWEI CloudEngine devices."
    },
    "examples": "\n- name: Vxlan global module test\n  hosts: ce128\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Create bridge domain and set tunnel mode to VXLAN\n    community.network.ce_vxlan_global:\n      bridge_domain_id: 100\n      nvo3_acl_extend: enable\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_vxlan_tunnel": {
    "doc": {
      "description": "This module offers the ability to set the VNI and mapped to the BD, and configure an ingress replication list on HUAWEI CloudEngine devices.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "bridge_domain_id": {
          "aliases": [],
          "description": "Specifies a bridge domain ID. The value is an integer ranging from 1 to 16777215.",
          "required": false,
          "suboptions": {}
        },
        "nve_mode": {
          "aliases": [],
          "description": "Specifies the working mode of an NVE interface.",
          "required": false,
          "choices": [
            "mode-l2",
            "mode-l3"
          ],
          "suboptions": {}
        },
        "nve_name": {
          "aliases": [],
          "description": "Specifies the number of an NVE interface. The value ranges from 1 to 2.",
          "required": false,
          "suboptions": {}
        },
        "peer_list_ip": {
          "aliases": [],
          "description": "Specifies the IP address of a remote VXLAN tunnel endpoints (VTEP). The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "protocol_type": {
          "aliases": [],
          "description": "The operation type of routing protocol.",
          "required": false,
          "choices": [
            "bgp",
            "null"
          ],
          "suboptions": {}
        },
        "source_ip": {
          "aliases": [],
          "description": "Specifies an IP address for a source VTEP. The value is in dotted decimal notation.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vni_id": {
          "aliases": [],
          "description": "Specifies a VXLAN network identifier (VNI) ID. The value is an integer ranging from 1 to 16000000.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages VXLAN tunnel configuration on HUAWEI CloudEngine devices."
    },
    "examples": "\n- name: Vxlan tunnel module test\n  hosts: ce128\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Make sure nve_name is exist, ensure vni_id and protocol_type is configured on Nve1 interface.\n    community.network.ce_vxlan_tunnel:\n      nve_name: Nve1\n      vni_id: 100\n      protocol_type: bgp\n      state: present\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.ce_vxlan_vap": {
    "doc": {
      "description": "Manages VXLAN Virtual access point on HUAWEI CloudEngine Devices.",
      "has_action": false,
      "notes": "This module requires the netconf system service be enabled on the remote device being managed.\nRecommended connection is C(netconf).\nThis module also works with C(local) connections for legacy playbooks.",
      "options": {
        "bind_vlan_id": {
          "aliases": [],
          "description": "Specifies the VLAN binding to a BD(Bridge Domain). The value is an integer ranging ranging from 1 to 4094.",
          "required": false,
          "suboptions": {}
        },
        "bridge_domain_id": {
          "aliases": [],
          "description": "Specifies a bridge domain ID. The value is an integer ranging from 1 to 16777215.",
          "required": false,
          "suboptions": {}
        },
        "ce_vid": {
          "aliases": [],
          "description": "When I(encapsulation) is 'dot1q', specifies a VLAN ID in the outer VLAN tag. When I(encapsulation) is 'qinq', specifies an outer VLAN ID for double-tagged packets to be received by a Layer 2 sub-interface. The value is an integer ranging from 1 to 4094.",
          "required": false,
          "suboptions": {}
        },
        "encapsulation": {
          "aliases": [],
          "description": "Specifies an encapsulation type of packets allowed to pass through a Layer 2 sub-interface.",
          "required": false,
          "choices": [
            "dot1q",
            "default",
            "untag",
            "qinq",
            "none"
          ],
          "suboptions": {}
        },
        "l2_sub_interface": {
          "aliases": [],
          "description": "Specifies an Sub-Interface full name, i.e. \"10GE1/0/41.1\". The value is a string of 1 to 63 case-insensitive characters, spaces supported.",
          "required": false,
          "suboptions": {}
        },
        "pe_vid": {
          "aliases": [],
          "description": "When I(encapsulation) is 'qinq', specifies an inner VLAN ID for double-tagged packets to be received by a Layer 2 sub-interface. The value is an integer ranging from 1 to 4094.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages VXLAN virtual access point on HUAWEI CloudEngine Devices."
    },
    "examples": "\n- name: Vxlan vap module test\n  hosts: ce128\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Create a mapping between a VLAN and a BD\n    community.network.ce_vxlan_vap:\n      bridge_domain_id: 100\n      bind_vlan_id: 99\n      provider: \"{{ cli }}\"\n\n  - name: Bind a Layer 2 sub-interface to a BD\n    community.network.ce_vxlan_vap:\n      bridge_domain_id: 100\n      l2_sub_interface: 10GE2/0/20.1\n      provider: \"{{ cli }}\"\n\n  - name: Configure an encapsulation type on a Layer 2 sub-interface\n    community.network.ce_vxlan_vap:\n      l2_sub_interface: 10GE2/0/20.1\n      encapsulation: dot1q\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.cnos_backup": {
    "doc": {
      "description": "This module allows you to work with switch configurations. It provides a way to back up the running or startup configurations of a switch to a remote server. This is achieved by periodically saving a copy of the startup or running configuration of the network device to a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of the location where the configuration will be backed up. Authentication details required by the remote server must be provided as well. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "configType": {
          "aliases": [],
          "description": "This specifies what type of configuration will be backed up. The choices are the running or startup configurations. There is no default value, so it will result in an error if the input is incorrect.",
          "required": true,
          "choices": [
            "running-config",
            "startup-config"
          ],
          "suboptions": {}
        },
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "This refers to the protocol used by the network device to interact with the remote server to where to upload the backup configuration. The choices are FTP, SFTP, TFTP, or SCP. Any other protocols will result in error. If this parameter is not specified, there is no default value to be used.",
          "required": true,
          "choices": [
            "SFTP",
            "SCP",
            "FTP",
            "TFTP"
          ],
          "suboptions": {}
        },
        "rcpath": {
          "aliases": [],
          "description": "This specifies the full file path where the configuration file will be copied on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.",
          "required": true,
          "suboptions": {}
        },
        "rcserverip": {
          "aliases": [],
          "description": "-This specifies the IP Address of the remote server to where the configuration will be backed up.",
          "required": true,
          "suboptions": {}
        },
        "serverpassword": {
          "aliases": [],
          "description": "Specify the password for the server relating to the protocol used.",
          "required": true,
          "suboptions": {}
        },
        "serverusername": {
          "aliases": [],
          "description": "Specify the username for the server relating to the protocol used.",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Backup the current running or startup configuration to a remote server on devices running Lenovo CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module cnos_backup.\n These are written in the main.yml file of the tasks directory.\n---\n- name: Test Running Config Backup\n  community.network.cnos_backup:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_backup_{{ inventory_hostname }}_output.txt\"\n      configType: running-config\n      protocol: \"sftp\"\n      serverip: \"10.241.106.118\"\n      rcpath: \"/root/cnos/G8272-running-config.txt\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Startup Config Backup\n  community.network.cnos_backup:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_backup_{{ inventory_hostname }}_output.txt\"\n      configType: startup-config\n      protocol: \"sftp\"\n      serverip: \"10.241.106.118\"\n      rcpath: \"/root/cnos/G8272-startup-config.txt\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Running Config Backup -TFTP\n  community.network.cnos_backup:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_backup_{{ inventory_hostname }}_output.txt\"\n      configType: running-config\n      protocol: \"tftp\"\n      serverip: \"10.241.106.118\"\n      rcpath: \"/anil/G8272-running-config.txt\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Startup Config Backup - TFTP\n  community.network.cnos_backup:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_backup_{{ inventory_hostname }}_output.txt\"\n      configType: startup-config\n      protocol: \"tftp\"\n      serverip: \"10.241.106.118\"\n      rcpath: \"/anil/G8272-startup-config.txt\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n"
  },
  "community.network.cnos_banner": {
    "doc": {
      "description": "This will configure both login and motd banners on remote devices running Lenovo CNOS.  It allows playbooks to add or remote banner text from the active running configuration.",
      "has_action": false,
      "notes": "Tested against CNOS 10.8.1",
      "options": {
        "banner": {
          "aliases": [],
          "description": "Specifies which banner should be configured on the remote device. In Ansible 2.8 and earlier only I(login) and I(motd) were supported.",
          "required": true,
          "choices": [
            "login",
            "motd"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nFor more information please see the L(CNOS Platform Options guide, ../network/user_guide/platform_cnos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "no",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE)will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether or not the configuration is present in the current devices active running configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "The banner text that should be present in the remote device running configuration.  This argument accepts a multiline string, with no empty lines. Requires I(state=present).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage multiline banners on Lenovo CNOS devices"
    },
    "examples": "\n- name: Configure the login banner\n  community.network.cnos_banner:\n    banner: login\n    text: |\n      this is my login banner\n      that contains a multiline\n      string\n    state: present\n\n- name: Remove the motd banner\n  community.network.cnos_banner:\n    banner: motd\n    state: absent\n\n- name: Configure banner from file\n  community.network.cnos_banner:\n    banner:  motd\n    text: \"{{ lookup('file', './config_partial/raw_banner.cfg') }}\"\n    state: present\n\n"
  },
  "community.network.cnos_bgp": {
    "doc": {
      "description": "This module allows you to work with Border Gateway Protocol (BGP) related configurations. The operators used are overloaded to ensure control over switch BGP configurations. This module is invoked using method with asNumber as one of its arguments. The first level of the BGP configuration allows to set up an AS number, with the following attributes going into various configuration operations under the context of BGP. After passing this level, there are eight BGP arguments that will perform further configurations. They are bgpArg1, bgpArg2, bgpArg3, bgpArg4, bgpArg5, bgpArg6, bgpArg7, and bgpArg8. For more details on how to use these arguments, see [Overloaded Variables]. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "asNum": {
          "aliases": [],
          "description": "AS number",
          "required": true,
          "suboptions": {}
        },
        "bgpArg1": {
          "aliases": [],
          "description": "This is an overloaded bgp first argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": true,
          "choices": [
            "address-family",
            "bestpath",
            "bgp",
            "cluster-id",
            "confederation",
            "enforce-first-as",
            "fast-external-failover",
            "graceful-restart",
            "graceful-restart-helper",
            "log-neighbor-changes",
            "maxas-limit",
            "neighbor",
            "router-id",
            "shutdown",
            "synchronization",
            "timers",
            "vrf"
          ],
          "suboptions": {}
        },
        "bgpArg2": {
          "aliases": [],
          "description": "This is an overloaded bgp second argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "ipv4 or ipv6",
            "always-compare-med",
            "compare-confed-aspath",
            "compare-routerid",
            "dont-compare-originator-id",
            "tie-break-on-age",
            "as-path",
            "med",
            "identifier",
            "peers"
          ],
          "suboptions": {}
        },
        "bgpArg3": {
          "aliases": [],
          "description": "This is an overloaded bgp third argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "aggregate-address",
            "client-to-client",
            "dampening",
            "distance",
            "maximum-paths",
            "network",
            "nexthop",
            "redistribute",
            "save",
            "synchronization",
            "ignore or multipath-relax",
            "confed or missing-as-worst or non-deterministic or remove-recv-med or remove-send-med"
          ],
          "suboptions": {}
        },
        "bgpArg4": {
          "aliases": [],
          "description": "This is an overloaded bgp fourth argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "Aggregate prefix",
            "Reachability Half-life time",
            "route-map",
            "Distance for routes ext",
            "ebgp or ibgp",
            "IP prefix <network>",
            "IP prefix <network>/<length>",
            "synchronization",
            "Delay value",
            "direct",
            "ospf",
            "static",
            "memory"
          ],
          "suboptions": {}
        },
        "bgpArg5": {
          "aliases": [],
          "description": "This is an overloaded bgp fifth argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "as-set",
            "summary-only",
            "Value to start reusing a route",
            "Distance for routes internal",
            "Supported multipath numbers",
            "backdoor",
            "map",
            "route-map"
          ],
          "suboptions": {}
        },
        "bgpArg6": {
          "aliases": [],
          "description": "This is an overloaded bgp sixth argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "summary-only",
            "as-set",
            "route-map name",
            "Value to start suppressing a route",
            "Distance local routes",
            "Network mask",
            "Pointer to route-map entries"
          ],
          "suboptions": {}
        },
        "bgpArg7": {
          "aliases": [],
          "description": "This is an overloaded bgp seventh argument. Use of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "Maximum duration to suppress a stable route(minutes)",
            "backdoor",
            "route-map",
            "Name of the route map"
          ],
          "suboptions": {}
        },
        "bgpArg8": {
          "aliases": [],
          "description": "This is an overloaded bgp eight argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "Un-reachability Half-life time for the penalty(minutes)",
            "backdoor"
          ],
          "suboptions": {}
        },
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage BGP resources and attributes on devices running CNOS"
    },
    "examples": "\nTasks: The following are examples of using the module cnos_bgp. These are\n written in the main.yml file of the tasks directory.\n---\n- name: Test BGP  - neighbor\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"neighbor\"\n      bgpArg2: \"10.241.107.40\"\n      bgpArg3: 13\n      bgpArg4: \"address-family\"\n      bgpArg5: \"ipv4\"\n      bgpArg6: \"next-hop-self\"\n\n- name: Test BGP  - BFD\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"neighbor\"\n      bgpArg2: \"10.241.107.40\"\n      bgpArg3: 13\n      bgpArg4: \"bfd\"\n\n- name: Test BGP  - address-family - dampening\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"address-family\"\n      bgpArg2: \"ipv4\"\n      bgpArg3: \"dampening\"\n      bgpArg4: 13\n      bgpArg5: 233\n      bgpArg6: 333\n      bgpArg7: 15\n      bgpArg8: 33\n\n- name: Test BGP  - address-family - network\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"address-family\"\n      bgpArg2: \"ipv4\"\n      bgpArg3: \"network\"\n      bgpArg4: \"1.2.3.4/5\"\n      bgpArg5: \"backdoor\"\n\n- name: Test BGP - bestpath - always-compare-med\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"bestpath\"\n      bgpArg2: \"always-compare-med\"\n\n- name: Test BGP - bestpath-compare-confed-aspat\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"bestpath\"\n      bgpArg2: \"compare-confed-aspath\"\n\n- name: Test BGP - bgp\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"bgp\"\n      bgpArg2: 33\n\n- name: Test BGP  - cluster-id\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"cluster-id\"\n      bgpArg2: \"1.2.3.4\"\n\n- name: Test BGP - confederation-identifier\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"confederation\"\n      bgpArg2: \"identifier\"\n      bgpArg3: 333\n\n- name: Test BGP - enforce-first-as\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"enforce-first-as\"\n\n- name: Test BGP - fast-external-failover\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"fast-external-failover\"\n\n- name: Test BGP  - graceful-restart\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"graceful-restart\"\n      bgpArg2: 333\n\n- name: Test BGP - graceful-restart-helper\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"graceful-restart-helper\"\n\n- name: Test BGP - maxas-limit\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"maxas-limit\"\n      bgpArg2: 333\n\n- name: Test BGP  - neighbor\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"neighbor\"\n      bgpArg2: \"10.241.107.40\"\n      bgpArg3: 13\n      bgpArg4: \"address-family\"\n      bgpArg5: \"ipv4\"\n      bgpArg6: \"next-hop-self\"\n\n- name: Test BGP - router-id\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"router-id\"\n      bgpArg2: \"1.2.3.4\"\n\n- name: Test BGP - synchronization\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"synchronization\"\n\n- name: Test BGP - timers\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"timers\"\n      bgpArg2: 333\n      bgpArg3: 3333\n\n- name: Test BGP - vrf\n  community.network.cnos_bgp:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_bgp_{{ inventory_hostname }}_output.txt\"\n      asNum: 33\n      bgpArg1: \"vrf\"\n\n"
  },
  "community.network.cnos_command": {
    "doc": {
      "description": "Sends arbitrary commands to an CNOS node and returns the results read from the device. The C(cnos_command) module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.",
      "has_action": false,
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote device. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires is expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run arbitrary commands on Lenovo CNOS devices"
    },
    "examples": "\n---\n- name: Test contains operator\n  community.network.cnos_command:\n    commands:\n      - show version\n      - show system memory\n    wait_for:\n      - \"result[0] contains 'Lenovo'\"\n      - \"result[1] contains 'MemFree'\"\n  register: result\n\n- ansible.builtin.assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n\n- name: Get output for single command\n  community.network.cnos_command:\n    commands: ['show version']\n  register: result\n\n- ansible.builtin.assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n\n- name: Get output for multiple commands\n  community.network.cnos_command:\n    commands:\n      - show version\n      - show interface information\n  register: result\n\n- ansible.builtin.assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n      - \"result.stdout | length == 2\"\n"
  },
  "community.network.cnos_conditional_command": {
    "doc": {
      "description": "This module allows you to modify the running configuration of a switch. It provides a way to execute a single CNOS command on a network device by evaluating the current running configuration and executing the command only if the specific settings have not been already configured. The CNOS command is passed as an argument of the method. This module functions the same as the cnos_command module. The only exception is that following inventory variable can be specified [\"condition = <flag string>\"] When this inventory variable is specified as the variable of a task, the command is executed for the network element that matches the flag string. Usually, commands are executed across a group of network devices. When there is a requirement to skip the execution of the command on one or more devices, it is recommended to use this module. This module uses SSH to manage network device configuration.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "clicommand": {
          "aliases": [],
          "description": "This specifies the CLI command as an attribute to this method. The command is passed using double quotes. The variables can be placed directly on to the CLI commands or can be invoked from the vars directory.",
          "required": true,
          "suboptions": {}
        },
        "condition": {
          "aliases": [],
          "description": "If you specify condition=false in the inventory file against any device, the command execution is skipped for that device.",
          "required": true,
          "suboptions": {}
        },
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flag": {
          "aliases": [],
          "description": "If a task needs to be executed, you have to set the flag the same as it is specified in the inventory for that device.",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Execute a single command based on condition on devices running Lenovo CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module\n cnos_conditional_command. These are written in the main.yml file of the tasks\n directory.\n---\n- name: Applying CLI template on VLAG Tier1 Leaf Switch1\n  community.network.cnos_conditional_command:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_conditional_command_\n                  {{ inventory_hostname }}_output.txt\"\n      condition: \"{{ hostvars[inventory_hostname]['condition']}}\"\n      flag: leaf_switch2\n      command: \"spanning-tree mode enable\"\n\n"
  },
  "community.network.cnos_conditional_template": {
    "doc": {
      "description": "This module allows you to work with the running configuration of a switch. It provides a way to execute a set of CNOS commands on a switch by evaluating the current running configuration and executing the commands only if the specific settings have not been already configured. The configuration source can be a set of commands or a template written in the Jinja2 templating language. This module functions the same as the cnos_template module. The only exception is that the following inventory variable can be specified. [\"condition = <flag string>\"] When this inventory variable is specified as the variable of a task, the template is executed for the network element that matches the flag string. Usually, templates are used when commands are the same across a group of network devices. When there is a requirement to skip the execution of the template on one or more devices, it is recommended to use this module. This module uses SSH to manage network device configuration.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "commandfile": {
          "aliases": [],
          "description": "This specifies the path to the CNOS command file which needs to be applied. This usually comes from the commands folder. Generally this file is the output of the variables applied on a template file. So this command is preceded by a template module. The command file must contain the Ansible keyword {{ inventory_hostname }} and the condition flag in its filename to ensure that the command file is unique for each switch and condition. If this is omitted, the command file will be overwritten during iteration. For example, commandfile=./commands/clos_leaf_bgp_ {{ inventory_hostname }}_LP21_commands.txt",
          "required": true,
          "suboptions": {}
        },
        "condition": {
          "aliases": [],
          "description": "If you specify condition=<flag string> in the inventory file against any device, the template execution is done for that device in case it matches the flag setting for that task.",
          "required": true,
          "suboptions": {}
        },
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flag": {
          "aliases": [],
          "description": "If a task needs to be executed, you have to set the flag the same as it is specified in the inventory for that device.",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage switch configuration using templates based on condition on devices running Lenovo CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module\n cnos_conditional_template. These are written in the main.yml file of the\n tasks directory.\n---\n- name: Applying CLI template on VLAG Tier1 Leaf Switch1\n  community.network.cnos_conditional_template:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/vlag_1tier_leaf_switch1_\n                  {{ inventory_hostname }}_output.txt\"\n      condition: \"{{ hostvars[inventory_hostname]['condition']}}\"\n      flag: \"leaf_switch1\"\n      commandfile: \"./commands/vlag_1tier_leaf_switch1_\n                    {{ inventory_hostname }}_commands.txt\"\n      stp_mode1: \"disable\"\n      port_range1: \"17,18,29,30\"\n      portchannel_interface_number1: 1001\n      portchannel_mode1: active\n      slot_chassis_number1: 1/48\n      switchport_mode1: trunk\n"
  },
  "community.network.cnos_config": {
    "doc": {
      "description": "Lenovo CNOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with CNOS configuration sections in a deterministic way.",
      "has_action": false,
      "notes": "Tested against CNOS 10.9.1",
      "options": {
        "admin": {
          "aliases": [],
          "description": "Enters into administration configuration mode for making config changes to the device.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Allows a commit description to be specified to be included when the configuration is committed.  If the configuration is not changed or committed, this argument is ignored.",
          "default": "configured by cnos_config",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block",
            "config"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Lenovo CNOS configuration sections"
    },
    "examples": "\nTasks: The following are examples of using the module cnos_config.\n---\n- name: Configure top level configuration\n  community.network.cnos_config:\n    \"lines: hostname {{ inventory_hostname }}\"\n\n- name: Configure interface settings\n  community.network.cnos_config:\n    lines:\n      - enable\n      - ip ospf enable\n    parents: interface ip 13\n\n- name: Load a config from disk and replace the current config\n  community.network.cnos_config:\n    src: config.cfg\n    backup: yes\n\n- name: Configurable backup path\n  community.network.cnos_config:\n    src: config.cfg\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.cnos_factory": {
    "doc": {
      "description": "This module allows you to reset a switch's startup configuration. The method provides a way to reset the startup configuration to its factory settings. This is helpful when you want to move the switch to another topology as a new network device. This module uses SSH to manage network device configuration. The result of the operation can be viewed in results directory.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Reset the switch startup configuration to default (factory) on devices running Lenovo CNOS."
    },
    "examples": "\nTasks : The following are examples of using the module cnos_reload. These are\n written in the main.yml file of the tasks directory.\n---\n- name: Test Reset to factory\n  community.network.cnos_factory:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_factory_{{ inventory_hostname }}_output.txt\"\n\n"
  },
  "community.network.cnos_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote Lenovo device running on CNOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against CNOS 10.8.1",
      "options": {
        "auth_pass": {
          "aliases": [],
          "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
          "required": false,
          "suboptions": {}
        },
        "authorize": {
          "aliases": [],
          "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from remote devices running Lenovo CNOS"
    },
    "examples": "\nTasks: The following are examples of using the module cnos_facts.\n---\n- name: Test cnos Facts\n  community.network.cnos_facts:\n\n---\n# Collect all facts from the device\n- community.network.cnos_facts:\n    gather_subset: all\n\n# Collect only the config and default facts\n- community.network.cnos_facts:\n    gather_subset:\n      - config\n\n# Do not collect hardware facts\n- community.network.cnos_facts:\n    gather_subset:\n      - \"!hardware\"\n"
  },
  "community.network.cnos_image": {
    "doc": {
      "description": "This module allows you to work with switch firmware images. It provides a way to download a firmware image to a network device from a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of the image's location. Authentication details required by the remote server must be provided as well. By default, this method makes the newly downloaded firmware image the active image, which will be used by the switch during the next restart. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "imgpath": {
          "aliases": [],
          "description": "This specifies the full file path of the image located on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.",
          "required": true,
          "suboptions": {}
        },
        "imgtype": {
          "aliases": [],
          "description": "This specifies the firmware image type to be downloaded",
          "required": true,
          "choices": [
            "all",
            "boot",
            "os",
            "onie"
          ],
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "This refers to the protocol used by the network device to interact with the remote server from where to download the firmware image. The choices are FTP, SFTP, TFTP, or SCP. Any other protocols will result in error. If this parameter is not specified there is no default value to be used.",
          "required": true,
          "choices": [
            "SFTP",
            "SCP",
            "FTP",
            "TFTP"
          ],
          "suboptions": {}
        },
        "serverip": {
          "aliases": [],
          "description": "This specifies the IP Address of the remote server from where the software image will be downloaded.",
          "required": true,
          "suboptions": {}
        },
        "serverpassword": {
          "aliases": [],
          "description": "Specify the password for the server relating to the protocol used",
          "required": false,
          "suboptions": {}
        },
        "serverusername": {
          "aliases": [],
          "description": "Specify the username for the server relating to the protocol used",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Perform firmware upgrade/download from a remote server on devices running Lenovo CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module cnos_image. These are\n  written in the main.yml file of the tasks directory.\n---\n- name: Test Image transfer\n  community.network.cnos_image:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_image_{{ inventory_hostname }}_output.txt\"\n      protocol: \"sftp\"\n      serverip: \"10.241.106.118\"\n      imgpath: \"/root/cnos_images/G8272-10.1.0.112.img\"\n      imgtype: \"os\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Image tftp\n  community.network.cnos_image:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_image_{{ inventory_hostname }}_output.txt\"\n      protocol: \"tftp\"\n      serverip: \"10.241.106.118\"\n      imgpath: \"/anil/G8272-10.2.0.34.img\"\n      imgtype: \"os\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n"
  },
  "community.network.cnos_interface": {
    "doc": {
      "description": "This module provides declarative management of Interfaces on Lenovo CNOS network devices.",
      "has_action": false,
      "notes": "Tested against CNOS 10.8.1",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of Interfaces definitions.",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate)",
          "default": "20",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of Interface.",
          "required": false,
          "suboptions": {}
        },
        "duplex": {
          "aliases": [],
          "description": "Interface link status",
          "default": "auto",
          "required": false,
          "choices": [
            "full",
            "half",
            "auto"
          ],
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Interface link status.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "Maximum size of transmit packet.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Interface.",
          "required": true,
          "suboptions": {}
        },
        "neighbors": {
          "aliases": [],
          "description": "Check operational state of given interface C(name) for LLDP neighbor.\nThe following suboptions are available.",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "LLDP neighbor host for given interface C(name).",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "LLDP neighbor port to which interface C(name) is connected.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nFor more information please see the L(CNOS Platform Options guide, ../network/user_guide/platform_cnos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "no",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rx_rate": {
          "aliases": [],
          "description": "Receiver rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see L(Conditionals in Networking Modules, ../network/user_guide/network_working_with_command_output.html)",
          "required": false,
          "suboptions": {}
        },
        "speed": {
          "aliases": [],
          "description": "Interface link speed.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the Interface configuration, C(up) means present and operationally up and C(down) means present and operationally C(down)",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "up",
            "down"
          ],
          "suboptions": {}
        },
        "tx_rate": {
          "aliases": [],
          "description": "Transmit rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see L(Conditionals in Networking Modules, ../network/user_guide/network_working_with_command_output.html)",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Interface on Lenovo CNOS network devices"
    },
    "examples": "\n- name: Configure interface\n  community.network.cnos_interface:\n      name: Ethernet1/33\n      description: test-interface\n      speed: 100\n      duplex: half\n      mtu: 999\n\n- name: Remove interface\n  community.network.cnos_interface:\n    name: loopback3\n    state: absent\n\n- name: Make interface up\n  community.network.cnos_interface:\n    name: Ethernet1/33\n    enabled: True\n\n- name: Make interface down\n  community.network.cnos_interface:\n    name: Ethernet1/33\n    enabled: False\n\n- name: Check intent arguments\n  community.network.cnos_interface:\n    name: Ethernet1/33\n    state: up\n    tx_rate: ge(0)\n    rx_rate: le(0)\n\n- name: Check neighbors intent arguments\n  community.network.cnos_interface:\n    name: Ethernet1/33\n    neighbors:\n    - port: eth0\n      host: netdev\n\n- name: Config + intent\n  community.network.cnos_interface:\n    name: Ethernet1/33\n    enabled: False\n    state: down\n\n- name: Add interface using aggregate\n  community.network.cnos_interface:\n    aggregate:\n    - { name: Ethernet1/33, mtu: 256, description: test-interface-1 }\n    - { name: Ethernet1/44, mtu: 516, description: test-interface-2 }\n    duplex: full\n    speed: 100\n    state: present\n\n- name: Delete interface using aggregate\n  community.network.cnos_interface:\n    aggregate:\n    - name: loopback3\n    - name: loopback6\n    state: absent\n"
  },
  "community.network.cnos_l2_interface": {
    "doc": {
      "description": "This module provides declarative management of Layer-2 interfaces on Lenovo CNOS devices.",
      "has_action": false,
      "options": {
        "access_vlan": {
          "aliases": [],
          "description": "Configure given VLAN in access port. If C(mode=access), used as the access VLAN ID.",
          "required": false,
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [],
          "description": "List of Layer-2 interface definitions.",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode in which interface needs to be configured.",
          "default": "access",
          "required": false,
          "choices": [
            "access",
            "trunk"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "interface"
          ],
          "description": "Full name of the interface excluding any logical unit number, i.e. Ethernet1/3.",
          "required": true,
          "suboptions": {}
        },
        "native_vlan": {
          "aliases": [],
          "description": "Native VLAN to be configured in trunk port. If C(mode=trunk), used as the trunk native VLAN ID.",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nFor more information please see the L(CNOS Platform Options guide, ../network/user_guide/platform_cnos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "no",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE)will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the Layer-2 Interface configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "unconfigured"
          ],
          "suboptions": {}
        },
        "trunk_allowed_vlans": {
          "aliases": [],
          "description": "List of allowed VLANs in a given trunk port. If C(mode=trunk), these are the only VLANs that will be configured on the trunk, i.e. \"2-10,15\".",
          "required": false,
          "suboptions": {}
        },
        "trunk_vlans": {
          "aliases": [],
          "description": "List of VLANs to be configured in trunk port. If C(mode=trunk), used as the VLAN range to ADD or REMOVE from the trunk.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Layer-2 interface on Lenovo CNOS devices."
    },
    "examples": "\n- name: Ensure Ethernet1/5 is in its default l2 interface state\n  community.network.cnos_l2_interface:\n    name: Ethernet1/5\n    state: unconfigured\n\n- name: Ensure Ethernet1/5 is configured for access vlan 20\n  community.network.cnos_l2_interface:\n    name: Ethernet1/5\n    mode: access\n    access_vlan: 20\n\n- name: Ensure Ethernet1/5 only has vlans 5-10 as trunk vlans\n  community.network.cnos_l2_interface:\n    name: Ethernet1/5\n    mode: trunk\n    native_vlan: 10\n    trunk_vlans: 5-10\n\n- name: Ensure Ethernet1/5 is a trunk port and ensure 2-50 are being tagged\n        (doesn't mean others aren't also being tagged)\n  community.network.cnos_l2_interface:\n    name: Ethernet1/5\n    mode: trunk\n    native_vlan: 10\n    trunk_vlans: 2-50\n\n- name: Ensure these VLANs are not being tagged on the trunk\n  community.network.cnos_l2_interface:\n    name: Ethernet1/5\n    mode: trunk\n    trunk_vlans: 51-4094\n    state: absent\n"
  },
  "community.network.cnos_l3_interface": {
    "doc": {
      "description": "This module provides declarative management of Layer-3 interfaces on CNOS network devices.",
      "has_action": false,
      "notes": "Tested against CNOS 10.8.1",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of Layer-3 interfaces definitions. Each of the entry in aggregate list should define name of interface C(name) and a optional C(ipv4) or C(ipv6) address.",
          "required": false,
          "suboptions": {}
        },
        "ipv4": {
          "aliases": [],
          "description": "IPv4 address to be set for the Layer-3 interface mentioned in I(name) option. The address format is <ipv4 address>/<mask>, the mask is number in range 0-32 eg. 10.241.107.1/24",
          "required": false,
          "suboptions": {}
        },
        "ipv6": {
          "aliases": [],
          "description": "IPv6 address to be set for the Layer-3 interface mentioned in I(name) option. The address format is <ipv6 address>/<mask>, the mask is number in range 0-128 eg. fd5d:12c9:2201:1::1/64",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Layer-3 interface to be configured eg. Ethernet1/2",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nFor more information please see the L(CNOS Platform Options guide, ../network/user_guide/platform_cnos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "no",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE)will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "State of the Layer-3 interface configuration. It indicates if the configuration should be present or absent on remote device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage Layer-3 interfaces on Lenovo CNOS network devices."
    },
    "examples": "\n- name: Remove Ethernet1/33 IPv4 and IPv6 address\n  community.network.cnos_l3_interface:\n    name: Ethernet1/33\n    state: absent\n\n- name: Set Ethernet1/33 IPv4 address\n  community.network.cnos_l3_interface:\n    name: Ethernet1/33\n    ipv4: 10.241.107.1/24\n\n- name: Set Ethernet1/33 IPv6 address\n  community.network.cnos_l3_interface:\n    name: Ethernet1/33\n    ipv6: \"fd5d:12c9:2201:1::1/64\"\n\n- name: Set Ethernet1/33 in dhcp\n  community.network.cnos_l3_interface:\n    name: Ethernet1/33\n    ipv4: dhcp\n    ipv6: dhcp\n\n- name: Set interface Vlan1 (SVI) IPv4 address\n  community.network.cnos_l3_interface:\n    name: Vlan1\n    ipv4: 192.168.0.5/24\n\n- name: Set IP addresses on aggregate\n  community.network.cnos_l3_interface:\n    aggregate:\n      - { name: Ethernet1/33, ipv4: 10.241.107.1/24 }\n      - { name: Ethernet1/44, ipv4: 10.240.106.1/24,\n          ipv6: \"fd5d:12c9:2201:1::1/64\" }\n\n- name: Remove IP addresses on aggregate\n  community.network.cnos_l3_interface:\n    aggregate:\n      - { name: Ethernet1/33, ipv4: 10.241.107.1/24 }\n      - { name: Ethernet1/44, ipv4: 10.240.106.1/24,\n          ipv6: \"fd5d:12c9:2201:1::1/64\" }\n    state: absent\n"
  },
  "community.network.cnos_linkagg": {
    "doc": {
      "description": "This module provides declarative management of link aggregation groups on Lenovo CNOS network devices.",
      "has_action": false,
      "notes": "Tested against CNOS 10.8.1",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of link aggregation definitions.",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Channel-group number for the port-channel Link aggregation group. Range 1-255.",
          "required": false,
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "List of members of the link aggregation group.",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode of the link aggregation group.",
          "required": false,
          "choices": [
            "active",
            "on",
            "passive"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nFor more information please see the L(CNOS Platform Options guide, ../network/user_guide/platform_cnos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "no",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "purge": {
          "aliases": [],
          "description": "Purge links not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the link aggregation group.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage link aggregation groups on Lenovo CNOS devices"
    },
    "examples": "\n- name: Create link aggregation group\n  community.network.cnos_linkagg:\n    group: 10\n    state: present\n\n- name: Delete link aggregation group\n  community.network.cnos_linkagg:\n    group: 10\n    state: absent\n\n- name: Set link aggregation group to members\n  community.network.cnos_linkagg:\n    group: 200\n    mode: active\n    members:\n      - Ethernet1/33\n      - Ethernet1/44\n\n- name: Remove link aggregation group from GigabitEthernet0/0\n  community.network.cnos_linkagg:\n    group: 200\n    mode: active\n    members:\n      - Ethernet1/33\n\n- name: Create aggregate of linkagg definitions\n  community.network.cnos_linkagg:\n    aggregate:\n      - { group: 3, mode: on, members: [Ethernet1/33] }\n      - { group: 100, mode: passive, members: [Ethernet1/44] }\n"
  },
  "community.network.cnos_lldp": {
    "doc": {
      "description": "This module provides declarative management of LLDP service on Lenovc CNOS network devices.",
      "has_action": false,
      "notes": "Tested against CNOS 10.9.1",
      "options": {
        "state": {
          "aliases": [],
          "description": "State of the LLDP configuration. If value is I(present) lldp will be enabled else if it is I(absent) it will be disabled.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage LLDP configuration on Lenovo CNOS network devices."
    },
    "examples": "\n- name: Enable LLDP service\n  community.network.cnos_lldp:\n    state: present\n\n- name: Disable LLDP service\n  community.network.cnos_lldp:\n    state: absent\n"
  },
  "community.network.cnos_logging": {
    "doc": {
      "description": "This module provides declarative management of logging on Cisco Cnos devices.",
      "has_action": false,
      "notes": "Tested against CNOS 10.9.1",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of logging definitions.",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Destination of the logs. Lenovo uses the term server instead of host in its CLI.",
          "required": false,
          "choices": [
            "server",
            "console",
            "monitor",
            "logfile"
          ],
          "suboptions": {}
        },
        "facility": {
          "aliases": [],
          "description": "Set logging facility. This is applicable only for server logging",
          "required": false,
          "suboptions": {}
        },
        "level": {
          "aliases": [],
          "description": "Set logging severity levels. 0-emerg;1-alert;2-crit;3-err;4-warn; 5-notif;6-inform;7-debug",
          "default": "5",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "If value of C(dest) is I(file) it indicates file-name and for I(server) indicates the server name to be notified.",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of buffer. The acceptable value is in range from 4096 to 4294967295 bytes.",
          "default": "10485760",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the logging configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage logging on network devices"
    },
    "examples": "\n- name: Configure server logging\n  community.network.cnos_logging:\n    dest: server\n    name: 10.241.107.224\n    facility: local7\n    state: present\n\n- name: Remove server logging configuration\n  community.network.cnos_logging:\n    dest: server\n    name: 10.241.107.224\n    state: absent\n\n- name: Configure console logging level and facility\n  community.network.cnos_logging:\n    dest: console\n    level: 7\n    state: present\n\n- name: Configure buffer size\n  community.network.cnos_logging:\n    dest: logfile\n    level: 5\n    name: testfile\n    size: 5000\n\n- name: Configure logging using aggregate\n  community.network.cnos_logging:\n    aggregate:\n      - { dest: console, level: 6 }\n      - { dest: logfile, size: 9000 }\n\n- name: Remove logging using aggregate\n  community.network.cnos_logging:\n    aggregate:\n      - { dest: console, level: 6 }\n      - { dest: logfile, name: anil, size: 9000 }\n    state: absent\n"
  },
  "community.network.cnos_reload": {
    "doc": {
      "description": "This module allows you to restart the switch using the current startup configuration. The module is usually invoked after the running configuration has been saved over the startup configuration. This module uses SSH to manage network device configuration. The results of the operation can be viewed in results directory.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Perform switch restart on devices running Lenovo CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module cnos_reload. These are\n written in the main.yml file of the tasks directory.\n---\n- name: Test Reload\n  community.network.cnos_reload:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_reload_{{ inventory_hostname }}_output.txt\"\n"
  },
  "community.network.cnos_rollback": {
    "doc": {
      "description": "This module allows you to work with switch configurations. It provides a way to roll back configurations of a switch from a remote server. This is achieved by using startup or running configurations of the target device that were previously backed up to a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of he backup configuration's location. Authentication details required by the remote server must be provided as well. By default, this method overwrites the switch's configuration file with the newly downloaded file. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "configType": {
          "aliases": [],
          "description": "This refers to the type of configuration which will be used for the rolling back process. The choices are the running or startup configurations. There is no default value, so it will result in an error if the input is incorrect.",
          "required": true,
          "choices": [
            "running-config",
            "startup-config"
          ],
          "suboptions": {}
        },
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "This refers to the protocol used by the network device to interact with the remote server from where to download the backup configuration. The choices are FTP, SFTP, TFTP, or SCP. Any other protocols will result in error. If this parameter is not specified, there is no default value to be used.",
          "required": true,
          "choices": [
            "SFTP",
            "SCP",
            "FTP",
            "TFTP"
          ],
          "suboptions": {}
        },
        "rcpath": {
          "aliases": [],
          "description": "This specifies the full file path of the configuration file located on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.",
          "required": true,
          "suboptions": {}
        },
        "rcserverip": {
          "aliases": [],
          "description": "This specifies the IP Address of the remote server from where the backup configuration will be downloaded.",
          "required": true,
          "suboptions": {}
        },
        "serverpassword": {
          "aliases": [],
          "description": "Specify password for the server relating to the protocol used.",
          "required": true,
          "suboptions": {}
        },
        "serverusername": {
          "aliases": [],
          "description": "Specify username for the server relating to the protocol used.",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Roll back the running or startup configuration from a remote server on devices running Lenovo CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module cnos_rollback.\n These are written in the main.yml file of the tasks directory.\n---\n\n- name: Test Rollback of config - Running config\n  cnos_rolback:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_rollback_{{ inventory_hostname }}_output.txt\"\n      configType: running-config\n      protocol: \"sftp\"\n      serverip: \"10.241.106.118\"\n      rcpath: \"/root/cnos/G8272-running-config.txt\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Rollback of config - Startup config\n  cnos_rolback:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_rollback_{{ inventory_hostname }}_output.txt\"\n      configType: startup-config\n      protocol: \"sftp\"\n      serverip: \"10.241.106.118\"\n      rcpath: \"/root/cnos/G8272-startup-config.txt\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Rollback of config - Running config - TFTP\n  cnos_rolback:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_rollback_{{ inventory_hostname }}_output.txt\"\n      configType: running-config\n      protocol: \"tftp\"\n      serverip: \"10.241.106.118\"\n      rcpath: \"/anil/G8272-running-config.txt\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Rollback of config - Startup config - TFTP\n  cnos_rolback:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_rollback_{{ inventory_hostname }}_output.txt\"\n      configType: startup-config\n      protocol: \"tftp\"\n      serverip: \"10.241.106.118\"\n      rcpath: \"/anil/G8272-startup-config.txt\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n"
  },
  "community.network.cnos_save": {
    "doc": {
      "description": "This module allows you to copy the running configuration of a switch over its startup configuration. It is recommended to use this module shortly after any major configuration changes so they persist after a switch restart. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Save the running configuration as the startup configuration on devices running Lenovo CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module cnos_save. These are\n written in the main.yml file of the tasks directory.\n---\n- name: Test Save\n  community.network.cnos_save:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_save_{{ inventory_hostname }}_output.txt\"\n"
  },
  "community.network.cnos_showrun": {
    "doc": {
      "description": "This module allows you to view the switch running configuration. It executes the display running-config CLI command on a switch and returns a file containing the current running configuration of the target network device. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Collect the current running configuration on devices running on CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module cnos_showrun. These are\n written in the main.yml file of the tasks directory.\n---\n- name: Run show running-config\n  community.network.cnos_showrun:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      outputfile: \"./results/test_showrun_{{ inventory_hostname }}_output.txt\"\n\n"
  },
  "community.network.cnos_static_route": {
    "doc": {
      "description": "This module provides declarative management of static IP routes on Lenovo CNOS network devices.",
      "has_action": false,
      "notes": "Tested against CNOS 10.10.1",
      "options": {
        "admin_distance": {
          "aliases": [],
          "description": "Admin distance of the static route.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [],
          "description": "List of static route definitions.",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [
            "description"
          ],
          "description": "Name of the static route",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Interface of the static route.",
          "required": false,
          "suboptions": {}
        },
        "mask": {
          "aliases": [],
          "description": "Network prefix mask of the static route.",
          "required": false,
          "suboptions": {}
        },
        "next_hop": {
          "aliases": [],
          "description": "Next hop IP of the static route.",
          "required": false,
          "suboptions": {}
        },
        "prefix": {
          "aliases": [],
          "description": "Network prefix of the static route.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the static route configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Set tag of the static route.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage static IP routes on Lenovo CNOS network devices"
    },
    "examples": "\n- name: Configure static route\n  community.network.cnos_static_route:\n    prefix: 10.241.107.0\n    mask: 255.255.255.0\n    next_hop: 10.241.106.1\n\n- name: Configure ultimate route with name and tag\n  community.network.cnos_static_route:\n    prefix: 10.241.107.0\n    mask: 255.255.255.0\n    interface: Ethernet1/13\n    description: hello world\n    tag: 100\n\n- name: Remove configuration\n  community.network.cnos_static_route:\n    prefix: 10.241.107.0\n    mask: 255.255.255.0\n    next_hop: 10.241.106.0\n    state: absent\n\n- name: Add static route aggregates\n  community.network.cnos_static_route:\n    aggregate:\n      - { prefix: 10.241.107.0, mask: 255.255.255.0, next_hop: 10.241.105.0 }\n      - { prefix: 10.241.106.0, mask: 255.255.255.0, next_hop: 10.241.104.0 }\n\n- name: Remove static route aggregates\n  community.network.cnos_static_route:\n    aggregate:\n      - { prefix: 10.241.107.0, mask: 255.255.255.0, next_hop: 10.241.105.0 }\n      - { prefix: 10.241.106.0, mask: 255.255.255.0, next_hop: 10.241.104.0 }\n    state: absent\n"
  },
  "community.network.cnos_system": {
    "doc": {
      "description": "This module provides declarative management of node system attributes on Lenovo CNOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.",
      "has_action": false,
      "options": {
        "domain_name": {
          "aliases": [],
          "description": "Configures the default domain name suffix to be used when referencing this node by its FQDN.  This argument accepts either a list of domain names or a list of dicts that configure the domain name and VRF name or keyword 'default'. See examples.",
          "required": false,
          "suboptions": {}
        },
        "domain_search": {
          "aliases": [],
          "description": "Configures a list of domain name suffixes to search when performing DNS name resolution. This argument accepts either a list of domain names or a list of dicts that configure the domain name and VRF name or keyword 'default'. See examples.",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Configure the device hostname parameter. This option takes an ASCII string value or keyword 'default'",
          "required": false,
          "suboptions": {}
        },
        "lookup_enabled": {
          "aliases": [],
          "description": "Administrative control for enabling or disabling DNS lookups. When this argument is set to True, lookups are performed and when it is set to False, lookups are not performed.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lookup_source": {
          "aliases": [],
          "description": "Provides one or more source interfaces to use for performing DNS lookups. The interface must be a valid interface configured. on the device.",
          "required": false,
          "suboptions": {}
        },
        "name_servers": {
          "aliases": [],
          "description": "List of DNS name servers by IP address to use to perform name resolution lookups.  This argument accepts either a list of DNS servers or a list of hashes that configure the name server and VRF name or keyword 'default'. See examples.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the configuration values in the device's current active configuration.  When set to I(present), the values should be configured in the device active configuration and when set to I(absent) the values should not be in the device active configuration",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage the system attributes on Lenovo CNOS devices"
    },
    "examples": "\n- name: Configure hostname and domain-name\n  community.network.cnos_system:\n    hostname: cnos01\n    domain_name: test.example.com\n\n- name: Remove configuration\n  community.network.cnos_system:\n    state: absent\n\n- name: Configure name servers\n  community.network.cnos_system:\n    name_servers:\n      - 8.8.8.8\n      - 8.8.4.4\n\n- name: Configure DNS Lookup sources\n  community.network.cnos_system:\n    lookup_source: MgmtEth0/0/CPU0/0\n    lookup_enabled: yes\n\n- name: Configure name servers with VRF support\n  nxos_system:\n    name_servers:\n      - { server: 8.8.8.8, vrf: mgmt }\n      - { server: 8.8.4.4, vrf: mgmt }\n"
  },
  "community.network.cnos_template": {
    "doc": {
      "description": "This module allows you to work with the running configuration of a switch. It provides a way to execute a set of CNOS commands on a switch by evaluating the current running configuration and executing the commands only if the specific settings have not been already configured. The configuration source can be a set of commands or a template written in the Jinja2 templating language. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "commandfile": {
          "aliases": [],
          "description": "This specifies the path to the CNOS command file which needs to be applied. This usually comes from the commands folder. Generally this file is the output of the variables applied on a template file. So this command is preceded by a template module. Note The command file must contain the Ansible keyword {{ inventory_hostname }} in its filename to ensure that the command file is unique for each switch and condition. If this is omitted, the command file will be overwritten during iteration. For example, commandfile=./commands/clos_leaf_bgp_{{ inventory_hostname }}_commands.txt",
          "required": true,
          "suboptions": {}
        },
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage switch configuration using templates on devices running Lenovo CNOS"
    },
    "examples": "\nTasks : The following are examples of using the module cnos_template. These are written in the main.yml file of the tasks directory.\n---\n- name: Replace Config CLI command template with values\n  template:\n      src: demo_template.j2\n      dest: \"./commands/demo_template_{{ inventory_hostname }}_commands.txt\"\n      vlanid1: 13\n      slot_chassis_number1: \"1/2\"\n      portchannel_interface_number1: 100\n      portchannel_mode1: \"active\"\n\n- name: Applying CLI commands on Switches\n  community.network.cnos_template:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      commandfile: \"./commands/demo_template_{{ inventory_hostname }}_commands.txt\"\n      outputfile: \"./results/demo_template_command_{{ inventory_hostname }}_output.txt\"\n\n"
  },
  "community.network.cnos_user": {
    "doc": {
      "description": "This module provides declarative management of the local usernames configured on Lenovo CNOS devices.  It allows playbooks to manage either individual usernames or the collection of usernames in the current running config.  It also supports purging usernames from the configuration that are not explicitly defined.",
      "has_action": false,
      "options": {
        "aggregate": {
          "aliases": [
            "users",
            "collection"
          ],
          "description": "The set of username objects to be configured on the remote Lenovo CNOS device.  The list entries can either be the username or a hash of username and properties.  This argument is mutually exclusive with the C(name) argument.",
          "required": false,
          "suboptions": {}
        },
        "configured_password": {
          "aliases": [],
          "description": "The password to be configured on the network device. The password needs to be provided in cleartext and it will be encrypted on the device. Please note that this option is not same as C(provider password).",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The username to be configured on the remote Lenovo CNOS device.  This argument accepts a string value and is mutually exclusive with the C(aggregate) argument.",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "The C(purge) argument instructs the module to consider the resource definition absolute.  It will remove any previously configured usernames on the device with the exception of the `admin` user which cannot be deleted per cnos constraints.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [
            "roles"
          ],
          "description": "The C(role) argument configures the role for the username in the device running configuration.  The argument accepts a string value defining the role name.  This argument does not check if the role has been configured on the device.",
          "required": false,
          "suboptions": {}
        },
        "sshkey": {
          "aliases": [],
          "description": "The C(sshkey) argument defines the SSH public key to configure for the username.  This argument accepts a valid SSH key value.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The C(state) argument configures the state of the username definition as it relates to the device operational configuration.  When set to I(present), the username(s) should be configured in the device active configuration and when set to I(absent) the username(s) should not be in the device active configuration",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "Since passwords are encrypted in the device running config, this argument will instruct the module when to change the password.  When set to C(always), the password will always be updated in the device and when set to C(on_create) the password will be updated only if the username is created.",
          "default": "always",
          "required": false,
          "choices": [
            "on_create",
            "always"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage the collection of local users on Lenovo CNOS devices"
    },
    "examples": "\n- name: Create a new user\n  community.network.cnos_user:\n    name: ansible\n    sshkey: \"{{ lookup('file', '~/.ssh/id_rsa.pub') }}\"\n    state: present\n\n- name: Remove all users except admin\n  community.network.cnos_user:\n    purge: yes\n\n- name: Set multiple users role\n  aggregate:\n    - name: Netop\n    - name: Netend\n  role: network-operator\n  state: present\n"
  },
  "community.network.cnos_vlag": {
    "doc": {
      "description": "This module allows you to work with virtual Link Aggregation Groups (vLAG) related configurations. The operators used are overloaded to ensure control over switch vLAG configurations. Apart from the regular device connection related attributes, there are four vLAG arguments which are overloaded variables that will perform further configurations. They are vlagArg1, vlagArg2, vlagArg3, and vlagArg4. For more details on how to use these arguments, see [Overloaded Variables]. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Lenovo Network devices see U(https://www.ansible.com/ansible-lenovo).",
      "options": {
        "deviceType": {
          "aliases": [],
          "description": "This specifies the type of device where the method is executed. The choices NE1072T,NE1032,NE1032T,NE10032,NE2572 are added since Ansible 2.4. The choice NE0152T is added since 2.8",
          "type": "str",
          "required": true,
          "choices": [
            "g8272_cnos",
            "g8296_cnos",
            "g8332_cnos",
            "NE0152T",
            "NE1072T",
            "NE1032",
            "NE1032T",
            "NE10032",
            "NE2572"
          ],
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "outputfile": {
          "aliases": [],
          "description": "This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vlagArg1": {
          "aliases": [],
          "description": "This is an overloaded vlag first argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": true,
          "choices": [
            "enable",
            "auto-recovery",
            "config-consistency",
            "isl",
            "mac-address-table",
            "peer-gateway",
            "priority",
            "startup-delay",
            "tier-id",
            "vrrp",
            "instance",
            "hlthchk"
          ],
          "suboptions": {}
        },
        "vlagArg2": {
          "aliases": [],
          "description": "This is an overloaded vlag second argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "Interval in seconds",
            "disable or strict",
            "Port Aggregation Number",
            "VLAG priority",
            "Delay time in seconds",
            "VLAG tier-id value",
            "VLAG instance number",
            "keepalive-attempts",
            "keepalive-interval",
            "retry-interval",
            "peer-ip"
          ],
          "suboptions": {}
        },
        "vlagArg3": {
          "aliases": [],
          "description": "This is an overloaded vlag third argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "enable or port-aggregation",
            "Number of keepalive attempts",
            "Interval in seconds",
            "Interval in seconds",
            "VLAG health check peer IP4 address"
          ],
          "suboptions": {}
        },
        "vlagArg4": {
          "aliases": [],
          "description": "This is an overloaded vlag fourth argument. Usage of this argument can be found is the User Guide referenced above.",
          "required": false,
          "choices": [
            "Port Aggregation Number",
            "default or management"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage VLAG resources and attributes on devices running Lenovo CNOS"
    },
    "examples": "\n\nTasks : The following are examples of using the module cnos_vlag. These are\n        written in the main.yml file of the tasks directory.\n---\n- name: Test Vlag  - enable\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"enable\"\n\n- name: Test Vlag - autorecovery\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"auto-recovery\"\n      vlagArg2: 266\n\n- name: Test Vlag - config-consistency\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"config-consistency\"\n      vlagArg2: \"strict\"\n\n- name: Test Vlag - isl\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"isl\"\n      vlagArg2: 23\n\n- name: Test Vlag  - mac-address-table\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"mac-address-table\"\n\n- name: Test Vlag - peer-gateway\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"peer-gateway\"\n\n- name: Test Vlag - priority\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"priority\"\n      vlagArg2: 1313\n\n- name: Test Vlag - startup-delay\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"startup-delay\"\n      vlagArg2: 323\n\n- name: Test Vlag  - tier-id\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"tier-id\"\n      vlagArg2: 313\n\n- name: Test Vlag - vrrp\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"vrrp\"\n\n- name: Test Vlag - instance\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"instance\"\n      vlagArg2: 33\n      vlagArg3: 333\n\n- name: Test Vlag - instance2\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"instance\"\n      vlagArg2: \"33\"\n\n- name: Test Vlag  - keepalive-attempts\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"hlthchk\"\n      vlagArg2: \"keepalive-attempts\"\n      vlagArg3: 13\n\n- name: Test Vlag - keepalive-interval\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"hlthchk\"\n      vlagArg2: \"keepalive-interval\"\n      vlagArg3: 131\n\n- name: Test Vlag - retry-interval\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"hlthchk\"\n      vlagArg2: \"retry-interval\"\n      vlagArg3: 133\n\n- name: Test Vlag - peer ip\n  community.network.cnos_vlag:\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType']}}\"\n      outputfile: \"./results/cnos_vlag_{{ inventory_hostname }}_output.txt\"\n      vlagArg1: \"hlthchk\"\n      vlagArg2: \"peer-ip\"\n      vlagArg3: \"1.2.3.4\"\n\n"
  },
  "community.network.cnos_vlan": {
    "doc": {
      "description": "This module provides declarative management of VLANs on Lenovo CNOS network devices.",
      "has_action": false,
      "notes": "Tested against CNOS 10.8.1",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of VLANs definitions.",
          "required": false,
          "suboptions": {}
        },
        "associated_interfaces": {
          "aliases": [],
          "description": "This is a intent option and checks the operational state of the for given vlan C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vlan interfaces on device it will result in failure.",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Delay the play should wait to check for declarative intent params values.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of interfaces that should be associated to the VLAN.",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VLAN.",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nFor more information please see the L(CNOS Platform Options guide, ../network/user_guide/platform_cnos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "no",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "purge": {
          "aliases": [],
          "description": "Purge VLANs not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the VLAN configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "active",
            "suspend"
          ],
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "ID of the VLAN. Range 1-4094.",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage VLANs on CNOS network devices"
    },
    "examples": "\n- name: Create vlan\n  community.network.cnos_vlan:\n    vlan_id: 100\n    name: test-vlan\n    state: present\n\n- name: Add interfaces to VLAN\n  community.network.cnos_vlan:\n    vlan_id: 100\n    interfaces:\n      - Ethernet1/33\n      - Ethernet1/44\n\n- name: Check if interfaces is assigned to VLAN\n  community.network.cnos_vlan:\n    vlan_id: 100\n    associated_interfaces:\n      - Ethernet1/33\n      - Ethernet1/44\n\n- name: Delete vlan\n  community.network.cnos_vlan:\n    vlan_id: 100\n    state: absent\n"
  },
  "community.network.cnos_vrf": {
    "doc": {
      "description": "This module provides declarative management of VRFs on Lenovo CNOS network devices.",
      "has_action": false,
      "notes": "Tested against CNOS 10.9.1",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of VRFs contexts",
          "required": false,
          "suboptions": {}
        },
        "associated_interfaces": {
          "aliases": [],
          "description": "This is a intent option and checks the operational state of the for given vrf C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vrf interfaces on device it will result in failure.",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "Identifies the set of interfaces that should be configured in the VRF. Interfaces must be routed interfaces in order to be placed into a VRF. The name of interface should be in expanded format and not abbreviated.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VRF.",
          "required": true,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Purge VRFs not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rd": {
          "aliases": [],
          "description": "Route distinguisher of the VRF",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the VRF configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage VRFs on Lenovo CNOS network devices"
    },
    "examples": "\n- name: Create vrf\n  community.network.cnos_vrf:\n    name: test\n    rd: 1:200\n    interfaces:\n      - Ethernet1/33\n    state: present\n\n- name: Delete VRFs\n  community.network.cnos_vrf:\n    name: test\n    state: absent\n\n- name: Create aggregate of VRFs with purge\n  community.network.cnos_vrf:\n    aggregate:\n      - { name: test4, rd: \"1:204\" }\n      - { name: test5, rd: \"1:205\" }\n    state: present\n    purge: yes\n\n- name: Delete aggregate of VRFs\n  community.network.cnos_vrf:\n    aggregate:\n      - name: test2\n      - name: test3\n      - name: test4\n      - name: test5\n    state: absent\n"
  },
  "community.network.cv_server_provision": {
    "doc": {
      "description": "This module allows a server team to provision server network ports for new servers without having to access Arista CVP or asking the network team to do it for them. Provide the information for connecting to CVP, switch rack, port the new server is connected to, optional vlan, and an action and the module will apply the configuration to the switch port via CVP. Actions are add (applies template config to port), remove (defaults the interface config) and show (returns the current port config).",
      "has_action": false,
      "options": {
        "action": {
          "aliases": [],
          "description": "The action for the module to take. The actions are add, which applies the specified template config to port, remove, which defaults the specified interface configuration, and show, which will return the current port configuration with no changes.",
          "default": "show",
          "required": false,
          "choices": [
            "show",
            "add",
            "remove"
          ],
          "suboptions": {}
        },
        "auto_run": {
          "aliases": [],
          "description": "Flag that determines whether or not the module will execute the CVP task spawned as a result of changes to a switch configlet. When an add or remove action is taken which results in a change to a switch configlet, CVP will spawn a task that needs to be executed for the configuration to be applied to the switch. If this option is True then the module will determined the task number created by the configuration change, execute it and wait for the task to complete. If the option is False then the task will remain in the Pending state in CVP for a network administrator to review and execute.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The hostname or IP address of the CVP node being connected to.",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password of the user that will be used to connect to CVP for API calls.",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number to use when making API calls to the CVP node. This will default to the default port for the specified protocol. Port 80 for http and port 443 for https.",
          "required": false,
          "suboptions": {}
        },
        "port_vlan": {
          "aliases": [],
          "description": "The vlan that should be applied to the port for this server. This parameter is dependent on a proper template that supports single vlan provisioning with it. If a port vlan is specified by the template specified does not support this the module will exit out with no changes. If a template is specified that requires a port vlan but no port vlan is specified the module will exit out with no changes.",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol to use when making API calls to CVP. CVP defaults to https and newer versions of CVP no longer support http.",
          "default": "https",
          "required": false,
          "choices": [
            "https",
            "http"
          ],
          "suboptions": {}
        },
        "server_name": {
          "aliases": [],
          "description": "The hostname or identifier for the server that is having it's switch port provisioned.",
          "required": true,
          "suboptions": {}
        },
        "switch_name": {
          "aliases": [],
          "description": "The hostname of the switch is being configured for the server being provisioned.",
          "required": true,
          "suboptions": {}
        },
        "switch_port": {
          "aliases": [],
          "description": "The physical port number on the switch that the new server is connected to.",
          "required": true,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "A path to a Jinja formatted template file that contains the configuration block that will be applied to the specified switch port. This template will have variable fields replaced by the module before being applied to the switch configuration.",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The user that will be used to connect to CVP for making API calls.",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "Jinja2",
        "cvprac >= 0.7.0"
      ],
      "short_description": "Provision server port by applying or removing template configuration to an Arista CloudVision Portal configlet that is applied to a switch."
    },
    "examples": "\n- name: Get current configuration for interface Ethernet2\n  community.network.cv_server_provision:\n    host: cvp_node\n    username: cvp_user\n    password: cvp_pass\n    protocol: https\n    server_name: new_server\n    switch_name: eos_switch_1\n    switch_port: 2\n    template: template_file.j2\n    action: show\n\n- name: Remove existing configuration from interface Ethernet2. Run task.\n  community.network.cv_server_provision:\n    host: cvp_node\n    username: cvp_user\n    password: cvp_pass\n    protocol: https\n    server_name: new_server\n    switch_name: eos_switch_1\n    switch_port: 2\n    template: template_file.j2\n    action: remove\n    auto_run: True\n\n- name: Add template configuration to interface Ethernet2. No VLAN. Run task.\n  community.network.cv_server_provision:\n    host: cvp_node\n    username: cvp_user\n    password: cvp_pass\n    protocol: https\n    server_name: new_server\n    switch_name: eos_switch_1\n    switch_port: 2\n    template: single_attached_trunk.j2\n    action: add\n    auto_run: True\n\n- name: Add template with VLAN configuration to interface Ethernet2. Run task.\n  community.network.cv_server_provision:\n    host: cvp_node\n    username: cvp_user\n    password: cvp_pass\n    protocol: https\n    server_name: new_server\n    switch_name: eos_switch_1\n    switch_port: 2\n    port_vlan: 22\n    template: single_attached_vlan.j2\n    action: add\n    auto_run: True\n"
  },
  "community.network.dladm_etherstub": {
    "doc": {
      "description": "Create or delete etherstubs on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "Etherstub name.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete Solaris/illumos etherstub.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the etherstub is temporary. Temporary etherstubs do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage etherstubs on Solaris/illumos systems."
    },
    "examples": "\n- name: Create 'stub0' etherstub\n  community.network.dladm_etherstub:\n    name: stub0\n    state: present\n\n- name: Remove 'stub0 etherstub\n  community.network.dladm_etherstub:\n    name: stub0\n    state: absent\n"
  },
  "community.network.dladm_iptun": {
    "doc": {
      "description": "Manage IP tunnel interfaces on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "local_address": {
          "aliases": [
            "local"
          ],
          "description": "Literal IP address or hostname corresponding to the tunnel source.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "IP tunnel interface name.",
          "required": true,
          "suboptions": {}
        },
        "remote_address": {
          "aliases": [
            "remote"
          ],
          "description": "Literal IP address or hostname corresponding to the tunnel destination.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete Solaris/illumos VNIC.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the IP tunnel interface is temporary. Temporary IP tunnel interfaces do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [
            "tunnel_type"
          ],
          "description": "Specifies the type of tunnel to be created.",
          "default": "ipv4",
          "required": false,
          "choices": [
            "ipv4",
            "ipv6",
            "6to4"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage IP tunnel interfaces on Solaris/illumos systems."
    },
    "examples": "\n- name: Create IPv4 tunnel interface 'iptun0'\n  community.network.dladm_iptun: name=iptun0 local_address=192.0.2.23 remote_address=203.0.113.10 state=present\n\n- name: Change IPv4 tunnel remote address\n  community.network.dladm_iptun: name=iptun0 type=ipv4 local_address=192.0.2.23 remote_address=203.0.113.11\n\n- name: Create IPv6 tunnel interface 'tun0'\n  community.network.dladm_iptun: name=tun0 type=ipv6 local_address=192.0.2.23 remote_address=203.0.113.42\n\n- name: Remove 'iptun0' tunnel interface\n  community.network.dladm_iptun: name=iptun0 state=absent\n"
  },
  "community.network.dladm_linkprop": {
    "doc": {
      "description": "Set / reset link properties on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "link": {
          "aliases": [
            "nic",
            "interface"
          ],
          "description": "Link interface name.",
          "required": true,
          "suboptions": {}
        },
        "property": {
          "aliases": [
            "name"
          ],
          "description": "Specifies the name of the property we want to manage.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set or reset the property value.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "reset"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that lin property configuration is temporary. Temporary link property configuration does not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Specifies the value we want to set for the link property.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage link properties on Solaris/illumos systems."
    },
    "examples": "\n- name: Set 'maxbw' to 100M on e1000g1\n  community.network.dladm_linkprop: name=e1000g1 property=maxbw value=100M state=present\n\n- name: Set 'mtu' to 9000 on e1000g1\n  community.network.dladm_linkprop: name=e1000g1 property=mtu value=9000\n\n- name: Reset 'mtu' property on e1000g1\n  community.network.dladm_linkprop: name=e1000g1 property=mtu state=reset\n"
  },
  "community.network.dladm_vlan": {
    "doc": {
      "description": "Create or delete VLAN interfaces on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "link": {
          "aliases": [],
          "description": "VLAN underlying link name.",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "VLAN interface name.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete Solaris/illumos VNIC.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the VLAN interface is temporary. Temporary VLANs do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [
            "vid"
          ],
          "description": "VLAN ID value for VLAN interface.",
          "default": "False",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage VLAN interfaces on Solaris/illumos systems."
    },
    "examples": "\n- name: Create 'vlan42' VLAN over 'bnx0' link\n  community.network.dladm_vlan: name=vlan42 link=bnx0 vlan_id=42 state=present\n\n- name: Remove 'vlan1337' VLAN interface\n  community.network.dladm_vlan: name=vlan1337 state=absent\n"
  },
  "community.network.dladm_vnic": {
    "doc": {
      "description": "Create or delete VNICs on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "link": {
          "aliases": [],
          "description": "VNIC underlying link name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "mac": {
          "aliases": [
            "macaddr"
          ],
          "description": "Sets the VNIC's MAC address. Must be valid unicast MAC address.",
          "default": "False",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "VNIC name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete Solaris/illumos VNIC.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the VNIC is temporary. Temporary VNICs do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan": {
          "aliases": [
            "vlan_id"
          ],
          "description": "Enable VLAN tagging for this VNIC. The VLAN tag will have id I(vlan).",
          "default": "False",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage VNICs on Solaris/illumos systems."
    },
    "examples": "\n- name: Create 'vnic0' VNIC over 'bnx0' link\n  community.network.dladm_vnic:\n    name: vnic0\n    link: bnx0\n    state: present\n\n- name: Create VNIC with specified MAC and VLAN tag over 'aggr0'\n  community.network.dladm_vnic:\n    name: vnic1\n    link: aggr0\n    mac: '00:00:5E:00:53:23'\n    vlan: 4\n\n- name: Remove 'vnic0' VNIC\n  community.network.dladm_vnic:\n    name: vnic0\n    link: bnx0\n    state: absent\n"
  },
  "community.network.edgeos_command": {
    "doc": {
      "description": "This command module allows running one or more commands on a remote device running EdgeOS, such as the Ubiquiti EdgeRouter.\nThis module does not support running commands in configuration mode.\nCertain C(show) commands in EdgeOS produce many lines of output and use a custom pager that can cause this module to hang.  If the value of the environment variable C(ANSIBLE_EDGEOS_TERMINAL_LENGTH) is not set, the default number of 10000 is used.\nThis is a network module and requires C(connection: network_cli) in order to work properly.\nFor more information please see the L(Network Guide,../network/getting_started/index.html).",
      "has_action": false,
      "notes": "Tested against EdgeOS 1.9.7\nRunning C(show system boot-messages all) will cause the module to hang since EdgeOS is using a custom pager setting to display the output of that command.",
      "options": {
        "commands": {
          "aliases": [],
          "description": "The commands or ordered set of commands that should be run against the remote device. The output of the command is returned to the playbook. If the C(wait_for) argument is provided, the module is not returned until the condition is met or the number of retries is exceeded.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The number of seconds to wait between C(retries) of the command.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Used in conjunction with C(wait_for) to create match policy. If set to C(all), then all conditions in C(wait_for) must be met. If set to C(any), then only one condition must match.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Number of times a command should be tried before it is considered failed. The command is run on the target device and evaluated against the C(wait_for) conditionals.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "Causes the task to wait for a specific condition to be met before moving forward. If the condition is not met before the specified number of retries is exceeded, the task will fail.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run one or more commands on EdgeOS devices"
    },
    "examples": "\ntasks:\n  - name: Reboot the device\n    community.network.edgeos_command:\n      commands: reboot now\n\n  - name: Show the configuration for eth0 and eth1\n    community.network.edgeos_command:\n      commands: show interfaces ethernet {{ item }}\n    loop:\n      - eth0\n      - eth1\n"
  },
  "community.network.edgeos_config": {
    "doc": {
      "description": "This module provides configuration file management of EdgeOS devices. It provides arguments for managing both the configuration file and state of the active configuration. All configuration statements are based on `set` and `delete` commands in the device configuration.\nThis is a network module and requires the C(connection: network_cli) in order to work properly.\nFor more information please see the L(Network Guide,../network/getting_started/index.html).",
      "has_action": true,
      "notes": "Tested against EdgeOS 1.9.7\nSetting C(ANSIBLE_PERSISTENT_COMMAND_TIMEOUT) to 30 is recommended since the save command can take longer than the default of 10 seconds on some EdgeOS hardware.",
      "options": {
        "backup": {
          "aliases": [],
          "description": "The C(backup) argument will backup the current device's active configuration to the Ansible control host prior to making any changes. If the C(backup_options) value is not given, the backup file will be located in the backup folder in the playbook root directory or role root directory if the playbook is part of an ansible role. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "comment": {
          "aliases": [],
          "description": "Allows a commit description to be specified to be included when the configuration is committed. If the configuration is not changed or committed, this argument is ignored.",
          "default": "configured by edgeos_config",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The C(config) argument specifies the base configuration to use to compare against the desired configuration. If this value is not specified, the module will automatically retrieve the current active configuration from the remote device.",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [],
          "description": "The ordered set of configuration lines to be managed and compared with the existing configuration on the remote device.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The C(match) argument controls the method used to match against the current active configuration. By default, the desired config is matched against the active config and the deltas are loaded. If the C(match) argument is set to C(none) the active configuration is ignored and the configuration is always loaded.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "none"
          ],
          "suboptions": {}
        },
        "save": {
          "aliases": [],
          "description": "The C(save) argument controls whether or not changes made to the active configuration are saved to disk. This is independent of committing the config. When set to C(True), the active configuration is saved.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "The C(src) argument specifies the path to the source config file to load. The source config file can either be in bracket format or set format. The source file can include Jinja2 template variables.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage EdgeOS configuration on remote device"
    },
    "examples": "\n- name: Configure the remote device\n  community.network.edgeos_config:\n    lines:\n      - set system host-name {{ inventory_hostname }}\n      - set service lldp\n      - delete service dhcp-server\n\n- name: Backup and load from file\n  community.network.edgeos_config:\n    src: edgeos.cfg\n    backup: yes\n\n- name: Configurable backup path\n  community.network.edgeos_config:\n    src: edgeos.cfg\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.edgeos_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote device that is running EdgeOS. This module prepends all of the base network fact keys with U(ansible_net_<fact>). The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against EdgeOS 1.9.7",
      "options": {
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, default, config, and neighbors. Can specify a list of values to include a larger subset. Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from remote devices running EdgeOS"
    },
    "examples": "\n- name: Collect all facts from the device\n  community.network.edgeos_facts:\n    gather_subset: all\n\n- name: Collect only the config and default facts\n  community.network.edgeos_facts:\n    gather_subset: config\n\n- name: Collect everything exception the config\n  community.network.edgeos_facts:\n    gather_subset: \"!config\"\n"
  },
  "community.network.edgeswitch_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote device that is running Ubiquiti Edgeswitch.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against Edgeswitch 1.7.4",
      "options": {
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from remote devices running Edgeswitch"
    },
    "examples": "\n- name: Collect all facts from the device\n  community.network.edgeswitch_facts:\n    gather_subset: all\n\n- name: Collect only the running config and default facts\n  community.network.edgeswitch_facts:\n    gather_subset:\n      - config\n\n"
  },
  "community.network.edgeswitch_vlan": {
    "doc": {
      "description": "This module provides declarative management of VLANs on Ubiquiti Edgeswitch network devices.",
      "has_action": false,
      "notes": "Tested against edgeswitch 1.7.4\nThis module use native Ubiquiti vlan syntax and does not support switchport compatibility syntax. For clarity, it is strongly advised to not use both syntaxes on the same interface.\nEdgeswitch does not support deleting or changing name of VLAN 1\nAs auto_tag, auto_untag and auto_exclude are a kind of default setting for all interfaces, they are mutually exclusive",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of VLANs definitions.",
          "required": false,
          "suboptions": {}
        },
        "auto_exclude": {
          "aliases": [],
          "description": "Each of the switch interfaces will be excluded from I(vlan_id) unless defined in I(*_interfaces). This is a default setting for all switch interfaces.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_tag": {
          "aliases": [],
          "description": "Each of the switch interfaces will be set to accept and transmit untagged frames for I(vlan_id) unless defined in I(*_interfaces). This is a default setting for all switch interfaces.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_untag": {
          "aliases": [],
          "description": "Each of the switch interfaces will be set to accept untagged frames and transmit them tagged for I(vlan_id) unless defined in I(*_interfaces). This is a default setting for all switch interfaces.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "excluded_interfaces": {
          "aliases": [],
          "description": "List of interfaces that should be excluded of the VLAN. Accept range of interfaces.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VLAN.",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Purge VLANs not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "action on the VLAN configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tagged_interfaces": {
          "aliases": [],
          "description": "List of interfaces that should accept and transmit tagged frames for the VLAN. Accept range of interfaces.",
          "required": false,
          "suboptions": {}
        },
        "untagged_interfaces": {
          "aliases": [],
          "description": "List of interfaces that should accept untagged frames and transmit them tagged for the VLAN. Accept range of interfaces.",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "ID of the VLAN. Range 1-4093.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage VLANs on Ubiquiti Edgeswitch network devices"
    },
    "examples": "\n- name: Create vlan\n  community.network.edgeswitch_vlan:\n    vlan_id: 100\n    name: voice\n    action: present\n\n- name: Add interfaces to VLAN\n  community.network.edgeswitch_vlan:\n    vlan_id: 100\n    tagged_interfaces:\n      - 0/1\n      - 0/4-0/6\n\n- name: Setup three vlans and delete the rest\n  community.network.edgeswitch_vlan:\n    purge: true\n    aggregate:\n      - { vlan_id: 1, name: default, auto_untag: true, excluded_interfaces: 0/45-0/48 }\n      - { vlan_id: 100, name: voice, auto_tag: true }\n      - { vlan_id: 200, name: video, auto_exclude: true, untagged_interfaces: 0/45-0/48, tagged_interfaces: 0/49 }\n\n- name: Delete vlan\n  community.network.edgeswitch_vlan:\n    vlan_id: 100\n    state: absent\n"
  },
  "community.network.enos_command": {
    "doc": {
      "description": "Sends arbitrary commands to an ENOS node and returns the results read from the device. The C(enos_command) module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.",
      "has_action": false,
      "options": {
        "auth_pass": {
          "aliases": [],
          "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
          "required": false,
          "suboptions": {}
        },
        "authorize": {
          "aliases": [],
          "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run arbitrary commands on Lenovo ENOS devices"
    },
    "examples": "\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n---\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    port: 22\n    username: admin\n    password: admin\n    timeout: 30\n\n---\n- name: Test contains operator\n  community.network.enos_command:\n    commands:\n      - show version\n      - show system memory\n    wait_for:\n      - \"result[0] contains 'Lenovo'\"\n      - \"result[1] contains 'MemFree'\"\n    provider: \"{{ cli }}\"\n  register: result\n\n- ansible.builtin.assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n\n- name: Get output for single command\n  community.network.enos_command:\n    commands: ['show version']\n    provider: \"{{ cli }}\"\n  register: result\n\n- ansible.builtin.assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n\n- name: Get output for multiple commands\n  community.network.enos_command:\n    commands:\n      - show version\n      - show interface information\n    provider: \"{{ cli }}\"\n  register: result\n\n- ansible.builtin.assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n      - \"result.stdout | length == 2\"\n"
  },
  "community.network.enos_config": {
    "doc": {
      "description": "Lenovo ENOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with ENOS configuration sections in a deterministic way.",
      "has_action": false,
      "notes": "Tested against ENOS 8.4.1",
      "options": {
        "admin": {
          "aliases": [],
          "description": "Enters into administration configuration mode for making config changes to the device.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "auth_pass": {
          "aliases": [],
          "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
          "required": false,
          "suboptions": {}
        },
        "authorize": {
          "aliases": [],
          "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Allows a commit description to be specified to be included when the configuration is committed.  If the configuration is not changed or committed, this argument is ignored.",
          "default": "configured by enos_config",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block",
            "config"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Lenovo ENOS configuration sections"
    },
    "examples": "\n- name: Configure top level configuration\n  community.network.enos_config:\n    \"lines: hostname {{ inventory_hostname }}\"\n\n- name: Configure interface settings\n  community.network.enos_config:\n    lines:\n      - enable\n      - ip ospf enable\n    parents: interface ip 13\n\n- name: Load a config from disk and replace the current config\n  community.network.enos_config:\n    src: config.cfg\n    backup: yes\n\n- name: Configurable backup path\n  community.network.enos_config:\n    src: config.cfg\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.enos_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote Lenovo device running on ENOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against ENOS 8.4.1",
      "options": {
        "auth_pass": {
          "aliases": [],
          "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
          "required": false,
          "suboptions": {}
        },
        "authorize": {
          "aliases": [],
          "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Collect facts from remote devices running Lenovo ENOS"
    },
    "examples": "\nTasks: The following are examples of using the module enos_facts.\n---\n- name: Test Enos Facts\n  community.network.enos_facts:\n    provider={{ cli }}\n\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: 22\n      username: admin\n      password: admin\n      transport: cli\n      timeout: 30\n      authorize: True\n      auth_pass:\n\n---\n# Collect all facts from the device\n- community.network.enos_facts:\n    gather_subset: all\n    provider: \"{{ cli }}\"\n\n# Collect only the config and default facts\n- community.network.enos_facts:\n    gather_subset:\n      - config\n    provider: \"{{ cli }}\"\n\n# Do not collect hardware facts\n- community.network.enos_facts:\n    gather_subset:\n      - \"!hardware\"\n    provider: \"{{ cli }}\"\n\n"
  },
  "community.network.eric_eccli_command": {
    "doc": {
      "description": "Sends arbitrary commands to an ERICSSON eccli node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module also support running commands in configuration mode in raw command style.",
      "has_action": false,
      "notes": "Tested against IPOS 19.3\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Ericsson devices see the Ericsson documents.\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nFor more information please see the L(ERIC_ECCLI Platform Options guide,../network/user_guide/platform_eric_eccli.html).",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote ECCLI device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired. If a command sent to the device requires answering a prompt, it is possible to pass a dict containing I(command), I(answer) and I(prompt). Common answers are 'y' or \"\\r\" (carriage return, must be double quotes). See examples.",
          "type": "list",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [
            "waitfor"
          ],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "type": "list",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run commands on remote devices running ERICSSON ECCLI"
    },
    "examples": "\ntasks:\n  - name: Run show version on remote devices\n    community.network.eric_eccli_command:\n      commands: show version\n\n  - name: Run show version and check to see if output contains IPOS\n    community.network.eric_eccli_command:\n      commands: show version\n      wait_for: result[0] contains IPOS\n\n  - name: Run multiple commands on remote nodes\n    community.network.eric_eccli_command:\n      commands:\n        - show version\n        - show running-config interfaces\n\n  - name: Run multiple commands and evaluate the output\n    community.network.eric_eccli_command:\n      commands:\n        - show version\n        - show running-config interfaces\n      wait_for:\n        - result[0] contains IPOS\n        - result[1] contains management\n"
  },
  "community.network.exos_command": {
    "doc": {
      "description": "Sends arbitrary commands to an Extreme EXOS device and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running configuration commands. Please use M(community.network.exos_config) to configure EXOS devices.",
      "has_action": false,
      "notes": "If a command sent to the device requires answering a prompt, it is possible to pass a dict containing I(command), I(answer) and I(prompt). See examples.",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote EXOS device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run commands on remote devices running Extreme EXOS"
    },
    "examples": "\ntasks:\n  - name: Run show version on remote devices\n    community.network.exos_command:\n      commands: show version\n  - name: Run show version and check to see if output contains ExtremeXOS\n    community.network.exos_command:\n      commands: show version\n      wait_for: result[0] contains ExtremeXOS\n  - name: Run multiple commands on remote nodes\n    community.network.exos_command:\n      commands:\n        - show version\n        - show ports no-refresh\n  - name: Run multiple commands and evaluate the output\n    community.network.exos_command:\n      commands:\n        - show version\n        - show ports no-refresh\n      wait_for:\n        - result[0] contains ExtremeXOS\n        - result[1] contains 20\n  - name: Run command that requires answering a prompt\n    community.network.exos_command:\n      commands:\n        - command: 'clear license-info'\n          prompt: 'Are you sure.*'\n          answer: 'Yes'\n"
  },
  "community.network.exos_config": {
    "doc": {
      "description": "Extreme EXOS configurations use a simple flat text file syntax. This module provides an implementation for working with EXOS configuration lines in a deterministic way.",
      "has_action": false,
      "notes": "Tested against EXOS version 22.6.0b19",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "defaults": {
          "aliases": [],
          "description": "This argument specifies whether or not to collect all defaults when getting the remote device running config.  When enabled, the module will get the current config by issuing the command C(show running-config all).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "diff_against": {
          "aliases": [],
          "description": "When using the C(ansible-playbook --diff) command line argument the module can generate diffs against different sources.\nWhen this option is configure as I(startup), the module will return the diff of the running-config against the startup-config.\nWhen this option is configured as I(intended), the module will return the diff of the running-config against the configuration provided in the C(intended_config) argument.\nWhen this option is configured as I(running), the module will return the before and after diff of the running-config with respect to any changes made to the device configuration.",
          "default": "running",
          "required": false,
          "choices": [
            "running",
            "startup",
            "intended"
          ],
          "suboptions": {}
        },
        "diff_ignore_lines": {
          "aliases": [],
          "description": "Use this argument to specify one or more lines that should be ignored during the diff.  This is used for lines in the configuration that are automatically updated by the system.  This argument takes a list of regular expressions or exact line matches.",
          "required": false,
          "suboptions": {}
        },
        "intended_config": {
          "aliases": [],
          "description": "The C(intended_config) provides the master configuration that the node should conform to and is used to check the final running-config against.   This argument will not modify any settings on the remote device and is strictly used to check the compliance of the current device's configuration against.  When specifying this argument, the task should also modify the C(diff_against) value and set it to I(intended).",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "running_config": {
          "aliases": [
            "config"
          ],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(running_config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "save_when": {
          "aliases": [],
          "description": "When changes are made to the device running-configuration, the changes are not copied to non-volatile storage by default.  Using this argument will change that behavior.  If the argument is set to I(always), then the running-config will always be copied to the startup-config and the I(modified) flag will always be set to True.  If the argument is set to I(modified), then the running-config will only be copied to the startup-config if it has changed since the last save to startup-config.  If the argument is set to I(never), the running-config will never be copied to the startup-config.  If the argument is set to I(changed), then the running-config will only be copied to the startup-config if the task has made a change.",
          "default": "never",
          "required": false,
          "choices": [
            "always",
            "never",
            "modified",
            "changed"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Extreme Networks EXOS configuration sections"
    },
    "examples": "\n- name: Configure SNMP system name\n  community.network.exos_config:\n    lines: configure snmp sysName \"{{ inventory_hostname }}\"\n\n- name: Configure interface settings\n  community.network.exos_config:\n    lines:\n      - configure ports 2 description-string \"Master Uplink\"\n    backup: yes\n\n- name: Check the running-config against master config\n  community.network.exos_config:\n    diff_against: intended\n    intended_config: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: Check the startup-config against the running-config\n  community.network.exos_config:\n    diff_against: startup\n    diff_ignore_lines:\n      - ntp clock .*\n\n- name: Save running to startup when modified\n  community.network.exos_config:\n    save_when: modified\n\n- name: Configurable backup path\n  community.network.exos_config:\n    lines:\n      - configure ports 2 description-string \"Master Uplink\"\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.exos_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote device that is running EXOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against EXOS 22.5.1.7",
      "options": {
        "gather_network_resources": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all and the resources like interfaces, vlans etc. Can specify a list of values to include a larger subset. Values can also be used with an initial C(!) to specify that a specific subset should not be collected. Valid subsets are 'all', 'lldp_global'.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "['!config']",
          "type": "list",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from devices running Extreme EXOS"
    },
    "examples": "\n  - name:  Gather all legacy facts\n    community.network.exos_facts:\n      gather_subset: all\n\n  - name: Gather only the config and default facts\n    community.network.exos_facts:\n      gather_subset: config\n\n  - name: Do not gather hardware facts\n    community.network.exos_facts:\n      gather_subset: \"!hardware\"\n\n  - name: Gather legacy and resource facts\n    community.network.exos_facts:\n      gather_subset: all\n      gather_network_resources: all\n\n  - name: Gather only the lldp global resource facts and no legacy facts\n    community.network.exos_facts:\n      gather_subset:\n        - '!all'\n        - '!min'\n      gather_network_resource:\n        - lldp_global\n\n  - name: Gather lldp global resource and minimal legacy facts\n    community.network.exos_facts:\n      gather_subset: min\n      gather_network_resource: lldp_global\n"
  },
  "community.network.exos_l2_interfaces": {
    "doc": {
      "description": "This module provides declarative management of L2 interfaces on Extreme Networks EXOS network devices.",
      "has_action": false,
      "notes": "Tested against EXOS 30.2.1.8\nThis module works with connection C(httpapi). See L(EXOS Platform Options,../network/user_guide/platform_exos.html)",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of L2 interfaces options",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "access": {
              "aliases": [],
              "description": "Switchport mode access command to configure the interface as a layer 2 access.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "vlan": {
                  "aliases": [],
                  "description": "Configure given VLAN in access port. It's used as the access VLAN ID.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "name": {
              "aliases": [],
              "description": "Name of the interface",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "trunk": {
              "aliases": [],
              "description": "Switchport mode trunk command to configure the interface as a Layer 2 trunk.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "native_vlan": {
                  "aliases": [],
                  "description": "Native VLAN to be configured in trunk port. It's used as the trunk native VLAN ID.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "trunk_allowed_vlans": {
                  "aliases": [],
                  "description": "List of allowed VLANs in a given trunk port. These are the only VLANs that will be configured on the trunk.",
                  "type": "list",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage L2 interfaces on Extreme Networks EXOS devices.",
      "version_added": "0.2.0"
    },
    "examples": "\n# Using deleted\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 10\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 1,\n#               \"trunk-vlans\": [\n#                 10\n#               ]\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 10,\n#               \"trunk-vlans\": [\n#                 20,\n#                 30\n#               ]\n#             }\n#           }\n#         }\n#       }\n#     ]\n#   }\n# }\n\n- name: Delete L2 interface configuration for the given arguments\n  community.network.exos_l2_interfaces:\n    config:\n      - name: '3'\n    state: deleted\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 10\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"2\",\n#         \"trunk\": {\n#             \"native_vlan\": 1,\n#             \"trunk_allowed_vlans\": [\n#                 10\n#             ]\n#         }\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"3\",\n#         \"trunk\": {\n#             \"native_vlan\": 10,\n#             \"trunk_allowed_vlans\": [\n#                 20,\n#                 30\n#             ]\n#         }\n#     }\n# ],\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 1,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=3/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     }\n# ],\n#\n# \"after\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 10\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"2\",\n#         \"trunk\": {\n#             \"native_vlan\": 1,\n#             \"trunk_allowed_vlans\": [\n#                 10\n#             ]\n#         }\n#     },\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"3\",\n#         \"trunk\": null\n#     }\n# ]\n#\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 10\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 1,\n#               \"trunk-vlans\": [\n#                 10\n#               ]\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             }\n#           }\n#         }\n#       }\n#     ]\n#   }\n# }\n\n\n# Using deleted without any config passed\n#\"(NOTE: This will delete all of configured resource module attributes from each configured interface)\"\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 10\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 1,\n#               \"trunk-vlans\": [\n#                 10\n#               ]\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 10,\n#               \"trunk-vlans\": [\n#                 20,\n#                 30\n#               ]\n#             }\n#           }\n#         }\n#       }\n#     ]\n#   }\n# }\n\n- name: Delete L2 interface configuration for the given arguments\n  community.network.exos_l2_interfaces:\n    state: deleted\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 10\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"2\",\n#         \"trunk\": {\n#             \"native_vlan\": 1,\n#             \"trunk_allowed_vlans\": [\n#                 10\n#             ]\n#         }\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"3\",\n#         \"trunk\": {\n#             \"native_vlan\": 10,\n#             \"trunk_allowed_vlans\": [\n#                 20,\n#                 30\n#             ]\n#         }\n#     }\n# ],\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 1,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=1/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     },\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 1,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=2/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     },\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 1,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=3/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     }\n# ],\n#\n# \"after\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"2\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"3\",\n#         \"trunk\": null\n#     }\n# ]\n#\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             }\n#           }\n#         }\n#       }\n#     ]\n#   }\n# }\n\n\n# Using merged\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#\t  \"openconfig-if-ethernet:ethernet\": {\n#\t    \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             },\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             },\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             },\n#           }\n#         }\n#       },\n#     ]\n#   }\n# }\n\n- name: Merge provided configuration with device configuration\n  community.network.exos_l2_interfaces:\n    config:\n      - access:\n          vlan: 10\n        name: '1'\n      - name: '2'\n        trunk:\n          trunk_allowed_vlans: 10\n      - name: '3'\n        trunk:\n          native_vlan: 10\n          trunk_allowed_vlans: 20\n    state: merged\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"2\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"3\",\n#         \"trunk\": null\n#     }\n# ],\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 10,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=1/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     },\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"trunk-vlans\": [10],\n#            \"interface-mode\": \"TRUNK\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=2/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     },\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"native-vlan\": 10,\n#\t     \"trunk-vlans\": [20],\n#            \"interface-mode\": \"TRUNK\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=3/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     }\n# ],\n#\n# \"after\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 10\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"2\",\n#         \"trunk\": {\n#             \"native_vlan\": 1,\n#             \"trunk_allowed_vlans\": [\n#                 10\n#             ]\n#         }\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"3\",\n#         \"trunk\": {\n#             \"native_vlan\": 10,\n#             \"trunk_allowed_vlans\": [\n#                 20\n#             ]\n#         }\n#     }\n# ]\n#\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#\t  \"openconfig-if-ethernet:ethernet\": {\n#\t    \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 10\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#\t\t\"native-vlan\": 1,\n#               \"trunk-vlans\": [\n#                 10\n#               ]\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#\t\t\"native-vlan\": 10,\n#               \"trunk-vlans\": [\n#\t\t  20\n#               ]\n#             }\n#           }\n#         }\n#       },\n#     ]\n#   }\n# }\n\n\n# Using overridden\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 10\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 1,\n#               \"trunk-vlans\": [\n#                 10\n#               ]\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 10,\n#               \"trunk-vlans\": [\n#                 20,\n#\t\t  30\n#               ]\n#             }\n#           }\n#         }\n#       }\n#     ]\n#   }\n# }\n\n- name: Overrride device configuration of all L2 interfaces with provided configuration\n  community.network.exos_l2_interfaces:\n    config:\n      - access:\n          vlan: 10\n        name: '2'\n    state: overridden\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 10\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"2\",\n#         \"trunk\": {\n#             \"native_vlan\": 1,\n#             \"trunk_allowed_vlans\": [\n#                 10\n#             ]\n#         }\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"3\",\n#         \"trunk\": {\n#             \"native_vlan\": 10,\n#             \"trunk_allowed_vlans\": [\n#                 20,\n#                 30\n#             ]\n#         }\n#     }\n# ],\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 1,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=1/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     },\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 10,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=2/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     }\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 1,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=3/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     }\n# ],\n#\n# \"after\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": {\n#             \"vlan\": 10\n#         },\n#         \"name\": \"2\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": {\n#             \"vlan\": 1\n#         },\n#         \"name\": \"3\",\n#         \"trunk\": null\n#     }\n# ]\n#\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 10\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 1\n#             }\n#           }\n#         }\n#       }\n#     ]\n#   }\n# }\n\n\n# Using replaced\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 10\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 20\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 1,\n#\t\t\"trunk-vlans\": [\n#\t\t  10\n#\t\t]\n#             }\n#           }\n#         }\n#       }\n#     ]\n#   }\n# }\n\n- name: Replace device configuration of listed L2 interfaces with provided configuration\n  community.network.exos_l2_interfaces:\n    config:\n      - access:\n          vlan: 20\n        name: '1'\n      - name: '2'\n        trunk:\n          trunk_allowed_vlans: 10\n      - name: '3'\n        trunk:\n          native_vlan: 10\n          trunk_allowed_vlan: 20,30\n    state: replaced\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 10\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": {\n#             \"vlan\": 20\n#         },\n#         \"name\": \"2\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"3\",\n#         \"trunk\": {\n#             \"native_vlan\": 1,\n#             \"trunk_allowed_vlans\": [\n#                 10\n#             ]\n#         }\n#     }\n# ],\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"access-vlan\": 20,\n#            \"interface-mode\": \"ACCESS\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=1/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     },\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"trunk-vlans\": [10],\n#            \"interface-mode\": \"TRUNK\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=2/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     },\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:config\": {\n#            \"native-vlan\": 10,\n#            \"trunk-vlans\": [20, 30]\n#            \"interface-mode\": \"TRUNK\"\n#          }\n#        }\n#        \"method\": \"PATCH\",\n#        \"path\": \"rest/restconf/data/openconfig-interfaces:interfaces/interface=3/openconfig-if-ethernet:ethernet/openconfig-vlan:switched-vlan/config\"\n#     }\n# ],\n#\n# \"after\": [\n#     {\n#         \"access\": {\n#             \"vlan\": 20\n#         },\n#         \"name\": \"1\",\n#         \"trunk\": null\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"2\",\n#         \"trunk\": {\n#             \"native_vlan\": null,\n#             \"trunk_allowed_vlans\": [\n#                 10\n#             ]\n#         }\n#     },\n#     {\n#         \"access\": null,\n#         \"name\": \"3\",\n#         \"trunk\": {\n#             \"native_vlan\": 10,\n#             \"trunk_allowed_vlans\": [\n#                 20,\n#                 30\n#             ]\n#         }\n#     }\n# ]\n#\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-interfaces:interfaces/\n# method: GET\n# data:\n# {\n#   \"openconfig-interfaces:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"name\": \"1\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"ACCESS\",\n#               \"access-vlan\": 20\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"2\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"trunk-vlans\": [\n#\t\t  10\n# \t\t]\n#             }\n#           }\n#         }\n#       },\n#       {\n#         \"name\": \"3\",\n#         \"openconfig-if-ethernet:ethernet\": {\n#           \"openconfig-vlan:switched-vlan\": {\n#             \"config\": {\n#               \"interface-mode\": \"TRUNK\",\n#               \"native-vlan\": 10,\n#               \"trunk-vlans\": [\n#\t\t  20,\n# \t\t  30\n#\t\t]\n#             }\n#           }\n#         }\n#       }\n#     ]\n#   }\n# }\n\n\n"
  },
  "community.network.exos_lldp_global": {
    "doc": {
      "description": "This module configures and manages the Link Layer Discovery Protocol(LLDP) attributes on Extreme Networks EXOS platforms.",
      "has_action": false,
      "notes": "Tested against Extreme Networks EXOS version 30.2.1.8 on x460g2.\nThis module works with connection C(httpapi). See L(EXOS Platform Options,../network/user_guide/platform_exos.html)",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of LLDP options",
          "type": "dict",
          "required": false,
          "suboptions": {
            "interval": {
              "aliases": [],
              "description": "Frequency at which LLDP advertisements are sent (in seconds). By default - 30 seconds.",
              "default": "30",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "tlv_select": {
              "aliases": [],
              "description": "This attribute can be used to specify the TLVs that need to be sent in the LLDP packets. By default, only system name and system description is sent",
              "type": "dict",
              "required": false,
              "suboptions": {
                "management_address": {
                  "aliases": [],
                  "description": "Used to specify the management address in TLV messages",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "port_description": {
                  "aliases": [],
                  "description": "Used to specify the port description TLV",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "system_capabilities": {
                  "aliases": [],
                  "description": "Used to specify the system capabilities TLV",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "system_description": {
                  "aliases": [],
                  "description": "Used to specify the system description TLV",
                  "default": "True",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "system_name": {
                  "aliases": [],
                  "description": "Used to specify the system name TLV",
                  "default": "True",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "deleted"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Configure and manage Link Layer Discovery Protocol(LLDP) attributes on EXOS platforms."
    },
    "examples": "\n# Using merged\n\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig_lldp:lldp/config\n# method: GET\n# data:\n# {\n#   \"openconfig_lldp:config\": {\n#     \"enabled\": true,\n#     \"hello-timer\": 30,\n#     \"suppress-tlv-advertisement\": [\n#       \"PORT_DESCRIPTION\",\n#       \"SYSTEM_CAPABILITIES\",\n#       \"MANAGEMENT_ADDRESS\"\n#     ],\n#     \"system-description\": \"ExtremeXOS (X460G2-24t-10G4) version 30.2.1.8\"\n#     \"system-name\": \"X460G2-24t-10G4\"\n#   }\n# }\n\n- name: Merge provided LLDP configuration with device configuration\n  community.network.exos_lldp_global:\n    config:\n      interval: 10000\n      tlv_select:\n        system_capabilities: true\n    state: merged\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\": [\n#   {\n#     \"interval\": 30,\n#     \"tlv_select\": {\n#       \"system_name\": true,\n#       \"system_description\": true\n#       \"port_description\": false,\n#       \"management_address\": false,\n#       \"system_capabilities\": false\n#     }\n#   }\n# ]\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#           \"openconfig_lldp:config\": {\n#             \"hello-timer\": 10000,\n#             \"suppress-tlv-advertisement\": [\n#               \"PORT_DESCRIPTION\",\n#               \"MANAGEMENT_ADDRESS\"\n#             ]\n#           }\n#         },\n#        \"method\": \"PATCH\",\n#        \"path\": \"/rest/restconf/data/openconfig_lldp:lldp/config\"\n#     }\n# ]\n#\n# \"after\": [\n#   {\n#     \"interval\": 10000,\n#     \"tlv_select\": {\n#       \"system_name\": true,\n#       \"system_description\": true,\n#       \"port_description\": false,\n#       \"management_address\": false,\n#       \"system_capabilities\": true\n#     }\n#   }\n# ]\n\n\n# After state:\n# -------------\n# path: /rest/restconf/data/openconfig_lldp:lldp/config\n# method: GET\n# data:\n# {\n#   \"openconfig_lldp:config\": {\n#     \"enabled\": true,\n#     \"hello-timer\": 10000,\n#     \"suppress-tlv-advertisement\": [\n#       \"PORT_DESCRIPTION\",\n#       \"MANAGEMENT_ADDRESS\"\n#     ],\n#     \"system-description\": \"ExtremeXOS (X460G2-24t-10G4) version 30.2.1.8\"\n#     \"system-name\": \"X460G2-24t-10G4\"\n#   }\n# }\n\n\n# Using replaced\n\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig_lldp:lldp/config\n# method: GET\n# data:\n# {\n#   \"openconfig_lldp:config\": {\n#     \"enabled\": true,\n#     \"hello-timer\": 30,\n#     \"suppress-tlv-advertisement\": [\n#       \"PORT_DESCRIPTION\",\n#       \"SYSTEM_CAPABILITIES\",\n#       \"MANAGEMENT_ADDRESS\"\n#     ],\n#     \"system-description\": \"ExtremeXOS (X460G2-24t-10G4) version 30.2.1.8\"\n#     \"system-name\": \"X460G2-24t-10G4\"\n#   }\n# }\n\n- name: Replace device configuration with provided LLDP configuration\n  community.network.exos_lldp_global:\n    config:\n      interval: 10000\n      tlv_select:\n        system_capabilities: true\n    state: replaced\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\": [\n#   {\n#     \"interval\": 30,\n#     \"tlv_select\": {\n#       \"system_name\": true,\n#       \"system_description\": true\n#       \"port_description\": false,\n#       \"management_address\": false,\n#       \"system_capabilities\": false\n#     }\n#   }\n# ]\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#           \"openconfig_lldp:config\": {\n#             \"hello-timer\": 10000,\n#             \"suppress-tlv-advertisement\": [\n#               \"SYSTEM_NAME\",\n#               \"SYSTEM_DESCRIPTION\",\n#               \"PORT_DESCRIPTION\",\n#               \"MANAGEMENT_ADDRESS\"\n#             ]\n#           }\n#         },\n#        \"method\": \"PATCH\",\n#        \"path\": \"/rest/restconf/data/openconfig_lldp:lldp/config\"\n#     }\n# ]\n#\n# \"after\": [\n#   {\n#     \"interval\": 10000,\n#     \"tlv_select\": {\n#       \"system_name\": false,\n#       \"system_description\": false,\n#       \"port_description\": false,\n#       \"management_address\": false,\n#       \"system_capabilities\": true\n#     }\n#   }\n# ]\n\n\n# After state:\n# -------------\n# path: /rest/restconf/data/openconfig_lldp:lldp/config\n# method: GET\n# data:\n# {\n#   \"openconfig_lldp:config\": {\n#     \"enabled\": true,\n#     \"hello-timer\": 10000,\n#     \"suppress-tlv-advertisement\": [\n#       \"SYSTEM_NAME\",\n#       \"SYSTEM_DESCRIPTION\",\n#       \"PORT_DESCRIPTION\",\n#       \"MANAGEMENT_ADDRESS\"\n#     ],\n#     \"system-description\": \"ExtremeXOS (X460G2-24t-10G4) version 30.2.1.8\"\n#     \"system-name\": \"X460G2-24t-10G4\"\n#   }\n# }\n\n\n# Using deleted\n\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig_lldp:lldp/config\n# method: GET\n# data:\n# {\n#   \"openconfig_lldp:config\": {\n#     \"enabled\": true,\n#     \"hello-timer\": 10000,\n#     \"suppress-tlv-advertisement\": [\n#       \"SYSTEM_CAPABILITIES\",\n#       \"MANAGEMENT_ADDRESS\"\n#     ],\n#     \"system-description\": \"ExtremeXOS (X460G2-24t-10G4) version 30.2.1.8\"\n#     \"system-name\": \"X460G2-24t-10G4\"\n#   }\n# }\n\n- name: Delete attributes of given LLDP service (This won't delete the LLDP service itself)\n  community.network.exos_lldp_global:\n    config:\n    state: deleted\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\": [\n#   {\n#     \"interval\": 10000,\n#     \"tlv_select\": {\n#       \"system_name\": true,\n#       \"system_description\": true,\n#       \"port_description\": true,\n#       \"management_address\": false,\n#       \"system_capabilities\": false\n#     }\n#   }\n# ]\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#           \"openconfig_lldp:config\": {\n#             \"hello-timer\": 30,\n#             \"suppress-tlv-advertisement\": [\n#               \"SYSTEM_CAPABILITIES\",\n#               \"PORT_DESCRIPTION\",\n#               \"MANAGEMENT_ADDRESS\"\n#             ]\n#           }\n#         },\n#        \"method\": \"PATCH\",\n#        \"path\": \"/rest/restconf/data/openconfig_lldp:lldp/config\"\n#     }\n# ]\n#\n# \"after\": [\n#   {\n#     \"interval\": 30,\n#     \"tlv_select\": {\n#       \"system_name\": true,\n#       \"system_description\": true,\n#       \"port_description\": false,\n#       \"management_address\": false,\n#       \"system_capabilities\": false\n#     }\n#   }\n# ]\n\n\n# After state:\n# -------------\n# path: /rest/restconf/data/openconfig_lldp:lldp/config\n# method: GET\n# data:\n# {\n#   \"openconfig_lldp:config\": {\n#     \"enabled\": true,\n#     \"hello-timer\": 30,\n#     \"suppress-tlv-advertisement\": [\n#       \"SYSTEM_CAPABILITIES\",\n#       \"PORT_DESCRIPTION\",\n#       \"MANAGEMENT_ADDRESS\"\n#     ],\n#     \"system-description\": \"ExtremeXOS (X460G2-24t-10G4) version 30.2.1.8\"\n#     \"system-name\": \"X460G2-24t-10G4\"\n#   }\n# }\n\n\n"
  },
  "community.network.exos_lldp_interfaces": {
    "doc": {
      "description": "This module manages link layer discovery protocol (LLDP) attributes of interfaces on Extreme Networks EXOS platforms.",
      "has_action": false,
      "options": {
        "config": {
          "aliases": [],
          "description": "The list of link layer discovery protocol interface attribute configurations",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "This is a boolean value to control disabling of LLDP on the interface C(name)",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the interface LLDP needs to be configured on.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage link layer discovery protocol (LLDP) attributes of interfaces on EXOS platforms.",
      "version_added": "0.2.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-lldp:lldp/interfaces?depth=4\n# method: GET\n# data:\n# {\n#   \"openconfig-lldp:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"1\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"2\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"3\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"4\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"5\"\n#         }\n#       }\n#     ]\n#   }\n# }\n\n- name: Merge provided configuration with device configuration\n  community.network.exos_lldp_interfaces:\n    config:\n      - name: '2'\n        enabled: false\n      - name: '5'\n        enabled: true\n    state: merged\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\":\n#    - name: '1'\n#      enabled: True\n#    - name: '2'\n#      enabled: True\n#    - name: '3'\n#      enabled: False\n#    - name: '4'\n#      enabled: True\n#    - name: '5'\n#      enabled: False\n#\n# \"requests\": [\n#     {\n#         \"data\": |\n#         {\n#           \"openconfig-lldp:config\": {\n#             \"enabled\": false,\n#             \"name\": \"2\"\n#           }\n#         }\n#         \"method\": \"PATCH\",\n#         \"path\": \"/rest/restconf/data/openconfig-lldp:lldp/interfaces/interface=2/config\"\n#     },\n#     {\n#         \"data\": |\n#         {\n#           \"openconfig-lldp:config\": {\n#             \"enabled\": true,\n#             \"name\": \"5\"\n#           }\n#         }\n#         \"method\": \"PATCH\",\n#         \"path\": \"/rest/restconf/data/openconfig-lldp:lldp/interfaces/interface=5/config\"\n#     }\n# ]\n#\n# \"after\":\n#    - name: '1'\n#      enabled: True\n#    - name: '2'\n#      enabled: False\n#    - name: '3'\n#      enabled: False\n#    - name: '4'\n#      enabled: True\n#    - name: '5'\n#      enabled: True\n\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-lldp:lldp/interfaces?depth=4\n# method: GET\n# data:\n# {\n#   \"openconfig-lldp:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"1\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"2\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"3\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"4\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"5\"\n#         }\n#       }\n#     ]\n#   }\n# }\n\n\n# Using replaced\n\n# Before state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-lldp:lldp/interfaces?depth=4\n# method: GET\n# data:\n# {\n#   \"openconfig-lldp:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"1\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"2\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"3\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"4\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"5\"\n#         }\n#       }\n#     ]\n#   }\n# }\n\n- name: Replaces device configuration of listed lldp_interfaces with provided configuration\n  community.network.exos_lldp_interfaces:\n    config:\n      - name: '1'\n        enabled: false\n      - name: '3'\n        enabled: true\n    state: merged\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\":\n#    - name: '1'\n#      enabled: True\n#    - name: '2'\n#      enabled: True\n#    - name: '3'\n#      enabled: False\n#    - name: '4'\n#      enabled: True\n#    - name: '5'\n#      enabled: False\n#\n# \"requests\": [\n#     {\n#         \"data\": |\n#         {\n#           \"openconfig-lldp:config\": {\n#             \"enabled\": false,\n#             \"name\": \"1\"\n#           }\n#         }\n#         \"method\": \"PATCH\",\n#         \"path\": \"/rest/restconf/data/openconfig-lldp:lldp/interfaces/interface=1/config\"\n#     },\n#     {\n#         \"data\": |\n#         {\n#           \"openconfig-lldp:config\": {\n#             \"enabled\": true,\n#             \"name\": \"3\"\n#           }\n#         }\n#         \"method\": \"PATCH\",\n#         \"path\": \"/rest/restconf/data/openconfig-lldp:lldp/interfaces/interface=3/config\"\n#     }\n# ]\n#\n# \"after\":\n#    - name: '1'\n#      enabled: False\n#    - name: '2'\n#      enabled: True\n#    - name: '3'\n#      enabled: True\n#    - name: '4'\n#      enabled: True\n#    - name: '5'\n#      enabled: False\n\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-lldp:lldp/interfaces?depth=4\n# method: GET\n# data:\n# {\n#   \"openconfig-lldp:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"1\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"2\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"3\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"4\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"5\"\n#         }\n#       }\n#     ]\n#   }\n# }\n\n\n# Using deleted\n\n# Before state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-lldp:lldp/interfaces?depth=4\n# method: GET\n# data:\n# {\n#   \"openconfig-lldp:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"1\"\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"2\"\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"3\"\n#         },\n#       }\n#     ]\n#   }\n# }\n\n- name: Delete lldp interface configuration (this will not delete other lldp configuration)\n  community.network.exos_lldp_interfaces:\n    config:\n      - name: '1'\n      - name: '3'\n    state: deleted\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\":\n#    - name: '1'\n#      enabled: False\n#    - name: '2'\n#      enabled: False\n#    - name: '3'\n#      enabled: False\n#\n# \"requests\": [\n#     {\n#         \"data\": |\n#         {\n#           \"openconfig-lldp:config\": {\n#             \"enabled\": true,\n#             \"name\": \"1\"\n#           }\n#         }\n#         \"method\": \"PATCH\",\n#         \"path\": \"/rest/restconf/data/openconfig-lldp:lldp/interfaces/interface=1/config\"\n#     },\n#     {\n#         \"data\": |\n#         {\n#           \"openconfig-lldp:config\": {\n#             \"enabled\": true,\n#             \"name\": \"3\"\n#           }\n#         }\n#         \"method\": \"PATCH\",\n#         \"path\": \"/rest/restconf/data/openconfig-lldp:lldp/interfaces/interface=3/config\"\n#     }\n# ]\n#\n# \"after\":\n#    - name: '1'\n#      enabled: True\n#    - name: '2'\n#      enabled: False\n#    - name: '3'\n#      enabled: True\n#\n#  After state:\n# -------------\n# path: /rest/restconf/data/openconfig-lldp:lldp/interfaces?depth=4\n# method: GET\n# data:\n# {\n#   \"openconfig-lldp:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"1\"\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"2\"\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"3\"\n#         },\n#       }\n#     ]\n#   }\n# }\n\n\n# Using overridden\n\n# Before state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-lldp:lldp/interfaces?depth=4\n# method: GET\n# data:\n# {\n#   \"openconfig-lldp:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"1\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"2\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"3\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"4\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": false,\n#           \"name\": \"5\"\n#         }\n#       }\n#     ]\n#   }\n# }\n\n- name: Override device configuration of all lldp_interfaces with provided configuration\n  community.network.exos_lldp_interfaces:\n    config:\n      - name: '3'\n        enabled: true\n    state: overridden\n\n# Module Execution Results:\n# -------------------------\n#\n# \"before\":\n#    - name: '1'\n#      enabled: True\n#    - name: '2'\n#      enabled: True\n#    - name: '3'\n#      enabled: False\n#    - name: '4'\n#      enabled: True\n#    - name: '5'\n#      enabled: False\n#\n# \"requests\": [\n#     {\n#         \"data\": |\n#         {\n#           \"openconfig-lldp:config\": {\n#             \"enabled\": true,\n#             \"name\": \"5\"\n#           }\n#         }\n#         \"method\": \"PATCH\",\n#         \"path\": \"/rest/restconf/data/openconfig-lldp:lldp/interfaces/interface=5/config\"\n#     },\n#     {\n#         \"data\": |\n#         {\n#           \"openconfig-lldp:config\": {\n#             \"enabled\": true,\n#             \"name\": \"3\"\n#           }\n#         }\n#         \"method\": \"PATCH\",\n#         \"path\": \"/rest/restconf/data/openconfig-lldp:lldp/interfaces/interface=3/config\"\n#     }\n# ]\n#\n# \"after\":\n#    - name: '1'\n#      enabled: True\n#    - name: '2'\n#      enabled: True\n#    - name: '3'\n#      enabled: True\n#    - name: '4'\n#      enabled: True\n#    - name: '5'\n#      enabled: True\n\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-lldp:lldp/interfaces?depth=4\n# method: GET\n# data:\n# {\n#   \"openconfig-lldp:interfaces\": {\n#     \"interface\": [\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"1\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"2\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"3\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"4\"\n#         }\n#       },\n#       {\n#         \"config\": {\n#           \"enabled\": true,\n#           \"name\": \"5\"\n#         }\n#       }\n#     ]\n#   }\n# }\n\n\n"
  },
  "community.network.exos_vlans": {
    "doc": {
      "description": "This module provides declarative management of VLANs on Extreme Networks EXOS network devices.",
      "has_action": false,
      "notes": "Tested against EXOS 30.2.1.8\nThis module works with connection C(httpapi). See L(EXOS Platform Options,../network/user_guide/platform_exos.html)",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of VLANs options",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Ascii name of the VLAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Operational state of the VLAN",
              "default": "active",
              "type": "str",
              "required": false,
              "choices": [
                "active",
                "suspend"
              ],
              "suboptions": {}
            },
            "vlan_id": {
              "aliases": [],
              "description": "ID of the VLAN. Range 1-4094",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage VLANs on Extreme Networks EXOS devices.",
      "version_added": "0.2.0"
    },
    "examples": "\n# Using deleted\n\n# Before state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-vlan:vlans/\n# method: GET\n# data:\n# {\n#   \"openconfig-vlan:vlans\": {\n#     \"vlan\": [\n#       {\n#         \"config\": {\n#           \"name\": \"Default\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 1\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_10\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 10\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_20\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 20\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_30\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 30\n#         },\n#       }\n#     ]\n#   }\n# }\n\n- name: Delete attributes of given VLANs\n  community.network.exos_vlans:\n    config:\n      - vlan_id: 10\n      - vlan_id: 20\n      - vlan_id: 30\n    state: deleted\n\n# Module Execution Results:\n# -------------------------\n#\n# \"after\": [\n#     {\n#         \"name\": \"Default\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 1\n#     }\n# ],\n#\n# \"before\": [\n#     {\n#         \"name\": \"Default\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 1\n#     },\n#     {\n#         \"name\": \"vlan_10\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 10\n#     },\n#     {\n#         \"name\": \"vlan_20\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 20\n#     }\n#     {\n#         \"name\": \"vlan_30\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 30\n#     }\n# ],\n#\n# \"requests\": [\n#     {\n#        \"data\": null,\n#        \"method\": \"DELETE\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/vlan=10\"\n#     },\n#     {\n#\t \"data\": null,\n#        \"method\": \"DELETE\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/vlan=20\"\n#     },\n#     {\n#\t \"data\": null,\n#        \"method\": \"DELETE\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/vlan=30\"\n#     }\n# ]\n#\n#\n#  After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-vlan:vlans/\n# method: GET\n# data:\n# {\n#   \"openconfig-vlan:vlans\": {\n#     \"vlan\": [\n#       {\n#         \"config\": {\n#           \"name\": \"Default\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 1\n#         },\n#       }\n#     ]\n#   }\n# }\n\n\n# Using merged\n\n# Before state:\n# -------------\n# path: /rest/restconf/data/openconfig-vlan:vlans/\n# method: GET\n# data:\n# {\n#   \"openconfig-vlan:vlans\": {\n#     \"vlan\": [\n#       {\n#         \"config\": {\n#           \"name\": \"Default\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 1\n#         },\n#       }\n#     ]\n#   }\n# }\n\n- name: Merge provided configuration with device configuration\n  community.network.exos_vlans:\n    config:\n      - name: vlan_10\n        vlan_id: 10\n        state: active\n      - name: vlan_20\n        vlan_id: 20\n        state: active\n      - name: vlan_30\n        vlan_id: 30\n        state: active\n    state: merged\n\n# Module Execution Results:\n# -------------------------\n#\n# \"after\": [\n#     {\n#         \"name\": \"Default\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 1\n#     },\n#     {\n#         \"name\": \"vlan_10\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 10\n#     },\n#     {\n#         \"name\": \"vlan_20\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 20\n#     },\n#     {\n#         \"name\": \"vlan_30\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 30\n#     }\n# ],\n#\n# \"before\": [\n#     {\n#         \"name\": \"Default\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 1\n#     }\n# ],\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:vlan\": [\n#            {\n#              \"config\": {\n#                \"name\": \"vlan_10\",\n#                \"status\": \"ACTIVE\",\n#                \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#                \"vlan-id\": 10\n#             }\n#            }\n#          ]\n#        },\n#        \"method\": \"POST\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/\"\n#      },\n#      {\n#        \"data\": {\n#          \"openconfig-vlan:vlan\": [\n#            {\n#              \"config\": {\n#                \"name\": \"vlan_20\",\n#                \"status\": \"ACTIVE\",\n#                \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#                \"vlan-id\": 20\n#              }\n#            }\n#          ]\n#        },\n#        \"method\": \"POST\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/\"\n#      },\n#        \"data\": {\n#          \"openconfig-vlan:vlan\": [\n#            {\n#              \"config\": {\n#                \"name\": \"vlan_30\",\n#                \"status\": \"ACTIVE\",\n#                \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#                \"vlan-id\": 30\n#              }\n#            }\n#          ]\n#        },\n#        \"method\": \"POST\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/\"\n#      }\n#    ]\n#\n#\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-vlan:vlans/\n# method: GET\n# data:\n# {\n#   \"openconfig-vlan:vlans\": {\n#     \"vlan\": [\n#       {\n#         \"config\": {\n#           \"name\": \"Default\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 1\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_10\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 10\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_20\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 20\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_30\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 30\n#         },\n#       }\n#     ]\n#   }\n# }\n\n\n# Using overridden\n\n# Before state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-vlan:vlans/\n# method: GET\n# data:\n# {\n#   \"openconfig-vlan:vlans\": {\n#     \"vlan\": [\n#       {\n#         \"config\": {\n#           \"name\": \"Default\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 1\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_10\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 10\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_20\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 20\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_30\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 30\n#         },\n#       }\n#     ]\n#   }\n# }\n\n- name: Override device configuration of all VLANs with provided configuration\n  community.network.exos_vlans:\n    config:\n      - name: TEST_VLAN10\n        vlan_id: 10\n    state: overridden\n\n# Module Execution Results:\n# -------------------------\n#\n# \"after\": [\n#     {\n#         \"name\": \"Default\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 1\n#     },\n#     {\n#         \"name\": \"TEST_VLAN10\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 10\n#     },\n# ],\n#\n# \"before\": [\n#     {\n#         \"name\": \"Default\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 1\n#     },\n#     {\n#         \"name\": \"vlan_10\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 10\n#     },\n#     {\n#         \"name\": \"vlan_20\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 20\n#     },\n#     {\n#         \"name\": \"vlan_30\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 30\n#     }\n# ],\n#\n# \"requests\": [\n#     {\n#        \"data\": {\n#          \"openconfig-vlan:vlan\": {\n#\t     \"vlan\": [\n#              {\n#                \"config\": {\n#                  \"name\": \"TEST_VLAN10\",\n#                  \"status\": \"ACTIVE\",\n#                  \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#                  \"vlan-id\": 10\n#                }\n#              }\n#            ]\n#          }\n#        }\n#     },\n#        \"method\": \"PATCH\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/\"\n#     },\n#     {\n#\t \"data\": null,\n#        \"method\": \"DELETE\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/vlan=20\"\n#     },\n#     {\n#\t \"data\": null,\n#        \"method\": \"DELETE\",\n#        \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/vlan=30\"\n#     }\n#  ]\n#\n#\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-vlan:vlans/\n# method: GET\n# data:\n# {\n#   \"openconfig-vlan:vlans\": {\n#     \"vlan\": [\n#       {\n#         \"config\": {\n#           \"name\": \"Default\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 1\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"TEST_VLAN10\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 10\n#         },\n#       }\n#     ]\n#   }\n# }\n\n\n# Using replaced\n\n# Before state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-vlan:vlans/\n# method: GET\n# data:\n# {\n#   \"openconfig-vlan:vlans\": {\n#     \"vlan\": [\n#       {\n#         \"config\": {\n#           \"name\": \"Default\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 1\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_10\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 10\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_20\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 20\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_30\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 30\n#         },\n#       }\n#     ]\n#   }\n# }\n\n- name: Replaces device configuration of listed VLANs with provided configuration\n  community.network.exos_vlans:\n    config:\n      - name: Test_VLAN20\n        vlan_id: 20\n      - name: Test_VLAN30\n        vlan_id: 30\n    state: replaced\n\n# Module Execution Results:\n# -------------------------\n#\n# \"after\": [\n#     {\n#         \"name\": \"Default\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 1\n#     },\n#     {\n#         \"name\": \"vlan_10\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 10\n#     },\n#     {\n#         \"name\": \"TEST_VLAN20\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 20\n#     },\n#     {\n#         \"name\": \"TEST_VLAN30\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 30\n#     }\n# ],\n#\n# \"before\": [\n#     {\n#         \"name\": \"Default\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 1\n#     },\n#     {\n#         \"name\": \"vlan_10\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 10\n#     },\n#     {\n#         \"name\": \"vlan_20\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 20\n#     },\n#     {\n#         \"name\": \"vlan_30\",\n#         \"state\": \"active\",\n#         \"vlan_id\": 30\n#     }\n# ],\n#\n# \"requests\": [\n#    {\n#       \"data\": {\n#          \"openconfig-vlan:vlan\": {\n#             \"vlan\": [\n#                 {\n#                   \"config\": {\n#                      \"name\": \"TEST_VLAN20\",\n#                      \"status\": \"ACTIVE\",\n#                      \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#                      \"vlan-id\": 20\n#                   }\n#                   \"config\": {\n#                      \"name\": \"TEST_VLAN30\",\n#                      \"status\": \"ACTIVE\",\n#                      \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#                      \"vlan-id\": 30\n#                   }\n#                }\n#             ]\n#          },\n#       \"method\": \"PATCH\",\n#       \"path\": \"/rest/restconf/data/openconfig-vlan:vlans/\"\n#    }\n# ]\n#\n# After state:\n# -------------\n#\n# path: /rest/restconf/data/openconfig-vlan:vlans/\n# method: GET\n# data:\n# {\n#   \"openconfig-vlan:vlans\": {\n#     \"vlan\": [\n#       {\n#         \"config\": {\n#           \"name\": \"Default\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 1\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"vlan_10\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 10\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"TEST_VLAN20\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 20\n#         },\n#       },\n#       {\n#         \"config\": {\n#           \"name\": \"TEST_VLAN30\",\n#           \"status\": \"ACTIVE\",\n#           \"tpid\": \"oc-vlan-types:TPID_0x8100\",\n#           \"vlan-id\": 30\n#         },\n#       }\n#     ]\n#   }\n# }\n\n\n"
  },
  "community.network.flowadm": {
    "doc": {
      "description": "Create/modify/remove networking bandwidth and associated resources for a type of traffic on a particular link.",
      "has_action": false,
      "options": {
        "dsfield": {
          "aliases": [],
          "description": "- Identifies the 8-bit differentiated services field (as defined in RFC 2474). The optional dsfield_mask is used to state the bits of interest in the differentiated services field when comparing with the dsfield value. Both values must be in hexadecimal.\n",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Specifiies a link to configure flow on.",
          "required": false,
          "suboptions": {}
        },
        "local_ip": {
          "aliases": [],
          "description": "Identifies a network flow by the local IP address.",
          "required": false,
          "suboptions": {}
        },
        "local_port": {
          "aliases": [],
          "description": "Identifies a service specified by the local port.",
          "required": false,
          "suboptions": {}
        },
        "maxbw": {
          "aliases": [],
          "description": "- Sets the full duplex bandwidth for the flow. The bandwidth is specified as an integer with one of the scale suffixes(K, M, or G for Kbps, Mbps, and Gbps). If no units are specified, the input value will be read as Mbps.\n",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "flow"
          ],
          "description": "- A flow is defined as a set of attributes based on Layer 3 and Layer 4 headers, which can be used to identify a protocol, service, or a zone.\n",
          "required": true,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Sets the relative priority for the flow.",
          "default": "medium",
          "required": false,
          "choices": [
            "low",
            "medium",
            "high"
          ],
          "suboptions": {}
        },
        "remote_ip": {
          "aliases": [],
          "description": "Identifies a network flow by the remote IP address.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create/delete/enable/disable an IP address on the network interface.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present",
            "resetted"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the configured flow is temporary. Temporary flows do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "transport": {
          "aliases": [],
          "description": "- Specifies a Layer 4 protocol to be used. It is typically used in combination with I(local_port) to identify the service that needs special attention.\n",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage bandwidth resource control and priority for protocols, services and zones on Solaris/illumos systems"
    },
    "examples": "\n- name: Limit SSH traffic to 100M via vnic0 interface\n  community.network.flowadm:\n    link: vnic0\n    flow: ssh_out\n    transport: tcp\n    local_port: 22\n    maxbw: 100M\n    state: present\n\n- name: Reset flow properties\n  community.network.flowadm:\n    name: dns\n    state: resetted\n\n- name: Configure policy for EF PHB (DSCP value of 101110 from RFC 2598) with a bandwidth of 500 Mbps and a high priority\n  community.network.flowadm:\n    link: bge0\n    dsfield: '0x2e:0xfc'\n    maxbw: 500M\n    priority: high\n    flow: efphb-flow\n    state: present\n"
  },
  "community.network.ftd_configuration": {
    "doc": {
      "description": "Manages configuration on Cisco FTD devices including creating, updating, removing configuration objects, scheduling and staring jobs, deploying pending changes, etc. All operations are performed over REST API.",
      "has_action": false,
      "options": {
        "data": {
          "aliases": [],
          "description": "Key-value pairs that should be sent as body parameters in a REST API call",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "Key-value dict that represents equality filters. Every key is a property name and value is its desired value. If multiple filters are present, they are combined with logical operator AND.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "operation": {
          "aliases": [],
          "description": "The name of the operation to execute. Commonly, the operation starts with 'add', 'edit', 'get', 'upsert' or 'delete' verbs, but can have an arbitrary name too.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path_params": {
          "aliases": [],
          "description": "Key-value pairs that should be sent as path parameters in a REST API call.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "Key-value pairs that should be sent as query parameters in a REST API call.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "register_as": {
          "aliases": [],
          "description": "Specifies Ansible fact name that is used to register received response from the FTD device.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages configuration on Cisco FTD devices over REST API"
    },
    "examples": "\n- name: Create a network object\n  community.network.ftd_configuration:\n    operation: \"addNetworkObject\"\n    data:\n      name: \"Ansible-network-host\"\n      description: \"From Ansible with love\"\n      subType: \"HOST\"\n      value: \"192.168.2.0\"\n      dnsResolution: \"IPV4_AND_IPV6\"\n      type: \"networkobject\"\n      isSystemDefined: false\n    register_as: \"hostNetwork\"\n\n- name: Delete the network object\n  community.network.ftd_configuration:\n    operation: \"deleteNetworkObject\"\n    path_params:\n      objId: \"{{ hostNetwork['id'] }}\"\n"
  },
  "community.network.ftd_file_download": {
    "doc": {
      "description": "Downloads files from Cisco FTD devices including pending changes, disk files, certificates, troubleshoot reports, and backups.",
      "has_action": false,
      "options": {
        "destination": {
          "aliases": [],
          "description": "Absolute path of where to download the file to.\nIf destination is a directory, the module uses a filename from 'Content-Disposition' header specified by the server.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "operation": {
          "aliases": [],
          "description": "The name of the operation to execute.\nOnly operations that return a file can be used in this module.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path_params": {
          "aliases": [],
          "description": "Key-value pairs that should be sent as path parameters in a REST API call.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Downloads files from Cisco FTD devices over HTTP(S)"
    },
    "examples": "\n- name: Download pending changes\n  community.network.ftd_file_download:\n    operation: 'getdownload'\n    path_params:\n      objId: 'default'\n    destination: /tmp/\n"
  },
  "community.network.ftd_file_upload": {
    "doc": {
      "description": "Uploads files to Cisco FTD devices including disk files, backups, and upgrades.",
      "has_action": false,
      "options": {
        "file_to_upload": {
          "aliases": [],
          "description": "Absolute path to the file that should be uploaded.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "operation": {
          "aliases": [],
          "description": "The name of the operation to execute.\nOnly operations that upload file can be used in this module.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "register_as": {
          "aliases": [],
          "description": "Specifies Ansible fact name that is used to register received response from the FTD device.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Uploads files to Cisco FTD devices over HTTP(S)"
    },
    "examples": "\n- name: Upload disk file\n  community.network.ftd_file_upload:\n    operation: 'postuploaddiskfile'\n    file_to_upload: /tmp/test1.txt\n"
  },
  "community.network.ftd_install": {
    "doc": {
      "description": "Provisioning module for FTD devices that installs ROMMON image (if needed) and FTD pkg image on the firewall.\nCan be used with `httpapi` and `local` connection types. The `httpapi` is preferred, the `local` connection should be used only when the device cannot be accessed via REST API.",
      "has_action": false,
      "notes": "Requires `firepower-kickstart` library that should be installed separately and requires Python >= 3.5.\nOn localhost, Ansible can be still run with Python >= 2.7, but the interpreter for this particular module must be Python >= 3.5.\nPython interpreter for the module can overwritten in `ansible_python_interpreter` variable.",
      "options": {
        "console_ip": {
          "aliases": [],
          "description": "IP address of a terminal server.\nUsed to set up an SSH connection with device's console port through the terminal server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "console_password": {
          "aliases": [],
          "description": "Password to login on a terminal server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "console_port": {
          "aliases": [],
          "description": "Device's port on a terminal server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "console_username": {
          "aliases": [],
          "description": "Username to login on a terminal server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "device_gateway": {
          "aliases": [],
          "description": "Device gateway of management interface.\nIf not specified and connection is 'httpapi`, the module tries to fetch the existing value via REST API.\nFor 'local' connection type, this parameter is mandatory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_hostname": {
          "aliases": [],
          "description": "Hostname of the device as appears in the prompt (e.g., 'firepower-5516').",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "device_ip": {
          "aliases": [],
          "description": "Device IP address of management interface.\nIf not specified and connection is 'httpapi`, the module tries to fetch the existing value via REST API.\nFor 'local' connection type, this parameter is mandatory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_model": {
          "aliases": [],
          "description": "Platform model of the device (e.g., 'Cisco ASA5506-X Threat Defense').\nIf not specified and connection is 'httpapi`, the module tries to fetch the device model via REST API.\nFor 'local' connection type, this parameter is mandatory.",
          "type": "str",
          "required": false,
          "choices": [
            "Cisco ASA5506-X Threat Defense",
            "Cisco ASA5508-X Threat Defense",
            "Cisco ASA5516-X Threat Defense",
            "Cisco Firepower 2110 Threat Defense",
            "Cisco Firepower 2120 Threat Defense",
            "Cisco Firepower 2130 Threat Defense",
            "Cisco Firepower 2140 Threat Defense"
          ],
          "suboptions": {}
        },
        "device_netmask": {
          "aliases": [],
          "description": "Device netmask of management interface.\nIf not specified and connection is 'httpapi`, the module tries to fetch the existing value via REST API.\nFor 'local' connection type, this parameter is mandatory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_new_password": {
          "aliases": [],
          "description": "New device password to set after image installation.\nIf not specified, current password from `device_password` property is reused.\nNot applicable for ASA5500-X series devices.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_password": {
          "aliases": [],
          "description": "Password to login on the device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "device_sudo_password": {
          "aliases": [],
          "description": "Root password for the device. If not specified, `device_password` is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_username": {
          "aliases": [],
          "description": "Username to login on the device.\nDefaulted to 'admin' if not specified.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_server": {
          "aliases": [],
          "description": "DNS IP address of management interface.\nIf not specified and connection is 'httpapi`, the module tries to fetch the existing value via REST API.\nFor 'local' connection type, this parameter is mandatory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_install": {
          "aliases": [],
          "description": "Forces the FTD image to be installed even when the same version is already installed on the firewall.\nBy default, the module stops execution when the target version is installed in the device.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "image_file_location": {
          "aliases": [],
          "description": "Path to the FTD pkg image on the server to be downloaded.\nFTP, SCP, SFTP, TFTP, or HTTP protocols are usually supported, but may depend on the device model.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "image_version": {
          "aliases": [],
          "description": "Version of FTD image to be installed.\nHelps to compare target and current FTD versions to prevent unnecessary reinstalls.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "rommon_file_location": {
          "aliases": [],
          "description": "Path to the boot (ROMMON) image on TFTP server.\nOnly TFTP is supported.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "search_domains": {
          "aliases": [],
          "description": "Search domains delimited by comma.\nDefaulted to 'cisco.com' if not specified.",
          "default": "cisco.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3.5",
        "firepower-kickstart"
      ],
      "short_description": "Installs FTD pkg image on the firewall"
    },
    "examples": "\n  - name: Install image v6.3.0 on FTD 5516\n    community.network.ftd_install:\n      device_hostname: firepower\n      device_password: pass\n      device_ip: 192.168.0.1\n      device_netmask: 255.255.255.0\n      device_gateway: 192.168.0.254\n      dns_server: 8.8.8.8\n\n      console_ip: 10.89.0.0\n      console_port: 2004\n      console_username: console_user\n      console_password: console_pass\n\n      rommon_file_location: 'tftp://10.89.0.11/installers/ftd-boot-9.10.1.3.lfbff'\n      image_file_location: 'https://10.89.0.11/installers/ftd-6.3.0-83.pkg'\n      image_version: 6.3.0-83\n"
  },
  "community.network.iap_start_workflow": {
    "doc": {
      "description": "This will start a specified workflow in the Itential Automation Platform with given arguments.",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "Provide the description for the workflow",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "https": {
          "aliases": [],
          "description": "Use HTTPS to connect\nBy default using http",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "iap_fqdn": {
          "aliases": [],
          "description": "Provide the fqdn for the Itential Automation Platform",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "iap_port": {
          "aliases": [],
          "description": "Provide the port number for the Itential Automation Platform",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "token_key": {
          "aliases": [],
          "description": "Token key generated by iap_token module for the Itential Automation Platform",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "Provide the values to the job variables",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "workflow_name": {
          "aliases": [],
          "description": "Provide the workflow name",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Start a workflow in the Itential Automation Platform"
    },
    "examples": "\n- name: Start a workflow in the Itential Automation Platform\n  community.network.iap_start_workflow:\n    iap_port: 3000\n    iap_fqdn: localhost\n    token_key: \"DFSFSFHFGFGF[DSFSFAADAFASD%3D\"\n    workflow_name: \"RouterUpgradeWorkflow\"\n    description: \"OS-Router-Upgrade\"\n    variables: {\"deviceName\":\"ASR9K\"}\n  register: result\n\n- ansible.builtin.debug: var=result\n"
  },
  "community.network.iap_token": {
    "doc": {
      "description": "Checks the connection to IAP and retrieves a login token.",
      "has_action": false,
      "options": {
        "https": {
          "aliases": [],
          "description": "Use HTTPS to connect\nBy default using http",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "iap_fqdn": {
          "aliases": [],
          "description": "Provide the fqdn or ip-address for the Itential Automation Platform",
          "required": true,
          "suboptions": {}
        },
        "iap_port": {
          "aliases": [],
          "description": "Provide the port number for the Itential Automation Platform",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Provide the password for the Itential Automation Platform",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Provide the username for the Itential Automation Platform",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Get token for the Itential Automation Platform"
    },
    "examples": "\n- name: Get token for the Itential Automation Platform\n  community.network.iap_token:\n    iap_port: 3000\n    iap_fqdn: localhost\n    username: myusername\n    password: mypass\n  register: result\n\n- ansible.builtin.debug: var=result.token\n"
  },
  "community.network.icx_banner": {
    "doc": {
      "description": "This will configure both login and motd banners on remote ruckus ICX 7000 series switches. It allows playbooks to add or remove banner text from the active running configuration.",
      "has_action": false,
      "notes": "Tested against ICX 10.1",
      "options": {
        "banner": {
          "aliases": [],
          "description": "Specifies which banner should be configured on the remote device.",
          "type": "str",
          "required": true,
          "choices": [
            "motd",
            "exec",
            "incoming"
          ],
          "suboptions": {}
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enterkey": {
          "aliases": [],
          "description": "Specifies whether or not the motd configuration should accept the require-enter-key\nDefault is false.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether or not the configuration is present in the current devices active running configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "The banner text that should be present in the remote device running configuration. This argument accepts a multiline string, with no empty lines.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage multiline banners on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Configure the motd banner\n  community.network.icx_banner:\n    banner: motd\n    text: |\n        this is my motd banner\n        that contains a multiline\n        string\n    state: present\n\n- name: Remove the motd banner\n  community.network.icx_banner:\n    banner: motd\n    state: absent\n\n- name: Configure require-enter-key for motd\n  community.network.icx_banner:\n    banner: motd\n    enterkey: True\n\n- name: Remove require-enter-key for motd\n  community.network.icx_banner:\n    banner: motd\n    enterkey: False\n"
  },
  "community.network.icx_command": {
    "doc": {
      "description": "Sends arbitrary commands to an ICX node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.",
      "has_action": false,
      "notes": "Tested against ICX 10.1",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote ICX device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired. If a command sent to the device requires answering a prompt, checkall and newline if multiple prompts, it is possible to pass a dict containing I(command), I(answer), I(prompt), I(check_all) and I(newline).Common answers are 'y' or \"\\r\" (carriage return, must be double quotes). See examples.",
          "type": "list",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of times a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [
            "waitfor"
          ],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "type": "list",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run arbitrary commands on remote Ruckus ICX 7000 series switches"
    },
    "examples": "\ntasks:\n  - name: Run show version on remote devices\n    community.network.icx_command:\n      commands: show version\n\n  - name: Run show version and check to see if output contains ICX\n    community.network.icx_command:\n      commands: show version\n      wait_for: result[0] contains ICX\n\n  - name: Run multiple commands on remote nodes\n    community.network.icx_command:\n      commands:\n        - show version\n        - show interfaces\n\n  - name: Run multiple commands and evaluate the output\n    community.network.icx_command:\n      commands:\n        - show version\n        - show interfaces\n      wait_for:\n        - result[0] contains ICX\n        - result[1] contains GigabitEthernet1/1/1\n  - name: Run commands that require answering a prompt\n    community.network.icx_command:\n      commands:\n        - command: 'service password-encryption sha1'\n          prompt: 'Warning: Moving to higher password-encryption type,.*'\n          answer: 'y'\n  - name: Run commands that require answering multiple prompt\n    community.network.icx_command:\n      commands:\n        - command: 'username qqq password qqq'\n          prompt:\n            - 'User already exists. Do you want to modify:.*'\n            - 'To modify or remove user, enter current password:'\n          answer:\n            - 'y'\n            - 'qqq\\\r'\n          check_all: True\n          newline: False\n"
  },
  "community.network.icx_config": {
    "doc": {
      "description": "Ruckus ICX configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with ICX configuration sections in a deterministic way.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made.  The backup file is written to the C(backup) folder in the playbook root directory or role root directory, if playbook is part of an ansible role. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "defaults": {
          "aliases": [],
          "description": "This argument specifies whether or not to collect all defaults when getting the remote device running config.  When enabled, the module will get the current config by issuing the command C(show running-config all).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "diff_against": {
          "aliases": [],
          "description": "When using the C(ansible-playbook --diff) command line argument the module can generate diffs against different sources.\nWhen this option is configure as I(startup), the module will return the diff of the running-config against the configuration.\nWhen this option is configured as I(intended), the module will return the diff of the running-config against the configuration provided in the C(intended_config) argument.\nWhen this option is configured as I(running), the module will return the before and after diff of the running-config with respect to any changes made to the device configuration.",
          "type": "str",
          "required": false,
          "choices": [
            "running",
            "startup",
            "intended"
          ],
          "suboptions": {}
        },
        "diff_ignore_lines": {
          "aliases": [],
          "description": "Use this argument to specify one or more lines that should be ignored during the diff.  This is used for lines in the configuration that are automatically updated by the system.  This argument takes a list of regular expressions or exact line matches.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "intended_config": {
          "aliases": [],
          "description": "The C(intended_config) provides the master configuration that the node should conform to and is used to check the final running-config against.   This argument will not modify any settings on the remote device and is strictly used to check the compliance of the current device's configuration against.  When specifying this argument, the task should also modify the C(diff_against) value and set it to I(intended).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "type": "str",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "multiline_delimiter": {
          "aliases": [],
          "description": "This argument is used when pushing a multiline configuration element to the ICX device.  It specifies the character to use as the delimiting character.  This only applies to the configuration action.",
          "default": "@",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "type": "str",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "running_config": {
          "aliases": [
            "config"
          ],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(running_config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "save_when": {
          "aliases": [],
          "description": "When changes are made to the device running-configuration, the changes are not copied to non-volatile storage by default.  Using this argument will change that before.  If the argument is set to I(always), then the running-config will always be copied to the start-up configuration and the I(modified) flag will always be set to True.  If the argument is set to I(modified), then the running-config will only be copied to the start-up configuration if it has changed since the last save to configuration.  If the argument is set to I(never), the running-config will never be copied to the configuration.  If the argument is set to I(changed), then the running-config will only be copied to the configuration if the task has made a change.",
          "default": "never",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "never",
            "modified",
            "changed"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage configuration sections of Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Configure top level configuration\n  community.network.icx_config:\n    lines: hostname {{ inventory_hostname }}\n\n- name: Configure interface settings\n  community.network.icx_config:\n    lines:\n      - port-name test string\n      - ip address 172.31.1.1 255.255.255.0\n    parents: interface ethernet 1/1/2\n\n- name: Configure ip helpers on multiple interfaces\n  community.network.icx_config:\n    lines:\n      - ip helper-address 172.26.1.10\n      - ip helper-address 172.26.3.8\n    parents: \"{{ item }}\"\n  with_items:\n    - interface ethernet 1/1/2\n    - interface ethernet 1/1/3\n\n- name: Load new acl into device\n  community.network.icx_config:\n    lines:\n      - permit ip host 192.0.2.1 any log\n      - permit ip host 192.0.2.2 any log\n      - permit ip host 192.0.2.3 any log\n      - permit ip host 192.0.2.4 any log\n    parents: ip access-list extended test\n    before: no ip access-list extended test\n    match: exact\n\n- name: Check the running-config against master config\n  community.network.icx_config:\n    diff_against: intended\n    intended_config: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: Check the configuration against the running-config\n  community.network.icx_config:\n    diff_against: startup\n    diff_ignore_lines:\n      - ntp clock .*\n\n- name: For idempotency, use full-form commands\n  community.network.icx_config:\n    lines:\n      # - en\n      - enable\n    # parents: int eth1/0/11\n    parents: interface ethernet 1/1/2\n\n# Set boot image based on comparison to a group_var (version) and the version\n# that is returned from the `icx_facts` module\n- name: SETTING BOOT IMAGE\n  community.network.icx_config:\n    lines:\n      - no boot system\n      - boot system flash bootflash:{{new_image}}\n    host: \"{{ inventory_hostname }}\"\n  when: ansible_net_version != version\n\n- name: Render template onto an ICX device\n  community.network.icx_config:\n    backup: yes\n    src: \"{{ lookup('file', 'config.j2') }}\"\n"
  },
  "community.network.icx_copy": {
    "doc": {
      "description": "This module transfers files from or to remote devices running ICX.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "download": {
          "aliases": [],
          "description": "Name of the resource to be downloaded. Mutually exclusive with upload.",
          "type": "str",
          "required": false,
          "choices": [
            "running-config",
            "startup-config",
            "flash_primary",
            "flash_secondary",
            "bootrom",
            "fips-primary-sig",
            "fips-secondary-sig",
            "fips-bootrom-sig"
          ],
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Data transfer protocol to be used",
          "type": "str",
          "required": true,
          "choices": [
            "scp",
            "https"
          ],
          "suboptions": {}
        },
        "public_key": {
          "aliases": [],
          "description": "public key type to be used to login to scp server",
          "type": "str",
          "required": false,
          "choices": [
            "rsa",
            "dsa"
          ],
          "suboptions": {}
        },
        "remote_filename": {
          "aliases": [],
          "description": "The name or path of the remote file/resource to be uploaded or downloaded.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "remote_pass": {
          "aliases": [],
          "description": "remote password to be used for scp login.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_port": {
          "aliases": [],
          "description": "The port number of the remote host. Default values will be selected based on protocol type. Default scp:22, http:443",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_server": {
          "aliases": [],
          "description": "IP address of the remote server",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "remote_user": {
          "aliases": [],
          "description": "remote username to be used for scp login.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "upload": {
          "aliases": [],
          "description": "Name of the resource to be uploaded. Mutually exclusive with download.",
          "type": "str",
          "required": false,
          "choices": [
            "running-config",
            "startup-config",
            "flash_primary",
            "flash_secondary"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Transfer files from or to remote Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Upload running-config to the remote scp server\n  community.network.icx_copy:\n    upload: running-config\n    protocol: scp\n    remote_server: 172.16.10.49\n    remote_filename: running.conf\n    remote_user: user1\n    remote_pass: pass123\n\n- name: Download running-config from the remote scp server\n  community.network.icx_copy:\n    download: running-config\n    protocol: scp\n    remote_server: 172.16.10.49\n    remote_filename: running.conf\n    remote_user: user1\n    remote_pass: pass123\n\n- name: Download running-config from the remote scp server using rsa public key\n  community.network.icx_copy:\n    download: running-config\n    protocol: scp\n    remote_server: 172.16.10.49\n    remote_filename: running.conf\n    remote_user: user1\n    remote_pass: pass123\n    public_key: rsa\n\n- name: Upload startup-config to the remote https server\n  community.network.icx_copy:\n    upload: startup-config\n    protocol: https\n    remote_server: 172.16.10.49\n    remote_filename: config/running.conf\n    remote_user: user1\n    remote_pass: pass123\n\n- name: Upload startup-config to the remote https server\n  community.network.icx_copy:\n    upload: startup-config\n    protocol: https\n    remote_server: 172.16.10.49\n    remote_filename: config/running.conf\n    remote_user: user1\n    remote_pass: pass123\n\n- name: Download OS image into the flash from remote scp ipv6 server\n  community.network.icx_copy:\n    download: startup-config\n    protocol: scp\n    remote_server: ipv6 FE80:CD00:0000:0CDE:1257:0000:211E:729C\n    remote_filename: img.bin\n    remote_user: user1\n    remote_pass: pass123\n\n- name: Download OS image into the secondary flash from remote scp ipv6 server\n  community.network.icx_copy:\n    Download: flash_secondary\n    protocol: scp\n    remote_server: ipv6 FE80:CD00:0000:0CDE:1257:0000:211E:729C\n    remote_filename: img.bin\n    remote_user: user1\n    remote_pass: pass123\n\n- name: Download OS image into the secondary flash from remote scp ipv6 server on port 5000\n  community.network.icx_copy:\n    Download: flash_secondary\n    protocol: scp\n    remote_server: ipv6 FE80:CD00:0000:0CDE:1257:0000:211E:729C\n    remote_port: 5000\n    remote_filename: img.bin\n    remote_user: user1\n    remote_pass: pass123\n\n- name: Download OS image into the primary flash from remote https ipv6 server\n  community.network.icx_copy:\n    Download: flash_primary\n    protocol: https\n    remote_server: ipv6 FE80:CD00:0000:0CDE:1257:0000:211E:729C\n    remote_filename: images/img.bin\n    remote_user: user1\n    remote_pass: pass123\n\n- name: Download OS image into the primary flash from remote https ipv6 server on port 8080\n  community.network.icx_copy:\n    Download: flash_primary\n    protocol: https\n    remote_server: ipv6 FE80:CD00:0000:0CDE:1257:0000:211E:729C\n    remote_port: 8080\n    remote_filename: images/img.bin\n    remote_user: user1\n    remote_pass: pass123\n"
  },
  "community.network.icx_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote device that is running ICX.  This module prepends all of the base network fact keys with C(ansible_net_<fact>). The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "type": "list",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from remote Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Collect all facts from the device\n  community.network.icx_facts:\n    gather_subset: all\n\n- name: Collect only the config and default facts\n  community.network.icx_facts:\n    gather_subset:\n      - config\n\n- name: Do not collect hardware facts\n  community.network.icx_facts:\n    gather_subset:\n      - \"!hardware\"\n"
  },
  "community.network.icx_interface": {
    "doc": {
      "description": "This module provides declarative management of Interfaces on ruckus icx devices.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of Interfaces definitions.",
          "type": "list",
          "required": false,
          "suboptions": {
            "check_running_config": {
              "aliases": [],
              "description": "Check running configuration. This can be set as environment variable.\nModule will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "delay": {
              "aliases": [],
              "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Name of the description.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Interface link status",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the Interface.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "neighbors": {
              "aliases": [],
              "description": "Check the operational state of given interface C(name) for CDP/LLDP neighbor.\nThe following suboptions are available.",
              "type": "list",
              "required": false,
              "suboptions": {
                "host": {
                  "aliases": [],
                  "description": "CDP/LLDP neighbor host for given interface C(name).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "CDP/LLDP neighbor port to which given interface C(name) is connected.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "power": {
              "aliases": [],
              "description": "Inline power on Power over Ethernet (PoE) ports.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "by_class": {
                  "aliases": [],
                  "description": "The range is 0-4\nThe power limit based on class value for given interface C(name)",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4"
                  ],
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "enable/disable the poe of the given interface C(name)",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "limit": {
                  "aliases": [],
                  "description": "The range is 1000-15400|30000mW. For PoH ports the range is 1000-95000mW\nThe power limit based on actual power value for given interface C(name)",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "priority": {
                  "aliases": [],
                  "description": "The range is 1 (highest) to 3 (lowest)\nThe priority for power management or given interface C(name)",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "1",
                    "2",
                    "3"
                  ],
                  "suboptions": {}
                }
              }
            },
            "rx_rate": {
              "aliases": [],
              "description": "Receiver rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see L(Conditionals in Networking Modules,../network/user_guide/network_working_with_command_output.html)",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "speed": {
              "aliases": [],
              "description": "Interface link speed/duplex",
              "type": "str",
              "required": false,
              "choices": [
                "10-full",
                "10-half",
                "100-full",
                "100-half",
                "1000-full",
                "1000-full-master",
                "1000-full-slave",
                "10g-full",
                "10g-full-master",
                "10g-full-slave",
                "2500-full",
                "2500-full-master",
                "2500-full-slave",
                "5g-full",
                "5g-full-master",
                "5g-full-slave",
                "auto"
              ],
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the Interface configuration, C(up) means present and operationally up and C(down) means present and operationally C(down)",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent",
                "up",
                "down"
              ],
              "suboptions": {}
            },
            "stp": {
              "aliases": [],
              "description": "enable/disable stp for the interface",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "tx_rate": {
              "aliases": [],
              "description": "Transmit rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see L(Conditionals in Networking Modules,../network/user_guide/network_working_with_command_output.html)",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable.\nModule will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Name of the description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Interface link status",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "neighbors": {
          "aliases": [],
          "description": "Check the operational state of given interface C(name) for CDP/LLDP neighbor.\nThe following suboptions are available.",
          "type": "list",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "CDP/LLDP neighbor host for given interface C(name).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "CDP/LLDP neighbor port to which given interface C(name) is connected.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "power": {
          "aliases": [],
          "description": "Inline power on Power over Ethernet (PoE) ports.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "by_class": {
              "aliases": [],
              "description": "The range is 0-4\nThe power limit based on class value for given interface C(name)",
              "type": "str",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3",
                "4"
              ],
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "enable/disable the poe of the given interface C(name)\nDefault is false.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "limit": {
              "aliases": [],
              "description": "The range is 1000-15400|30000mW. For PoH ports the range is 1000-95000mW\nThe power limit based on actual power value for given interface C(name)",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "priority": {
              "aliases": [],
              "description": "The range is 1 (highest) to 3 (lowest)\nThe priority for power management or given interface C(name)",
              "type": "str",
              "required": false,
              "choices": [
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            }
          }
        },
        "rx_rate": {
          "aliases": [],
          "description": "Receiver rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see L(Conditionals in Networking Modules,../network/user_guide/network_working_with_command_output.html)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "speed": {
          "aliases": [],
          "description": "Interface link speed/duplex",
          "type": "str",
          "required": false,
          "choices": [
            "10-full",
            "10-half",
            "100-full",
            "100-half",
            "1000-full",
            "1000-full-master",
            "1000-full-slave",
            "10g-full",
            "10g-full-master",
            "10g-full-slave",
            "2500-full",
            "2500-full-master",
            "2500-full-slave",
            "5g-full",
            "5g-full-master",
            "5g-full-slave",
            "auto"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the Interface configuration, C(up) means present and operationally up and C(down) means present and operationally C(down)",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "up",
            "down"
          ],
          "suboptions": {}
        },
        "stp": {
          "aliases": [],
          "description": "enable/disable stp for the interface",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tx_rate": {
          "aliases": [],
          "description": "Transmit rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see L(Conditionals in Networking Modules,../network/user_guide/network_working_with_command_output.html)",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Interface on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Enable ethernet port and set name\n  community.network.icx_interface:\n    name: ethernet 1/1/1\n    description: interface-1\n    stp: true\n    enabled: true\n\n- name: Disable ethernet port 1/1/1\n  community.network.icx_interface:\n      name: ethernet 1/1/1\n      enabled: false\n\n- name: Enable ethernet port range, set name and speed\n  community.network.icx_interface:\n      name: ethernet 1/1/1 to 1/1/10\n      description: interface-1\n      speed: 100-full\n      enabled: true\n\n- name: Enable poe. Set class\n  community.network.icx_interface:\n      name: ethernet 1/1/1\n      power:\n       by_class: 2\n\n- name: Configure poe limit of interface\n  community.network.icx_interface:\n      name: ethernet 1/1/1\n      power:\n       limit: 10000\n\n- name: Disable poe of interface\n  community.network.icx_interface:\n      name: ethernet 1/1/1\n      power:\n       enabled: false\n\n- name: Set lag name for a range of lags\n  community.network.icx_interface:\n      name: lag 1 to 10\n      description: test lags\n\n- name: Disable lag\n  community.network.icx_interface:\n      name: lag 1\n      enabled: false\n\n- name: Enable management interface\n  community.network.icx_interface:\n      name: management 1\n      enabled: true\n\n- name: Enable loopback interface\n  community.network.icx_interface:\n      name: loopback 10\n      enabled: true\n\n- name: Add interface using aggregate\n  community.network.icx_interface:\n      aggregate:\n      - { name: ethernet 1/1/1, description: test-interface-1, power: { by_class: 2 } }\n      - { name: ethernet 1/1/3, description: test-interface-3}\n      speed: 10-full\n      enabled: true\n\n- name: Check tx_rate, rx_rate intent arguments\n  community.network.icx_interface:\n    name: ethernet 1/1/10\n    state: up\n    tx_rate: ge(0)\n    rx_rate: le(0)\n\n- name: Check neighbors intent arguments\n  community.network.icx_interface:\n    name: ethernet 1/1/10\n    neighbors:\n    - port: 1/1/5\n      host: netdev\n"
  },
  "community.network.icx_l3_interface": {
    "doc": {
      "description": "This module provides declarative management of Layer-3 interfaces on ICX network devices.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of Layer-3 interfaces definitions. Each of the entry in aggregate list should define name of interface C(name) and a optional C(ipv4) or C(ipv6) address.",
          "type": "list",
          "required": false,
          "suboptions": {
            "check_running_config": {
              "aliases": [],
              "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "ipv4": {
              "aliases": [],
              "description": "IPv4 address to be set for the Layer-3 interface mentioned in I(name) option. The address format is <ipv4 address>/<mask>, the mask is number in range 0-32 eg. 192.168.0.1/24",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ipv6": {
              "aliases": [],
              "description": "IPv6 address to be set for the Layer-3 interface mentioned in I(name) option. The address format is <ipv6 address>/<mask>, the mask is number in range 0-128 eg. fd5d:12c9:2201:1::1/64.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Specifies if ipv4 address should be dynamic/advertise to ospf/not advertise to ospf. This should be specified only if ipv4 address is configured and if it is not secondary IP address.",
              "type": "str",
              "required": false,
              "choices": [
                "dynamic",
                "ospf-ignore",
                "ospf-passive"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the Layer-3 interface to be configured eg. GigabitEthernet0/2, ve 10, ethernet 1/1/1",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "replace": {
              "aliases": [],
              "description": "Replaces the configured primary IP address on the interface.",
              "type": "str",
              "required": false,
              "choices": [
                "yes",
                "no"
              ],
              "suboptions": {}
            },
            "secondary": {
              "aliases": [],
              "description": "Specifies that the configured address is a secondary IP address. If this keyword is omitted, the configured address is the primary IP address.",
              "type": "str",
              "required": false,
              "choices": [
                "yes",
                "no"
              ],
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the Layer-3 interface configuration. It indicates if the configuration should be present or absent on remote device.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            }
          }
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ipv4": {
          "aliases": [],
          "description": "IPv4 address to be set for the Layer-3 interface mentioned in I(name) option. The address format is <ipv4 address>/<mask>, the mask is number in range 0-32 eg. 192.168.0.1/24",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipv6": {
          "aliases": [],
          "description": "IPv6 address to be set for the Layer-3 interface mentioned in I(name) option. The address format is <ipv6 address>/<mask>, the mask is number in range 0-128 eg. fd5d:12c9:2201:1::1/64.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Specifies if ipv4 address should be dynamic/advertise to ospf/not advertise to ospf. This should be specified only if ipv4 address is configured and if it is not secondary IP address.",
          "type": "str",
          "required": false,
          "choices": [
            "dynamic",
            "ospf-ignore",
            "ospf-passive"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Layer-3 interface to be configured eg. GigabitEthernet0/2, ve 10, ethernet 1/1/1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Replaces the configured primary IP address on the interface.",
          "type": "str",
          "required": false,
          "choices": [
            "yes",
            "no"
          ],
          "suboptions": {}
        },
        "secondary": {
          "aliases": [],
          "description": "Specifies that the configured address is a secondary IP address. If this keyword is omitted, the configured address is the primary IP address.",
          "type": "str",
          "required": false,
          "choices": [
            "yes",
            "no"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the Layer-3 interface configuration. It indicates if the configuration should be present or absent on remote device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage Layer-3 interfaces on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Remove ethernet 1/1/1 IPv4 and IPv6 address\n  community.network.icx_l3_interface:\n    name: ethernet 1/1/1\n    ipv4: 192.168.0.1/24\n    ipv6: \"fd5d:12c9:2201:1::1/64\"\n    state: absent\n\n- name: Replace ethernet 1/1/1 primary IPv4 address\n  community.network.icx_l3_interface:\n    name: ethernet 1/1/1\n    ipv4: 192.168.0.1/24\n    replace: yes\n    state: absent\n\n- name: Replace ethernet 1/1/1 dynamic IPv4 address\n  community.network.icx_l3_interface:\n    name: ethernet 1/1/1\n    ipv4: 192.168.0.1/24\n    mode: dynamic\n    state: absent\n\n- name: Set ethernet 1/1/1 secondary IPv4 address\n  community.network.icx_l3_interface:\n    name: ethernet 1/1/1\n    ipv4: 192.168.0.1/24\n    secondary: yes\n    state: absent\n\n- name: Set ethernet 1/1/1 IPv4 address\n  community.network.icx_l3_interface:\n    name: ethernet 1/1/1\n    ipv4: 192.168.0.1/24\n\n- name: Set ethernet 1/1/1 IPv6 address\n  community.network.icx_l3_interface:\n    name: ethernet 1/1/1\n    ipv6: \"fd5d:12c9:2201:1::1/64\"\n\n- name: Set IP addresses on aggregate\n  community.network.icx_l3_interface:\n    aggregate:\n      - { name: GigabitEthernet0/3, ipv4: 192.168.2.10/24 }\n      - { name: GigabitEthernet0/3, ipv4: 192.168.3.10/24, ipv6: \"fd5d:12c9:2201:1::1/64\" }\n\n- name: Remove IP addresses on aggregate\n  community.network.icx_l3_interface:\n    aggregate:\n      - { name: GigabitEthernet0/3, ipv4: 192.168.2.10/24 }\n      - { name: GigabitEthernet0/3, ipv4: 192.168.3.10/24, ipv6: \"fd5d:12c9:2201:1::1/64\" }\n    state: absent\n\n\n- name: Set the ipv4 and ipv6 of a virtual ethernet(ve)\n  community.network.icx_l3_interface:\n    name: ve 100\n    ipv4: 192.168.0.1\n    ipv6: \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"\n"
  },
  "community.network.icx_linkagg": {
    "doc": {
      "description": "This module provides declarative management of link aggregation groups on Ruckus ICX network devices.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of link aggregation definitions.",
          "type": "list",
          "required": false,
          "suboptions": {
            "check_running_config": {
              "aliases": [],
              "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "group": {
              "aliases": [],
              "description": "Channel-group number for the port-channel Link aggregation group. Range 1-255 or set to 'auto' to auto-generates a LAG ID",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "members": {
              "aliases": [],
              "description": "List of port members or ranges of the link aggregation group.",
              "type": "list",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Mode of the link aggregation group.",
              "type": "str",
              "required": false,
              "choices": [
                "dynamic",
                "static"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the LAG",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the link aggregation group.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            }
          }
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Channel-group number for the port-channel Link aggregation group. Range 1-255 or set to 'auto' to auto-generates a LAG ID",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "List of port members or ranges of the link aggregation group.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode of the link aggregation group.",
          "type": "str",
          "required": false,
          "choices": [
            "dynamic",
            "static"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the LAG",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Purge links not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the link aggregation group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage link aggregation groups on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Create static link aggregation group\n  community.network.icx_linkagg:\n    group: 10\n    mode: static\n    name: LAG1\n\n- name: Create link aggregation group with auto id\n  community.network.icx_linkagg:\n    group: auto\n    mode: dynamic\n    name: LAG2\n\n- name: Delete link aggregation group\n  community.network.icx_linkagg:\n    group: 10\n    state: absent\n\n- name: Set members to LAG\n  community.network.icx_linkagg:\n    group: 200\n    mode: static\n    members:\n      - ethernet 1/1/1 to 1/1/6\n      - ethernet 1/1/10\n\n- name: Remove links other then LAG id 100 and 3 using purge\n  community.network.icx_linkagg:\n    aggregate:\n      - { group: 3}\n      - { group: 100}\n    purge: true\n"
  },
  "community.network.icx_lldp": {
    "doc": {
      "description": "This module provides declarative management of LLDP service on ICX network devices.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "specify interfaces",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "List of ethernet ports to enable lldp.  To add a range of ports use 'to' keyword. See the example.",
              "type": "list",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of lldp configuration for interfaces",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent",
                "enabled",
                "disabled"
              ],
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Enables the receipt and transmission of Link Layer Discovery Protocol (LLDP) globally.",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage LLDP configuration on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Disable LLDP\n  community.network.icx_lldp:\n    state: absent\n\n- name: Enable LLDP\n  community.network.icx_lldp:\n    state: present\n\n- name: Disable LLDP on ports 1/1/1 - 1/1/10, 1/1/20\n  community.network.icx_lldp:\n    interfaces:\n     - name:\n        - ethernet 1/1/1 to 1/1/10\n        - ethernet 1/1/20\n       state: absent\n    state: present\n\n- name: Enable LLDP on ports 1/1/5 - 1/1/10\n  community.network.icx_lldp:\n    interfaces:\n      - name:\n        - ethernet 1/1/1 to 1/1/10\n"
  },
  "community.network.icx_logging": {
    "doc": {
      "description": "This module provides declarative management of logging on Ruckus ICX 7000 series switches.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of logging definitions.",
          "type": "list",
          "required": false,
          "suboptions": {
            "check_running_config": {
              "aliases": [],
              "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "dest": {
              "aliases": [],
              "description": "Destination of the logs.",
              "type": "str",
              "required": false,
              "choices": [
                "on",
                "host",
                "console",
                "buffered",
                "persistence",
                "rfc5424"
              ],
              "suboptions": {}
            },
            "facility": {
              "aliases": [],
              "description": "Specifies log facility to log messages from the device.",
              "type": "str",
              "required": false,
              "choices": [
                "auth",
                "cron",
                "daemon",
                "kern",
                "local0",
                "local1",
                "local2",
                "local3",
                "local4",
                "local5",
                "local6",
                "local7",
                "user",
                "lpr",
                "mail",
                "news",
                "syslog",
                "sys9",
                "sys10",
                "sys11",
                "sys12",
                "sys13",
                "sys14",
                "user",
                "uucp"
              ],
              "suboptions": {}
            },
            "level": {
              "aliases": [],
              "description": "Specifies the message level.",
              "type": "list",
              "required": false,
              "choices": [
                "alerts",
                "critical",
                "debugging",
                "emergencies",
                "errors",
                "informational",
                "notifications",
                "warnings"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "ipv4 address/ipv6 address/name of  syslog server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the logging configuration.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "udp_port": {
              "aliases": [],
              "description": "UDP port of destination host(syslog server).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Destination of the logs.",
          "type": "str",
          "required": false,
          "choices": [
            "on",
            "host",
            "console",
            "buffered",
            "persistence",
            "rfc5424"
          ],
          "suboptions": {}
        },
        "facility": {
          "aliases": [],
          "description": "Specifies log facility to log messages from the device.",
          "type": "str",
          "required": false,
          "choices": [
            "auth",
            "cron",
            "daemon",
            "kern",
            "local0",
            "local1",
            "local2",
            "local3",
            "local4",
            "local5",
            "local6",
            "local7",
            "user",
            "lpr",
            "mail",
            "news",
            "syslog",
            "sys9",
            "sys10",
            "sys11",
            "sys12",
            "sys13",
            "sys14",
            "user",
            "uucp"
          ],
          "suboptions": {}
        },
        "level": {
          "aliases": [],
          "description": "Specifies the message level.",
          "type": "list",
          "required": false,
          "choices": [
            "alerts",
            "critical",
            "debugging",
            "emergencies",
            "errors",
            "informational",
            "notifications",
            "warnings"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "ipv4 address/ipv6 address/name of  syslog server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the logging configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "udp_port": {
          "aliases": [],
          "description": "UDP port of destination host(syslog server).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage logging on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Configure host logging.\n  community.network.icx_logging:\n    dest: host\n    name: 172.16.0.1\n    udp_port: 5555\n- name: Remove host logging configuration.\n  community.network.icx_logging:\n    dest: host\n    name: 172.16.0.1\n    udp_port: 5555\n    state: absent\n- name: Disables the real-time display of syslog messages.\n  community.network.icx_logging:\n    dest: console\n    state: absent\n- name: Enables local syslog logging.\n  community.network.icx_logging:\n    dest : on\n    state: present\n- name: Configure buffer level\n  community.network.icx_logging:\n    dest: buffered\n    level: critical\n- name: Configure logging using aggregate\n  community.network.icx_logging:\n    aggregate:\n      - { dest: buffered, level: ['notifications','errors'] }\n- name: Remove logging using aggregate\n  community.network.icx_logging:\n    aggregate:\n      - { dest: console }\n      - { dest: host, name: 172.16.0.1, udp_port: 5555 }\n    state: absent\n"
  },
  "community.network.icx_ping": {
    "doc": {
      "description": "Tests reachability using ping from switch to a remote destination.",
      "has_action": false,
      "notes": "Tested against ICX 10.1",
      "options": {
        "count": {
          "aliases": [],
          "description": "Number of packets to send. Default is 1.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "ip-addr | host-name | vrf vrf-name | ipv6 [ ipv6-addr | host-name | vrf vrf-name]  (resolvable by switch) of the remote node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Specifies the size of the ICMP data portion of the packet, in bytes. This is the payload and does not include the header. The value can range from 0 to 10000. The default is 16..",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "IP address to be used as the origin of the ping packets.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines if the expected result is success or fail.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Specifies the time, in milliseconds for which the device waits for a reply from the pinged device. The value can range from 1 to 4294967296. The default is 5000 (5 seconds).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Specifies the time to live as a maximum number of hops. The value can range from 1 to 255. The default is 64.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Specifies the Virtual Routing and Forwarding (VRF) instance of the device to be pinged.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Tests reachability using ping from Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Test reachability to 10.10.10.10\n  community.network.icx_ping:\n    dest: 10.10.10.10\n\n- name: Test reachability to ipv6 address from source with timeout\n  community.network.icx_ping:\n    dest: ipv6 2001:cdba:0000:0000:0000:0000:3257:9652\n    source: 10.1.1.1\n    timeout: 100000\n\n- name: Test reachability to 10.1.1.1 through vrf using 5 packets\n  community.network.icx_ping:\n    dest: 10.1.1.1\n    vrf: x.x.x.x\n    count: 5\n\n- name: Test unreachability to 10.30.30.30\n  community.network.icx_ping:\n    dest: 10.40.40.40\n    state: absent\n\n- name: Test reachability to ipv4 with ttl and packet size\n  community.network.icx_ping:\n    dest: 10.10.10.10\n    ttl: 20\n    size: 500\n"
  },
  "community.network.icx_static_route": {
    "doc": {
      "description": "This module provides declarative management of static IP routes on Ruckus ICX network devices.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "admin_distance": {
          "aliases": [],
          "description": "Admin distance of the static route. Range is 1 to 255.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [],
          "description": "List of static route definitions.",
          "type": "list",
          "required": false,
          "suboptions": {
            "admin_distance": {
              "aliases": [],
              "description": "Admin distance of the static route. Range is 1 to 255.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "check_running_config": {
              "aliases": [],
              "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mask": {
              "aliases": [],
              "description": "Network prefix mask of the static route.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "next_hop": {
              "aliases": [],
              "description": "Next hop IP of the static route.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "prefix": {
              "aliases": [],
              "description": "Network prefix of the static route.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the static route configuration.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            }
          }
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mask": {
          "aliases": [],
          "description": "Network prefix mask of the static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "next_hop": {
          "aliases": [],
          "description": "Next hop IP of the static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefix": {
          "aliases": [],
          "description": "Network prefix of the static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Purge routes not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the static route configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage static IP routes on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Configure static route\n  community.network.icx_static_route:\n    prefix: 192.168.2.0/24\n    next_hop: 10.0.0.1\n\n- name: Remove configuration\n  community.network.icx_static_route:\n    prefix: 192.168.2.0\n    mask: 255.255.255.0\n    next_hop: 10.0.0.1\n    state: absent\n\n- name: Add static route aggregates\n  community.network.icx_static_route:\n    aggregate:\n      - { prefix: 172.16.32.0, mask: 255.255.255.0, next_hop: 10.0.0.8 }\n      - { prefix: 172.16.33.0, mask: 255.255.255.0, next_hop: 10.0.0.8 }\n\n- name: Remove static route aggregates\n  community.network.icx_static_route:\n    aggregate:\n      - { prefix: 172.16.32.0, mask: 255.255.255.0, next_hop: 10.0.0.8 }\n      - { prefix: 172.16.33.0, mask: 255.255.255.0, next_hop: 10.0.0.8 }\n    state: absent\n"
  },
  "community.network.icx_system": {
    "doc": {
      "description": "This module provides declarative management of node system attributes on Ruckus ICX 7000 series switches.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "aaa_servers": {
          "aliases": [],
          "description": "Configures radius/tacacs server",
          "type": "list",
          "required": false,
          "suboptions": {
            "acct_port_num": {
              "aliases": [],
              "description": "Configures the accounting UDP port. The default value is 1813.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "acct_type": {
              "aliases": [],
              "description": "Usage of the accounting port.",
              "type": "str",
              "required": false,
              "choices": [
                "accounting-only",
                "authentication-only",
                "authorization-only",
                "default"
              ],
              "suboptions": {}
            },
            "auth_key": {
              "aliases": [],
              "description": "Configure the key for the server",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "auth_key_type": {
              "aliases": [],
              "description": "List of authentication level specified in the choices",
              "type": "list",
              "required": false,
              "choices": [
                "dot1x",
                "mac-auth",
                "web-auth"
              ],
              "suboptions": {}
            },
            "auth_port_num": {
              "aliases": [],
              "description": "Configures the authentication UDP port. The default value is 1812.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "auth_port_type": {
              "aliases": [],
              "description": "specifies the type of the authentication port",
              "type": "str",
              "required": false,
              "choices": [
                "auth-port"
              ],
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "Configures the host name of the RADIUS server",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "specify the type of the server",
              "type": "str",
              "required": false,
              "choices": [
                "radius",
                "tacacs"
              ],
              "suboptions": {}
            }
          }
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "domain_name": {
          "aliases": [],
          "description": "Configure the IP domain name on the remote device to the provided value. Value should be in the dotted name form and will be appended to the hostname to create a fully-qualified domain name.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "domain_search": {
          "aliases": [],
          "description": "Provides the list of domain names to append to the hostname for the purpose of doing name resolution. This argument accepts a list of names and will be reconciled with the current active configuration on the running node.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Configure the device hostname parameter. This option takes an ASCII string value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_servers": {
          "aliases": [],
          "description": "List of DNS name servers by IP address to use to perform name resolution lookups.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the configuration values in the device's current active configuration.  When set to I(present), the values should be configured in the device active configuration and when set to I(absent) the values should not be in the device active configuration",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage the system attributes on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Configure hostname and domain name\n  community.network.icx_system:\n    hostname: icx\n    domain_search:\n      - ansible.com\n      - redhat.com\n      - ruckus.com\n\n- name: Configure radius server of type auth-port\n  community.network.icx_system:\n    aaa_servers:\n      - type: radius\n        hostname: radius-server\n        auth_port_type: auth-port\n        auth_port_num: 1821\n        acct_port_num: 1321\n        acct_type: accounting-only\n        auth_key: abc\n        auth_key_type:\n          - dot1x\n          - mac-auth\n\n- name: Configure tacacs server\n  community.network.icx_system:\n    aaa_servers:\n      - type: tacacs\n        hostname: tacacs-server\n        auth_port_type: auth-port\n        auth_port_num: 1821\n        acct_port_num: 1321\n        acct_type: accounting-only\n        auth_key: xyz\n\n- name: Configure name servers\n  community.network.icx_system:\n    name_servers:\n      - 8.8.8.8\n      - 8.8.4.4\n"
  },
  "community.network.icx_user": {
    "doc": {
      "description": "This module creates or updates user account on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "access_time": {
          "aliases": [],
          "description": "This parameter indicates the time the file's access time should be set to. Should be preserve when no modification is required, YYYYMMDDHHMM.SS when using default time format, or now. Default is None meaning that preserve is the default for state=[file,directory,link,hard] and now is default for state=touch",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [
            "users",
            "collection"
          ],
          "description": "The set of username objects to be configured on the remote ICX device. The list entries can either be the username or a hash of username and properties. This argument is mutually exclusive with the C(name) argument.",
          "type": "list",
          "required": false,
          "suboptions": {
            "access_time": {
              "aliases": [],
              "description": "This parameter indicates the time the file's access time should be set to. Should be preserve when no modification is required, YYYYMMDDHHMM.SS when using default time format, or now. Default is None meaning that preserve is the default for state=[file,directory,link,hard] and now is default for state=touch",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "check_running_config": {
              "aliases": [],
              "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "configured_password": {
              "aliases": [],
              "description": "The password to be configured on the ICX device.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The username to be configured on the ICX device.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "nopassword": {
              "aliases": [],
              "description": "Defines the username without assigning a password. This will allow the user to login to the system without being authenticated by a password.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "privilege": {
              "aliases": [],
              "description": "The privilege level to be granted to the user",
              "type": "str",
              "required": false,
              "choices": [
                "0",
                "4",
                "5"
              ],
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Configures the state of the username definition as it relates to the device operational configuration. When set to I(present), the username(s) should be configured in the device active configuration and when set to I(absent) the username(s) should not be in the device active configuration",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "update_password": {
              "aliases": [],
              "description": "This argument will instruct the module when to change the password. When set to C(always), the password will always be updated in the device and when set to C(on_create) the password will be updated only if the username is created.",
              "type": "str",
              "required": false,
              "choices": [
                "on_create",
                "always"
              ],
              "suboptions": {}
            }
          }
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "configured_password": {
          "aliases": [],
          "description": "The password to be configured on the ICX device.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The username to be configured on the ICX device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nopassword": {
          "aliases": [],
          "description": "Defines the username without assigning a password. This will allow the user to login to the system without being authenticated by a password.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "privilege": {
          "aliases": [],
          "description": "The privilege level to be granted to the user",
          "default": "0",
          "type": "str",
          "required": false,
          "choices": [
            "0",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "If set to true module will remove any previously configured usernames on the device except the current defined set of users.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Configures the state of the username definition as it relates to the device operational configuration. When set to I(present), the username(s) should be configured in the device active configuration and when set to I(absent) the username(s) should not be in the device active configuration",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "This  argument will instruct the module when to change the password. When set to C(always), the password will always be updated in the device and when set to C(on_create) the password will be updated only if the username is created.",
          "default": "always",
          "type": "str",
          "required": false,
          "choices": [
            "on_create",
            "always"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage the user accounts on Ruckus ICX 7000 series switches."
    },
    "examples": "\n- name: Create a new user without password\n  community.network.icx_user:\n    name: user1\n    nopassword: true\n\n- name: Create a new user with password\n  community.network.icx_user:\n    name: user1\n    configured_password: 'newpassword'\n\n- name: Remove users\n  community.network.icx_user:\n    name: user1\n    state: absent\n\n- name: Set user privilege level to 5\n  community.network.icx_user:\n    name: user1\n    privilege: 5\n"
  },
  "community.network.icx_vlan": {
    "doc": {
      "description": "This module provides declarative management of VLANs on ICX network devices.",
      "has_action": false,
      "notes": "Tested against ICX 10.1.\nFor information on using ICX platform, see L(the ICX OS Platform Options guide,../network/user_guide/platform_icx.html).",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of VLANs definitions.",
          "type": "list",
          "required": false,
          "suboptions": {
            "associated_interfaces": {
              "aliases": [],
              "description": "This is a intent option and checks the operational state of the for given vlan C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vlan interfaces on device it will result in failure.",
              "type": "list",
              "required": false,
              "suboptions": {}
            },
            "associated_tagged": {
              "aliases": [],
              "description": "This is a intent option and checks the operational state of  given vlan C(name) for associated tagged ports and lags. If the value in the C(associated_tagged) does not match with the operational state of vlan interfaces on device it will result in failure.",
              "type": "list",
              "required": false,
              "suboptions": {}
            },
            "check_running_config": {
              "aliases": [],
              "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "delay": {
              "aliases": [],
              "description": "Delay the play should wait to check for declarative intent params values.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "interfaces": {
              "aliases": [],
              "description": "List of ethernet ports or LAGS to be added as access(untagged) ports to the vlan. To add a range of ports use 'to' keyword. See the example.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "name": {
                  "aliases": [],
                  "description": "Name of the interface or lag",
                  "type": "list",
                  "required": false,
                  "suboptions": {}
                },
                "purge": {
                  "aliases": [],
                  "description": "Purge interfaces not defined in the I(name)",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "ip_arp_inspection": {
              "aliases": [],
              "description": "Enables dynamic ARP inspection on a VLAN.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "ip_dhcp_snooping": {
              "aliases": [],
              "description": "Enables DHCP snooping on a VLAN.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the VLAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the VLAN configuration.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "stp": {
              "aliases": [],
              "description": "Enable spanning-tree 802-1w/rstp for this vlan.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "enabled": {
                  "aliases": [],
                  "description": "Manage the state(Enable/Disable) of the spanning_tree_802_1w in the current vlan",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "priority": {
                  "aliases": [],
                  "description": "Configures the priority of the bridge. The value ranges from 0 through 65535. A lower numerical value means the bridge has a higher priority. Thus, the highest priority is 0. The default is 32768.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Specify the type of spanning-tree",
                  "default": "802-1w",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "802-1w",
                    "rstp"
                  ],
                  "suboptions": {}
                }
              }
            },
            "tagged": {
              "aliases": [],
              "description": "List of ethernet ports or LAGS to be added as trunk(tagged) ports to the vlan. To add a range of ports use 'to' keyword. See the example.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "name": {
                  "aliases": [],
                  "description": "Name of the interface or lag",
                  "type": "list",
                  "required": false,
                  "suboptions": {}
                },
                "purge": {
                  "aliases": [],
                  "description": "Purge interfaces not defined in the I(name)",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "vlan_id": {
              "aliases": [],
              "description": "ID of the VLAN. Range 1-4094.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "associated_interfaces": {
          "aliases": [],
          "description": "This is a intent option and checks the operational state of the for given vlan C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vlan interfaces on device it will result in failure.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "associated_tagged": {
          "aliases": [],
          "description": "This is a intent option and checks the operational state of  given vlan C(name) for associated tagged ports and lags. If the value in the C(associated_tagged) does not match with the operational state of vlan interfaces on device it will result in failure.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "check_running_config": {
          "aliases": [],
          "description": "Check running configuration. This can be set as environment variable. Module will use environment variable value(default:True), unless it is overridden, by specifying it as module parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Delay the play should wait to check for declarative intent params values.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of ethernet ports or LAGS to be added as access(untagged) ports to the vlan. To add a range of ports use 'to' keyword. See the example.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the interface or lag",
              "type": "list",
              "required": false,
              "suboptions": {}
            },
            "purge": {
              "aliases": [],
              "description": "Purge interfaces not defined in the I(name)",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ip_arp_inspection": {
          "aliases": [],
          "description": "Enables dynamic ARP inspection on a VLAN.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ip_dhcp_snooping": {
          "aliases": [],
          "description": "Enables DHCP snooping on a VLAN.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Purge VLANs not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the VLAN configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "stp": {
          "aliases": [],
          "description": "Enable spanning-tree 802-1w/rstp for this vlan.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Manage the state(Enable/Disable) of the spanning_tree_802_1w in the current vlan",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "priority": {
              "aliases": [],
              "description": "Configures the priority of the bridge. The value ranges from 0 through 65535. A lower numerical value means the bridge has a higher priority. Thus, the highest priority is 0. The default is 32768.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Specify the type of spanning-tree",
              "default": "802-1w",
              "type": "str",
              "required": false,
              "choices": [
                "802-1w",
                "rstp"
              ],
              "suboptions": {}
            }
          }
        },
        "tagged": {
          "aliases": [],
          "description": "List of ethernet ports or LAGS to be added as trunk(tagged) ports to the vlan. To add a range of ports use 'to' keyword. See the example.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the interface or lag",
              "type": "list",
              "required": false,
              "suboptions": {}
            },
            "purge": {
              "aliases": [],
              "description": "Purge interfaces not defined in the I(name)",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "vlan_id": {
          "aliases": [],
          "description": "ID of the VLAN. Range 1-4094.",
          "type": "int",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage VLANs on Ruckus ICX 7000 series switches"
    },
    "examples": "\n- name: Add a single ethernet 1/1/48 as access(untagged) port to vlan 20\n  community.network.icx_vlan:\n    name: test-vlan\n    vlan_id: 20\n    interfaces:\n      name:\n        - ethernet 1/1/48\n\n- name: Add a single LAG 10 as access(untagged) port to vlan 20\n  community.network.icx_vlan:\n    vlan_id: 20\n    interfaces:\n      name:\n        - lag 10\n\n- name: Add a range of ethernet ports as trunk(tagged) ports to vlan 20 by port\n  community.network.icx_vlan:\n    vlan_id: 20\n    tagged:\n      name:\n        - ethernet 1/1/40 to 1/1/48\n\n- name: Add discontinuous lags, ethernet ports as access(untagged) and trunk(tagged) port to vlan 20.\n  community.network.icx_vlan:\n    vlan_id: 20\n    interfaces:\n      name:\n        - ethernet 1/1/40 to 1/1/48\n        - ethernet 2/1/1\n        - lag 1\n        - lag 3 to 5\n    tagged:\n      name:\n        - ethernet 1/1/20 to 1/1/25\n        - lag 1 to 3\n\n- name: Remove an access and range of trunk ports from vlan\n  community.network.icx_vlan:\n    vlan_id: 20\n    interfaces:\n      name:\n        - ethernet 1/1/40\n    tagged:\n      name:\n        - ethernet 1/1/39 to 1/1/70\n\n- name: Enable dhcp snooping, disable arp inspection in vlan\n  community.network.icx_vlan:\n    vlan_id: 20\n    ip_dhcp_snooping: present\n    ip_arp_inspection: absent\n\n- name: Create vlan 20.  Enable  arp inspection in vlan. Purge all other vlans.\n  community.network.icx_vlan:\n    vlan_id: 20\n    ip_arp_inspection: present\n    purge: present\n\n- name: Remove vlan 20.\n  community.network.icx_vlan:\n    vlan_id: 20\n    state: absent\n"
  },
  "community.network.ig_config": {
    "doc": {
      "description": "Manage the configuration database on an Ingate SBC.",
      "has_action": false,
      "notes": "If C(store_download) is set to True, and C(path) and C(filename) is omitted, the file will be stored in the current directory with an automatic filename.\nThis module requires that the Ingate Python SDK is installed on the host. To install the SDK use the pip command from your shell C(pip install ingatesdk).",
      "options": {
        "add": {
          "aliases": [],
          "description": "Add a row to a table.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "client": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "The hostname or IP address to the unit.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password for the REST API user.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Which HTTP(S) port to connect to.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "scheme": {
              "aliases": [],
              "description": "Which HTTP protocol to use.",
              "type": "str",
              "required": true,
              "choices": [
                "http",
                "https"
              ],
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "The timeout (in seconds) for REST API requests.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username of the REST API user.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Verify the unit's HTTPS certificate.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "version": {
              "aliases": [],
              "description": "REST API version.",
              "default": "v1",
              "type": "str",
              "required": false,
              "choices": [
                "v1"
              ],
              "suboptions": {}
            }
          }
        },
        "columns": {
          "aliases": [],
          "description": "A dict containing column names/values.",
          "required": false,
          "suboptions": {}
        },
        "delete": {
          "aliases": [],
          "description": "Delete all rows in a table or a specific row.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "download": {
          "aliases": [],
          "description": "Download the configuration database from the unit.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "factory": {
          "aliases": [],
          "description": "Reset the preliminary configuration to its factory defaults.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "filename": {
          "aliases": [],
          "description": "The name of the file to store the downloaded configuration in. Refer to the C(download) option.",
          "required": false,
          "suboptions": {}
        },
        "get": {
          "aliases": [],
          "description": "Return all rows in a table or a specific row.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "modify": {
          "aliases": [],
          "description": "Modify a row in a table.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "no_response": {
          "aliases": [],
          "description": "Expect no response when storing the preliminary configuration. Refer to the C(store) option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Where in the filesystem to store the downloaded configuration. Refer to the C(download) option.",
          "required": false,
          "suboptions": {}
        },
        "return_rowid": {
          "aliases": [],
          "description": "Get rowid(s) from a table where the columns match.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "revert": {
          "aliases": [],
          "description": "Reset the preliminary configuration.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rowid": {
          "aliases": [],
          "description": "A row id.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "store": {
          "aliases": [],
          "description": "Store the preliminary configuration.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "store_download": {
          "aliases": [],
          "description": "If the downloaded configuration should be stored on disk. Refer to the C(download) option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "table": {
          "aliases": [],
          "description": "The name of the table.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ingatesdk >= 1.0.6"
      ],
      "short_description": "Manage the configuration database on an Ingate SBC."
    },
    "examples": "\n- name: Add/remove DNS servers\n  hosts: 192.168.1.1\n  connection: local\n  vars:\n    client_rw:\n      version: v1\n      address: \"{{ inventory_hostname }}\"\n      scheme: http\n      username: alice\n      password: foobar\n  tasks:\n\n  - name: Load factory defaults\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      factory: true\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Revert to last known applied configuration\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      revert: true\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Change the unit name\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      modify: true\n      table: misc.unitname\n      columns:\n        unitname: \"Test Ansible\"\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Add a DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      add: true\n      table: misc.dns_servers\n      columns:\n        server: 192.168.1.21\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Add a DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      add: true\n      table: misc.dns_servers\n      columns:\n        server: 192.168.1.22\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Add a DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      add: true\n      table: misc.dns_servers\n      columns:\n        server: 192.168.1.23\n    register: last_dns\n  - ansible.builtin.debug:\n      var: last_dns\n\n  - name: Modify the last added DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      modify: true\n      table: misc.dns_servers\n      rowid: \"{{ last_dns['add'][0]['id'] }}\"\n      columns:\n        server: 192.168.1.24\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Return the last added DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      get: true\n      table: misc.dns_servers\n      rowid: \"{{ last_dns['add'][0]['id'] }}\"\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Remove last added DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      delete: true\n      table: misc.dns_servers\n      rowid: \"{{ last_dns['add'][0]['id'] }}\"\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Return the all rows from table misc.dns_servers\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      get: true\n      table: misc.dns_servers\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Remove remaining DNS servers\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      delete: true\n      table: misc.dns_servers\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Get rowid for interface eth0\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      return_rowid: true\n      table: network.local_nets\n      columns:\n        interface: eth0\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Store the preliminary configuration\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      store: true\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Do backup of the configuration database\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      download: true\n      store_download: true\n    register: result\n  - ansible.builtin.debug:\n      var: result\n"
  },
  "community.network.ig_unit_information": {
    "doc": {
      "description": "Get unit information from an Ingate SBC.",
      "has_action": false,
      "notes": "This module requires that the Ingate Python SDK is installed on the host. To install the SDK use the pip command from your shell C(pip install ingatesdk).",
      "options": {
        "client": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "The hostname or IP address to the unit.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password for the REST API user.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Which HTTP(S) port to connect to.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "scheme": {
              "aliases": [],
              "description": "Which HTTP protocol to use.",
              "type": "str",
              "required": true,
              "choices": [
                "http",
                "https"
              ],
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "The timeout (in seconds) for REST API requests.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username of the REST API user.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Verify the unit's HTTPS certificate.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "version": {
              "aliases": [],
              "description": "REST API version.",
              "default": "v1",
              "type": "str",
              "required": false,
              "choices": [
                "v1"
              ],
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ingatesdk >= 1.0.6"
      ],
      "short_description": "Get unit information from an Ingate SBC."
    },
    "examples": "\n- name: Get unit information\n  community.network.ig_unit_information:\n    client:\n      version: v1\n      scheme: http\n      address: 192.168.1.1\n      username: alice\n      password: foobar\n"
  },
  "community.network.ipadm_addr": {
    "doc": {
      "description": "Create/delete static/dynamic IP addresses on network interfaces on Solaris/illumos systems.\nUp/down static/dynamic IP addresses on network interfaces on Solaris/illumos systems.\nManage IPv6 link-local addresses on network interfaces on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "address": {
          "aliases": [
            "addr"
          ],
          "description": "Specifiies an IP address to configure in CIDR notation.",
          "required": false,
          "suboptions": {}
        },
        "addrobj": {
          "aliases": [],
          "description": "Specifies an unique IP address on the system.",
          "required": true,
          "suboptions": {}
        },
        "addrtype": {
          "aliases": [],
          "description": "Specifiies a type of IP address to configure.",
          "default": "static",
          "required": false,
          "choices": [
            "static",
            "dhcp",
            "addrconf"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create/delete/enable/disable an IP address on the network interface.",
          "default": "present",
          "required": false,
          "choices": [
            "absent",
            "present",
            "up",
            "down",
            "enabled",
            "disabled",
            "refreshed"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the configured IP address is temporary. Temporary IP addresses do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Specifies the time in seconds we wait for obtaining address via DHCP.",
          "default": "60",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage IP addresses on an interface on Solaris/illumos systems"
    },
    "examples": "\n- name: Configure IP address 10.0.0.1 on e1000g0\n  community.network.ipadm_addr: addr=10.0.0.1/32 addrobj=e1000g0/v4 state=present\n\n- name: Delete addrobj\n  community.network.ipadm_addr: addrobj=e1000g0/v4 state=absent\n\n- name: Configure link-local IPv6 address\n  community.network.ipadm_addr: addtype=addrconf addrobj=vnic0/v6\n\n- name: Configure address via DHCP and wait 180 seconds for address obtaining\n  community.network.ipadm_addr: addrobj=vnic0/dhcp addrtype=dhcp wait=180\n"
  },
  "community.network.ipadm_addrprop": {
    "doc": {
      "description": "Modify IP address properties on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "addrobj": {
          "aliases": [
            "nic",
            "interface"
          ],
          "description": "Specifies the address object we want to manage.",
          "required": true,
          "suboptions": {}
        },
        "property": {
          "aliases": [
            "name"
          ],
          "description": "Specifies the name of the address property we want to manage.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set or reset the property value.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "reset"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the address property value is temporary. Temporary values do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Specifies the value we want to set for the address property.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage IP address properties on Solaris/illumos systems."
    },
    "examples": "\n- name: Mark address on addrobj as deprecated\n  community.network.ipadm_addrprop: property=deprecated value=on addrobj=e1000g0/v6\n\n- name: Set network prefix length for addrobj\n  community.network.ipadm_addrprop: addrobj=bge0/v4 name=prefixlen value=26\n"
  },
  "community.network.ipadm_if": {
    "doc": {
      "description": "Create, delete, enable or disable IP interfaces on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "IP interface name.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete Solaris/illumos IP interfaces.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the IP interface is temporary. Temporary IP interfaces do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage IP interfaces  on Solaris/illumos systems."
    },
    "examples": "\n- name: Create vnic0 interface\n  community.network.ipadm_if:\n    name: vnic0\n    state: enabled\n\n- name: Disable vnic0 interface\n  community.network.ipadm_if:\n    name: vnic0\n    state: disabled\n"
  },
  "community.network.ipadm_ifprop": {
    "doc": {
      "description": "Modify IP interface properties on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "interface": {
          "aliases": [
            "nic"
          ],
          "description": "Specifies the IP interface we want to manage.",
          "required": true,
          "suboptions": {}
        },
        "property": {
          "aliases": [
            "name"
          ],
          "description": "Specifies the name of the property we want to manage.",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Specifies the protocol for which we want to manage properties.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set or reset the property value.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "reset"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the property value is temporary. Temporary property values do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Specifies the value we want to set for the property.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage IP interface properties on Solaris/illumos systems."
    },
    "examples": "\n- name: Allow forwarding of IPv4 packets on network interface e1000g0\n  community.network.ipadm_ifprop: protocol=ipv4 property=forwarding value=on interface=e1000g0\n\n- name: Temporarily reset IPv4 forwarding property on network interface e1000g0\n  community.network.ipadm_ifprop: protocol=ipv4 interface=e1000g0  temporary=true property=forwarding state=reset\n\n- name: Configure IPv6 metric on network interface e1000g0\n  community.network.ipadm_ifprop: protocol=ipv6 nic=e1000g0 name=metric value=100\n\n- name: Set IPv6 MTU on network interface bge0\n  community.network.ipadm_ifprop: interface=bge0 name=mtu value=1280 protocol=ipv6\n"
  },
  "community.network.ipadm_prop": {
    "doc": {
      "description": "Modify protocol properties on Solaris/illumos systems.",
      "has_action": false,
      "options": {
        "property": {
          "aliases": [],
          "description": "Specifies the name of property we want to manage.",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Specifies the protocol for which we want to manage properties.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set or reset the property value.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "reset"
          ],
          "suboptions": {}
        },
        "temporary": {
          "aliases": [],
          "description": "Specifies that the property value is temporary. Temporary property values do not persist across reboots.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Specifies the value we want to set for the property.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage protocol properties on Solaris/illumos systems."
    },
    "examples": "\n- name: Set TCP receive buffer size\n  community.network.ipadm_prop:\n    protocol: tcp\n    property: recv_buf\n    value: 65536\n\n- name: Reset UDP send buffer size to the default value\n  community.network.ipadm_prop:\n    protocol: udp\n    property: send_buf\n    state: reset\n"
  },
  "community.network.ironware_command": {
    "doc": {
      "description": "Sends arbitrary commands to a Extreme Ironware node and returns the results read from the device. This module includes a I(wait_for) argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
      "options": {
        "authorize": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.7 we recommend using C(connection: network_cli) and C(become: yes).\nFor more information please see the L(IronWare Platform Options guide, ../network/user_guide/platform_ironware.html).\nHORIZONTALLINE\nInstructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy. If the value is set to C(all) then all conditionals in the I(wait_for) must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.7 we recommend using C(connection: network_cli) and C(become: yes).\nFor more information please see the L(IronWare Platform Options guide, ../network/user_guide/platform_ironware.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies idle timeout in seconds for the connection, in seconds. Useful if the console freezes before continuing. For example when saving configurations.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run arbitrary commands on Extreme IronWare devices"
    },
    "examples": "\n- name: Run a command\n  community.network.ironware_command:\n    commands:\n      - show version\n\n- name: Run several commands\n  community.network.ironware_command:\n    commands:\n      - show interfaces brief wide\n      - show mpls vll\n"
  },
  "community.network.ironware_config": {
    "doc": {
      "description": "Extreme Ironware configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with Ironware configuration sections in a deterministic way.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "authorize": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.7 we recommend using C(connection: network_cli) and C(become: yes).\nFor more information please see the L(IronWare Platform Options guide, ../network/user_guide/platform_ironware.html).\nHORIZONTALLINE\nInstructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory.  If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system",
          "required": false,
          "suboptions": {}
        },
        "commit": {
          "aliases": [],
          "description": "This argument specifies the update method to use when applying the configuration changes to the remote node.  If the value is set to I(merge) the configuration updates are merged with the running- config.  If the value is set to I(check), no changes are made to the remote host.",
          "default": "merge",
          "required": false,
          "choices": [
            "merge",
            "check"
          ],
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The C(config) argument allows the playbook designer to supply the base configuration to be used to validate configuration changes necessary.  If this argument is provided, the module will not download the running-config from the remote node.",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.7 we recommend using C(connection: network_cli) and C(become: yes).\nFor more information please see the L(IronWare Platform Options guide, ../network/user_guide/platform_ironware.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies idle timeout in seconds for the connection, in seconds. Useful if the console freezes before continuing. For example when saving configurations.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "save_when": {
          "aliases": [],
          "description": "When changes are made to the device running-configuration, the changes are not copied to non-volatile storage by default.  Using this argument will change that before.  If the argument is set to I(always), then the running-config will always be copied to the startup-config and the I(modified) flag will always be set to True.  If the argument is set to I(modified), then the running-config will only be copied to the startup-config if it has changed since the last save to startup-config.  If the argument is set to I(never), the running-config will never be copied to the startup-config",
          "default": "never",
          "required": false,
          "choices": [
            "always",
            "never",
            "modified"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        },
        "update": {
          "aliases": [],
          "description": "The I(update) argument controls how the configuration statements are processed on the remote device.  Valid choices for the I(update) argument are I(merge) and I(check).  When the argument is set to I(merge), the configuration changes are merged with the current device running configuration.  When the argument is set to I(check) the configuration updates are determined but not actually configured on the remote device.",
          "default": "merge",
          "required": false,
          "choices": [
            "merge",
            "check"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage configuration sections on Extreme Ironware devices"
    },
    "examples": "\n- name: Run commands that should be configured in the section\n  community.network.ironware_config:\n    lines:\n      - port-name test\n      - enable\n      - load-interval 30\n      - rate-limit input broadcast unknown-unicast multicast 521216 64000\n    parents: ['interface ethernet 1/2']\n"
  },
  "community.network.ironware_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote device that is running Ironware.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against Ironware 5.8e\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
      "options": {
        "authorize": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.7 we recommend using C(connection: network_cli) and C(become: yes).\nFor more information please see the L(IronWare Platform Options guide, ../network/user_guide/platform_ironware.html).\nHORIZONTALLINE\nInstructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, mpls and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "['!config', '!mpls']",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.7 we recommend using C(connection: network_cli) and C(become: yes).\nFor more information please see the L(IronWare Platform Options guide, ../network/user_guide/platform_ironware.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies idle timeout in seconds for the connection, in seconds. Useful if the console freezes before continuing. For example when saving configurations.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Collect facts from devices running Extreme Ironware"
    },
    "examples": "\n- name: Collect all facts from the device\n  community.network.ironware_facts:\n    gather_subset: all\n\n- name: Collect only the config and default facts\n  community.network.ironware_facts:\n    gather_subset:\n      - config\n\n- name: Do not collect hardware facts\n  community.network.ironware_facts:\n    gather_subset:\n      - \"!hardware\"\n"
  },
  "community.network.nclu": {
    "doc": {
      "description": "Interface to the Network Command Line Utility, developed to make it easier to configure operating systems running ifupdown2 and Quagga, such as Cumulus Linux. Command documentation is available at U(https://docs.cumulusnetworks.com/cumulus-linux/System-Configuration/Network-Command-Line-Utility-NCLU/)",
      "has_action": false,
      "options": {
        "abort": {
          "aliases": [],
          "description": "Boolean. When true, perform a 'net abort' before the block. This cleans out any uncommitted changes in the buffer. Mutually exclusive with I(atomic).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "atomic": {
          "aliases": [],
          "description": "When true, equivalent to both I(commit) and I(abort) being true. Mutually exclusive with I(commit) and I(atomic).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "commands": {
          "aliases": [],
          "description": "A list of strings containing the net commands to run. Mutually exclusive with I(template).",
          "required": false,
          "suboptions": {}
        },
        "commit": {
          "aliases": [],
          "description": "When true, performs a 'net commit' at the end of the block. Mutually exclusive with I(atomic).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Commit description that will be recorded to the commit log if I(commit) or I(atomic) are true.",
          "default": "Ansible-originated commit",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "A single, multi-line string with jinja2 formatting. This string will be broken by lines, and each line will be run through net. Mutually exclusive with I(commands).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Configure network interfaces using NCLU"
    },
    "examples": "\n\n- name: Add two interfaces without committing any changes\n  community.network.nclu:\n    commands:\n        - add int swp1\n        - add int swp2\n\n- name: Modify hostname to Cumulus-1 and commit the change\n  community.network.nclu:\n    commands:\n        - add hostname Cumulus-1\n    commit: true\n\n- name: Add 48 interfaces and commit the change.\n  community.network.nclu:\n    template: |\n        {% for iface in range(1,49) %}\n        add int swp{{iface}}\n        {% endfor %}\n    commit: true\n    description: \"Ansible - add swps1-48\"\n\n- name: Fetch Status Of Interface\n  community.network.nclu:\n    commands:\n        - show interface swp1\n  register: output\n\n- name: Print Status Of Interface\n  ansible.builtin.debug:\n    var: output\n\n- name: Fetch Details From All Interfaces In JSON Format\n  community.network.nclu:\n    commands:\n        - show interface json\n  register: output\n\n- name: Print Interface Details\n  ansible.builtin.debug:\n    var: output[\"msg\"]\n\n- name: Atomically add an interface\n  community.network.nclu:\n    commands:\n        - add int swp1\n    atomic: true\n    description: \"Ansible - add swp1\"\n\n- name: Remove IP address from interface swp1\n  community.network.nclu:\n    commands:\n        - del int swp1 ip address 1.1.1.1/24\n\n- name: Configure BGP AS and add 2 EBGP neighbors using BGP Unnumbered\n  community.network.nclu:\n    commands:\n        - add bgp autonomous-system 65000\n        - add bgp neighbor swp51 interface remote-as external\n        - add bgp neighbor swp52 interface remote-as external\n    commit: true\n\n- name: Configure BGP AS and Add 2 EBGP neighbors Using BGP Unnumbered via Template\n  community.network.nclu:\n    template: |\n      {% for neighbor in range(51,53) %}\n      add bgp neighbor swp{{neighbor}} interface remote-as external\n      add bgp autonomous-system 65000\n      {% endfor %}\n    atomic: true\n\n- name: Check BGP Status\n  community.network.nclu:\n    commands:\n        - show bgp summary json\n  register: output\n\n- name: Print BGP Status In JSON\n  ansible.builtin.debug:\n    var: output[\"msg\"]\n"
  },
  "community.network.netact_cm_command": {
    "doc": {
      "description": "netact_cm_command can be used to run various configuration management operations. This module requires that the target hosts have Nokia NetAct network management system installed. Module will access the Configurator command line interface in NetAct to upload network configuration to NetAct, run configuration export, plan import and configuration provision operations To set the scope of the operation, define Distinguished Name (DN) or Working Set (WS) or Maintenance Region (MR) as input",
      "has_action": false,
      "notes": "Check mode is not currently supported",
      "options": {
        "DN": {
          "aliases": [],
          "description": "Sets the exact scope of the operation in form of a list of managed object Distinguished Names (DN) in the network. A single DN or a list of DNs can be given (comma separated list without spaces). Alternatively, if DN or a list of DNs is not given, working set (WS) or Maintenance Region (MR) must be provided as parameter to set the scope of operation.",
          "required": false,
          "suboptions": {}
        },
        "MR": {
          "aliases": [],
          "description": "Sets the scope of the operation to network elements assigned to a Maintenance Region (MR) Value can be set as MR IDs including the Maintenance Region Collection (MRC) information (for example MRC-FIN1/MR-Hel). Multiple MRs can be given (comma-separated list without spaces) The value of this parameter is searched through MR IDs under given MRC. If there is no match, then it is searched from all MR names. Alternatively, if MR ID or a list or MR IDs is not given, Distinguished Name (DN) or Working Set (WS) must be provided as parameter to set the scope of operation.",
          "required": false,
          "suboptions": {}
        },
        "WS": {
          "aliases": [],
          "description": "Sets the scope of the operation to use one or more pre-defined working sets (WS) in NetAct. A working set contains network elements selected by user according to defined criteria. A single WS name, or multiple WSs can be provided (comma-separated list without spaces). Alternatively, if a WS name or a list of WSs is not given, Distinguished Name (DN) or Maintenance Region(MR) must be provided as parameter to set the scope of operation.",
          "required": false,
          "suboptions": {}
        },
        "backupPlanName": {
          "aliases": [],
          "description": "Specifies a backup plan name",
          "required": false,
          "suboptions": {}
        },
        "createBackupPlan": {
          "aliases": [],
          "description": "Specifies if backup plan generation is enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_opts": {
          "aliases": [],
          "description": "Extra options to be set for operations. Check Configuration Management > Configuration Management Operating Procedures > Command Line Operations in Nokia NetAct user documentation for further information for extra options.",
          "required": false,
          "suboptions": {}
        },
        "fileFormat": {
          "aliases": [],
          "description": "Indicates file format.",
          "required": false,
          "choices": [
            "RAML2",
            "CSV",
            "XLSX"
          ],
          "suboptions": {}
        },
        "fileName": {
          "aliases": [],
          "description": "Specifies a file name. Valid for Import and Export operations.",
          "required": false,
          "suboptions": {}
        },
        "inputFile": {
          "aliases": [],
          "description": "Specifies full path to plan file location for the import operation. This parameter (inputFile) or the fileName parameter must be filled. If both are present then the inputFile is used.",
          "required": false,
          "suboptions": {}
        },
        "operation": {
          "aliases": [
            "op"
          ],
          "description": "Supported operations allow user to upload actual configuration from the network, to import and provision prepared plans, or export reference or actual configuration for planning purposes. Provision_Mass_Modification enables provisioning the same parameters to multiple network elements. This operation supports modifications only to one object class at a time. With this option NetAct Configurator creates and provisions a plan to the network with the given scope and options.",
          "required": true,
          "choices": [
            "upload",
            "provision",
            "import",
            "export",
            "Provision_Mass_Modification"
          ],
          "suboptions": {}
        },
        "opsName": {
          "aliases": [],
          "description": "user specified operation name",
          "required": false,
          "suboptions": {}
        },
        "planName": {
          "aliases": [],
          "description": "Specifies a plan name.",
          "required": false,
          "suboptions": {}
        },
        "typeOption": {
          "aliases": [
            "type"
          ],
          "description": "Specifies the type of the export operation.",
          "required": false,
          "choices": [
            "plan",
            "actual",
            "reference",
            "template",
            "siteTemplate"
          ],
          "suboptions": {}
        },
        "verbose": {
          "aliases": [],
          "description": "NetAct Configurator will print more info",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage network configuration data in Nokia Core and Radio networks"
    },
    "examples": "\n# Pass in a message\n- name: Upload\n  community.network.netact_cm_command:\n    operation: \"Upload\"\n    opsname: 'Uploading_test'\n    dn: \"PLMN-PLMN/MRBTS-746\"\n    extra_opts: '-btsContentInUse true'\n\n- name: Provision\n  community.network.netact_cm_command:\n    operation: \"Provision\"\n    opsname: 'Provision_test'\n    dn: \"PLMN-PLMN/MRBTS-746\"\n    planName: 'mySiteTemplate'\n    type: 'actual'\n    createBackupPlan: true\n    backupPlanName: 'myBackupPlanName'\n\n- name: Export and fetching data from target\n  community.network.netact_cm_command:\n    operation: \"Export\"\n    opsname: 'Export_test'\n    planName: 'mySiteTemplate'\n    type: 'actual'\n    fileName: 'exportTest.xml'\n- ansible.builtin.fetch:\n    src: /var/opt/nokia/oss/global/racops/export/exportTest.xml\n    dest: fetched\n\n- name: Import\n  community.network.netact_cm_command:\n    operation: \"Import\"\n    opsname: 'Import_test'\n    fileFormat: 'CSV'\n    type: 'plan'\n    fileName: 'myCSVFile'\n    planName: 'myPlanName'\n    extra_ops: 'enablePolicyPlans true'\n\n# fail the module\n- name: Test failure of the module\n  community.network.netact_cm_command:\n    name: fail me\n"
  },
  "community.network.netscaler_cs_action": {
    "doc": {
      "description": "Manage content switching actions\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Comments associated with this cs action.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the content switching action. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters. Can be changed after the content switching action is created.",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "targetlbvserver": {
          "aliases": [],
          "description": "Name of the load balancing virtual server to which the content is switched.",
          "required": false,
          "suboptions": {}
        },
        "targetvserver": {
          "aliases": [],
          "description": "Name of the VPN virtual server to which the content is switched.",
          "required": false,
          "suboptions": {}
        },
        "targetvserverexpr": {
          "aliases": [],
          "description": "Information about this content switching action.",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage content switching actions"
    },
    "examples": "\n# lb_vserver_1 must have been already created with the netscaler_lb_vserver module\n\n- name: Configure netscaler content switching action\n  delegate_to: localhost\n  community.network.netscaler_cs_action:\n      nsip: 172.18.0.2\n      nitro_user: nsroot\n      nitro_pass: nsroot\n      validate_certs: no\n\n      state: present\n\n      name: action-1\n      targetlbvserver: lb_vserver_1\n"
  },
  "community.network.netscaler_cs_policy": {
    "doc": {
      "description": "Manage content switching policy.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "action": {
          "aliases": [],
          "description": "Content switching action that names the target load balancing virtual server to which the traffic is switched.",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The domain name. The string value can range to 63 characters.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "policyname": {
          "aliases": [],
          "description": "Name for the content switching policy. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore, hash C(#), period C(.), space C( ), colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters. Cannot be changed after a policy is created.\nThe following requirement applies only to the NetScaler CLI:\nIf the name includes one or more spaces, enclose the name in double or single quotation marks (for example, my policy or my policy).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Expression, or name of a named expression, against which traffic is evaluated. Written in the classic or default syntax.\nNote:\nMaximum length of a string literal in the expression is 255 characters. A longer string can be split into smaller strings of up to 255 characters each, and the smaller strings concatenated with the + operator. For example, you can create a 500-character string as follows: '\"<string of 255 characters>\" + \"<string of 245 characters>\"'",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL string that is matched with the URL of a request. Can contain a wildcard character. Specify the string value in the following format: C([[prefix] [*]] [.suffix]).\nMinimum length = 1\nMaximum length = 208",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage content switching policy"
    },
    "examples": "\n- name: Create url cs policy\n  delegate_to: localhost\n  community.network.netscaler_cs_policy:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n    validate_certs: no\n\n    state: present\n\n    policyname: policy_1\n    url: /example/\n"
  },
  "community.network.netscaler_cs_vserver": {
    "doc": {
      "description": "Manage content switching vserver\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "appflowlog": {
          "aliases": [],
          "description": "Enable logging appflow flow information.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "authentication": {
          "aliases": [],
          "description": "Authenticate users who request a connection to the content switching virtual server.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "authenticationhost": {
          "aliases": [],
          "description": "FQDN of the authentication virtual server. The service type of the virtual server should be either C(HTTP) or C(SSL).\nMinimum length = 3\nMaximum length = 252",
          "required": false,
          "suboptions": {}
        },
        "authn401": {
          "aliases": [],
          "description": "Enable HTTP 401-response based authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "authnprofile": {
          "aliases": [],
          "description": "Name of the authentication profile to be used when authentication is turned on.",
          "required": false,
          "suboptions": {}
        },
        "authnvsname": {
          "aliases": [],
          "description": "Name of authentication virtual server that authenticates the incoming user requests to this content switching virtual server. .\nMinimum length = 1\nMaximum length = 252",
          "required": false,
          "suboptions": {}
        },
        "backupip": {
          "aliases": [],
          "description": ".\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "backupvserver": {
          "aliases": [],
          "description": "Name of the backup virtual server that you are configuring. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters. Can be changed after the backup virtual server is created. You can assign a different backup virtual server or rename the existing virtual server.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "cacheable": {
          "aliases": [],
          "description": "Use this option to specify whether a virtual server, used for load balancing or content switching, routes requests to the cache redirection virtual server before sending it to the configured servers.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "casesensitive": {
          "aliases": [],
          "description": "Consider case in URLs (for policies that use URLs instead of RULES). For example, with the C(on) setting, the URLs /a/1.html and /A/1.HTML are treated differently and can have different targets (set by content switching policies). With the C(off) setting, /a/1.html and /A/1.HTML are switched to the same target.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "clttimeout": {
          "aliases": [],
          "description": "Idle time, in seconds, after which the client connection is terminated. The default values are:\nMinimum value = C(0)\nMaximum value = C(31536000)",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Information about this virtual server.",
          "required": false,
          "suboptions": {}
        },
        "cookiedomain": {
          "aliases": [],
          "description": ".\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "cookietimeout": {
          "aliases": [],
          "description": ".\nMinimum value = C(0)\nMaximum value = C(1440)",
          "required": false,
          "suboptions": {}
        },
        "dbprofilename": {
          "aliases": [],
          "description": "Name of the DB profile.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "When set to C(yes) the cs vserver will be disabled.\nWhen set to C(no) the cs vserver will be enabled.\nNote that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disableprimaryondown": {
          "aliases": [],
          "description": "Continue forwarding the traffic to backup virtual server even after the primary server comes UP from the DOWN state.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "dnsprofilename": {
          "aliases": [],
          "description": "Name of the DNS profile to be associated with the VServer. DNS profile properties will applied to the transactions processed by a VServer. This parameter is valid only for DNS and DNS-TCP VServers.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "domainname": {
          "aliases": [],
          "description": "Domain name for which to change the time to live (TTL) and/or backup service IP address.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "downstateflush": {
          "aliases": [],
          "description": "Flush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "httpprofilename": {
          "aliases": [],
          "description": "Name of the HTTP profile containing HTTP configuration settings for the virtual server. The service type of the virtual server should be either C(HTTP) or C(SSL).\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "icmpvsrresponse": {
          "aliases": [],
          "description": "Can be active or passive.",
          "required": false,
          "choices": [
            "PASSIVE",
            "ACTIVE"
          ],
          "suboptions": {}
        },
        "insertvserveripport": {
          "aliases": [],
          "description": "Insert the virtual server's VIP address and port number in the request header. Available values function as follows:\nC(VIPADDR) - Header contains the vserver's IP address and port number without any translation.\nC(OFF) - The virtual IP and port header insertion option is disabled.\nC(V6TOV4MAPPING) - Header contains the mapped IPv4 address corresponding to the IPv6 address of the vserver and the port number. An IPv6 address can be mapped to a user-specified IPv4 address using the set ns ip6 command.",
          "required": false,
          "choices": [
            "OFF",
            "VIPADDR",
            "V6TOV4MAPPING"
          ],
          "suboptions": {}
        },
        "ipmask": {
          "aliases": [],
          "description": "IP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example, C(255.255.240.0) or C(0.0.255.255)). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward mask. The latter is called a reverse mask.",
          "required": false,
          "suboptions": {}
        },
        "ippattern": {
          "aliases": [],
          "description": "IP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP Address parameter.\nFor example, if the IP pattern assigned to the virtual server is C(198.51.100.0) and the IP mask is C(255.255.240.0) (a forward mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server accepts requests with IP addresses that range from 198.51.96.1 to 198.51.111.254. You can also use a pattern such as C(0.0.2.2) and a mask such as C(0.0.255.255) (a reverse mask).\nIf a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated virtual server processes the request. For example, if the virtual servers, C(vs1) and C(vs2), have the same IP pattern, C(0.0.100.128), but different IP masks of C(0.0.255.255) and C(0.0.224.255), a destination IP address of 198.51.100.128 has the longest match with the IP pattern of C(vs1). If a destination IP address matches two or more virtual servers to the same extent, the request is processed by the virtual server whose port number matches the port number in the request.",
          "required": false,
          "suboptions": {}
        },
        "ipv46": {
          "aliases": [],
          "description": "IP address of the content switching virtual server.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "l2conn": {
          "aliases": [],
          "description": "Use L2 Parameters to identify a connection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lbvserver": {
          "aliases": [],
          "description": "The default Load Balancing virtual server.",
          "required": false,
          "suboptions": {}
        },
        "listenpolicy": {
          "aliases": [],
          "description": "String specifying the listen policy for the content switching virtual server. Can be either the name of an existing expression or an in-line expression.",
          "required": false,
          "suboptions": {}
        },
        "mssqlserverversion": {
          "aliases": [],
          "description": "The version of the MSSQL server.",
          "required": false,
          "choices": [
            "70",
            "2000",
            "2000SP1",
            "2005",
            "2008",
            "2008R2",
            "2012",
            "2014"
          ],
          "suboptions": {}
        },
        "mysqlcharacterset": {
          "aliases": [],
          "description": "The character set returned by the mysql vserver.",
          "required": false,
          "suboptions": {}
        },
        "mysqlprotocolversion": {
          "aliases": [],
          "description": "The protocol version returned by the mysql vserver.",
          "required": false,
          "suboptions": {}
        },
        "mysqlservercapabilities": {
          "aliases": [],
          "description": "The server capabilities returned by the mysql vserver.",
          "required": false,
          "suboptions": {}
        },
        "mysqlserverversion": {
          "aliases": [],
          "description": "The server version string returned by the mysql vserver.\nMinimum length = 1\nMaximum length = 31",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the content switching virtual server. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space, colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters.\nCannot be changed after the CS virtual server is created.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "netprofile": {
          "aliases": [],
          "description": "The name of the network profile.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "oracleserverversion": {
          "aliases": [],
          "description": "Oracle server version.",
          "required": false,
          "choices": [
            "10G",
            "11G"
          ],
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port number for content switching virtual server.\nMinimum value = 1\nRange C(1) - C(65535)\n* in CLI is represented as 65535 in NITRO API",
          "required": false,
          "suboptions": {}
        },
        "precedence": {
          "aliases": [],
          "description": "Type of precedence to use for both RULE-based and URL-based policies on the content switching virtual server. With the default C(RULE) setting, incoming requests are evaluated against the rule-based content switching policies. If none of the rules match, the URL in the request is evaluated against the URL-based content switching policies.",
          "required": false,
          "choices": [
            "RULE",
            "URL"
          ],
          "suboptions": {}
        },
        "push": {
          "aliases": [],
          "description": "Process traffic with the push virtual server that is bound to this content switching virtual server (specified by the Push VServer parameter). The service type of the push virtual server should be either C(HTTP) or C(SSL).",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "pushlabel": {
          "aliases": [],
          "description": "Expression for extracting the label from the response received from server. This string can be either an existing rule name or an inline expression. The service type of the virtual server should be either C(HTTP) or C(SSL).",
          "required": false,
          "suboptions": {}
        },
        "pushmulticlients": {
          "aliases": [],
          "description": "Allow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pushvserver": {
          "aliases": [],
          "description": "Name of the load balancing virtual server, of type C(PUSH) or C(SSL_PUSH), to which the server pushes updates received on the client-facing load balancing virtual server.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "range": {
          "aliases": [],
          "description": "Number of consecutive IP addresses, starting with the address specified by the IP Address parameter, to include in a range of addresses assigned to this virtual server.\nMinimum value = C(1)\nMaximum value = C(254)",
          "required": false,
          "suboptions": {}
        },
        "redirectportrewrite": {
          "aliases": [],
          "description": "State of port rewrite while performing HTTP redirect.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "redirecturl": {
          "aliases": [],
          "description": "URL to which traffic is redirected if the virtual server becomes unavailable. The service type of the virtual server should be either C(HTTP) or C(SSL).\nCaution: Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does, requests are continuously redirected to the unavailable virtual server.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "rhistate": {
          "aliases": [],
          "description": "A host route is injected according to the setting on the virtual servers\n* If set to C(PASSIVE) on all the virtual servers that share the IP address, the appliance always injects the hostroute.\n* If set to C(ACTIVE) on all the virtual servers that share the IP address, the appliance injects even if one virtual server is UP.\n* If set to C(ACTIVE) on some virtual servers and C(PASSIVE) on the others, the appliance, injects even if one virtual server set to C(ACTIVE) is UP.",
          "required": false,
          "choices": [
            "PASSIVE",
            "ACTIVE"
          ],
          "suboptions": {}
        },
        "rtspnat": {
          "aliases": [],
          "description": "Enable network address translation (NAT) for real-time streaming protocol (RTSP) connections.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "servicetype": {
          "aliases": [],
          "description": "Protocol used by the virtual server.",
          "required": false,
          "choices": [
            "HTTP",
            "SSL",
            "TCP",
            "FTP",
            "RTSP",
            "SSL_TCP",
            "UDP",
            "DNS",
            "SIP_UDP",
            "SIP_TCP",
            "SIP_SSL",
            "ANY",
            "RADIUS",
            "RDP",
            "MYSQL",
            "MSSQL",
            "DIAMETER",
            "SSL_DIAMETER",
            "DNS_TCP",
            "ORACLE",
            "SMPP"
          ],
          "suboptions": {}
        },
        "sitedomainttl": {
          "aliases": [],
          "description": ".\nMinimum value = C(1)",
          "required": false,
          "suboptions": {}
        },
        "sobackupaction": {
          "aliases": [],
          "description": "Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.",
          "required": false,
          "choices": [
            "DROP",
            "ACCEPT",
            "REDIRECT"
          ],
          "suboptions": {}
        },
        "somethod": {
          "aliases": [],
          "description": "Type of spillover used to divert traffic to the backup virtual server when the primary virtual server reaches the spillover threshold. Connection spillover is based on the number of connections. Bandwidth spillover is based on the total Kbps of incoming and outgoing traffic.",
          "required": false,
          "choices": [
            "CONNECTION",
            "DYNAMICCONNECTION",
            "BANDWIDTH",
            "HEALTH",
            "NONE"
          ],
          "suboptions": {}
        },
        "sopersistence": {
          "aliases": [],
          "description": "Maintain source-IP based persistence on primary and backup virtual servers.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "sopersistencetimeout": {
          "aliases": [],
          "description": "Time-out value, in minutes, for spillover persistence.\nMinimum value = C(2)\nMaximum value = C(1440)",
          "required": false,
          "suboptions": {}
        },
        "sothreshold": {
          "aliases": [],
          "description": "Depending on the spillover method, the maximum number of connections or the maximum total bandwidth (Kbps) that a virtual server can handle before spillover occurs.\nMinimum value = C(1)\nMaximum value = C(4294967287)",
          "required": false,
          "suboptions": {}
        },
        "ssl_certkey": {
          "aliases": [],
          "description": "The name of the ssl certificate that is bound to this service.\nThe ssl certificate must already exist.\nCreating the certificate can be done with the M(community.network.netscaler_ssl_certkey) module.\nThis option is only applicable only when C(servicetype) is C(SSL).",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "stateupdate": {
          "aliases": [],
          "description": "Enable state updates for a specific content switching virtual server. By default, the Content Switching virtual server is always UP, regardless of the state of the Load Balancing virtual servers bound to it. This parameter interacts with the global setting as follows:\nGlobal Level | Vserver Level | Result\nenabled enabled enabled\nenabled disabled enabled\ndisabled enabled enabled\ndisabled disabled disabled\nIf you want to enable state updates for only some content switching virtual servers, be sure to disable the state update parameter.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "targettype": {
          "aliases": [],
          "description": "Virtual server target type.",
          "required": false,
          "choices": [
            "GSLB"
          ],
          "suboptions": {}
        },
        "tcpprofilename": {
          "aliases": [],
          "description": "Name of the TCP profile containing TCP configuration settings for the virtual server.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "td": {
          "aliases": [],
          "description": "Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.\nMinimum value = 0\nMaximum value = 4094",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": ".\nMinimum value = C(1)",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vipheader": {
          "aliases": [],
          "description": "Name of virtual server IP and port header, for use with the VServer IP Port Insertion parameter.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage content switching vserver"
    },
    "examples": "\n# policy_1 must have been already created with the netscaler_cs_policy module\n# lbvserver_1 must have been already created with the netscaler_lb_vserver module\n\n- name: Setup content switching vserver\n  delegate_to: localhost\n  community.network.netscaler_cs_vserver:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    state: present\n\n    name: cs_vserver_1\n    ipv46: 192.168.1.1\n    port: 80\n    servicetype: HTTP\n\n    policybindings:\n      - policyname: policy_1\n        targetlbvserver: lbvserver_1\n"
  },
  "community.network.netscaler_gslb_service": {
    "doc": {
      "description": "Manage gslb service entities in Netscaler.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "appflowlog": {
          "aliases": [],
          "description": "Enable logging appflow flow information.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "cip": {
          "aliases": [],
          "description": "In the request that is forwarded to the GSLB service, insert a header that stores the client's IP address. Client IP header insertion is used in connection-proxy based site persistence.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "cipheader": {
          "aliases": [],
          "description": "Name for the HTTP header that stores the client's IP address. Used with the Client IP option. If client IP header insertion is enabled on the service and a name is not specified for the header, the NetScaler appliance uses the name specified by the cipHeader parameter in the set ns param command or, in the GUI, the Client IP Header parameter in the Configure HTTP Parameters dialog box.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "clttimeout": {
          "aliases": [],
          "description": "Idle time, in seconds, after which a client connection is terminated. Applicable if connection proxy based site persistence is used.\nMinimum value = 0\nMaximum value = 31536000",
          "required": false,
          "suboptions": {}
        },
        "cnameentry": {
          "aliases": [],
          "description": "Canonical name of the GSLB service. Used in CNAME-based GSLB.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Any comments that you might want to associate with the GSLB service.",
          "required": false,
          "suboptions": {}
        },
        "downstateflush": {
          "aliases": [],
          "description": "Flush all active transactions associated with the GSLB service when its state transitions from UP to DOWN. Do not enable this option for services that must complete their transactions. Applicable if connection proxy based site persistence is used.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "hashid": {
          "aliases": [],
          "description": "Unique hash identifier for the GSLB service, used by hash based load balancing methods.\nMinimum value = C(1)",
          "required": false,
          "suboptions": {}
        },
        "healthmonitor": {
          "aliases": [],
          "description": "Monitor the health of the GSLB service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ipaddress": {
          "aliases": [],
          "description": "IP address for the GSLB service. Should represent a load balancing, content switching, or VPN virtual server on the NetScaler appliance, or the IP address of another load balancing device.",
          "required": false,
          "suboptions": {}
        },
        "maxaaausers": {
          "aliases": [],
          "description": "Maximum number of SSL VPN users that can be logged on concurrently to the VPN virtual server that is represented by this GSLB service. A GSLB service whose user count reaches the maximum is not considered when a GSLB decision is made, until the count drops below the maximum.\nMinimum value = C(0)\nMaximum value = C(65535)",
          "required": false,
          "suboptions": {}
        },
        "maxbandwidth": {
          "aliases": [],
          "description": "Integer specifying the maximum bandwidth allowed for the service. A GSLB service whose bandwidth reaches the maximum is not considered when a GSLB decision is made, until its bandwidth consumption drops below the maximum.",
          "required": false,
          "suboptions": {}
        },
        "maxclient": {
          "aliases": [],
          "description": "The maximum number of open connections that the service can support at any given time. A GSLB service whose connection count reaches the maximum is not considered when a GSLB decision is made, until the connection count drops below the maximum.\nMinimum value = C(0)\nMaximum value = C(4294967294)",
          "required": false,
          "suboptions": {}
        },
        "monitor_bindings": {
          "aliases": [],
          "description": "Bind monitors to this gslb service",
          "required": false,
          "suboptions": {
            "monitor_name": {
              "aliases": [],
              "description": "Monitor name.",
              "required": false,
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "Weight to assign to the monitor-service binding.\nA larger number specifies a greater weight.\nContributes to the monitoring threshold, which determines the state of the service.\nMinimum value = C(1)\nMaximum value = C(100)",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "monthreshold": {
          "aliases": [],
          "description": "Monitoring threshold value for the GSLB service. If the sum of the weights of the monitors that are bound to this GSLB service and are in the UP state is not equal to or greater than this threshold value, the service is marked as DOWN.\nMinimum value = C(0)\nMaximum value = C(65535)",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port on which the load balancing entity represented by this GSLB service listens.\nMinimum value = 1\nRange 1 - 65535\n* in CLI is represented as 65535 in NITRO API",
          "required": false,
          "suboptions": {}
        },
        "publicip": {
          "aliases": [],
          "description": "The public IP address that a NAT device translates to the GSLB service's private IP address. Optional.",
          "required": false,
          "suboptions": {}
        },
        "publicport": {
          "aliases": [],
          "description": "The public port associated with the GSLB service's public IP address. The port is mapped to the service's private port number. Applicable to the local GSLB service. Optional.",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "servername": {
          "aliases": [],
          "description": "Name of the server hosting the GSLB service.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "servicename": {
          "aliases": [],
          "description": "Name for the GSLB service. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space, colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Can be changed after the GSLB service is created.\n\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "servicetype": {
          "aliases": [],
          "description": "Type of service to create.",
          "required": false,
          "choices": [
            "HTTP",
            "FTP",
            "TCP",
            "UDP",
            "SSL",
            "SSL_BRIDGE",
            "SSL_TCP",
            "NNTP",
            "ANY",
            "SIP_UDP",
            "SIP_TCP",
            "SIP_SSL",
            "RADIUS",
            "RDP",
            "RTSP",
            "MYSQL",
            "MSSQL",
            "ORACLE"
          ],
          "suboptions": {}
        },
        "sitename": {
          "aliases": [],
          "description": "Name of the GSLB site to which the service belongs.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "sitepersistence": {
          "aliases": [],
          "description": "Use cookie-based site persistence. Applicable only to C(HTTP) and C(SSL) GSLB services.",
          "required": false,
          "choices": [
            "ConnectionProxy",
            "HTTPRedirect",
            "NONE"
          ],
          "suboptions": {}
        },
        "siteprefix": {
          "aliases": [],
          "description": "The site's prefix string. When the service is bound to a GSLB virtual server, a GSLB site domain is generated internally for each bound service-domain pair by concatenating the site prefix of the service and the name of the domain. If the special string NONE is specified, the site-prefix string is unset. When implementing HTTP redirect site persistence, the NetScaler appliance redirects GSLB requests to GSLB services by using their site domains.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage gslb service entities in Netscaler."
    },
    "examples": "\n- name: Setup gslb service 2\n\n  delegate_to: localhost\n  register: result\n  check_mode: \"{{ check_mode }}\"\n\n  community.network.netscaler_gslb_service:\n    operation: present\n\n    servicename: gslb-service-2\n    cnameentry: example.com\n    sitename: gslb-site-1\n"
  },
  "community.network.netscaler_gslb_site": {
    "doc": {
      "description": "Manage gslb site entities in Netscaler.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "clip": {
          "aliases": [],
          "description": "Cluster IP address. Specify this parameter to connect to the remote cluster site for GSLB auto-sync. Note: The cluster IP address is defined when creating the cluster.",
          "required": false,
          "suboptions": {}
        },
        "metricexchange": {
          "aliases": [],
          "description": "Exchange metrics with other sites. Metrics are exchanged by using Metric Exchange Protocol (MEP). The appliances in the GSLB setup exchange health information once every second.\nIf you disable metrics exchange, you can use only static load balancing methods (such as round robin, static proximity, or the hash-based methods), and if you disable metrics exchange when a dynamic load balancing method (such as least connection) is in operation, the appliance falls back to round robin. Also, if you disable metrics exchange, you must use a monitor to determine the state of GSLB services. Otherwise, the service is marked as DOWN.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "naptrreplacementsuffix": {
          "aliases": [],
          "description": "The naptr replacement suffix configured here will be used to construct the naptr replacement field in NAPTR record.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nwmetricexchange": {
          "aliases": [],
          "description": "Exchange, with other GSLB sites, network metrics such as round-trip time (RTT), learned from communications with various local DNS (LDNS) servers used by clients. RTT information is used in the dynamic RTT load balancing method, and is exchanged every 5 seconds.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "parentsite": {
          "aliases": [],
          "description": "Parent site of the GSLB site, in a parent-child topology.",
          "required": false,
          "suboptions": {}
        },
        "publicclip": {
          "aliases": [],
          "description": "IP address to be used to globally access the remote cluster when it is deployed behind a NAT. It can be same as the normal cluster IP address.",
          "required": false,
          "suboptions": {}
        },
        "publicip": {
          "aliases": [],
          "description": "Public IP address for the local site. Required only if the appliance is deployed in a private address space and the site has a public IP address hosted on an external firewall or a NAT device.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sessionexchange": {
          "aliases": [],
          "description": "Exchange persistent session entries with other GSLB sites every five seconds.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "siteipaddress": {
          "aliases": [],
          "description": "IP address for the GSLB site. The GSLB site uses this IP address to communicate with other GSLB sites. For a local site, use any IP address that is owned by the appliance (for example, a SNIP or MIP address, or the IP address of the ADNS service).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "sitename": {
          "aliases": [],
          "description": "Name for the GSLB site. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Cannot be changed after the virtual server is created.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "sitetype": {
          "aliases": [],
          "description": "Type of site to create. If the type is not specified, the appliance automatically detects and sets the type on the basis of the IP address being assigned to the site. If the specified site IP address is owned by the appliance (for example, a MIP address or SNIP address), the site is a local site. Otherwise, it is a remote site.",
          "required": false,
          "choices": [
            "REMOTE",
            "LOCAL"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "triggermonitor": {
          "aliases": [],
          "description": "Specify the conditions under which the GSLB service must be monitored by a monitor, if one is bound. Available settings function as follows:\n* C(ALWAYS) - Monitor the GSLB service at all times.\n* C(MEPDOWN) - Monitor the GSLB service only when the exchange of metrics through the Metrics Exchange Protocol (MEP) is disabled.\nC(MEPDOWN_SVCDOWN) - Monitor the service in either of the following situations:\n* The exchange of metrics through MEP is disabled.\n* The exchange of metrics through MEP is enabled but the status of the service, learned through metrics exchange, is DOWN.",
          "required": false,
          "choices": [
            "ALWAYS",
            "MEPDOWN",
            "MEPDOWN_SVCDOWN"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage gslb site entities in Netscaler."
    },
    "examples": "\n- name: Setup gslb site\n  delegate_to: localhost\n  community.network.netscaler_gslb_site:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    sitename: gslb-site-1\n    siteipaddress: 192.168.1.1\n    sitetype: LOCAL\n    publicip: 192.168.1.1\n    metricexchange: enabled\n    nwmetricexchange: enabled\n    sessionexchange: enabled\n    triggermonitor: ALWAYS\n\n"
  },
  "community.network.netscaler_gslb_vserver": {
    "doc": {
      "description": "Configure gslb vserver entities in Netscaler.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "appflowlog": {
          "aliases": [],
          "description": "Enable logging appflow flow information.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "backuplbmethod": {
          "aliases": [],
          "description": "Backup load balancing method. Becomes operational if the primary load balancing method fails or cannot be used. Valid only if the primary method is based on either round-trip time (RTT) or static proximity.",
          "required": false,
          "choices": [
            "ROUNDROBIN",
            "LEASTCONNECTION",
            "LEASTRESPONSETIME",
            "SOURCEIPHASH",
            "LEASTBANDWIDTH",
            "LEASTPACKETS",
            "STATICPROXIMITY",
            "RTT",
            "CUSTOMLOAD"
          ],
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Any comments that you might want to associate with the GSLB virtual server.",
          "required": false,
          "suboptions": {}
        },
        "considereffectivestate": {
          "aliases": [],
          "description": "If the primary state of all bound GSLB services is DOWN, consider the effective states of all the GSLB services, obtained through the Metrics Exchange Protocol (MEP), when determining the state of the GSLB virtual server. To consider the effective state, set the parameter to STATE_ONLY. To disregard the effective state, set the parameter to NONE.\nThe effective state of a GSLB service is the ability of the corresponding virtual server to serve traffic. The effective state of the load balancing virtual server, which is transferred to the GSLB service, is UP even if only one virtual server in the backup chain of virtual servers is in the UP state.",
          "required": false,
          "choices": [
            "NONE",
            "STATE_ONLY"
          ],
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "When set to C(yes) the GSLB Vserver state will be set to C(disabled).\nWhen set to C(no) the GSLB Vserver state will be set to C(enabled).\nNote that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disableprimaryondown": {
          "aliases": [],
          "description": "Continue to direct traffic to the backup chain even after the primary GSLB virtual server returns to the UP state. Used when spillover is configured for the virtual server.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "dnsrecordtype": {
          "aliases": [],
          "description": "DNS record type to associate with the GSLB virtual server's domain name.\nDefault value: A\nPossible values = A, AAAA, CNAME, NAPTR",
          "required": false,
          "choices": [
            "A",
            "AAAA",
            "CNAME",
            "NAPTR"
          ],
          "suboptions": {}
        },
        "domain_bindings": {
          "aliases": [],
          "description": "List of bindings for domains for this glsb vserver.",
          "required": false,
          "suboptions": {
            "cookietimeout": {
              "aliases": [],
              "description": "Timeout, in minutes, for the GSLB site cookie.",
              "required": false,
              "suboptions": {}
            },
            "domainname": {
              "aliases": [],
              "description": "Domain name for which to change the time to live (TTL) and/or backup service IP address.",
              "required": false,
              "suboptions": {}
            },
            "sitedomainttl": {
              "aliases": [],
              "description": "TTL, in seconds, for all internally created site domains (created when a site prefix is configured on a GSLB service) that are associated with this virtual server.\nMinimum value = C(1)",
              "required": false,
              "suboptions": {}
            },
            "ttl": {
              "aliases": [],
              "description": "Time to live (TTL) for the domain.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "dynamicweight": {
          "aliases": [],
          "description": "Specify if the appliance should consider the service count, service weights, or ignore both when using weight-based load balancing methods. The state of the number of services bound to the virtual server help the appliance to select the service.",
          "required": false,
          "choices": [
            "SERVICECOUNT",
            "SERVICEWEIGHT",
            "DISABLED"
          ],
          "suboptions": {}
        },
        "lbmethod": {
          "aliases": [],
          "description": "Load balancing method for the GSLB virtual server.\nDefault value: LEASTCONNECTION\nPossible values = ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME, SOURCEIPHASH, LEASTBANDWIDTH, LEASTPACKETS, STATICPROXIMITY, RTT, CUSTOMLOAD",
          "required": false,
          "choices": [
            "ROUNDROBIN",
            "LEASTCONNECTION",
            "LEASTRESPONSETIME",
            "SOURCEIPHASH",
            "LEASTBANDWIDTH",
            "LEASTPACKETS",
            "STATICPROXIMITY",
            "RTT",
            "CUSTOMLOAD"
          ],
          "suboptions": {}
        },
        "mir": {
          "aliases": [],
          "description": "Include multiple IP addresses in the DNS responses sent to clients.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the GSLB virtual server. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space, colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Can be changed after the virtual server is created.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "netmask": {
          "aliases": [],
          "description": "IPv4 network mask for use in the SOURCEIPHASH load balancing method.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "persistenceid": {
          "aliases": [],
          "description": "The persistence ID for the GSLB virtual server. The ID is a positive integer that enables GSLB sites to identify the GSLB virtual server, and is required if source IP address based or spill over based persistence is enabled on the virtual server.\nMinimum value = C(0)\nMaximum value = C(65535)",
          "required": false,
          "suboptions": {}
        },
        "persistencetype": {
          "aliases": [],
          "description": "Use source IP address based persistence for the virtual server.\nAfter the load balancing method selects a service for the first packet, the IP address received in response to the DNS query is used for subsequent requests from the same client.",
          "required": false,
          "choices": [
            "SOURCEIP",
            "NONE"
          ],
          "suboptions": {}
        },
        "persistmask": {
          "aliases": [],
          "description": "The optional IPv4 network mask applied to IPv4 addresses to establish source IP address based persistence.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "service_bindings": {
          "aliases": [],
          "description": "List of bindings for gslb services bound to this gslb virtual server.",
          "required": false,
          "suboptions": {
            "servicename": {
              "aliases": [],
              "description": "Name of the GSLB service for which to change the weight.",
              "required": false,
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "Weight to assign to the GSLB service.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "servicetype": {
          "aliases": [],
          "description": "Protocol used by services bound to the virtual server.\n",
          "required": false,
          "choices": [
            "HTTP",
            "FTP",
            "TCP",
            "UDP",
            "SSL",
            "SSL_BRIDGE",
            "SSL_TCP",
            "NNTP",
            "ANY",
            "SIP_UDP",
            "SIP_TCP",
            "SIP_SSL",
            "RADIUS",
            "RDP",
            "RTSP",
            "MYSQL",
            "MSSQL",
            "ORACLE"
          ],
          "suboptions": {}
        },
        "sobackupaction": {
          "aliases": [],
          "description": "Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.",
          "required": false,
          "choices": [
            "DROP",
            "ACCEPT",
            "REDIRECT"
          ],
          "suboptions": {}
        },
        "somethod": {
          "aliases": [],
          "description": "Type of threshold that, when exceeded, triggers spillover. Available settings function as follows:\n* C(CONNECTION) - Spillover occurs when the number of client connections exceeds the threshold.\n* C(DYNAMICCONNECTION) - Spillover occurs when the number of client connections at the GSLB virtual server exceeds the sum of the maximum client (Max Clients) settings for bound GSLB services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of the bound GSLB services.\n* C(BANDWIDTH) - Spillover occurs when the bandwidth consumed by the GSLB virtual server's incoming and outgoing traffic exceeds the threshold.\n* C(HEALTH) - Spillover occurs when the percentage of weights of the GSLB services that are UP drops below the threshold. For example, if services gslbSvc1, gslbSvc2, and gslbSvc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if gslbSvc1 and gslbSvc3 or gslbSvc2 and gslbSvc3 transition to DOWN.\n* C(NONE) - Spillover does not occur.",
          "required": false,
          "choices": [
            "CONNECTION",
            "DYNAMICCONNECTION",
            "BANDWIDTH",
            "HEALTH",
            "NONE"
          ],
          "suboptions": {}
        },
        "sopersistence": {
          "aliases": [],
          "description": "If spillover occurs, maintain source IP address based persistence for both primary and backup GSLB virtual servers.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "sopersistencetimeout": {
          "aliases": [],
          "description": "Timeout for spillover persistence, in minutes.\nDefault value: C(2)\nMinimum value = C(2)\nMaximum value = C(1440)",
          "required": false,
          "suboptions": {}
        },
        "sothreshold": {
          "aliases": [],
          "description": "Threshold at which spillover occurs. Specify an integer for the CONNECTION spillover method, a bandwidth value in kilobits per second for the BANDWIDTH method (do not enter the units), or a percentage for the HEALTH method (do not enter the percentage symbol).\nMinimum value = C(1)\nMaximum value = C(4294967287)",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Idle time, in minutes, after which a persistence entry is cleared.\nDefault value: C(2)\nMinimum value = C(2)\nMaximum value = C(1440)",
          "required": false,
          "suboptions": {}
        },
        "tolerance": {
          "aliases": [],
          "description": "Site selection tolerance, in milliseconds, for implementing the RTT load balancing method. If a site's RTT deviates from the lowest RTT by more than the specified tolerance, the site is not considered when the NetScaler appliance makes a GSLB decision. The appliance implements the round robin method of global server load balancing between sites whose RTT values are within the specified tolerance. If the tolerance is 0 (zero), the appliance always sends clients the IP address of the site with the lowest RTT.\nMinimum value = C(0)\nMaximum value = C(100)",
          "required": false,
          "suboptions": {}
        },
        "v6netmasklen": {
          "aliases": [],
          "description": "Number of bits to consider, in an IPv6 source IP address, for creating the hash that is required by the C(SOURCEIPHASH) load balancing method.\nDefault value: C(128)\nMinimum value = C(1)\nMaximum value = C(128)",
          "required": false,
          "suboptions": {}
        },
        "v6persistmasklen": {
          "aliases": [],
          "description": "Number of bits to consider in an IPv6 source IP address when creating source IP address based persistence sessions.\nDefault value: C(128)\nMinimum value = C(1)\nMaximum value = C(128)",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Configure gslb vserver entities in Netscaler."
    },
    "examples": "\n# FIXME: Add examples\n"
  },
  "community.network.netscaler_lb_monitor": {
    "doc": {
      "description": "Manage load balancing monitors.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "Snmpoid": {
          "aliases": [],
          "description": "SNMP OID for C(SNMP) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "acctapplicationid": {
          "aliases": [],
          "description": "List of Acct-Application-Id attribute value pairs (AVPs) for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. A maximum of eight of these AVPs are supported in a monitoring message.\nMinimum value = C(0)\nMaximum value = C(4294967295)",
          "required": false,
          "suboptions": {}
        },
        "action": {
          "aliases": [],
          "description": "Action to perform when the response to an inline monitor (a monitor of type C(HTTP-INLINE)) indicates that the service is down. A service monitored by an inline monitor is considered C(DOWN) if the response code is not one of the codes that have been specified for the Response Code parameter.\nAvailable settings function as follows:\n* C(NONE) - Do not take any action. However, the show service command and the show lb monitor command indicate the total number of responses that were checked and the number of consecutive error responses received after the last successful probe.\n* C(LOG) - Log the event in NSLOG or SYSLOG.\n* C(DOWN) - Mark the service as being down, and then do not direct any traffic to the service until the configured down time has expired. Persistent connections to the service are terminated as soon as the service is marked as C(DOWN). Also, log the event in NSLOG or SYSLOG.",
          "required": false,
          "choices": [
            "NONE",
            "LOG",
            "DOWN"
          ],
          "suboptions": {}
        },
        "alertretries": {
          "aliases": [],
          "description": "Number of consecutive probe failures after which the appliance generates an SNMP trap called monProbeFailed.\nMinimum value = C(0)\nMaximum value = C(32)",
          "required": false,
          "suboptions": {}
        },
        "application": {
          "aliases": [],
          "description": "Name of the application used to determine the state of the service. Applicable to monitors of type C(CITRIX-XML-SERVICE).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "attribute": {
          "aliases": [],
          "description": "Attribute to evaluate when the LDAP server responds to the query. Success or failure of the monitoring probe depends on whether the attribute exists in the response. Optional.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "authapplicationid": {
          "aliases": [],
          "description": "List of Auth-Application-Id attribute value pairs (AVPs) for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. A maximum of eight of these AVPs are supported in a monitoring CER message.\nMinimum value = C(0)\nMaximum value = C(4294967295)",
          "required": false,
          "suboptions": {}
        },
        "basedn": {
          "aliases": [],
          "description": "The base distinguished name of the LDAP service, from where the LDAP server can begin the search for the attributes in the monitoring query. Required for C(LDAP) service monitoring.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "binddn": {
          "aliases": [],
          "description": "The distinguished name with which an LDAP monitor can perform the Bind operation on the LDAP server. Optional. Applicable to C(LDAP) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "customheaders": {
          "aliases": [],
          "description": "Custom header string to include in the monitoring probes.",
          "required": false,
          "suboptions": {}
        },
        "database": {
          "aliases": [],
          "description": "Name of the database to connect to during authentication.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "destip": {
          "aliases": [],
          "description": "IP address of the service to which to send probes. If the parameter is set to 0, the IP address of the server to which the monitor is bound is considered the destination IP address.",
          "required": false,
          "suboptions": {}
        },
        "destport": {
          "aliases": [],
          "description": "TCP or UDP port to which to send the probe. If the parameter is set to 0, the port number of the service to which the monitor is bound is considered the destination port. For a monitor of type C(USER), however, the destination port is the port number that is included in the HTTP request sent to the dispatcher. Does not apply to monitors of type C(PING).",
          "required": false,
          "suboptions": {}
        },
        "deviation": {
          "aliases": [],
          "description": "Time value added to the learned average response time in dynamic response time monitoring (DRTM). When a deviation is specified, the appliance learns the average response time of bound services and adds the deviation to the average. The final value is then continually adjusted to accommodate response time variations over time. Specified in milliseconds, seconds, or minutes.\nMinimum value = C(0)\nMaximum value = C(20939)",
          "required": false,
          "suboptions": {}
        },
        "dispatcherip": {
          "aliases": [],
          "description": "IP address of the dispatcher to which to send the probe.",
          "required": false,
          "suboptions": {}
        },
        "dispatcherport": {
          "aliases": [],
          "description": "Port number on which the dispatcher listens for the monitoring probe.",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain in which the XenDesktop Desktop Delivery Controller (DDC) servers or Web Interface servers are present. Required by C(CITRIX-XD-DDC) and C(CITRIX-WI-EXTENDED) monitors for logging on to the DDC servers and Web Interface servers, respectively.",
          "required": false,
          "suboptions": {}
        },
        "downtime": {
          "aliases": [],
          "description": "Time duration for which to wait before probing a service that has been marked as DOWN. Expressed in milliseconds, seconds, or minutes.\nMinimum value = C(1)\nMaximum value = C(20939)",
          "required": false,
          "suboptions": {}
        },
        "evalrule": {
          "aliases": [],
          "description": "Default syntax expression that evaluates the database server's response to a MYSQL-ECV or MSSQL-ECV monitoring query. Must produce a Boolean result. The result determines the state of the server. If the expression returns TRUE, the probe succeeds.\nFor example, if you want the appliance to evaluate the error message to determine the state of the server, use the rule C(MYSQL.RES.ROW(10) .TEXT_ELEM(2).EQ(\"MySQL\")).",
          "required": false,
          "suboptions": {}
        },
        "failureretries": {
          "aliases": [],
          "description": "Number of retries that must fail, out of the number specified for the Retries parameter, for a service to be marked as DOWN. For example, if the Retries parameter is set to 10 and the Failure Retries parameter is set to 6, out of the ten probes sent, at least six probes must fail if the service is to be marked as DOWN. The default value of 0 means that all the retries must fail if the service is to be marked as DOWN.\nMinimum value = C(0)\nMaximum value = C(32)",
          "required": false,
          "suboptions": {}
        },
        "filename": {
          "aliases": [],
          "description": "Name of a file on the FTP server. The appliance monitors the FTP service by periodically checking the existence of the file on the server. Applicable to C(FTP-EXTENDED) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "Filter criteria for the LDAP query. Optional.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "firmwarerevision": {
          "aliases": [],
          "description": "Firmware-Revision value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of a newsgroup available on the NNTP service that is to be monitored. The appliance periodically generates an NNTP query for the name of the newsgroup and evaluates the response. If the newsgroup is found on the server, the service is marked as UP. If the newsgroup does not exist or if the search fails, the service is marked as DOWN. Applicable to NNTP monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "hostipaddress": {
          "aliases": [],
          "description": "Host-IP-Address value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. If Host-IP-Address is not specified, the appliance inserts the mapped IP (MIP) address or subnet IP (SNIP) address from which the CER request (the monitoring probe) is sent.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Hostname in the FQDN format (Example: C(porche.cars.org)). Applicable to C(STOREFRONT) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "httprequest": {
          "aliases": [],
          "description": "HTTP request to send to the server (for example, C(\"HEAD /file.html\")).",
          "required": false,
          "suboptions": {}
        },
        "inbandsecurityid": {
          "aliases": [],
          "description": "Inband-Security-Id for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.",
          "required": false,
          "choices": [
            "NO_INBAND_SECURITY",
            "TLS"
          ],
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Time interval between two successive probes. Must be greater than the value of Response Time-out.\nMinimum value = C(1)\nMaximum value = C(20940)",
          "required": false,
          "suboptions": {}
        },
        "ipaddress": {
          "aliases": [],
          "description": "Set of IP addresses expected in the monitoring response from the DNS server, if the record type is A or AAAA. Applicable to C(DNS) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "iptunnel": {
          "aliases": [],
          "description": "Send the monitoring probe to the service through an IP tunnel. A destination IP address must be specified.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "kcdaccount": {
          "aliases": [],
          "description": "KCD Account used by C(MSSQL) monitor.\nMinimum length = 1\nMaximum length = 32",
          "required": false,
          "suboptions": {}
        },
        "lasversion": {
          "aliases": [],
          "description": "Version number of the Citrix Advanced Access Control Logon Agent. Required by the C(CITRIX-AAC-LAS) monitor.",
          "required": false,
          "suboptions": {}
        },
        "logonpointname": {
          "aliases": [],
          "description": "Name of the logon point that is configured for the Citrix Access Gateway Advanced Access Control software. Required if you want to monitor the associated login page or Logon Agent. Applicable to C(CITRIX-AAC-LAS) and C(CITRIX-AAC-LOGINPAGE) monitors.",
          "required": false,
          "suboptions": {}
        },
        "lrtm": {
          "aliases": [],
          "description": "Calculate the least response times for bound services. If this parameter is not enabled, the appliance does not learn the response times of the bound services. Also used for LRTM load balancing.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "maxforwards": {
          "aliases": [],
          "description": "Maximum number of hops that the SIP request used for monitoring can traverse to reach the server. Applicable only to monitors of type C(SIP-UDP).\nMinimum value = C(0)\nMaximum value = C(255)",
          "required": false,
          "suboptions": {}
        },
        "metrictable": {
          "aliases": [],
          "description": "Metric table to which to bind metrics.\nMinimum length = 1\nMaximum length = 99",
          "required": false,
          "suboptions": {}
        },
        "monitorname": {
          "aliases": [],
          "description": "Name for the monitor. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore, hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "mssqlprotocolversion": {
          "aliases": [],
          "description": "Version of MSSQL server that is to be monitored.",
          "required": false,
          "choices": [
            "70",
            "2000",
            "2000SP1",
            "2005",
            "2008",
            "2008R2",
            "2012",
            "2014"
          ],
          "suboptions": {}
        },
        "netprofile": {
          "aliases": [],
          "description": "Name of the network profile.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "oraclesid": {
          "aliases": [],
          "description": "Name of the service identifier that is used to connect to the Oracle database during authentication.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "originhost": {
          "aliases": [],
          "description": "Origin-Host value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "originrealm": {
          "aliases": [],
          "description": "Origin-Realm value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password that is required for logging on to the C(RADIUS), C(NNTP), C(FTP), C(FTP-EXTENDED), C(MYSQL), C(MSSQL), C(POP3), C(CITRIX-AG), C(CITRIX-XD-DDC), C(CITRIX-WI-EXTENDED), C(CITRIX-XNC-ECV) or C(CITRIX-XDM) server. Used in conjunction with the user name specified for the C(username) parameter.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "productname": {
          "aliases": [],
          "description": "Product-Name value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "Domain name to resolve as part of monitoring the DNS service (for example, C(example.com)).",
          "required": false,
          "suboptions": {}
        },
        "querytype": {
          "aliases": [],
          "description": "Type of DNS record for which to send monitoring queries. Set to C(Address) for querying A records, C(AAAA) for querying AAAA records, and C(Zone) for querying the SOA record.",
          "required": false,
          "choices": [
            "Address",
            "Zone",
            "AAAA"
          ],
          "suboptions": {}
        },
        "radaccountsession": {
          "aliases": [],
          "description": "Account Session ID to be used in Account Request Packet. Applicable to monitors of type C(RADIUS_ACCOUNTING).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "radaccounttype": {
          "aliases": [],
          "description": "Account Type to be used in Account Request Packet. Applicable to monitors of type C(RADIUS_ACCOUNTING).\nMinimum value = 0\nMaximum value = 15",
          "required": false,
          "suboptions": {}
        },
        "radapn": {
          "aliases": [],
          "description": "Called Station Id to be used in Account Request Packet. Applicable to monitors of type C(RADIUS_ACCOUNTING).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "radframedip": {
          "aliases": [],
          "description": "Source ip with which the packet will go out . Applicable to monitors of type C(RADIUS_ACCOUNTING).",
          "required": false,
          "suboptions": {}
        },
        "radkey": {
          "aliases": [],
          "description": "Authentication key (shared secret text string) for RADIUS clients and servers to exchange. Applicable to monitors of type C(RADIUS) and C(RADIUS_ACCOUNTING).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "radmsisdn": {
          "aliases": [],
          "description": "Calling Stations Id to be used in Account Request Packet. Applicable to monitors of type C(RADIUS_ACCOUNTING).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "radnasid": {
          "aliases": [],
          "description": "NAS-Identifier to send in the Access-Request packet. Applicable to monitors of type C(RADIUS).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "radnasip": {
          "aliases": [],
          "description": "Network Access Server (NAS) IP address to use as the source IP address when monitoring a RADIUS server. Applicable to monitors of type C(RADIUS) and C(RADIUS_ACCOUNTING).",
          "required": false,
          "suboptions": {}
        },
        "recv": {
          "aliases": [],
          "description": "String expected from the server for the service to be marked as UP. Applicable to C(TCP-ECV), C(HTTP-ECV), and C(UDP-ECV) monitors.",
          "required": false,
          "suboptions": {}
        },
        "respcode": {
          "aliases": [],
          "description": "Response codes for which to mark the service as UP. For any other response code, the action performed depends on the monitor type. C(HTTP) monitors and C(RADIUS) monitors mark the service as C(DOWN), while C(HTTP-INLINE) monitors perform the action indicated by the Action parameter.",
          "required": false,
          "suboptions": {}
        },
        "resptimeout": {
          "aliases": [],
          "description": "Amount of time for which the appliance must wait before it marks a probe as FAILED. Must be less than the value specified for the Interval parameter.\nNote: For C(UDP-ECV) monitors for which a receive string is not configured, response timeout does not apply. For C(UDP-ECV) monitors with no receive string, probe failure is indicated by an ICMP port unreachable error received from the service.\nMinimum value = C(1)\nMaximum value = C(20939)",
          "required": false,
          "suboptions": {}
        },
        "resptimeoutthresh": {
          "aliases": [],
          "description": "Response time threshold, specified as a percentage of the Response Time-out parameter. If the response to a monitor probe has not arrived when the threshold is reached, the appliance generates an SNMP trap called monRespTimeoutAboveThresh. After the response time returns to a value below the threshold, the appliance generates a monRespTimeoutBelowThresh SNMP trap. For the traps to be generated, the \"MONITOR-RTO-THRESHOLD\" alarm must also be enabled.\nMinimum value = C(0)\nMaximum value = C(100)",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Maximum number of probes to send to establish the state of a service for which a monitoring probe failed.\nMinimum value = C(1)\nMaximum value = C(127)",
          "required": false,
          "suboptions": {}
        },
        "reverse": {
          "aliases": [],
          "description": "Mark a service as DOWN, instead of UP, when probe criteria are satisfied, and as UP instead of DOWN when probe criteria are not satisfied.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rtsprequest": {
          "aliases": [],
          "description": "RTSP request to send to the server (for example, C(\"OPTIONS *\")).",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scriptargs": {
          "aliases": [],
          "description": "String of arguments for the script. The string is copied verbatim into the request.",
          "required": false,
          "suboptions": {}
        },
        "scriptname": {
          "aliases": [],
          "description": "Path and name of the script to execute. The script must be available on the NetScaler appliance, in the /nsconfig/monitors/ directory.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "secondarypassword": {
          "aliases": [],
          "description": "Secondary password that users might have to provide to log on to the Access Gateway server. Applicable to C(CITRIX-AG) monitors.",
          "required": false,
          "suboptions": {}
        },
        "secure": {
          "aliases": [],
          "description": "Use a secure SSL connection when monitoring a service. Applicable only to TCP based monitors. The secure option cannot be used with a C(CITRIX-AG) monitor, because a CITRIX-AG monitor uses a secure connection by default.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "send": {
          "aliases": [],
          "description": "String to send to the service. Applicable to C(TCP-ECV), C(HTTP-ECV), and C(UDP-ECV) monitors.",
          "required": false,
          "suboptions": {}
        },
        "sipmethod": {
          "aliases": [],
          "description": "SIP method to use for the query. Applicable only to monitors of type C(SIP-UDP).",
          "required": false,
          "choices": [
            "OPTIONS",
            "INVITE",
            "REGISTER"
          ],
          "suboptions": {}
        },
        "sipreguri": {
          "aliases": [],
          "description": "SIP user to be registered. Applicable only if the monitor is of type C(SIP-UDP) and the SIP Method parameter is set to C(REGISTER).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "sipuri": {
          "aliases": [],
          "description": "SIP URI string to send to the service (for example, C(sip:sip.test)). Applicable only to monitors of type C(SIP-UDP).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "sitepath": {
          "aliases": [],
          "description": "URL of the logon page. For monitors of type C(CITRIX-WEB-INTERFACE), to monitor a dynamic page under the site path, terminate the site path with a slash C(/). Applicable to C(CITRIX-WEB-INTERFACE), C(CITRIX-WI-EXTENDED) and C(CITRIX-XDM) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "snmpcommunity": {
          "aliases": [],
          "description": "Community name for C(SNMP) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "snmpthreshold": {
          "aliases": [],
          "description": "Threshold for C(SNMP) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "snmpversion": {
          "aliases": [],
          "description": "SNMP version to be used for C(SNMP) monitors.",
          "required": false,
          "choices": [
            "V1",
            "V2"
          ],
          "suboptions": {}
        },
        "sqlquery": {
          "aliases": [],
          "description": "SQL query for a C(MYSQL-ECV) or C(MSSQL-ECV) monitor. Sent to the database server after the server authenticates the connection.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the monitor. The C(disabled) setting disables not only the monitor being configured, but all monitors of the same type, until the parameter is set to C(enabled). If the monitor is bound to a service, the state of the monitor is not taken into account when the state of the service is determined.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "storedb": {
          "aliases": [],
          "description": "Store the database list populated with the responses to monitor probes. Used in database specific load balancing if C(MSSQL-ECV)/C(MYSQL-ECV) monitor is configured.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "storefrontacctservice": {
          "aliases": [],
          "description": "Enable/Disable probing for Account Service. Applicable only to Store Front monitors. For multi-tenancy configuration users my skip account service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "storefrontcheckbackendservices": {
          "aliases": [],
          "description": "This option will enable monitoring of services running on storefront server. Storefront services are monitored by probing to a Windows service that runs on the Storefront server and exposes details of which storefront services are running.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "storename": {
          "aliases": [],
          "description": "Store Name. For monitors of type C(STOREFRONT), C(storename) is an optional argument defining storefront service store name. Applicable to C(STOREFRONT) monitors.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "successretries": {
          "aliases": [],
          "description": "Number of consecutive successful probes required to transition a service's state from DOWN to UP.\nMinimum value = C(1)\nMaximum value = C(32)",
          "required": false,
          "suboptions": {}
        },
        "supportedvendorids": {
          "aliases": [],
          "description": "List of Supported-Vendor-Id attribute value pairs (AVPs) for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. A maximum eight of these AVPs are supported in a monitoring message.\nMinimum value = C(1)\nMaximum value = C(4294967295)",
          "required": false,
          "suboptions": {}
        },
        "tos": {
          "aliases": [],
          "description": "Probe the service by encoding the destination IP address in the IP TOS (6) bits.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tosid": {
          "aliases": [],
          "description": "The TOS ID of the specified destination IP. Applicable only when the TOS parameter is set.\nMinimum value = C(1)\nMaximum value = C(63)",
          "required": false,
          "suboptions": {}
        },
        "transparent": {
          "aliases": [],
          "description": "The monitor is bound to a transparent device such as a firewall or router. The state of a transparent device depends on the responsiveness of the services behind it. If a transparent device is being monitored, a destination IP address must be specified. The probe is sent to the specified IP address by using the MAC address of the transparent device.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trofscode": {
          "aliases": [],
          "description": "Code expected when the server is under maintenance.",
          "required": false,
          "suboptions": {}
        },
        "trofsstring": {
          "aliases": [],
          "description": "String expected from the server for the service to be marked as trofs. Applicable to HTTP-ECV/TCP-ECV monitors.",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of monitor that you want to create.",
          "required": false,
          "choices": [
            "PING",
            "TCP",
            "HTTP",
            "TCP-ECV",
            "HTTP-ECV",
            "UDP-ECV",
            "DNS",
            "FTP",
            "LDNS-PING",
            "LDNS-TCP",
            "LDNS-DNS",
            "RADIUS",
            "USER",
            "HTTP-INLINE",
            "SIP-UDP",
            "SIP-TCP",
            "LOAD",
            "FTP-EXTENDED",
            "SMTP",
            "SNMP",
            "NNTP",
            "MYSQL",
            "MYSQL-ECV",
            "MSSQL-ECV",
            "ORACLE-ECV",
            "LDAP",
            "POP3",
            "CITRIX-XML-SERVICE",
            "CITRIX-WEB-INTERFACE",
            "DNS-TCP",
            "RTSP",
            "ARP",
            "CITRIX-AG",
            "CITRIX-AAC-LOGINPAGE",
            "CITRIX-AAC-LAS",
            "CITRIX-XD-DDC",
            "ND6",
            "CITRIX-WI-EXTENDED",
            "DIAMETER",
            "RADIUS_ACCOUNTING",
            "STOREFRONT",
            "APPC",
            "SMPP",
            "CITRIX-XNC-ECV",
            "CITRIX-XDM",
            "CITRIX-STA-SERVICE",
            "CITRIX-STA-SERVICE-NHOP"
          ],
          "suboptions": {}
        },
        "units1": {
          "aliases": [],
          "description": "Unit of measurement for the Deviation parameter. Cannot be changed after the monitor is created.",
          "required": false,
          "choices": [
            "SEC",
            "MSEC",
            "MIN"
          ],
          "suboptions": {}
        },
        "units2": {
          "aliases": [],
          "description": "Unit of measurement for the Down Time parameter. Cannot be changed after the monitor is created.",
          "required": false,
          "choices": [
            "SEC",
            "MSEC",
            "MIN"
          ],
          "suboptions": {}
        },
        "units3": {
          "aliases": [],
          "description": "monitor interval units.",
          "required": false,
          "choices": [
            "SEC",
            "MSEC",
            "MIN"
          ],
          "suboptions": {}
        },
        "units4": {
          "aliases": [],
          "description": "monitor response timeout units.",
          "required": false,
          "choices": [
            "SEC",
            "MSEC",
            "MIN"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "User name with which to probe the C(RADIUS), C(NNTP), C(FTP), C(FTP-EXTENDED), C(MYSQL), C(MSSQL), C(POP3), C(CITRIX-AG), C(CITRIX-XD-DDC), C(CITRIX-WI-EXTENDED), C(CITRIX-XNC) or C(CITRIX-XDM) server.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validatecred": {
          "aliases": [],
          "description": "Validate the credentials of the Xen Desktop DDC server user. Applicable to monitors of type C(CITRIX-XD-DDC).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vendorid": {
          "aliases": [],
          "description": "Vendor-Id value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.",
          "required": false,
          "suboptions": {}
        },
        "vendorspecificacctapplicationids": {
          "aliases": [],
          "description": "List of Vendor-Specific-Acct-Application-Id attribute value pairs (AVPs) to use for monitoring Diameter servers. A maximum of eight of these AVPs are supported in a monitoring message. The specified value is combined with the value of vendorSpecificVendorId to obtain the Vendor-Specific-Application-Id AVP in the CER monitoring message.\nMinimum value = C(0)\nMaximum value = C(4294967295)",
          "required": false,
          "suboptions": {}
        },
        "vendorspecificauthapplicationids": {
          "aliases": [],
          "description": "List of Vendor-Specific-Auth-Application-Id attribute value pairs (AVPs) for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. A maximum of eight of these AVPs are supported in a monitoring message. The specified value is combined with the value of vendorSpecificVendorId to obtain the Vendor-Specific-Application-Id AVP in the CER monitoring message.\nMinimum value = C(0)\nMaximum value = C(4294967295)",
          "required": false,
          "suboptions": {}
        },
        "vendorspecificvendorid": {
          "aliases": [],
          "description": "Vendor-Id to use in the Vendor-Specific-Application-Id grouped attribute-value pair (AVP) in the monitoring CER message. To specify Auth-Application-Id or Acct-Application-Id in Vendor-Specific-Application-Id, use vendorSpecificAuthApplicationIds or vendorSpecificAcctApplicationIds, respectively. Only one Vendor-Id is supported for all the Vendor-Specific-Application-Id AVPs in a CER monitoring message.\nMinimum value = 1",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage load balancing monitors"
    },
    "examples": "\n- name: Set lb monitor\n  local_action:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n    validate_certs: no\n\n\n    module: netscaler_lb_monitor\n    state: present\n\n    monitorname: monitor_1\n    type: HTTP-INLINE\n    action: DOWN\n    respcode: ['400']\n"
  },
  "community.network.netscaler_lb_vserver": {
    "doc": {
      "description": "Manage load balancing vserver configuration\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "appflowlog": {
          "aliases": [],
          "description": "Apply AppFlow logging to the virtual server.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "authentication": {
          "aliases": [],
          "description": "Enable or disable user authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "authenticationhost": {
          "aliases": [],
          "description": "Fully qualified domain name (FQDN) of the authentication virtual server to which the user must be redirected for authentication. Make sure that the Authentication parameter is set to C(yes).\nMinimum length = 3\nMaximum length = 252",
          "required": false,
          "suboptions": {}
        },
        "authn401": {
          "aliases": [],
          "description": "Enable or disable user authentication with HTTP 401 responses.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "authnprofile": {
          "aliases": [],
          "description": "Name of the authentication profile to be used when authentication is turned on.",
          "required": false,
          "suboptions": {}
        },
        "authnvsname": {
          "aliases": [],
          "description": "Name of an authentication virtual server with which to authenticate users.\nMinimum length = 1\nMaximum length = 252",
          "required": false,
          "suboptions": {}
        },
        "backuplbmethod": {
          "aliases": [],
          "description": "Backup load balancing method. Becomes operational if the primary load balancing me\nthod fails or cannot be used.\nValid only if the primary method is based on static proximity.",
          "required": false,
          "choices": [
            "ROUNDROBIN",
            "LEASTCONNECTION",
            "LEASTRESPONSETIME",
            "SOURCEIPHASH",
            "LEASTBANDWIDTH",
            "LEASTPACKETS",
            "CUSTOMLOAD"
          ],
          "suboptions": {}
        },
        "backuppersistencetimeout": {
          "aliases": [],
          "description": "Time period for which backup persistence is in effect.\nMinimum value = C(2)\nMaximum value = C(1440)",
          "required": false,
          "suboptions": {}
        },
        "bypassaaaa": {
          "aliases": [],
          "description": "If this option is enabled while resolving DNS64 query AAAA queries are not sent to back end dns server.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cacheable": {
          "aliases": [],
          "description": "Route cacheable requests to a cache redirection virtual server. The load balancing virtual server can forward requests only to a transparent cache redirection virtual server that has an IP address and port combination of *:80, so such a cache redirection virtual server must be configured on the appliance.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "clttimeout": {
          "aliases": [],
          "description": "Idle time, in seconds, after which a client connection is terminated.\nMinimum value = C(0)\nMaximum value = C(31536000)",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Any comments that you might want to associate with the virtual server.",
          "required": false,
          "suboptions": {}
        },
        "connfailover": {
          "aliases": [],
          "description": "Mode in which the connection failover feature must operate for the virtual server. After a failover, established TCP connections and UDP packet flows are kept active and resumed on the secondary appliance. Clients remain connected to the same servers. Available settings function as follows:\n* C(STATEFUL) - The primary appliance shares state information with the secondary appliance, in real time, resulting in some runtime processing overhead.\n* C(STATELESS) - State information is not shared, and the new primary appliance tries to re-create the packet flow on the basis of the information contained in the packets it receives.\n* C(DISABLED) - Connection failover does not occur.",
          "required": false,
          "choices": [
            "DISABLED",
            "STATEFUL",
            "STATELESS"
          ],
          "suboptions": {}
        },
        "cookiename": {
          "aliases": [],
          "description": "Use this parameter to specify the cookie name for C(COOKIE) persistence type. It specifies the name of cookie with a maximum of 32 characters. If not specified, cookie name is internally generated.",
          "required": false,
          "suboptions": {}
        },
        "datalength": {
          "aliases": [],
          "description": "Length of the token to be extracted from the data segment of an incoming packet, for use in the token method of load balancing. The length of the token, specified in bytes, must not be greater than 24 KB. Applicable to virtual servers of type TCP.\nMinimum value = C(1)\nMaximum value = C(100)",
          "required": false,
          "suboptions": {}
        },
        "dataoffset": {
          "aliases": [],
          "description": "Offset to be considered when extracting a token from the TCP payload. Applicable to virtual servers, of type TCP, using the token method of load balancing. Must be within the first 24 KB of the TCP payload.\nMinimum value = C(0)\nMaximum value = C(25400)",
          "required": false,
          "suboptions": {}
        },
        "dbprofilename": {
          "aliases": [],
          "description": "Name of the DB profile whose settings are to be applied to the virtual server.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "dbslb": {
          "aliases": [],
          "description": "Enable database specific load balancing for MySQL and MSSQL service types.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "When set to C(yes) the lb vserver will be disabled.\nWhen set to C(no) the lb vserver will be enabled.\nNote that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disableprimaryondown": {
          "aliases": [],
          "description": "If the primary virtual server goes down, do not allow it to return to primary status until manually enabled.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "dns64": {
          "aliases": [],
          "description": "This argument is for enabling/disabling the C(dns64) on lbvserver.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "dnsprofilename": {
          "aliases": [],
          "description": "Name of the DNS profile to be associated with the VServer. DNS profile properties will be applied to the transactions processed by a VServer. This parameter is valid only for DNS and DNS-TCP VServers.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "downstateflush": {
          "aliases": [],
          "description": "Flush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "hashlength": {
          "aliases": [],
          "description": "Number of bytes to consider for the hash value used in the URLHASH and DOMAINHASH load balancing methods.\nMinimum value = C(1)\nMaximum value = C(4096)",
          "required": false,
          "suboptions": {}
        },
        "healththreshold": {
          "aliases": [],
          "description": "Threshold in percent of active services below which vserver state is made down. If this threshold is 0, vserver state will be up even if one bound service is up.\nMinimum value = C(0)\nMaximum value = C(100)",
          "required": false,
          "suboptions": {}
        },
        "httpprofilename": {
          "aliases": [],
          "description": "Name of the HTTP profile whose settings are to be applied to the virtual server.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "icmpvsrresponse": {
          "aliases": [],
          "description": "How the NetScaler appliance responds to ping requests received for an IP address that is common to one or more virtual servers. Available settings function as follows:\n* If set to C(PASSIVE) on all the virtual servers that share the IP address, the appliance always responds to the ping requests.\n* If set to C(ACTIVE) on all the virtual servers that share the IP address, the appliance responds to the ping requests if at least one of the virtual servers is UP. Otherwise, the appliance does not respond.\n* If set to C(ACTIVE) on some virtual servers and PASSIVE on the others, the appliance responds if at least one virtual server with the ACTIVE setting is UP. Otherwise, the appliance does not respond.\nNote: This parameter is available at the virtual server level. A similar parameter, ICMP Response, is available at the IP address level, for IPv4 addresses of type VIP. To set that parameter, use the add ip command in the CLI or the Create IP dialog box in the GUI.",
          "required": false,
          "choices": [
            "PASSIVE",
            "ACTIVE"
          ],
          "suboptions": {}
        },
        "insertvserveripport": {
          "aliases": [],
          "description": "Insert an HTTP header, whose value is the IP address and port number of the virtual server, before forwarding a request to the server. The format of the header is <vipHeader>: <virtual server IP address>_<port number >, where vipHeader is the name that you specify for the header. If the virtual server has an IPv6 address, the address in the header is enclosed in brackets ([ and ]) to separate it from the port number. If you have mapped an IPv4 address to a virtual server's IPv6 address, the value of this parameter determines which IP address is inserted in the header, as follows:\n* C(VIPADDR) - Insert the IP address of the virtual server in the HTTP header regardless of whether the virtual server has an IPv4 address or an IPv6 address. A mapped IPv4 address, if configured, is ignored.\n* C(V6TOV4MAPPING) - Insert the IPv4 address that is mapped to the virtual server's IPv6 address. If a mapped IPv4 address is not configured, insert the IPv6 address.\n* C(OFF) - Disable header insertion.",
          "required": false,
          "choices": [
            "OFF",
            "VIPADDR",
            "V6TOV4MAPPING"
          ],
          "suboptions": {}
        },
        "ipmask": {
          "aliases": [],
          "description": "IP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example, C(255.255.240.0) or C(0.0.255.255)). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward mask. The latter is called a reverse mask.",
          "required": false,
          "suboptions": {}
        },
        "ippattern": {
          "aliases": [],
          "description": "IP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP Address parameter.\nFor example, if the IP pattern assigned to the virtual server is C(198.51.100.0) and the IP mask is C(255.255.240.0) (a forward mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server accepts requests with IP addresses that range from C(198.51.96.1) to C(198.51.111.254). You can also use a pattern such as C(0.0.2.2) and a mask such as C(0.0.255.255) (a reverse mask).\nIf a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated virtual server processes the request. For example, if virtual servers C(vs1) and C(vs2) have the same IP pattern, C(0.0.100.128), but different IP masks of C(0.0.255.255) and C(0.0.224.255), a destination IP address of C(198.51.100.128) has the longest match with the IP pattern of vs1. If a destination IP address matches two or more virtual servers to the same extent, the request is processed by the virtual server whose port number matches the port number in the request.",
          "required": false,
          "suboptions": {}
        },
        "ipv46": {
          "aliases": [],
          "description": "IPv4 or IPv6 address to assign to the virtual server.",
          "required": false,
          "suboptions": {}
        },
        "l2conn": {
          "aliases": [],
          "description": "Use Layer 2 parameters (channel number, MAC address, and VLAN ID) in addition to the 4-tuple (<source IP>:<source port>::<destination IP>:<destination port>) that is used to identify a connection. Allows multiple TCP and non-TCP connections with the same 4-tuple to co-exist on the NetScaler appliance.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lbmethod": {
          "aliases": [],
          "description": "Load balancing method. The available settings function as follows:\n* C(ROUNDROBIN) - Distribute requests in rotation, regardless of the load. Weights can be assigned to services to enforce weighted round robin distribution.\n* C(LEASTCONNECTION) (default) - Select the service with the fewest connections.\n* C(LEASTRESPONSETIME) - Select the service with the lowest average response time.\n* C(LEASTBANDWIDTH) - Select the service currently handling the least traffic.\n* C(LEASTPACKETS) - Select the service currently serving the lowest number of packets per second.\n* C(CUSTOMLOAD) - Base service selection on the SNMP metrics obtained by custom load monitors.\n* C(LRTM) - Select the service with the lowest response time. Response times are learned through monitoring probes. This method also takes the number of active connections into account.\nAlso available are a number of hashing methods, in which the appliance extracts a predetermined portion of the request, creates a hash of the portion, and then checks whether any previous requests had the same hash value. If it finds a match, it forwards the request to the service that served those previous requests. Following are the hashing methods:\n* C(URLHASH) - Create a hash of the request URL (or part of the URL).\n* C(DOMAINHASH) - Create a hash of the domain name in the request (or part of the domain name). The domain name is taken from either the URL or the Host header. If the domain name appears in both locations, the URL is preferred. If the request does not contain a domain name, the load balancing method defaults to C(LEASTCONNECTION).\n* C(DESTINATIONIPHASH) - Create a hash of the destination IP address in the IP header.\n* C(SOURCEIPHASH) - Create a hash of the source IP address in the IP header.\n* C(TOKEN) - Extract a token from the request, create a hash of the token, and then select the service to which any previous requests with the same token hash value were sent.\n* C(SRCIPDESTIPHASH) - Create a hash of the string obtained by concatenating the source IP address and destination IP address in the IP header.\n* C(SRCIPSRCPORTHASH) - Create a hash of the source IP address and source port in the IP header.\n* C(CALLIDHASH) - Create a hash of the SIP Call-ID header.",
          "required": false,
          "choices": [
            "ROUNDROBIN",
            "LEASTCONNECTION",
            "LEASTRESPONSETIME",
            "URLHASH",
            "DOMAINHASH",
            "DESTINATIONIPHASH",
            "SOURCEIPHASH",
            "SRCIPDESTIPHASH",
            "LEASTBANDWIDTH",
            "LEASTPACKETS",
            "TOKEN",
            "SRCIPSRCPORTHASH",
            "LRTM",
            "CALLIDHASH",
            "CUSTOMLOAD",
            "LEASTREQUEST",
            "AUDITLOGHASH",
            "STATICPROXIMITY"
          ],
          "suboptions": {}
        },
        "listenpolicy": {
          "aliases": [],
          "description": "Default syntax expression identifying traffic accepted by the virtual server. Can be either an expression (for example, C(CLIENT.IP.DST.IN_SUBNET(192.0.2.0/24)) or the name of a named expression. In the above example, the virtual server accepts all requests whose destination IP address is in the 192.0.2.0/24 subnet.",
          "required": false,
          "suboptions": {}
        },
        "listenpriority": {
          "aliases": [],
          "description": "Integer specifying the priority of the listen policy. A higher number specifies a lower priority. If a request matches the listen policies of more than one virtual server the virtual server whose listen policy has the highest priority (the lowest priority number) accepts the request.\nMinimum value = C(0)\nMaximum value = C(101)",
          "required": false,
          "suboptions": {}
        },
        "m": {
          "aliases": [],
          "description": "Redirection mode for load balancing. Available settings function as follows:\n* C(IP) - Before forwarding a request to a server, change the destination IP address to the server's IP address.\n* C(MAC) - Before forwarding a request to a server, change the destination MAC address to the server's MAC address. The destination IP address is not changed. MAC-based redirection mode is used mostly in firewall load balancing deployments.\n* C(IPTUNNEL) - Perform IP-in-IP encapsulation for client IP packets. In the outer IP headers, set the destination IP address to the IP address of the server and the source IP address to the subnet IP (SNIP). The client IP packets are not modified. Applicable to both IPv4 and IPv6 packets.\n* C(TOS) - Encode the virtual server's TOS ID in the TOS field of the IP header.\nYou can use either the C(IPTUNNEL) or the C(TOS) option to implement Direct Server Return (DSR).",
          "required": false,
          "choices": [
            "IP",
            "MAC",
            "IPTUNNEL",
            "TOS"
          ],
          "suboptions": {}
        },
        "macmoderetainvlan": {
          "aliases": [],
          "description": "This option is used to retain vlan information of incoming packet when macmode is enabled.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "maxautoscalemembers": {
          "aliases": [],
          "description": "Maximum number of members expected to be present when vserver is used in Autoscale.\nMinimum value = C(0)\nMaximum value = C(5000)",
          "required": false,
          "suboptions": {}
        },
        "minautoscalemembers": {
          "aliases": [],
          "description": "Minimum number of members expected to be present when vserver is used in Autoscale.\nMinimum value = C(0)\nMaximum value = C(5000)",
          "required": false,
          "suboptions": {}
        },
        "mssqlserverversion": {
          "aliases": [],
          "description": "For a load balancing virtual server of type C(MSSQL), the Microsoft SQL Server version. Set this parameter if you expect some clients to run a version different from the version of the database. This setting provides compatibility between the client-side and server-side connections by ensuring that all communication conforms to the server's version.",
          "required": false,
          "choices": [
            "70",
            "2000",
            "2000SP1",
            "2005",
            "2008",
            "2008R2",
            "2012",
            "2014"
          ],
          "suboptions": {}
        },
        "mysqlcharacterset": {
          "aliases": [],
          "description": "Character set that the virtual server advertises to clients.",
          "required": false,
          "suboptions": {}
        },
        "mysqlprotocolversion": {
          "aliases": [],
          "description": "MySQL protocol version that the virtual server advertises to clients.",
          "required": false,
          "suboptions": {}
        },
        "mysqlservercapabilities": {
          "aliases": [],
          "description": "Server capabilities that the virtual server advertises to clients.",
          "required": false,
          "suboptions": {}
        },
        "mysqlserverversion": {
          "aliases": [],
          "description": "MySQL server version string that the virtual server advertises to clients.\nMinimum length = 1\nMaximum length = 31",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the virtual server. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore, hash C(#), period C(.), space C( ), colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters. Can be changed after the virtual server is created.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "netmask": {
          "aliases": [],
          "description": "IPv4 subnet mask to apply to the destination IP address or source IP address when the load balancing method is C(DESTINATIONIPHASH) or C(SOURCEIPHASH).\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "netprofile": {
          "aliases": [],
          "description": "Name of the network profile to associate with the virtual server. If you set this parameter, the virtual server uses only the IP addresses in the network profile as source IP addresses when initiating connections with servers.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "newservicerequest": {
          "aliases": [],
          "description": "Number of requests, or percentage of the load on existing services, by which to increase the load on a new service at each interval in slow-start mode. A non-zero value indicates that slow-start is applicable. A zero value indicates that the global RR startup parameter is applied. Changing the value to zero will cause services currently in slow start to take the full traffic as determined by the LB method. Subsequently, any new services added will use the global RR factor.",
          "required": false,
          "suboptions": {}
        },
        "newservicerequestincrementinterval": {
          "aliases": [],
          "description": "Interval, in seconds, between successive increments in the load on a new service or a service whose state has just changed from DOWN to UP. A value of 0 (zero) specifies manual slow start.\nMinimum value = C(0)\nMaximum value = C(3600)",
          "required": false,
          "suboptions": {}
        },
        "newservicerequestunit": {
          "aliases": [],
          "description": "Units in which to increment load at each interval in slow-start mode.",
          "required": false,
          "choices": [
            "PER_SECOND",
            "PERCENT"
          ],
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "oracleserverversion": {
          "aliases": [],
          "description": "Oracle server version.",
          "required": false,
          "choices": [
            "10G",
            "11G"
          ],
          "suboptions": {}
        },
        "persistavpno": {
          "aliases": [],
          "description": "Persist AVP number for Diameter Persistency.\nIn case this AVP is not defined in Base RFC 3588 and it is nested inside a Grouped AVP,\ndefine a sequence of AVP numbers (max 3) in order of parent to child. So say persist AVP number X\nis nested inside AVP Y which is nested in Z, then define the list as Z Y X.\nMinimum value = C(1)",
          "required": false,
          "suboptions": {}
        },
        "persistencebackup": {
          "aliases": [],
          "description": "Backup persistence type for the virtual server. Becomes operational if the primary persistence mechanism fails.",
          "required": false,
          "choices": [
            "SOURCEIP",
            "NONE"
          ],
          "suboptions": {}
        },
        "persistencetype": {
          "aliases": [],
          "description": "Type of persistence for the virtual server. Available settings function as follows:\n* C(SOURCEIP) - Connections from the same client IP address belong to the same persistence session.\n* C(COOKIEINSERT) - Connections that have the same HTTP Cookie, inserted by a Set-Cookie directive from a server, belong to the same persistence session.\n* C(SSLSESSION) - Connections that have the same SSL Session ID belong to the same persistence session.\n* C(CUSTOMSERVERID) - Connections with the same server ID form part of the same session. For this persistence type, set the Server ID (CustomServerID) parameter for each service and configure the Rule parameter to identify the server ID in a request.\n* C(RULE) - All connections that match a user defined rule belong to the same persistence session.\n* C(URLPASSIVE) - Requests that have the same server ID in the URL query belong to the same persistence session. The server ID is the hexadecimal representation of the IP address and port of the service to which the request must be forwarded. This persistence type requires a rule to identify the server ID in the request.\n* C(DESTIP) - Connections to the same destination IP address belong to the same persistence session.\n* C(SRCIPDESTIP) - Connections that have the same source IP address and destination IP address belong to the same persistence session.\n* C(CALLID) - Connections that have the same CALL-ID SIP header belong to the same persistence session.\n* C(RTSPSID) - Connections that have the same RTSP Session ID belong to the same persistence session.\n* FIXSESSION - Connections that have the same SenderCompID and TargetCompID values belong to the same persistence session.",
          "required": false,
          "choices": [
            "SOURCEIP",
            "COOKIEINSERT",
            "SSLSESSION",
            "RULE",
            "URLPASSIVE",
            "CUSTOMSERVERID",
            "DESTIP",
            "SRCIPDESTIP",
            "CALLID",
            "RTSPSID",
            "DIAMETER",
            "FIXSESSION",
            "NONE"
          ],
          "suboptions": {}
        },
        "persistmask": {
          "aliases": [],
          "description": "Persistence mask for IP based persistence types, for IPv4 virtual servers.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port number for the virtual server.\nRange C(1) - C(65535)\n* in CLI is represented as C(65535) in NITRO API",
          "required": false,
          "suboptions": {}
        },
        "processlocal": {
          "aliases": [],
          "description": "By turning on this option packets destined to a vserver in a cluster will not under go any steering. Turn this option for single packet request response mode or when the upstream device is performing a proper RSS for connection based distribution.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "push": {
          "aliases": [],
          "description": "Process traffic with the push virtual server that is bound to this load balancing virtual server.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "pushlabel": {
          "aliases": [],
          "description": "Expression for extracting a label from the server's response. Can be either an expression or the name of a named expression.",
          "required": false,
          "suboptions": {}
        },
        "pushmulticlients": {
          "aliases": [],
          "description": "Allow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pushvserver": {
          "aliases": [],
          "description": "Name of the load balancing virtual server, of type PUSH or SSL_PUSH, to which the server pushes updates received on the load balancing virtual server that you are configuring.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "range": {
          "aliases": [],
          "description": "Number of IP addresses that the appliance must generate and assign to the virtual server. The virtual server then functions as a network virtual server, accepting traffic on any of the generated IP addresses. The IP addresses are generated automatically, as follows:\n* For a range of n, the last octet of the address specified by the IP Address parameter increments n-1 times.\n* If the last octet exceeds 255, it rolls over to 0 and the third octet increments by 1.\nNote: The Range parameter assigns multiple IP addresses to one virtual server. To generate an array of virtual servers, each of which owns only one IP address, use brackets in the IP Address and Name parameters to specify the range. For example:\nadd lb vserver my_vserver[1-3] HTTP 192.0.2.[1-3] 80.\nMinimum value = C(1)\nMaximum value = C(254)",
          "required": false,
          "suboptions": {}
        },
        "recursionavailable": {
          "aliases": [],
          "description": "When set to YES, this option causes the DNS replies from this vserver to have the RA bit turned on. Typically one would set this option to YES, when the vserver is load balancing a set of DNS servers thatsupport recursive queries.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "redirectportrewrite": {
          "aliases": [],
          "description": "Rewrite the port and change the protocol to ensure successful HTTP redirects from services.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "redirurl": {
          "aliases": [],
          "description": "URL to which to redirect traffic if the virtual server becomes unavailable.\nWARNING! Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does, requests are continuously redirected to the unavailable virtual server.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "resrule": {
          "aliases": [],
          "description": "Default syntax expression specifying which part of a server's response to use for creating rule based persistence sessions (persistence type RULE). Can be either an expression or the name of a named expression.\nExample:\nC(HTTP.RES.HEADER(\"setcookie\").VALUE(0).TYPECAST_NVLIST_T(\"=\",\";\").VALUE(\"server1\")).",
          "required": false,
          "suboptions": {}
        },
        "rhistate": {
          "aliases": [],
          "description": "Route Health Injection (RHI) functionality of the NetSaler appliance for advertising the route of the VIP address associated with the virtual server. When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:\n* If you set C(rhistate) to C(PASSIVE) on all virtual servers, the NetScaler ADC always advertises the route for the VIP address.\n* If you set C(rhistate) to C(ACTIVE) on all virtual servers, the NetScaler ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.\n* If you set C(rhistate) to C(ACTIVE) on some and PASSIVE on others, the NetScaler ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose C(rhistate) set to C(ACTIVE), is in UP state.",
          "required": false,
          "choices": [
            "PASSIVE",
            "ACTIVE"
          ],
          "suboptions": {}
        },
        "rtspnat": {
          "aliases": [],
          "description": "Use network address translation (NAT) for RTSP data connections.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "servicebindings": {
          "aliases": [],
          "description": "List of services along with the weights that are load balanced.\nThe following suboptions are available.",
          "required": false,
          "suboptions": {
            "servicename": {
              "aliases": [],
              "description": "Service to bind to the virtual server.\nMinimum length = 1",
              "required": false,
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "Weight to assign to the specified service.\nMinimum value = C(1)\nMaximum value = C(100)",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "servicegroupbindings": {
          "aliases": [],
          "description": "List of service groups along with the weights that are load balanced.\nThe following suboptions are available.",
          "required": false,
          "suboptions": {
            "servicegroupname": {
              "aliases": [],
              "description": "The service group name bound to the selected load balancing virtual server.",
              "required": false,
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "Integer specifying the weight of the service. A larger number specifies a greater weight. Defines the capacity of the service relative to the other services in the load balancing configuration. Determines the priority given to the service in load balancing decisions.\nMinimum value = C(1)\nMaximum value = C(100)",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "servicetype": {
          "aliases": [],
          "description": "Protocol used by the service (also called the service type).",
          "required": false,
          "choices": [
            "HTTP",
            "FTP",
            "TCP",
            "UDP",
            "SSL",
            "SSL_BRIDGE",
            "SSL_TCP",
            "DTLS",
            "NNTP",
            "DNS",
            "DHCPRA",
            "ANY",
            "SIP_UDP",
            "SIP_TCP",
            "SIP_SSL",
            "DNS_TCP",
            "RTSP",
            "PUSH",
            "SSL_PUSH",
            "RADIUS",
            "RDP",
            "MYSQL",
            "MSSQL",
            "DIAMETER",
            "SSL_DIAMETER",
            "TFTP",
            "ORACLE",
            "SMPP",
            "SYSLOGTCP",
            "SYSLOGUDP",
            "FIX",
            "SSL_FIX"
          ],
          "suboptions": {}
        },
        "sessionless": {
          "aliases": [],
          "description": "Perform load balancing on a per-packet basis, without establishing sessions. Recommended for load balancing of intrusion detection system (IDS) servers and scenarios involving direct server return (DSR), where session information is unnecessary.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "skippersistency": {
          "aliases": [],
          "description": "This argument decides the behavior incase the service which is selected from an existing persistence session has reached threshold.",
          "required": false,
          "choices": [
            "Bypass",
            "ReLb",
            "None"
          ],
          "suboptions": {}
        },
        "sobackupaction": {
          "aliases": [],
          "description": "Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.",
          "required": false,
          "choices": [
            "DROP",
            "ACCEPT",
            "REDIRECT"
          ],
          "suboptions": {}
        },
        "somethod": {
          "aliases": [],
          "description": "Type of threshold that, when exceeded, triggers spillover. Available settings function as follows:\n* C(CONNECTION) - Spillover occurs when the number of client connections exceeds the threshold.\n* DYNAMICCONNECTION - Spillover occurs when the number of client connections at the virtual server exceeds the sum of the maximum client (Max Clients) settings for bound services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of bound services.\n* C(BANDWIDTH) - Spillover occurs when the bandwidth consumed by the virtual server's incoming and outgoing traffic exceeds the threshold.\n* C(HEALTH) - Spillover occurs when the percentage of weights of the services that are UP drops below the threshold. For example, if services svc1, svc2, and svc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if svc1 and svc3 or svc2 and svc3 transition to DOWN.\n* C(NONE) - Spillover does not occur.",
          "required": false,
          "choices": [
            "CONNECTION",
            "DYNAMICCONNECTION",
            "BANDWIDTH",
            "HEALTH",
            "NONE"
          ],
          "suboptions": {}
        },
        "sopersistence": {
          "aliases": [],
          "description": "If spillover occurs, maintain source IP address based persistence for both primary and backup virtual servers.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "sopersistencetimeout": {
          "aliases": [],
          "description": "Timeout for spillover persistence, in minutes.\nMinimum value = C(2)\nMaximum value = C(1440)",
          "required": false,
          "suboptions": {}
        },
        "sothreshold": {
          "aliases": [],
          "description": "Threshold at which spillover occurs. Specify an integer for the C(CONNECTION) spillover method, a bandwidth value in kilobits per second for the C(BANDWIDTH) method (do not enter the units), or a percentage for the C(HEALTH) method (do not enter the percentage symbol).\nMinimum value = C(1)\nMaximum value = C(4294967287)",
          "required": false,
          "suboptions": {}
        },
        "ssl_certkey": {
          "aliases": [],
          "description": "The name of the ssl certificate that is bound to this service.\nThe ssl certificate must already exist.\nCreating the certificate can be done with the M(community.network.netscaler_ssl_certkey) module.\nThis option is only applicable only when C(servicetype) is C(SSL).",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tcpprofilename": {
          "aliases": [],
          "description": "Name of the TCP profile whose settings are to be applied to the virtual server.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "td": {
          "aliases": [],
          "description": "Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.\nMinimum value = C(0)\nMaximum value = C(4094)",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time period for which a persistence session is in effect.\nMinimum value = C(0)\nMaximum value = C(1440)",
          "required": false,
          "suboptions": {}
        },
        "tosid": {
          "aliases": [],
          "description": "TOS ID of the virtual server. Applicable only when the load balancing redirection mode is set to TOS.\nMinimum value = C(1)\nMaximum value = C(63)",
          "required": false,
          "suboptions": {}
        },
        "v6netmasklen": {
          "aliases": [],
          "description": "Number of bits to consider in an IPv6 destination or source IP address, for creating the hash that is required by the C(DESTINATIONIPHASH) and C(SOURCEIPHASH) load balancing methods.\nMinimum value = C(1)\nMaximum value = C(128)",
          "required": false,
          "suboptions": {}
        },
        "v6persistmasklen": {
          "aliases": [],
          "description": "Persistence mask for IP based persistence types, for IPv6 virtual servers.\nMinimum value = C(1)\nMaximum value = C(128)",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vipheader": {
          "aliases": [],
          "description": "Name for the inserted header. The default name is vip-header.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage load balancing vserver configuration"
    },
    "examples": "\n# Netscaler services service-http-1, service-http-2 must have been already created with the netscaler_service module\n\n- name: Create a load balancing vserver bound to services\n  delegate_to: localhost\n  community.network.netscaler_lb_vserver:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n    validate_certs: no\n\n    state: present\n\n    name: lb_vserver_1\n    servicetype: HTTP\n    timeout: 12\n    ipv46: 6.93.3.3\n    port: 80\n    servicebindings:\n        - servicename: service-http-1\n          weight: 80\n        - servicename: service-http-2\n          weight: 20\n\n# Service group service-group-1 must have been already created with the netscaler_servicegroup module\n\n- name: Create load balancing vserver bound to servicegroup\n  delegate_to: localhost\n  community.network.netscaler_lb_vserver:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n    validate_certs: no\n    state: present\n\n    name: lb_vserver_2\n    servicetype: HTTP\n    ipv46: 6.92.2.2\n    port: 80\n    timeout: 10\n    servicegroupbindings:\n        - servicegroupname: service-group-1\n"
  },
  "community.network.netscaler_nitro_request": {
    "doc": {
      "description": "Issue Nitro API requests to a Netscaler instance.\nThis is intended to be a short hand for using the uri Ansible module to issue the raw HTTP requests directly.\nIt provides consistent return values and has no other dependencies apart from the base Ansible runtime environment.\nThis module is intended to run either on the Ansible control node or a bastion (jumpserver) with access to the actual Netscaler instance",
      "has_action": false,
      "options": {
        "action": {
          "aliases": [],
          "description": "The action to perform when the I(operation) value is set to C(action).\nSome common values for this parameter are C(enable), C(disable), C(rename).",
          "required": false,
          "suboptions": {}
        },
        "args": {
          "aliases": [],
          "description": "A dictionary which defines the key arguments by which we will select the Nitro object to operate on.\nIt is required for the following I(operation) values: C(get_by_args), C('delete_by_args').",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [],
          "description": "The attributes of the Nitro object we are operating on.\nIt is required for the following I(operation) values: C(add), C(update), C(action).",
          "required": false,
          "suboptions": {}
        },
        "expected_nitro_errorcode": {
          "aliases": [],
          "description": "A list of numeric values that signify that the operation was successful.",
          "default": "[0]",
          "required": true,
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "A dictionary which defines the filter with which to refine the Nitro objects returned by the C(get_filtered) I(operation).",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "The id of the target Netscaler instance when issuing a Nitro request through a MAS proxy.",
          "required": false,
          "suboptions": {}
        },
        "instance_ip": {
          "aliases": [],
          "description": "The IP address of the target Netscaler instance when issuing a Nitro request through a MAS proxy.",
          "required": false,
          "suboptions": {}
        },
        "instance_name": {
          "aliases": [],
          "description": "The name of the target Netscaler instance when issuing a Nitro request through a MAS proxy.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the resource we are operating on.\nIt is required for the following I(operation) values: C(update), C(get), C(delete).",
          "required": false,
          "suboptions": {}
        },
        "nitro_auth_token": {
          "aliases": [],
          "description": "The authentication token provided by the C(mas_login) operation. It is required when issuing Nitro API calls through a MAS proxy.",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the Netscaler node.",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the Nitro API objects.",
          "default": "http",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the Netscaler node.",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The IP address of the Netscaler or MAS instance where the Nitro API calls will be made.\nThe port can be specified with the colon C(:). E.g. C(192.168.1.1:555).",
          "required": false,
          "suboptions": {}
        },
        "operation": {
          "aliases": [],
          "description": "Define the Nitro operation that we want to perform.",
          "required": false,
          "choices": [
            "add",
            "update",
            "get",
            "get_by_args",
            "get_filtered",
            "get_all",
            "delete",
            "delete_by_args",
            "count",
            "mas_login",
            "save_config",
            "action"
          ],
          "suboptions": {}
        },
        "resource": {
          "aliases": [],
          "description": "The type of resource we are operating on.\nIt is required for all I(operation) values except C(mas_login) and C(save_config).",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Issue Nitro API requests to a Netscaler instance."
    },
    "examples": "\n- name: Add a server\n  delegate_to: localhost\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ nsip }}\"\n    nitro_user: \"{{ nitro_user }}\"\n    nitro_pass: \"{{ nitro_pass }}\"\n    operation: add\n    resource: server\n    name: test-server-1\n    attributes:\n      name: test-server-1\n      ipaddress: 192.168.1.1\n\n- name: Update server\n  delegate_to: localhost\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ nsip }}\"\n    nitro_user: \"{{ nitro_user }}\"\n    nitro_pass: \"{{ nitro_pass }}\"\n    operation: update\n    resource: server\n    name: test-server-1\n    attributes:\n      name: test-server-1\n      ipaddress: 192.168.1.2\n\n- name: Get server\n  delegate_to: localhost\n  register: result\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ nsip }}\"\n    nitro_user: \"{{ nitro_user }}\"\n    nitro_pass: \"{{ nitro_pass }}\"\n    operation: get\n    resource: server\n    name: test-server-1\n\n- name: Delete server\n  delegate_to: localhost\n  register: result\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ nsip }}\"\n    nitro_user: \"{{ nitro_user }}\"\n    nitro_pass: \"{{ nitro_pass }}\"\n    operation: delete\n    resource: server\n    name: test-server-1\n\n- name: Rename server\n  delegate_to: localhost\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ nsip }}\"\n    nitro_user: \"{{ nitro_user }}\"\n    nitro_pass: \"{{ nitro_pass }}\"\n    operation: action\n    action: rename\n    resource: server\n    attributes:\n      name: test-server-1\n      newname: test-server-2\n\n- name: Get server by args\n  delegate_to: localhost\n  register: result\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ nsip }}\"\n    nitro_user: \"{{ nitro_user }}\"\n    nitro_pass: \"{{ nitro_pass }}\"\n    operation: get_by_args\n    resource: server\n    args:\n      name: test-server-1\n\n- name: Get server by filter\n  delegate_to: localhost\n  register: result\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ nsip }}\"\n    nitro_user: \"{{ nitro_user }}\"\n    nitro_pass: \"{{ nitro_pass }}\"\n    operation: get_filtered\n    resource: server\n    filter:\n      ipaddress: 192.168.1.2\n\n# Doing a NITRO request through MAS.\n# Requires to have an authentication token from the mas_login and used as the nitro_auth_token parameter\n# Also nsip is the MAS address and the target Netscaler IP must be defined with instance_ip\n# The rest of the task arguments remain the same as when issuing the NITRO request directly to a Netscaler instance.\n\n- name: Do mas login\n  delegate_to: localhost\n  register: login_result\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ mas_ip }}\"\n    nitro_user: \"{{ nitro_user }}\"\n    nitro_pass: \"{{ nitro_pass }}\"\n    operation: mas_login\n\n- name: Add resource through MAS proxy\n  delegate_to: localhost\n  community.network.netscaler_nitro_request:\n    nsip: \"{{ mas_ip }}\"\n    nitro_auth_token: \"{{ login_result.nitro_auth_token }}\"\n    instance_ip: \"{{ nsip }}\"\n    operation: add\n    resource: server\n    name: test-server-1\n    attributes:\n      name: test-server-1\n      ipaddress: 192.168.1.7\n"
  },
  "community.network.netscaler_save_config": {
    "doc": {
      "description": "This module unconditionally saves the configuration on the target netscaler node.\nThis module does not support check mode.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.",
      "has_action": false,
      "options": {
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler.",
          "default": "310",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. C(192.168.1.1:555).",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Save Netscaler configuration."
    },
    "examples": "\n---\n- name: Save netscaler configuration\n  delegate_to: localhost\n  community.network.netscaler_save_config:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n- name: Setup server without saving  configuration\n  delegate_to: localhost\n  notify: Save configuration\n  netscaler_server:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    save_config: no\n\n    name: server-1\n    ipaddress: 192.168.1.1\n\n# Under playbook's handlers\n\n- name: Save configuration\n  delegate_to: localhost\n  community.network.netscaler_save_config:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n"
  },
  "community.network.netscaler_server": {
    "doc": {
      "description": "Manage server entities configuration.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Any information about the server.",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Time, in seconds, after which all the services configured on the server are disabled.\nThis option is meaningful only when setting the I(disabled) option to C(true)",
          "required": false,
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "When set to C(true) the server state will be set to C(disabled).\nWhen set to C(false) the server state will be set to C(enabled).\nNote that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain name of the server. For a domain based configuration, you must create the server first.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "domainresolveretry": {
          "aliases": [],
          "description": "Time, in seconds, for which the NetScaler appliance must wait, after DNS resolution fails, before sending the next DNS query to resolve the domain name.\nMinimum value = C(5)\nMaximum value = C(20939)",
          "default": "5",
          "required": false,
          "suboptions": {}
        },
        "graceful": {
          "aliases": [],
          "description": "Shut down gracefully, without accepting any new connections, and disabling each service when all of its connections are closed.\nThis option is meaningful only when setting the I(disabled) option to C(true)",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ipaddress": {
          "aliases": [],
          "description": "IPv4 or IPv6 address of the server. If you create an IP address based server, you can specify the name of the server, instead of its IP address, when creating a service. Note: If you do not create a server entry, the server IP address that you enter when you create a service becomes the name of the server.",
          "required": false,
          "suboptions": {}
        },
        "ipv6address": {
          "aliases": [],
          "description": "Support IPv6 addressing mode. If you configure a server with the IPv6 addressing mode, you cannot use the server in the IPv4 addressing mode.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the server.\nMust begin with an ASCII alphabetic or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters.\nCan be changed after the name is created.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "td": {
          "aliases": [],
          "description": "Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.\nMinimum value = C(0)\nMaximum value = C(4094)",
          "required": false,
          "suboptions": {}
        },
        "translationip": {
          "aliases": [],
          "description": "IP address used to transform the server's DNS-resolved IP address.",
          "required": false,
          "suboptions": {}
        },
        "translationmask": {
          "aliases": [],
          "description": "The netmask of the translation ip.",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage server configuration"
    },
    "examples": "\n- name: Setup server\n  delegate_to: localhost\n  community.network.netscaler_server:\n      nsip: 172.18.0.2\n      nitro_user: nsroot\n      nitro_pass: nsroot\n\n      state: present\n\n      name: server-1\n      ipaddress: 192.168.1.1\n"
  },
  "community.network.netscaler_service": {
    "doc": {
      "description": "Manage service configuration in Netscaler.\nThis module allows the creation, deletion and modification of Netscaler services.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.\nThis module supports check mode.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "accessdown": {
          "aliases": [],
          "description": "Use Layer 2 mode to bridge the packets sent to this service if it is marked as DOWN. If the service is DOWN, and this parameter is disabled, the packets are dropped.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "appflowlog": {
          "aliases": [],
          "description": "Enable logging of AppFlow information.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "cacheable": {
          "aliases": [],
          "description": "Use the transparent cache redirection virtual server to forward requests to the cache server.\nNote: Do not specify this parameter if you set the Cache Type parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cachetype": {
          "aliases": [],
          "description": "Cache type supported by the cache server.",
          "required": false,
          "choices": [
            "TRANSPARENT",
            "REVERSE",
            "FORWARD"
          ],
          "suboptions": {}
        },
        "cip": {
          "aliases": [],
          "description": "Before forwarding a request to the service, insert an HTTP header with the client's IPv4 or IPv6 address as its value. Used if the server needs the client's IP address for security, accounting, or other purposes, and setting the Use Source IP parameter is not a viable option.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "cipheader": {
          "aliases": [],
          "description": "Name for the HTTP header whose value must be set to the IP address of the client. Used with the Client IP parameter. If you set the Client IP parameter, and you do not specify a name for the header, the appliance uses the header name specified for the global Client IP Header parameter (the cipHeader parameter in the set ns param CLI command or the Client IP Header parameter in the Configure HTTP Parameters dialog box at System > Settings > Change HTTP parameters). If the global Client IP Header parameter is not specified, the appliance inserts a header with the name \"client-ip.\".\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "cka": {
          "aliases": [],
          "description": "Enable client keep-alive for the service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cleartextport": {
          "aliases": [],
          "description": "Port to which clear text data must be sent after the appliance decrypts incoming SSL traffic. Applicable to transparent SSL services.\nMinimum value = 1",
          "required": false,
          "suboptions": {}
        },
        "clttimeout": {
          "aliases": [],
          "description": "Time, in seconds, after which to terminate an idle client connection.\nMinimum value = 0\nMaximum value = 31536000",
          "required": false,
          "suboptions": {}
        },
        "cmp": {
          "aliases": [],
          "description": "Enable compression for the service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Any information about the service.",
          "required": false,
          "suboptions": {}
        },
        "customserverid": {
          "aliases": [],
          "description": "Unique identifier for the service. Used when the persistency type for the virtual server is set to Custom Server ID.",
          "default": "None",
          "required": false,
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "When set to C(yes) the service state will be set to DISABLED.\nWhen set to C(no) the service state will be set to ENABLED.\nNote that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dnsprofilename": {
          "aliases": [],
          "description": "Name of the DNS profile to be associated with the service. DNS profile properties will applied to the transactions processed by a service. This parameter is valid only for ADNS and ADNS-TCP services.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "downstateflush": {
          "aliases": [],
          "description": "Flush all active transactions associated with a service whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "graceful": {
          "aliases": [],
          "description": "Shut down gracefully, not accepting any new connections, and disabling the service when all of its connections are closed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hashid": {
          "aliases": [],
          "description": "A numerical identifier that can be used by hash based load balancing methods. Must be unique for each service.\nMinimum value = 1",
          "required": false,
          "suboptions": {}
        },
        "healthmonitor": {
          "aliases": [],
          "description": "Monitor the health of this service",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "httpprofilename": {
          "aliases": [],
          "description": "Name of the HTTP profile that contains HTTP configuration settings for the service.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "ip": {
          "aliases": [],
          "description": "IP to assign to the service.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "ipaddress": {
          "aliases": [],
          "description": "The new IP address of the service.",
          "required": false,
          "suboptions": {}
        },
        "maxbandwidth": {
          "aliases": [],
          "description": "Maximum bandwidth, in Kbps, allocated to the service.\nMinimum value = 0\nMaximum value = 4294967287",
          "required": false,
          "suboptions": {}
        },
        "maxclient": {
          "aliases": [],
          "description": "Maximum number of simultaneous open connections to the service.\nMinimum value = 0\nMaximum value = 4294967294",
          "required": false,
          "suboptions": {}
        },
        "maxreq": {
          "aliases": [],
          "description": "Maximum number of requests that can be sent on a persistent connection to the service.\nNote: Connection requests beyond this value are rejected.\nMinimum value = 0\nMaximum value = 65535",
          "required": false,
          "suboptions": {}
        },
        "monitor_bindings": {
          "aliases": [],
          "description": "A list of load balancing monitors to bind to this service.\nEach monitor entry is a dictionary which may contain the following options.\nNote that if not using the built in monitors they must first be setup.",
          "required": false,
          "suboptions": {
            "dup_state": {
              "aliases": [],
              "description": "State of the monitor.\nThe state setting for a monitor of a given type affects all monitors of that type.\nFor example, if an HTTP monitor is enabled, all HTTP monitors on the appliance are (or remain) enabled.\nIf an HTTP monitor is disabled, all HTTP monitors on the appliance are disabled.",
              "required": false,
              "choices": [
                "enabled",
                "disabled"
              ],
              "suboptions": {}
            },
            "dup_weight": {
              "aliases": [],
              "description": "Weight to assign to the binding between the monitor and service.",
              "required": false,
              "suboptions": {}
            },
            "monitorname": {
              "aliases": [],
              "description": "Name of the monitor.",
              "required": false,
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "Weight to assign to the binding between the monitor and service.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "monthreshold": {
          "aliases": [],
          "description": "Minimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark a service as UP or DOWN.\nMinimum value = 0\nMaximum value = 65535",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the service. Must begin with an ASCII alphabetic or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Cannot be changed after the service has been created.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "netprofile": {
          "aliases": [],
          "description": "Network profile to use for the service.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pathmonitor": {
          "aliases": [],
          "description": "Path monitoring for clustering.",
          "required": false,
          "suboptions": {}
        },
        "pathmonitorindv": {
          "aliases": [],
          "description": "Individual Path monitoring decisions.",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port number of the service.\nRange 1 - 65535\n* in CLI is represented as 65535 in NITRO API",
          "required": false,
          "suboptions": {}
        },
        "processlocal": {
          "aliases": [],
          "description": "By turning on this option packets destined to a service in a cluster will not under go any steering. Turn this option for single packet request response mode or when the upstream device is performing a proper RSS for connection based distribution.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "rtspsessionidremap": {
          "aliases": [],
          "description": "Enable RTSP session ID mapping for the service.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "serverid": {
          "aliases": [],
          "description": "The identifier for the service. This is used when the persistency type is set to Custom Server ID.",
          "required": false,
          "suboptions": {}
        },
        "servername": {
          "aliases": [],
          "description": "Name of the server that hosts the service.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "servicetype": {
          "aliases": [],
          "description": "Protocol in which data is exchanged with the service.",
          "required": false,
          "choices": [
            "HTTP",
            "FTP",
            "TCP",
            "UDP",
            "SSL",
            "SSL_BRIDGE",
            "SSL_TCP",
            "DTLS",
            "NNTP",
            "RPCSVR",
            "DNS",
            "ADNS",
            "SNMP",
            "RTSP",
            "DHCPRA",
            "ANY",
            "SIP_UDP",
            "SIP_TCP",
            "SIP_SSL",
            "DNS_TCP",
            "ADNS_TCP",
            "MYSQL",
            "MSSQL",
            "ORACLE",
            "RADIUS",
            "RADIUSListener",
            "RDP",
            "DIAMETER",
            "SSL_DIAMETER",
            "TFTP",
            "SMPP",
            "PPTP",
            "GRE",
            "SYSLOGTCP",
            "SYSLOGUDP",
            "FIX",
            "SSL_FIX"
          ],
          "suboptions": {}
        },
        "sp": {
          "aliases": [],
          "description": "Enable surge protection for the service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "svrtimeout": {
          "aliases": [],
          "description": "Time, in seconds, after which to terminate an idle server connection.\nMinimum value = 0\nMaximum value = 31536000",
          "required": false,
          "suboptions": {}
        },
        "tcpb": {
          "aliases": [],
          "description": "Enable TCP buffering for the service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tcpprofilename": {
          "aliases": [],
          "description": "Name of the TCP profile that contains TCP configuration settings for the service.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "td": {
          "aliases": [],
          "description": "Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.\nMinimum value = 0\nMaximum value = 4094",
          "required": false,
          "suboptions": {}
        },
        "useproxyport": {
          "aliases": [],
          "description": "Use the proxy port as the source port when initiating connections with the server. With the NO setting, the client-side connection port is used as the source port for the server-side connection.\nNote: This parameter is available only when the Use Source IP (USIP) parameter is set to YES.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "usip": {
          "aliases": [],
          "description": "Use the client's IP address as the source IP address when initiating a connection to the server. When creating a service, if you do not set this parameter, the service inherits the global Use Source IP setting (available in the enable ns mode and disable ns mode CLI commands, or in the System > Settings > Configure modes > Configure Modes dialog box). However, you can override this setting after you create the service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage service configuration in Netscaler"
    },
    "examples": "\n# Monitor monitor-1 must have been already setup\n\n- name: Setup http service\n  gather_facts: False\n  delegate_to: localhost\n  community.network.netscaler_service:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    state: present\n\n    name: service-http-1\n    servicetype: HTTP\n    ipaddress: 10.78.0.1\n    port: 80\n\n    monitor_bindings:\n      - monitor-1\n"
  },
  "community.network.netscaler_servicegroup": {
    "doc": {
      "description": "Manage service group configuration in Netscaler.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "appflowlog": {
          "aliases": [],
          "description": "Enable logging of AppFlow information for the specified service group.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "autoscale": {
          "aliases": [],
          "description": "Auto scale option for a servicegroup.",
          "required": false,
          "choices": [
            "DISABLED",
            "DNS",
            "POLICY"
          ],
          "suboptions": {}
        },
        "cacheable": {
          "aliases": [],
          "description": "Use the transparent cache redirection virtual server to forward the request to the cache server.\nNote: Do not set this parameter if you set the Cache Type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cachetype": {
          "aliases": [],
          "description": "Cache type supported by the cache server.",
          "required": false,
          "choices": [
            "TRANSPARENT",
            "REVERSE",
            "FORWARD"
          ],
          "suboptions": {}
        },
        "cip": {
          "aliases": [],
          "description": "Insert the Client IP header in requests forwarded to the service.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "cipheader": {
          "aliases": [],
          "description": "Name of the HTTP header whose value must be set to the IP address of the client. Used with the Client IP parameter. If client IP insertion is enabled, and the client IP header is not specified, the value of Client IP Header parameter or the value set by the set ns config command is used as client's IP header name.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "cka": {
          "aliases": [],
          "description": "Enable client keep-alive for the service group.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "clttimeout": {
          "aliases": [],
          "description": "Time, in seconds, after which to terminate an idle client connection.\nMinimum value = C(0)\nMaximum value = C(31536000)",
          "required": false,
          "suboptions": {}
        },
        "cmp": {
          "aliases": [],
          "description": "Enable compression for the specified service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Any information about the service group.",
          "required": false,
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "When set to C(yes) the service group state will be set to DISABLED.\nWhen set to C(no) the service group state will be set to ENABLED.\nNote that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "downstateflush": {
          "aliases": [],
          "description": "Flush all active transactions associated with all the services in the service group whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "graceful": {
          "aliases": [],
          "description": "Wait for all existing connections to the service to terminate before shutting down the service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "healthmonitor": {
          "aliases": [],
          "description": "Monitor the health of this service. Available settings function as follows:\nC(yes) - Send probes to check the health of the service.\nC(no) - Do not send probes to check the health of the service. With the NO option, the appliance shows the service as UP at all times.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "httpprofilename": {
          "aliases": [],
          "description": "Name of the HTTP profile that contains HTTP configuration settings for the service group.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "maxbandwidth": {
          "aliases": [],
          "description": "Maximum bandwidth, in Kbps, allocated for all the services in the service group.\nMinimum value = C(0)\nMaximum value = C(4294967287)",
          "required": false,
          "suboptions": {}
        },
        "maxclient": {
          "aliases": [],
          "description": "Maximum number of simultaneous open connections for the service group.\nMinimum value = C(0)\nMaximum value = C(4294967294)",
          "required": false,
          "suboptions": {}
        },
        "maxreq": {
          "aliases": [],
          "description": "Maximum number of requests that can be sent on a persistent connection to the service group.\nNote: Connection requests beyond this value are rejected.\nMinimum value = C(0)\nMaximum value = C(65535)",
          "required": false,
          "suboptions": {}
        },
        "memberport": {
          "aliases": [],
          "description": "member port.",
          "required": false,
          "suboptions": {}
        },
        "monitorbindings": {
          "aliases": [],
          "description": "A list of monitornames to bind to this service\nNote that the monitors must have already been setup possibly using the M(community.network.netscaler_lb_monitor) module or some other method",
          "required": false,
          "suboptions": {
            "monitorname": {
              "aliases": [],
              "description": "The monitor name to bind to this servicegroup.",
              "required": false,
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "Weight to assign to the binding between the monitor and servicegroup.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "monthreshold": {
          "aliases": [],
          "description": "Minimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark a service as UP or DOWN.\nMinimum value = C(0)\nMaximum value = C(65535)",
          "required": false,
          "suboptions": {}
        },
        "netprofile": {
          "aliases": [],
          "description": "Network profile for the service group.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pathmonitor": {
          "aliases": [],
          "description": "Path monitoring for clustering.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pathmonitorindv": {
          "aliases": [],
          "description": "Individual Path monitoring decisions.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rtspsessionidremap": {
          "aliases": [],
          "description": "Enable RTSP session ID mapping for the service group.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "servicegroupname": {
          "aliases": [],
          "description": "Name of the service group. Must begin with an ASCII alphabetic or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Can be changed after the name is created.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "servicemembers": {
          "aliases": [],
          "description": "A list of dictionaries describing each service member of the service group.",
          "required": false,
          "suboptions": {
            "customserverid": {
              "aliases": [],
              "description": "The identifier for this IP:Port pair.\nUsed when the persistency type is set to Custom Server ID.",
              "required": false,
              "suboptions": {}
            },
            "hashid": {
              "aliases": [],
              "description": "The hash identifier for the service.\nThis must be unique for each service.\nThis parameter is used by hash based load balancing methods.\nMinimum value = C(1)",
              "required": false,
              "suboptions": {}
            },
            "ip": {
              "aliases": [],
              "description": "IP address of the service. Must not overlap with an existing server entity defined by name.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Server port number.\nRange C(1) - C(65535)\n* in CLI is represented as 65535 in NITRO API",
              "required": false,
              "suboptions": {}
            },
            "serverid": {
              "aliases": [],
              "description": "The identifier for the service.\nThis is used when the persistency type is set to Custom Server ID.",
              "required": false,
              "suboptions": {}
            },
            "servername": {
              "aliases": [],
              "description": "Name of the server to which to bind the service group.\nThe server must already be configured as a named server.\nMinimum length = 1",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Initial state of the service after binding.",
              "required": false,
              "choices": [
                "enabled",
                "disabled"
              ],
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "Weight to assign to the servers in the service group.\nSpecifies the capacity of the servers relative to the other servers in the load balancing configuration.\nThe higher the weight, the higher the percentage of requests sent to the service.\nMinimum value = C(1)\nMaximum value = C(100)",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "servicetype": {
          "aliases": [],
          "description": "Protocol used to exchange data with the service.",
          "required": false,
          "choices": [
            "HTTP",
            "FTP",
            "TCP",
            "UDP",
            "SSL",
            "SSL_BRIDGE",
            "SSL_TCP",
            "DTLS",
            "NNTP",
            "RPCSVR",
            "DNS",
            "ADNS",
            "SNMP",
            "RTSP",
            "DHCPRA",
            "ANY",
            "SIP_UDP",
            "SIP_TCP",
            "SIP_SSL",
            "DNS_TCP",
            "ADNS_TCP",
            "MYSQL",
            "MSSQL",
            "ORACLE",
            "RADIUS",
            "RADIUSListener",
            "RDP",
            "DIAMETER",
            "SSL_DIAMETER",
            "TFTP",
            "SMPP",
            "PPTP",
            "GRE",
            "SYSLOGTCP",
            "SYSLOGUDP",
            "FIX",
            "SSL_FIX"
          ],
          "suboptions": {}
        },
        "sp": {
          "aliases": [],
          "description": "Enable surge protection for the service group.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "svrtimeout": {
          "aliases": [],
          "description": "Time, in seconds, after which to terminate an idle server connection.\nMinimum value = C(0)\nMaximum value = C(31536000)",
          "required": false,
          "suboptions": {}
        },
        "tcpb": {
          "aliases": [],
          "description": "Enable TCP buffering for the service group.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tcpprofilename": {
          "aliases": [],
          "description": "Name of the TCP profile that contains TCP configuration settings for the service group.\nMinimum length = 1\nMaximum length = 127",
          "required": false,
          "suboptions": {}
        },
        "useproxyport": {
          "aliases": [],
          "description": "Use the proxy port as the source port when initiating connections with the server. With the NO setting, the client-side connection port is used as the source port for the server-side connection.\nNote: This parameter is available only when the Use Source IP C(usip) parameter is set to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "usip": {
          "aliases": [],
          "description": "Use client's IP address as the source IP address when initiating connection to the server. With the NO setting, which is the default, a mapped IP (MIP) address or subnet IP (SNIP) address is used as the source IP address to initiate server side connections.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage service group configuration in Netscaler"
    },
    "examples": "\n# The LB Monitors monitor-1 and monitor-2 must already exist\n# Service members defined by C(ip) must not redefine an existing server's ip address.\n# Service members defined by C(servername) must already exist.\n\n- name: Setup http service with ip members\n  delegate_to: localhost\n  community.network.netscaler_servicegroup:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    state: present\n\n    servicegroupname: service-group-1\n    servicetype: HTTP\n    servicemembers:\n      - ip: 10.78.78.78\n        port: 80\n        weight: 50\n      - ip: 10.79.79.79\n        port: 80\n        weight: 40\n      - servername: server-1\n        port: 80\n        weight: 10\n\n    monitorbindings:\n      - monitorname: monitor-1\n        weight: 50\n      - monitorname: monitor-2\n        weight: 50\n\n"
  },
  "community.network.netscaler_ssl_certkey": {
    "doc": {
      "description": "Manage ssl certificate keys.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Citrix NetScaler Network devices see U(https://www.ansible.com/ansible-netscaler).",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Name of and, optionally, path to the X509 certificate file that is used to form the certificate-key pair. The certificate file should be present on the appliance's hard-disk drive or solid-state drive. Storing a certificate in any location other than the default might cause inconsistency in a high availability setup. /nsconfig/ssl/ is the default path.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "certkey": {
          "aliases": [],
          "description": "Name for the certificate and private-key pair. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Cannot be changed after the certificate-key pair is created.\nThe following requirement applies only to the NetScaler CLI:\nIf the name includes one or more spaces, enclose the name in double or single quotation marks (for example, \"my cert\" or 'my cert').\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "expirymonitor": {
          "aliases": [],
          "description": "Issue an alert when the certificate is about to expire.",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "inform": {
          "aliases": [],
          "description": "Input format of the certificate and the private-key files. The three formats supported by the appliance are:\nPEM - Privacy Enhanced Mail\nDER - Distinguished Encoding Rule\nPFX - Personal Information Exchange.",
          "required": false,
          "choices": [
            "DER",
            "PEM",
            "PFX"
          ],
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Name of and, optionally, path to the private-key file that is used to form the certificate-key pair. The certificate file should be present on the appliance's hard-disk drive or solid-state drive. Storing a certificate in any location other than the default might cause inconsistency in a high availability setup. /nsconfig/ssl/ is the default path.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "nitro_pass": {
          "aliases": [],
          "description": "The password with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nitro_protocol": {
          "aliases": [],
          "description": "Which protocol to use when accessing the nitro API objects.",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "nitro_timeout": {
          "aliases": [],
          "description": "Time in seconds until a timeout error is thrown when establishing a new session with Netscaler",
          "default": "310",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "nitro_user": {
          "aliases": [],
          "description": "The username with which to authenticate to the netscaler node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "notificationperiod": {
          "aliases": [],
          "description": "Time, in number of days, before certificate expiration, at which to generate an alert that the certificate is about to expire.\nMinimum value = C(10)\nMaximum value = C(100)",
          "required": false,
          "suboptions": {}
        },
        "nsip": {
          "aliases": [],
          "description": "The ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "passplain": {
          "aliases": [],
          "description": "Pass phrase used to encrypt the private-key. Required when adding an encrypted private-key in PEM format.\nMinimum length = 1",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Passphrase that was used to encrypt the private-key. Use this option to load encrypted private-keys in PEM format.",
          "required": false,
          "suboptions": {}
        },
        "save_config": {
          "aliases": [],
          "description": "If C(yes) the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nitro python sdk"
      ],
      "short_description": "Manage ssl certificate keys."
    },
    "examples": "\n\n- name: Setup ssl certkey\n  delegate_to: localhost\n  community.network.netscaler_ssl_certkey:\n    nitro_user: nsroot\n    nitro_pass: nsroot\n    nsip: 172.18.0.2\n\n    certkey: certirificate_1\n    cert: server.crt\n    key: server.key\n    expirymonitor: enabled\n    notificationperiod: 30\n    inform: PEM\n    password: False\n    passplain: somesecret\n"
  },
  "community.network.nos_command": {
    "doc": {
      "description": "Sends arbitrary commands to a NOS device and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(community.network.nos_config) to configure NOS devices.",
      "has_action": false,
      "notes": "Tested against NOS 7.2.0\nIf a command sent to the device requires answering a prompt, it is possible to pass a dict containing I(command), I(answer) and I(prompt). See examples.",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote NOS device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy. Valid values are C(all) or C(any). If the value is set to C(all) then all conditionals in the wait_for must be satisfied. If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run commands on remote devices running Extreme Networks NOS"
    },
    "examples": "\ntasks:\n  - name: Run show version on remote devices\n    community.network.nos_command:\n      commands: show version\n\n  - name: Run show version and check to see if output contains NOS\n    community.network.nos_command:\n      commands: show version\n      wait_for: result[0] contains NOS\n\n  - name: Run multiple commands on remote nodes\n    community.network.nos_command:\n      commands:\n        - show version\n        - show interfaces\n\n  - name: Run multiple commands and evaluate the output\n    community.network.nos_command:\n      commands:\n        - show version\n        - show interface status\n      wait_for:\n        - result[0] contains NOS\n        - result[1] contains Te\n  - name: Run command that requires answering a prompt\n    community.network.nos_command:\n      commands:\n        - command: 'clear sessions'\n          prompt: 'This operation will logout all the user sessions. Do you want to continue (yes/no)?:'\n          answer: y\n"
  },
  "community.network.nos_config": {
    "doc": {
      "description": "Extreme NOS configurations use a simple block indent file syntax for segmenting configuration into sections. This module provides an implementation for working with NOS configuration sections in a deterministic way.",
      "has_action": true,
      "notes": "Tested against NOS 7.2.0",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made. Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made. This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "diff_against": {
          "aliases": [],
          "description": "When using the C(ansible-playbook --diff) command line argument the module can generate diffs against different sources.\nWhen this option is configured as I(intended), the module will return the diff of the running-config against the configuration provided in the C(intended_config) argument.\nWhen this option is configured as I(running), the module will return the before and after diff of the running-config with respect to any changes made to the device configuration.",
          "required": false,
          "choices": [
            "running",
            "intended"
          ],
          "suboptions": {}
        },
        "diff_ignore_lines": {
          "aliases": [],
          "description": "Use this argument to specify one or more lines that should be ignored during the diff. This is used for lines in the configuration that are automatically updated by the system. This argument takes a list of regular expressions or exact line matches.",
          "required": false,
          "suboptions": {}
        },
        "intended_config": {
          "aliases": [],
          "description": "The C(intended_config) provides the master configuration that the node should conform to and is used to check the final running-config against. This argument will not modify any settings on the remote device and is strictly used to check the compliance of the current device's configuration against. When specifying this argument, the task should also modify the C(diff_against) value and set it to I(intended).",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section. The commands must be the exact same commands as found in the device running-config. Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config. If match is set to I(line), commands are matched line by line. If match is set to I(strict), command lines are matched with respect to position. If match is set to I(exact), command lines must be an equal match. Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "multiline_delimiter": {
          "aliases": [],
          "description": "This argument is used when pushing a multiline configuration element to the NOS device. It specifies the character to use as the delimiting character. This only applies to the configuration action.",
          "default": "@",
          "required": false,
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against. If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device. If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode. If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "running_config": {
          "aliases": [
            "config"
          ],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source. There are times when it is not desirable to have the task get the current running-config for every task in a playbook. The I(running_config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load. The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory. This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Extreme Networks NOS configuration sections"
    },
    "examples": "\n- name: Configure top level configuration\n  community.network.nos_config:\n    lines: logging raslog console INFO\n\n- name: Configure interface settings\n  community.network.nos_config:\n    lines:\n      - description test interface\n      - ip address 172.31.1.1/24\n    parents:\n      - interface TenGigabitEthernet 104/0/1\n\n- name: Configure multiple interfaces\n  community.network.nos_config:\n    lines:\n      - lacp timeout long\n    parents: \"{{ item }}\"\n  with_items:\n    - interface TenGigabitEthernet 104/0/1\n    - interface TenGigabitEthernet 104/0/2\n\n- name: Load new acl into device\n  community.network.nos_config:\n    lines:\n      - seq 10 permit ip host 1.1.1.1 any log\n      - seq 20 permit ip host 2.2.2.2 any log\n      - seq 30 permit ip host 3.3.3.3 any log\n      - seq 40 permit ip host 4.4.4.4 any log\n      - seq 50 permit ip host 5.5.5.5 any log\n    parents: ip access-list extended test\n    before: no ip access-list extended test\n    match: exact\n\n- name: Check the running-config against master config\n  community.network.nos_config:\n    diff_against: intended\n    intended_config: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: Configurable backup path\n  community.network.nos_config:\n    lines: logging raslog console INFO\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.nos_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote device that is running NOS. This module prepends all of the base network fact keys with C(ansible_net_<fact>). The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against NOS 7.2.0",
      "options": {
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from devices running Extreme NOS"
    },
    "examples": "\n# Collect all facts from the device\n- community.network.nos_facts:\n    gather_subset: all\n\n# Collect only the config and default facts\n- community.network.nos_facts:\n    gather_subset:\n      - config\n\n# Do not collect hardware facts\n- community.network.nos_facts:\n    gather_subset:\n      - \"!hardware\"\n"
  },
  "community.network.nuage_vspk": {
    "doc": {
      "description": "Manage or find Nuage VSP entities, this includes create, update, delete, assign, unassign and find, with all supported properties.",
      "has_action": false,
      "notes": "Check mode is supported, but with some caveats. It will not do any changes, and if possible try to determine if it is able do what is requested.\nIn case a parent id is provided from a previous task, it might be empty and if a search is possible on root, it will do so, which can impact performance.",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dict with the authentication information required to connect to a Nuage VSP environment.\nRequires a I(api_username) parameter (example csproot).\nRequires either a I(api_password) parameter (example csproot) or a I(api_certificate) and I(api_key) parameters, which point to the certificate and key files for certificate based authentication.\nRequires a I(api_enterprise) parameter (example csp).\nRequires a I(api_url) parameter (example https://10.0.0.10:8443).\nRequires a I(api_version) parameter (example v4_0).",
          "required": true,
          "suboptions": {}
        },
        "children": {
          "aliases": [],
          "description": "Can be used to specify a set of child entities.\nA mandatory property of each child is the I(type).\nSupported optional properties of each child are I(id), I(properties) and I(match_filter).\nThe function of each of these properties is the same as in the general task definition.\nThis can be used recursively\nOnly useable in case I(state=present).",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "Specifies a command to be executed.\nWith I(command=find), if I(parent_id) and I(parent_type) are defined, it will only search within the parent. Otherwise, if allowed, will search in the root object.\nWith I(command=find), if I(id) is specified, it will only return the single entity matching the id.\nWith I(command=find), otherwise, if I(match_filter) is define, it will use that filter to search.\nWith I(command=find), otherwise, if I(properties) are defined, it will do an AND search using all properties.\nWith I(command=change_password), a password of a user can be changed. Warning - In case the password is the same as the existing, it will throw an error.\nWith I(command=wait_for_job), the module will wait for a job to either have a status of SUCCESS or ERROR. In case an ERROR status is found, the module will exit with an error.\nWith I(command=wait_for_job), the job will always be returned, even if the state is ERROR situation.\nEither I(state) or I(command) needs to be defined, both can not be defined at the same time.",
          "required": false,
          "choices": [
            "find",
            "change_password",
            "wait_for_job",
            "get_csp_enterprise"
          ],
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The ID of the entity you want to work on.\nIn combination with I(command=find), it will only return the single entity.\nIn combination with I(state), it will either update or delete this entity.\nWill take precedence over I(match_filter) and I(properties) whenever an entity needs to be found.",
          "required": false,
          "suboptions": {}
        },
        "match_filter": {
          "aliases": [],
          "description": "A filter used when looking (both in I(command) and I(state) for entities, in the format the Nuage VSP API expects.\nIf I(match_filter) is defined, it will take precedence over the I(properties), but not on the I(id)",
          "required": false,
          "suboptions": {}
        },
        "parent_id": {
          "aliases": [],
          "description": "The ID of the parent of the entity you want to work on.\nWhen I(state) is specified, the entity will be gathered from this parent, if it exists, unless an I(id) is specified.\nWhen I(command=find) is specified, the entity will be searched for in this parent, unless an I(id) is specified.\nIf specified, I(parent_type) also needs to be specified.",
          "required": false,
          "suboptions": {}
        },
        "parent_type": {
          "aliases": [],
          "description": "The type of parent the ID is specified for (example Enterprise).\nThis should match the objects CamelCase class name in VSPK-Python.\nThis Class name can be found on U(https://nuagenetworks.github.io/vspkdoc/index.html).\nIf specified, I(parent_id) also needs to be specified.",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Properties are the key, value pairs of the different properties an entity has.\nIf no I(id) and no I(match_filter) is specified, these are used to find or determine if the entity exists.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies the desired state of the entity.\nIf I(state=present), in case the entity already exists, will update the entity if it is needed.\nIf I(state=present), in case the relationship with the parent is a member relationship, will assign the entity as a member of the parent.\nIf I(state=absent), in case the relationship with the parent is a member relationship, will unassign the entity as a member of the parent.\nEither I(state) or I(command) needs to be defined, both can not be defined at the same time.",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of entity you want to work on (example Enterprise).\nThis should match the objects CamelCase class name in VSPK-Python.\nThis Class name can be found on U(https://nuagenetworks.github.io/vspkdoc/index.html).",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "Python 2.7",
        "Supports Nuage VSP 4.0Rx & 5.x.y",
        "Proper VSPK-Python installed for your Nuage version",
        "Tested with NuageX U(https://nuagex.io)"
      ],
      "short_description": "Manage Nuage VSP environments"
    },
    "examples": "\n# This can be executed as a single role, with the following vars\n# vars:\n#   auth:\n#     api_username: csproot\n#     api_password: csproot\n#     api_enterprise: csp\n#     api_url: https://10.0.0.10:8443\n#     api_version: v5_0\n#   enterprise_name: Ansible-Enterprise\n#   enterprise_new_name: Ansible-Updated-Enterprise\n#\n# or, for certificate based authentication\n# vars:\n#   auth:\n#     api_username: csproot\n#     api_certificate: /path/to/user-certificate.pem\n#     api_key: /path/to/user-Key.pem\n#     api_enterprise: csp\n#     api_url: https://10.0.0.10:8443\n#     api_version: v5_0\n#   enterprise_name: Ansible-Enterprise\n#   enterprise_new_name: Ansible-Updated-Enterprise\n\n# Creating a new enterprise\n- name: Create Enterprise\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: Enterprise\n    state: present\n    properties:\n      name: \"{{ enterprise_name }}-basic\"\n  register: nuage_enterprise\n\n# Checking if an Enterprise with the new name already exists\n- name: Check if an Enterprise exists with the new name\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: Enterprise\n    command: find\n    properties:\n      name: \"{{ enterprise_new_name }}-basic\"\n  ignore_errors: yes\n  register: nuage_check_enterprise\n\n# Updating an enterprise's name\n- name: Update Enterprise name\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: Enterprise\n    id: \"{{ nuage_enterprise.id }}\"\n    state: present\n    properties:\n      name: \"{{ enterprise_new_name }}-basic\"\n  when: nuage_check_enterprise is failed\n\n# Creating a User in an Enterprise\n- name: Create admin user\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: User\n    parent_id: \"{{ nuage_enterprise.id }}\"\n    parent_type: Enterprise\n    state: present\n    match_filter: \"userName == 'ansible-admin'\"\n    properties:\n      email: \"ansible@localhost.local\"\n      first_name: \"Ansible\"\n      last_name: \"Admin\"\n      password: \"ansible-password\"\n      user_name: \"ansible-admin\"\n  register: nuage_user\n\n# Updating password for User\n- name: Update admin password\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: User\n    id: \"{{ nuage_user.id }}\"\n    command: change_password\n    properties:\n      password: \"ansible-new-password\"\n  ignore_errors: yes\n\n# Finding a group in an enterprise\n- name: Find Administrators group in Enterprise\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: Group\n    parent_id: \"{{ nuage_enterprise.id }}\"\n    parent_type: Enterprise\n    command: find\n    properties:\n      name: \"Administrators\"\n  register: nuage_group\n\n# Assign the user to the group\n- name: Assign admin user to administrators\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: User\n    id: \"{{ nuage_user.id }}\"\n    parent_id: \"{{ nuage_group.id }}\"\n    parent_type: Group\n    state: present\n\n# Creating multiple DomainTemplates\n- name: Create multiple DomainTemplates\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: DomainTemplate\n    parent_id: \"{{ nuage_enterprise.id }}\"\n    parent_type: Enterprise\n    state: present\n    properties:\n      name: \"{{ item }}\"\n      description: \"Created by Ansible\"\n  with_items:\n    - \"Template-1\"\n    - \"Template-2\"\n\n# Finding all DomainTemplates\n- name: Fetching all DomainTemplates\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: DomainTemplate\n    parent_id: \"{{ nuage_enterprise.id }}\"\n    parent_type: Enterprise\n    command: find\n  register: nuage_domain_templates\n\n# Deleting all DomainTemplates\n- name: Deleting all found DomainTemplates\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: DomainTemplate\n    state: absent\n    id: \"{{ item.ID }}\"\n  with_items: \"{{ nuage_domain_templates.entities }}\"\n  when: nuage_domain_templates.entities is defined\n\n# Unassign user from group\n- name: Unassign admin user to administrators\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: User\n    id: \"{{ nuage_user.id }}\"\n    parent_id: \"{{ nuage_group.id }}\"\n    parent_type: Group\n    state: absent\n\n# Deleting an enterprise\n- name: Delete Enterprise\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: Enterprise\n    id: \"{{ nuage_enterprise.id }}\"\n    state: absent\n\n# Setup an enterprise with Children\n- name: Setup Enterprise and domain structure\n  connection: local\n  community.network.nuage_vspk:\n    auth: \"{{ nuage_auth }}\"\n    type: Enterprise\n    state: present\n    properties:\n      name: \"Child-based-Enterprise\"\n    children:\n    - type: L2DomainTemplate\n      properties:\n        name: \"Unmanaged-Template\"\n      children:\n      - type: EgressACLTemplate\n        match_filter: \"name == 'Allow All'\"\n        properties:\n          name: \"Allow All\"\n          active: true\n          default_allow_ip: true\n          default_allow_non_ip: true\n          default_install_acl_implicit_rules: true\n          description: \"Created by Ansible\"\n          priority_type: \"TOP\"\n      - type: IngressACLTemplate\n        match_filter: \"name == 'Allow All'\"\n        properties:\n          name: \"Allow All\"\n          active: true\n          default_allow_ip: true\n          default_allow_non_ip: true\n          description: \"Created by Ansible\"\n          priority_type: \"TOP\"\n"
  },
  "community.network.opx_cps": {
    "doc": {
      "description": "Executes the given operation on the YANG object, using CPS API in the networking device running OpenSwitch (OPX). It uses the YANG models provided in https://github.com/open-switch/opx-base-model.",
      "has_action": false,
      "options": {
        "attr_data": {
          "aliases": [],
          "description": "Attribute Yang path and their corresponding data.",
          "required": false,
          "suboptions": {}
        },
        "attr_type": {
          "aliases": [],
          "description": "Attribute Yang type.",
          "required": false,
          "suboptions": {}
        },
        "commit_event": {
          "aliases": [],
          "description": "Attempts to force the auto-commit event to the specified yang object.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "Queries/Writes the specified yang path from/to the db.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "module_name": {
          "aliases": [],
          "description": "Yang path to be configured.",
          "required": false,
          "suboptions": {}
        },
        "operation": {
          "aliases": [],
          "description": "Operation to be performed on the object.",
          "default": "create",
          "required": false,
          "choices": [
            "delete",
            "create",
            "set",
            "action",
            "get"
          ],
          "suboptions": {}
        },
        "qualifier": {
          "aliases": [],
          "description": "A qualifier provides the type of object data to retrieve or act on.",
          "default": "target",
          "required": false,
          "choices": [
            "target",
            "observed",
            "proposed",
            "realtime",
            "registration",
            "running",
            "startup"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "cps",
        "cps_object",
        "cps_utils"
      ],
      "short_description": "CPS operations on networking device running Openswitch (OPX)"
    },
    "examples": "\n- name: Create VLAN\n  community.network.opx_cps:\n    module_name: \"dell-base-if-cmn/if/interfaces/interface\"\n    attr_data: {\n         \"base-if-vlan/if/interfaces/interface/id\": 230,\n         \"if/interfaces/interface/name\": \"br230\",\n         \"if/interfaces/interface/type\": \"ianaift:l2vlan\"\n    }\n    operation: \"create\"\n- name: Get VLAN\n  community.network.opx_cps:\n    module_name: \"dell-base-if-cmn/if/interfaces/interface\"\n    attr_data: {\n         \"if/interfaces/interface/name\": \"br230\",\n    }\n    operation: \"get\"\n- name: Modify some attributes in VLAN\n  community.network.opx_cps:\n    module_name: \"dell-base-if-cmn/if/interfaces/interface\"\n    attr_data: {\n         \"cps/key_data\":\n            { \"if/interfaces/interface/name\": \"br230\" },\n         \"dell-if/if/interfaces/interface/untagged-ports\": [\"e101-008-0\"],\n    }\n    operation: \"set\"\n- name: Delete VLAN\n  community.network.opx_cps:\n    module_name: \"dell-base-if-cmn/if/interfaces/interface\"\n    attr_data: {\n         \"if/interfaces/interface/name\": \"br230\",\n    }\n    operation: \"delete\"\n"
  },
  "community.network.ordnance_config": {
    "doc": {
      "description": "Ordnance router configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with these configuration sections in a deterministic way.",
      "has_action": false,
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made.  The backup file is written to the C(backup) folder in the playbook root directory.  If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The C(config) argument allows the playbook designer to supply the base configuration to be used to validate configuration changes necessary.  If this argument is provided, the module will not download the running-config from the remote node.",
          "required": false,
          "suboptions": {}
        },
        "defaults": {
          "aliases": [],
          "description": "This argument specifies whether or not to collect all defaults when getting the remote device running config.  When enabled, the module will get the current config by issuing the command C(show running-config all).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "multiline_delimiter": {
          "aliases": [],
          "description": "This argument is used when pushing a multiline configuration element to the Ordnance router.  It specifies the character to use as the delimiting character.  This only applies to the configuration action",
          "default": "@",
          "required": false,
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "save": {
          "aliases": [],
          "description": "The C(save) argument instructs the module to save the running- config to the startup-config at the conclusion of the module running.  If check mode is specified, this argument is ignored.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Ordnance configuration sections"
    },
    "examples": "\n---\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: RouterName\n    password: password\n    transport: cli\n\n---\n- name: Configure top level configuration\n  community.network.ordnance_config:\n    lines: hostname {{ inventory_hostname }}\n    provider: \"{{ cli }}\"\n\n- name: Configure interface settings\n  community.network.ordnance_config:\n    lines:\n      - description test interface\n      - ip address 172.31.1.1 255.255.255.0\n    parents: interface Ethernet1\n    provider: \"{{ cli }}\"\n\n- name: Configure bgp router\n  community.network.ordnance_config:\n    lines:\n      - neighbor 1.1.1.1 remote-as 1234\n      - network 10.0.0.0/24\n    parents: router bgp 65001\n    provider: \"{{ cli }}\"\n\n"
  },
  "community.network.ordnance_facts": {
    "doc": {
      "description": "Collects a base set of device facts from an Ordnance Virtual router over SSH. This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "options": {
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from Ordnance Virtual Routers over SSH"
    },
    "examples": "\n---\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: RouterName\n    password: ordnance\n    transport: cli\n\n---\n- name: Collect all facts from the device\n  community.network.ordnance_facts:\n    gather_subset: all\n    provider: \"{{ cli }}\"\n\n- name: Collect only the config and default facts\n  community.network.ordnance_facts:\n    gather_subset:\n      - config\n    provider: \"{{ cli }}\"\n\n- name: Do not collect hardware facts\n  community.network.ordnance_facts:\n    gather_subset:\n      - \"!hardware\"\n    provider: \"{{ cli }}\"\n"
  },
  "community.network.pn_access_list": {
    "doc": {
      "description": "This module can be used to create and delete an access list.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "Access List Name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "scope. Available valid values - local or fabric.",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use 'present' to create access-list and 'absent' to delete access-list.",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/delete access-list"
    },
    "examples": "\n- name: Access list functionality\n  community.network.pn_access_list:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_scope: \"local\"\n    state: \"present\"\n\n- name: Access list functionality\n  community.network.pn_access_list:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_scope: \"local\"\n    state: \"absent\"\n\n- name: Access list functionality\n  community.network.pn_access_list:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_scope: \"fabric\"\n    state: \"present\"\n"
  },
  "community.network.pn_access_list_ip": {
    "doc": {
      "description": "This modules can be used to add and remove IPs associated with access list.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_ip": {
          "aliases": [],
          "description": "IP associated with the access list.",
          "default": "::",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "Access List Name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use 'present' to add access-list-ip and 'absent' to remove access-list-ip.",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove access-list-ip"
    },
    "examples": "\n- name: Access list ip functionality\n  community.network.pn_access_list_ip:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_ip: \"172.16.3.1\"\n    state: \"present\"\n\n- name: Access list ip functionality\n  community.network.pn_access_list_ip:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_ip: \"172.16.3.1\"\n    state: \"absent\"\n"
  },
  "community.network.pn_admin_service": {
    "doc": {
      "description": "This module is used to modify services on the server-switch.",
      "has_action": false,
      "options": {
        "pn__if": {
          "aliases": [],
          "description": "administrative service interface.",
          "type": "str",
          "required": false,
          "choices": [
            "mgmt",
            "data"
          ],
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_icmp": {
          "aliases": [],
          "description": "Internet Message Control Protocol (ICMP) to enable or disable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_net_api": {
          "aliases": [],
          "description": "Netvisor API to enable or disable APIs.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_nfs": {
          "aliases": [],
          "description": "Network File System (NFS) to enable or disable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_snmp": {
          "aliases": [],
          "description": "Simple Network Monitoring Protocol (SNMP) to enable or disable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_ssh": {
          "aliases": [],
          "description": "Secure Shell to enable or disable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_web": {
          "aliases": [],
          "description": "Web (HTTP) to enable or disable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_web_log": {
          "aliases": [],
          "description": "Web logging to enable or disable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_web_port": {
          "aliases": [],
          "description": "Web (HTTP) port to enable or disable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_web_ssl": {
          "aliases": [],
          "description": "Web SSL (HTTPS) to enable or disable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_web_ssl_port": {
          "aliases": [],
          "description": "Web SSL (HTTPS) port to enable or disable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the admin-service.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify admin-service"
    },
    "examples": "\n- name: Admin service functionality\n  community.network.pn_admin_service:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn__if: \"mgmt\"\n    pn_web: False\n    pn_icmp: True\n\n- name: Admin service functionality\n  community.network.pn_admin_service:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_web: False\n    pn__if: \"mgmt\"\n    pn_snmp: True\n    pn_net_api: True\n    pn_ssh: True\n"
  },
  "community.network.pn_admin_session_timeout": {
    "doc": {
      "description": "This module can be used to modify admin session timeout.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_timeout": {
          "aliases": [],
          "description": "Maximum time to wait for user activity before terminating login session. Minimum should be 60s.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. C(update) to modify the admin-session-timeout.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify admin-session-timeout"
    },
    "examples": "\n- name: Admin session timeout functionality\n  community.network.pn_admin_session_timeout:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_timeout: \"61s\"\n\n- name: Admin session timeout functionality\n  community.network.pn_admin_session_timeout:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_timeout: \"1d\"\n\n- name: Admin session timeout functionality\n  community.network.pn_admin_session_timeout:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_timeout: \"10d20m3h15s\"\n"
  },
  "community.network.pn_admin_syslog": {
    "doc": {
      "description": "This module can be used to create the scope and other parameters of syslog event collection.\nThis module can be used to modify parameters of syslog event collection.\nThis module can be used to delete the scope and other parameters of syslog event collection.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_host": {
          "aliases": [],
          "description": "Hostname to log system events.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_message_format": {
          "aliases": [],
          "description": "message-format for log events - structured or legacy.",
          "type": "str",
          "required": false,
          "choices": [
            "structured",
            "legacy"
          ],
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "name of the system log.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_port": {
          "aliases": [],
          "description": "Host port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "Scope of the system log.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "pn_transport": {
          "aliases": [],
          "description": "Transport for log events - tcp/tls or udp.",
          "default": "udp",
          "type": "str",
          "required": false,
          "choices": [
            "tcp-tls",
            "udp"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create admin-syslog and C(absent) to delete admin-syslog C(update) to modify the admin-syslog.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/modify/delete admin-syslog"
    },
    "examples": "\n- name: Admin-syslog functionality\n  community.network.pn_admin_syslog:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_name: \"foo\"\n    pn_scope: \"local\"\n\n- name: Admin-syslog functionality\n  community.network.pn_admin_syslog:\n    pn_cliswitch: \"sw01\"\n    state: \"present\"\n    pn_name: \"foo\"\n    pn_scope: \"local\"\n    pn_host: \"166.68.224.46\"\n    pn_message_format: \"structured\"\n\n- name: Admin-syslog functionality\n  community.network.pn_admin_syslog:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_name: \"foo\"\n    pn_host: \"166.68.224.10\"\n"
  },
  "community.network.pn_connection_stats_settings": {
    "doc": {
      "description": "This module can be used to modify the settings for collecting statistical data about connections.",
      "has_action": false,
      "options": {
        "pn_client_server_stats_log_disk_space": {
          "aliases": [],
          "description": "disk-space allocated for statistics (including rotated log files).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_client_server_stats_log_enable": {
          "aliases": [],
          "description": "Enable or disable statistics.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_client_server_stats_log_interval": {
          "aliases": [],
          "description": "interval to collect statistics.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_client_server_stats_max_memory": {
          "aliases": [],
          "description": "maximum memory for client server statistics.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_connection_backup_enable": {
          "aliases": [],
          "description": "Enable backup for connection statistics collection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_connection_backup_interval": {
          "aliases": [],
          "description": "backup interval for connection statistics collection.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_connection_max_memory": {
          "aliases": [],
          "description": "maximum memory allowed for connection statistics.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_connection_stats_log_disk_space": {
          "aliases": [],
          "description": "disk-space allocated for statistics (including rotated log files).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_connection_stats_log_enable": {
          "aliases": [],
          "description": "enable or disable statistics.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_connection_stats_log_interval": {
          "aliases": [],
          "description": "interval to collect statistics.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_connection_stats_max_memory": {
          "aliases": [],
          "description": "maximum memory allowed for connection statistics.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_enable": {
          "aliases": [],
          "description": "Enable or disable collecting connections statistics.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_fabric_connection_backup_enable": {
          "aliases": [],
          "description": "enable backup for fabric connection statistics collection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_fabric_connection_backup_interval": {
          "aliases": [],
          "description": "backup interval for fabric connection statistics collection.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_fabric_connection_max_memory": {
          "aliases": [],
          "description": "maximum memory allowed for fabric connection statistics.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_service_stat_max_memory": {
          "aliases": [],
          "description": "maximum memory allowed for service statistics.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the connection-stats-settings.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify connection-stats-settings"
    },
    "examples": "\n- name: \"Modify connection stats settings\"\n  community.network.pn_connection_stats_settings:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_enable: False\n    pn_fabric_connection_max_memory: \"1000\"\n\n- name: \"Modify connection stats settings\"\n  community.network.pn_connection_stats_settings:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_enable: True\n"
  },
  "community.network.pn_cpu_class": {
    "doc": {
      "description": "This module can be used to create, modify and delete CPU class information.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_hog_protect": {
          "aliases": [],
          "description": "enable host-based hog protection.",
          "type": "str",
          "required": false,
          "choices": [
            "disable",
            "enable",
            "enable-and-drop"
          ],
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "name for the CPU class.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_rate_limit": {
          "aliases": [],
          "description": "rate-limit for CPU class.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "scope for CPU class.",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create cpu-class and C(absent) to delete cpu-class C(update) to modify the cpu-class.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/modify/delete cpu-class"
    },
    "examples": "\n- name: Create cpu class\n  community.network.pn_cpu_class:\n    pn_cliswitch: 'sw01'\n    state: 'present'\n    pn_name: 'icmp'\n    pn_rate_limit: '1000'\n    pn_scope: 'local'\n\n- name: Delete cpu class\n  community.network.pn_cpu_class:\n    pn_cliswitch: 'sw01'\n    state: 'absent'\n    pn_name: 'icmp'\n\n\n- name: Modify cpu class\n  community.network.pn_cpu_class:\n    pn_cliswitch: 'sw01'\n    state: 'update'\n    pn_name: 'icmp'\n    pn_rate_limit: '2000'\n"
  },
  "community.network.pn_cpu_mgmt_class": {
    "doc": {
      "description": "This module can we used to update mgmt port ingress policers.",
      "has_action": false,
      "options": {
        "pn_burst_size": {
          "aliases": [],
          "description": "ingress traffic burst size (bytes) or default.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "mgmt port ingress traffic class.",
          "type": "str",
          "required": false,
          "choices": [
            "arp",
            "icmp",
            "ssh",
            "snmp",
            "fabric",
            "bcast",
            "nfs",
            "web",
            "web-ssl",
            "net-api"
          ],
          "suboptions": {}
        },
        "pn_rate_limit": {
          "aliases": [],
          "description": "ingress rate limit on mgmt port(bps) or unlimited.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify cpu-mgmt-class.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify cpu-mgmt-class"
    },
    "examples": "\n- name: Cpu mgmt class modify ingress policers\n  community.network.pn_cpu_mgmt_class:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_name: \"icmp\"\n    pn_rate_limit: \"10000\"\n    pn_burst_size: \"14000\"\n\n- name: Cpu mgmt class modify ingress policers\n  community.network.pn_cpu_mgmt_class:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_name: \"snmp\"\n    pn_burst_size: \"8000\"\n    pn_rate_limit: \"100000\"\n\n- name: Cpu mgmt class modify ingress policers\n  community.network.pn_cpu_mgmt_class:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_name: \"web\"\n    pn_rate_limit: \"10000\"\n    pn_burst_size: \"1000\"\n"
  },
  "community.network.pn_dhcp_filter": {
    "doc": {
      "description": "This module can be used to create, delete and modify a DHCP filter config.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "name of the DHCP filter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_trusted_ports": {
          "aliases": [],
          "description": "trusted ports of dhcp config.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create dhcp-filter and C(absent) to delete dhcp-filter C(update) to modify the dhcp-filter.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/modify/delete dhcp-filter"
    },
    "examples": "\n- name: Dhcp filter create\n  community.network.pn_dhcp_filter:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    state: \"present\"\n    pn_trusted_ports: \"1\"\n\n- name: Dhcp filter delete\n  community.network.pn_dhcp_filter:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    state: \"absent\"\n    pn_trusted_ports: \"1\"\n\n- name: Dhcp filter modify\n  community.network.pn_dhcp_filter:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    state: \"update\"\n    pn_trusted_ports: \"1,2\"\n"
  },
  "community.network.pn_dscp_map": {
    "doc": {
      "description": "This module can be used to create a DSCP priority mapping table.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "Name for the DSCP map.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "Scope for dscp map.",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create dscp-map and C(absent) to delete.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/delete dscp-map"
    },
    "examples": "\n- name: Dscp map create\n  community.network.pn_dscp_map:\n    pn_cliswitch: \"sw01\"\n    state: \"present\"\n    pn_name: \"foo\"\n    pn_scope: \"local\"\n\n- name: Dscp map delete\n  community.network.pn_dscp_map:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_name: \"foo\"\n"
  },
  "community.network.pn_dscp_map_pri_map": {
    "doc": {
      "description": "This module can be used to update priority mappings in tables.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_dsmap": {
          "aliases": [],
          "description": "DSCP value(s).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "Name for the DSCP map.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_pri": {
          "aliases": [],
          "description": "CoS priority.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the dscp-map-pri-map.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify dscp-map-pri-map"
    },
    "examples": "\n- name: Dscp map pri map modify\n  community.network.pn_dscp_map_pri_map:\n    pn_cliswitch: 'sw01'\n    state: 'update'\n    pn_name: 'foo'\n    pn_pri: '0'\n    pn_dsmap: '40'\n\n- name: Dscp map pri map modify\n  community.network.pn_dscp_map_pri_map:\n    pn_cliswitch: 'sw01'\n    state: 'update'\n    pn_name: 'foo'\n    pn_pri: '1'\n    pn_dsmap: '8,10,12,14'\n"
  },
  "community.network.pn_fabric_local": {
    "doc": {
      "description": "This module can be used to modify fabric local information.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_control_network": {
          "aliases": [],
          "description": "control plane network.",
          "required": false,
          "choices": [
            "in-band",
            "mgmt",
            "vmgmt"
          ],
          "suboptions": {}
        },
        "pn_fabric_advertisement_network": {
          "aliases": [],
          "description": "network to send fabric advertisements on.",
          "required": false,
          "choices": [
            "inband-mgmt",
            "inband-only",
            "inband-vmgmt",
            "mgmt-only"
          ],
          "suboptions": {}
        },
        "pn_fabric_network": {
          "aliases": [],
          "description": "fabric administration network.",
          "default": "mgmt",
          "required": false,
          "choices": [
            "in-band",
            "mgmt",
            "vmgmt"
          ],
          "suboptions": {}
        },
        "pn_vlan": {
          "aliases": [],
          "description": "VLAN assigned to fabric.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the fabric-local.",
          "default": "update",
          "type": "str",
          "required": false,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify fabric-local"
    },
    "examples": "\n- name: Fabric local module\n  community.network.pn_fabric_local:\n    pn_cliswitch: \"sw01\"\n    pn_vlan: \"500\"\n\n- name: Fabric local module\n  community.network.pn_fabric_local:\n    pn_cliswitch: \"sw01\"\n    pn_fabric_advertisement_network: \"mgmt-only\"\n"
  },
  "community.network.pn_igmp_snooping": {
    "doc": {
      "description": "This module can be used to modify Internet Group Management Protocol (IGMP) snooping.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_enable": {
          "aliases": [],
          "description": "enable or disable IGMP snooping.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_enable_vlans": {
          "aliases": [],
          "description": "enable per VLAN IGMP snooping.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_igmpv2_vlans": {
          "aliases": [],
          "description": "VLANs on which to use IGMPv2 protocol.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_igmpv3_vlans": {
          "aliases": [],
          "description": "VLANs on which to use IGMPv3 protocol.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_no_snoop_linklocal_vlans": {
          "aliases": [],
          "description": "Remove snooping of link-local groups(224.0.0.0/24) on these vlans.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_query_interval": {
          "aliases": [],
          "description": "IGMP query interval in seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_query_max_response_time": {
          "aliases": [],
          "description": "maximum response time, in seconds, advertised in IGMP queries.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "IGMP snooping scope - fabric or local.",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "pn_snoop_linklocal_vlans": {
          "aliases": [],
          "description": "Allow snooping of link-local groups(224.0.0.0/24) on these vlans.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vxlan": {
          "aliases": [],
          "description": "enable or disable IGMP snooping on vxlans.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the igmp-snooping.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify igmp-snooping"
    },
    "examples": "\n- name: 'Modify IGMP Snooping'\n  community.network.pn_igmp_snooping:\n    pn_cliswitch: 'sw01'\n    state: 'update'\n    pn_vxlan: True\n    pn_enable_vlans: '1-399,401-4092'\n    pn_no_snoop_linklocal_vlans: 'none'\n    pn_igmpv3_vlans: '1-399,401-4092'\n\n- name: 'Modify IGMP Snooping'\n  community.network.pn_igmp_snooping:\n    pn_cliswitch: 'sw01'\n    state: 'update'\n    pn_vxlan: False\n    pn_enable_vlans: '1-399'\n    pn_no_snoop_linklocal_vlans: 'none'\n    pn_igmpv3_vlans: '1-399'\n"
  },
  "community.network.pn_ipv6security_raguard": {
    "doc": {
      "description": "This module can be used to add ipv6 RA Guard Policy, Update ipv6 RA guard Policy and Remove ipv6 RA Guard Policy.",
      "has_action": false,
      "options": {
        "pn_access_list": {
          "aliases": [],
          "description": "RA Guard Access List of Source IPs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_device": {
          "aliases": [],
          "description": "RA Guard Device. host or router.",
          "type": "str",
          "required": false,
          "choices": [
            "host",
            "router"
          ],
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "RA Guard Policy Name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_prefix_list": {
          "aliases": [],
          "description": "RA Guard Prefix List.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_router_priority": {
          "aliases": [],
          "description": "RA Guard Router Priority.",
          "type": "str",
          "required": false,
          "choices": [
            "low",
            "medium",
            "high"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "ipv6security-raguard configuration command.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "update",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/modify/delete ipv6security-raguard"
    },
    "examples": "\n- name: Ipv6 security ragurad create\n  community.network.pn_ipv6security_raguard:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_device: \"host\"\n\n- name: Ipv6 security ragurad create\n  community.network.pn_ipv6security_raguard:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo1\"\n    pn_device: \"host\"\n    pn_access_list: \"sample\"\n    pn_prefix_list: \"sample\"\n    pn_router_priority: \"low\"\n\n- name: Ipv6 security ragurad modify\n  community.network.pn_ipv6security_raguard:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo1\"\n    pn_device: \"router\"\n    pn_router_priority: \"medium\"\n    state: \"update\"\n\n- name: Ipv6 security ragurad delete\n  community.network.pn_ipv6security_raguard:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    state: \"absent\"\n"
  },
  "community.network.pn_ipv6security_raguard_port": {
    "doc": {
      "description": "This module can be used to add ports to RA Guard Policy and remove ports to RA Guard Policy.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "RA Guard Policy Name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_ports": {
          "aliases": [],
          "description": "Ports attached to RA Guard Policy.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "ipv6security-raguard-port configuration command.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove ipv6security-raguard-port"
    },
    "examples": "\n- name: Ipv6 security raguard port add\n  community.network.pn_ipv6security_raguard_port:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_ports: \"1\"\n\n- name: Ipv6 security raguard port remove\n  community.network.pn_ipv6security_raguard_port:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    state: \"absent\"\n    pn_ports: \"1\"\n"
  },
  "community.network.pn_ipv6security_raguard_vlan": {
    "doc": {
      "description": "This module can be used to Add vlans to RA Guard Policy and Remove vlans to RA Guard Policy.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "RA Guard Policy Name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_vlans": {
          "aliases": [],
          "description": "Vlans attached to RA Guard Policy.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "ipv6security-raguard-vlan configuration command.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove ipv6security-raguard-vlan"
    },
    "examples": "\n- name: Ipv6 security raguard vlan add\n  community.network.pn_ipv6security_raguard_vlan:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_vlans: \"100-105\"\n\n- name: Ipv6 security raguard vlan add\n  community.network.pn_ipv6security_raguard_vlan:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_vlans: \"100\"\n\n- name: Ipv6 security raguard vlan remove\n  community.network.pn_ipv6security_raguard_vlan:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_vlans: \"100-105\"\n    state: 'absent'\n"
  },
  "community.network.pn_log_audit_exception": {
    "doc": {
      "description": "This module can be used to create an audit exception and delete an audit exception.",
      "has_action": false,
      "options": {
        "pn_access": {
          "aliases": [],
          "description": "Specify the access type to match exceptions.",
          "type": "str",
          "required": true,
          "choices": [
            "any",
            "read-only",
            "read-write"
          ],
          "suboptions": {}
        },
        "pn_audit_type": {
          "aliases": [],
          "description": "Specify the type of audit exception.",
          "type": "str",
          "required": false,
          "choices": [
            "cli",
            "shell",
            "vtysh"
          ],
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_pattern": {
          "aliases": [],
          "description": "Specify a regular expression to match exceptions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "scope - local or fabric.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use 'present' to create audit-exception and 'absent' to delete audit-exception.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/delete an audit exception"
    },
    "examples": "\n- name: Create a log-audit-exception\n  community.network.pn_log_audit_exception:\n    pn_audit_type: \"cli\"\n    pn_pattern: \"test\"\n    state: \"present\"\n    pn_access: \"any\"\n    pn_scope: \"local\"\n\n- name: Delete a log-audit-exception\n  community.network.pn_log_audit_exception:\n    pn_audit_type: \"shell\"\n    pn_pattern: \"test\"\n    state: \"absent\"\n    pn_access: \"any\"\n"
  },
  "community.network.pn_port_config": {
    "doc": {
      "description": "This module can be used to modify a port configuration.",
      "has_action": false,
      "options": {
        "pn_allowed_tpid": {
          "aliases": [],
          "description": "Allowed TPID in addition to 0x8100 on Vlan header.",
          "type": "str",
          "required": false,
          "choices": [
            "vlan",
            "q-in-q",
            "q-in-q-old"
          ],
          "suboptions": {}
        },
        "pn_autoneg": {
          "aliases": [],
          "description": "physical port autonegotiation.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_crc_check_enable": {
          "aliases": [],
          "description": "CRC check on ingress and rewrite on egress.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_defer_bringup": {
          "aliases": [],
          "description": "defer port bringup.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_description": {
          "aliases": [],
          "description": "physical port description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_dscp_map": {
          "aliases": [],
          "description": "DSCP map name to enable on port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_edge_switch": {
          "aliases": [],
          "description": "physical port edge switch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_egress_rate_limit": {
          "aliases": [],
          "description": "max egress port data rate limit.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_enable": {
          "aliases": [],
          "description": "physical port enable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_eth_mode": {
          "aliases": [],
          "description": "physical Ethernet mode.",
          "required": false,
          "choices": [
            "1000base-x",
            "sgmii",
            "disabled",
            "GMII"
          ],
          "suboptions": {}
        },
        "pn_fabric_guard": {
          "aliases": [],
          "description": "Fabric guard configuration.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_host_enable": {
          "aliases": [],
          "description": "Host facing port control setting.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_intf": {
          "aliases": [],
          "description": "physical interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_jumbo": {
          "aliases": [],
          "description": "jumbo frames on physical port.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_lacp_priority": {
          "aliases": [],
          "description": "LACP priority from 1 to 65535.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_local_switching": {
          "aliases": [],
          "description": "no-local-switching port cannot bridge traffic to another no-local-switching port.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_loop_vlans": {
          "aliases": [],
          "description": "looping vlans.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_loopback": {
          "aliases": [],
          "description": "physical port loopback.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_mirror_only": {
          "aliases": [],
          "description": "physical port mirror only.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_pause": {
          "aliases": [],
          "description": "physical port pause.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_port": {
          "aliases": [],
          "description": "physical port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_port_mac_address": {
          "aliases": [],
          "description": "physical port MAC Address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_reflect": {
          "aliases": [],
          "description": "physical port reflection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_routing": {
          "aliases": [],
          "description": "routing.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_send_port": {
          "aliases": [],
          "description": "send port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_speed": {
          "aliases": [],
          "description": "physical port speed.",
          "required": false,
          "choices": [
            "disable",
            "10m",
            "100m",
            "1g",
            "2.5g",
            "10g",
            "25g",
            "40g",
            "50g",
            "100g"
          ],
          "suboptions": {}
        },
        "pn_vxlan_termination": {
          "aliases": [],
          "description": "physical port vxlan termination setting.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the port-config.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify port-config"
    },
    "examples": "\n- name: Port config modify\n  community.network.pn_port_config:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"all\"\n    pn_dscp_map: \"foo\"\n\n- name: Port config modify\n  community.network.pn_port_config:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"all\"\n    pn_host_enable: true\n"
  },
  "community.network.pn_port_cos_bw": {
    "doc": {
      "description": "This module can be used to update bw settings for CoS queues.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos": {
          "aliases": [],
          "description": "CoS priority.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_max_bw_limit": {
          "aliases": [],
          "description": "Maximum b/w in percentage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_min_bw_guarantee": {
          "aliases": [],
          "description": "Minimum b/w in percentage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_port": {
          "aliases": [],
          "description": "physical port number.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_weight": {
          "aliases": [],
          "description": "Scheduling weight (1 to 127) after b/w guarantee met.",
          "type": "str",
          "required": false,
          "choices": [
            "priority",
            "no-priority"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the port-cos-bw.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify port-cos-bw"
    },
    "examples": "\n- name: Port cos bw modify\n  community.network.pn_port_cos_bw:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"1\"\n    pn_cos: \"0\"\n    pn_min_bw_guarantee: \"60\"\n\n- name: Port cos bw modify\n  community.network.pn_port_cos_bw:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"all\"\n    pn_cos: \"0\"\n    pn_weight: \"priority\"\n"
  },
  "community.network.pn_port_cos_rate_setting": {
    "doc": {
      "description": "This modules can be used to update the port cos rate limit.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos0_rate": {
          "aliases": [],
          "description": "cos0 rate limit (pps) unlimited or 0 to 10000000.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos1_rate": {
          "aliases": [],
          "description": "cos1 rate limit (pps) unlimited or 0 to 10000000.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos2_rate": {
          "aliases": [],
          "description": "cos2 rate limit (pps) unlimited or 0 to 10000000.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos3_rate": {
          "aliases": [],
          "description": "cos3 rate limit (pps) unlimited or 0 to 10000000.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos4_rate": {
          "aliases": [],
          "description": "cos4 rate limit (pps) unlimited or 0 to 10000000.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos5_rate": {
          "aliases": [],
          "description": "cos5 rate limit (pps) unlimited or 0 to 10000000.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos6_rate": {
          "aliases": [],
          "description": "cos6 rate limit (pps) unlimited or 0 to 10000000.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cos7_rate": {
          "aliases": [],
          "description": "cos7 rate limit (pps) unlimited or 0 to 10000000.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_port": {
          "aliases": [],
          "description": "port.",
          "type": "str",
          "required": false,
          "choices": [
            "control-port",
            "data-port",
            "span-ports"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the port-cos-rate-setting.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify port-cos-rate-setting"
    },
    "examples": "\n- name: Port cos rate modify\n  community.network.pn_port_cos_rate_setting:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"control-port\"\n    pn_cos1_rate: \"1000\"\n    pn_cos5_rate: \"1000\"\n    pn_cos2_rate: \"1000\"\n    pn_cos0_rate: \"1000\"\n\n- name: Port cos rate modify\n  community.network.pn_port_cos_rate_setting:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"data-port\"\n    pn_cos1_rate: \"2000\"\n    pn_cos5_rate: \"2000\"\n    pn_cos2_rate: \"2000\"\n    pn_cos0_rate: \"2000\"\n"
  },
  "community.network.pn_prefix_list": {
    "doc": {
      "description": "This module can be used to create or delete prefix list.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "Prefix List Name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "scope of prefix-list.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create prefix-list and C(absent) to delete prefix-list.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/delete prefix-list"
    },
    "examples": "\n- name: Create prefix list\n  community.network.pn_prefix_list:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_scope: \"local\"\n    state: \"present\"\n\n- name: Delete prefix list\n  community.network.pn_prefix_list:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    state: \"absent\"\n"
  },
  "community.network.pn_prefix_list_network": {
    "doc": {
      "description": "This module is used to add network associated with prefix list and remove networks associated with prefix list.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "Prefix List Name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_netmask": {
          "aliases": [],
          "description": "netmask of the network associated the prefix list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_network": {
          "aliases": [],
          "description": "network associated with the prefix list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create prefix-list-network and C(absent) to delete prefix-list-network.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove prefix-list-network"
    },
    "examples": "\n- name: Prefix list network add\n  community.network.pn_prefix_list_network:\n    pn_cliswitch: \"sw01\"\n    pn_name: \"foo\"\n    pn_network: \"172.16.3.1\"\n    pn_netmask: \"24\"\n    state: \"present\"\n\n- name: Prefix list network remove\n  community.network.pn_prefix_list_network:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_name: \"foo\"\n    pn_network: \"172.16.3.1\"\n    pn_netmask: \"24\"\n"
  },
  "community.network.pn_role": {
    "doc": {
      "description": "This module can be used to create, delete and modify user roles.",
      "has_action": false,
      "options": {
        "pn_access": {
          "aliases": [],
          "description": "type of access.",
          "type": "str",
          "required": false,
          "choices": [
            "read-only",
            "read-write"
          ],
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_delete_from_users": {
          "aliases": [],
          "description": "delete from users.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "role name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_running_config": {
          "aliases": [],
          "description": "display running configuration of switch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "local or fabric.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "pn_shell": {
          "aliases": [],
          "description": "allow shell command.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_sudo": {
          "aliases": [],
          "description": "allow sudo from shell.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create role and C(absent) to delete role and C(update) to modify role.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/delete/modify role"
    },
    "examples": "\n- name: Role create\n  community.network.pn_role:\n    pn_cliswitch: 'sw01'\n    state: 'present'\n    pn_name: 'foo'\n    pn_scope: 'local'\n    pn_access: 'read-only'\n\n- name: Role delete\n  community.network.pn_role:\n    pn_cliswitch: 'sw01'\n    state: 'absent'\n    pn_name: 'foo'\n\n- name: Role modify\n  community.network.pn_role:\n    pn_cliswitch: 'sw01'\n    state: 'update'\n    pn_name: 'foo'\n    pn_access: 'read-write'\n    pn_sudo: true\n    pn_shell: true\n"
  },
  "community.network.pn_snmp_community": {
    "doc": {
      "description": "This module can be used to create SNMP communities for SNMPv1 or delete SNMP communities for SNMPv1 or modify SNMP communities for SNMPv1.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "required": false,
          "suboptions": {}
        },
        "pn_community_string": {
          "aliases": [],
          "description": "community name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_community_type": {
          "aliases": [],
          "description": "community type.",
          "type": "str",
          "required": false,
          "choices": [
            "read-only",
            "read-write"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create snmp-community and C(absent) to delete snmp-community C(update) to update snmp-community.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/modify/delete snmp-community"
    },
    "examples": "\n- name: Create snmp community\n  community.network.pn_snmp_community:\n    pn_cliswitch: \"sw01\"\n    state: \"present\"\n    pn_community_string: \"foo\"\n    pn_community_type: \"read-write\"\n\n- name: Delete snmp community\n  community.network.pn_snmp_community:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_community_string: \"foo\"\n\n- name: Modify snmp community\n  community.network.pn_snmp_community:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_community_string: \"foo\"\n    pn_community_type: \"read-only\"\n"
  },
  "community.network.pn_snmp_trap_sink": {
    "doc": {
      "description": "This module can be used to create a SNMP trap sink and delete a SNMP trap sink.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_community": {
          "aliases": [],
          "description": "community type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_dest_host": {
          "aliases": [],
          "description": "destination host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_dest_port": {
          "aliases": [],
          "description": "destination port.",
          "default": "162",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_type": {
          "aliases": [],
          "description": "trap type.",
          "default": "TRAP_TYPE_V2C_TRAP",
          "type": "str",
          "required": false,
          "choices": [
            "TRAP_TYPE_V1_TRAP",
            "TRAP_TYPE_V2C_TRAP",
            "TRAP_TYPE_V2_INFORM"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create snmp-trap-sink and C(absent) to delete snmp-trap-sink.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/delete snmp-trap-sink"
    },
    "examples": "\n- name: Snmp trap sink functionality\n  community.network.pn_snmp_trap_sink:\n    pn_cliswitch: \"sw01\"\n    state: \"present\"\n    pn_community: \"foo\"\n    pn_type: \"TRAP_TYPE_V2_INFORM\"\n    pn_dest_host: \"192.168.67.8\"\n\n- name: Snmp trap sink functionality\n  community.network.pn_snmp_trap_sink:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_community: \"foo\"\n    pn_type: \"TRAP_TYPE_V2_INFORM\"\n    pn_dest_host: \"192.168.67.8\"\n"
  },
  "community.network.pn_snmp_vacm": {
    "doc": {
      "description": "This module can be used to create View Access Control Models (VACM), modify VACM and delete VACM.",
      "has_action": false,
      "options": {
        "pn_auth": {
          "aliases": [],
          "description": "authentication required.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_oid_restrict": {
          "aliases": [],
          "description": "restrict OID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_priv": {
          "aliases": [],
          "description": "privileges.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_user_name": {
          "aliases": [],
          "description": "SNMP administrator name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_user_type": {
          "aliases": [],
          "description": "SNMP user type.",
          "type": "str",
          "required": false,
          "choices": [
            "rouser",
            "rwuser"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create snmp-vacm and C(absent) to delete snmp-vacm and C(update) to modify snmp-vacm.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/modify/delete snmp-vacm"
    },
    "examples": "\n- name: Create snmp vacm\n  community.network.pn_snmp_vacm:\n    pn_cliswitch: \"sw01\"\n    state: \"present\"\n    pn_user_name: \"foo\"\n    pn_user_type: \"rouser\"\n\n- name: Update snmp vacm\n  community.network.pn_snmp_vacm:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_user_name: \"foo\"\n    pn_user_type: \"rwuser\"\n\n- name: Delete snmp vacm\n  community.network.pn_snmp_vacm:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_user_name: \"foo\"\n"
  },
  "community.network.pn_stp": {
    "doc": {
      "description": "This module can be used to modify Spanning Tree Protocol parameters.",
      "has_action": false,
      "options": {
        "pn_bpdus_bridge_ports": {
          "aliases": [],
          "description": "BPDU packets to bridge specific port.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_bridge_id": {
          "aliases": [],
          "description": "STP bridge id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_bridge_priority": {
          "aliases": [],
          "description": "STP bridge priority.",
          "default": "32768",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_enable": {
          "aliases": [],
          "description": "enable or disable STP",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_forwarding_delay": {
          "aliases": [],
          "description": "STP forwarding delay between 4 and 30 secs.",
          "default": "15",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_hello_time": {
          "aliases": [],
          "description": "STP hello time between 1 and 10 secs.",
          "default": "2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_max_age": {
          "aliases": [],
          "description": "maximum age time between 6 and 40 secs.",
          "default": "20",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_mst_config_name": {
          "aliases": [],
          "description": "Name for MST Configuration Instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_mst_max_hops": {
          "aliases": [],
          "description": "maximum hop count for mstp bpdu.",
          "default": "20",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_root_guard_wait_time": {
          "aliases": [],
          "description": "root guard wait time between 0 and 300 secs. 0 to disable wait.",
          "default": "20",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_stp_mode": {
          "aliases": [],
          "description": "STP mode.",
          "type": "str",
          "required": false,
          "choices": [
            "rstp",
            "mstp"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to stp.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify stp"
    },
    "examples": "\n- name: Modify stp\n  community.network.pn_stp:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_hello_time: \"3\"\n    pn_stp_mode: \"rstp\"\n"
  },
  "community.network.pn_stp_port": {
    "doc": {
      "description": "This module can be used modify Spanning Tree Protocol (STP) parameters on ports.",
      "has_action": false,
      "options": {
        "pn_block": {
          "aliases": [],
          "description": "Specify if a STP port blocks BPDUs.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_bpdu_guard": {
          "aliases": [],
          "description": "STP port BPDU guard.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cost": {
          "aliases": [],
          "description": "STP port cost from 1 to 200000000.",
          "default": "2000",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_edge": {
          "aliases": [],
          "description": "STP port is an edge port.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_filter": {
          "aliases": [],
          "description": "STP port filters BPDUs.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_port": {
          "aliases": [],
          "description": "STP port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_priority": {
          "aliases": [],
          "description": "STP port priority from 0 to 240.",
          "default": "128",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_root_guard": {
          "aliases": [],
          "description": "STP port Root guard.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to update stp-port.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify stp-port."
    },
    "examples": "\n- name: Modify stp port\n  community.network.pn_stp_port:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"1\"\n    pn_filter: True\n    pn_priority: '144'\n\n- name: Modify stp port\n  community.network.pn_stp_port:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"1\"\n    pn_cost: \"200\"\n\n- name: Modify stp port\n  community.network.pn_stp_port:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_port: \"1\"\n    pn_edge: True\n    pn_cost: \"200\"\n\n"
  },
  "community.network.pn_switch_setup": {
    "doc": {
      "description": "This module can be used to modify switch setup.",
      "has_action": false,
      "options": {
        "pn_analytics_store": {
          "aliases": [],
          "description": "type of disk storage for analytics.",
          "type": "str",
          "required": false,
          "choices": [
            "default",
            "optimized"
          ],
          "suboptions": {}
        },
        "pn_banner": {
          "aliases": [],
          "description": "Banner to display on server-switch.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_date": {
          "aliases": [],
          "description": "Date.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_dns_ip": {
          "aliases": [],
          "description": "DNS IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_dns_secondary_ip": {
          "aliases": [],
          "description": "secondary DNS IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_domain_name": {
          "aliases": [],
          "description": "Domain name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_enable_host_ports": {
          "aliases": [],
          "description": "Enable host ports by default.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_eula_accepted": {
          "aliases": [],
          "description": "Accept EULA.",
          "type": "str",
          "required": false,
          "choices": [
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "pn_eula_timestamp": {
          "aliases": [],
          "description": "EULA timestamp.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_force": {
          "aliases": [],
          "description": "Force analytics-store change even if it involves removing data.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_gateway_ip": {
          "aliases": [],
          "description": "gateway IPv4 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_gateway_ip6": {
          "aliases": [],
          "description": "Gateway IPv6 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_in_band_ip": {
          "aliases": [],
          "description": "data in-band IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_in_band_ip6": {
          "aliases": [],
          "description": "Data in-band IPv6 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_in_band_ip6_assign": {
          "aliases": [],
          "description": "Data IPv6 address assignment.",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "autoconf"
          ],
          "suboptions": {}
        },
        "pn_in_band_netmask": {
          "aliases": [],
          "description": "Data in-band netmask.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_in_band_netmask_ip6": {
          "aliases": [],
          "description": "Data in-band IPv6 netmask.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_loopback_ip": {
          "aliases": [],
          "description": "loopback IPv4 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_loopback_ip6": {
          "aliases": [],
          "description": "loopback IPv6 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_mgmt_ip": {
          "aliases": [],
          "description": "Management IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_mgmt_ip6": {
          "aliases": [],
          "description": "IPv6 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_mgmt_ip6_assignment": {
          "aliases": [],
          "description": "IPv6 address assignment.",
          "required": false,
          "choices": [
            "none",
            "autoconf"
          ],
          "suboptions": {}
        },
        "pn_mgmt_ip_assignment": {
          "aliases": [],
          "description": "IP address assignment.",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "dhcp"
          ],
          "suboptions": {}
        },
        "pn_mgmt_netmask": {
          "aliases": [],
          "description": "Netmask.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_mgmt_netmask_ip6": {
          "aliases": [],
          "description": "IPv6 netmask.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_motd": {
          "aliases": [],
          "description": "Message of the Day.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_ntp_secondary_server": {
          "aliases": [],
          "description": "Secondary NTP server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_ntp_server": {
          "aliases": [],
          "description": "NTP server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_password": {
          "aliases": [],
          "description": "plain text password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_switch_name": {
          "aliases": [],
          "description": "switch name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_timezone": {
          "aliases": [],
          "description": "Timezone to be configured.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the switch-setup.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify switch-setup"
    },
    "examples": "\n- name: Modify switch\n  community.network.pn_switch_setup:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_timezone: \"America/New_York\"\n    pn_in_band_ip: \"20.20.1.1\"\n    pn_in_band_netmask: \"24\"\n\n- name: Modify switch\n  community.network.pn_switch_setup:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_in_band_ip6: \"2001:0db8:85a3::8a2e:0370:7334\"\n    pn_in_band_netmask_ip6: \"127\"\n"
  },
  "community.network.pn_user": {
    "doc": {
      "description": "This module can be used to create a user and apply a role, update a user and delete a user.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_initial_role": {
          "aliases": [],
          "description": "initial role for user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_password": {
          "aliases": [],
          "description": "plain text password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_scope": {
          "aliases": [],
          "description": "local or fabric.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "fabric"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to create user and C(absent) to delete user C(update) to update user.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/modify/delete user"
    },
    "examples": "\n- name: Create user\n  community.network.pn_user:\n    pn_cliswitch: \"sw01\"\n    state: \"present\"\n    pn_scope: \"fabric\"\n    pn_password: \"foo123\"\n    pn_name: \"foo\"\n\n- name: Delete user\n  community.network.pn_user:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_name: \"foo\"\n\n- name: Modify user\n  community.network.pn_user:\n    pn_cliswitch: \"sw01\"\n    state: \"update\"\n    pn_password: \"test1234\"\n    pn_name: \"foo\"\n"
  },
  "community.network.pn_vflow_table_profile": {
    "doc": {
      "description": "This module can be used to modify a vFlow table profile.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_enable": {
          "aliases": [],
          "description": "enable or disable vflow profile table.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_hw_tbl": {
          "aliases": [],
          "description": "hardware table used by vFlow.",
          "type": "str",
          "required": false,
          "choices": [
            "switch-main",
            "switch-hash",
            "npu-main",
            "npu-hash"
          ],
          "suboptions": {}
        },
        "pn_profile": {
          "aliases": [],
          "description": "type of vFlow profile.",
          "type": "str",
          "required": false,
          "choices": [
            "application",
            "ipv6",
            "qos"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the vflow-table-profile.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify vflow-table-profile"
    },
    "examples": "\n- name: Modify vflow table profile\n  community.network.pn_vflow_table_profile:\n    pn_cliswitch: 'sw01'\n    state: 'update'\n    pn_profile: 'ipv6'\n    pn_hw_tbl: 'switch-main'\n    pn_enable: true\n\n- name: Modify vflow table profile\n  community.network.pn_vflow_table_profile:\n    state: 'update'\n    pn_profile: 'qos'\n    pn_hw_tbl: 'switch-main'\n    pn_enable: false\n"
  },
  "community.network.pn_vrouter_bgp": {
    "doc": {
      "description": "This module can be used to add Border Gateway Protocol neighbor to a vRouter modify Border Gateway Protocol neighbor to a vRouter and remove Border Gateway Protocol neighbor from a vRouter.",
      "has_action": false,
      "options": {
        "pn_advertisement_interval": {
          "aliases": [],
          "description": "Minimum interval between sending BGP routing updates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_allowas_in": {
          "aliases": [],
          "description": "Allow/reject routes with local AS in AS_PATH.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_bfd": {
          "aliases": [],
          "description": "BFD protocol support for fault detection.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_bfd_multihop": {
          "aliases": [],
          "description": "always use BFD multi-hop port for fault detection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_connect_retry_interval": {
          "aliases": [],
          "description": "BGP Connect retry interval (seconds).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_default_originate": {
          "aliases": [],
          "description": "announce default routes to the neighbor or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_ebgp_multihop": {
          "aliases": [],
          "description": "value for external BGP from 1 to 255.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_interface": {
          "aliases": [],
          "description": "Interface to reach the neighbor.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_max_prefix": {
          "aliases": [],
          "description": "maximum number of prefixes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_max_prefix_warn_only": {
          "aliases": [],
          "description": "warn if the maximum number of prefixes is exceeded.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_multi_protocol": {
          "aliases": [],
          "description": "Multi-protocol features.",
          "required": false,
          "choices": [
            "ipv4-unicast",
            "ipv6-unicast"
          ],
          "suboptions": {}
        },
        "pn_neighbor": {
          "aliases": [],
          "description": "IP address for BGP neighbor.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_neighbor_holdtime": {
          "aliases": [],
          "description": "BGP Holdtime (seconds).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_neighbor_keepalive_interval": {
          "aliases": [],
          "description": "BGP Keepalive interval (seconds).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_next_hop_self": {
          "aliases": [],
          "description": "BGP next hop is self or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_no_route_map_in": {
          "aliases": [],
          "description": "Remove ingress route-map from BGP neighbor.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_no_route_map_out": {
          "aliases": [],
          "description": "Remove egress route-map from BGP neighbor.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_override_capability": {
          "aliases": [],
          "description": "override capability.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_password": {
          "aliases": [],
          "description": "password for MD5 BGP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_prefix_list_in": {
          "aliases": [],
          "description": "prefixes used for filtering.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_prefix_list_out": {
          "aliases": [],
          "description": "prefixes used for filtering outgoing packets.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_remote_as": {
          "aliases": [],
          "description": "BGP remote AS from 1 to 4294967295.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_route_map_in": {
          "aliases": [],
          "description": "route map in for nbr.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_route_map_out": {
          "aliases": [],
          "description": "route map out for nbr.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_route_reflector_client": {
          "aliases": [],
          "description": "set as route reflector client.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_send_community": {
          "aliases": [],
          "description": "send any community attribute to neighbor.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_soft_reconfig_inbound": {
          "aliases": [],
          "description": "soft reset to reconfigure inbound traffic.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_update_source": {
          "aliases": [],
          "description": "IP address of BGP packets required for peering over loopback interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of service config.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_weight": {
          "aliases": [],
          "description": "default weight value between 0 and 65535 for the neighbor's routes.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "vrouter-bgp configuration command.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/modify/remove vrouter-bgp"
    },
    "examples": "\n- name: \"Add BGP to vRouter\"\n  community.network.pn_vrouter_bgp:\n    state: 'present'\n    pn_vrouter_name: 'sw01-vrouter'\n    pn_neighbor: '105.104.104.1'\n    pn_remote_as: 65000\n    pn_bfd: true\n\n- name: \"Remove BGP to vRouter\"\n  community.network.pn_vrouter_bgp:\n    state: 'absent'\n    pn_vrouter_name: 'sw01-vrouter'\n    pn_neighbor: '105.104.104.1'\n\n- name: \"Modify BGP to vRouter\"\n  community.network.pn_vrouter_bgp:\n    state: 'update'\n    pn_vrouter_name: 'sw01-vrouter'\n    pn_neighbor: '105.104.104.1'\n    pn_remote_as: 65000\n    pn_bfd: false\n    pn_allowas_in: true\n"
  },
  "community.network.pn_vrouter_bgp_network": {
    "doc": {
      "description": "This module can be used to add Border Gateway Protocol network to a vRouter and remove Border Gateway Protocol network from a vRouter.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_netmask": {
          "aliases": [],
          "description": "BGP network mask.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_network": {
          "aliases": [],
          "description": "IP address for BGP network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of service config.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to add bgp network and C(absent) to remove bgp network.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove vrouter-bgp-network"
    },
    "examples": "\n- name:  Add network to bgp\n  community.network.pn_vrouter_bgp_network:\n    pn_cliswitch: \"sw01\"\n    state: \"present\"\n    pn_vrouter_name: \"foo-vrouter\"\n    pn_network: '10.10.10.10'\n    pn_netmask: '31'\n\n- name:  Remove network from bgp\n  community.network.pn_vrouter_bgp_network:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_vrouter_name: \"foo-vrouter\"\n    pn_network: '10.10.10.10'\n"
  },
  "community.network.pn_vrouter_interface_ip": {
    "doc": {
      "description": "This module can be used to add an IP address on interface from a vRouter or remove an IP address on interface from a vRouter.",
      "has_action": false,
      "options": {
        "pn_bd": {
          "aliases": [],
          "description": "interface Bridge Domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_ip": {
          "aliases": [],
          "description": "IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_netmask": {
          "aliases": [],
          "description": "netmask.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_nic": {
          "aliases": [],
          "description": "virtual NIC assigned to interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vnet": {
          "aliases": [],
          "description": "interface VLAN VNET.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of service config.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to addvrouter-interface-ip and C(absent) to remove vrouter-interface-ip.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove vrouter-interface-ip"
    },
    "examples": "\n- name: Add vrouter interface to nic\n  community.network.pn_vrouter_interface_ip:\n    state: \"present\"\n    pn_cliswitch: \"sw01\"\n    pn_vrouter_name: \"foo-vrouter\"\n    pn_ip: \"2620:0:1651:1::30\"\n    pn_netmask: \"127\"\n    pn_nic: \"eth0.4092\"\n\n- name: Remove vrouter interface to nic\n  community.network.pn_vrouter_interface_ip:\n    state: \"absent\"\n    pn_cliswitch: \"sw01\"\n    pn_vrouter_name: \"foo-vrouter\"\n    pn_ip: \"2620:0:1651:1::30\"\n    pn_nic: \"eth0.4092\"\n"
  },
  "community.network.pn_vrouter_loopback_interface": {
    "doc": {
      "description": "This module can be used to add loopback interface to a vRouter or remove loopback interface from a vRouter.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_index": {
          "aliases": [],
          "description": "loopback index from 1 to 255.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_ip": {
          "aliases": [],
          "description": "loopback IP address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of service config.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to add vrouter-loopback-interface and C(absent) to remove vrouter-loopback-interface.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove vrouter-loopback-interface"
    },
    "examples": "\n- name: Add vrouter loopback interface\n  community.network.pn_vrouter_loopback_interface:\n    state: \"present\"\n    pn_cliswitch: \"sw01\"\n    pn_vrouter_name: \"sw01-vrouter\"\n    pn_ip: \"192.168.10.1\"\n\n- name: Remove vrouter loopback interface\n  community.network.pn_vrouter_loopback_interface:\n    state: \"absent\"\n    pn_cliswitch: \"sw01\"\n    pn_vrouter_name: \"sw01-vrouter\"\n    pn_ip: \"192.168.10.1\"\n    pn_index: \"2\"\n"
  },
  "community.network.pn_vrouter_ospf": {
    "doc": {
      "description": "This module can be used to add OSPF protocol to vRouter and remove OSPF protocol from a vRouter",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_netmask": {
          "aliases": [],
          "description": "OSPF network IP address netmask.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_network": {
          "aliases": [],
          "description": "OSPF network IP address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_ospf_area": {
          "aliases": [],
          "description": "stub area number for the configuration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of service config.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "vrouter-ospf configuration command.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove vrouter-ospf"
    },
    "examples": "\n- name: Add OSPF to vRouter\n  community.network.pn_vrouter_ospf:\n    state: 'present'\n    pn_vrouter_name: 'sw01-vrouter'\n    pn_network: '105.104.104.1'\n    pn_netmask: '24'\n    pn_ospf_area: '0'\n- name: \"Remove OSPF to vRouter\"\n  community.network.pn_vrouter_ospf:\n    state: 'absent'\n    pn_vrouter_name: 'sw01-vrouter'\n    pn_network: '105.104.104.1'\n"
  },
  "community.network.pn_vrouter_ospf6": {
    "doc": {
      "description": "This module can be used to add interface ip to OSPF6 protocol or remove interface ip from OSPF6 protocol on vRouter.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_nic": {
          "aliases": [],
          "description": "OSPF6 control for this interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_ospf6_area": {
          "aliases": [],
          "description": "area id for this interface in IPv4 address format.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of service config.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(present) to add vrouter-ospf6 and C(absent) to remove interface from vrouter-ospf6.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove vrouter-ospf6"
    },
    "examples": "\n- name: Add vrouter interface nic to ospf6\n  community.network.pn_vrouter_ospf6:\n    pn_cliswitch: \"sw01\"\n    state: \"present\"\n    pn_vrouter_name: \"foo-vrouter\"\n    pn_nic: \"eth0.4092\"\n    pn_ospf6_area: \"0.0.0.0\"\n\n- name: Remove vrouter interface nic to ospf6\n  community.network.pn_vrouter_ospf6:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_vrouter_name: \"foo-vrouter\"\n    pn_nic: \"eth0.4092\"\n"
  },
  "community.network.pn_vrouter_packet_relay": {
    "doc": {
      "description": "This module can be used to add packet relay configuration for DHCP on vrouter and remove packet relay configuration for DHCP on vrouter.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_forward_ip": {
          "aliases": [],
          "description": "forwarding IP address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_forward_proto": {
          "aliases": [],
          "description": "protocol type to forward packets.",
          "default": "dhcp",
          "type": "str",
          "required": false,
          "choices": [
            "dhcp"
          ],
          "suboptions": {}
        },
        "pn_nic": {
          "aliases": [],
          "description": "NIC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of service config.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "vrouter-packet-relay configuration command.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to add/remove vrouter-packet-relay"
    },
    "examples": "\n- name: VRouter packet relay add\n  community.network.pn_vrouter_packet_relay:\n    pn_cliswitch: \"sw01\"\n    pn_forward_ip: \"192.168.10.1\"\n    pn_nic: \"eth0.4092\"\n    pn_vrouter_name: \"sw01-vrouter\"\n\n- name: VRouter packet relay remove\n  community.network.pn_vrouter_packet_relay:\n    pn_cliswitch: \"sw01\"\n    state: \"absent\"\n    pn_forward_ip: \"192.168.10.1\"\n    pn_nic: \"eth0.4092\"\n    pn_vrouter_name: \"sw01-vrouter\"\n"
  },
  "community.network.pn_vrouter_pim_config": {
    "doc": {
      "description": "This module can be used to modify pim parameters.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_hello_interval": {
          "aliases": [],
          "description": "hello interval in seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_querier_timeout": {
          "aliases": [],
          "description": "igmp querier timeout in seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_query_interval": {
          "aliases": [],
          "description": "igmp query interval in seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of service config.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the action to perform. Use C(update) to modify the vrouter-pim-config.",
          "type": "str",
          "required": true,
          "choices": [
            "update"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to modify vrouter-pim-config"
    },
    "examples": "\n- name: Pim config modify\n  community.network.pn_vrouter_pim_config:\n    pn_cliswitch: '192.168.1.1'\n    pn_query_interval: '10'\n    pn_querier_timeout: '30'\n    state: 'update'\n    pn_vrouter_name: 'ansible-spine1-vrouter'\n"
  },
  "community.network.pn_vtep": {
    "doc": {
      "description": "This module can be used to create a vtep and delete a vtep.",
      "has_action": false,
      "options": {
        "pn_cliswitch": {
          "aliases": [],
          "description": "Target switch to run the CLI on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_ip": {
          "aliases": [],
          "description": "Primary IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_location": {
          "aliases": [],
          "description": "switch name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_name": {
          "aliases": [],
          "description": "vtep name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_switch_in_cluster": {
          "aliases": [],
          "description": "Tells whether switch in cluster or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pn_virtual_ip": {
          "aliases": [],
          "description": "Virtual/Secondary IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pn_vrouter_name": {
          "aliases": [],
          "description": "name of the vrouter service.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "vtep configuration command.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "CLI command to create/delete vtep"
    },
    "examples": "\n- name: Create vtep\n  community.network.pn_vtep:\n    pn_cliswitch: 'sw01'\n    pn_name: 'foo'\n    pn_vrouter_name: 'foo-vrouter'\n    pn_ip: '22.22.22.2'\n    pn_location: 'sw01'\n    pn_virtual_ip: \"22.22.22.1\"\n\n- name: Delete vtep\n  community.network.pn_vtep:\n    pn_cliswitch: 'sw01'\n    state: 'absent'\n    pn_name: 'foo'\n"
  },
  "community.network.slxos_command": {
    "doc": {
      "description": "Sends arbitrary commands to an SLX node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(community.network.slxos_config) to configure SLX-OS devices.",
      "has_action": false,
      "notes": "Tested against SLX-OS 17s.1.02\nIf a command sent to the device requires answering a prompt, it is possible to pass a dict containing I(command), I(answer) and I(prompt). See examples.",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote SLX-OS device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run commands on remote devices running Extreme Networks SLX-OS"
    },
    "examples": "\ntasks:\n  - name: Run show version on remote devices\n    community.network.slxos_command:\n      commands: show version\n\n  - name: Run show version and check to see if output contains SLX\n    community.network.slxos_command:\n      commands: show version\n      wait_for: result[0] contains SLX\n\n  - name: Run multiple commands on remote nodes\n    community.network.slxos_command:\n      commands:\n        - show version\n        - show interfaces\n\n  - name: Run multiple commands and evaluate the output\n    community.network.slxos_command:\n      commands:\n        - show version\n        - show interface status\n      wait_for:\n        - result[0] contains SLX\n        - result[1] contains Eth\n  - name: Run command that requires answering a prompt\n    community.network.slxos_command:\n      commands:\n        - command: 'clear sessions'\n          prompt: 'This operation will logout all the user sessions. Do you want to continue (yes/no)?:'\n          answer: y\n"
  },
  "community.network.slxos_config": {
    "doc": {
      "description": "Extreme SLX-OS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with SLX-OS configuration sections in a deterministic way.",
      "has_action": false,
      "notes": "Tested against SLX-OS 17s.1.02",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "defaults": {
          "aliases": [],
          "description": "This argument specifies whether or not to collect all defaults when getting the remote device running config.  When enabled, the module will get the current config by issuing the command C(show running-config all).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "diff_against": {
          "aliases": [],
          "description": "When using the C(ansible-playbook --diff) command line argument the module can generate diffs against different sources.\nWhen this option is configure as I(startup), the module will return the diff of the running-config against the startup-config.\nWhen this option is configured as I(intended), the module will return the diff of the running-config against the configuration provided in the C(intended_config) argument.\nWhen this option is configured as I(running), the module will return the before and after diff of the running-config with respect to any changes made to the device configuration.",
          "required": false,
          "choices": [
            "running",
            "startup",
            "intended"
          ],
          "suboptions": {}
        },
        "diff_ignore_lines": {
          "aliases": [],
          "description": "Use this argument to specify one or more lines that should be ignored during the diff.  This is used for lines in the configuration that are automatically updated by the system.  This argument takes a list of regular expressions or exact line matches.",
          "required": false,
          "suboptions": {}
        },
        "intended_config": {
          "aliases": [],
          "description": "The C(intended_config) provides the master configuration that the node should conform to and is used to check the final running-config against.   This argument will not modify any settings on the remote device and is strictly used to check the compliance of the current device's configuration against.  When specifying this argument, the task should also modify the C(diff_against) value and set it to I(intended).",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "multiline_delimiter": {
          "aliases": [],
          "description": "This argument is used when pushing a multiline configuration element to the SLX-OS device.  It specifies the character to use as the delimiting character.  This only applies to the configuration action.",
          "default": "@",
          "required": false,
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "running_config": {
          "aliases": [
            "config"
          ],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(running_config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "save_when": {
          "aliases": [],
          "description": "When changes are made to the device running-configuration, the changes are not copied to non-volatile storage by default.  Using this argument will change that before.  If the argument is set to I(always), then the running-config will always be copied to the startup-config and the I(modified) flag will always be set to True.  If the argument is set to I(modified), then the running-config will only be copied to the startup-config if it has changed since the last save to startup-config.  If the argument is set to I(never), the running-config will never be copied to the startup-config.  If the argument is set to I(changed), then the running-config will only be copied to the startup-config if the task has made a change.",
          "default": "never",
          "required": false,
          "choices": [
            "always",
            "never",
            "modified",
            "changed"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Extreme Networks SLX-OS configuration sections"
    },
    "examples": "\n- name: Configure top level configuration\n  community.network.slxos_config:\n    lines: hostname {{ inventory_hostname }}\n\n- name: Configure interface settings\n  community.network.slxos_config:\n    lines:\n      - description test interface\n      - ip address 172.31.1.1/24\n    parents: interface Ethernet 0/1\n\n- name: Configure multiple interfaces\n  community.network.slxos_config:\n    lines:\n      - lacp timeout long\n    parents: \"{{ item }}\"\n  with_items:\n    - interface Ethernet 0/1\n    - interface Ethernet 0/2\n\n- name: Load new acl into device\n  community.network.slxos_config:\n    lines:\n      - seq 10 permit ip host 1.1.1.1 any log\n      - seq 20 permit ip host 2.2.2.2 any log\n      - seq 30 permit ip host 3.3.3.3 any log\n      - seq 40 permit ip host 4.4.4.4 any log\n      - seq 50 permit ip host 5.5.5.5 any log\n    parents: ip access-list extended test\n    before: no ip access-list extended test\n    match: exact\n\n- name: Check the running-config against master config\n  community.network.slxos_config:\n    diff_against: intended\n    intended_config: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: Check the startup-config against the running-config\n  community.network.slxos_config:\n    diff_against: startup\n    diff_ignore_lines:\n      - ntp clock .*\n\n- name: Save running to startup when modified\n  community.network.slxos_config:\n    save_when: modified\n\n- name: Configurable backup path\n  community.network.slxos_config:\n    lines: hostname {{ inventory_hostname }}\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.slxos_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote device that is running SLX-OS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against SLX-OS 17s.1.02",
      "options": {
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "['!config']",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from devices running Extreme SLX-OS"
    },
    "examples": "\n- name: Collect all facts from the device\n  community.network.slxos_facts:\n    gather_subset: all\n\n- name: Collect only the config and default facts\n  community.network.slxos_facts:\n    gather_subset:\n      - config\n\n- name: Do not collect hardware facts\n  community.network.slxos_facts:\n    gather_subset:\n      - \"!hardware\"\n"
  },
  "community.network.slxos_interface": {
    "doc": {
      "description": "This module provides declarative management of Interfaces on Extreme SLX-OS network devices.",
      "has_action": false,
      "notes": "Tested against SLX-OS 17s.1.02",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of Interfaces definitions.",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of Interface.",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Interface link status.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "Maximum size of transmit packet.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Interface.",
          "required": true,
          "suboptions": {}
        },
        "neighbors": {
          "aliases": [],
          "description": "Check the operational state of given interface C(name) for LLDP neighbor.\nThe following suboptions are available.",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "LLDP neighbor host for given interface C(name).",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "LLDP neighbor port to which given interface C(name) is connected.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rx_rate": {
          "aliases": [],
          "description": "Receiver rate in bits per second (bps).",
          "required": false,
          "suboptions": {}
        },
        "speed": {
          "aliases": [],
          "description": "Interface link speed.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the Interface configuration, C(up) means present and operationally up and C(down) means present and operationally C(down)",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "up",
            "down"
          ],
          "suboptions": {}
        },
        "tx_rate": {
          "aliases": [],
          "description": "Transmit rate in bits per second (bps).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Interfaces on Extreme SLX-OS network devices"
    },
    "examples": "\n- name: Configure interface\n  community.network.slxos_interface:\n      name: Ethernet 0/2\n      description: test-interface\n      speed: 1000\n      mtu: 9216\n\n- name: Remove interface\n  community.network.slxos_interface:\n    name: Loopback 9\n    state: absent\n\n- name: Make interface up\n  community.network.slxos_interface:\n    name: Ethernet 0/2\n    enabled: True\n\n- name: Make interface down\n  community.network.slxos_interface:\n    name: Ethernet 0/2\n    enabled: False\n\n- name: Check intent arguments\n  community.network.slxos_interface:\n    name: Ethernet 0/2\n    state: up\n    tx_rate: ge(0)\n    rx_rate: le(0)\n\n- name: Check neighbors intent arguments\n  community.network.slxos_interface:\n    name: Ethernet 0/41\n    neighbors:\n    - port: Ethernet 0/41\n      host: SLX\n\n- name: Config + intent\n  community.network.slxos_interface:\n    name: Ethernet 0/2\n    enabled: False\n    state: down\n\n- name: Add interface using aggregate\n  community.network.slxos_interface:\n    aggregate:\n    - { name: Ethernet 0/1, mtu: 1548, description: test-interface-1 }\n    - { name: Ethernet 0/2, mtu: 1548, description: test-interface-2 }\n    speed: 10000\n    state: present\n\n- name: Delete interface using aggregate\n  community.network.slxos_interface:\n    aggregate:\n    - name: Loopback 9\n    - name: Loopback 10\n    state: absent\n"
  },
  "community.network.slxos_l2_interface": {
    "doc": {
      "description": "This module provides declarative management of Layer-2 interface on Extreme slxos devices.",
      "has_action": false,
      "options": {
        "access_vlan": {
          "aliases": [],
          "description": "Configure given VLAN in access port. If C(mode=access), used as the access VLAN ID.",
          "required": false,
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [],
          "description": "List of Layer-2 interface definitions.",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode in which interface needs to be configured.",
          "default": "access",
          "required": false,
          "choices": [
            "access",
            "trunk"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "interface"
          ],
          "description": "Full name of the interface excluding any logical unit number, i.e. Ethernet 0/1.",
          "required": true,
          "suboptions": {}
        },
        "native_vlan": {
          "aliases": [],
          "description": "Native VLAN to be configured in trunk port. If C(mode=trunk), used as the trunk native VLAN ID.",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the Layer-2 Interface configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent",
            "unconfigured"
          ],
          "suboptions": {}
        },
        "trunk_allowed_vlans": {
          "aliases": [],
          "description": "List of allowed VLANs in a given trunk port. If C(mode=trunk), these are the only VLANs that will be configured on the trunk, i.e. \"2-10,15\".",
          "required": false,
          "suboptions": {}
        },
        "trunk_vlans": {
          "aliases": [],
          "description": "List of VLANs to be configured in trunk port. If C(mode=trunk), used as the VLAN range to ADD or REMOVE from the trunk.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Layer-2 interface on Extreme Networks SLX-OS devices."
    },
    "examples": "\n- name: Ensure Ethernet 0/5 is in its default l2 interface state\n  community.network.slxos_l2_interface:\n    name: Ethernet 0/5\n    state: unconfigured\n\n- name: Ensure Ethernet 0/5 is configured for access vlan 20\n  community.network.slxos_l2_interface:\n    name: Ethernet 0/5\n    mode: access\n    access_vlan: 20\n\n- name: Ensure Ethernet 0/5 only has vlans 5-10 as trunk vlans\n  community.network.slxos_l2_interface:\n    name: Ethernet 0/5\n    mode: trunk\n    native_vlan: 10\n    trunk_vlans: 5-10\n\n- name: Ensure Ethernet 0/5 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)\n  community.network.slxos_l2_interface:\n    name: Ethernet 0/5\n    mode: trunk\n    native_vlan: 10\n    trunk_vlans: 2-50\n\n- name: Ensure these VLANs are not being tagged on the trunk\n  community.network.slxos_l2_interface:\n    name: Ethernet 0/5\n    mode: trunk\n    trunk_vlans: 51-4094\n    state: absent\n"
  },
  "community.network.slxos_l3_interface": {
    "doc": {
      "description": "This module provides declarative management of L3 interfaces on slxos network devices.",
      "has_action": false,
      "notes": "Tested against slxos 15.2",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of L3 interfaces definitions. Each of the entry in aggregate list should define name of interface C(name) and a optional C(ipv4) or C(ipv6) address.",
          "required": false,
          "suboptions": {}
        },
        "ipv4": {
          "aliases": [],
          "description": "IPv4 address to be set for the L3 interface mentioned in I(name) option. The address format is <ipv4 address>/<mask>, the mask is number in range 0-32 eg. 192.168.0.1/24",
          "required": false,
          "suboptions": {}
        },
        "ipv6": {
          "aliases": [],
          "description": "IPv6 address to be set for the L3 interface mentioned in I(name) option. The address format is <ipv6 address>/<mask>, the mask is number in range 0-128 eg. fd5d:12c9:2201:1::1/64",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the L3 interface to be configured eg. Ethernet 0/2",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the L3 interface configuration. It indicates if the configuration should be present or absent on remote device.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage L3 interfaces on Extreme Networks SLX-OS network devices."
    },
    "examples": "\n- name: Remove Ethernet 0/3 IPv4 and IPv6 address\n  community.network.slxos_l3_interface:\n    name: Ethernet 0/3\n    state: absent\n\n- name: Set Ethernet 0/3 IPv4 address\n  community.network.slxos_l3_interface:\n    name: Ethernet 0/3\n    ipv4: 192.168.0.1/24\n\n- name: Set Ethernet 0/3 IPv6 address\n  community.network.slxos_l3_interface:\n    name: Ethernet 0/3\n    ipv6: \"fd5d:12c9:2201:1::1/64\"\n\n- name: Set IP addresses on aggregate\n  community.network.slxos_l3_interface:\n    aggregate:\n      - { name: Ethernet 0/3, ipv4: 192.168.2.10/24 }\n      - { name: Ethernet 0/3, ipv4: 192.168.3.10/24, ipv6: \"fd5d:12c9:2201:1::1/64\" }\n\n- name: Remove IP addresses on aggregate\n  community.network.slxos_l3_interface:\n    aggregate:\n      - { name: Ethernet 0/3, ipv4: 192.168.2.10/24 }\n      - { name: Ethernet 0/3, ipv4: 192.168.3.10/24, ipv6: \"fd5d:12c9:2201:1::1/64\" }\n    state: absent\n"
  },
  "community.network.slxos_linkagg": {
    "doc": {
      "description": "This module provides declarative management of link aggregation groups on Extreme Networks SLX-OS network devices.",
      "has_action": false,
      "notes": "Tested against SLX-OS 17s.1.02",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of link aggregation definitions.",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Channel-group number for the port-channel Link aggregation group. Range 1-1024.",
          "required": false,
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "List of members of the link aggregation group.",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode of the link aggregation group.",
          "required": false,
          "choices": [
            "active",
            "on",
            "passive"
          ],
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Purge links not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the link aggregation group.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage link aggregation groups on Extreme Networks SLX-OS network devices"
    },
    "examples": "\n- name: Create link aggregation group\n  community.network.slxos_linkagg:\n    group: 10\n    state: present\n\n- name: Delete link aggregation group\n  community.network.slxos_linkagg:\n    group: 10\n    state: absent\n\n- name: Set link aggregation group to members\n  community.network.slxos_linkagg:\n    group: 200\n    mode: active\n    members:\n      - Ethernet 0/1\n      - Ethernet 0/2\n\n- name: Remove link aggregation group from Ethernet 0/1\n  community.network.slxos_linkagg:\n    group: 200\n    mode: active\n    members:\n      - Ethernet 0/1\n\n- name: Create aggregate of linkagg definitions\n  community.network.slxos_linkagg:\n    aggregate:\n      - { group: 3, mode: on, members: [Ethernet 0/1] }\n      - { group: 100, mode: passive, members: [Ethernet 0/2] }\n"
  },
  "community.network.slxos_lldp": {
    "doc": {
      "description": "This module provides declarative management of LLDP service on Extreme SLX-OS network devices.",
      "has_action": false,
      "notes": "Tested against SLX-OS 17s.1.02",
      "options": {
        "state": {
          "aliases": [],
          "description": "State of the LLDP configuration. If value is I(present) lldp will be enabled else if it is I(absent) it will be disabled.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage LLDP configuration on Extreme Networks SLX-OS network devices."
    },
    "examples": "\n- name: Enable LLDP service\n  community.network.slxos_lldp:\n    state: present\n\n- name: Disable LLDP service\n  community.network.slxos_lldp:\n    state: absent\n"
  },
  "community.network.slxos_vlan": {
    "doc": {
      "description": "This module provides declarative management of VLANs on Extreme SLX-OS network devices.",
      "has_action": false,
      "notes": "Tested against SLX-OS 18r.1.00",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of VLANs definitions.",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Delay the play should wait to check for declarative intent params values.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of interfaces that should be associated to the VLAN.",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VLAN.",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Purge VLANs not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the VLAN configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "ID of the VLAN. Range 1-4094.",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage VLANs on Extreme Networks SLX-OS network devices"
    },
    "examples": "\n- name: Create vlan\n  community.network.slxos_vlan:\n    vlan_id: 100\n    name: test-vlan\n    state: present\n- name: Add interfaces to VLAN\n  community.network.slxos_vlan:\n    vlan_id: 100\n    interfaces:\n      - Ethernet 0/1\n      - Ethernet 0/2\n- name: Delete vlan\n  community.network.slxos_vlan:\n    vlan_id: 100\n    state: absent\n"
  },
  "community.network.sros_command": {
    "doc": {
      "description": "Sends arbitrary commands to an SR OS node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(community.network.sros_config) to configure SR OS devices.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Nokia SR OS Network devices see U(https://www.ansible.com/ansible-nokia).",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote SR OS device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [
            "waitfor"
          ],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run commands on remote devices running Nokia SR OS"
    },
    "examples": "\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n---\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: admin\n    password: admin\n    transport: cli\n\n---\ntasks:\n  - name: Run show version on remote devices\n    community.network.sros_command:\n      commands: show version\n      provider: \"{{ cli }}\"\n\n  - name: Run show version and check to see if output contains sros\n    community.network.sros_command:\n      commands: show version\n      wait_for: result[0] contains sros\n      provider: \"{{ cli }}\"\n\n  - name: Run multiple commands on remote nodes\n    community.network.sros_command:\n      commands:\n        - show version\n        - show port detail\n      provider: \"{{ cli }}\"\n\n  - name: Run multiple commands and evaluate the output\n    community.network.sros_command:\n      commands:\n        - show version\n        - show port detail\n      wait_for:\n        - result[0] contains TiMOS-B-14.0.R4\n      provider: \"{{ cli }}\"\n"
  },
  "community.network.sros_config": {
    "doc": {
      "description": "Nokia SR OS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with SR OS configuration sections in a deterministic way.",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Nokia SR OS Network devices see U(https://www.ansible.com/ansible-nokia).",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The C(config) argument allows the playbook designer to supply the base configuration to be used to validate configuration changes necessary.  If this argument is provided, the module will not download the running-config from the remote node.",
          "required": false,
          "suboptions": {}
        },
        "defaults": {
          "aliases": [
            "detail"
          ],
          "description": "This argument specifies whether or not to collect all defaults when getting the remote device running config.  When enabled, the module will get the current config by issuing the command C(admin display-config detail).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "The force argument instructs the module to not consider the current devices running-config.  When set to true, this will cause the module to push the contents of I(src) into the device without first checking if already configured.\nNote this argument should be considered deprecated.  To achieve the equivalent, set the C(match=none) which is idempotent.  This argument will be removed in a future release.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.  The I(lines) argument only supports current context lines.  See EXAMPLES",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line. If match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "none"
          ],
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "save": {
          "aliases": [],
          "description": "The C(save) argument instructs the module to save the running- config to the startup-config at the conclusion of the module running.  If check mode is specified, this argument is ignored.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Nokia SR OS device configuration"
    },
    "examples": "\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n---\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: admin\n    password: admin\n    transport: cli\n\n---\n- name: Enable rollback location\n  community.network.sros_config:\n    lines: configure system rollback rollback-location \"cf3:/ansible\"\n    provider: \"{{ cli }}\"\n\n- name: Set system name to {{ inventory_hostname }} using one line\n  community.network.sros_config:\n    lines:\n        - configure system name \"{{ inventory_hostname }}\"\n    provider: \"{{ cli }}\"\n\n- name: Set system name to {{ inventory_hostname }} using parents\n  community.network.sros_config:\n    lines:\n        - 'name \"{{ inventory_hostname }}\"'\n    parents:\n        - configure\n        - system\n    provider: \"{{ cli }}\"\n    backup: yes\n\n- name: Load config from file\n  community.network.sros_config:\n      src: \"{{ inventory_hostname }}.cfg\"\n      provider: \"{{ cli }}\"\n      save: yes\n\n- name: Invalid use of lines\n  community.network.sros_config:\n    lines:\n      - service\n      -     vpls 1000 customer foo 1 create\n      -         description \"invalid lines example\"\n    provider: \"{{ cli }}\"\n\n- name: Valid use of lines\n  community.network.sros_config:\n    lines:\n      - description \"invalid lines example\"\n    parents:\n      - service\n      - vpls 1000 customer foo 1 create\n    provider: \"{{ cli }}\"\n\n- name: Configurable backup path\n  community.network.sros_config:\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.sros_rollback": {
    "doc": {
      "description": "Configure the rollback feature on remote Nokia devices running the SR OS operating system.  this module provides a stateful implementation for managing the configuration of the rollback feature",
      "has_action": false,
      "notes": "For more information on using Ansible to manage Nokia SR OS Network devices see U(https://www.ansible.com/ansible-nokia).",
      "options": {
        "local_max_checkpoints": {
          "aliases": [],
          "description": "The I(local_max_checkpoints) argument configures the maximum number of rollback files that can be saved on the devices local compact flash.  Valid values for this argument are in the range of 1 to 50",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.",
              "default": "22",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "remote_max_checkpoints": {
          "aliases": [],
          "description": "The I(remote_max_checkpoints) argument configures the maximum number of rollback files that can be transferred and saved to a remote location.  Valid values for this argument are in the range of 1 to 50",
          "required": false,
          "suboptions": {}
        },
        "rescue_location": {
          "aliases": [],
          "description": "The I(rescue_location) specifies the location of the rescue file.  This argument supports any valid local or remote URL as specified in SR OS",
          "required": false,
          "suboptions": {}
        },
        "rollback_location": {
          "aliases": [],
          "description": "The I(rollback_location) specifies the location and filename of the rollback checkpoint files.   This argument supports any valid local or remote URL as specified in SR OS",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The I(state) argument specifies the state of the configuration entries in the devices active configuration.  When the state value is set to C(true) the configuration is present in the devices active configuration.  When the state value is set to C(false) the configuration values are removed from the devices active configuration.",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Configure Nokia SR OS rollback"
    },
    "examples": "\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n---\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: admin\n    password: admin\n    transport: cli\n\n---\n- name: Configure rollback location\n  community.network.sros_rollback:\n    rollback_location: \"cb3:/ansible\"\n    provider: \"{{ cli }}\"\n\n- name: Remove all rollback configuration\n  community.network.sros_rollback:\n    state: absent\n    provider: \"{{ cli }}\"\n"
  },
  "community.network.vdirect_commit": {
    "doc": {
      "description": "Commits pending configuration changes on one or more Radware devices via vDirect server.\nFor Alteon ADC device, apply, sync and save actions will be performed by default. Skipping of an action is possible by explicit parameter specifying.\nFor Alteon VX Container device, no sync operation will be performed since sync action is only relevant for Alteon ADC devices.\nFor DefensePro and AppWall devices, a bulk commit action will be performed. Explicit apply, sync and save actions specifying is not relevant.",
      "has_action": false,
      "notes": "Requires the Radware vdirect-client Python package on the host. This is as easy as C(pip install vdirect-client)",
      "options": {
        "apply": {
          "aliases": [],
          "description": "If C(no), apply action will not be performed. Relevant for ADC devices only.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "devices": {
          "aliases": [],
          "description": "List of Radware Alteon device names for commit operations.",
          "required": true,
          "suboptions": {}
        },
        "save": {
          "aliases": [],
          "description": "If C(no), save action will not be performed. Relevant for ADC devices only.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sync": {
          "aliases": [],
          "description": "If C(no), sync action will not be performed. Relevant for ADC devices only.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "vdirect_validate_certs"
          ],
          "description": "If C(no), SSL certificates will not be validated,\nmay be set as C(VDIRECT_VALIDATE_CERTS) or C(VDIRECT_VERIFY) environment variable.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vdirect_http_port": {
          "aliases": [],
          "description": "vDirect server HTTP port number, may be set as C(VDIRECT_HTTP_PORT) environment variable.",
          "default": "2188",
          "required": false,
          "suboptions": {}
        },
        "vdirect_https_port": {
          "aliases": [],
          "description": "vDirect server HTTPS port number, may be set as C(VDIRECT_HTTPS_PORT) environment variable.",
          "default": "2189",
          "required": false,
          "suboptions": {}
        },
        "vdirect_ip": {
          "aliases": [],
          "description": "Primary vDirect server IP address, may be set as C(VDIRECT_IP) environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_password": {
          "aliases": [],
          "description": "vDirect server password, may be set as C(VDIRECT_PASSWORD) environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_secondary_ip": {
          "aliases": [],
          "description": "Secondary vDirect server IP address, may be set as C(VDIRECT_SECONDARY_IP) environment variable.",
          "required": false,
          "suboptions": {}
        },
        "vdirect_timeout": {
          "aliases": [],
          "description": "Amount of time to wait for async operation completion [seconds],\nmay be set as C(VDIRECT_TIMEOUT) environment variable.",
          "default": "60",
          "required": false,
          "suboptions": {}
        },
        "vdirect_use_ssl": {
          "aliases": [],
          "description": "If C(no), an HTTP connection will be used instead of the default HTTPS connection,\nmay be set as C(VDIRECT_HTTPS) or C(VDIRECT_USE_SSL) environment variable.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vdirect_user": {
          "aliases": [],
          "description": "vDirect server username, may be set as C(VDIRECT_USER) environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_wait": {
          "aliases": [],
          "description": "Wait for async operation to complete, may be set as C(VDIRECT_WAIT) environment variable.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "vdirect-client >= 4.9.0-post4"
      ],
      "short_description": "Commits pending configuration changes on Radware devices"
    },
    "examples": "\n- name: Commit\n  community.network.vdirect_commit:\n      vdirect_ip: 10.10.10.10\n      vdirect_user: vDirect\n      vdirect_password: radware\n      devices: ['dev1', 'dev2']\n      sync: no\n"
  },
  "community.network.vdirect_file": {
    "doc": {
      "description": "Uploads a new or updates an existing configuration template or workflow template into the Radware vDirect server. All parameters may be set as environment variables.",
      "has_action": false,
      "notes": "Requires the Radware vdirect-client Python package on the host. This is as easy as C(pip install vdirect-client)",
      "options": {
        "file_name": {
          "aliases": [],
          "description": "vDirect runnable file name to be uploaded.\nMay be velocity configuration template (.vm) or workflow template zip file (.zip).",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "vdirect_validate_certs"
          ],
          "description": "If C(no), SSL certificates will not be validated,\nmay be set as VDIRECT_VALIDATE_CERTS or VDIRECT_VERIFY environment variable.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vdirect_http_port": {
          "aliases": [],
          "description": "vDirect server HTTP port number, may be set as VDIRECT_HTTP_PORT environment variable.",
          "default": "2188",
          "required": false,
          "suboptions": {}
        },
        "vdirect_https_port": {
          "aliases": [],
          "description": "vDirect server HTTPS port number, may be set as VDIRECT_HTTPS_PORT environment variable.",
          "default": "2189",
          "required": false,
          "suboptions": {}
        },
        "vdirect_ip": {
          "aliases": [],
          "description": "Primary vDirect server IP address, may be set as VDIRECT_IP environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_password": {
          "aliases": [],
          "description": "vDirect server password, may be set as VDIRECT_PASSWORD environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_secondary_ip": {
          "aliases": [],
          "description": "Secondary vDirect server IP address, may be set as VDIRECT_SECONDARY_IP environment variable.",
          "required": false,
          "suboptions": {}
        },
        "vdirect_timeout": {
          "aliases": [],
          "description": "Amount of time to wait for async operation completion [seconds],\nmay be set as VDIRECT_TIMEOUT environment variable.",
          "default": "60",
          "required": false,
          "suboptions": {}
        },
        "vdirect_use_ssl": {
          "aliases": [],
          "description": "If C(no), an HTTP connection will be used instead of the default HTTPS connection,\nmay be set as VDIRECT_HTTPS or VDIRECT_USE_SSL environment variable.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vdirect_user": {
          "aliases": [],
          "description": "vDirect server username, may be set as VDIRECT_USER environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_wait": {
          "aliases": [],
          "description": "Wait for async operation to complete, may be set as VDIRECT_WAIT environment variable.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "vdirect-client >= 4.9.0-post4"
      ],
      "short_description": "Uploads a new or updates an existing runnable file into Radware vDirect server"
    },
    "examples": "\n- name: Upload a new or updates an existing runnable file\n  community.network.vdirect_file:\n      vdirect_ip: 10.10.10.10\n      vdirect_user: vDirect\n      vdirect_password: radware\n      file_name: /tmp/get_vlans.vm\n"
  },
  "community.network.vdirect_runnable": {
    "doc": {
      "description": "Runs configuration templates, creates workflows and runs workflow actions in Radware vDirect server.",
      "has_action": false,
      "notes": "Requires the Radware vdirect-client Python package on the host. This is as easy as C(pip install vdirect-client)",
      "options": {
        "action_name": {
          "aliases": [],
          "description": "Workflow action name to run.\nRequired if I(runnable_type=Workflow).",
          "required": false,
          "suboptions": {}
        },
        "parameters": {
          "aliases": [],
          "description": "Action parameters dictionary. In case of C(ConfigurationTemplate) runnable type,\nthe device connection details should always be passed as a parameter.",
          "required": false,
          "suboptions": {}
        },
        "runnable_name": {
          "aliases": [],
          "description": "vDirect runnable name to run.\nMay be configuration template name, workflow template name or workflow instance name.",
          "required": true,
          "suboptions": {}
        },
        "runnable_type": {
          "aliases": [],
          "description": "vDirect runnable type.",
          "required": true,
          "choices": [
            "ConfigurationTemplate",
            "Workflow",
            "WorkflowTemplate",
            "Plugin"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "vdirect_validate_certs"
          ],
          "description": "If C(no), SSL certificates will not be validated,\nmay be set as C(VDIRECT_VALIDATE_CERTS) or C(VDIRECT_VERIFY) environment variable.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vdirect_http_port": {
          "aliases": [],
          "description": "vDirect server HTTP port number, may be set as C(VDIRECT_HTTP_PORT) environment variable.",
          "default": "2188",
          "required": false,
          "suboptions": {}
        },
        "vdirect_https_port": {
          "aliases": [],
          "description": "vDirect server HTTPS port number, may be set as C(VDIRECT_HTTPS_PORT) environment variable.",
          "default": "2189",
          "required": false,
          "suboptions": {}
        },
        "vdirect_ip": {
          "aliases": [],
          "description": "Primary vDirect server IP address, may be set as C(VDIRECT_IP) environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_password": {
          "aliases": [],
          "description": "vDirect server password, may be set as C(VDIRECT_PASSWORD) environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_secondary_ip": {
          "aliases": [],
          "description": "Secondary vDirect server IP address, may be set as C(VDIRECT_SECONDARY_IP) environment variable.",
          "required": false,
          "suboptions": {}
        },
        "vdirect_timeout": {
          "aliases": [],
          "description": "Amount of time to wait for async operation completion [seconds],\nmay be set as C(VDIRECT_TIMEOUT) environment variable.",
          "default": "60",
          "required": false,
          "suboptions": {}
        },
        "vdirect_use_ssl": {
          "aliases": [],
          "description": "If C(no), an HTTP connection will be used instead of the default HTTPS connection,\nmay be set as C(VDIRECT_HTTPS) or C(VDIRECT_USE_SSL) environment variable.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vdirect_user": {
          "aliases": [],
          "description": "vDirect server username, may be set as C(VDIRECT_USER) environment variable.",
          "required": true,
          "suboptions": {}
        },
        "vdirect_wait": {
          "aliases": [],
          "description": "Wait for async operation to complete, may be set as C(VDIRECT_WAIT) environment variable.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "vdirect-client >= 4.9.0-post4"
      ],
      "short_description": "Runs templates and workflow actions in Radware vDirect server"
    },
    "examples": "\n- name: Run the module from Ansible playbook\n  community.network.vdirect_runnable:\n      vdirect_ip: 10.10.10.10\n      vdirect_user: vDirect\n      vdirect_password: radware\n      runnable_type: ConfigurationTemplate\n      runnable_name: get_vlans\n      parameters: {'vlans_needed':1,'adc':[{'type':'Adc','name':'adc-1'}]}\n"
  },
  "community.network.voss_command": {
    "doc": {
      "description": "Sends arbitrary commands to an Extreme VSP device running VOSS, and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(community.network.voss_config) to configure VOSS devices.",
      "has_action": false,
      "notes": "Tested against VOSS 7.0.0",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to send to the remote VOSS device. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired. If a command sent to the device requires answering a prompt, it is possible to pass a dict containing I(command), I(answer) and I(prompt). Common answers are 'y' or \"\\r\" (carriage return, must be double quotes). See examples.",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.",
          "default": "1",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.",
          "default": "10",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [],
          "description": "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run commands on remote devices running Extreme VOSS"
    },
    "examples": "\ntasks:\n  - name: Run show sys software on remote devices\n    community.network.voss_command:\n      commands: show sys software\n\n  - name: Run show sys software and check to see if output contains VOSS\n    community.network.voss_command:\n      commands: show sys software\n      wait_for: result[0] contains VOSS\n\n  - name: Run multiple commands on remote nodes\n    community.network.voss_command:\n      commands:\n        - show sys software\n        - show interfaces vlan\n\n  - name: Run multiple commands and evaluate the output\n    community.network.voss_command:\n      commands:\n        - show sys software\n        - show interfaces vlan\n      wait_for:\n        - result[0] contains Version\n        - result[1] contains Basic\n\n  - name: Run command that requires answering a prompt\n    community.network.voss_command:\n      commands:\n        - command: 'reset'\n          prompt: 'Are you sure you want to reset the switch? (y/n)'\n          answer: 'y'\n"
  },
  "community.network.voss_config": {
    "doc": {
      "description": "Extreme VOSS configurations use a simple flat text file syntax. This module provides an implementation for working with EXOS configuration lines in a deterministic way.",
      "has_action": false,
      "notes": "Tested against VOSS 7.0.0\nAbbreviated commands are NOT idempotent, see L(Network FAQ,../network/user_guide/faq.html#why-do-the-config-modules-always-return-changed-true-with-abbreviated-commands).",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made. Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory or role root directory, if playbook is part of an ansible role. If the directory does not exist, it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made. This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "required": false,
          "suboptions": {}
        },
        "defaults": {
          "aliases": [],
          "description": "This argument specifies whether or not to collect all defaults when getting the remote device running config. When enabled, the module will get the current config by issuing the command C(show running-config verbose).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "diff_against": {
          "aliases": [],
          "description": "When using the C(ansible-playbook --diff) command line argument the module can generate diffs against different sources.\nWhen this option is configure as I(startup), the module will return the diff of the running-config against the startup-config.\nWhen this option is configured as I(intended), the module will return the diff of the running-config against the configuration provided in the C(intended_config) argument.\nWhen this option is configured as I(running), the module will return the before and after diff of the running-config with respect to any changes made to the device configuration.",
          "required": false,
          "choices": [
            "running",
            "startup",
            "intended"
          ],
          "suboptions": {}
        },
        "diff_ignore_lines": {
          "aliases": [],
          "description": "Use this argument to specify one or more lines that should be ignored during the diff. This is used for lines in the configuration that are automatically updated by the system. This argument takes a list of regular expressions or exact line matches.",
          "required": false,
          "suboptions": {}
        },
        "intended_config": {
          "aliases": [],
          "description": "The C(intended_config) provides the master configuration that the node should conform to and is used to check the final running-config against. This argument will not modify any settings on the remote device and is strictly used to check the compliance of the current device's configuration against. When specifying this argument, the task should also modify the C(diff_against) value and set it to I(intended).",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section. The commands must be the exact same commands as found in the device running-config. Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The parent line that uniquely identifies the section the commands should be checked against. If this argument is omitted, the commands are checked against the set of top level or global commands. Note that VOSS configurations only support one level of nested commands.",
          "required": false,
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.",
          "default": "line",
          "required": false,
          "choices": [
            "line",
            "block"
          ],
          "suboptions": {}
        },
        "running_config": {
          "aliases": [
            "config"
          ],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source. There are times when it is not desirable to have the task get the current running-config for every task in a playbook. The I(running_config) argument allows the implementer to pass in the configuration to use as the base config for comparison.",
          "required": false,
          "suboptions": {}
        },
        "save_when": {
          "aliases": [],
          "description": "When changes are made to the device running-configuration, the changes are not copied to non-volatile storage by default. Using this argument will change that behavior. If the argument is set to I(always), then the running-config will always be saved and the I(modified) flag will always be set to True. If the argument is set to I(modified), then the running-config will only be saved if it has changed since the last save to startup-config. If the argument is set to I(never), the running-config will never be saved. If the argument is set to I(changed), then the running-config will only be saved if the task has made a change.",
          "default": "never",
          "required": false,
          "choices": [
            "always",
            "never",
            "modified",
            "changed"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the source path to the file that contains the configuration or configuration template to load. The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory. This argument is mutually exclusive with I(lines), I(parents).",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Extreme VOSS configuration sections"
    },
    "examples": "\n- name: Configure system name\n  community.network.voss_config:\n    lines: prompt \"{{ inventory_hostname }}\"\n\n- name: Configure interface settings\n  community.network.voss_config:\n    lines:\n      - name \"ServerA\"\n    backup: yes\n    parents: interface GigabitEthernet 1/1\n\n- name: Check the running-config against master config\n  community.network.voss_config:\n    diff_against: intended\n    intended_config: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: Check the startup-config against the running-config\n  community.network.voss_config:\n    diff_against: startup\n    diff_ignore_lines:\n      - qos queue-profile .*\n\n- name: Save running to startup when modified\n  community.network.voss_config:\n    save_when: modified\n\n- name: Configurable backup path\n  community.network.voss_config:\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "community.network.voss_facts": {
    "doc": {
      "description": "Collects a base set of device facts from a remote device that is running VOSS. This module prepends all of the base network fact keys with C(ansible_net_<fact>). The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": false,
      "notes": "Tested against VOSS 7.0.0",
      "options": {
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Collect facts from remote devices running Extreme VOSS"
    },
    "examples": "\n- name: Collect all facts from the device\n  community.network.voss_facts:\n    gather_subset: all\n\n- name: Collect only the config and default facts\n  community.network.voss_facts:\n    gather_subset:\n      - config\n\n- name: Do not collect hardware facts\n  community.network.voss_facts:\n    gather_subset:\n      - \"!hardware\"\n"
  }
}