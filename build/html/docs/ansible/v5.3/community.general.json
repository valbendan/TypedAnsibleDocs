{
  "community.general.aerospike_migrations": {
    "doc": {
      "description": "This can be used to check for migrations in a cluster. This makes it easy to do a rolling upgrade/update on Aerospike nodes.\nIf waiting for migrations is not desired, simply just poll until port 3000 if available or asinfo -v status returns ok",
      "has_action": false,
      "options": {
        "connect_timeout": {
          "aliases": [],
          "description": "How long to try to connect before giving up (milliseconds)",
          "default": "1000",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "consecutive_good_checks": {
          "aliases": [],
          "description": "How many times should the cluster report \"no migrations\" consecutively before returning OK back to ansible?",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "fail_on_cluster_change": {
          "aliases": [],
          "description": "Fail if the cluster key changes if something else is changing the cluster, we may want to fail",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Which host do we use as seed for info connection",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_only": {
          "aliases": [],
          "description": "Do you wish to only check for migrations on the local node before returning, or do you want all nodes in the cluster to finish before returning?",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "migrate_rx_key": {
          "aliases": [],
          "description": "The metric key used to determine if we have rx migrations remaining. Changeable due to backwards compatibility.",
          "default": "migrate_rx_partitions_remaining",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "migrate_tx_key": {
          "aliases": [],
          "description": "The metric key used to determine if we have tx migrations remaining. Changeable due to backwards compatibility.",
          "default": "migrate_tx_partitions_remaining",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "min_cluster_size": {
          "aliases": [],
          "description": "Check will return bad until cluster size is met or until tries is exhausted",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Which port to connect to Aerospike on (service port)",
          "default": "3000",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sleep_between_checks": {
          "aliases": [],
          "description": "How long to sleep between each check (seconds).",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "target_cluster_size": {
          "aliases": [],
          "description": "When all aerospike builds in the cluster are greater than version 4.3, then the C(cluster-stable) info command will be used. Inside this command, you can optionally specify what the target cluster size is - but it is not necessary. You can still rely on min_cluster_size if you don't want to use this option.\nIf this option is specified on a cluster that has at least 1 host <4.3 then it will be ignored until the min version reaches 4.3.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tries_limit": {
          "aliases": [],
          "description": "How many times do we poll before giving up and failing?",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Check or wait for migrations between nodes"
    },
    "examples": "\n# check for migrations on local node\n- name: Wait for migrations on local node before proceeding\n  community.general.aerospike_migrations:\n    host: \"localhost\"\n    connect_timeout: 2000\n    consecutive_good_checks: 5\n    sleep_between_checks: 15\n    tries_limit: 600\n    local_only: False\n\n# example playbook:\n- name: Upgrade aerospike\n  hosts: all\n  become: true\n  serial: 1\n  tasks:\n    - name: Install dependencies\n      ansible.builtin.apt:\n        name:\n            - python\n            - python-pip\n            - python-setuptools\n        state: latest\n    - name: Setup aerospike\n      ansible.builtin.pip:\n          name: aerospike\n# check for migrations every (sleep_between_checks)\n# If at least (consecutive_good_checks) checks come back OK in a row, then return OK.\n# Will exit if any exception, which can be caused by bad nodes,\n# nodes not returning data, or other reasons.\n# Maximum runtime before giving up in this case will be:\n# Tries Limit * Sleep Between Checks * delay * retries\n    - name: Wait for aerospike migrations\n      community.general.aerospike_migrations:\n          local_only: True\n          sleep_between_checks: 1\n          tries_limit: 5\n          consecutive_good_checks: 3\n          fail_on_cluster_change: true\n          min_cluster_size: 3\n          target_cluster_size: 4\n      register: migrations_check\n      until: migrations_check is succeeded\n      changed_when: false\n      delay: 60\n      retries: 120\n    - name: Another thing\n      ansible.builtin.shell: |\n          echo foo\n    - name: Reboot\n      ansible.builtin.reboot:\n"
  },
  "community.general.airbrake_deployment": {
    "doc": {
      "description": "Notify airbrake about app deployments (see U(https://airbrake.io/docs/api/#deploys-v4)).",
      "has_action": false,
      "options": {
        "environment": {
          "aliases": [],
          "description": "The airbrake environment name, typically 'production', 'staging', etc.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "Airbrake PROJECT_ID",
          "type": "str",
          "required": true,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "project_key": {
          "aliases": [],
          "description": "Airbrake PROJECT_KEY.",
          "type": "str",
          "required": true,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "URL of the project repository",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "revision": {
          "aliases": [],
          "description": "A hash, number, tag, or other identifier showing what revision from version control was deployed",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Optional URL to submit the notification to. Use to send notifications to Airbrake-compliant tools like Errbit.",
          "default": "https://api.airbrake.io/api/v4/projects/",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The username of the person doing the deployment",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "A string identifying what version was deployed",
          "type": "str",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        }
      },
      "requirements": [],
      "short_description": "Notify airbrake about app deployments"
    },
    "examples": "\n- name: Notify airbrake about an app deployment\n  community.general.airbrake_deployment:\n    project_id: '12345'\n    project_key: 'AAAAAA'\n    environment: staging\n    user: ansible\n    revision: '4.2'\n\n- name: Notify airbrake about an app deployment, using git hash as revision\n  community.general.airbrake_deployment:\n    project_id: '12345'\n    project_key: 'AAAAAA'\n    environment: staging\n    user: ansible\n    revision: 'e54dd3a01f2c421b558ef33b5f79db936e2dcf15'\n    version: '0.2.0'\n"
  },
  "community.general.aix_devices": {
    "doc": {
      "description": "This module discovers, defines, removes and modifies attributes of AIX devices.",
      "has_action": false,
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A list of device attributes.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "The name of the device.\nC(all) is valid to rescan C(available) all devices (AIX cfgmgr command).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Forces action.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "recursive": {
          "aliases": [],
          "description": "Removes or defines a device and children devices.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Controls the device state.\nC(available) (alias C(present)) rescan a specific device or all devices (when C(device) is not specified).\nC(removed) (alias C(absent) removes a device.\nC(defined) changes device to Defined state.",
          "default": "available",
          "type": "str",
          "required": false,
          "choices": [
            "available",
            "defined",
            "removed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages AIX devices"
    },
    "examples": "\n- name: Scan new devices\n  community.general.aix_devices:\n    device: all\n    state: available\n\n- name: Scan new virtual devices (vio0)\n  community.general.aix_devices:\n    device: vio0\n    state: available\n\n- name: Removing IP alias to en0\n  community.general.aix_devices:\n    device: en0\n    attributes:\n      delalias4: 10.0.0.100,255.255.255.0\n\n- name: Removes ent2\n  community.general.aix_devices:\n    device: ent2\n    state: removed\n\n- name: Put device en2 in Defined\n  community.general.aix_devices:\n    device: en2\n    state: defined\n\n- name: Removes ent4 (inexistent).\n  community.general.aix_devices:\n    device: ent4\n    state: removed\n\n- name: Put device en4 in Defined (inexistent)\n  community.general.aix_devices:\n    device: en4\n    state: defined\n\n- name: Put vscsi1 and children devices in Defined state.\n  community.general.aix_devices:\n    device: vscsi1\n    recursive: yes\n    state: defined\n\n- name: Removes vscsi1 and children devices.\n  community.general.aix_devices:\n    device: vscsi1\n    recursive: yes\n    state: removed\n\n- name: Changes en1 mtu to 9000 and disables arp.\n  community.general.aix_devices:\n    device: en1\n    attributes:\n      mtu: 900\n      arp: off\n    state: available\n\n- name: Configure IP, netmask and set en1 up.\n  community.general.aix_devices:\n    device: en1\n    attributes:\n      netaddr: 192.168.0.100\n      netmask: 255.255.255.0\n      state: up\n    state: available\n\n- name: Adding IP alias to en0\n  community.general.aix_devices:\n    device: en0\n    attributes:\n      alias4: 10.0.0.100,255.255.255.0\n    state: available\n"
  },
  "community.general.aix_filesystem": {
    "doc": {
      "description": "This module creates, removes, mount and unmount LVM and NFS file system for AIX using C(/etc/filesystems).\nFor LVM file systems is possible to resize a file system.",
      "has_action": false,
      "notes": "For more C(attributes), please check \"crfs\" AIX manual.",
      "options": {
        "account_subsystem": {
          "aliases": [],
          "description": "Specifies whether the file system is to be processed by the accounting subsystem.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [],
          "description": "Specifies attributes for files system separated by comma.",
          "default": "agblksize='4096',isnapshot='no'",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auto_mount": {
          "aliases": [],
          "description": "File system is automatically mounted at system restart.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "Logical volume (LV) device name or remote export device to create a NFS file system.\nIt is used to create a file system on an already existing logical volume or the exported NFS file system.\nIf not mentioned a new logical volume name will be created following AIX standards (LVM).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filesystem": {
          "aliases": [],
          "description": "Specifies the mount point, which is the directory where the file system will be mounted.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fs_type": {
          "aliases": [],
          "description": "Specifies the virtual file system type.",
          "default": "jfs2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mount_group": {
          "aliases": [],
          "description": "Specifies the mount group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nfs_server": {
          "aliases": [],
          "description": "Specifies a Network File System (NFS) server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "permissions": {
          "aliases": [],
          "description": "Set file system permissions. C(rw) (read-write) or C(ro) (read-only).",
          "default": "rw",
          "type": "str",
          "required": false,
          "choices": [
            "ro",
            "rw"
          ],
          "suboptions": {}
        },
        "rm_mount_point": {
          "aliases": [],
          "description": "Removes the mount point directory when used with state C(absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Specifies the file system size.\nFor already C(present) it will be resized.\n512-byte blocks, Megabytes or Gigabytes. If the value has M specified it will be in Megabytes. If the value has G specified it will be in Gigabytes.\nIf no M or G the value will be 512-byte blocks.\nIf \"+\" is specified in begin of value, the value will be added.\nIf \"-\" is specified in begin of value, the value will be removed.\nIf \"+\" or \"-\" is not specified, the total value will be the specified.\nSize will respects the LVM AIX standards.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Controls the file system state.\nC(present) check if file system exists, creates or resize.\nC(absent) removes existing file system if already C(unmounted).\nC(mounted) checks if the file system is mounted or mount the file system.\nC(unmounted) check if the file system is unmounted or unmount the file system.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "mounted",
            "present",
            "unmounted"
          ],
          "suboptions": {}
        },
        "vg": {
          "aliases": [],
          "description": "Specifies an existing volume group (VG).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Configure LVM and NFS file systems for AIX"
    },
    "examples": "\n- name: Create filesystem in a previously defined logical volume.\n  community.general.aix_filesystem:\n    device: testlv\n    community.general.filesystem: /testfs\n    state: present\n\n- name: Creating NFS filesystem from nfshost.\n  community.general.aix_filesystem:\n    device: /home/ftp\n    nfs_server: nfshost\n    community.general.filesystem: /home/ftp\n    state: present\n\n- name: Creating a new file system without a previously logical volume.\n  community.general.aix_filesystem:\n    community.general.filesystem: /newfs\n    size: 1G\n    state: present\n    vg: datavg\n\n- name: Unmounting /testfs.\n  community.general.aix_filesystem:\n    community.general.filesystem: /testfs\n    state: unmounted\n\n- name: Resizing /mksysb to +512M.\n  community.general.aix_filesystem:\n    community.general.filesystem: /mksysb\n    size: +512M\n    state: present\n\n- name: Resizing /mksysb to 11G.\n  community.general.aix_filesystem:\n    community.general.filesystem: /mksysb\n    size: 11G\n    state: present\n\n- name: Resizing /mksysb to -2G.\n  community.general.aix_filesystem:\n    community.general.filesystem: /mksysb\n    size: -2G\n    state: present\n\n- name: Remove NFS filesystem /home/ftp.\n  community.general.aix_filesystem:\n    community.general.filesystem: /home/ftp\n    rm_mount_point: yes\n    state: absent\n\n- name: Remove /newfs.\n  community.general.aix_filesystem:\n    community.general.filesystem: /newfs\n    rm_mount_point: yes\n    state: absent\n"
  },
  "community.general.aix_inittab": {
    "doc": {
      "description": "Manages the inittab on AIX.",
      "has_action": false,
      "notes": "The changes are persistent across reboots.\nYou need root rights to read or adjust the inittab with the C(lsitab), C(chitab), C(mkitab) or C(rmitab) commands.\nTested on AIX 7.1.",
      "options": {
        "action": {
          "aliases": [],
          "description": "Action what the init has to do with this entry.",
          "type": "str",
          "required": false,
          "choices": [
            "boot",
            "bootwait",
            "hold",
            "initdefault",
            "off",
            "once",
            "ondemand",
            "powerfail",
            "powerwait",
            "respawn",
            "sysinit",
            "wait"
          ],
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "What command has to run.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "insertafter": {
          "aliases": [],
          "description": "After which inittabline should the new entry inserted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "service"
          ],
          "description": "Name of the inittab entry.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "runlevel": {
          "aliases": [],
          "description": "Runlevel of the entry.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the entry should be present or absent in the inittab file.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "itertools"
      ],
      "short_description": "Manages the inittab on AIX"
    },
    "examples": "\n# Add service startmyservice to the inittab, directly after service existingservice.\n- name: Add startmyservice to inittab\n  community.general.aix_inittab:\n    name: startmyservice\n    runlevel: 4\n    action: once\n    command: echo hello\n    insertafter: existingservice\n    state: present\n  become: yes\n\n# Change inittab entry startmyservice to runlevel \"2\" and processaction \"wait\".\n- name: Change startmyservice to inittab\n  community.general.aix_inittab:\n    name: startmyservice\n    runlevel: 2\n    action: wait\n    command: echo hello\n    state: present\n  become: yes\n\n- name: Remove startmyservice from inittab\n  community.general.aix_inittab:\n    name: startmyservice\n    runlevel: 2\n    action: wait\n    command: echo hello\n    state: absent\n  become: yes\n"
  },
  "community.general.aix_lvg": {
    "doc": {
      "description": "This module creates, removes or resize volume groups on AIX LVM.",
      "has_action": false,
      "notes": "AIX will permit remove VG only if all LV/Filesystems are not busy.\nModule does not modify PP size for already present volume group.",
      "options": {
        "force": {
          "aliases": [],
          "description": "Force volume group creation.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pp_size": {
          "aliases": [],
          "description": "The size of the physical partition in megabytes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "pvs": {
          "aliases": [],
          "description": "List of comma-separated devices to use as physical devices in this volume group.\nRequired when creating or extending (C(present) state) the volume group.\nIf not informed reducing (C(absent) state) the volume group will be removed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Control if the volume group exists and volume group AIX state varyonvg C(varyon) or varyoffvg C(varyoff).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "varyoff",
            "varyon"
          ],
          "suboptions": {}
        },
        "vg": {
          "aliases": [],
          "description": "The name of the volume group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vg_type": {
          "aliases": [],
          "description": "The type of the volume group.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "big",
            "normal",
            "scalable"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage LVM volume groups on AIX"
    },
    "examples": "\n- name: Create a volume group datavg\n  community.general.aix_lvg:\n    vg: datavg\n    pp_size: 128\n    vg_type: scalable\n    state: present\n\n- name: Removing a volume group datavg\n  community.general.aix_lvg:\n    vg: datavg\n    state: absent\n\n- name: Extending rootvg\n  community.general.aix_lvg:\n    vg: rootvg\n    pvs: hdisk1\n    state: present\n\n- name: Reducing rootvg\n  community.general.aix_lvg:\n    vg: rootvg\n    pvs: hdisk1\n    state: absent\n"
  },
  "community.general.aix_lvol": {
    "doc": {
      "description": "This module creates, removes or resizes AIX logical volumes. Inspired by lvol module.",
      "has_action": false,
      "options": {
        "copies": {
          "aliases": [],
          "description": "The number of copies of the logical volume.\nMaximum copies are 3.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "lv": {
          "aliases": [],
          "description": "The name of the logical volume.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "lv_type": {
          "aliases": [],
          "description": "The type of the logical volume.",
          "default": "jfs2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "opts": {
          "aliases": [],
          "description": "Free-form options to be passed to the mklv command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "policy": {
          "aliases": [],
          "description": "Sets the interphysical volume allocation policy.\nC(maximum) allocates logical partitions across the maximum number of physical volumes.\nC(minimum) allocates logical partitions across the minimum number of physical volumes.",
          "default": "maximum",
          "type": "str",
          "required": false,
          "choices": [
            "maximum",
            "minimum"
          ],
          "suboptions": {}
        },
        "pvs": {
          "aliases": [],
          "description": "A list of physical volumes e.g. C(hdisk1,hdisk2).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "The size of the logical volume with one of the [MGT] units.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Control if the logical volume exists. If C(present) and the volume does not already exist then the C(size) option is required.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "vg": {
          "aliases": [],
          "description": "The volume group this logical volume is part of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Configure AIX LVM logical volumes"
    },
    "examples": "\n- name: Create a logical volume of 512M\n  community.general.aix_lvol:\n    vg: testvg\n    lv: testlv\n    size: 512M\n\n- name: Create a logical volume of 512M with disks hdisk1 and hdisk2\n  community.general.aix_lvol:\n    vg: testvg\n    lv: test2lv\n    size: 512M\n    pvs: [ hdisk1, hdisk2 ]\n\n- name: Create a logical volume of 512M mirrored\n  community.general.aix_lvol:\n    vg: testvg\n    lv: test3lv\n    size: 512M\n    copies: 2\n\n- name: Create a logical volume of 1G with a minimum placement policy\n  community.general.aix_lvol:\n    vg: rootvg\n    lv: test4lv\n    size: 1G\n    policy: minimum\n\n- name: Create a logical volume with special options like mirror pool\n  community.general.aix_lvol:\n    vg: testvg\n    lv: testlv\n    size: 512M\n    opts: -p copy1=poolA -p copy2=poolB\n\n- name: Extend the logical volume to 1200M\n  community.general.aix_lvol:\n    vg: testvg\n    lv: test4lv\n    size: 1200M\n\n- name: Remove the logical volume\n  community.general.aix_lvol:\n    vg: testvg\n    lv: testlv\n    state: absent\n"
  },
  "community.general.ali_instance": {
    "doc": {
      "description": "Create, start, stop, restart, modify or terminate ecs instances.\nAdd or remove ecs instances to/from security group.",
      "has_action": false,
      "notes": "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(ALICLOUD_ACCESS_KEY) or C(ALICLOUD_ACCESS_KEY_ID), C(ALICLOUD_SECRET_KEY) or C(ALICLOUD_SECRET_ACCESS_KEY), C(ALICLOUD_REGION) or C(ALICLOUD_REGION_ID), C(ALICLOUD_SECURITY_TOKEN), C(ALICLOUD_ECS_ROLE_NAME), C(ALICLOUD_SHARED_CREDENTIALS_FILE), C(ALICLOUD_PROFILE), C(ALICLOUD_ASSUME_ROLE_ARN), C(ALICLOUD_ASSUME_ROLE_SESSION_NAME), C(ALICLOUD_ASSUME_ROLE_SESSION_EXPIRATION),\nC(ALICLOUD_REGION) or C(ALICLOUD_REGION_ID) can be typically be used to specify the ALICLOUD region, when required, but this can also be configured in the footmark config file",
      "options": {
        "alicloud_access_key": {
          "aliases": [
            "access_key_id",
            "access_key"
          ],
          "description": "Alibaba Cloud access key. If not set then the value of environment variable C(ALICLOUD_ACCESS_KEY), C(ALICLOUD_ACCESS_KEY_ID) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alicloud_assume_role": {
          "aliases": [
            "assume_role"
          ],
          "description": "If provided with a role ARN, Ansible will attempt to assume this role using the supplied credentials.\nThe nested assume_role block supports I(alicloud_assume_role_arn), I(alicloud_assume_role_session_name), I(alicloud_assume_role_session_expiration) and I(alicloud_assume_role_policy)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "alicloud_assume_role_arn": {
          "aliases": [
            "assume_role_arn"
          ],
          "description": "The Alibaba Cloud role_arn. The ARN of the role to assume. If ARN is set to an empty string, it does not perform role switching. It supports environment variable ALICLOUD_ASSUME_ROLE_ARN. ansible will execute with provided credentials.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alicloud_assume_role_session_expiration": {
          "aliases": [
            "assume_role_session_expiration"
          ],
          "description": "The Alibaba Cloud session_expiration. The time after which the established session for assuming role expires. Valid value range 900-3600 seconds. Default to 3600 (in this case Alicloud use own default value). It supports environment variable ALICLOUD_ASSUME_ROLE_SESSION_EXPIRATION",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "alicloud_assume_role_session_name": {
          "aliases": [
            "assume_role_session_name"
          ],
          "description": "The Alibaba Cloud session_name. The session name to use when assuming the role. If omitted, 'ansible' is passed to the AssumeRole call as session name. It supports environment variable ALICLOUD_ASSUME_ROLE_SESSION_NAME",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alicloud_region": {
          "aliases": [
            "region",
            "region_id"
          ],
          "description": "The Alibaba Cloud region to use. If not specified then the value of environment variable C(ALICLOUD_REGION), C(ALICLOUD_REGION_ID) will be used instead.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "alicloud_secret_key": {
          "aliases": [
            "secret_access_key",
            "secret_key"
          ],
          "description": "Alibaba Cloud secret key. If not set then the value of environment variable C(ALICLOUD_SECRET_KEY), C(ALICLOUD_SECRET_ACCESS_KEY) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alicloud_security_token": {
          "aliases": [
            "security_token"
          ],
          "description": "The Alibaba Cloud security token. If not specified then the value of environment variable C(ALICLOUD_SECURITY_TOKEN) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "allocate_public_ip": {
          "aliases": [
            "assign_public_ip"
          ],
          "description": "Whether allocate a public ip for the new instance.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_renew": {
          "aliases": [],
          "description": "Whether automate renew the charge of the instance.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_renew_period": {
          "aliases": [],
          "description": "The duration of the automatic renew the charge of the instance. Required when C(auto_renew=True).",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "2",
            "3",
            "6",
            "12"
          ],
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [
            "alicloud_zone",
            "zone_id"
          ],
          "description": "Aliyun availability zone ID in which to launch the instance. If it is not specified, it will be allocated by system automatically.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "The number of the new instance. An integer value which indicates how many instances that match I(count_tag) should be running. Instances are either created or terminated based on this value.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "count_tag": {
          "aliases": [],
          "description": "I(count) determines how many instances based on a specific tag criteria should be present. This can be expressed in multiple ways and is shown in the EXAMPLES section. The specified count_tag must already exist or be passed in as the I(tags) option. If it is not specified, it will be replaced by I(instance_name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of ECS instance, which is a string of 2 to 256 characters. It cannot begin with http:// or https://.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dry_run": {
          "aliases": [],
          "description": "Specifies whether to send a dry-run request.\nIf I(dry_run=True), Only a dry-run request is sent and no instance is created. The system checks whether the required parameters are set, and validates the request format, service permissions, and available ECS instances. If the validation fails, the corresponding error code is returned. If the validation succeeds, the DryRunOperation error code is returned.\nIf I(dry_run=False), A request is sent. If the validation succeeds, the instance is created.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "ecs_role_name": {
          "aliases": [
            "role_name"
          ],
          "description": "The RAM Role Name attached on a ECS instance for API operations. You can retrieve this from the 'Access Control' section of the Alibaba Cloud console.\nIf you're running Ansible from an ECS instance with RAM Instance using RAM Role, Ansible will just access the metadata U(http://100.100.100.200/latest/meta-data/ram/security-credentials/<ecs_role_name>) to obtain the STS credential. This is a preferred approach over any other when running in ECS as you can avoid hard coding credentials. Instead these are leased on-the-fly by Ansible which reduces the chance of leakage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Whether the current operation needs to be execute forcibly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host_name": {
          "aliases": [],
          "description": "Instance host name. Ordered hostname is not supported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_id": {
          "aliases": [
            "image"
          ],
          "description": "Image ID used to launch instances. Required when C(state=present) and creating new ECS instances.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "include_data_disks": {
          "aliases": [],
          "description": "Whether to change instance disks charge type when changing instance charge type.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "instance_charge_type": {
          "aliases": [],
          "description": "The charge type of the instance.",
          "default": "PostPaid",
          "type": "str",
          "required": false,
          "choices": [
            "PrePaid",
            "PostPaid"
          ],
          "suboptions": {}
        },
        "instance_ids": {
          "aliases": [],
          "description": "A list of instance ids. It is required when need to operate existing instances. If it is specified, I(count) will lose efficacy.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "instance_name": {
          "aliases": [
            "name"
          ],
          "description": "The name of ECS instance, which is a string of 2 to 128 Chinese or English characters. It must begin with an uppercase/lowercase letter or a Chinese character and can contain numerals, \".\", \"_\" or \"-\". It cannot begin with http:// or https://.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_type": {
          "aliases": [
            "type"
          ],
          "description": "Instance type used to launch instances. Required when C(state=present) and creating new ECS instances.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internet_charge_type": {
          "aliases": [],
          "description": "Internet charge type of ECS instance.",
          "default": "PayByBandwidth",
          "type": "str",
          "required": false,
          "choices": [
            "PayByBandwidth",
            "PayByTraffic"
          ],
          "suboptions": {}
        },
        "key_name": {
          "aliases": [
            "keypair"
          ],
          "description": "The name of key pair which is used to access ECS instance in SSH.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_bandwidth_in": {
          "aliases": [],
          "description": "Maximum incoming bandwidth from the public network, measured in Mbps (Megabits per second).",
          "default": "200",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "max_bandwidth_out": {
          "aliases": [],
          "description": "Maximum outgoing bandwidth to the public network, measured in Mbps (Megabits per second). Required when C(allocate_public_ip=True). Ignored when C(allocate_public_ip=False).",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login instance. After rebooting instances, modified password will take effect.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "period": {
          "aliases": [],
          "description": "The charge duration of the instance, in month. Required when C(instance_charge_type=PrePaid).\nThe valid value are [1-9, 12, 24, 36].",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "period_unit": {
          "aliases": [],
          "description": "The duration unit that you will buy the resource. It is valid when C(instance_charge_type=PrePaid)",
          "default": "Month",
          "type": "str",
          "required": false,
          "choices": [
            "Month",
            "Week"
          ],
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "This is the Alicloud profile name as set in the shared credentials file. It can also be sourced from the ALICLOUD_PROFILE environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge_tags": {
          "aliases": [],
          "description": "Delete any tags not specified in the task that are on the instance. If True, it means you have to specify all the desired tags on each task affecting an instance.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "ram_role_name": {
          "aliases": [],
          "description": "The name of the instance RAM role.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "security_groups": {
          "aliases": [
            "group_ids"
          ],
          "description": "A list of security group IDs.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "shared_credentials_file": {
          "aliases": [],
          "description": "This is the path to the shared credentials file. It can also be sourced from the ALICLOUD_SHARED_CREDENTIALS_FILE environment variable.\nIf this is not set and a profile is specified,  ~/.aliyun/config.json will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "spot_price_limit": {
          "aliases": [],
          "description": "The maximum hourly price for the preemptible instance. This parameter supports a maximum of three decimal places and takes effect when the SpotStrategy parameter is set to SpotWithPriceLimit.",
          "type": "float",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "spot_strategy": {
          "aliases": [],
          "description": "The bidding mode of the pay-as-you-go instance. This parameter is valid when InstanceChargeType is set to PostPaid.",
          "default": "NoSpot",
          "type": "str",
          "required": false,
          "choices": [
            "NoSpot",
            "SpotWithPriceLimit",
            "SpotAsPriceGo"
          ],
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the instance after operating.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "running",
            "stopped",
            "restarted",
            "absent"
          ],
          "suboptions": {}
        },
        "system_disk_category": {
          "aliases": [],
          "description": "Category of the system disk.",
          "default": "cloud_efficiency",
          "type": "str",
          "required": false,
          "choices": [
            "cloud_efficiency",
            "cloud_ssd"
          ],
          "suboptions": {}
        },
        "system_disk_description": {
          "aliases": [],
          "description": "Description of the system disk.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "system_disk_name": {
          "aliases": [],
          "description": "Name of the system disk.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "system_disk_size": {
          "aliases": [],
          "description": "Size of the system disk, in GB. The valid values are 40~500.",
          "default": "40",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "instance_tags"
          ],
          "description": "A hash/dictionaries of instance tags, to add to the new instance or for starting/stopping instance by tag. C({\"key\":\"value\"})",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "unique_suffix": {
          "aliases": [],
          "description": "Specifies whether to add sequential suffixes to the host_name. The sequential suffix ranges from 001 to 999.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "user_data": {
          "aliases": [],
          "description": "User-defined data to customize the startup behaviors of an ECS instance and to pass data into an ECS instance. It only will take effect when launching the new ECS instances.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vswitch_id": {
          "aliases": [
            "subnet_id"
          ],
          "description": "The subnet ID in which to launch the instances (VPC).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "footmark >= 1.19.0",
        "python >= 3.6"
      ],
      "short_description": "Create, Start, Stop, Restart or Terminate an Instance in ECS. Add or Remove Instance to/from a Security Group."
    },
    "examples": "\n# basic provisioning example vpc network\n- name: Basic provisioning example\n  hosts: localhost\n  vars:\n    alicloud_access_key: <your-alicloud-access-key-id>\n    alicloud_secret_key: <your-alicloud-access-secret-key>\n    alicloud_region: cn-beijing\n    image: ubuntu1404_64_40G_cloudinit_20160727.raw\n    instance_type: ecs.n4.small\n    vswitch_id: vsw-abcd1234\n    assign_public_ip: True\n    max_bandwidth_out: 10\n    host_name: myhost\n    password: mypassword\n    system_disk_category: cloud_efficiency\n    system_disk_size: 100\n    internet_charge_type: PayByBandwidth\n    security_groups: [\"sg-f2rwnfh23r\"]\n\n    instance_ids: [\"i-abcd12346\", \"i-abcd12345\"]\n    force: True\n\n  tasks:\n    - name: Launch ECS instance in VPC network\n      community.general.ali_instance:\n        alicloud_access_key: '{{ alicloud_access_key }}'\n        alicloud_secret_key: '{{ alicloud_secret_key }}'\n        alicloud_region: '{{ alicloud_region }}'\n        image: '{{ image }}'\n        system_disk_category: '{{ system_disk_category }}'\n        system_disk_size: '{{ system_disk_size }}'\n        instance_type: '{{ instance_type }}'\n        vswitch_id: '{{ vswitch_id }}'\n        assign_public_ip: '{{ assign_public_ip }}'\n        internet_charge_type: '{{ internet_charge_type }}'\n        max_bandwidth_out: '{{ max_bandwidth_out }}'\n        tags:\n            Name: created_one\n        host_name: '{{ host_name }}'\n        password: '{{ password }}'\n\n    - name: With count and count_tag to create a number of instances\n      community.general.ali_instance:\n        alicloud_access_key: '{{ alicloud_access_key }}'\n        alicloud_secret_key: '{{ alicloud_secret_key }}'\n        alicloud_region: '{{ alicloud_region }}'\n        image: '{{ image }}'\n        system_disk_category: '{{ system_disk_category }}'\n        system_disk_size: '{{ system_disk_size }}'\n        instance_type: '{{ instance_type }}'\n        assign_public_ip: '{{ assign_public_ip }}'\n        security_groups: '{{ security_groups }}'\n        internet_charge_type: '{{ internet_charge_type }}'\n        max_bandwidth_out: '{{ max_bandwidth_out }}'\n        tags:\n            Name: created_one\n            Version: 0.1\n        count: 2\n        count_tag:\n            Name: created_one\n        host_name: '{{ host_name }}'\n        password: '{{ password }}'\n\n    - name: Start instance\n      community.general.ali_instance:\n        alicloud_access_key: '{{ alicloud_access_key }}'\n        alicloud_secret_key: '{{ alicloud_secret_key }}'\n        alicloud_region: '{{ alicloud_region }}'\n        instance_ids: '{{ instance_ids }}'\n        state: 'running'\n\n    - name: Reboot instance forcibly\n      ecs:\n        alicloud_access_key: '{{ alicloud_access_key }}'\n        alicloud_secret_key: '{{ alicloud_secret_key }}'\n        alicloud_region: '{{ alicloud_region }}'\n        instance_ids: '{{ instance_ids }}'\n        state: 'restarted'\n        force: '{{ force }}'\n\n    - name: Add instances to an security group\n      ecs:\n        alicloud_access_key: '{{ alicloud_access_key }}'\n        alicloud_secret_key: '{{ alicloud_secret_key }}'\n        alicloud_region: '{{ alicloud_region }}'\n        instance_ids: '{{ instance_ids }}'\n        security_groups: '{{ security_groups }}'\n"
  },
  "community.general.ali_instance_info": {
    "doc": {
      "description": "This module fetches data from the Open API in Alicloud. The module must be called from within the ECS instance itself.\nThis module was called C(ali_instance_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(ALICLOUD_ACCESS_KEY) or C(ALICLOUD_ACCESS_KEY_ID), C(ALICLOUD_SECRET_KEY) or C(ALICLOUD_SECRET_ACCESS_KEY), C(ALICLOUD_REGION) or C(ALICLOUD_REGION_ID), C(ALICLOUD_SECURITY_TOKEN), C(ALICLOUD_ECS_ROLE_NAME), C(ALICLOUD_SHARED_CREDENTIALS_FILE), C(ALICLOUD_PROFILE), C(ALICLOUD_ASSUME_ROLE_ARN), C(ALICLOUD_ASSUME_ROLE_SESSION_NAME), C(ALICLOUD_ASSUME_ROLE_SESSION_EXPIRATION),\nC(ALICLOUD_REGION) or C(ALICLOUD_REGION_ID) can be typically be used to specify the ALICLOUD region, when required, but this can also be configured in the footmark config file",
      "options": {
        "alicloud_access_key": {
          "aliases": [
            "access_key_id",
            "access_key"
          ],
          "description": "Alibaba Cloud access key. If not set then the value of environment variable C(ALICLOUD_ACCESS_KEY), C(ALICLOUD_ACCESS_KEY_ID) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alicloud_assume_role": {
          "aliases": [
            "assume_role"
          ],
          "description": "If provided with a role ARN, Ansible will attempt to assume this role using the supplied credentials.\nThe nested assume_role block supports I(alicloud_assume_role_arn), I(alicloud_assume_role_session_name), I(alicloud_assume_role_session_expiration) and I(alicloud_assume_role_policy)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "alicloud_assume_role_arn": {
          "aliases": [
            "assume_role_arn"
          ],
          "description": "The Alibaba Cloud role_arn. The ARN of the role to assume. If ARN is set to an empty string, it does not perform role switching. It supports environment variable ALICLOUD_ASSUME_ROLE_ARN. ansible will execute with provided credentials.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alicloud_assume_role_session_expiration": {
          "aliases": [
            "assume_role_session_expiration"
          ],
          "description": "The Alibaba Cloud session_expiration. The time after which the established session for assuming role expires. Valid value range 900-3600 seconds. Default to 3600 (in this case Alicloud use own default value). It supports environment variable ALICLOUD_ASSUME_ROLE_SESSION_EXPIRATION",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "alicloud_assume_role_session_name": {
          "aliases": [
            "assume_role_session_name"
          ],
          "description": "The Alibaba Cloud session_name. The session name to use when assuming the role. If omitted, 'ansible' is passed to the AssumeRole call as session name. It supports environment variable ALICLOUD_ASSUME_ROLE_SESSION_NAME",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alicloud_region": {
          "aliases": [
            "region",
            "region_id"
          ],
          "description": "The Alibaba Cloud region to use. If not specified then the value of environment variable C(ALICLOUD_REGION), C(ALICLOUD_REGION_ID) will be used instead.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "alicloud_secret_key": {
          "aliases": [
            "secret_access_key",
            "secret_key"
          ],
          "description": "Alibaba Cloud secret key. If not set then the value of environment variable C(ALICLOUD_SECRET_KEY), C(ALICLOUD_SECRET_ACCESS_KEY) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alicloud_security_token": {
          "aliases": [
            "security_token"
          ],
          "description": "The Alibaba Cloud security token. If not specified then the value of environment variable C(ALICLOUD_SECURITY_TOKEN) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [
            "alicloud_zone"
          ],
          "description": "Aliyun availability zone ID in which to launch the instance.\nDeprecated parameter, it will be removed in community.general 5.0.0. Please use filter item I(zone_id) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ecs_role_name": {
          "aliases": [
            "role_name"
          ],
          "description": "The RAM Role Name attached on a ECS instance for API operations. You can retrieve this from the 'Access Control' section of the Alibaba Cloud console.\nIf you're running Ansible from an ECS instance with RAM Instance using RAM Role, Ansible will just access the metadata U(http://100.100.100.200/latest/meta-data/ram/security-credentials/<ecs_role_name>) to obtain the STS credential. This is a preferred approach over any other when running in ECS as you can avoid hard coding credentials. Instead these are leased on-the-fly by Ansible which reduces the chance of leakage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dict of filters to apply. Each dict item consists of a filter key and a filter value. The filter keys can be all of request parameters. See U(https://www.alibabacloud.com/help/doc-detail/25506.htm) for parameter details. Filter keys can be same as request parameter name or be lower case and use underscore (\"_\") or dash (\"-\") to connect different words in one parameter. 'InstanceIds' should be a list and it will be appended to I(instance_ids) automatically. 'Tag.n.Key' and 'Tag.n.Value' should be a dict and using I(tags) instead.",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "instance_ids": {
          "aliases": [
            "ids"
          ],
          "description": "A list of ECS instance ids.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "instance_names": {
          "aliases": [
            "names"
          ],
          "description": "A list of ECS instance names.\nDeprecated parameter, it will be removed in community.general 5.0.0. Please use filter item I(instance_name) instead.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name_prefix": {
          "aliases": [],
          "description": "Use a instance name prefix to filter ecs instances.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "This is the Alicloud profile name as set in the shared credentials file. It can also be sourced from the ALICLOUD_PROFILE environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shared_credentials_file": {
          "aliases": [],
          "description": "This is the path to the shared credentials file. It can also be sourced from the ALICLOUD_SHARED_CREDENTIALS_FILE environment variable.\nIf this is not set and a profile is specified,  ~/.aliyun/config.json will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "instance_tags"
          ],
          "description": "A hash/dictionaries of instance tags. C({\"key\":\"value\"})",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "footmark >= 1.13.0",
        "python >= 3.6"
      ],
      "short_description": "Gather information on instances of Alibaba Cloud ECS."
    },
    "examples": "\n# Fetch instances details according to setting different filters\n\n- name: Find all instances in the specified region\n  community.general.ali_instance_info:\n  register: all_instances\n\n- name: Find all instances based on the specified ids\n  community.general.ali_instance_info:\n    instance_ids:\n      - \"i-35b333d9\"\n      - \"i-ddav43kd\"\n  register: instances_by_ids\n\n- name: Find all instances based on the specified name_prefix\n  community.general.ali_instance_info:\n    name_prefix: \"ecs_instance_\"\n  register: instances_by_name_prefix\n\n- name: Find instances based on tags\n  community.general.ali_instance_info:\n    tags:\n      Test: \"add\"\n"
  },
  "community.general.alternatives": {
    "doc": {
      "description": "Manages symbolic links using the 'update-alternatives' tool.\nUseful when multiple programs are installed but provide similar functionality (e.g. different editors).",
      "has_action": false,
      "options": {
        "link": {
          "aliases": [],
          "description": "The path to the symbolic link that should point to the real executable.\nThis option is always required on RHEL-based distributions. On Debian-based distributions this option is required when the alternative I(name) is unknown to the system.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The generic name of the link.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path to the real executable that the link should point to.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "The priority of the alternative.",
          "default": "50",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "update-alternatives"
      ],
      "short_description": "Manages alternative programs for common commands"
    },
    "examples": "\n- name: Correct java version selected\n  community.general.alternatives:\n    name: java\n    path: /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java\n\n- name: Alternatives link created\n  community.general.alternatives:\n    name: hadoop-conf\n    link: /etc/hadoop/conf\n    path: /etc/hadoop/conf.ansible\n\n- name: Make java 32 bit an alternative with low priority\n  community.general.alternatives:\n    name: java\n    path: /usr/lib/jvm/java-7-openjdk-i386/jre/bin/java\n    priority: -10\n"
  },
  "community.general.ansible_galaxy_install": {
    "doc": {
      "description": "This module allows the installation of Ansible collections or roles using C(ansible-galaxy).",
      "has_action": false,
      "notes": "B(Ansible 2.9/2.10): The C(ansible-galaxy) command changed significantly between Ansible 2.9 and ansible-base 2.10 (later ansible-core 2.11). See comments in the parameters.\n",
      "options": {
        "ack_ansible29": {
          "aliases": [],
          "description": "Acknowledge using Ansible 2.9 with its limitations, and prevents the module from generating warnings about them.\nThis option is completely ignored if using a version of Ansible greater than C(2.9.x).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "The path to the directory containing your collections or roles, according to the value of I(type).\nPlease notice that C(ansible-galaxy) will not install collections with I(type=both), when I(requirements_file) contains both roles and collections and I(dest) is specified.\n",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force overwriting an existing role or collection.\nUsing I(force=true) is mandatory when downgrading.\nB(Ansible 2.9 and 2.10): Must be C(true) to upgrade roles and collections.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the collection or role being installed.\nVersions can be specified with C(ansible-galaxy) usual formats. For example, the collection C(community.docker:1.6.1) or the role C(ansistrano.deploy,3.8.0).\n\nI(name) and I(requirements_file) are mutually exclusive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "requirements_file": {
          "aliases": [],
          "description": "Path to a file containing a list of requirements to be installed.\nIt works for I(type) equals to C(collection) and C(role).\nI(name) and I(requirements_file) are mutually exclusive.\nB(Ansible 2.9): It can only be used to install either I(type=role) or I(type=collection), but not both at the same run.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of installation performed by C(ansible-galaxy).\nIf I(type) is C(both), then I(requirements_file) must be passed and it may contain both roles and collections.\nNote however that the opposite is not true: if using a I(requirements_file), then I(type) can be any of the three choices.\nB(Ansible 2.9): The option C(both) will have the same effect as C(role).",
          "type": "str",
          "required": true,
          "choices": [
            "collection",
            "role",
            "both"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "Ansible 2.9, ansible-base 2.10, or ansible-core 2.11 or newer"
      ],
      "short_description": "Install Ansible roles or collections using ansible-galaxy",
      "version_added": "3.5.0"
    },
    "examples": "\n- name: Install collection community.network\n  community.general.ansible_galaxy_install:\n    type: collection\n    name: community.network\n\n- name: Install role at specific path\n  community.general.ansible_galaxy_install:\n    type: role\n    name: ansistrano.deploy\n    dest: /ansible/roles\n\n- name: Install collections and roles together\n  community.general.ansible_galaxy_install:\n    type: both\n    requirements_file: requirements.yml\n\n- name: Force-install collection community.network at specific version\n  community.general.ansible_galaxy_install:\n    type: collection\n    name: community.network:3.0.2\n    force: true\n\n"
  },
  "community.general.apache2_mod_proxy": {
    "doc": {
      "description": "Set and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool, using HTTP POST and GET requests. The httpd mod_proxy balancer-member status page has to be enabled and accessible, as this module relies on parsing this page. This module supports ansible check_mode, and requires BeautifulSoup python module.",
      "has_action": false,
      "options": {
        "balancer_url_suffix": {
          "aliases": [],
          "description": "Suffix of the balancer pool url required to access the balancer pool status page (e.g. balancer_vhost[:port]/balancer_url_suffix).",
          "default": "/balancer-manager/",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "balancer_vhost": {
          "aliases": [],
          "description": "(ipv4|ipv6|fqdn):port of the Apache httpd 2.4 mod_proxy balancer pool.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "member_host": {
          "aliases": [],
          "description": "(ipv4|ipv6|fqdn) of the balancer member to get or to set attributes to. Port number is autodetected and should not be specified here. If undefined, apache2_mod_proxy module will return a members list of dictionaries of all the current balancer pool members' attributes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the member host. (absent|disabled),drained,hot_standby,ignore_errors can be simultaneously invoked by separating them with a comma (e.g. state=drained,ignore_errors).\nAccepted state values: [\"present\", \"absent\", \"enabled\", \"disabled\", \"drained\", \"hot_standby\", \"ignore_errors\"]",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Use https to access balancer management page.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate ssl/tls certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Set and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool"
    },
    "examples": "\n- name: Get all current balancer pool members attributes\n  community.general.apache2_mod_proxy:\n    balancer_vhost: 10.0.0.2\n\n- name: Get a specific member attributes\n  community.general.apache2_mod_proxy:\n    balancer_vhost: myws.mydomain.org\n    balancer_suffix: /lb/\n    member_host: node1.myws.mydomain.org\n\n# Enable all balancer pool members:\n- name: Get attributes\n  community.general.apache2_mod_proxy:\n    balancer_vhost: '{{ myloadbalancer_host }}'\n  register: result\n\n- name: Enable all balancer pool members\n  community.general.apache2_mod_proxy:\n    balancer_vhost: '{{ myloadbalancer_host }}'\n    member_host: '{{ item.host }}'\n    state: present\n  with_items: '{{ result.members }}'\n\n# Gracefully disable a member from a loadbalancer node:\n- name: Step 1\n  community.general.apache2_mod_proxy:\n    balancer_vhost: '{{ vhost_host }}'\n    member_host: '{{ member.host }}'\n    state: drained\n  delegate_to: myloadbalancernode\n\n- name: Step 2\n  ansible.builtin.wait_for:\n    host: '{{ member.host }}'\n    port: '{{ member.port }}'\n    state: drained\n  delegate_to: myloadbalancernode\n\n- name: Step 3\n  community.general.apache2_mod_proxy:\n    balancer_vhost: '{{ vhost_host }}'\n    member_host: '{{ member.host }}'\n    state: absent\n  delegate_to: myloadbalancernode\n"
  },
  "community.general.apache2_module": {
    "doc": {
      "description": "Enables or disables a specified module of the Apache2 webserver.",
      "has_action": false,
      "notes": "This does not work on RedHat-based distributions. It does work on Debian- and SuSE-based distributions. Whether it works on others depend on whether the C(a2enmod) and C(a2dismod) tools are available or not.",
      "options": {
        "force": {
          "aliases": [],
          "description": "Force disabling of default modules and override Debian warnings.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "identifier": {
          "aliases": [],
          "description": "Identifier of the module as listed by C(apache2ctl -M). This is optional and usually determined automatically by the common convention of appending C(_module) to I(name) as well as custom exception for popular modules.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ignore_configcheck": {
          "aliases": [],
          "description": "Ignore configuration checks about inconsistent module configuration. Especially for mpm_* modules.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the module to enable/disable as given to C(a2enmod/a2dismod).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the module.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "a2enmod",
        "a2dismod"
      ],
      "short_description": "Enables/disables a module of the Apache2 webserver."
    },
    "examples": "\n- name: Enable the Apache2 module wsgi\n  community.general.apache2_module:\n    state: present\n    name: wsgi\n\n- name: Disables the Apache2 module wsgi\n  community.general.apache2_module:\n    state: absent\n    name: wsgi\n\n- name: Disable default modules for Debian\n  community.general.apache2_module:\n    state: absent\n    name: autoindex\n    force: True\n\n- name: Disable mpm_worker and ignore warnings about missing mpm module\n  community.general.apache2_module:\n    state: absent\n    name: mpm_worker\n    ignore_configcheck: True\n\n- name: Enable dump_io module, which is identified as dumpio_module inside apache2\n  community.general.apache2_module:\n    state: present\n    name: dump_io\n    identifier: dumpio_module\n"
  },
  "community.general.apk": {
    "doc": {
      "description": "Manages I(apk) packages for Alpine Linux.",
      "has_action": false,
      "notes": "\"name\" and \"upgrade\" are mutually exclusive.\nWhen used with a `loop:` each package will be processed individually, it is much more efficient to pass the list directly to the `name` option.",
      "options": {
        "available": {
          "aliases": [],
          "description": "During upgrade, reset versioned world dependencies and change logic to prefer replacing or downgrading packages (instead of holding them) if the currently installed package is no longer available from any repository.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A package name, like C(foo), or multiple packages, like C(foo, bar).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "no_cache": {
          "aliases": [],
          "description": "Do not use any local cache path.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "A package repository or multiple repositories. Unlike with the underlying apk command, this list will override the system repositories rather than supplement them.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired package(s) state.\nC(present) ensures the package(s) is/are present. C(installed) can be used as an alias.\nC(absent) ensures the package(s) is/are absent. C(removed) can be used as an alias.\nC(latest) ensures the package(s) is/are present and the latest version(s).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest",
            "installed",
            "removed"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [],
          "description": "Update repository indexes. Can be run with other steps or on it's own.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upgrade": {
          "aliases": [],
          "description": "Upgrade all installed packages to their latest version.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages apk packages"
    },
    "examples": "\n- name: Update repositories and install foo package\n  community.general.apk:\n    name: foo\n    update_cache: yes\n\n- name: Update repositories and install foo and bar packages\n  community.general.apk:\n    name: foo,bar\n    update_cache: yes\n\n- name: Remove foo package\n  community.general.apk:\n    name: foo\n    state: absent\n\n- name: Remove foo and bar packages\n  community.general.apk:\n    name: foo,bar\n    state: absent\n\n- name: Install the package foo\n  community.general.apk:\n    name: foo\n    state: present\n\n- name: Install the packages foo and bar\n  community.general.apk:\n    name: foo,bar\n    state: present\n\n- name: Update repositories and update package foo to latest version\n  community.general.apk:\n    name: foo\n    state: latest\n    update_cache: yes\n\n- name: Update repositories and update packages foo and bar to latest versions\n  community.general.apk:\n    name: foo,bar\n    state: latest\n    update_cache: yes\n\n- name: Update all installed packages to the latest versions\n  community.general.apk:\n    upgrade: yes\n\n- name: Upgrade / replace / downgrade / uninstall all installed packages to the latest versions available\n  community.general.apk:\n    available: yes\n    upgrade: yes\n\n- name: Update repositories as a separate step\n  community.general.apk:\n    update_cache: yes\n\n- name: Install package from a specific repository\n  community.general.apk:\n    name: foo\n    state: latest\n    update_cache: yes\n    repository: http://dl-3.alpinelinux.org/alpine/edge/main\n\n- name: Install package without using cache\n  community.general.apk:\n    name: foo\n    state: latest\n    no_cache: yes\n"
  },
  "community.general.apt_repo": {
    "doc": {
      "description": "Manages APT repositories using apt-repo tool.\nSee U(https://www.altlinux.org/Apt-repo) for details about apt-repo",
      "has_action": false,
      "notes": "This module works on ALT based distros.\nDoes NOT support checkmode, due to a limitation in apt-repo tool.",
      "options": {
        "remove_others": {
          "aliases": [],
          "description": "Remove other then added repositories\nUsed if I(state=present)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "Name of the repository to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired repository state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "update": {
          "aliases": [],
          "description": "Update the package database after changing repositories.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage APT repositories via apt-repo"
    },
    "examples": "\n- name: Remove all repositories\n  community.general.apt_repo:\n    repo: all\n    state: absent\n\n- name: Add repository `Sisysphus` and remove other repositories\n  community.general.apt_repo:\n    repo: Sisysphus\n    state: present\n    remove_others: yes\n\n- name: Add local repository `/space/ALT/Sisyphus` and update package cache\n  community.general.apt_repo:\n    repo: copy:///space/ALT/Sisyphus\n    state: present\n    update: yes\n"
  },
  "community.general.apt_rpm": {
    "doc": {
      "description": "Manages packages with I(apt-rpm). Both low-level (I(rpm)) and high-level (I(apt-get)) package manager binaries required.",
      "has_action": false,
      "options": {
        "package": {
          "aliases": [
            "name",
            "pkg"
          ],
          "description": "list of packages to install, upgrade or remove.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired package state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "installed",
            "removed"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [
            "update-cache"
          ],
          "description": "update the package database first C(apt-get update).\nAlias C(update-cache) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "apt_rpm package manager"
    },
    "examples": "\n- name: Install package foo\n  community.general.apt_rpm:\n    pkg: foo\n    state: present\n\n- name: Install packages foo and bar\n  community.general.apt_rpm:\n    pkg:\n      - foo\n      - bar\n    state: present\n\n- name: Remove package foo\n  community.general.apt_rpm:\n    pkg: foo\n    state: absent\n\n- name: Remove packages foo and bar\n  community.general.apt_rpm:\n    pkg: foo,bar\n    state: absent\n\n# bar will be the updated if a newer version exists\n- name: Update the package database and install bar\n  community.general.apt_rpm:\n    name: bar\n    state: present\n    update_cache: yes\n"
  },
  "community.general.archive": {
    "doc": {
      "description": "Creates or extends an archive.\nThe source and archive are on the remote host, and the archive I(is not) copied to the local host.\nSource files can be deleted after archival by specifying I(remove=True).",
      "has_action": false,
      "notes": "Requires tarfile, zipfile, gzip and bzip2 packages on target host.\nRequires lzma or backports.lzma if using xz format.\nCan produce I(gzip), I(bzip2), I(lzma) and I(zip) compressed files or archives.",
      "options": {
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "The file name of the destination archive. The parent directory must exists on the remote host.\nThis is required when C(path) refers to multiple files by either specifying a glob, a directory or multiple paths in a list.\nIf the destination archive already exists, it will be truncated and overwritten.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "exclude_path": {
          "aliases": [],
          "description": "Remote absolute path, glob, or list of paths or globs for the file or files to exclude from I(path) list and glob expansion.\nUse I(exclusion_patterns) to instead exclude files or subdirectories below any of the paths from the I(path) list.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "exclusion_patterns": {
          "aliases": [],
          "description": "Glob style patterns to exclude files or directories from the resulting archive.\nThis differs from I(exclude_path) which applies only to the source paths from I(path).",
          "type": "list",
          "required": false,
          "elements": "path",
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "force_archive": {
          "aliases": [],
          "description": "Allows you to force the module to treat this as an archive even if only a single file is specified.\nBy default when a single file is specified it is compressed only (not archived).\nEnable this if you want to use M(ansible.builtin.unarchive) on an archive of a single file created with this module.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "The type of compression to use.\nSupport for xz was added in Ansible 2.5.",
          "default": "gz",
          "type": "str",
          "required": false,
          "choices": [
            "bz2",
            "gz",
            "tar",
            "xz",
            "zip"
          ],
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The permissions the resulting filesystem object should have.\nFor those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.\nGiving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.\nAs of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).\nIf C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.\nIf C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.\nSpecifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Remote absolute path, glob, or list of paths or globs for the file or files to compress or archive.",
          "type": "list",
          "required": true,
          "elements": "path",
          "suboptions": {}
        },
        "remove": {
          "aliases": [],
          "description": "Remove any added source files and trees after adding to archive.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        }
      },
      "short_description": "Creates a compressed archive of one or more files or trees"
    },
    "examples": "\n- name: Compress directory /path/to/foo/ into /path/to/foo.tgz\n  community.general.archive:\n    path: /path/to/foo\n    dest: /path/to/foo.tgz\n\n- name: Compress regular file /path/to/foo into /path/to/foo.gz and remove it\n  community.general.archive:\n    path: /path/to/foo\n    remove: yes\n\n- name: Create a zip archive of /path/to/foo\n  community.general.archive:\n    path: /path/to/foo\n    format: zip\n\n- name: Create a bz2 archive of multiple files, rooted at /path\n  community.general.archive:\n    path:\n    - /path/to/foo\n    - /path/wong/foo\n    dest: /path/file.tar.bz2\n    format: bz2\n\n- name: Create a bz2 archive of a globbed path, while excluding specific dirnames\n  community.general.archive:\n    path:\n    - /path/to/foo/*\n    dest: /path/file.tar.bz2\n    exclude_path:\n    - /path/to/foo/bar\n    - /path/to/foo/baz\n    format: bz2\n\n- name: Create a bz2 archive of a globbed path, while excluding a glob of dirnames\n  community.general.archive:\n    path:\n    - /path/to/foo/*\n    dest: /path/file.tar.bz2\n    exclude_path:\n    - /path/to/foo/ba*\n    format: bz2\n\n- name: Use gzip to compress a single archive (i.e don't archive it first with tar)\n  community.general.archive:\n    path: /path/to/foo/single.file\n    dest: /path/file.gz\n    format: gz\n\n- name: Create a tar.gz archive of a single file.\n  community.general.archive:\n    path: /path/to/foo/single.file\n    dest: /path/file.tar.gz\n    format: gz\n    force_archive: true\n"
  },
  "community.general.atomic_container": {
    "doc": {
      "description": "Manage the containers on the atomic host platform.\nAllows to manage the lifecycle of a container on the atomic host platform.",
      "has_action": false,
      "notes": "Host should support C(atomic) command",
      "options": {
        "backend": {
          "aliases": [],
          "description": "Define the backend to use for the container.",
          "type": "str",
          "required": true,
          "choices": [
            "docker",
            "ostree"
          ],
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The image to use to install the container.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Define if it is an user or a system container.",
          "type": "str",
          "required": false,
          "choices": [
            "user",
            "system"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the container.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "rootfs": {
          "aliases": [],
          "description": "Define the rootfs of the image.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the container.",
          "default": "latest",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "latest",
            "present",
            "rollback"
          ],
          "suboptions": {}
        },
        "values": {
          "aliases": [],
          "description": "Values for the installation of the container.\nThis option is permitted only with mode 'user' or 'system'.\nThe values specified here will be used at installation time as --set arguments for atomic install.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "atomic",
        "python >= 2.6"
      ],
      "short_description": "Manage the containers on the atomic host platform"
    },
    "examples": "\n\n- name: Install the etcd system container\n  community.general.atomic_container:\n    name: etcd\n    image: rhel/etcd\n    backend: ostree\n    state: latest\n    mode: system\n    values:\n        - ETCD_NAME=etcd.server\n\n- name: Uninstall the etcd system container\n  community.general.atomic_container:\n    name: etcd\n    image: rhel/etcd\n    backend: ostree\n    state: absent\n    mode: system\n"
  },
  "community.general.atomic_host": {
    "doc": {
      "description": "Manage the atomic host platform.\nRebooting of Atomic host platform should be done outside this module.",
      "has_action": false,
      "notes": "Host should be an atomic platform (verified by existence of '/run/ostree-booted' file).",
      "options": {
        "revision": {
          "aliases": [
            "version"
          ],
          "description": "The version number of the atomic host to be deployed.\nProviding C(latest) will upgrade to the latest available version.",
          "default": "latest",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "atomic",
        "python >= 2.6"
      ],
      "short_description": "Manage the atomic host platform"
    },
    "examples": "\n- name: Upgrade the atomic host platform to the latest version (atomic host upgrade)\n  community.general.atomic_host:\n    revision: latest\n\n- name: Deploy a specific revision as the atomic host (atomic host deploy 23.130)\n  community.general.atomic_host:\n    revision: 23.130\n"
  },
  "community.general.atomic_image": {
    "doc": {
      "description": "Manage the container images on the atomic host platform.\nAllows to execute the commands specified by the RUN label in the container image when present.",
      "has_action": false,
      "notes": "Host should support C(atomic) command.",
      "options": {
        "backend": {
          "aliases": [],
          "description": "Define the backend where the image is pulled.",
          "type": "str",
          "required": false,
          "choices": [
            "docker",
            "ostree"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the container image.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "started": {
          "aliases": [],
          "description": "Start or Stop the container.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the container image.\nThe state C(latest) will ensure container image is upgraded to the latest version and forcefully restart container, if running.",
          "default": "latest",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "latest",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "atomic",
        "python >= 2.6"
      ],
      "short_description": "Manage the container images on the atomic host platform"
    },
    "examples": "\n- name: Execute the run command on rsyslog container image (atomic run rhel7/rsyslog)\n  community.general.atomic_image:\n    name: rhel7/rsyslog\n    state: latest\n\n- name: Pull busybox to the OSTree backend\n  community.general.atomic_image:\n    name: busybox\n    state: latest\n    backend: ostree\n"
  },
  "community.general.awall": {
    "doc": {
      "description": "This modules allows for enable/disable/activate of I(awall) policies.\nAlpine Wall (I(awall)) generates a firewall configuration from the enabled policy files and activates the configuration on the system.",
      "has_action": false,
      "options": {
        "activate": {
          "aliases": [],
          "description": "Activate the new firewall rules.\nCan be run with other steps or on its own.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "One or more policy names.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the policies should be enabled or disabled.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage awall policies"
    },
    "examples": "\n- name: Enable \"foo\" and \"bar\" policy\n  community.general.awall:\n    name: [ foo bar ]\n    state: enabled\n\n- name: Disable \"foo\" and \"bar\" policy and activate new rules\n  community.general.awall:\n    name:\n    - foo\n    - bar\n    state: disabled\n    activate: no\n\n- name: Activate currently enabled firewall rules\n  community.general.awall:\n    activate: yes\n"
  },
  "community.general.beadm": {
    "doc": {
      "description": "Create, delete or activate ZFS boot environments.\nMount and unmount ZFS boot environments.",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "Associate a description with a new boot environment. This option is available only on Solarish platforms.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Specifies if the unmount should be forced.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mountpoint": {
          "aliases": [],
          "description": "Path where to mount the ZFS boot environment.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "be"
          ],
          "description": "ZFS boot environment name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "Create the datasets for new BE with specific ZFS properties.\nMultiple options can be specified.\nThis option is available only on Solarish platforms.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot": {
          "aliases": [],
          "description": "If specified, the new boot environment will be cloned from the given snapshot or inactive boot environment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete ZFS boot environment.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "activated",
            "mounted",
            "present",
            "unmounted"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage ZFS boot environments on FreeBSD/Solaris/illumos systems."
    },
    "examples": "\n- name: Create ZFS boot environment\n  community.general.beadm:\n    name: upgrade-be\n    state: present\n\n- name: Create ZFS boot environment from existing inactive boot environment\n  community.general.beadm:\n    name: upgrade-be\n    snapshot: be@old\n    state: present\n\n- name: Create ZFS boot environment with compression enabled and description \"upgrade\"\n  community.general.beadm:\n    name: upgrade-be\n    options: \"compression=on\"\n    description: upgrade\n    state: present\n\n- name: Delete ZFS boot environment\n  community.general.beadm:\n    name: old-be\n    state: absent\n\n- name: Mount ZFS boot environment on /tmp/be\n  community.general.beadm:\n    name: BE\n    mountpoint: /tmp/be\n    state: mounted\n\n- name: Unmount ZFS boot environment\n  community.general.beadm:\n    name: BE\n    state: unmounted\n\n- name: Activate ZFS boot environment\n  community.general.beadm:\n    name: upgrade-be\n    state: activated\n"
  },
  "community.general.bearychat": {
    "doc": {
      "description": "The M(community.general.bearychat) module sends notifications to U(https://bearychat.com) via the Incoming Robot integration.",
      "has_action": false,
      "options": {
        "attachments": {
          "aliases": [],
          "description": "Define a list of attachments. For more information, see https://github.com/bearyinnovative/bearychat-tutorial/blob/master/robots/incoming.md#attachments",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "channel": {
          "aliases": [],
          "description": "Channel to send the message to. If absent, the message goes to the default channel selected by the I(url).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "markdown": {
          "aliases": [],
          "description": "If C(yes), text will be parsed as markdown.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "Message to send.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "BearyChat WebHook URL. This authenticates you to the bearychat service. It looks like C(https://hook.bearychat.com/=ae2CF/incoming/e61bd5c57b164e04b11ac02e66f47f60).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Send BearyChat notifications"
    },
    "examples": "\n- name: Send notification message via BearyChat\n  local_action:\n    module: bearychat\n    url: |\n      https://hook.bearychat.com/=ae2CF/incoming/e61bd5c57b164e04b11ac02e66f47f60\n    text: \"{{ inventory_hostname }} completed\"\n\n- name: Send notification message via BearyChat all options\n  local_action:\n    module: bearychat\n    url: |\n      https://hook.bearychat.com/=ae2CF/incoming/e61bd5c57b164e04b11ac02e66f47f60\n    text: \"{{ inventory_hostname }} completed\"\n    markdown: no\n    channel: \"#ansible\"\n    attachments:\n      - title: \"Ansible on {{ inventory_hostname }}\"\n        text: \"May the Force be with you.\"\n        color: \"#ffffff\"\n        images:\n          - http://example.com/index.png\n"
  },
  "community.general.bigpanda": {
    "doc": {
      "description": "Notify BigPanda when deployments start and end (successfully or not). Returns a deployment object containing all the parameters for future module calls.",
      "has_action": false,
      "options": {
        "component": {
          "aliases": [
            "name"
          ],
          "description": "The name of the component being deployed. Ex: billing",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "deployment_message": {
          "aliases": [],
          "description": "Message about the deployment.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Free text description of the deployment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "The environment name, typically 'production', 'staging', etc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [
            "host"
          ],
          "description": "Name of affected host name. Can be a list.\nIf not specified, it defaults to the remote system's hostname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "The person responsible for the deployment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_system": {
          "aliases": [],
          "description": "Source system used in the requests to the API",
          "default": "ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the deployment.",
          "type": "str",
          "required": true,
          "choices": [
            "started",
            "finished",
            "failed"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Base URL of the API server.",
          "default": "https://api.bigpanda.io",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The deployment version.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [],
      "short_description": "Notify BigPanda about deployments"
    },
    "examples": "\n- name: Notify BigPanda about a deployment\n  community.general.bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    state: started\n\n- name: Notify BigPanda about a deployment\n  community.general.bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    state: finished\n\n# If outside servers aren't reachable from your machine, use delegate_to and override hosts:\n- name: Notify BigPanda about a deployment\n  community.general.bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    hosts: '{{ ansible_hostname }}'\n    state: started\n  delegate_to: localhost\n  register: deployment\n\n- name: Notify BigPanda about a deployment\n  community.general.bigpanda:\n    component: '{{ deployment.component }}'\n    version: '{{ deployment.version }}'\n    token: '{{ deployment.token }}'\n    state: finished\n  delegate_to: localhost\n"
  },
  "community.general.bitbucket_access_key": {
    "doc": {
      "description": "Manages Bitbucket repository access keys (also called deploy keys).",
      "has_action": false,
      "notes": "Bitbucket OAuth consumer or App password should have permissions to read and administrate account repositories.\nCheck mode is supported.\nBitbucket OAuth consumer key and secret can be obtained from Bitbucket profile -> Settings -> Access Management -> OAuth.\nBitbucket App password can be created from Bitbucket profile -> Personal Settings -> App passwords.\nIf both OAuth and Basic Auth credentials are passed, OAuth credentials take precedence.",
      "options": {
        "client_id": {
          "aliases": [],
          "description": "The OAuth consumer key.\nIf not set the environment variable C(BITBUCKET_CLIENT_ID) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_secret": {
          "aliases": [],
          "description": "The OAuth consumer secret.\nIf not set the environment variable C(BITBUCKET_CLIENT_SECRET) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "The SSH public key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "The key label.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The App password.\nIf not set the environment variable C(BITBUCKET_PASSWORD) will be used.",
          "type": "str",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "The repository name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the access key.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The username.\nIf not set the environment variable C(BITBUCKET_USERNAME) will be used.",
          "type": "str",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "workspace": {
          "aliases": [
            "username"
          ],
          "description": "The repository owner.\nAlias I(username) has been deprecated and will become an alias of I(user) in community.general 6.0.0.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages Bitbucket repository access keys"
    },
    "examples": "\n- name: Create access key\n  community.general.bitbucket_access_key:\n    repository: 'bitbucket-repo'\n    workspace: bitbucket_workspace\n    key: '{{lookup(\"file\", \"bitbucket.pub\") }}'\n    label: 'Bitbucket'\n    state: present\n\n- name: Delete access key\n  community.general.bitbucket_access_key:\n    repository: bitbucket-repo\n    workspace: bitbucket_workspace\n    label: Bitbucket\n    state: absent\n"
  },
  "community.general.bitbucket_pipeline_key_pair": {
    "doc": {
      "description": "Manages Bitbucket pipeline SSH key pair.",
      "has_action": false,
      "notes": "Check mode is supported.\nBitbucket OAuth consumer key and secret can be obtained from Bitbucket profile -> Settings -> Access Management -> OAuth.\nBitbucket App password can be created from Bitbucket profile -> Personal Settings -> App passwords.\nIf both OAuth and Basic Auth credentials are passed, OAuth credentials take precedence.",
      "options": {
        "client_id": {
          "aliases": [],
          "description": "The OAuth consumer key.\nIf not set the environment variable C(BITBUCKET_CLIENT_ID) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_secret": {
          "aliases": [],
          "description": "The OAuth consumer secret.\nIf not set the environment variable C(BITBUCKET_CLIENT_SECRET) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The App password.\nIf not set the environment variable C(BITBUCKET_PASSWORD) will be used.",
          "type": "str",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "private_key": {
          "aliases": [],
          "description": "The private key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_key": {
          "aliases": [],
          "description": "The public key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "The repository name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the key pair.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The username.\nIf not set the environment variable C(BITBUCKET_USERNAME) will be used.",
          "type": "str",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "workspace": {
          "aliases": [
            "username"
          ],
          "description": "The repository owner.\nAlias I(username) has been deprecated and will become an alias of I(user) in community.general 6.0.0.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages Bitbucket pipeline SSH key pair"
    },
    "examples": "\n- name: Create or update SSH key pair\n  community.general.bitbucket_pipeline_key_pair:\n    repository: 'bitbucket-repo'\n    workspace: bitbucket_workspace\n    public_key: '{{lookup(\"file\", \"bitbucket.pub\") }}'\n    private_key: '{{lookup(\"file\", \"bitbucket\") }}'\n    state: present\n\n- name: Remove SSH key pair\n  community.general.bitbucket_pipeline_key_pair:\n    repository: bitbucket-repo\n    workspace: bitbucket_workspace\n    state: absent\n"
  },
  "community.general.bitbucket_pipeline_known_host": {
    "doc": {
      "description": "Manages Bitbucket pipeline known hosts under the \"SSH Keys\" menu.\nThe host fingerprint will be retrieved automatically, but in case of an error, one can use I(key) field to specify it manually.",
      "has_action": false,
      "notes": "Check mode is supported.\nBitbucket OAuth consumer key and secret can be obtained from Bitbucket profile -> Settings -> Access Management -> OAuth.\nBitbucket App password can be created from Bitbucket profile -> Personal Settings -> App passwords.\nIf both OAuth and Basic Auth credentials are passed, OAuth credentials take precedence.",
      "options": {
        "client_id": {
          "aliases": [],
          "description": "The OAuth consumer key.\nIf not set the environment variable C(BITBUCKET_CLIENT_ID) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_secret": {
          "aliases": [],
          "description": "The OAuth consumer secret.\nIf not set the environment variable C(BITBUCKET_CLIENT_SECRET) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "The public key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The FQDN of the known host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The App password.\nIf not set the environment variable C(BITBUCKET_PASSWORD) will be used.",
          "type": "str",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "The repository name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the record.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The username.\nIf not set the environment variable C(BITBUCKET_USERNAME) will be used.",
          "type": "str",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "workspace": {
          "aliases": [
            "username"
          ],
          "description": "The repository owner.\nAlias I(username) has been deprecated and will become an alias of I(user) in community.general 6.0.0.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "paramiko"
      ],
      "short_description": "Manages Bitbucket pipeline known hosts"
    },
    "examples": "\n- name: Create known hosts from the list\n  community.general.bitbucket_pipeline_known_host:\n    repository: 'bitbucket-repo'\n    workspace: bitbucket_workspace\n    name: '{{ item }}'\n    state: present\n  with_items:\n    - bitbucket.org\n    - example.com\n\n- name: Remove known host\n  community.general.bitbucket_pipeline_known_host:\n    repository: bitbucket-repo\n    workspace: bitbucket_workspace\n    name: bitbucket.org\n    state: absent\n\n- name: Specify public key file\n  community.general.bitbucket_pipeline_known_host:\n    repository: bitbucket-repo\n    workspace: bitbucket_workspace\n    name: bitbucket.org\n    key: '{{lookup(\"file\", \"bitbucket.pub\") }}'\n    state: absent\n"
  },
  "community.general.bitbucket_pipeline_variable": {
    "doc": {
      "description": "Manages Bitbucket pipeline variables.",
      "has_action": false,
      "notes": "Check mode is supported.\nFor secured values return parameter C(changed) is always C(True).\nBitbucket OAuth consumer key and secret can be obtained from Bitbucket profile -> Settings -> Access Management -> OAuth.\nBitbucket App password can be created from Bitbucket profile -> Personal Settings -> App passwords.\nIf both OAuth and Basic Auth credentials are passed, OAuth credentials take precedence.",
      "options": {
        "client_id": {
          "aliases": [],
          "description": "The OAuth consumer key.\nIf not set the environment variable C(BITBUCKET_CLIENT_ID) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_secret": {
          "aliases": [],
          "description": "The OAuth consumer secret.\nIf not set the environment variable C(BITBUCKET_CLIENT_SECRET) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The pipeline variable name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The App password.\nIf not set the environment variable C(BITBUCKET_PASSWORD) will be used.",
          "type": "str",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "The repository name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "secured": {
          "aliases": [],
          "description": "Whether to encrypt the variable value.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the variable.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The username.\nIf not set the environment variable C(BITBUCKET_USERNAME) will be used.",
          "type": "str",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The pipeline variable value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "workspace": {
          "aliases": [
            "username"
          ],
          "description": "The repository owner.\nAlias I(username) has been deprecated and will become an alias of I(user) in community.general 6.0.0.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages Bitbucket pipeline variables"
    },
    "examples": "\n- name: Create or update pipeline variables from the list\n  community.general.bitbucket_pipeline_variable:\n    repository: 'bitbucket-repo'\n    workspace: bitbucket_workspace\n    name: '{{ item.name }}'\n    value: '{{ item.value }}'\n    secured: '{{ item.secured }}'\n    state: present\n  with_items:\n    - { name: AWS_ACCESS_KEY, value: ABCD1234, secured: False }\n    - { name: AWS_SECRET, value: qwe789poi123vbn0, secured: True }\n\n- name: Remove pipeline variable\n  community.general.bitbucket_pipeline_variable:\n    repository: bitbucket-repo\n    workspace: bitbucket_workspace\n    name: AWS_ACCESS_KEY\n    state: absent\n"
  },
  "community.general.bower": {
    "doc": {
      "description": "Manage bower packages with bower",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "The name of a bower package to install",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "offline": {
          "aliases": [],
          "description": "Install packages from local cache, if the packages were installed before",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The base path where to install the bower packages",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "production": {
          "aliases": [],
          "description": "Install with --production flag",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "relative_execpath": {
          "aliases": [],
          "description": "Relative path to bower executable from install path",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the bower package",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The version to be installed",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage bower packages with bower"
    },
    "examples": "\n- name: Install \"bootstrap\" bower package.\n  community.general.bower:\n    name: bootstrap\n\n- name: Install \"bootstrap\" bower package on version 3.1.1.\n  community.general.bower:\n    name: bootstrap\n    version: '3.1.1'\n\n- name: Remove the \"bootstrap\" bower package.\n  community.general.bower:\n    name: bootstrap\n    state: absent\n\n- name: Install packages based on bower.json.\n  community.general.bower:\n    path: /app/location\n\n- name: Update packages based on bower.json to their latest version.\n  community.general.bower:\n    path: /app/location\n    state: latest\n\n# install bower locally and run from there\n- npm:\n    path: /app/location\n    name: bower\n    global: no\n- community.general.bower:\n    path: /app/location\n    relative_execpath: node_modules/.bin\n"
  },
  "community.general.bundler": {
    "doc": {
      "description": "Manage installation and Gem version dependencies for Ruby using the Bundler gem",
      "has_action": false,
      "options": {
        "binstub_directory": {
          "aliases": [],
          "description": "Only applies if state is C(present). Specifies the directory to install any gem bins files to. When executed the bin files will run within the context of the Gemfile and fail if any required gem dependencies are not installed. If C(chdir) is set then this path is relative to C(chdir)",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "chdir": {
          "aliases": [],
          "description": "The directory to execute the bundler commands from. This directory needs to contain a valid Gemfile or .bundle/ directory\nIf not specified, it will default to the temporary working directory",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "clean": {
          "aliases": [],
          "description": "Only applies if state is C(present). If set removes any gems on the target host that are not in the gemfile",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "deployment_mode": {
          "aliases": [],
          "description": "Only applies if state is C(present). If set it will install gems in ./vendor/bundle instead of the default location. Requires a Gemfile.lock file to have been created prior",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_groups": {
          "aliases": [],
          "description": "A list of Gemfile groups to exclude during operations. This only applies when state is C(present). Bundler considers this a 'remembered' property for the Gemfile and will automatically exclude groups in future operations even if C(exclude_groups) is not set",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "The path to the bundler executable",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_args": {
          "aliases": [],
          "description": "A space separated string of additional commands that can be applied to the Bundler command. Refer to the Bundler documentation for more information",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gem_path": {
          "aliases": [],
          "description": "Only applies if state is C(present). Specifies the directory to install the gems into. If C(chdir) is set then this path is relative to C(chdir)\nIf not specified the default RubyGems gem paths will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "gemfile": {
          "aliases": [],
          "description": "Only applies if state is C(present). The path to the gemfile to use to install gems.\nIf not specified it will default to the Gemfile in current directory",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "local": {
          "aliases": [],
          "description": "If set only installs gems from the cache on the target host",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the Gem bundle. C(latest) updates gems to the most recent, acceptable version",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "latest"
          ],
          "suboptions": {}
        },
        "user_install": {
          "aliases": [],
          "description": "Only applies if state is C(present). Installs gems in the local user's cache or for all users",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Ruby Gem dependencies with Bundler"
    },
    "examples": "\n- name: Install gems from a Gemfile in the current directory\n  community.general.bundler:\n    state: present\n    executable: ~/.rvm/gems/2.1.5/bin/bundle\n\n- name: Exclude the production group from installing\n  community.general.bundler:\n    state: present\n    exclude_groups: production\n\n- name: Install gems into ./vendor/bundle\n  community.general.bundler:\n    state: present\n    deployment_mode: yes\n\n- name: Install gems using a Gemfile in another directory\n  community.general.bundler:\n    state: present\n    gemfile: ../rails_project/Gemfile\n\n- name: Update Gemfile in another directory\n  community.general.bundler:\n    state: latest\n    chdir: ~/rails_project\n"
  },
  "community.general.bzr": {
    "doc": {
      "description": "Manage I(bzr) branches to deploy files or software.",
      "has_action": false,
      "options": {
        "dest": {
          "aliases": [],
          "description": "Absolute path of where the branch should be cloned to.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "Path to bzr executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If C(yes), any modified files in the working tree will be discarded.  Before 1.9 the default value was C(yes).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "parent"
          ],
          "description": "SSH or HTTP protocol address of the parent branch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "What version of the branch to clone.  This can be the bzr revno or revid.",
          "default": "head",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Deploy software (or files) from bzr branches"
    },
    "examples": "\n- name: Checkout\n  community.general.bzr:\n    name: bzr+ssh://foosball.example.org/path/to/branch\n    dest: /srv/checkout\n    version: 22\n"
  },
  "community.general.campfire": {
    "doc": {
      "description": "Send a message to Campfire.\nMessages with newlines will result in a \"Paste\" message being sent.",
      "has_action": false,
      "options": {
        "msg": {
          "aliases": [],
          "description": "The message body.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "notify": {
          "aliases": [],
          "description": "Send a notification sound before the message.",
          "type": "str",
          "required": false,
          "choices": [
            "56k",
            "bell",
            "bezos",
            "bueller",
            "clowntown",
            "cottoneyejoe",
            "crickets",
            "dadgummit",
            "dangerzone",
            "danielsan",
            "deeper",
            "drama",
            "greatjob",
            "greyjoy",
            "guarantee",
            "heygirl",
            "horn",
            "horror",
            "inconceivable",
            "live",
            "loggins",
            "makeitso",
            "noooo",
            "nyan",
            "ohmy",
            "ohyeah",
            "pushit",
            "rimshot",
            "rollout",
            "rumble",
            "sax",
            "secret",
            "sexyback",
            "story",
            "tada",
            "tmyk",
            "trololo",
            "trombone",
            "unix",
            "vuvuzela",
            "what",
            "whoomp",
            "yeah",
            "yodel"
          ],
          "suboptions": {}
        },
        "room": {
          "aliases": [],
          "description": "Room number to which the message should be sent.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "subscription": {
          "aliases": [],
          "description": "The subscription name to use.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [],
      "short_description": "Send a message to Campfire"
    },
    "examples": "\n- name: Send a message to Campfire\n  community.general.campfire:\n    subscription: foo\n    token: 12345\n    room: 123\n    msg: Task completed.\n\n- name: Send a message to Campfire\n  community.general.campfire:\n    subscription: foo\n    token: 12345\n    room: 123\n    notify: loggins\n    msg: Task completed ... with feeling.\n"
  },
  "community.general.capabilities": {
    "doc": {
      "description": "This module manipulates files privileges using the Linux capabilities(7) system.",
      "has_action": false,
      "notes": "The capabilities system will automatically transform operators and flags into the effective set, so for example, C(cap_foo=ep) will probably become C(cap_foo+ep).\nThis module does not attempt to determine the final operator and flags to compare, so you will want to ensure that your capabilities argument matches the final capabilities.",
      "options": {
        "capability": {
          "aliases": [
            "cap"
          ],
          "description": "Desired capability to set (with operator and flags, if state is C(present)) or remove (if state is C(absent))",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "key"
          ],
          "description": "Specifies the path to the file to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the entry should be present or absent in the file's capabilities.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage Linux capabilities"
    },
    "examples": "\n- name: Set cap_sys_chroot+ep on /foo\n  community.general.capabilities:\n    path: /foo\n    capability: cap_sys_chroot+ep\n    state: present\n\n- name: Remove cap_net_bind_service from /bar\n  community.general.capabilities:\n    path: /bar\n    capability: cap_net_bind_service\n    state: absent\n"
  },
  "community.general.cargo": {
    "doc": {
      "description": "Manage Rust packages with cargo.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "The name of a Rust package to install.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "-> The base path where to install the Rust packages. Cargo automatically appends C(/bin). In other words, C(/usr/local) will become C(/usr/local/bin).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the Rust package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "-> The version to install. If I(name) contains multiple values, the module will try to install all of them in this version.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "cargo installed in bin path (recommended /usr/local/bin)"
      ],
      "short_description": "Manage Rust packages with cargo",
      "version_added": "4.3.0"
    },
    "examples": "\n- name: Install \"ludusavi\" Rust package\n  community.general.cargo:\n    name: ludusavi\n\n- name: Install \"ludusavi\" Rust package in version 0.10.0\n  community.general.cargo:\n    name: ludusavi\n    version: '0.10.0'\n\n- name: Install \"ludusavi\" Rust package to global location\n  community.general.cargo:\n    name: ludusavi\n    path: /usr/local\n\n- name: Remove \"ludusavi\" Rust package\n  community.general.cargo:\n    name: ludusavi\n    state: absent\n\n- name: Update \"ludusavi\" Rust package its latest version\n  community.general.cargo:\n    name: ludusavi\n    state: latest\n"
  },
  "community.general.catapult": {
    "doc": {
      "description": "Allows notifications to be sent using sms / mms via the catapult bandwidth api.",
      "has_action": false,
      "notes": "Will return changed even if the media url is wrong.\nWill return changed if the destination number is invalid.",
      "options": {
        "api_secret": {
          "aliases": [],
          "description": "Api Secret from Api account page.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "Api Token from Api account page.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "The phone number or numbers the message should be sent to (must be in E.164 format, like C(+19195551212)).",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "media": {
          "aliases": [],
          "description": "For MMS messages, a media url to the location of the media to be sent with the message.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The contents of the text message (must be 2048 characters or less).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "One of your catapult telephone numbers the message should come from (must be in E.164 format, like C(+19195551212)).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user_id": {
          "aliases": [],
          "description": "User Id from Api account page.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Send a sms / mms using the catapult bandwidth api"
    },
    "examples": "\n- name: Send a mms to multiple users\n  community.general.catapult:\n    src: \"+15035555555\"\n    dest:\n      - \"+12525089000\"\n      - \"+12018994225\"\n    media: \"http://example.com/foobar.jpg\"\n    msg: \"Task is complete\"\n    user_id: \"{{ user_id }}\"\n    api_token: \"{{ api_token }}\"\n    api_secret: \"{{ api_secret }}\"\n\n- name: Send a sms to a single user\n  community.general.catapult:\n    src: \"+15035555555\"\n    dest: \"+12018994225\"\n    msg: \"Consider yourself notified\"\n    user_id: \"{{ user_id }}\"\n    api_token: \"{{ api_token }}\"\n    api_secret: \"{{ api_secret }}\"\n\n"
  },
  "community.general.circonus_annotation": {
    "doc": {
      "description": "Create an annotation event with a given category, title and description. Optionally start, end or durations can be provided",
      "has_action": false,
      "notes": "Check mode isn't supported.",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Circonus API key",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Annotation Category",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of annotation",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "duration": {
          "aliases": [],
          "description": "Duration in seconds of annotation",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "start": {
          "aliases": [],
          "description": "Unix timestamp of event start\nIf not specified, it defaults to I(now).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "stop": {
          "aliases": [],
          "description": "Unix timestamp of event end\nIf not specified, it defaults to I(now) + I(duration).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "Title of annotation",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "requests (either >= 2.0.0 for Python 3, or >= 1.0.0 for Python 2)"
      ],
      "short_description": "create an annotation in circonus"
    },
    "examples": "\n- name: Create a simple annotation event with a source, defaults to start and end time of now\n  community.general.circonus_annotation:\n    api_key: XXXXXXXXXXXXXXXXX\n    title: App Config Change\n    description: This is a detailed description of the config change\n    category: This category groups like annotations\n\n- name: Create an annotation with a duration of 5 minutes and a default start time of now\n  community.general.circonus_annotation:\n    api_key: XXXXXXXXXXXXXXXXX\n    title: App Config Change\n    description: This is a detailed description of the config change\n    category: This category groups like annotations\n    duration: 300\n\n- name: Create an annotation with a start_time and end_time\n  community.general.circonus_annotation:\n    api_key: XXXXXXXXXXXXXXXXX\n    title: App Config Change\n    description: This is a detailed description of the config change\n    category: This category groups like annotations\n    start_time: 1395940006\n    end_time: 1395954407\n"
  },
  "community.general.cisco_spark": {
    "doc": {
      "description": "Send a message to a Cisco Webex Teams Room or Individual with options to control the formatting.",
      "has_action": false,
      "notes": "The C(recipient_id) type must be valid for the supplied C(recipient_id).\nFull API documentation can be found at U(https://developer.webex.com/docs/api/basics).",
      "options": {
        "msg": {
          "aliases": [],
          "description": "The message you would like to send.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "msg_type": {
          "aliases": [
            "message_type"
          ],
          "description": "Specifies how you would like the message formatted.",
          "default": "text",
          "type": "str",
          "required": false,
          "choices": [
            "text",
            "markdown"
          ],
          "suboptions": {}
        },
        "personal_token": {
          "aliases": [
            "token"
          ],
          "description": "Your personal access token required to validate the Webex Teams API.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "recipient_id": {
          "aliases": [],
          "description": "The unique identifier associated with the supplied C(recipient_type).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "recipient_type": {
          "aliases": [],
          "description": "The request parameter you would like to send the message to.\nMessages can be sent to either a room or individual (by ID or E-Mail).",
          "type": "str",
          "required": true,
          "choices": [
            "roomId",
            "toPersonEmail",
            "toPersonId"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Send a message to a Cisco Webex Teams Room or Individual"
    },
    "examples": "\n# Note: The following examples assume a variable file has been imported\n# that contains the appropriate information.\n\n- name: Cisco Webex Teams - Markdown Message to a Room\n  community.general.cisco_webex:\n    recipient_type: roomId\n    recipient_id: \"{{ room_id }}\"\n    msg_type: markdown\n    personal_token: \"{{ token }}\"\n    msg: \"**Cisco Webex Teams Ansible Module - Room Message in Markdown**\"\n\n- name: Cisco Webex Teams - Text Message to a Room\n  community.general.cisco_webex:\n    recipient_type: roomId\n    recipient_id: \"{{ room_id }}\"\n    msg_type: text\n    personal_token: \"{{ token }}\"\n    msg: \"Cisco Webex Teams Ansible Module - Room Message in Text\"\n\n- name: Cisco Webex Teams - Text Message by an Individuals ID\n  community.general.cisco_webex:\n    recipient_type: toPersonId\n    recipient_id: \"{{ person_id}}\"\n    msg_type: text\n    personal_token: \"{{ token }}\"\n    msg: \"Cisco Webex Teams Ansible Module - Text Message to Individual by ID\"\n\n- name: Cisco Webex Teams - Text Message by an Individuals E-Mail Address\n  community.general.cisco_webex:\n    recipient_type: toPersonEmail\n    recipient_id: \"{{ person_email }}\"\n    msg_type: text\n    personal_token: \"{{ token }}\"\n    msg: \"Cisco Webex Teams Ansible Module - Text Message to Individual by E-Mail\"\n\n"
  },
  "community.general.cisco_webex": {
    "doc": {
      "description": "Send a message to a Cisco Webex Teams Room or Individual with options to control the formatting.",
      "has_action": false,
      "notes": "The C(recipient_id) type must be valid for the supplied C(recipient_id).\nFull API documentation can be found at U(https://developer.webex.com/docs/api/basics).",
      "options": {
        "msg": {
          "aliases": [],
          "description": "The message you would like to send.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "msg_type": {
          "aliases": [
            "message_type"
          ],
          "description": "Specifies how you would like the message formatted.",
          "default": "text",
          "type": "str",
          "required": false,
          "choices": [
            "text",
            "markdown"
          ],
          "suboptions": {}
        },
        "personal_token": {
          "aliases": [
            "token"
          ],
          "description": "Your personal access token required to validate the Webex Teams API.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "recipient_id": {
          "aliases": [],
          "description": "The unique identifier associated with the supplied C(recipient_type).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "recipient_type": {
          "aliases": [],
          "description": "The request parameter you would like to send the message to.\nMessages can be sent to either a room or individual (by ID or E-Mail).",
          "type": "str",
          "required": true,
          "choices": [
            "roomId",
            "toPersonEmail",
            "toPersonId"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Send a message to a Cisco Webex Teams Room or Individual"
    },
    "examples": "\n# Note: The following examples assume a variable file has been imported\n# that contains the appropriate information.\n\n- name: Cisco Webex Teams - Markdown Message to a Room\n  community.general.cisco_webex:\n    recipient_type: roomId\n    recipient_id: \"{{ room_id }}\"\n    msg_type: markdown\n    personal_token: \"{{ token }}\"\n    msg: \"**Cisco Webex Teams Ansible Module - Room Message in Markdown**\"\n\n- name: Cisco Webex Teams - Text Message to a Room\n  community.general.cisco_webex:\n    recipient_type: roomId\n    recipient_id: \"{{ room_id }}\"\n    msg_type: text\n    personal_token: \"{{ token }}\"\n    msg: \"Cisco Webex Teams Ansible Module - Room Message in Text\"\n\n- name: Cisco Webex Teams - Text Message by an Individuals ID\n  community.general.cisco_webex:\n    recipient_type: toPersonId\n    recipient_id: \"{{ person_id}}\"\n    msg_type: text\n    personal_token: \"{{ token }}\"\n    msg: \"Cisco Webex Teams Ansible Module - Text Message to Individual by ID\"\n\n- name: Cisco Webex Teams - Text Message by an Individuals E-Mail Address\n  community.general.cisco_webex:\n    recipient_type: toPersonEmail\n    recipient_id: \"{{ person_email }}\"\n    msg_type: text\n    personal_token: \"{{ token }}\"\n    msg: \"Cisco Webex Teams Ansible Module - Text Message to Individual by E-Mail\"\n\n"
  },
  "community.general.clc_aa_policy": {
    "doc": {
      "description": "An Ansible module to Create or Delete Anti Affinity Policies at CenturyLink Cloud.",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "location": {
          "aliases": [],
          "description": "Datacenter in which the policy lives/should live.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the Anti Affinity Policy.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create or delete the policy.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "Create or Delete Anti Affinity Policies at CenturyLink Cloud."
    },
    "examples": "\n# Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples\n\n---\n- name: Create AA Policy\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Create an Anti Affinity Policy\n      community.general.clc_aa_policy:\n        name: Hammer Time\n        location: UK3\n        state: present\n      register: policy\n\n    - name: Debug\n      ansible.builtin.debug:\n        var: policy\n\n- name: Delete AA Policy\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Delete an Anti Affinity Policy\n      community.general.clc_aa_policy:\n        name: Hammer Time\n        location: UK3\n        state: absent\n      register: policy\n\n    - name: Debug\n      ansible.builtin.debug:\n        var: policy\n"
  },
  "community.general.clc_alert_policy": {
    "doc": {
      "description": "An Ansible module to Create or Delete Alert Policies at CenturyLink Cloud.",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "alert_recipients": {
          "aliases": [],
          "description": "A list of recipient email ids to notify the alert. This is required for state 'present'",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "alias": {
          "aliases": [],
          "description": "The alias of your CLC Account",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "duration": {
          "aliases": [],
          "description": "The length of time in minutes that the condition must exceed the threshold. This is required for state 'present'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The alert policy id. This is mutually exclusive with name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "metric": {
          "aliases": [],
          "description": "The metric on which to measure the condition that will trigger the alert. This is required for state 'present'",
          "type": "str",
          "required": false,
          "choices": [
            "cpu",
            "memory",
            "disk"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the alert policy. This is mutually exclusive with id",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create or delete the policy.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "threshold": {
          "aliases": [],
          "description": "The threshold that will trigger the alert when the metric equals or exceeds it. This is required for state 'present' This number represents a percentage and must be a value between 5.0 - 95.0 that is a multiple of 5.0",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "Create or Delete Alert Policies at CenturyLink Cloud."
    },
    "examples": "\n# Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples\n\n---\n- name: Create Alert Policy Example\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Create an Alert Policy for disk above 80% for 5 minutes\n      community.general.clc_alert_policy:\n        alias: wfad\n        name: 'alert for disk > 80%'\n        alert_recipients:\n            - test1@centurylink.com\n            - test2@centurylink.com\n        metric: 'disk'\n        duration: '00:05:00'\n        threshold: 80\n        state: present\n      register: policy\n\n    - name: Debug\n      ansible.builtin.debug: var=policy\n\n- name: Delete Alert Policy Example\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Delete an Alert Policy\n      community.general.clc_alert_policy:\n        alias: wfad\n        name: 'alert for disk > 80%'\n        state: absent\n      register: policy\n\n    - name: Debug\n      ansible.builtin.debug: var=policy\n"
  },
  "community.general.clc_blueprint_package": {
    "doc": {
      "description": "An Ansible module to deploy blue print package on a set of servers in CenturyLink Cloud.",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "package_id": {
          "aliases": [],
          "description": "The package id of the blue print.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "package_params": {
          "aliases": [],
          "description": "The dictionary of arguments required to deploy the blue print.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "server_ids": {
          "aliases": [],
          "description": "A list of server Ids to deploy the blue print package.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to install or uninstall the package. Currently it supports only \"present\" for install action.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for the tasks to finish before returning.",
          "default": "True",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "deploys a blue print package on a set of servers in CenturyLink Cloud."
    },
    "examples": "\n# Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples\n\n- name: Deploy package\n  community.general.clc_blueprint_package:\n        server_ids:\n            - UC1TEST-SERVER1\n            - UC1TEST-SERVER2\n        package_id: 77abb844-579d-478d-3955-c69ab4a7ba1a\n        package_params: {}\n"
  },
  "community.general.clc_firewall_policy": {
    "doc": {
      "description": "Create or delete or update firewall policies on Centurylink Cloud",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "destination": {
          "aliases": [],
          "description": "The list of destination addresses for traffic on the terminating firewall. This is required when state is 'present'",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "destination_account_alias": {
          "aliases": [],
          "description": "CLC alias for the destination account",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Whether the firewall policy is enabled or disabled",
          "default": "True",
          "type": "str",
          "required": false,
          "choices": [
            "True",
            "False"
          ],
          "suboptions": {}
        },
        "firewall_policy_id": {
          "aliases": [],
          "description": "Id of the firewall policy. This is required to update or delete an existing firewall policy",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "Target datacenter for the firewall policy",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ports": {
          "aliases": [],
          "description": "The list of ports associated with the policy. TCP and UDP can take in single ports or port ranges.\nExample: C(['any', 'icmp', 'TCP/123', 'UDP/123', 'TCP/123-456', 'UDP/123-456']).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The list  of source addresses for traffic on the originating firewall. This is required when state is 'present'",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "source_account_alias": {
          "aliases": [],
          "description": "CLC alias for the source account",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create or delete the firewall policy",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for the provisioning tasks to finish before returning.",
          "default": "True",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "Create/delete/update firewall policies"
    },
    "examples": "\n---\n- name: Create Firewall Policy\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Create / Verify an Firewall Policy at CenturyLink Cloud\n      clc_firewall:\n        source_account_alias: WFAD\n        location: VA1\n        state: present\n        source: 10.128.216.0/24\n        destination: 10.128.216.0/24\n        ports: Any\n        destination_account_alias: WFAD\n\n- name: Delete Firewall Policy\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Delete an Firewall Policy at CenturyLink Cloud\n      clc_firewall:\n        source_account_alias: WFAD\n        location: VA1\n        state: absent\n        firewall_policy_id: c62105233d7a4231bd2e91b9c791e43e1\n"
  },
  "community.general.clc_group": {
    "doc": {
      "description": "Create or delete Server Groups at Centurylink Centurylink Cloud",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "description": {
          "aliases": [],
          "description": "A description of the Server Group",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "Datacenter to create the group in. If location is not provided, the group gets created in the default datacenter associated with the account",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the Server Group",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parent": {
          "aliases": [],
          "description": "The parent group of the server group. If parent is not provided, it creates the group at top level.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create or delete the group",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for the tasks to finish before returning.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "Create/delete Server Groups at Centurylink Cloud"
    },
    "examples": "\n\n# Create a Server Group\n\n---\n- name: Create Server Group\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Create / Verify a Server Group at CenturyLink Cloud\n      community.general.clc_group:\n        name: My Cool Server Group\n        parent: Default Group\n        state: present\n      register: clc\n\n    - name: Debug\n      ansible.builtin.debug:\n        var: clc\n\n# Delete a Server Group\n- name: Delete Server Group\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Delete / Verify Absent a Server Group at CenturyLink Cloud\n      community.general.clc_group:\n        name: My Cool Server Group\n        parent: Default Group\n        state: absent\n      register: clc\n\n    - name: Debug\n      ansible.builtin.debug:\n        var: clc\n"
  },
  "community.general.clc_loadbalancer": {
    "doc": {
      "description": "An Ansible module to Create, Delete shared loadbalancers in CenturyLink Cloud.",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "alias": {
          "aliases": [],
          "description": "The alias of your CLC Account",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A description for the loadbalancer",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The location of the datacenter where the load balancer resides in",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "method": {
          "aliases": [],
          "description": "-The balancing method for the load balancer pool",
          "type": "str",
          "required": false,
          "choices": [
            "leastConnection",
            "roundRobin"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the loadbalancer",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nodes": {
          "aliases": [],
          "description": "A list of nodes that needs to be added to the load balancer pool",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "persistence": {
          "aliases": [],
          "description": "The persistence method for the load balancer",
          "type": "str",
          "required": false,
          "choices": [
            "standard",
            "sticky"
          ],
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port to configure on the public-facing side of the load balancer pool",
          "type": "str",
          "required": false,
          "choices": [
            "80",
            "443"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create or delete the load balancer pool",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "port_absent",
            "nodes_present",
            "nodes_absent"
          ],
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "The status of the loadbalancer",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "Create, Delete shared loadbalancers in CenturyLink Cloud."
    },
    "examples": "\n# Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples\n- name: Create Loadbalancer\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Actually Create things\n      community.general.clc_loadbalancer:\n        name: test\n        description: test\n        alias: TEST\n        location: WA1\n        port: 443\n        nodes:\n          - ipAddress: 10.11.22.123\n            privatePort: 80\n        state: present\n\n- name: Add node to an existing loadbalancer pool\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Actually Create things\n      community.general.clc_loadbalancer:\n        name: test\n        description: test\n        alias: TEST\n        location: WA1\n        port: 443\n        nodes:\n          - ipAddress: 10.11.22.234\n            privatePort: 80\n        state: nodes_present\n\n- name: Remove node from an existing loadbalancer pool\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Actually Create things\n      community.general.clc_loadbalancer:\n        name: test\n        description: test\n        alias: TEST\n        location: WA1\n        port: 443\n        nodes:\n          - ipAddress: 10.11.22.234\n            privatePort: 80\n        state: nodes_absent\n\n- name: Delete LoadbalancerPool\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Actually Delete things\n      community.general.clc_loadbalancer:\n        name: test\n        description: test\n        alias: TEST\n        location: WA1\n        port: 443\n        nodes:\n          - ipAddress: 10.11.22.123\n            privatePort: 80\n        state: port_absent\n\n- name: Delete Loadbalancer\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Actually Delete things\n      community.general.clc_loadbalancer:\n        name: test\n        description: test\n        alias: TEST\n        location: WA1\n        port: 443\n        nodes:\n          - ipAddress: 10.11.22.123\n            privatePort: 80\n        state: absent\n"
  },
  "community.general.clc_modify_server": {
    "doc": {
      "description": "An Ansible module to modify servers in CenturyLink Cloud.",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "alert_policy_id": {
          "aliases": [],
          "description": "The alert policy id to be associated to the server. This is mutually exclusive with 'alert_policy_name'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alert_policy_name": {
          "aliases": [],
          "description": "The alert policy name to be associated to the server. This is mutually exclusive with 'alert_policy_id'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "anti_affinity_policy_id": {
          "aliases": [],
          "description": "The anti affinity policy id to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_name'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "anti_affinity_policy_name": {
          "aliases": [],
          "description": "The anti affinity policy name to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_id'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu": {
          "aliases": [],
          "description": "How many CPUs to update on the server",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "Memory (in GB) to set to the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_ids": {
          "aliases": [],
          "description": "A list of server Ids to modify.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state to insure that the provided resources are in.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for the provisioning tasks to finish before returning.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "modify servers in CenturyLink Cloud."
    },
    "examples": "\n# Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples\n\n- name: Set the cpu count to 4 on a server\n  community.general.clc_modify_server:\n    server_ids:\n        - UC1TESTSVR01\n        - UC1TESTSVR02\n    cpu: 4\n    state: present\n\n- name: Set the memory to 8GB on a server\n  community.general.clc_modify_server:\n    server_ids:\n        - UC1TESTSVR01\n        - UC1TESTSVR02\n    memory: 8\n    state: present\n\n- name: Set the anti affinity policy on a server\n  community.general.clc_modify_server:\n    server_ids:\n        - UC1TESTSVR01\n        - UC1TESTSVR02\n    anti_affinity_policy_name: 'aa_policy'\n    state: present\n\n- name: Remove the anti affinity policy on a server\n  community.general.clc_modify_server:\n    server_ids:\n        - UC1TESTSVR01\n        - UC1TESTSVR02\n    anti_affinity_policy_name: 'aa_policy'\n    state: absent\n\n- name: Add the alert policy on a server\n  community.general.clc_modify_server:\n    server_ids:\n        - UC1TESTSVR01\n        - UC1TESTSVR02\n    alert_policy_name: 'alert_policy'\n    state: present\n\n- name: Remove the alert policy on a server\n  community.general.clc_modify_server:\n    server_ids:\n        - UC1TESTSVR01\n        - UC1TESTSVR02\n    alert_policy_name: 'alert_policy'\n    state: absent\n\n- name: Ret the memory to 16GB and cpu to 8 core on a lust if servers\n  community.general.clc_modify_server:\n    server_ids:\n        - UC1TESTSVR01\n        - UC1TESTSVR02\n    cpu: 8\n    memory: 16\n    state: present\n"
  },
  "community.general.clc_publicip": {
    "doc": {
      "description": "An Ansible module to add or delete public ip addresses on an existing server or servers in CenturyLink Cloud.",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "ports": {
          "aliases": [],
          "description": "A list of ports to expose. This is required when state is 'present'",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol that the public IP will listen for.",
          "default": "TCP",
          "type": "str",
          "required": false,
          "choices": [
            "TCP",
            "UDP",
            "ICMP"
          ],
          "suboptions": {}
        },
        "server_ids": {
          "aliases": [],
          "description": "A list of servers to create public ips on.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determine whether to create or delete public IPs. If present module will not create a second public ip if one already exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for the tasks to finish before returning.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "Add and Delete public ips on servers in CenturyLink Cloud."
    },
    "examples": "\n# Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples\n\n- name: Add Public IP to Server\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Create Public IP For Servers\n      community.general.clc_publicip:\n        protocol: TCP\n        ports:\n          - 80\n        server_ids:\n          - UC1TEST-SVR01\n          - UC1TEST-SVR02\n        state: present\n      register: clc\n\n    - name: Debug\n      ansible.builtin.debug:\n        var: clc\n\n- name: Delete Public IP from Server\n  hosts: localhost\n  gather_facts: False\n  connection: local\n  tasks:\n    - name: Create Public IP For Servers\n      community.general.clc_publicip:\n        server_ids:\n          - UC1TEST-SVR01\n          - UC1TEST-SVR02\n        state: absent\n      register: clc\n\n    - name: Debug\n      ansible.builtin.debug:\n        var: clc\n"
  },
  "community.general.clc_server": {
    "doc": {
      "description": "An Ansible module to Create, Delete, Start and Stop servers in CenturyLink Cloud.",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "add_public_ip": {
          "aliases": [],
          "description": "Whether to add a public ip to the server",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "additional_disks": {
          "aliases": [],
          "description": "The list of additional disks for the server",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "alert_policy_id": {
          "aliases": [],
          "description": "The alert policy to assign to the server. This is mutually exclusive with 'alert_policy_name'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alert_policy_name": {
          "aliases": [],
          "description": "The alert policy to assign to the server. This is mutually exclusive with 'alert_policy_id'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alias": {
          "aliases": [],
          "description": "The account alias to provision the servers under.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "anti_affinity_policy_id": {
          "aliases": [],
          "description": "The anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_name'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "anti_affinity_policy_name": {
          "aliases": [],
          "description": "The anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_id'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "configuration_id": {
          "aliases": [],
          "description": "Only required for bare metal servers. Specifies the identifier for the specific configuration type of bare metal server to deploy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "The number of servers to build (mutually exclusive with exact_count)",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "count_group": {
          "aliases": [],
          "description": "Required when exact_count is specified.  The Server Group use to determine how many servers to deploy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu": {
          "aliases": [],
          "description": "How many CPUs to provision on the server",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_autoscale_policy_id": {
          "aliases": [],
          "description": "The autoscale policy to assign to the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_fields": {
          "aliases": [],
          "description": "The list of custom fields to set on the server.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to set for the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "exact_count": {
          "aliases": [],
          "description": "Run in idempotent mode.  Will insure that this exact number of servers are running in the provided group, creating and deleting them to reach that count.  Requires count_group to be set.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "The Server Group to create servers under.",
          "default": "Default Group",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "The IP Address for the server. One is assigned if not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The Datacenter to create servers in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "managed_os": {
          "aliases": [],
          "description": "Whether to create the server as 'Managed' or not.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "Memory in GB.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A 1 to 6 character identifier to use for the server. This is required when state is 'present'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_id": {
          "aliases": [],
          "description": "The network UUID on which to create servers.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "os_type": {
          "aliases": [],
          "description": "Only required for bare metal servers. Specifies the OS to provision with the bare metal server.",
          "type": "str",
          "required": false,
          "choices": [
            "redHat6_64Bit",
            "centOS6_64Bit",
            "windows2012R2Standard_64Bit",
            "ubuntu14_64Bit"
          ],
          "suboptions": {}
        },
        "packages": {
          "aliases": [],
          "description": "The list of blue print packages to run on the server after its created.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for the administrator / root user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "primary_dns": {
          "aliases": [],
          "description": "Primary DNS used by the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_ip_ports": {
          "aliases": [],
          "description": "A list of ports to allow on the firewall to the servers public ip, if add_public_ip is set to True.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "public_ip_protocol": {
          "aliases": [],
          "description": "The protocol to use for the public ip if add_public_ip is set to True.",
          "default": "TCP",
          "type": "str",
          "required": false,
          "choices": [
            "TCP",
            "UDP",
            "ICMP"
          ],
          "suboptions": {}
        },
        "secondary_dns": {
          "aliases": [],
          "description": "Secondary DNS used by the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_ids": {
          "aliases": [],
          "description": "Required for started, stopped, and absent states. A list of server Ids to insure are started, stopped, or absent.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "source_server_password": {
          "aliases": [],
          "description": "The password for the source server if a clone is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state to insure that the provided resources are in.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "started",
            "stopped"
          ],
          "suboptions": {}
        },
        "storage_type": {
          "aliases": [],
          "description": "The type of storage to attach to the server.",
          "default": "standard",
          "type": "str",
          "required": false,
          "choices": [
            "standard",
            "hyperscale"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "The template to use for server creation.  Will search for a template if a partial string is provided. This is required when state is 'present'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "The time to live for the server in seconds.  The server will be deleted when this time expires.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of server to create.",
          "default": "standard",
          "type": "str",
          "required": false,
          "choices": [
            "standard",
            "hyperscale",
            "bareMetal"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for the provisioning tasks to finish before returning.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "Create, Delete, Start and Stop servers in CenturyLink Cloud."
    },
    "examples": "\n# Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples\n\n- name: Provision a single Ubuntu Server\n  community.general.clc_server:\n    name: test\n    template: ubuntu-14-64\n    count: 1\n    group: Default Group\n    state: present\n\n- name: Ensure 'Default Group' has exactly 5 servers\n  community.general.clc_server:\n    name: test\n    template: ubuntu-14-64\n    exact_count: 5\n    count_group: Default Group\n    group: Default Group\n\n- name: Stop a Server\n  community.general.clc_server:\n    server_ids:\n      - UC1ACCT-TEST01\n    state: stopped\n\n- name: Start a Server\n  community.general.clc_server:\n    server_ids:\n      - UC1ACCT-TEST01\n    state: started\n\n- name: Delete a Server\n  community.general.clc_server:\n    server_ids:\n      - UC1ACCT-TEST01\n    state: absent\n"
  },
  "community.general.clc_server_snapshot": {
    "doc": {
      "description": "An Ansible module to Create, Delete and Restore server snapshots in CenturyLink Cloud.",
      "has_action": false,
      "notes": "To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud - CLC_V2_API_PASSWORD, the account password for the centurylink cloud\nAlternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @ https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the centurylink cloud\nUsers can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.",
      "options": {
        "expiration_days": {
          "aliases": [],
          "description": "The number of days to keep the server snapshot before it expires.",
          "default": "7",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "server_ids": {
          "aliases": [],
          "description": "The list of CLC server Ids.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state to insure that the provided resources are in.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "restore"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for the provisioning tasks to finish before returning.",
          "default": "True",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python = 2.7",
        "requests >= 2.5.0",
        "clc-sdk"
      ],
      "short_description": "Create, Delete and Restore server snapshots in CenturyLink Cloud."
    },
    "examples": "\n# Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples\n\n- name: Create server snapshot\n  community.general.clc_server_snapshot:\n    server_ids:\n        - UC1TEST-SVR01\n        - UC1TEST-SVR02\n    expiration_days: 10\n    wait: True\n    state: present\n\n- name: Restore server snapshot\n  community.general.clc_server_snapshot:\n    server_ids:\n        - UC1TEST-SVR01\n        - UC1TEST-SVR02\n    wait: True\n    state: restore\n\n- name: Delete server snapshot\n  community.general.clc_server_snapshot:\n    server_ids:\n        - UC1TEST-SVR01\n        - UC1TEST-SVR02\n    wait: True\n    state: absent\n"
  },
  "community.general.cloud_init_data_facts": {
    "doc": {
      "description": "Gathers facts by reading the status.json and result.json of cloud-init.",
      "has_action": false,
      "notes": "See http://cloudinit.readthedocs.io/ for more information about cloud-init.",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter facts",
          "type": "str",
          "required": false,
          "choices": [
            "status",
            "result"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Retrieve facts of cloud-init."
    },
    "examples": "\n- name: Gather all facts of cloud init\n  community.general.cloud_init_data_facts:\n  register: result\n\n- ansible.builtin.debug:\n    var: result\n\n- name: Wait for cloud init to finish\n  community.general.cloud_init_data_facts:\n    filter: status\n  register: res\n  until: \"res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage\"\n  retries: 50\n  delay: 5\n"
  },
  "community.general.cloudflare_dns": {
    "doc": {
      "description": "Manages dns records via the Cloudflare API, see the docs: U(https://api.cloudflare.com/).",
      "has_action": false,
      "options": {
        "account_api_key": {
          "aliases": [
            "account_api_token"
          ],
          "description": "Account API key.\nRequired for api keys authentication.\nYou can obtain your API key from the bottom of the Cloudflare 'My Account' page, found here: U(https://dash.cloudflare.com/).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "account_email": {
          "aliases": [],
          "description": "Account email. Required for API keys authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "algorithm": {
          "aliases": [],
          "description": "Algorithm number.\nRequired for C(type=DS) and C(type=SSHFP) when C(state=present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "API token.\nRequired for api token authentication.\nYou can obtain your API token from the bottom of the Cloudflare 'My Account' page, found here: U(https://dash.cloudflare.com/).\nCan be specified in C(CLOUDFLARE_TOKEN) environment variable since community.general 2.0.0.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "cert_usage": {
          "aliases": [],
          "description": "Certificate usage number.\nRequired for C(type=TLSA) when C(state=present).",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3"
          ],
          "suboptions": {}
        },
        "hash_type": {
          "aliases": [],
          "description": "Hash type number.\nRequired for C(type=DS), C(type=SSHFP) and C(type=TLSA) when C(state=present).",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "2"
          ],
          "suboptions": {}
        },
        "key_tag": {
          "aliases": [],
          "description": "DNSSEC key tag.\nNeeded for C(type=DS) when C(state=present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Service port.\nRequired for C(type=SRV) and C(type=TLSA).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Record priority.\nRequired for C(type=MX) and C(type=SRV)",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proto": {
          "aliases": [],
          "description": "Service protocol. Required for C(type=SRV) and C(type=TLSA).\nCommon values are TCP and UDP.\nBefore Ansible 2.6 only TCP and UDP were available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxied": {
          "aliases": [],
          "description": "Proxy through Cloudflare network or just use DNS.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "record": {
          "aliases": [
            "name"
          ],
          "description": "Record to add.\nRequired if C(state=present).\nDefault is C(@) (e.g. the zone name).",
          "default": "@",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "selector": {
          "aliases": [],
          "description": "Selector number.\nRequired for C(type=TLSA) when C(state=present).",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1"
          ],
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "Record service.\nRequired for I(type=SRV).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "solo": {
          "aliases": [],
          "description": "Whether the record should be the only one for that record type and record name.\nOnly use with C(state=present).\nThis will delete all other records with the same record name and type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the record(s) should exist or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout for Cloudflare API calls.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "The TTL to give the new record.\nMust be between 120 and 2,147,483,647 seconds, or 1 for automatic.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of DNS record to create. Required if C(state=present).\nC(type=DS), C(type=SSHFP) and C(type=TLSA) added in Ansible 2.7.",
          "type": "str",
          "required": false,
          "choices": [
            "A",
            "AAAA",
            "CNAME",
            "DS",
            "MX",
            "NS",
            "SPF",
            "SRV",
            "SSHFP",
            "TLSA",
            "TXT"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [
            "content"
          ],
          "description": "The record value.\nRequired for C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "Service weight.\nRequired for C(type=SRV).",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [
            "domain"
          ],
          "description": "The name of the Zone to work with (e.g. \"example.com\").\nThe Zone must already exist.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6"
      ],
      "short_description": "Manage Cloudflare DNS records"
    },
    "examples": "\n- name: Create a test.example.net A record to point to 127.0.0.1\n  community.general.cloudflare_dns:\n    zone: example.net\n    record: test\n    type: A\n    value: 127.0.0.1\n    account_email: test@example.com\n    account_api_key: dummyapitoken\n  register: record\n\n- name: Create a record using api token\n  community.general.cloudflare_dns:\n    zone: example.net\n    record: test\n    type: A\n    value: 127.0.0.1\n    api_token: dummyapitoken\n\n- name: Create a example.net CNAME record to example.com\n  community.general.cloudflare_dns:\n    zone: example.net\n    type: CNAME\n    value: example.com\n    account_email: test@example.com\n    account_api_key: dummyapitoken\n    state: present\n\n- name: Change its TTL\n  community.general.cloudflare_dns:\n    zone: example.net\n    type: CNAME\n    value: example.com\n    ttl: 600\n    account_email: test@example.com\n    account_api_key: dummyapitoken\n    state: present\n\n- name: Delete the record\n  community.general.cloudflare_dns:\n    zone: example.net\n    type: CNAME\n    value: example.com\n    account_email: test@example.com\n    account_api_key: dummyapitoken\n    state: absent\n\n- name: Create a example.net CNAME record to example.com and proxy through Cloudflare's network\n  community.general.cloudflare_dns:\n    zone: example.net\n    type: CNAME\n    value: example.com\n    proxied: yes\n    account_email: test@example.com\n    account_api_key: dummyapitoken\n    state: present\n\n# This deletes all other TXT records named \"test.example.net\"\n- name: Create TXT record \"test.example.net\" with value \"unique value\"\n  community.general.cloudflare_dns:\n    domain: example.net\n    record: test\n    type: TXT\n    value: unique value\n    solo: true\n    account_email: test@example.com\n    account_api_key: dummyapitoken\n    state: present\n\n- name: Create an SRV record _foo._tcp.example.net\n  community.general.cloudflare_dns:\n    domain: example.net\n    service: foo\n    proto: tcp\n    port: 3500\n    priority: 10\n    weight: 20\n    type: SRV\n    value: fooserver.example.net\n\n- name: Create a SSHFP record login.example.com\n  community.general.cloudflare_dns:\n    zone: example.com\n    record: login\n    type: SSHFP\n    algorithm: 4\n    hash_type: 2\n    value: 9dc1d6742696d2f51ca1f1a78b3d16a840f7d111eb9454239e70db31363f33e1\n\n- name: Create a TLSA record _25._tcp.mail.example.com\n  community.general.cloudflare_dns:\n    zone: example.com\n    record: mail\n    port: 25\n    proto: tcp\n    type: TLSA\n    cert_usage: 3\n    selector: 1\n    hash_type: 1\n    value: 6b76d034492b493e15a7376fccd08e63befdad0edab8e442562f532338364bf3\n\n- name: Create a DS record for subdomain.example.com\n  community.general.cloudflare_dns:\n    zone: example.com\n    record: subdomain\n    type: DS\n    key_tag: 5464\n    algorithm: 8\n    hash_type: 2\n    value: B4EB5AC4467D2DFB3BAF9FB9961DC1B6FED54A58CDFAA3E465081EC86F89BFAB\n"
  },
  "community.general.cobbler_sync": {
    "doc": {
      "description": "Sync Cobbler to commit changes.",
      "has_action": false,
      "notes": "Concurrently syncing Cobbler is bound to fail with weird errors.\nOn python 2.7.8 and older (i.e. on RHEL7) you may need to tweak the python behaviour to disable certificate validation. More information at L(Certificate verification in Python standard library HTTP clients,https://access.redhat.com/articles/2039753).",
      "options": {
        "host": {
          "aliases": [],
          "description": "The name or IP address of the Cobbler system.",
          "default": "127.0.0.1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to log in to Cobbler.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port number to be used for REST connection.\nThe default value depends on parameter C(use_ssl).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_ssl": {
          "aliases": [],
          "description": "If C(no), an HTTP connection will be used instead of the default HTTPS connection.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username to log in to Cobbler.",
          "default": "cobbler",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only set to C(no) when used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Sync Cobbler"
    },
    "examples": "\n- name: Commit Cobbler changes\n  community.general.cobbler_sync:\n    host: cobbler01\n    username: cobbler\n    password: MySuperSecureP4sswOrd\n  run_once: yes\n  delegate_to: localhost\n"
  },
  "community.general.cobbler_system": {
    "doc": {
      "description": "Add, modify or remove systems in Cobbler",
      "has_action": false,
      "notes": "Concurrently syncing Cobbler is bound to fail with weird errors.\nOn python 2.7.8 and older (i.e. on RHEL7) you may need to tweak the python behaviour to disable certificate validation. More information at L(Certificate verification in Python standard library HTTP clients,https://access.redhat.com/articles/2039753).",
      "options": {
        "host": {
          "aliases": [],
          "description": "The name or IP address of the Cobbler system.",
          "default": "127.0.0.1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "A list of dictionaries containing interface options.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The system name to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to log in to Cobbler.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port number to be used for REST connection.\nThe default value depends on parameter C(use_ssl).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "A dictionary with system properties.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the system should be present, absent or a query is made.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "sync": {
          "aliases": [],
          "description": "Sync on changes.\nConcurrently syncing Cobbler is bound to fail.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_ssl": {
          "aliases": [],
          "description": "If C(no), an HTTP connection will be used instead of the default HTTPS connection.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username to log in to Cobbler.",
          "default": "cobbler",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only set to C(no) when used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage system objects in Cobbler"
    },
    "examples": "\n- name: Ensure the system exists in Cobbler\n  community.general.cobbler_system:\n    host: cobbler01\n    username: cobbler\n    password: MySuperSecureP4sswOrd\n    name: myhost\n    properties:\n      profile: CentOS6-x86_64\n      name_servers: [ 2.3.4.5, 3.4.5.6 ]\n      name_servers_search: foo.com, bar.com\n    interfaces:\n      eth0:\n        macaddress: 00:01:02:03:04:05\n        ipaddress: 1.2.3.4\n  delegate_to: localhost\n\n- name: Enable network boot in Cobbler\n  community.general.cobbler_system:\n    host: bdsol-aci-cobbler-01\n    username: cobbler\n    password: ins3965!\n    name: bdsol-aci51-apic1.cisco.com\n    properties:\n      netboot_enabled: yes\n    state: present\n  delegate_to: localhost\n\n- name: Query all systems in Cobbler\n  community.general.cobbler_system:\n    host: cobbler01\n    username: cobbler\n    password: MySuperSecureP4sswOrd\n    state: query\n  register: cobbler_systems\n  delegate_to: localhost\n\n- name: Query a specific system in Cobbler\n  community.general.cobbler_system:\n    host: cobbler01\n    username: cobbler\n    password: MySuperSecureP4sswOrd\n    name: '{{ inventory_hostname }}'\n    state: query\n  register: cobbler_properties\n  delegate_to: localhost\n\n- name: Ensure the system does not exist in Cobbler\n  community.general.cobbler_system:\n    host: cobbler01\n    username: cobbler\n    password: MySuperSecureP4sswOrd\n    name: myhost\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.general.composer": {
    "doc": {
      "description": "Composer is a tool for dependency management in PHP. It allows you to declare the dependent libraries your project needs and it will install them in your project for you.\n",
      "has_action": false,
      "notes": "Default options that are always appended in each execution are --no-ansi, --no-interaction and --no-progress if available.\nWe received reports about issues on macOS if composer was installed by Homebrew. Please use the official install method to avoid issues.",
      "options": {
        "apcu_autoloader": {
          "aliases": [
            "apcu-autoloader"
          ],
          "description": "Uses APCu to cache found/not-found classes\nAlias C(apcu-autoloader) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "arguments": {
          "aliases": [],
          "description": "Composer arguments like required package, version and so on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "classmap_authoritative": {
          "aliases": [
            "classmap-authoritative"
          ],
          "description": "Autoload classes from classmap only.\nImplicitely enable optimize_autoloader.\nRecommended especially for production, but can take a bit of time to run.\nAlias C(classmap-authoritative) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "Composer command like \"install\", \"update\" and so on.",
          "default": "install",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "composer_executable": {
          "aliases": [],
          "description": "Path to composer executable on the remote host, if composer is not in C(PATH) or a custom composer is needed.",
          "type": "path",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "executable": {
          "aliases": [
            "php_path"
          ],
          "description": "Path to PHP Executable on the remote host, if PHP is not in PATH.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "global_command": {
          "aliases": [
            "global-command"
          ],
          "description": "Runs the specified command globally.\nAlias C(global-command) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ignore_platform_reqs": {
          "aliases": [
            "ignore-platform-reqs"
          ],
          "description": "Ignore php, hhvm, lib-* and ext-* requirements and force the installation even if the local machine does not fulfill these.\nAlias C(ignore-platform-reqs) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "no_dev": {
          "aliases": [
            "no-dev"
          ],
          "description": "Disables installation of require-dev packages (see --no-dev).\nAlias C(no-dev) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "no_plugins": {
          "aliases": [
            "no-plugins"
          ],
          "description": "Disables all plugins ( see --no-plugins ).\nAlias C(no-plugins) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "no_scripts": {
          "aliases": [
            "no-scripts"
          ],
          "description": "Skips the execution of all scripts defined in composer.json (see --no-scripts).\nAlias C(no-scripts) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "optimize_autoloader": {
          "aliases": [
            "optimize-autoloader"
          ],
          "description": "Optimize autoloader during autoloader dump (see --optimize-autoloader).\nConvert PSR-0/4 autoloading to classmap to get a faster autoloader.\nRecommended especially for production, but can take a bit of time to run.\nAlias C(optimize-autoloader) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "prefer_dist": {
          "aliases": [
            "prefer-dist"
          ],
          "description": "Forces installation from package dist even for dev versions (see --prefer-dist).\nAlias C(prefer-dist) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "prefer_source": {
          "aliases": [
            "prefer-source"
          ],
          "description": "Forces installation from package sources when possible (see --prefer-source).\nAlias C(prefer-source) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "working_dir": {
          "aliases": [
            "working-dir"
          ],
          "description": "Directory of your project (see --working-dir). This is required when the command is not run globally.\nWill be ignored if C(global_command=true).\nAlias C(working-dir) has been deprecated and will be removed in community.general 5.0.0.",
          "type": "path",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "php",
        "composer installed in bin path (recommended /usr/local/bin) or specified in I(composer_executable)"
      ],
      "short_description": "Dependency Manager for PHP"
    },
    "examples": "\n- name: Download and installs all libs and dependencies outlined in the /path/to/project/composer.lock\n  community.general.composer:\n    command: install\n    working_dir: /path/to/project\n\n- name: Install a new package\n  community.general.composer:\n    command: require\n    arguments: my/package\n    working_dir: /path/to/project\n\n- name: Clone and install a project with all dependencies\n  community.general.composer:\n    command: create-project\n    arguments: package/package /path/to/project ~1.0\n    working_dir: /path/to/project\n    prefer_dist: yes\n\n- name: Install a package globally\n  community.general.composer:\n    command: require\n    global_command: yes\n    arguments: my/package\n"
  },
  "community.general.consul": {
    "doc": {
      "description": "Registers services and checks for an agent with a consul cluster. A service is some process running on the agent node that should be advertised by consul's discovery mechanism. It may optionally supply a check definition, a periodic service test to notify the consul cluster of service's health.\nChecks may also be registered per node e.g. disk usage, or cpu usage and notify the health of the entire node to the cluster. Service level checks do not require a check name or id as these are derived by Consul from the Service name and id respectively by appending 'service:' Node level checks require a I(check_name) and optionally a I(check_id).\nCurrently, there is no complete way to retrieve the script, interval or ttl metadata for a registered check. Without this metadata it is  not possible to tell if the data supplied with ansible represents a change to a check. As a result this does not attempt to determine changes and will always report a changed occurred. An API method is planned to supply this metadata so at that stage change management will be added.\nSee U(http://consul.io) for more details.",
      "has_action": false,
      "options": {
        "check_id": {
          "aliases": [],
          "description": "an ID for the service check. If I(state=absent), defaults to I(check_name). Ignored if part of a service definition.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "check_name": {
          "aliases": [],
          "description": "a name for the service check. Required if standalone, ignored if part of service definition.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "host of the consul agent defaults to localhost",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "http": {
          "aliases": [],
          "description": "checks can be registered with an HTTP endpoint. This means that consul will check that the http endpoint returns a successful HTTP status. I(interval) must also be provided with this option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "the interval at which the service check will be run. This is a number with a s or m suffix to signify the units of seconds or minutes e.g C(15s) or C(1m). If no suffix is supplied, m will be used by default e.g. C(1) will be C(1m). Required if the I(script) parameter is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notes": {
          "aliases": [],
          "description": "Notes to attach to check when registering it.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "the port on which the consul agent is running",
          "default": "8500",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "scheme": {
          "aliases": [],
          "description": "the protocol scheme on which the consul agent is running",
          "default": "http",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "script": {
          "aliases": [],
          "description": "the script/command that will be run periodically to check the health of the service. Scripts require I(interval) and vice versa.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_address": {
          "aliases": [],
          "description": "the address to advertise that the service will be listening on. This value will be passed as the I(address) parameter to Consul's C(/v1/agent/service/register) API method, so refer to the Consul API documentation for further details.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_id": {
          "aliases": [],
          "description": "the ID for the service, must be unique per node. If I(state=absent), defaults to the service name if supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_name": {
          "aliases": [],
          "description": "Unique name for the service on a node, must be unique per node, required if registering a service. May be omitted if registering a node level check",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_port": {
          "aliases": [],
          "description": "the port on which the service is listening. Can optionally be supplied for registration of a service, i.e. if I(service_name) or I(service_id) is set",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "register or deregister the consul service, defaults to present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "tags that will be attached to the service registration.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "tcp": {
          "aliases": [],
          "description": "Checks can be registered with a TCP port. This means that consul will check if the connection attempt to that port is successful (that is, the port is currently accepting connections). The format is C(host:port), for example C(localhost:80). I(interval) must also be provided with this option.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "A custom HTTP check timeout. The consul default is 10 seconds. Similar to the interval this is a number with a C(s) or C(m) suffix to signify the units of seconds or minutes, e.g. C(15s) or C(1m).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "the token key identifying an ACL rule set. May be required to register services.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "checks can be registered with a ttl instead of a I(script) and I(interval) this means that the service will check in with the agent before the ttl expires. If it doesn't the check will be considered failed. Required if registering a check and the script an interval are missing Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes e.g C(15s) or C(1m). If no suffix is supplied, C(m) will be used by default e.g. C(1) will be C(1m)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "whether to verify the TLS certificate of the consul agent",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-consul",
        "requests"
      ],
      "short_description": "Add, modify & delete services within a consul cluster."
    },
    "examples": "\n- name: Register nginx service with the local consul agent\n  community.general.consul:\n    service_name: nginx\n    service_port: 80\n\n- name: Register nginx service with curl check\n  community.general.consul:\n    service_name: nginx\n    service_port: 80\n    script: curl http://localhost\n    interval: 60s\n\n- name: register nginx with a tcp check\n  community.general.consul:\n    service_name: nginx\n    service_port: 80\n    interval: 60s\n    tcp: localhost:80\n\n- name: Register nginx with an http check\n  community.general.consul:\n    service_name: nginx\n    service_port: 80\n    interval: 60s\n    http: http://localhost:80/status\n\n- name: Register external service nginx available at 10.1.5.23\n  community.general.consul:\n    service_name: nginx\n    service_port: 80\n    service_address: 10.1.5.23\n\n- name: Register nginx with some service tags\n  community.general.consul:\n    service_name: nginx\n    service_port: 80\n    tags:\n      - prod\n      - webservers\n\n- name: Remove nginx service\n  community.general.consul:\n    service_name: nginx\n    state: absent\n\n- name: Register celery worker service\n  community.general.consul:\n    service_name: celery-worker\n    tags:\n      - prod\n      - worker\n\n- name: Create a node level check to test disk usage\n  community.general.consul:\n    check_name: Disk usage\n    check_id: disk_usage\n    script: /opt/disk_usage.py\n    interval: 5m\n\n- name: Register an http check against a service that's already registered\n  community.general.consul:\n    check_name: nginx-check2\n    check_id: nginx-check2\n    service_id: nginx\n    interval: 60s\n    http: http://localhost:80/morestatus\n"
  },
  "community.general.consul_acl": {
    "doc": {
      "description": "Allows the addition, modification and deletion of ACL keys and associated rules in a consul cluster via the agent. For more details on using and configuring ACLs, see https://www.consul.io/docs/guides/acl.html.",
      "has_action": false,
      "options": {
        "host": {
          "aliases": [],
          "description": "host of the consul agent defaults to localhost",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mgmt_token": {
          "aliases": [],
          "description": "a management token is required to manipulate the acl lists",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "the name that should be associated with the acl key, this is opaque to Consul",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "the port on which the consul agent is running",
          "default": "8500",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "rules that should be associated with a given token",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "scheme": {
          "aliases": [],
          "description": "the protocol scheme on which the consul agent is running",
          "default": "http",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "whether the ACL pair should be present or absent",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "the token key identifying an ACL rule set. If generated by consul this will be a UUID",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token_type": {
          "aliases": [],
          "description": "the type of token that should be created",
          "default": "client",
          "type": "str",
          "required": false,
          "choices": [
            "client",
            "management"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "whether to verify the tls certificate of the consul agent",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-consul",
        "pyhcl",
        "requests"
      ],
      "short_description": "Manipulate Consul ACL keys and rules"
    },
    "examples": "\n- name: Create an ACL with rules\n  community.general.consul_acl:\n    host: consul1.example.com\n    mgmt_token: some_management_acl\n    name: Foo access\n    rules:\n      - key: \"foo\"\n        policy: read\n      - key: \"private/foo\"\n        policy: deny\n\n- name: Create an ACL with a specific token\n  community.general.consul_acl:\n    host: consul1.example.com\n    mgmt_token: some_management_acl\n    name: Foo access\n    token: my-token\n    rules:\n      - key: \"foo\"\n        policy: read\n\n- name: Update the rules associated to an ACL token\n  community.general.consul_acl:\n    host: consul1.example.com\n    mgmt_token: some_management_acl\n    name: Foo access\n    token: some_client_token\n    rules:\n      - event: \"bbq\"\n        policy: write\n      - key: \"foo\"\n        policy: read\n      - key: \"private\"\n        policy: deny\n      - keyring: write\n      - node: \"hgs4\"\n        policy: write\n      - operator: read\n      - query: \"\"\n        policy: write\n      - service: \"consul\"\n        policy: write\n      - session: \"standup\"\n        policy: write\n\n- name: Remove a token\n  community.general.consul_acl:\n    host: consul1.example.com\n    mgmt_token: some_management_acl\n    token: 172bd5c8-9fe9-11e4-b1b0-3c15c2c9fd5e\n    state: absent\n"
  },
  "community.general.consul_kv": {
    "doc": {
      "description": "Allows the retrieval, addition, modification and deletion of key/value entries in a consul cluster via the agent. The entire contents of the record, including the indices, flags and session are returned as C(value).\nIf the C(key) represents a prefix then note that when a value is removed, the existing value if any is returned as part of the results.\nSee http://www.consul.io/docs/agent/http.html#kv for more details.",
      "has_action": false,
      "options": {
        "cas": {
          "aliases": [],
          "description": "Used when acquiring a lock with a session. If the C(cas) is C(0), then Consul will only put the key if it does not already exist. If the C(cas) value is non-zero, then the key is only set if the index matches the ModifyIndex of that key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flags": {
          "aliases": [],
          "description": "Opaque positive integer value that can be passed when setting a value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Host of the consul agent.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "The key at which the value should be stored.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which the consul agent is running.",
          "default": "8500",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "recurse": {
          "aliases": [],
          "description": "If the key represents a prefix, each entry with the prefix can be retrieved by setting this to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "retrieve": {
          "aliases": [],
          "description": "If the I(state) is C(present) and I(value) is set, perform a read after setting the value and return this value.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scheme": {
          "aliases": [],
          "description": "The protocol scheme on which the consul agent is running.",
          "default": "http",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session": {
          "aliases": [],
          "description": "The session that should be used to acquire or release a lock associated with a key/value pair.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The action to take with the supplied key and value. If the state is 'present' and `value` is set, the key contents will be set to the value supplied and `changed` will be set to `true` only if the value was different to the current contents. If the state is 'present' and `value` is not set, the existing value associated to the key will be returned. The state 'absent' will remove the key/value pair, again 'changed' will be set to true only if the key actually existed prior to the removal. An attempt can be made to obtain or free the lock associated with a key/value pair with the states 'acquire' or 'release' respectively. a valid session must be supplied to make the attempt changed will be true if the attempt is successful, false otherwise.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "acquire",
            "present",
            "release"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "The token key identifying an ACL rule set that controls access to the key value pair",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to verify the tls certificate of the consul agent.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value should be associated with the given key, required if C(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-consul",
        "requests"
      ],
      "short_description": "Manipulate entries in the key/value store of a consul cluster"
    },
    "examples": "\n# If the key does not exist, the value associated to the \"data\" property in `retrieved_key` will be `None`\n# If the key value is empty string, `retrieved_key[\"data\"][\"Value\"]` will be `None`\n- name: Retrieve a value from the key/value store\n  community.general.consul_kv:\n    key: somekey\n  register: retrieved_key\n\n- name: Add or update the value associated with a key in the key/value store\n  community.general.consul_kv:\n    key: somekey\n    value: somevalue\n\n- name: Remove a key from the store\n  community.general.consul_kv:\n    key: somekey\n    state: absent\n\n- name: Add a node to an arbitrary group via consul inventory (see consul.ini)\n  community.general.consul_kv:\n    key: ansible/groups/dc1/somenode\n    value: top_secret\n\n- name: Register a key/value pair with an associated session\n  community.general.consul_kv:\n    key: stg/node/server_birthday\n    value: 20160509\n    session: \"{{ sessionid }}\"\n    state: acquire\n"
  },
  "community.general.consul_session": {
    "doc": {
      "description": "Allows the addition, modification and deletion of sessions in a consul cluster. These sessions can then be used in conjunction with key value pairs to implement distributed locks. In depth documentation for working with sessions can be found at http://www.consul.io/docs/internals/sessions.html",
      "has_action": false,
      "options": {
        "behavior": {
          "aliases": [],
          "description": "The optional behavior that can be attached to the session when it is created. This controls the behavior when a session is invalidated.",
          "default": "release",
          "type": "str",
          "required": false,
          "choices": [
            "delete",
            "release"
          ],
          "suboptions": {}
        },
        "checks": {
          "aliases": [],
          "description": "Checks that will be used to verify the session health. If all the checks fail, the session will be invalidated and any locks associated with the session will be release and can be acquired once the associated lock delay has expired.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The name of the datacenter in which the session exists or should be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "The optional lock delay that can be attached to the session when it is created. Locks for invalidated sessions ar blocked from being acquired until this delay has expired. Durations are in seconds.",
          "default": "15",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The host of the consul agent defaults to localhost.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the session, required when I(state) is either C(info) or C(remove).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name that should be associated with the session. Required when I(state=node) is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "The name of the node that with which the session will be associated. by default this is the name of the agent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which the consul agent is running.",
          "default": "8500",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "scheme": {
          "aliases": [],
          "description": "The protocol scheme on which the consul agent is running.",
          "default": "http",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the session should be present i.e. created if it doesn't exist, or absent, removed if present. If created, the I(id) for the session is returned in the output. If C(absent), I(id) is required to remove the session. Info for a single session, all the sessions for a node or all available sessions can be retrieved by specifying C(info), C(node) or C(list) for the I(state); for C(node) or C(info), the node I(name) or session I(id) is required as parameter.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "info",
            "list",
            "node",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to verify the TLS certificate of the consul agent.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-consul",
        "requests"
      ],
      "short_description": "Manipulate consul sessions"
    },
    "examples": "\n- name: Register basic session with consul\n  community.general.consul_session:\n    name: session1\n\n- name: Register a session with an existing check\n  community.general.consul_session:\n    name: session_with_check\n    checks:\n      - existing_check_name\n\n- name: Register a session with lock_delay\n  community.general.consul_session:\n    name: session_with_delay\n    delay: 20s\n\n- name: Retrieve info about session by id\n  community.general.consul_session:\n    id: session_id\n    state: info\n\n- name: Retrieve active sessions\n  community.general.consul_session:\n    state: list\n"
  },
  "community.general.copr": {
    "doc": {
      "description": "This module can enable, disable or remove the specified repository.",
      "has_action": false,
      "notes": "Supports C(check_mode).",
      "options": {
        "chroot": {
          "aliases": [],
          "description": "The name of the chroot that you want to enable/disable/remove in the project, for example C(epel-7-x86_64). Default chroot is determined by the operating system, version of the operating system, and architecture on which the module is run.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The Copr host to work with.",
          "default": "copr.fedorainfracloud.org",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Copr directory name, for example C(@copr/copr-dev).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "This indicate which protocol to use with the host.",
          "default": "https",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to set this project as C(enabled), C(disabled) or C(absent).",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "dnf",
        "dnf-plugins-core"
      ],
      "short_description": "Manage one of the Copr repositories",
      "version_added": "2.0.0"
    },
    "examples": "\n- name: Enable project Test of the user schlupov\n  community.general.copr:\n    host: copr.fedorainfracloud.org\n    state: enabled\n    name: schlupov/Test\n    chroot: fedora-31-x86_64\n\n- name: Remove project integration_tests of the group copr\n  community.general.copr:\n    state: absent\n    name: '@copr/integration_tests'\n"
  },
  "community.general.cpanm": {
    "doc": {
      "description": "Manage Perl library dependencies using cpanminus.",
      "has_action": false,
      "notes": "Please note that U(http://search.cpan.org/dist/App-cpanminus/bin/cpanm, cpanm) must be installed on the remote host.\nThis module now comes with a choice of execution I(mode): C(compatibility) or C(new).\nC(compatibility) mode:\nWhen using C(compatibility) mode, the module will keep backward compatibility. This is the default mode.\nI(name) must be either a module name or a distribution file.\nIf the perl module given by I(name) is installed (at the exact I(version) when specified), then nothing happens. Otherwise, it will be installed using the C(cpanm) executable.\n\nI(name) cannot be an URL, or a git URL.\nC(cpanm) version specifiers do not work in this mode.\nC(new) mode:\nWhen using C(new) mode, the module will behave differently\nThe I(name) parameter may refer to a module name, a distribution file, a HTTP URL or a git repository URL as described in C(cpanminus) documentation.\n\nC(cpanm) version specifiers are recognized.",
      "options": {
        "executable": {
          "aliases": [],
          "description": "Override the path to the cpanm executable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "from_path": {
          "aliases": [],
          "description": "The local directory or C(tar.gz) file to install from.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "installdeps": {
          "aliases": [],
          "description": "Only install dependencies.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "locallib": {
          "aliases": [],
          "description": "Specify the install base to install modules.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "mirror": {
          "aliases": [],
          "description": "Specifies the base URL for the CPAN mirror to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mirror_only": {
          "aliases": [],
          "description": "Use the mirror's index file instead of the CPAN Meta DB.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Controls the module behavior. See notes below for more details.",
          "default": "compatibility",
          "type": "str",
          "required": false,
          "choices": [
            "compatibility",
            "new"
          ],
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "The Perl library to install. Valid values change according to the I(mode), see notes for more details.\nNote that for installing from a local path the parameter I(from_path) should be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_check": {
          "aliases": [],
          "description": "When in C(new) mode, this parameter can be used to check if there is a module I(name) installed (at I(version), when specified).",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "notest": {
          "aliases": [],
          "description": "Do not run unit tests.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Version specification for the perl module. When I(mode) is C(new), C(cpanm) version operators are accepted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Perl library dependencies."
    },
    "examples": "\n- name: Install Dancer perl package\n  community.general.cpanm:\n    name: Dancer\n\n- name: Install version 0.99_05 of the Plack perl package\n  community.general.cpanm:\n    name: MIYAGAWA/Plack-0.99_05.tar.gz\n\n- name: Install Dancer into the specified locallib\n  community.general.cpanm:\n    name: Dancer\n    locallib: /srv/webapps/my_app/extlib\n\n- name: Install perl dependencies from local directory\n  community.general.cpanm:\n    from_path: /srv/webapps/my_app/src/\n\n- name: Install Dancer perl package without running the unit tests in indicated locallib\n  community.general.cpanm:\n    name: Dancer\n    notest: True\n    locallib: /srv/webapps/my_app/extlib\n\n- name: Install Dancer perl package from a specific mirror\n  community.general.cpanm:\n    name: Dancer\n    mirror: 'http://cpan.cpantesters.org/'\n\n- name: Install Dancer perl package into the system root path\n  become: yes\n  community.general.cpanm:\n    name: Dancer\n\n- name: Install Dancer if it is not already installed OR the installed version is older than version 1.0\n  community.general.cpanm:\n    name: Dancer\n    version: '1.0'\n"
  },
  "community.general.cronvar": {
    "doc": {
      "description": "Use this module to manage crontab variables.\nThis module allows you to create, update, or delete cron variable definitions.",
      "has_action": false,
      "options": {
        "backup": {
          "aliases": [],
          "description": "If set, create a backup of the crontab before it is modified. The location of the backup is returned in the C(backup) variable by this module.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cron_file": {
          "aliases": [],
          "description": "If specified, uses this file instead of an individual user's crontab.\nWithout a leading C(/), this is assumed to be in I(/etc/cron.d).\nWith a leading C(/), this is taken as absolute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "insertafter": {
          "aliases": [],
          "description": "If specified, the variable will be inserted after the variable specified.\nUsed with C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "insertbefore": {
          "aliases": [],
          "description": "Used with C(state=present). If specified, the variable will be inserted just before the variable specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the crontab variable.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to ensure that the variable is present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The specific user whose crontab should be modified.\nThis parameter defaults to C(root) when unset.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value to set this variable to.\nRequired if C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "cron"
      ],
      "short_description": "Manage variables in crontabs"
    },
    "examples": "\n- name: Ensure entry like \"EMAIL=doug@ansibmod.con.com\" exists\n  community.general.cronvar:\n    name: EMAIL\n    value: doug@ansibmod.con.com\n\n- name: Ensure a variable does not exist. This may remove any variable named \"LEGACY\"\n  community.general.cronvar:\n    name: LEGACY\n    state: absent\n\n- name: Add a variable to a file under /etc/cron.d\n  community.general.cronvar:\n    name: LOGFILE\n    value: /var/log/yum-autoupdate.log\n    user: root\n    cron_file: ansible_yum-autoupdate\n"
  },
  "community.general.crypttab": {
    "doc": {
      "description": "Control Linux encrypted block devices that are set up during system boot in C(/etc/crypttab).",
      "has_action": false,
      "options": {
        "backing_device": {
          "aliases": [],
          "description": "Path to the underlying block device or file, or the UUID of a block-device prefixed with I(UUID=).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the encrypted block device as it appears in the C(/etc/crypttab) file, or optionally prefixed with C(/dev/mapper/), as it appears in the filesystem. I(/dev/mapper/) will be stripped from I(name).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "opts": {
          "aliases": [],
          "description": "A comma-delimited list of options. See C(crypttab(5) ) for details.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Encryption password, the path to a file containing the password, or C(-) or unset if the password should be entered at boot.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path to file to use instead of C(/etc/crypttab).\nThis might be useful in a chroot environment.",
          "default": "/etc/crypttab",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Use I(present) to add a line to C(/etc/crypttab) or update its definition if already present.\nUse I(absent) to remove a line with matching I(name).\nUse I(opts_present) to add options to those already present; options with different values will be updated.\nUse I(opts_absent) to remove options from the existing set.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "opts_absent",
            "opts_present",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Encrypted Linux block devices"
    },
    "examples": "\n- name: Set the options explicitly a device which must already exist\n  community.general.crypttab:\n    name: luks-home\n    state: present\n    opts: discard,cipher=aes-cbc-essiv:sha256\n\n- name: Add the 'discard' option to any existing options for all devices\n  community.general.crypttab:\n    name: '{{ item.device }}'\n    state: opts_present\n    opts: discard\n  loop: '{{ ansible_mounts }}'\n  when: \"'/dev/mapper/luks-' in {{ item.device }}\"\n"
  },
  "community.general.datadog_downtime": {
    "doc": {
      "description": "Manages downtimes within Datadog.\nOptions as described on U(https://docs.datadoghq.com/api/v1/downtimes/s).",
      "has_action": false,
      "options": {
        "api_host": {
          "aliases": [],
          "description": "The URL to the Datadog API.\nThis value can also be set with the C(DATADOG_HOST) environment variable.",
          "default": "https://api.datadoghq.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "Your Datadog API key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "app_key": {
          "aliases": [],
          "description": "Your Datadog app key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "downtime_message": {
          "aliases": [],
          "description": "A message to include with notifications for this downtime.\nEmail notifications can be sent to specific users by using the same \"@username\" notation as events.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end": {
          "aliases": [],
          "description": "POSIX timestamp to end the downtime. If not provided, the downtime is in effect until you cancel it.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The identifier of the downtime.\nIf empty, a new downtime gets created, otherwise it is either updated or deleted depending of the C(state).\nTo keep your playbook idempotent, you should save the identifier in a file and read it in a lookup.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "monitor_id": {
          "aliases": [],
          "description": "The ID of the monitor to mute. If not provided, the downtime applies to all monitors.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "monitor_tags": {
          "aliases": [],
          "description": "A list of monitor tags to which the downtime applies.\nThe resulting downtime applies to monitors that match ALL provided monitor tags.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "rrule": {
          "aliases": [],
          "description": "The C(RRULE) standard for defining recurring events.\nFor example, to have a recurring event on the first day of each month, select a type of rrule and set the C(FREQ) to C(MONTHLY) and C(BYMONTHDAY) to C(1).\nMost common rrule options from the iCalendar Spec are supported.\nAttributes specifying the duration in C(RRULE) are not supported (e.g. C(DTSTART), C(DTEND), C(DURATION)).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "A list of scopes to which the downtime applies.\nThe resulting downtime applies to sources that matches ALL provided scopes.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "start": {
          "aliases": [],
          "description": "POSIX timestamp to start the downtime. If not provided, the downtime starts the moment it is created.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The designated state of the downtime.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timezone": {
          "aliases": [],
          "description": "The timezone for the downtime.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "datadog-api-client",
        "Python 3.6+"
      ],
      "short_description": "Manages Datadog downtimes",
      "version_added": "2.0.0"
    },
    "examples": "\n  - name: Create a downtime\n    register: downtime_var\n    community.general.datadog_downtime:\n      state: present\n      monitor_tags:\n        - \"foo:bar\"\n      downtime_message: \"Downtime for foo:bar\"\n      scope: \"test\"\n      api_key: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n      app_key: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n      # Lookup the id in the file and ignore errors if the file doesn't exits, so downtime gets created\n      id: \"{{ lookup('file', inventory_hostname ~ '_downtime_id.txt', errors='ignore') }}\"\n  - name: Save downtime id to file for later updates and idempotence\n    delegate_to: localhost\n    copy:\n      content: \"{{ downtime.downtime.id }}\"\n      dest: \"{{ inventory_hostname ~ '_downtime_id.txt' }}\"\n"
  },
  "community.general.datadog_event": {
    "doc": {
      "description": "Allows to post events to Datadog (www.datadoghq.com) service.\nUses http://docs.datadoghq.com/api/#events API.",
      "has_action": false,
      "options": {
        "aggregation_key": {
          "aliases": [],
          "description": "An arbitrary string to use for aggregation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alert_type": {
          "aliases": [],
          "description": "Type of alert.",
          "default": "info",
          "type": "str",
          "required": false,
          "choices": [
            "error",
            "warning",
            "info",
            "success"
          ],
          "suboptions": {}
        },
        "api_host": {
          "aliases": [],
          "description": "DataDog API endpoint URL.",
          "type": "str",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "Your DataDog API key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "app_key": {
          "aliases": [],
          "description": "Your DataDog app key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "date_happened": {
          "aliases": [],
          "description": "POSIX timestamp of the event.\nDefault value is now.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Host name to associate with the event.\nIf not specified, it defaults to the remote system's hostname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "The priority of the event.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "normal",
            "low"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Comma separated list of tags to apply to the event.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "The body of the event.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "The event title.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Posts events to Datadog  service"
    },
    "examples": "\n- name: Post an event with low priority\n  community.general.datadog_event:\n    title: Testing from ansible\n    text: Test\n    priority: low\n    api_key: 9775a026f1ca7d1c6c5af9d94d9595a4\n    app_key: j4JyCYfefWHhgFgiZUqRm63AXHNZQyPGBfJtAzmN\n\n- name: Post an event with several tags\n  community.general.datadog_event:\n    title: Testing from ansible\n    text: Test\n    api_key: 9775a026f1ca7d1c6c5af9d94d9595a4\n    app_key: j4JyCYfefWHhgFgiZUqRm63AXHNZQyPGBfJtAzmN\n    tags: 'aa,bb,#host:{{ inventory_hostname }}'\n\n- name: Post an event with several tags to another endpoint\n  community.general.datadog_event:\n    title: Testing from ansible\n    text: Test\n    api_key: 9775a026f1ca7d1c6c5af9d94d9595a4\n    app_key: j4JyCYfefWHhgFgiZUqRm63AXHNZQyPGBfJtAzmN\n    api_host: 'https://example.datadoghq.eu'\n    tags:\n      - aa\n      - b\n      - '#host:{{ inventory_hostname }}'\n\n"
  },
  "community.general.datadog_monitor": {
    "doc": {
      "description": "Manages monitors within Datadog.\nOptions as described on https://docs.datadoghq.com/api/.",
      "has_action": false,
      "options": {
        "api_host": {
          "aliases": [],
          "description": "The URL to the Datadog API. Default value is C(https://api.datadoghq.com).\nThis value can also be set with the C(DATADOG_HOST) environment variable.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "Your Datadog API key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "app_key": {
          "aliases": [],
          "description": "Your Datadog app key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "escalation_message": {
          "aliases": [],
          "description": "A message to include with a re-notification. Supports the '@username' notification we allow elsewhere.\nNot applicable if I(renotify_interval=None).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "evaluation_delay": {
          "aliases": [],
          "description": "Time to delay evaluation (in seconds).\nEffective for sparse values.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The ID of the alert.\nIf set, will be used instead of the name to locate the alert.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "include_tags": {
          "aliases": [],
          "description": "Whether notifications from this monitor automatically inserts its triggering tags into the title.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "locked": {
          "aliases": [],
          "description": "Whether changes to this monitor should be restricted to the creator or admins.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the alert.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_host_delay": {
          "aliases": [],
          "description": "A positive integer representing the number of seconds to wait before evaluating the monitor for new hosts.\nThis gives the host time to fully initialize.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "no_data_timeframe": {
          "aliases": [],
          "description": "The number of minutes before a monitor will notify when data stops reporting.\nMust be at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.\nIf not specified, it defaults to 2x timeframe for metric, 2 minutes for service.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_message": {
          "aliases": [],
          "description": "A message to include with notifications for this monitor.\nEmail notifications can be sent to specific users by using the same '@username' notation as events.\nMonitor message template variables can be accessed by using double square brackets, i.e '[[' and ']]'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notify_audit": {
          "aliases": [],
          "description": "Whether tagged users will be notified on changes to this monitor.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "notify_no_data": {
          "aliases": [],
          "description": "Whether this monitor will notify when data stops reporting.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "The monitor query to notify on.\nSyntax varies depending on what type of monitor you are creating.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "renotify_interval": {
          "aliases": [],
          "description": "The number of minutes after the last notification before a monitor will re-notify on the current status.\nIt will only re-notify if it is not resolved.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "require_full_window": {
          "aliases": [],
          "description": "Whether this monitor needs a full window of data before it gets evaluated.\nWe highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "silenced": {
          "aliases": [],
          "description": "Dictionary of scopes to silence, with timestamps or None.\nEach scope will be muted until the given POSIX timestamp or forever if the value is None.",
          "default": "",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The designated state of the monitor.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "mute",
            "unmute"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "A list of tags to associate with your monitor when creating or updating.\nThis can help you categorize and filter monitors.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "thresholds": {
          "aliases": [],
          "description": "A dictionary of thresholds by status.\nOnly available for service checks and metric alerts.\nBecause each of them can have multiple thresholds, we do not define them directly in the query.\nIf not specified, it defaults to: C({'ok': 1, 'critical': 1, 'warning': 1}).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "timeout_h": {
          "aliases": [],
          "description": "The number of hours of the monitor not reporting data before it will automatically resolve from a triggered state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of the monitor.\nThe types C(query alert), C(trace-analytics alert) and C(rum alert) were added in community.general 2.1.0.\nThe type C(composite) was added in community.general 3.4.0.",
          "type": "str",
          "required": false,
          "choices": [
            "metric alert",
            "service check",
            "event alert",
            "process alert",
            "log alert",
            "query alert",
            "trace-analytics alert",
            "rum alert",
            "composite"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "datadog"
      ],
      "short_description": "Manages Datadog monitors"
    },
    "examples": "\n- name: Create a metric monitor\n  community.general.datadog_monitor:\n    type: \"metric alert\"\n    name: \"Test monitor\"\n    state: \"present\"\n    query: \"datadog.agent.up.over('host:host1').last(2).count_by_status()\"\n    notification_message: \"Host [[host.name]] with IP [[host.ip]] is failing to report to datadog.\"\n    api_key: \"9775a026f1ca7d1c6c5af9d94d9595a4\"\n    app_key: \"87ce4a24b5553d2e482ea8a8500e71b8ad4554ff\"\n\n- name: Deletes a monitor\n  community.general.datadog_monitor:\n    name: \"Test monitor\"\n    state: \"absent\"\n    api_key: \"9775a026f1ca7d1c6c5af9d94d9595a4\"\n    app_key: \"87ce4a24b5553d2e482ea8a8500e71b8ad4554ff\"\n\n- name: Mutes a monitor\n  community.general.datadog_monitor:\n    name: \"Test monitor\"\n    state: \"mute\"\n    silenced: '{\"*\":None}'\n    api_key: \"9775a026f1ca7d1c6c5af9d94d9595a4\"\n    app_key: \"87ce4a24b5553d2e482ea8a8500e71b8ad4554ff\"\n\n- name: Unmutes a monitor\n  community.general.datadog_monitor:\n    name: \"Test monitor\"\n    state: \"unmute\"\n    api_key: \"9775a026f1ca7d1c6c5af9d94d9595a4\"\n    app_key: \"87ce4a24b5553d2e482ea8a8500e71b8ad4554ff\"\n\n- name: Use datadoghq.eu platform instead of datadoghq.com\n  community.general.datadog_monitor:\n    name: \"Test monitor\"\n    state: \"absent\"\n    api_host: https://api.datadoghq.eu\n    api_key: \"9775a026f1ca7d1c6c5af9d94d9595a4\"\n    app_key: \"87ce4a24b5553d2e482ea8a8500e71b8ad4554ff\"\n"
  },
  "community.general.dconf": {
    "doc": {
      "description": "This module allows modifications and reading of C(dconf) database. The module is implemented as a wrapper around C(dconf) tool. Please see the dconf(1) man page for more details.\nSince C(dconf) requires a running D-Bus session to change values, the module will try to detect an existing session and reuse it, or run the tool via C(dbus-run-session).",
      "has_action": false,
      "notes": "This module depends on C(psutil) Python library (version 4.0.0 and upwards), C(dconf), C(dbus-send), and C(dbus-run-session) binaries. Depending on distribution you are using, you may need to install additional packages to have these available.\nDetection of existing, running D-Bus session, required to change settings via C(dconf), is not 100% reliable due to implementation details of D-Bus daemon itself. This might lead to running applications not picking-up changes on the fly if options are changed via Ansible and C(dbus-run-session).\nKeep in mind that the C(dconf) CLI tool, which this module wraps around, utilises an unusual syntax for the values (GVariant). For example, if you wanted to provide a string value, the correct syntax would be C(value=\"'myvalue'\") - with single quotes as part of the Ansible parameter value.\nWhen using loops in combination with a value like :code:`\"[('xkb', 'us'), ('xkb', 'se')]\"`, you need to be aware of possible type conversions. Applying a filter :code:`\"{{ item.value | string }}\"` to the parameter variable can avoid potential conversion problems.\nThe easiest way to figure out exact syntax/value you need to provide for a key is by making the configuration change in application affected by the key, and then having a look at value set via commands C(dconf dump /path/to/dir/) or C(dconf read /path/to/key).",
      "options": {
        "key": {
          "aliases": [],
          "description": "A dconf key to modify or read from the dconf database.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The action to take upon the key/value.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "read",
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Value to set for the specified dconf key. Value should be specified in GVariant format. Due to complexity of this format, it is best to have a look at existing values in the dconf database.\nRequired for I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Modify and read dconf database"
    },
    "examples": "\n- name: Configure available keyboard layouts in Gnome\n  community.general.dconf:\n    key: \"/org/gnome/desktop/input-sources/sources\"\n    value: \"[('xkb', 'us'), ('xkb', 'se')]\"\n    state: present\n\n- name: Read currently available keyboard layouts in Gnome\n  community.general.dconf:\n    key: \"/org/gnome/desktop/input-sources/sources\"\n    state: read\n  register: keyboard_layouts\n\n- name: Reset the available keyboard layouts in Gnome\n  community.general.dconf:\n    key: \"/org/gnome/desktop/input-sources/sources\"\n    state: absent\n\n- name: Configure available keyboard layouts in Cinnamon\n  community.general.dconf:\n    key: \"/org/gnome/libgnomekbd/keyboard/layouts\"\n    value: \"['us', 'se']\"\n    state: present\n\n- name: Read currently available keyboard layouts in Cinnamon\n  community.general.dconf:\n    key: \"/org/gnome/libgnomekbd/keyboard/layouts\"\n    state: read\n  register: keyboard_layouts\n\n- name: Reset the available keyboard layouts in Cinnamon\n  community.general.dconf:\n    key: \"/org/gnome/libgnomekbd/keyboard/layouts\"\n    state: absent\n\n- name: Disable desktop effects in Cinnamon\n  community.general.dconf:\n    key: \"/org/cinnamon/desktop-effects\"\n    value: \"false\"\n    state: present\n"
  },
  "community.general.deploy_helper": {
    "doc": {
      "description": "The Deploy Helper manages some of the steps common in deploying software. It creates a folder structure, manages a symlink for the current release and cleans up old releases.\nRunning it with the C(state=query) or C(state=present) will return the C(deploy_helper) fact. C(project_path), whatever you set in the path parameter, C(current_path), the path to the symlink that points to the active release, C(releases_path), the path to the folder to keep releases in, C(shared_path), the path to the folder to keep shared resources in, C(unfinished_filename), the file to check for to recognize unfinished builds, C(previous_release), the release the 'current' symlink is pointing to, C(previous_release_path), the full path to the 'current' symlink target, C(new_release), either the 'release' parameter or a generated timestamp, C(new_release_path), the path to the new release folder (not created by the module).",
      "has_action": false,
      "notes": "Facts are only returned for C(state=query) and C(state=present). If you use both, you should pass any overridden parameters to both calls, otherwise the second call will overwrite the facts of the first one.\nWhen using C(state=clean), the releases are ordered by I(creation date). You should be able to switch to a new naming strategy without problems.\nBecause of the default behaviour of generating the I(new_release) fact, this module will not be idempotent unless you pass your own release name with C(release). Due to the nature of deploying software, this should not be much of a problem.",
      "options": {
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "clean": {
          "aliases": [],
          "description": "Whether to run the clean procedure in case of C(state=finalize).",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "current_path": {
          "aliases": [],
          "description": "the name of the symlink that is created when the deploy is finalized. Used in C(finalize) and C(clean). Returned in the C(deploy_helper.current_path) fact.",
          "default": "current",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keep_releases": {
          "aliases": [],
          "description": "the number of old releases to keep when cleaning. Used in C(finalize) and C(clean). Any unfinished builds will be deleted first, so only correct releases will count. The current version will not count.",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The permissions the resulting filesystem object should have.\nFor those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.\nGiving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.\nAs of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).\nIf C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.\nIf C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.\nSpecifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest"
          ],
          "description": "the root path of the project. Alias I(dest). Returned in the C(deploy_helper.project_path) fact.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "release": {
          "aliases": [],
          "description": "the release version that is being deployed. Defaults to a timestamp format %Y%m%d%H%M%S (i.e. '20141119223359'). This parameter is optional during C(state=present), but needs to be set explicitly for C(state=finalize). You can use the generated fact C(release={{ deploy_helper.new_release }}).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "releases_path": {
          "aliases": [],
          "description": "the name of the folder that will hold the releases. This can be relative to C(path) or absolute. Returned in the C(deploy_helper.releases_path) fact.",
          "default": "releases",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shared_path": {
          "aliases": [],
          "description": "the name of the folder that will hold the shared resources. This can be relative to C(path) or absolute. If this is set to an empty string, no shared folder will be created. Returned in the C(deploy_helper.shared_path) fact.",
          "default": "shared",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "the state of the project. C(query) will only gather facts, C(present) will create the project I(root) folder, and in it the I(releases) and I(shared) folders, C(finalize) will remove the unfinished_filename file, create a symlink to the newly deployed release and optionally clean old releases, C(clean) will remove failed & old releases, C(absent) will remove the project folder (synonymous to the M(ansible.builtin.file) module with C(state=absent))",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "finalize",
            "absent",
            "clean",
            "query"
          ],
          "suboptions": {}
        },
        "unfinished_filename": {
          "aliases": [],
          "description": "the name of the file that indicates a deploy has not finished. All folders in the releases_path that contain this file will be deleted on C(state=finalize) with clean=True, or C(state=clean). This file is automatically deleted from the I(new_release_path) during C(state=finalize).",
          "default": "DEPLOY_UNFINISHED",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        }
      },
      "short_description": "Manages some of the steps common in deploying projects."
    },
    "examples": "\n\n# General explanation, starting with an example folder structure for a project:\n\n# root:\n#     releases:\n#         - 20140415234508\n#         - 20140415235146\n#         - 20140416082818\n#\n#     shared:\n#         - sessions\n#         - uploads\n#\n#     current: releases/20140416082818\n\n\n# The 'releases' folder holds all the available releases. A release is a complete build of the application being\n# deployed. This can be a clone of a repository for example, or a sync of a local folder on your filesystem.\n# Having timestamped folders is one way of having distinct releases, but you could choose your own strategy like\n# git tags or commit hashes.\n#\n# During a deploy, a new folder should be created in the releases folder and any build steps required should be\n# performed. Once the new build is ready, the deploy procedure is 'finalized' by replacing the 'current' symlink\n# with a link to this build.\n#\n# The 'shared' folder holds any resource that is shared between releases. Examples of this are web-server\n# session files, or files uploaded by users of your application. It's quite common to have symlinks from a release\n# folder pointing to a shared/subfolder, and creating these links would be automated as part of the build steps.\n#\n# The 'current' symlink points to one of the releases. Probably the latest one, unless a deploy is in progress.\n# The web-server's root for the project will go through this symlink, so the 'downtime' when switching to a new\n# release is reduced to the time it takes to switch the link.\n#\n# To distinguish between successful builds and unfinished ones, a file can be placed in the folder of the release\n# that is currently in progress. The existence of this file will mark it as unfinished, and allow an automated\n# procedure to remove it during cleanup.\n\n\n# Typical usage\n- name: Initialize the deploy root and gather facts\n  community.general.deploy_helper:\n    path: /path/to/root\n- name: Clone the project to the new release folder\n  ansible.builtin.git:\n    repo: ansible.builtin.git://foosball.example.org/path/to/repo.git\n    dest: '{{ deploy_helper.new_release_path }}'\n    version: v1.1.1\n- name: Add an unfinished file, to allow cleanup on successful finalize\n  ansible.builtin.file:\n    path: '{{ deploy_helper.new_release_path }}/{{ deploy_helper.unfinished_filename }}'\n    state: touch\n- name: Perform some build steps, like running your dependency manager for example\n  composer:\n    command: install\n    working_dir: '{{ deploy_helper.new_release_path }}'\n- name: Create some folders in the shared folder\n  ansible.builtin.file:\n    path: '{{ deploy_helper.shared_path }}/{{ item }}'\n    state: directory\n  with_items:\n    - sessions\n    - uploads\n- name: Add symlinks from the new release to the shared folder\n  ansible.builtin.file:\n    path: '{{ deploy_helper.new_release_path }}/{{ item.path }}'\n    src: '{{ deploy_helper.shared_path }}/{{ item.src }}'\n    state: link\n  with_items:\n      - path: app/sessions\n        src: sessions\n      - path: web/uploads\n        src: uploads\n- name: Finalize the deploy, removing the unfinished file and switching the symlink\n  community.general.deploy_helper:\n    path: /path/to/root\n    release: '{{ deploy_helper.new_release }}'\n    state: finalize\n\n# Retrieving facts before running a deploy\n- name: Run 'state=query' to gather facts without changing anything\n  community.general.deploy_helper:\n    path: /path/to/root\n    state: query\n# Remember to set the 'release' parameter when you actually call 'state=present' later\n- name: Initialize the deploy root\n  community.general.deploy_helper:\n    path: /path/to/root\n    release: '{{ deploy_helper.new_release }}'\n    state: present\n\n# all paths can be absolute or relative (to the 'path' parameter)\n- community.general.deploy_helper:\n    path: /path/to/root\n    releases_path: /var/www/project/releases\n    shared_path: /var/www/shared\n    current_path: /var/www/active\n\n# Using your own naming strategy for releases (a version tag in this case):\n- community.general.deploy_helper:\n    path: /path/to/root\n    release: v1.1.1\n    state: present\n- community.general.deploy_helper:\n    path: /path/to/root\n    release: '{{ deploy_helper.new_release }}'\n    state: finalize\n\n# Using a different unfinished_filename:\n- community.general.deploy_helper:\n    path: /path/to/root\n    unfinished_filename: README.md\n    release: '{{ deploy_helper.new_release }}'\n    state: finalize\n\n# Postponing the cleanup of older builds:\n- community.general.deploy_helper:\n    path: /path/to/root\n    release: '{{ deploy_helper.new_release }}'\n    state: finalize\n    clean: False\n- community.general.deploy_helper:\n    path: /path/to/root\n    state: clean\n# Or running the cleanup ahead of the new deploy\n- community.general.deploy_helper:\n    path: /path/to/root\n    state: clean\n- community.general.deploy_helper:\n    path: /path/to/root\n    state: present\n\n# Keeping more old releases:\n- community.general.deploy_helper:\n    path: /path/to/root\n    release: '{{ deploy_helper.new_release }}'\n    state: finalize\n    keep_releases: 10\n# Or, if you use 'clean=false' on finalize:\n- community.general.deploy_helper:\n    path: /path/to/root\n    state: clean\n    keep_releases: 10\n\n# Removing the entire project root folder\n- community.general.deploy_helper:\n    path: /path/to/root\n    state: absent\n\n# Debugging the facts returned by the module\n- community.general.deploy_helper:\n    path: /path/to/root\n- ansible.builtin.debug:\n    var: deploy_helper\n"
  },
  "community.general.dimensiondata_network": {
    "doc": {
      "description": "Create, update, and delete MCP 1.0 & 2.0 networks",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "Additional description of the network domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The target datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "mcp_password": {
          "aliases": [],
          "description": "The password used to authenticate to the CloudControl API.\nIf not specified, will fall back to C(MCP_PASSWORD) from environment variable or C(~/.dimensiondata).\nRequired if I(mcp_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mcp_user": {
          "aliases": [],
          "description": "The username used to authenticate to the CloudControl API.\nIf not specified, will fall back to C(MCP_USER) from environment variable or C(~/.dimensiondata).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the network domain to create.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The target region.\nRegions are defined in Apache libcloud project [libcloud/common/dimensiondata.py]\nThey are also listed in U(https://libcloud.readthedocs.io/en/latest/compute/drivers/dimensiondata.html)\nNote that the default value \"na\" stands for \"North America\".\nThe module prepends 'dd-' to the region choice.",
          "default": "na",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_plan": {
          "aliases": [],
          "description": "The service plan, either \"ESSENTIALS\" or \"ADVANCED\".\nMCP 2.0 Only.",
          "default": "ESSENTIALS",
          "type": "str",
          "required": false,
          "choices": [
            "ESSENTIALS",
            "ADVANCED"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificates will not be validated.\nThis should only be used on private instances of the CloudControl API that use self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should we wait for the task to complete before moving onto the next.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_poll_interval": {
          "aliases": [],
          "description": "The amount of time (in seconds) to wait between checks for task completion.\nOnly applicable if I(wait=true).",
          "default": "2",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_time": {
          "aliases": [],
          "description": "The maximum amount of time (in seconds) to wait for the task to complete.\nOnly applicable if I(wait=true).",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create, update, and delete MCP 1.0 & 2.0 networks"
    },
    "examples": "\n- name: Create an MCP 1.0 network\n  community.general.dimensiondata_network:\n    region: na\n    location: NA5\n    name: mynet\n\n- name: Create an MCP 2.0 network\n  community.general.dimensiondata_network:\n    region: na\n    mcp_user: my_user\n    mcp_password: my_password\n    location: NA9\n    name: mynet\n    service_plan: ADVANCED\n\n- name: Delete a network\n  community.general.dimensiondata_network:\n    region: na\n    location: NA1\n    name: mynet\n    state: absent\n"
  },
  "community.general.dimensiondata_vlan": {
    "doc": {
      "description": "Manage VLANs in Cloud Control network domains.",
      "has_action": false,
      "options": {
        "allow_expand": {
          "aliases": [],
          "description": "Permit expansion of the target VLAN's network if the module parameters specify a larger network than the VLAN currently possesses.\nIf C(False), the module will fail under these conditions.\nThis is intended to prevent accidental expansion of a VLAN's network (since this operation is not reversible).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A description of the VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The target datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "mcp_password": {
          "aliases": [],
          "description": "The password used to authenticate to the CloudControl API.\nIf not specified, will fall back to C(MCP_PASSWORD) from environment variable or C(~/.dimensiondata).\nRequired if I(mcp_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mcp_user": {
          "aliases": [],
          "description": "The username used to authenticate to the CloudControl API.\nIf not specified, will fall back to C(MCP_USER) from environment variable or C(~/.dimensiondata).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the target VLAN.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_domain": {
          "aliases": [],
          "description": "The Id or name of the target network domain.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "private_ipv4_base_address": {
          "aliases": [],
          "description": "The base address for the VLAN's IPv4 network (e.g. 192.168.1.0).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "private_ipv4_prefix_size": {
          "aliases": [],
          "description": "The size of the IPv4 address space, e.g 24.\nRequired, if C(private_ipv4_base_address) is specified.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The target region.\nRegions are defined in Apache libcloud project [libcloud/common/dimensiondata.py]\nThey are also listed in U(https://libcloud.readthedocs.io/en/latest/compute/drivers/dimensiondata.html)\nNote that the default value \"na\" stands for \"North America\".\nThe module prepends 'dd-' to the region choice.",
          "default": "na",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state for the target VLAN.\nC(readonly) ensures that the state is only ever read, not modified (the module will fail if the resource does not exist).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "readonly"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificates will not be validated.\nThis should only be used on private instances of the CloudControl API that use self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should we wait for the task to complete before moving onto the next.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_poll_interval": {
          "aliases": [],
          "description": "The amount of time (in seconds) to wait between checks for task completion.\nOnly applicable if I(wait=true).",
          "default": "2",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_time": {
          "aliases": [],
          "description": "The maximum amount of time (in seconds) to wait for the task to complete.\nOnly applicable if I(wait=true).",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage a VLAN in a Cloud Control network domain."
    },
    "examples": "\n- name: Add or update VLAN\n  community.general.dimensiondata_vlan:\n    region: na\n    location: NA5\n    network_domain: test_network\n    name: my_vlan1\n    description: A test VLAN\n    private_ipv4_base_address: 192.168.23.0\n    private_ipv4_prefix_size: 24\n    state: present\n    wait: yes\n\n- name: Read / get VLAN details\n  community.general.dimensiondata_vlan:\n    region: na\n    location: NA5\n    network_domain: test_network\n    name: my_vlan1\n    state: readonly\n    wait: yes\n\n- name: Delete a VLAN\n  community.general.dimensiondata_vlan:\n    region: na\n    location: NA5\n    network_domain: test_network\n    name: my_vlan_1\n    state: absent\n    wait: yes\n"
  },
  "community.general.discord": {
    "doc": {
      "description": "Sends a message to a Discord channel using the Discord webhook API.",
      "has_action": false,
      "options": {
        "avatar_url": {
          "aliases": [],
          "description": "Overrides the default avatar of the webhook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "content": {
          "aliases": [],
          "description": "Content of the message to the Discord channel.\nAt least one of I(content) and I(embeds) must be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "embeds": {
          "aliases": [],
          "description": "Send messages as Embeds to the Discord channel.\nEmbeds can have a colored border, embedded images, text fields and more.\nAllowed parameters are described in the Discord Docs: U(https://discord.com/developers/docs/resources/channel#embed-object)\nAt least one of I(content) and I(embeds) must be specified.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "tts": {
          "aliases": [],
          "description": "Set this to C(true) if this is a TTS (Text to Speech) message.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Overrides the default username of the webhook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "webhook_id": {
          "aliases": [],
          "description": "The webhook ID.\nFormat from Discord webhook URL: C(/webhooks/{webhook.id}/{webhook.token}).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "webhook_token": {
          "aliases": [],
          "description": "The webhook token.\nFormat from Discord webhook URL: C(/webhooks/{webhook.id}/{webhook.token}).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Send Discord messages",
      "version_added": "3.1.0"
    },
    "examples": "\n- name: Send a message to the Discord channel\n  community.general.discord:\n    webhook_id: \"00000\"\n    webhook_token: \"XXXYYY\"\n    content: \"This is a message from ansible\"\n\n- name: Send a message to the Discord channel with specific username and avatar\n  community.general.discord:\n    webhook_id: \"00000\"\n    webhook_token: \"XXXYYY\"\n    content: \"This is a message from ansible\"\n    username: Ansible\n    avatar_url: \"https://docs.ansible.com/ansible/latest/_static/images/logo_invert.png\"\n\n- name: Send a embedded message to the Discord channel\n  community.general.discord:\n    webhook_id: \"00000\"\n    webhook_token: \"XXXYYY\"\n    embeds:\n      - title: \"Embedded message\"\n        description: \"This is an embedded message\"\n        footer:\n          text: \"Author: Ansible\"\n        image:\n          url: \"https://docs.ansible.com/ansible/latest/_static/images/logo_invert.png\"\n\n- name: Send two embedded messages\n  community.general.discord:\n    webhook_id: \"00000\"\n    webhook_token: \"XXXYYY\"\n    embeds:\n      - title: \"First message\"\n        description: \"This is my first embedded message\"\n        footer:\n          text: \"Author: Ansible\"\n        image:\n          url: \"https://docs.ansible.com/ansible/latest/_static/images/logo_invert.png\"\n      - title: \"Second message\"\n        description: \"This is my first second message\"\n        footer:\n          text: \"Author: Ansible\"\n          icon_url: \"https://docs.ansible.com/ansible/latest/_static/images/logo_invert.png\"\n        fields:\n          - name: \"Field 1\"\n            value: \"Value of my first field\"\n          - name: \"Field 2\"\n            value: \"Value of my second field\"\n        timestamp: \"{{ ansible_date_time.iso8601 }}\"\n"
  },
  "community.general.django_manage": {
    "doc": {
      "description": "Manages a Django application using the C(manage.py) application frontend to C(django-admin). With the C(virtualenv) parameter, all management commands will be executed by the given C(virtualenv) installation.",
      "has_action": false,
      "notes": "C(virtualenv) (U(http://www.virtualenv.org)) must be installed on the remote host if the I(virtualenv) parameter is specified.\nThis module will create a virtualenv if the I(virtualenv) parameter is specified and a virtual environment does not already exist at the given location.\nThis module assumes English error messages for the C(createcachetable) command to detect table existence, unfortunately.\nTo be able to use the C(migrate) command with django versions < 1.7, you must have C(south) installed and added as an app in your settings.\nTo be able to use the C(collectstatic) command, you must have enabled staticfiles in your settings.\nYour C(manage.py) application must be executable (rwxr-xr-x), and must have a valid shebang, i.e. C(#!/usr/bin/env python), for invoking the appropriate Python interpreter.",
      "options": {
        "apps": {
          "aliases": [],
          "description": "A list of space-delimited apps to target. Used by the C(test) command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cache_table": {
          "aliases": [],
          "description": "The name of the table used for database-backed caching. Used by the C(createcachetable) command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clear": {
          "aliases": [],
          "description": "Clear the existing files before trying to copy or link the original file.\nUsed only with the C(collectstatic) command. The C(--noinput) argument will be added automatically.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "The name of the Django management command to run. Built in commands are C(cleanup), C(collectstatic), C(flush), C(loaddata), C(migrate), C(syncdb), C(test), and C(validate).\nOther commands can be entered, but will fail if they're unknown to Django.  Other commands that may prompt for user input should be run with the C(--noinput) flag.\nThe module will perform some basic parameter validation (when applicable) to the commands C(cleanup), C(collectstatic), C(createcachetable), C(flush), C(loaddata), C(migrate), C(syncdb), C(test), and C(validate).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "database": {
          "aliases": [],
          "description": "The database to target. Used by the C(createcachetable), C(flush), C(loaddata), C(syncdb), and C(migrate) commands.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "failfast": {
          "aliases": [
            "fail_fast"
          ],
          "description": "Fail the command immediately if a test fails. Used by the C(test) command.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fixtures": {
          "aliases": [],
          "description": "A space-delimited list of fixture file names to load in the database. B(Required) by the C(loaddata) command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Will create links to the files instead of copying them, you can only use this parameter with C(collectstatic) command.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "merge": {
          "aliases": [],
          "description": "Will run out-of-order or missing migrations as they are not rollback migrations, you can only use this parameter with C(migrate) command.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project_path": {
          "aliases": [
            "app_path",
            "chdir"
          ],
          "description": "The path to the root of the Django application where B(manage.py) lives.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "pythonpath": {
          "aliases": [
            "python_path"
          ],
          "description": "A directory to add to the Python path. Typically used to include the settings module if it is located external to the application directory.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "The Python path to the application's settings module, such as C(myapp.settings).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "skip": {
          "aliases": [],
          "description": "Will skip over out-of-order missing migrations, you can only use this parameter with C(migrate) command.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "testrunner": {
          "aliases": [
            "test_runner"
          ],
          "description": "From the Django docs: Controls the test runner class that is used to execute tests.\nThis parameter is passed as-is to C(manage.py).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "virtualenv": {
          "aliases": [
            "virtual_env"
          ],
          "description": "An optional path to a I(virtualenv) installation to use while running the manage application.",
          "type": "path",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "virtualenv",
        "django"
      ],
      "short_description": "Manages a Django application."
    },
    "examples": "\n- name: Run cleanup on the application installed in django_dir\n  community.general.django_manage:\n    command: cleanup\n    project_path: \"{{ django_dir }}\"\n\n- name: Load the initial_data fixture into the application\n  community.general.django_manage:\n    command: loaddata\n    project_path: \"{{ django_dir }}\"\n    fixtures: \"{{ initial_data }}\"\n\n- name: Run syncdb on the application\n  community.general.django_manage:\n    command: syncdb\n    project_path: \"{{ django_dir }}\"\n    settings: \"{{ settings_app_name }}\"\n    pythonpath: \"{{ settings_dir }}\"\n    virtualenv: \"{{ virtualenv_dir }}\"\n\n- name: Run the SmokeTest test case from the main app. Useful for testing deploys\n  community.general.django_manage:\n    command: test\n    project_path: \"{{ django_dir }}\"\n    apps: main.SmokeTest\n\n- name: Create an initial superuser\n  community.general.django_manage:\n    command: \"createsuperuser --noinput --username=admin --email=admin@example.com\"\n    project_path: \"{{ django_dir }}\"\n"
  },
  "community.general.dnf_versionlock": {
    "doc": {
      "description": "Locks package versions using the C(versionlock) plugin in C(dnf) based systems. This plugin takes a set of name and versions for packages and excludes all other versions of those packages. This allows you to for example protect packages from being updated by newer versions. The state of the plugin that reflects locking of packages is the C(locklist).",
      "has_action": false,
      "notes": "The logics of the C(versionlock) plugin for corner cases could be confusing, so please take in account that this module will do its best to give a C(check_mode) prediction on what is going to happen. In case of doubt, check the documentation of the plugin.\nSometimes the module could predict changes in C(check_mode) that will not be such because C(versionlock) concludes that there is already a entry in C(locklist) that already matches.\nIn an ideal world, the C(versionlock) plugin would have a dry-run option to know for sure what is going to happen. So far we have to work with a best guess as close as possible to the behaviour inferred from its code.\nFor most of cases where you want to lock and unlock specific versions of a package, this works fairly well.\nSupports C(check_mode).",
      "options": {
        "name": {
          "aliases": [],
          "description": "Package name spec to add or exclude to or delete from the C(locklist) using the format expected by the C(dnf repoquery) command.\nThis parameter is mutually exclusive with I(state=clean).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "raw": {
          "aliases": [],
          "description": "Do not resolve package name specs to NEVRAs to find specific version to lock to. Instead the package name specs are used as they are. This enables locking to not yet available versions of the package.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to add (C(present) or C(excluded)) to or remove (C(absent) or C(clean)) from the C(locklist).\nC(present) will add a package name spec to the C(locklist). If there is a installed package that matches, then only that version will be added. Otherwise, all available package versions will be added.\nC(excluded) will add a package name spec as excluded to the C(locklist). It means that packages represented by the package name spec will be excluded from transaction operations. All available package versions will be added.\nC(absent) will delete entries in the C(locklist) that match the package name spec.\nC(clean) will delete all entries in the C(locklist). This option is mutually exclusive with C(name).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "clean",
            "excluded",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "dnf",
        "dnf-plugin-versionlock"
      ],
      "short_description": "Locks package versions in C(dnf) based systems",
      "version_added": "4.0.0"
    },
    "examples": "\n- name: Prevent installed nginx from being updated\n  community.general.dnf_versionlock:\n    name: nginx\n    state: present\n\n- name: Prevent multiple packages from being updated\n  community.general.dnf_versionlock:\n    name:\n      - nginx\n      - haproxy\n    state: present\n\n- name: Remove lock from nginx to be updated again\n  community.general.dnf_versionlock:\n    package: nginx\n    state: absent\n\n- name: Exclude bind 32:9.11 from installs or updates\n  community.general.dnf_versionlock:\n    package: bind-32:9.11*\n    state: excluded\n\n- name: Keep bash package in major version 4\n  community.general.dnf_versionlock:\n    name: bash-0:4.*\n    raw: true\n    state: present\n\n- name: Delete all entries in the locklist of versionlock\n  community.general.dnf_versionlock:\n    state: clean\n"
  },
  "community.general.dnsimple": {
    "doc": {
      "description": "Manages domains and records via the DNSimple API, see the docs: U(http://developer.dnsimple.com/).",
      "has_action": false,
      "notes": "Support for C(dnsimple < 2) is deprecated and will be removed in community.general 5.0.0.",
      "options": {
        "account_api_token": {
          "aliases": [],
          "description": "Account API token. See I(account_email) for more information.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "account_email": {
          "aliases": [],
          "description": "Account email. If omitted, the environment variables C(DNSIMPLE_EMAIL) and C(DNSIMPLE_API_TOKEN) will be looked for.\nIf those aren't found, a C(.dnsimple) file will be looked for, see: U(https://github.com/mikemaccana/dnsimple-python#getting-started).\nC(.dnsimple) config files are only supported in dnsimple-python<2.0.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain to work with. Can be the domain name (e.g. \"mydomain.com\") or the numeric ID of the domain in DNSimple.\nIf omitted, a list of domains will be returned.\nIf domain is present but the domain doesn't exist, it will be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Record priority.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "record": {
          "aliases": [],
          "description": "Record to add, if blank a record for the domain will be created, supports the wildcard (*).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "record_ids": {
          "aliases": [],
          "description": "List of records to ensure they either exist or do not exist.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sandbox": {
          "aliases": [],
          "description": "Use the DNSimple sandbox environment.\nRequires a dedicated account in the dnsimple sandbox environment.\nCheck U(https://developer.dnsimple.com/sandbox/) for more information.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.5.0",
          "suboptions": {}
        },
        "solo": {
          "aliases": [],
          "description": "Whether the record should be the only one for that record type and record name.\nOnly use with C(state) is set to C(present) on a record.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "whether the record should exist or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "The TTL to give the new record in seconds.",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of DNS record to create.",
          "type": "str",
          "required": false,
          "choices": [
            "A",
            "ALIAS",
            "CNAME",
            "MX",
            "SPF",
            "URL",
            "TXT",
            "NS",
            "SRV",
            "NAPTR",
            "PTR",
            "AAAA",
            "SSHFP",
            "HINFO",
            "POOL",
            "CAA"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Record value.\nMust be specified when trying to ensure a record exists.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "dnsimple >= 1.0.0"
      ],
      "short_description": "Interface with dnsimple.com (a DNS hosting service)"
    },
    "examples": "\n- name: Authenticate using email and API token and fetch all domains\n  community.general.dnsimple:\n    account_email: test@example.com\n    account_api_token: dummyapitoken\n  delegate_to: localhost\n\n- name: Delete a domain\n  community.general.dnsimple:\n    domain: my.com\n    state: absent\n  delegate_to: localhost\n\n- name: Create a test.my.com A record to point to 127.0.0.1\n  community.general.dnsimple:\n    domain: my.com\n    record: test\n    type: A\n    value: 127.0.0.1\n  delegate_to: localhost\n  register: record\n\n- name: Delete record using record_ids\n  community.general.dnsimple:\n    domain: my.com\n    record_ids: '{{ record[\"id\"] }}'\n    state: absent\n  delegate_to: localhost\n\n- name: Create a my.com CNAME record to example.com\n  community.general.dnsimple:\n    domain: my.com\n    record: ''\n    type: CNAME\n    value: example.com\n    state: present\n  delegate_to: localhost\n\n- name: Change TTL value for a record\n  community.general.dnsimple:\n    domain: my.com\n    record: ''\n    type: CNAME\n    value: example.com\n    ttl: 600\n    state: present\n  delegate_to: localhost\n\n- name: Delete the record\n  community.general.dnsimple:\n    domain: my.com\n    record: ''\n    type: CNAME\n    value: example.com\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.general.dnsimple_info": {
    "doc": {
      "description": "Retrieve existing records and domains from DNSimple API.",
      "has_action": false,
      "options": {
        "account_id": {
          "aliases": [],
          "description": "The account ID to query.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "The API key to use.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The domain name to retrieve info from.\nWill return all associated records for this domain if specified.\nIf not specified, will return all domains associated with the account ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "record": {
          "aliases": [],
          "description": "The record to find.\nIf specified, only this record will be returned instead of all records.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sandbox": {
          "aliases": [],
          "description": "Whether or not to use sandbox environment.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Pull basic info from DNSimple API",
      "version_added": "4.2.0"
    },
    "examples": "\n- name: Get all domains from an account\n  community.general.dnsimple_info:\n    account_id: \"1234\"\n    api_key: \"1234\"\n\n- name: Get all records from a domain\n  community.general.dnsimple_info:\n    name: \"example.com\"\n    account_id: \"1234\"\n    api_key: \"1234\"\n\n- name: Get all info from a matching record\n  community.general.dnsimple_info:\n    name: \"example.com\"\n    record: \"subdomain\"\n    account_id: \"1234\"\n    api_key: \"1234\"\n"
  },
  "community.general.dnsmadeeasy": {
    "doc": {
      "description": "Manages DNS records via the v2 REST API of the DNS Made Easy service.  It handles records only; there is no manipulation of domains or monitor/account support yet. See: U(https://www.dnsmadeeasy.com/integration/restapi/)\n",
      "has_action": false,
      "notes": "The DNS Made Easy service requires that machines interacting with the API have the proper time and timezone set. Be sure you are within a few seconds of actual time by using NTP.\nThis module returns record(s) and monitor(s) in the \"result\" element when 'state' is set to 'present'. These values can be be registered and used in your playbooks.\nOnly A records can have a monitor or failover.\nTo add failover, the 'failover', 'autoFailover', 'port', 'protocol', 'ip1', and 'ip2' options are required.\nTo add monitor, the 'monitor', 'port', 'protocol', 'maxEmails', 'systemDescription', and 'ip1' options are required.\nThe monitor and the failover will share 'port', 'protocol', and 'ip1' options.",
      "options": {
        "account_key": {
          "aliases": [],
          "description": "Account API Key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "account_secret": {
          "aliases": [],
          "description": "Account Secret Key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "autoFailover": {
          "aliases": [],
          "description": "If true, fallback to the primary IP address is manual after a failover.\nIf false, fallback to the primary IP address is automatic after a failover.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "contactList": {
          "aliases": [],
          "description": "Name or id of the contact list that the monitor will notify.\nThe default C('') means the Account Owner.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain to work with. Can be the domain name (e.g. \"mydomain.com\") or the numeric ID of the domain in DNS Made Easy (e.g. \"839989\") for faster resolution",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "failover": {
          "aliases": [],
          "description": "If C(yes), add or change the failover.  This is applicable only for A records.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "httpFile": {
          "aliases": [],
          "description": "The file at the Fqdn that the monitor queries for HTTP or HTTPS.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "httpFqdn": {
          "aliases": [],
          "description": "The fully qualified domain name used by the monitor.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "httpQueryString": {
          "aliases": [],
          "description": "The string in the httpFile that the monitor queries for HTTP or HTTPS.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip1": {
          "aliases": [],
          "description": "Primary IP address for the failover.\nRequired if adding or changing the monitor or failover.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip2": {
          "aliases": [],
          "description": "Secondary IP address for the failover.\nRequired if adding or changing the failover.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip3": {
          "aliases": [],
          "description": "Tertiary IP address for the failover.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip4": {
          "aliases": [],
          "description": "Quaternary IP address for the failover.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip5": {
          "aliases": [],
          "description": "Quinary IP address for the failover.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maxEmails": {
          "aliases": [],
          "description": "Number of emails sent to the contact list by the monitor.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "monitor": {
          "aliases": [],
          "description": "If C(yes), add or change the monitor.  This is applicable only for A records.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port used by the monitor.",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Protocol used by the monitor.",
          "default": "HTTP",
          "type": "str",
          "required": false,
          "choices": [
            "TCP",
            "UDP",
            "HTTP",
            "DNS",
            "SMTP",
            "HTTPS"
          ],
          "suboptions": {}
        },
        "record_name": {
          "aliases": [],
          "description": "Record name to get/create/delete/update. If record_name is not specified; all records for the domain will be returned in \"result\" regardless of the state argument.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "record_ttl": {
          "aliases": [],
          "description": "record's \"Time to live\".  Number of seconds the record remains cached in DNS servers.",
          "default": "1800",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "record_type": {
          "aliases": [],
          "description": "Record type.",
          "type": "str",
          "required": false,
          "choices": [
            "A",
            "AAAA",
            "CNAME",
            "ANAME",
            "HTTPRED",
            "MX",
            "NS",
            "PTR",
            "SRV",
            "TXT"
          ],
          "suboptions": {}
        },
        "record_value": {
          "aliases": [],
          "description": "Record value. HTTPRED: <redirection URL>, MX: <priority> <target name>, NS: <name server>, PTR: <target name>, SRV: <priority> <weight> <port> <target name>, TXT: <text value>\"\n\nIf record_value is not specified; no changes will be made and the record will be returned in 'result' (in other words, this module can be used to fetch a record's current id, type, and ttl)\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sandbox": {
          "aliases": [],
          "description": "Decides if the sandbox API should be used. Otherwise (default) the production API of DNS Made Easy is used.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sensitivity": {
          "aliases": [],
          "description": "Number of checks the monitor performs before a failover occurs where Low = 8, Medium = 5,and High = 3.",
          "default": "Medium",
          "type": "str",
          "required": false,
          "choices": [
            "Low",
            "Medium",
            "High"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "whether the record should exist or not",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "systemDescription": {
          "aliases": [],
          "description": "Description used by the monitor.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hashlib",
        "hmac"
      ],
      "short_description": "Interface with dnsmadeeasy.com (a DNS hosting service)."
    },
    "examples": "\n- name: Fetch my.com domain records\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n  register: response\n\n- name: Create a record\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_type: A\n    record_value: 127.0.0.1\n\n- name: Update the previously created record\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_value: 192.0.2.23\n\n- name: Fetch a specific record\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n  register: response\n\n- name: Delete a record\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    record_type: A\n    state: absent\n    record_name: test\n\n- name: Add a failover\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_type: A\n    record_value: 127.0.0.1\n    failover: True\n    ip1: 127.0.0.2\n    ip2: 127.0.0.3\n\n- name: Add a failover\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_type: A\n    record_value: 127.0.0.1\n    failover: True\n    ip1: 127.0.0.2\n    ip2: 127.0.0.3\n    ip3: 127.0.0.4\n    ip4: 127.0.0.5\n    ip5: 127.0.0.6\n\n- name: Add a monitor\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_type: A\n    record_value: 127.0.0.1\n    monitor: yes\n    ip1: 127.0.0.2\n    protocol: HTTP  # default\n    port: 80  # default\n    maxEmails: 1\n    systemDescription: Monitor Test A record\n    contactList: my contact list\n\n- name: Add a monitor with http options\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_type: A\n    record_value: 127.0.0.1\n    monitor: yes\n    ip1: 127.0.0.2\n    protocol: HTTP  # default\n    port: 80  # default\n    maxEmails: 1\n    systemDescription: Monitor Test A record\n    contactList: 1174  # contact list id\n    httpFqdn: http://my.com\n    httpFile: example\n    httpQueryString: some string\n\n- name: Add a monitor and a failover\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_type: A\n    record_value: 127.0.0.1\n    failover: True\n    ip1: 127.0.0.2\n    ip2: 127.0.0.3\n    monitor: yes\n    protocol: HTTPS\n    port: 443\n    maxEmails: 1\n    systemDescription: monitoring my.com status\n    contactList: emergencycontacts\n\n- name: Remove a failover\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_type: A\n    record_value: 127.0.0.1\n    failover: no\n\n- name: Remove a monitor\n  community.general.dnsmadeeasy:\n    account_key: key\n    account_secret: secret\n    domain: my.com\n    state: present\n    record_name: test\n    record_type: A\n    record_value: 127.0.0.1\n    monitor: no\n"
  },
  "community.general.dpkg_divert": {
    "doc": {
      "description": "A diversion is for C(dpkg) the knowledge that only a given package (or the local administrator) is allowed to install a file at a given location. Other packages shipping their own version of this file will be forced to I(divert) it, i.e. to install it at another location. It allows one to keep changes in a file provided by a debian package by preventing its overwrite at package upgrade.\nThis module manages diversions of debian packages files using the C(dpkg-divert) commandline tool. It can either create or remove a diversion for a given file, but also update an existing diversion to modify its I(holder) and/or its I(divert) location.",
      "has_action": false,
      "notes": "This module supports I(check_mode) and I(diff).",
      "options": {
        "divert": {
          "aliases": [],
          "description": "The location where the versions of file will be diverted.\nDefault is to add suffix C(.distrib) to the file path.\nThis parameter is ignored when I(state=absent).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "When I(rename=true) and I(force=true), renaming is performed even if the target of the renaming exists, i.e. the existing contents of the file at this location will be lost.\nThis parameter is ignored when I(rename=false).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "holder": {
          "aliases": [],
          "description": "The name of the package whose copy of file is not diverted, also known as the diversion holder or the package the diversion belongs to.\nThe actual package does not have to be installed or even to exist for its name to be valid. If not specified, the diversion is hold by 'LOCAL', that is reserved by/for dpkg for local diversions.\nThis parameter is ignored when I(state=absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The original and absolute path of the file to be diverted or undiverted. This path is unique, i.e. it is not possible to get two diversions for the same I(path).",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "rename": {
          "aliases": [],
          "description": "Actually move the file aside (when I(state=present)) or back (when I(state=absent)), but only when changing the state of the diversion. This parameter has no effect when attempting to add a diversion that already exists or when removing an unexisting one.\nUnless I(force=true), renaming fails if the destination file already exists (this lock being a dpkg-divert feature, and bypassing it being a module feature).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When I(state=absent), remove the diversion of the specified I(path); when I(state=present), create the diversion if it does not exist, or update its package I(holder) or I(divert) location, if it already exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "dpkg-divert >= 1.15.0 (Debian family)"
      ],
      "short_description": "Override a debian package's version of a file",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Divert /usr/bin/busybox to /usr/bin/busybox.distrib and keep file in place\n  community.general.dpkg_divert:\n    path: /usr/bin/busybox\n\n- name: Divert /usr/bin/busybox by package 'branding'\n  community.general.dpkg_divert:\n    path: /usr/bin/busybox\n    holder: branding\n\n- name: Divert and rename busybox to busybox.dpkg-divert\n  community.general.dpkg_divert:\n    path: /usr/bin/busybox\n    divert: /usr/bin/busybox.dpkg-divert\n    rename: yes\n\n- name: Remove the busybox diversion and move the diverted file back\n  community.general.dpkg_divert:\n    path: /usr/bin/busybox\n    state: absent\n    rename: yes\n    force: yes\n"
  },
  "community.general.easy_install": {
    "doc": {
      "description": "Installs Python libraries, optionally in a I(virtualenv)",
      "has_action": false,
      "notes": "Please note that the C(easy_install) module can only install Python libraries. Thus this module is not able to remove libraries. It is generally recommended to use the M(ansible.builtin.pip) module which you can first install using M(community.general.easy_install).\nAlso note that I(virtualenv) must be installed on the remote host if the C(virtualenv) parameter is specified.",
      "options": {
        "executable": {
          "aliases": [],
          "description": "The explicit executable or a pathname to the executable to be used to run easy_install for a specific version of Python installed in the system. For example C(easy_install-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run easy_install for the Python 3.3 installation.",
          "default": "easy_install",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A Python library name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the library. C(latest) ensures that the latest version is installed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "latest"
          ],
          "suboptions": {}
        },
        "virtualenv": {
          "aliases": [],
          "description": "an optional I(virtualenv) directory path to install into. If the I(virtualenv) does not exist, it is created automatically",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "virtualenv_command": {
          "aliases": [],
          "description": "The command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2).",
          "default": "virtualenv",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "virtualenv_site_packages": {
          "aliases": [],
          "description": "Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "virtualenv"
      ],
      "short_description": "Installs Python libraries"
    },
    "examples": "\n- name: Install or update pip\n  community.general.easy_install:\n    name: pip\n    state: latest\n\n- name: Install Bottle into the specified virtualenv\n  community.general.easy_install:\n    name: bottle\n    virtualenv: /webapps/myapp/venv\n"
  },
  "community.general.ejabberd_user": {
    "doc": {
      "description": "This module provides user management for ejabberd servers",
      "has_action": false,
      "notes": "Password parameter is required for state == present only\nPasswords must be stored in clear text for this release\nThe ejabberd configuration file must include mod_admin_extra as a module.",
      "options": {
        "host": {
          "aliases": [],
          "description": "the ejabberd host associated with this username",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "logging": {
          "aliases": [],
          "description": "enables or disables the local syslog facility for this module",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "the password to assign to the username",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "describe the desired state of the user to be managed",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "the name of the user to manage",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "ejabberd with mod_admin_extra"
      ],
      "short_description": "Manages users for ejabberd servers"
    },
    "examples": "\n# Example playbook entries using the ejabberd_user module to manage users state.\n\n- name: Create a user if it does not exist\n  community.general.ejabberd_user:\n    username: test\n    host: server\n    password: password\n\n- name: Delete a user if it exists\n  community.general.ejabberd_user:\n    username: test\n    host: server\n    state: absent\n"
  },
  "community.general.elasticsearch_plugin": {
    "doc": {
      "description": "Manages Elasticsearch plugins.",
      "has_action": false,
      "options": {
        "force": {
          "aliases": [],
          "description": "Force batch mode when installing plugins. This is only necessary if a plugin requires additional permissions and console detection fails.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the plugin to install.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "plugin_bin": {
          "aliases": [],
          "description": "Location of the plugin binary. If this file is not found, the default plugin binaries will be used.\nThe default changed in Ansible 2.4 to None.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "plugin_dir": {
          "aliases": [],
          "description": "Your configured plugin directory specified in Elasticsearch",
          "default": "/usr/share/elasticsearch/plugins/",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Proxy host to use during plugin installation",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Proxy port to use during plugin installation",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Optionally set the source location to retrieve the plugin from. This can be a file:// URL to install from a local file, or a remote URL. If this is not set, the plugin location is just based on the name.\nThe name parameter must match the descriptor in the plugin ZIP specified.\nIs only used if the state would change, which is solely checked based on the name parameter. If, for example, the plugin is already installed, changing this has no effect.\nFor ES 1.x use url.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of a plugin.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout setting: 30s, 1m, 1h...\nOnly valid for Elasticsearch < 5.0. This option is ignored for Elasticsearch > 5.0.",
          "default": "1m",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Set exact URL to download the plugin from (Only works for ES 1.x).\nFor ES 2.x and higher, use src.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Version of the plugin to be installed. If plugin exists with previous version, it will NOT be updated",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Elasticsearch plugins"
    },
    "examples": "\n- name: Install Elasticsearch Head plugin in Elasticsearch 2.x\n  community.general.elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    state: present\n\n- name: Install a specific version of Elasticsearch Head in Elasticsearch 2.x\n  community.general.elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    version: 2.0.0\n\n- name: Uninstall Elasticsearch head plugin in Elasticsearch 2.x\n  community.general.elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    state: absent\n\n- name: Install a specific plugin in Elasticsearch >= 5.0\n  community.general.elasticsearch_plugin:\n    name: analysis-icu\n    state: present\n\n- name: Install the ingest-geoip plugin with a forced installation\n  community.general.elasticsearch_plugin:\n    name: ingest-geoip\n    state: present\n    force: yes\n"
  },
  "community.general.emc_vnx_sg_member": {
    "doc": {
      "description": "This module manages the members of an existing storage group.",
      "has_action": false,
      "notes": "The modules prefixed with emc_vnx are built to support the EMC VNX storage platform.",
      "options": {
        "lunid": {
          "aliases": [],
          "description": "Lun id to be added.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Storage group to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "sp_address": {
          "aliases": [],
          "description": "Address of the SP of target/secondary storage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "sp_password": {
          "aliases": [],
          "description": "password for accessing SP.",
          "default": "sysadmin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sp_user": {
          "aliases": [],
          "description": "Username for accessing SP.",
          "default": "sysadmin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired lunid state.\nC(present) ensures specified lunid is present in the Storage Group.\nC(absent) ensures specified lunid is absent from Storage Group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "An EMC VNX Storage device.",
        "Ansible 2.7.",
        "storops (0.5.10 or greater). Install using 'pip install storops'."
      ],
      "short_description": "Manage storage group member on EMC VNX"
    },
    "examples": "\n- name: Add lun to storage group\n  community.general.emc_vnx_sg_member:\n    name: sg01\n    sp_address: sp1a.fqdn\n    sp_user: sysadmin\n    sp_password: sysadmin\n    lunid: 100\n    state: present\n\n- name: Remove lun from storage group\n  community.general.emc_vnx_sg_member:\n    name: sg01\n    sp_address: sp1a.fqdn\n    sp_user: sysadmin\n    sp_password: sysadmin\n    lunid: 100\n    state: absent\n"
  },
  "community.general.etcd3": {
    "doc": {
      "description": "Sets or deletes values in etcd3 cluster using its v3 api.\nNeeds python etcd3 lib to work",
      "has_action": false,
      "options": {
        "ca_cert": {
          "aliases": [],
          "description": "The Certificate Authority to use to verify the etcd host.\nRequired if I(client_cert) and I(client_key) are defined.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nRequired if I(client_key) is defined.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nRequired if I(client_cert) is defined.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "the IP address of the cluster",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "the key where the information is stored in the cluster",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to use for authentication.\nRequired if I(user) is defined.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "the port number used to connect to the cluster",
          "default": "2379",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "the state of the value for the key.\ncan be present or absent",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The socket level timeout in seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The etcd user to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "the information stored",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "etcd3"
      ],
      "short_description": "Set or delete key value pairs from an etcd3 cluster"
    },
    "examples": "\n- name: Store a value \"bar\" under the key \"foo\" for a cluster located \"http://localhost:2379\"\n  community.general.etcd3:\n    key: \"foo\"\n    value: \"baz3\"\n    host: \"localhost\"\n    port: 2379\n    state: \"present\"\n\n- name: Authenticate using user/password combination with a timeout of 10 seconds\n  community.general.etcd3:\n    key: \"foo\"\n    value: \"baz3\"\n    state: \"present\"\n    user: \"someone\"\n    password: \"password123\"\n    timeout: 10\n\n- name: Authenticate using TLS certificates\n  community.general.etcd3:\n    key: \"foo\"\n    value: \"baz3\"\n    state: \"present\"\n    ca_cert: \"/etc/ssl/certs/CA_CERT.pem\"\n    client_cert: \"/etc/ssl/certs/cert.crt\"\n    client_key: \"/etc/ssl/private/key.pem\"\n"
  },
  "community.general.facter": {
    "doc": {
      "description": "Runs the C(facter) discovery program (U(https://github.com/puppetlabs/facter)) on the remote system, returning JSON data that can be useful for inventory purposes.",
      "has_action": false,
      "options": {
        "arguments": {
          "aliases": [],
          "description": "Specifies arguments for facter.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "facter",
        "ruby-json"
      ],
      "short_description": "Runs the discovery program I(facter) on the remote system"
    },
    "examples": "\n# Example command-line invocation\n# ansible www.example.net -m facter\n\n- name: Execute facter no arguments\n  community.general.facter:\n\n- name: Execute facter with arguments\n  community.general.facter:\n    arguments:\n        - -p\n        - system_uptime\n        - timezone\n        - is_virtual\n"
  },
  "community.general.filesize": {
    "doc": {
      "description": "This module is a simple wrapper around C(dd) to create, extend or truncate a file, given its size. It can be used to manage swap files (that require contiguous blocks) or alternatively, huge sparse files.",
      "has_action": false,
      "notes": "This module supports C(check_mode) and C(diff).",
      "options": {
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "blocksize": {
          "aliases": [],
          "description": "Size of blocks, in bytes if not followed by a multiplicative suffix.\nThe numeric value (before the unit) C(MUST) be an integer (or a C(float) if it equals an integer).\nIf not set, the size of blocks is guessed from the OS and commonly results in C(512) or C(4096) bytes, that is used internally by the module or when I(size) has no unit.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Whether or not to overwrite the file if it exists, in other words, to truncate it from 0. When C(true), the module is not idempotent, that means it always reports I(changed=true).\nI(force=true) and I(sparse=true) are mutually exclusive.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The permissions the resulting filesystem object should have.\nFor those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.\nGiving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.\nAs of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).\nIf C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.\nIf C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.\nSpecifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path of the regular file to create or resize.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Requested size of the file.\nThe value is a number (either C(int) or C(float)) optionally followed by a multiplicative suffix, that can be one of C(B) (bytes), C(KB) or C(kB) (= 1000B), C(MB) or C(mB) (= 1000kB), C(GB) or C(gB) (= 1000MB), and so on for C(T), C(P), C(E), C(Z) and C(Y); or alternatively one of C(K), C(k) or C(KiB) (= 1024B); C(M), C(m) or C(MiB) (= 1024KiB); C(G), C(g) or C(GiB) (= 1024MiB); and so on.\nIf the multiplicative suffix is not provided, the value is treated as an integer number of blocks of I(blocksize) bytes each (float values are rounded to the closest integer).\nWhen the I(size) value is equal to the current file size, does nothing.\nWhen the I(size) value is bigger than the current file size, bytes from I(source) (if I(sparse) is not C(false)) are appended to the file without truncating it, in other words, without modifying the existing bytes of the file.\nWhen the I(size) value is smaller than the current file size, it is truncated to the requested value without modifying bytes before this value.\nThat means that a file of any arbitrary size can be grown to any other arbitrary size, and then resized down to its initial size without modifying its initial content.",
          "type": "raw",
          "required": true,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "Device or file that provides input data to provision the file.\nThis parameter is ignored when I(sparse=true).",
          "default": "/dev/zero",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "sparse": {
          "aliases": [],
          "description": "Whether or not the file to create should be a sparse file.\nThis option is effective only on newly created files, or when growing a file, only for the bytes to append.\nThis option is not supported on OpenBSD, Solaris and AIX.\nI(force=true) and I(sparse=true) are mutually exclusive.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "This option is silently ignored. This module always modifies file size in-place.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        }
      },
      "requirements": [
        "dd (Data Duplicator) in PATH"
      ],
      "short_description": "Create a file with a given size, or resize it if it exists",
      "version_added": "3.0.0"
    },
    "examples": "\n- name: Create a file of 1G filled with null bytes\n  community.general.filesize:\n    path: /var/bigfile\n    size: 1G\n\n- name: Extend the file to 2G (2*1024^3)\n  community.general.filesize:\n    path: /var/bigfile\n    size: 2G\n\n- name: Reduce the file to 2GB (2*1000^3)\n  community.general.filesize:\n    path: /var/bigfile\n    size: 2GB\n\n- name: Fill a file with random bytes for backing a LUKS device\n  community.general.filesize:\n    path: ~/diskimage.luks\n    size: 512.0 MiB\n    source: /dev/urandom\n\n- name: Take a backup of MBR boot code into a file, overwriting it if it exists\n  community.general.filesize:\n    path: /media/sdb1/mbr.bin\n    size: 440B\n    source: /dev/sda\n    force: true\n\n- name: Create/resize a sparse file of/to 8TB\n  community.general.filesize:\n    path: /var/local/sparsefile\n    size: 8TB\n    sparse: true\n\n- name: Create a file with specific size and attributes, to be used as swap space\n  community.general.filesize:\n    path: /var/swapfile\n    size: 2G\n    blocksize: 512B\n    mode: u=rw,go=\n    owner: root\n    group: root\n"
  },
  "community.general.filesystem": {
    "doc": {
      "description": "This module creates a filesystem.",
      "has_action": false,
      "notes": "Potential filesystems on I(dev) are checked using C(blkid). In case C(blkid) is unable to detect a filesystem (and in case C(fstyp) on FreeBSD is also unable to detect a filesystem), this filesystem is overwritten even if I(force) is C(no).\nOn FreeBSD systems, both C(e2fsprogs) and C(util-linux) packages provide a C(blkid) command that is compatible with this module. However, these packages conflict with each other, and only the C(util-linux) package provides the command required to not fail when I(state=absent).\nThis module supports I(check_mode).",
      "options": {
        "dev": {
          "aliases": [
            "device"
          ],
          "description": "Target path to block device (Linux) or character device (FreeBSD) or regular file (both).\nWhen setting Linux-specific filesystem types on FreeBSD, this module only works when applying to regular files, aka disk images.\nCurrently C(lvm) (Linux-only) and C(ufs) (FreeBSD-only) don't support a regular file as their target I(dev).\nSupport for character devices on FreeBSD has been added in community.general 3.4.0.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If C(yes), allows to create new filesystem on devices that already has filesystem.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fstype": {
          "aliases": [
            "type"
          ],
          "description": "Filesystem type to be created. This option is required with C(state=present) (or if I(state) is omitted).\nufs support has been added in community.general 3.4.0.",
          "type": "str",
          "required": false,
          "choices": [
            "btrfs",
            "ext2",
            "ext3",
            "ext4",
            "ext4dev",
            "f2fs",
            "lvm",
            "ocfs2",
            "reiserfs",
            "xfs",
            "vfat",
            "swap",
            "ufs"
          ],
          "suboptions": {}
        },
        "opts": {
          "aliases": [],
          "description": "List of options to be passed to mkfs command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resizefs": {
          "aliases": [],
          "description": "If C(yes), if the block device and filesystem size differ, grow the filesystem into the space.\nSupported for C(ext2), C(ext3), C(ext4), C(ext4dev), C(f2fs), C(lvm), C(xfs), C(ufs) and C(vfat) filesystems. Attempts to resize other filesystem types will fail.\nXFS Will only grow if mounted. Currently, the module is based on commands from C(util-linux) package to perform operations, so resizing of XFS is not supported on FreeBSD systems.\nvFAT will likely fail if fatresize < 1.04.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(state=present), the filesystem is created if it doesn't already exist, that is the default behaviour if I(state) is omitted.\nIf C(state=absent), filesystem signatures on I(dev) are wiped if it contains a filesystem (as known by C(blkid)).\nWhen C(state=absent), all other options but I(dev) are ignored, and the module doesn't fail if the device I(dev) doesn't actually exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "version_added": "1.3.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "Uses specific tools related to the I(fstype) for creating or resizing a filesystem (from packages e2fsprogs, xfsprogs, dosfstools, and so on).",
        "Uses generic tools mostly related to the Operating System (Linux or FreeBSD) or available on both, as C(blkid).",
        "On FreeBSD, either C(util-linux) or C(e2fsprogs) package is required."
      ],
      "short_description": "Makes a filesystem"
    },
    "examples": "\n- name: Create a ext2 filesystem on /dev/sdb1\n  community.general.filesystem:\n    fstype: ext2\n    dev: /dev/sdb1\n\n- name: Create a ext4 filesystem on /dev/sdb1 and check disk blocks\n  community.general.filesystem:\n    fstype: ext4\n    dev: /dev/sdb1\n    opts: -cc\n\n- name: Blank filesystem signature on /dev/sdb1\n  community.general.filesystem:\n    dev: /dev/sdb1\n    state: absent\n\n- name: Create a filesystem on top of a regular file\n  community.general.filesystem:\n    dev: /path/to/disk.img\n    fstype: vfat\n"
  },
  "community.general.flatpak": {
    "doc": {
      "description": "Allows users to add or remove flatpaks.\nSee the M(community.general.flatpak_remote) module for managing flatpak remotes.",
      "has_action": false,
      "options": {
        "executable": {
          "aliases": [],
          "description": "The path to the C(flatpak) executable to use.\nBy default, this module looks for the C(flatpak) executable on the path.",
          "default": "flatpak",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "method": {
          "aliases": [],
          "description": "The installation method to use.\nDefines if the I(flatpak) is supposed to be installed globally for the whole C(system) or only for the current C(user).",
          "default": "system",
          "type": "str",
          "required": false,
          "choices": [
            "system",
            "user"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the flatpak to manage. To operate on several packages this can accept a list of packages.\nWhen used with I(state=present), I(name) can be specified as a URL to a C(flatpakref) file or the unique reverse DNS name that identifies a flatpak.\nBoth C(https://) and C(http://) URLs are supported.\nWhen supplying a reverse DNS name, you can use the I(remote) option to specify on what remote to look for the flatpak. An example for a reverse DNS name is C(org.gnome.gedit).\nWhen used with I(state=absent), it is recommended to specify the name in the reverse DNS format.\nWhen supplying a URL with I(state=absent), the module will try to match the installed flatpak based on the name of the flatpakref to remove it. However, there is no guarantee that the names of the flatpakref file and the reverse DNS name of the installed flatpak do match.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "no_dependencies": {
          "aliases": [],
          "description": "If installing runtime dependencies should be omitted or not\nThis parameter is primarily implemented for integration testing this module. There might however be some use cases where you would want to have this, like when you are packaging your own flatpaks.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "remote": {
          "aliases": [],
          "description": "The flatpak remote (repository) to install the flatpak from.\nBy default, C(flathub) is assumed, but you do need to add the flathub flatpak_remote before you can use this.\nSee the M(community.general.flatpak_remote) module for managing flatpak remotes.",
          "default": "flathub",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired package state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "flatpak"
      ],
      "short_description": "Manage flatpaks"
    },
    "examples": "\n- name: Install the spotify flatpak\n  community.general.flatpak:\n    name:  https://s3.amazonaws.com/alexlarsson/spotify-repo/spotify.flatpakref\n    state: present\n\n- name: Install the gedit flatpak package without dependencies (not recommended)\n  community.general.flatpak:\n    name: https://git.gnome.org/browse/gnome-apps-nightly/plain/gedit.flatpakref\n    state: present\n    no_dependencies: true\n\n- name: Install the gedit package from flathub for current user\n  community.general.flatpak:\n    name: org.gnome.gedit\n    state: present\n    method: user\n\n- name: Install the Gnome Calendar flatpak from the gnome remote system-wide\n  community.general.flatpak:\n    name: org.gnome.Calendar\n    state: present\n    remote: gnome\n\n- name: Install multiple packages\n  community.general.flatpak:\n    name:\n      - org.gimp.GIMP\n      - org.inkscape.Inkscape\n      - org.mozilla.firefox\n\n- name: Remove the gedit flatpak\n  community.general.flatpak:\n    name: org.gnome.gedit\n    state: absent\n\n- name: Remove multiple packages\n  community.general.flatpak:\n    name:\n      - org.gimp.GIMP\n      - org.inkscape.Inkscape\n      - org.mozilla.firefox\n    state: absent\n"
  },
  "community.general.flatpak_remote": {
    "doc": {
      "description": "Allows users to add or remove flatpak remotes.\nThe flatpak remotes concept is comparable to what is called repositories in other packaging formats.\nCurrently, remote addition is only supported via I(flatpakrepo) file URLs.\nExisting remotes will not be updated.\nSee the M(community.general.flatpak) module for managing flatpaks.",
      "has_action": false,
      "options": {
        "executable": {
          "aliases": [],
          "description": "The path to the C(flatpak) executable to use.\nBy default, this module looks for the C(flatpak) executable on the path.",
          "default": "flatpak",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flatpakrepo_url": {
          "aliases": [],
          "description": "The URL to the I(flatpakrepo) file representing the repository remote to add.\nWhen used with I(state=present), the flatpak remote specified under the I(flatpakrepo_url) is added using the specified installation C(method).\nWhen used with I(state=absent), this is not required.\nRequired when I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "method": {
          "aliases": [],
          "description": "The installation method to use.\nDefines if the I(flatpak) is supposed to be installed globally for the whole C(system) or only for the current C(user).",
          "default": "system",
          "type": "str",
          "required": false,
          "choices": [
            "system",
            "user"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The desired name for the flatpak remote to be registered under on the managed host.\nWhen used with I(state=present), the remote will be added to the managed host under the specified I(name).\nWhen used with I(state=absent) the remote with that name will be removed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired package state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "flatpak"
      ],
      "short_description": "Manage flatpak repository remotes"
    },
    "examples": "\n- name: Add the Gnome flatpak remote to the system installation\n  community.general.flatpak_remote:\n    name: gnome\n    state: present\n    flatpakrepo_url: https://sdk.gnome.org/gnome-apps.flatpakrepo\n\n- name: Add the flathub flatpak repository remote to the user installation\n  community.general.flatpak_remote:\n    name: flathub\n    state: present\n    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo\n    method: user\n\n- name: Remove the Gnome flatpak remote from the user installation\n  community.general.flatpak_remote:\n    name: gnome\n    state: absent\n    method: user\n\n- name: Remove the flathub remote from the system installation\n  community.general.flatpak_remote:\n    name: flathub\n    state: absent\n"
  },
  "community.general.flowdock": {
    "doc": {
      "description": "Send a message to a flowdock team inbox or chat using the push API (see https://www.flowdock.com/api/team-inbox and https://www.flowdock.com/api/chat)",
      "has_action": false,
      "options": {
        "external_user_name": {
          "aliases": [],
          "description": "(chat only - required) Name of the \"user\" sending the message",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "from_address": {
          "aliases": [],
          "description": "(inbox only - required) Email address of the message sender",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "from_name": {
          "aliases": [],
          "description": "(inbox only) Name of the message sender",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "(inbox only) Link associated with the message. This will be used to link the message subject in Team Inbox.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "Content of the message",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "(inbox only) Human readable identifier for more detailed message categorization",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reply_to": {
          "aliases": [],
          "description": "(inbox only) Email address for replies",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "(inbox only - required) Human readable identifier of the application that uses the Flowdock API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subject": {
          "aliases": [],
          "description": "(inbox only - required) Subject line of the message",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "tags of the message, separated by commas",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Whether to post to 'inbox' or 'chat'",
          "type": "str",
          "required": true,
          "choices": [
            "inbox",
            "chat"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [],
      "short_description": "Send a message to a flowdock"
    },
    "examples": "\n- name: Send a message to a flowdock\n  community.general.flowdock:\n    type: inbox\n    token: AAAAAA\n    from_address: user@example.com\n    source: my cool app\n    msg: test from ansible\n    subject: test subject\n\n- name: Send a message to a flowdock\n  community.general.flowdock:\n    type: chat\n    token: AAAAAA\n    external_user_name: testuser\n    msg: test from ansible\n    tags: tag1,tag2,tag3\n"
  },
  "community.general.gandi_livedns": {
    "doc": {
      "description": "Manages DNS records by the Gandi LiveDNS API, see the docs: U(https://doc.livedns.gandi.net/).",
      "has_action": false,
      "notes": "Supports C(check_mode).",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Account API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to work with (for example, \"example.com\").",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "record": {
          "aliases": [],
          "description": "Record to add.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the record(s) should exist or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "The TTL to give the new record.\nRequired when I(state=present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of DNS record to create.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "values": {
          "aliases": [],
          "description": "The record values.\nRequired when I(state=present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Manage Gandi LiveDNS records",
      "version_added": "2.3.0"
    },
    "examples": "\n- name: Create a test A record to point to 127.0.0.1 in the my.com domain\n  community.general.gandi_livedns:\n    domain: my.com\n    record: test\n    type: A\n    values:\n    - 127.0.0.1\n    ttl: 7200\n    api_key: dummyapitoken\n  register: record\n\n- name: Create a mail CNAME record to www.my.com domain\n  community.general.gandi_livedns:\n    domain: my.com\n    type: CNAME\n    record: mail\n    values:\n    - www\n    ttl: 7200\n    api_key: dummyapitoken\n    state: present\n\n- name: Change its TTL\n  community.general.gandi_livedns:\n    domain: my.com\n    type: CNAME\n    record: mail\n    values:\n    - www\n    ttl: 10800\n    api_key: dummyapitoken\n    state: present\n\n- name: Delete the record\n  community.general.gandi_livedns:\n    domain: my.com\n    type: CNAME\n    record: mail\n    api_key: dummyapitoken\n    state: absent\n"
  },
  "community.general.gconftool2": {
    "doc": {
      "description": "This module allows for the manipulation of GNOME 2 Configuration via gconftool-2.  Please see the gconftool-2(1) man pages for more details.",
      "has_action": false,
      "options": {
        "config_source": {
          "aliases": [],
          "description": "Specify a configuration source to use rather than the default path. See man gconftool-2(1)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "direct": {
          "aliases": [],
          "description": "Access the config database directly, bypassing server.  If direct is specified then the config_source must be specified as well. See man gconftool-2(1)",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "A GConf preference key is an element in the GConf repository that corresponds to an application preference. See man gconftool-2(1)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The action to take upon the key/value.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "get",
            "present"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Preference keys typically have simple values such as strings, integers, or lists of strings and integers. This is ignored if the state is \"get\". See man gconftool-2(1)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "value_type": {
          "aliases": [],
          "description": "The type of value being set. This is ignored if the state is \"get\".",
          "type": "str",
          "required": false,
          "choices": [
            "bool",
            "float",
            "int",
            "string"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Edit GNOME Configurations"
    },
    "examples": "\n- name: Change the widget font to \"Serif 12\"\n  community.general.gconftool2:\n    key: \"/desktop/gnome/interface/font_name\"\n    value_type: \"string\"\n    value: \"Serif 12\"\n"
  },
  "community.general.gem": {
    "doc": {
      "description": "Manage installation and uninstallation of Ruby gems.",
      "has_action": false,
      "options": {
        "bindir": {
          "aliases": [],
          "description": "Install executables into a specific directory.",
          "type": "path",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "build_flags": {
          "aliases": [],
          "description": "Allow adding build flags for gem compilation",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env_shebang": {
          "aliases": [],
          "description": "Rewrite the shebang line on installed scripts to use /usr/bin/env.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "Override the path to the gem executable",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force gem to install, bypassing dependency checks.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gem_source": {
          "aliases": [],
          "description": "The path to a local gem used as installation source.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "include_dependencies": {
          "aliases": [],
          "description": "Whether to include dependencies or not.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "include_doc": {
          "aliases": [],
          "description": "Install with or without docs.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "install_dir": {
          "aliases": [],
          "description": "Install the gems into a specific directory. These gems will be independent from the global installed ones. Specifying this requires user_install to be false.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the gem to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "norc": {
          "aliases": [],
          "description": "Avoid loading any C(.gemrc) file. Ignored for RubyGems prior to 2.5.2.\nThe current default value will be deprecated in community.general 4.0.0: if the value is not explicitly specified, a deprecation message will be shown.\nFrom community.general 5.0.0 on, the default will be changed to C(true).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "pre_release": {
          "aliases": [],
          "description": "Allow installation of pre-release versions of the gem.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "repository": {
          "aliases": [
            "source"
          ],
          "description": "The repository from which the gem will be installed",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the gem. C(latest) ensures that the latest version is installed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest"
          ],
          "suboptions": {}
        },
        "user_install": {
          "aliases": [],
          "description": "Install gem in user's local gems cache or for all users",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Version of the gem to be installed/removed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Ruby gems"
    },
    "examples": "\n- name: Install version 1.0 of vagrant\n  community.general.gem:\n    name: vagrant\n    version: 1.0\n    state: present\n\n- name: Install latest available version of rake\n  community.general.gem:\n    name: rake\n    state: latest\n\n- name: Install rake version 1.0 from a local gem on disk\n  community.general.gem:\n    name: rake\n    gem_source: /path/to/gems/rake-1.0.gem\n    state: present\n"
  },
  "community.general.git_config": {
    "doc": {
      "description": "The C(git_config) module changes git configuration by invoking 'git config'. This is needed if you don't want to use M(ansible.builtin.template) for the entire git config file (e.g. because you need to change just C(user.email) in /etc/.git/config).  Solutions involving M(ansible.builtin.command) are cumbersome or don't work correctly in check mode.",
      "has_action": false,
      "options": {
        "file": {
          "aliases": [],
          "description": "Path to an adhoc git configuration file to be managed using the C(file) scope.",
          "type": "path",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "list_all": {
          "aliases": [],
          "description": "List all settings (optionally limited to a given I(scope)).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the setting. If no value is supplied, the value will be read from the config if it has been set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "Path to a git repository for reading and writing values from a specific repo.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "Specify which scope to read/set values from.\nThis is required when setting config values.\nIf this is set to C(local), you must also specify the C(repo) parameter.\nIf this is set to C(file), you must also specify the C(file) parameter.\nIt defaults to system only when not using I(list_all)=C(yes).",
          "type": "str",
          "required": false,
          "choices": [
            "file",
            "local",
            "global",
            "system"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the setting should be set/unset. This parameter has higher precedence than I(value) parameter: when I(state)=absent and I(value) is defined, I(value) is discarded.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "When specifying the name of a single setting, supply a value to set that setting to the given value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "git"
      ],
      "short_description": "Read and write git configuration"
    },
    "examples": "\n- name: Add a setting to ~/.gitconfig\n  community.general.git_config:\n    name: alias.ci\n    scope: global\n    value: commit\n\n- name: Add a setting to ~/.gitconfig\n  community.general.git_config:\n    name: alias.st\n    scope: global\n    value: status\n\n- name: Remove a setting from ~/.gitconfig\n  community.general.git_config:\n    name: alias.ci\n    scope: global\n    state: absent\n\n- name: Add a setting to ~/.gitconfig\n  community.general.git_config:\n    name: core.editor\n    scope: global\n    value: vim\n\n- name: Add a setting system-wide\n  community.general.git_config:\n    name: alias.remotev\n    scope: system\n    value: remote -v\n\n- name: Add a setting to a system scope (default)\n  community.general.git_config:\n    name: alias.diffc\n    value: diff --cached\n\n- name: Add a setting to a system scope (default)\n  community.general.git_config:\n    name: color.ui\n    value: auto\n\n- name: Make etckeeper not complaining when it is invoked by cron\n  community.general.git_config:\n    name: user.email\n    repo: /etc\n    scope: local\n    value: 'root@{{ ansible_fqdn }}'\n\n- name: Read individual values from git config\n  community.general.git_config:\n    name: alias.ci\n    scope: global\n\n- name: Scope system is also assumed when reading values, unless list_all=yes\n  community.general.git_config:\n    name: alias.diffc\n\n- name: Read all values from git config\n  community.general.git_config:\n    list_all: yes\n    scope: global\n\n- name: When list_all is yes and no scope is specified, you get configuration from all scopes\n  community.general.git_config:\n    list_all: yes\n\n- name: Specify a repository to include local settings\n  community.general.git_config:\n    list_all: yes\n    repo: /path/to/repo.git\n"
  },
  "community.general.github_deploy_key": {
    "doc": {
      "description": "Adds or removes deploy keys for GitHub repositories. Supports authentication using username and password, username and password and 2-factor authentication code (OTP), OAuth2 token, or personal access token. Admin rights on the repository are required.",
      "has_action": false,
      "notes": "Refer to GitHub's API documentation here: https://developer.github.com/v3/repos/keys/.",
      "options": {
        "force": {
          "aliases": [],
          "description": "If C(true), forcefully adds the deploy key by deleting any existing deploy key with the same public key or title.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "github_url": {
          "aliases": [],
          "description": "The base URL of the GitHub API",
          "default": "https://api.github.com",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "The SSH public key to add to the repository as a deploy key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "title",
            "label"
          ],
          "description": "The name for the deploy key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "otp": {
          "aliases": [
            "2fa_token"
          ],
          "description": "The 6 digit One Time Password for 2-Factor Authentication. Required together with I(username) and I(password).\nAlias C(2fa_token) has been deprecated and will be removed in community.general 5.0.0.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [
            "account",
            "organization"
          ],
          "description": "The name of the individual account or organization that owns the GitHub repository.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to authenticate with. Alternatively, a personal access token can be used instead of I(username) and I(password) combination.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "read_only": {
          "aliases": [],
          "description": "If C(true), the deploy key will only be able to read repository contents. Otherwise, the deploy key will be able to read and write.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "repo": {
          "aliases": [
            "repository"
          ],
          "description": "The name of the GitHub repository.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the deploy key.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "The OAuth2 token or personal access token to authenticate with. Mutually exclusive with I(password).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username to authenticate with. Should not be set when using personal access token",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages deploy keys for GitHub repositories."
    },
    "examples": "\n- name: Add a new read-only deploy key to a GitHub repository using basic authentication\n  community.general.github_deploy_key:\n    owner: \"johndoe\"\n    repo: \"example\"\n    name: \"new-deploy-key\"\n    key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwXxn7kIMNWzcDfou...\"\n    read_only: yes\n    username: \"johndoe\"\n    password: \"supersecretpassword\"\n\n- name: Remove an existing deploy key from a GitHub repository\n  community.general.github_deploy_key:\n    owner: \"johndoe\"\n    repository: \"example\"\n    name: \"new-deploy-key\"\n    key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwXxn7kIMNWzcDfou...\"\n    force: yes\n    username: \"johndoe\"\n    password: \"supersecretpassword\"\n    state: absent\n\n- name: Add a new deploy key to a GitHub repository, replace an existing key, use an OAuth2 token to authenticate\n  community.general.github_deploy_key:\n    owner: \"johndoe\"\n    repository: \"example\"\n    name: \"new-deploy-key\"\n    key: \"{{ lookup('file', '~/.ssh/github.pub') }}\"\n    force: yes\n    token: \"ABAQDAwXxn7kIMNWzcDfo...\"\n\n- name: Re-add a deploy key to a GitHub repository but with a different name\n  community.general.github_deploy_key:\n    owner: \"johndoe\"\n    repository: \"example\"\n    name: \"replace-deploy-key\"\n    key: \"{{ lookup('file', '~/.ssh/github.pub') }}\"\n    username: \"johndoe\"\n    password: \"supersecretpassword\"\n\n- name: Add a new deploy key to a GitHub repository using 2FA\n  community.general.github_deploy_key:\n    owner: \"johndoe\"\n    repo: \"example\"\n    name: \"new-deploy-key-2\"\n    key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwXxn7kIMNWzcDfou...\"\n    username: \"johndoe\"\n    password: \"supersecretpassword\"\n    otp: 123456\n\n- name: Add a read-only deploy key to a repository hosted on GitHub Enterprise\n  community.general.github_deploy_key:\n    github_url: \"https://api.example.com\"\n    owner: \"janedoe\"\n    repo: \"example\"\n    name: \"new-deploy-key\"\n    key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAwXxn7kIMNWzcDfou...\"\n    read_only: yes\n    username: \"janedoe\"\n    password: \"supersecretpassword\"\n"
  },
  "community.general.github_issue": {
    "doc": {
      "description": "View GitHub issue for a given repository and organization.",
      "has_action": false,
      "options": {
        "action": {
          "aliases": [],
          "description": "Get various details about issue depending upon action specified.",
          "default": "get_status",
          "type": "str",
          "required": false,
          "choices": [
            "get_status"
          ],
          "suboptions": {}
        },
        "issue": {
          "aliases": [],
          "description": "Issue number for which information is required.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of the GitHub organization in which the repository is hosted.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "Name of repository from which issue needs to be retrieved.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "View GitHub issue."
    },
    "examples": "\n- name: Check if GitHub issue is closed or not\n  community.general.github_issue:\n    organization: ansible\n    repo: ansible\n    issue: 23642\n    action: get_status\n  register: r\n\n- name: Take action depending upon issue status\n  ansible.builtin.debug:\n    msg: Do something when issue 23642 is open\n  when: r.issue_status == 'open'\n"
  },
  "community.general.github_key": {
    "doc": {
      "description": "Creates, removes, or updates GitHub access keys.",
      "has_action": false,
      "options": {
        "force": {
          "aliases": [],
          "description": "The default is C(yes), which will replace the existing remote key if it's different than C(pubkey). If C(no), the key will only be set if no key with the given C(name) exists.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "SSH key name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pubkey": {
          "aliases": [],
          "description": "SSH public key value. Required when C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to remove a key, ensure that it exists, or update its value.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "GitHub Access Token with permission to list and create public keys.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage GitHub access keys."
    },
    "examples": "\n- name: Read SSH public key to authorize\n  ansible.builtin.shell: cat /home/foo/.ssh/id_rsa.pub\n  register: ssh_pub_key\n\n- name: Authorize key with GitHub\n  local_action:\n    module: github_key\n    name: Access Key for Some Machine\n    token: '{{ github_access_token }}'\n    pubkey: '{{ ssh_pub_key.stdout }}'\n"
  },
  "community.general.github_release": {
    "doc": {
      "description": "Fetch metadata about GitHub Releases",
      "has_action": false,
      "options": {
        "action": {
          "aliases": [],
          "description": "Action to perform",
          "type": "str",
          "required": true,
          "choices": [
            "latest_release",
            "create_release"
          ],
          "suboptions": {}
        },
        "body": {
          "aliases": [],
          "description": "Description of the release when creating a release",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "draft": {
          "aliases": [],
          "description": "Sets if the release is a draft or not. (boolean)",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of release when creating a release",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The GitHub account password for the user. Mutually exclusive with C(token).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prerelease": {
          "aliases": [],
          "description": "Sets if the release is a prerelease or not. (boolean)",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "Repository name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Tag name when creating a release. Required when using action is set to C(create_release).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "Target of release when creating a release",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "GitHub Personal Access Token for authenticating. Mutually exclusive with C(password).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The GitHub account that owns the repository",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "github3.py >= 1.0.0a3"
      ],
      "short_description": "Interact with GitHub Releases"
    },
    "examples": "\n- name: Get latest release of a public repository\n  community.general.github_release:\n    user: ansible\n    repo: ansible\n    action: latest_release\n\n- name: Get latest release of testuseer/testrepo\n  community.general.github_release:\n    token: tokenabc1234567890\n    user: testuser\n    repo: testrepo\n    action: latest_release\n\n- name: Get latest release of test repo using username and password. Ansible 2.4.\n  community.general.github_release:\n    user: testuser\n    password: secret123\n    repo: testrepo\n    action: latest_release\n\n- name: Create a new release\n  community.general.github_release:\n    token: tokenabc1234567890\n    user: testuser\n    repo: testrepo\n    action: create_release\n    tag: test\n    target: master\n    name: My Release\n    body: Some description\n\n"
  },
  "community.general.github_repo": {
    "doc": {
      "description": "Manages Github repositories using PyGithub library.\nAuthentication can be done with I(access_token) or with I(username) and I(password).",
      "has_action": false,
      "notes": "For Python 3, PyGithub>=1.54 should be used.\nFor Python 3.5, PyGithub==1.54 should be used. More information: U(https://pygithub.readthedocs.io/en/latest/changes.html#version-1-54-november-30-2020).\nFor Python 2.7, PyGithub==1.45 should be used. More information: U(https://pygithub.readthedocs.io/en/latest/changes.html#version-1-45-december-29-2019).\nSupports C(check_mode).",
      "options": {
        "access_token": {
          "aliases": [],
          "description": "Token parameter for authentication.\nThis is only needed when not using I(username) and I(password).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL to the GitHub API if not using github.com but you own instance.",
          "default": "https://api.github.com",
          "type": "str",
          "required": false,
          "version_added": "3.5.0",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description for the repository.\nDefaults to empty if I(force_defaults=true), which is the default in this module.\nDefaults to empty if I(force_defaults=false) when creating a new repository.\nThis is only used when I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_defaults": {
          "aliases": [],
          "description": "Overwrite current I(description) and I(private) attributes with defaults if set to C(true), which currently is the default.\nThe default for this option will be deprecated in a future version of this collection, and eventually change to C(false).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "4.1.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Repository name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization for the repository.\nWhen I(state) is C(present), the repository will be created in the current user profile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password used for authentication.\nThis is only needed when not using I(access_token).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "private": {
          "aliases": [],
          "description": "Whether the repository should be private or not.\nDefaults to C(false) if I(force_defaults=true), which is the default in this module.\nDefaults to C(false) if I(force_defaults=false) when creating a new repository.\nThis is only used when I(state) is C(present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the repository should exist or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username used for authentication.\nThis is only needed when not using I(access_token).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "PyGithub>=1.54"
      ],
      "short_description": "Manage your repositories on Github",
      "version_added": "2.2.0"
    },
    "examples": "\n- name: Create a Github repository\n  community.general.github_repo:\n    access_token: mytoken\n    organization: MyOrganization\n    name: myrepo\n    description: \"Just for fun\"\n    private: yes\n    state: present\n    force_defaults: no\n  register: result\n\n- name: Delete the repository\n  community.general.github_repo:\n    username: octocat\n    password: password\n    organization: MyOrganization\n    name: myrepo\n    state: absent\n  register: result\n"
  },
  "community.general.github_webhook": {
    "doc": {
      "description": "Create and delete GitHub webhooks",
      "has_action": false,
      "options": {
        "active": {
          "aliases": [],
          "description": "Whether or not the hook is active",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "content_type": {
          "aliases": [],
          "description": "The media type used to serialize the payloads",
          "default": "form",
          "type": "str",
          "required": false,
          "choices": [
            "form",
            "json"
          ],
          "suboptions": {}
        },
        "events": {
          "aliases": [],
          "description": "A list of GitHub events the hook is triggered for. Events are listed at U(https://developer.github.com/v3/activity/events/types/). Required unless C(state) is C(absent)\n",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "github_url": {
          "aliases": [],
          "description": "Base URL of the GitHub API",
          "default": "https://api.github.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "insecure_ssl": {
          "aliases": [],
          "description": "Flag to indicate that GitHub should skip SSL verification when calling the hook.\n",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to authenticate to GitHub with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository": {
          "aliases": [
            "repo"
          ],
          "description": "Full name of the repository to configure a hook for",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "secret": {
          "aliases": [],
          "description": "The shared secret between GitHub and the payload URL.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the hook should be present or absent",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Token to authenticate to GitHub with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL to which payloads will be delivered",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User to authenticate to GitHub as",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "PyGithub >= 1.3.5"
      ],
      "short_description": "Manage GitHub webhooks"
    },
    "examples": "\n- name: Create a new webhook that triggers on push (password auth)\n  community.general.github_webhook:\n    repository: ansible/ansible\n    url: https://www.example.com/hooks/\n    events:\n      - push\n    user: \"{{ github_user }}\"\n    password: \"{{ github_password }}\"\n\n- name: Create a new webhook in a github enterprise installation with multiple event triggers (token auth)\n  community.general.github_webhook:\n    repository: myorg/myrepo\n    url: https://jenkins.example.com/ghprbhook/\n    content_type: json\n    secret: \"{{ github_shared_secret }}\"\n    insecure_ssl: True\n    events:\n      - issue_comment\n      - pull_request\n    user: \"{{ github_user }}\"\n    token: \"{{ github_user_api_token }}\"\n    github_url: https://github.example.com\n\n- name: Delete a webhook (password auth)\n  community.general.github_webhook:\n    repository: ansible/ansible\n    url: https://www.example.com/hooks/\n    state: absent\n    user: \"{{ github_user }}\"\n    password: \"{{ github_password }}\"\n"
  },
  "community.general.github_webhook_info": {
    "doc": {
      "description": "Query information about GitHub webhooks\nThis module was called C(github_webhook_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "options": {
        "github_url": {
          "aliases": [],
          "description": "Base URL of the github api",
          "default": "https://api.github.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to authenticate to GitHub with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository": {
          "aliases": [
            "repo"
          ],
          "description": "Full name of the repository to configure a hook for",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Token to authenticate to GitHub with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User to authenticate to GitHub as",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "PyGithub >= 1.3.5"
      ],
      "short_description": "Query information about GitHub webhooks"
    },
    "examples": "\n- name: List hooks for a repository (password auth)\n  community.general.github_webhook_info:\n    repository: ansible/ansible\n    user: \"{{ github_user }}\"\n    password: \"{{ github_password }}\"\n  register: ansible_webhooks\n\n- name: List hooks for a repository on GitHub Enterprise (token auth)\n  community.general.github_webhook_info:\n    repository: myorg/myrepo\n    user: \"{{ github_user }}\"\n    token: \"{{ github_user_api_token }}\"\n    github_url: https://github.example.com/api/v3/\n  register: myrepo_webhooks\n"
  },
  "community.general.gitlab_branch": {
    "doc": {
      "description": "This module allows to create or delete branches.",
      "has_action": false,
      "options": {
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "branch": {
          "aliases": [],
          "description": "The name of the branch that needs to be created.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The path or name of the project.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ref_branch": {
          "aliases": [],
          "description": "Reference branch to create from.\nThis must be specified if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete branch.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab >= 2.3.0",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Create or delete a branch",
      "version_added": "4.2.0"
    },
    "examples": "\n- name: Create branch branch2 from main\n  community.general.gitlab_branch:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    project: \"group1/project1\"\n    branch: branch2\n    ref_branch: main\n    state: present\n\n- name: Delete branch branch2\n  community.general.gitlab_branch:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    project: \"group1/project1\"\n    branch: branch2\n    state: absent\n\n"
  },
  "community.general.gitlab_deploy_key": {
    "doc": {
      "description": "Adds, updates and removes project deploy keys",
      "has_action": false,
      "options": {
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "can_push": {
          "aliases": [],
          "description": "Whether this key can push to the project.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Deploy key",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Id or Full path of project in the form of group/name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When C(present) the deploy key added to the project if it doesn't exist.\nWhen C(absent) it will be removed from the project if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "Deploy key's title.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab python module",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Manages GitLab project deploy keys."
    },
    "examples": "\n- name: \"Adding a project deploy key\"\n  community.general.gitlab_deploy_key:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ api_token }}\"\n    project: \"my_group/my_project\"\n    title: \"Jenkins CI\"\n    state: present\n    key: \"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAiPWx6WM4lhHNedGfBpPJNPpZ7yKu+dnn1SJejgt4596k6YjzGGphH2TUxwKzxcKDKKezwkpfnxPkSMkuEspGRt/aZZ9w...\"\n\n- name: \"Update the above deploy key to add push access\"\n  community.general.gitlab_deploy_key:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ api_token }}\"\n    project: \"my_group/my_project\"\n    title: \"Jenkins CI\"\n    state: present\n    can_push: yes\n\n- name: \"Remove the previous deploy key from the project\"\n  community.general.gitlab_deploy_key:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ api_token }}\"\n    project: \"my_group/my_project\"\n    state: absent\n    key: \"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAiPWx6WM4lhHNedGfBpPJNPpZ7yKu+dnn1SJejgt4596k6YjzGGphH2TUxwKzxcKDKKezwkpfnxPkSMkuEspGRt/aZZ9w...\"\n\n"
  },
  "community.general.gitlab_group": {
    "doc": {
      "description": "When the group does not exist in GitLab, it will be created.\nWhen the group does exist and state=absent, the group will be deleted.",
      "has_action": false,
      "options": {
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_devops_enabled": {
          "aliases": [],
          "description": "Default to Auto DevOps pipeline for all projects within this group.",
          "type": "bool",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "avatar_path": {
          "aliases": [],
          "description": "Absolute path image to configure avatar. File size should not exceed 200 kb.\nThis option is only used on creation, not for updates.",
          "type": "path",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A description for the group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the group you want to create.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parent": {
          "aliases": [],
          "description": "Allow to create subgroups\nId or Full path of parent group in the form of group/name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path of the group you want to create, this will be api_url/group_path\nIf not supplied, the group_name will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_creation_level": {
          "aliases": [],
          "description": "Determine if developers can create projects in the group.",
          "type": "str",
          "required": false,
          "choices": [
            "developer",
            "maintainer",
            "noone"
          ],
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "require_two_factor_authentication": {
          "aliases": [],
          "description": "Require all users in this group to setup two-factor authentication.",
          "type": "bool",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "create or delete group.\nPossible values are present and absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subgroup_creation_level": {
          "aliases": [],
          "description": "Allowed to create subgroups.",
          "type": "str",
          "required": false,
          "choices": [
            "maintainer",
            "owner"
          ],
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "visibility": {
          "aliases": [],
          "description": "Default visibility of the group",
          "default": "private",
          "type": "str",
          "required": false,
          "choices": [
            "private",
            "internal",
            "public"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab python module",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Creates/updates/deletes GitLab Groups"
    },
    "examples": "\n- name: \"Delete GitLab Group\"\n  community.general.gitlab_group:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    validate_certs: False\n    name: my_first_group\n    state: absent\n\n- name: \"Create GitLab Group\"\n  community.general.gitlab_group:\n    api_url: https://gitlab.example.com/\n    validate_certs: True\n    api_username: dj-wasabi\n    api_password: \"MySecretPassword\"\n    name: my_first_group\n    path: my_first_group\n    state: present\n\n# The group will by created at https://gitlab.dj-wasabi.local/super_parent/parent/my_first_group\n- name: \"Create GitLab SubGroup\"\n  community.general.gitlab_group:\n    api_url: https://gitlab.example.com/\n    validate_certs: True\n    api_username: dj-wasabi\n    api_password: \"MySecretPassword\"\n    name: my_first_group\n    path: my_first_group\n    state: present\n    parent: \"super_parent/parent\"\n\n# Other group which only allows sub-groups - no projects\n- name: \"Create GitLab Group for SubGroups only\"\n  community.general.gitlab_group:\n    api_url: https://gitlab.example.com/\n    validate_certs: True\n    api_username: dj-wasabi\n    api_password: \"MySecretPassword\"\n    name: my_main_group\n    path: my_main_group\n    state: present\n    project_creation_level: noone\n    auto_devops_enabled: false\n    subgroup_creation_level: maintainer\n"
  },
  "community.general.gitlab_group_members": {
    "doc": {
      "description": "This module allows to add and remove members to/from a group, or change a member's access level in a group on GitLab.",
      "has_action": false,
      "notes": "Supports C(check_mode).",
      "options": {
        "access_level": {
          "aliases": [],
          "description": "The access level for the user.\nRequired if I(state=present), user state is set to present.\nMutually exclusive with I(gitlab_users_access).",
          "type": "str",
          "required": false,
          "choices": [
            "guest",
            "reporter",
            "developer",
            "maintainer",
            "owner"
          ],
          "suboptions": {}
        },
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gitlab_group": {
          "aliases": [],
          "description": "The C(full_path) of the GitLab group the member is added to/removed from.\nSetting this to C(name) or C(path) is deprecated and will be removed in community.general 6.0.0. Use C(full_path) instead.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "gitlab_user": {
          "aliases": [],
          "description": "A username or a list of usernames to add to/remove from the GitLab group.\nMutually exclusive with I(gitlab_users_access).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "gitlab_users_access": {
          "aliases": [],
          "description": "Provide a list of user to access level mappings.\nEvery dictionary in this list specifies a user (by username) and the access level the user should have.\nMutually exclusive with I(gitlab_user) and I(access_level).\nUse together with I(purge_users) to remove all users not specified here from the group.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "3.6.0",
          "suboptions": {
            "access_level": {
              "aliases": [],
              "description": "The access level for the user.\nRequired if I(state=present), user state is set to present.",
              "type": "str",
              "required": true,
              "choices": [
                "guest",
                "reporter",
                "developer",
                "maintainer",
                "owner"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "A username or a list of usernames to add to/remove from the GitLab group.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "purge_users": {
          "aliases": [],
          "description": "Adds/remove users of the given access_level to match the given I(gitlab_user)/I(gitlab_users_access) list. If omitted do not purge orphaned members.\nIs only used when I(state=present).",
          "type": "list",
          "required": false,
          "choices": [
            "guest",
            "reporter",
            "developer",
            "maintainer",
            "owner"
          ],
          "elements": "str",
          "version_added": "3.6.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the member in the group.\nOn C(present), it adds a user to a GitLab group.\nOn C(absent), it removes a user from a GitLab group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "administrator rights on the GitLab server",
        "python-gitlab python module <= 1.15.0",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Manage group members on GitLab Server",
      "version_added": "1.2.0"
    },
    "examples": "\n- name: Add a user to a GitLab Group\n  community.general.gitlab_group_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    gitlab_group: groupname\n    gitlab_user: username\n    access_level: developer\n    state: present\n\n- name: Remove a user from a GitLab Group\n  community.general.gitlab_group_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    gitlab_group: groupname\n    gitlab_user: username\n    state: absent\n\n- name: Add a list of Users to A GitLab Group\n  community.general.gitlab_group_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    gitlab_group: groupname\n    gitlab_user:\n      - user1\n      - user2\n    access_level: developer\n    state: present\n\n- name: Add a list of Users with Dedicated Access Levels to A GitLab Group\n  community.general.gitlab_group_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    gitlab_group: groupname\n    gitlab_users_access:\n      - name: user1\n        access_level: developer\n      - name: user2\n        access_level: maintainer\n    state: present\n\n- name: Add a user, remove all others which might be on this access level\n  community.general.gitlab_group_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    gitlab_group: groupname\n    gitlab_user: username\n    access_level: developer\n    pruge_users: developer\n    state: present\n\n- name: Remove a list of Users with Dedicated Access Levels to A GitLab Group\n  community.general.gitlab_group_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    gitlab_group: groupname\n    gitlab_users_access:\n      - name: user1\n        access_level: developer\n      - name: user2\n        access_level: maintainer\n    state: absent\n"
  },
  "community.general.gitlab_group_variable": {
    "doc": {
      "description": "Creates a group variable if it does not exist.\nWhen a group variable does exist, its value will be updated when the values are different.\nVariables which are untouched in the playbook, but are not untouched in the GitLab group, they stay untouched (I(purge) is C(false)) or will be deleted (I(purge) is C(true)).",
      "has_action": false,
      "notes": "Supports I(check_mode).",
      "options": {
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "The path and name of the group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "When set to C(true), delete all variables which are not untouched in the task.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete group variable.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vars": {
          "aliases": [],
          "description": "When the list element is a simple key-value pair, set masked and protected to false.\nWhen the list element is a dict with the keys I(value), I(masked) and I(protected), the user can have full control about whether a value should be masked, protected or both.\nSupport for protected values requires GitLab >= 9.3.\nSupport for masked values requires GitLab >= 11.10.\nA I(value) must be a string or a number.\nField I(variable_type) must be a string with either C(env_var), which is the default, or C(file).\nWhen a value is masked, it must be in Base64 and have a length of at least 8 characters. See GitLab documentation on acceptable values for a masked variable (U(https://docs.gitlab.com/ce/ci/variables/#masked-variables)).",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab python module",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Creates, updates, or deletes GitLab groups variables",
      "version_added": "1.2.0"
    },
    "examples": "\n- name: Set or update some CI/CD variables\n  community.general.gitlab_group_variable:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    group: scodeman/testgroup/\n    purge: false\n    vars:\n      ACCESS_KEY_ID: abc123\n      SECRET_ACCESS_KEY: 321cba\n\n- name: Set or update some CI/CD variables\n  community.general.gitlab_group_variable:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    group: scodeman/testgroup/\n    purge: false\n    vars:\n      ACCESS_KEY_ID: abc123\n      SECRET_ACCESS_KEY:\n        value: 3214cbad\n        masked: true\n        protected: true\n        variable_type: env_var\n\n- name: Delete one variable\n  community.general.gitlab_group_variable:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    group: scodeman/testgroup/\n    state: absent\n    vars:\n      ACCESS_KEY_ID: abc123\n"
  },
  "community.general.gitlab_hook": {
    "doc": {
      "description": "Adds, updates and removes project hook",
      "has_action": false,
      "options": {
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hook_url": {
          "aliases": [],
          "description": "The url that you want GitLab to post to, this is used as the primary key for updates and deletion.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hook_validate_certs": {
          "aliases": [
            "enable_ssl_verification"
          ],
          "description": "Whether GitLab will do SSL verification when triggering the hook.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "issues_events": {
          "aliases": [],
          "description": "Trigger hook on issues events.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_events": {
          "aliases": [],
          "description": "Trigger hook on job events.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "merge_requests_events": {
          "aliases": [],
          "description": "Trigger hook on merge requests events.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "note_events": {
          "aliases": [],
          "description": "Trigger hook on note events or when someone adds a comment.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pipeline_events": {
          "aliases": [],
          "description": "Trigger hook on pipeline events.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Id or Full path of the project in the form of group/name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "push_events": {
          "aliases": [],
          "description": "Trigger hook on push events.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "push_events_branch_filter": {
          "aliases": [],
          "description": "Branch name of wildcard to trigger hook on push events",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When C(present) the hook will be updated to match the input or created if it doesn't exist.\nWhen C(absent) hook will be deleted if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag_push_events": {
          "aliases": [],
          "description": "Trigger hook on tag push events.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Secret token to validate hook messages at the receiver.\nIf this is present it will always result in a change as it cannot be retrieved from GitLab.\nWill show up in the X-GitLab-Token HTTP request header.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wiki_page_events": {
          "aliases": [],
          "description": "Trigger hook on wiki events.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab python module",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Manages GitLab project hooks."
    },
    "examples": "\n- name: \"Adding a project hook\"\n  community.general.gitlab_hook:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    project: \"my_group/my_project\"\n    hook_url: \"https://my-ci-server.example.com/gitlab-hook\"\n    state: present\n    push_events: yes\n    tag_push_events: yes\n    hook_validate_certs: no\n    token: \"my-super-secret-token-that-my-ci-server-will-check\"\n\n- name: \"Delete the previous hook\"\n  community.general.gitlab_hook:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    project: \"my_group/my_project\"\n    hook_url: \"https://my-ci-server.example.com/gitlab-hook\"\n    state: absent\n\n- name: \"Delete a hook by numeric project id\"\n  community.general.gitlab_hook:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    project: 10\n    hook_url: \"https://my-ci-server.example.com/gitlab-hook\"\n    state: absent\n"
  },
  "community.general.gitlab_project": {
    "doc": {
      "description": "When the project does not exist in GitLab, it will be created.\nWhen the project does exists and I(state=absent), the project will be deleted.\nWhen changes are made to the project, the project will be updated.",
      "has_action": false,
      "options": {
        "allow_merge_on_skipped_pipeline": {
          "aliases": [],
          "description": "Allow merge when skipped pipelines exist.",
          "type": "bool",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avatar_path": {
          "aliases": [],
          "description": "Absolute path image to configure avatar. File size should not exceed 200 kb.\nThis option is only used on creation, not for updates.",
          "type": "path",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "ci_config_path": {
          "aliases": [],
          "description": "Custom path to the CI configuration file for this project.",
          "type": "str",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "default_branch": {
          "aliases": [],
          "description": "Default branch name for a new project.\nThis option is only used on creation, not for updates. This is also only used if I(initialize_with_readme=true).",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "An description for the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Id or the full path of the group of which this projects belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "import_url": {
          "aliases": [],
          "description": "Git repository which will be imported into gitlab.\nGitLab server needs read access to this git repository.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "initialize_with_readme": {
          "aliases": [],
          "description": "Will initialize the project with a default C(README.md).\nIs only used when the project is created, and ignored otherwise.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "issues_enabled": {
          "aliases": [],
          "description": "Whether you want to create issues or not.\nPossible values are true and false.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lfs_enabled": {
          "aliases": [],
          "description": "Enable Git large file systems to manages large files such as audio, video, and graphics files.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "merge_method": {
          "aliases": [],
          "description": "What requirements are placed upon merges.\nPossible values are C(merge), C(rebase_merge) merge commit with semi-linear history, C(ff) fast-forward merges only.",
          "default": "merge",
          "type": "str",
          "required": false,
          "choices": [
            "ff",
            "merge",
            "rebase_merge"
          ],
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "merge_requests_enabled": {
          "aliases": [],
          "description": "If merge requests can be made or not.\nPossible values are true and false.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the project.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "only_allow_merge_if_all_discussions_are_resolved": {
          "aliases": [],
          "description": "All discussions on a merge request (MR) have to be resolved.",
          "type": "bool",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "only_allow_merge_if_pipeline_succeeds": {
          "aliases": [],
          "description": "Only allow merges if pipeline succeeded.",
          "type": "bool",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "packages_enabled": {
          "aliases": [],
          "description": "Enable GitLab package repository.",
          "type": "bool",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path of the project you want to create, this will be server_url/<group>/path.\nIf not supplied, name will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remove_source_branch_after_merge": {
          "aliases": [],
          "description": "Remove the source branch after merge.",
          "type": "bool",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "shared_runners_enabled": {
          "aliases": [],
          "description": "Enable shared runners for this project.",
          "type": "bool",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "snippets_enabled": {
          "aliases": [],
          "description": "If creating snippets should be available or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "squash_option": {
          "aliases": [],
          "description": "Squash commits when merging.",
          "type": "str",
          "required": false,
          "choices": [
            "never",
            "always",
            "default_off",
            "default_on"
          ],
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete project.\nPossible values are present and absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Used to create a personal project under a user's name.",
          "type": "str",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "visibility": {
          "aliases": [
            "visibility_level"
          ],
          "description": "C(private) Project access must be granted explicitly for each user.\nC(internal) The project can be cloned by any logged in user.\nC(public) The project can be cloned without any authentication.",
          "default": "private",
          "type": "str",
          "required": false,
          "choices": [
            "private",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "wiki_enabled": {
          "aliases": [],
          "description": "If an wiki for this project should be available or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab python module",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Creates/updates/deletes GitLab Projects"
    },
    "examples": "\n- name: Create GitLab Project\n  community.general.gitlab_project:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ api_token }}\"\n    name: my_first_project\n    group: \"10481470\"\n\n- name: Delete GitLab Project\n  community.general.gitlab_project:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    validate_certs: False\n    name: my_first_project\n    state: absent\n  delegate_to: localhost\n\n- name: Create GitLab Project in group Ansible\n  community.general.gitlab_project:\n    api_url: https://gitlab.example.com/\n    validate_certs: True\n    api_username: dj-wasabi\n    api_password: \"MySecretPassword\"\n    name: my_first_project\n    group: ansible\n    issues_enabled: False\n    merge_method: rebase_merge\n    wiki_enabled: True\n    snippets_enabled: True\n    import_url: http://git.example.com/example/lab.git\n    initialize_with_readme: true\n    state: present\n  delegate_to: localhost\n\n- name: get the initial root password\n  ansible.builtin.shell: |\n    grep 'Password:' /etc/gitlab/initial_root_password | sed -e 's/Password\\: \\(.*\\)/\\1/'\n  register: initial_root_password\n\n- name: Create a GitLab Project using a username/password via oauth_token\n  community.general.gitlab_project:\n    api_url: https://gitlab.example.com/\n    api_username: root\n    api_password: \"{{ initial_root_password }}\"\n    name: my_second_project\n    group: \"10481470\"\n"
  },
  "community.general.gitlab_project_members": {
    "doc": {
      "description": "This module allows to add and remove members to/from a project, or change a member's access level in a project on GitLab.",
      "has_action": false,
      "notes": "Supports C(check_mode).",
      "options": {
        "access_level": {
          "aliases": [],
          "description": "The access level for the user.\nRequired if I(state=present), user state is set to present.",
          "type": "str",
          "required": false,
          "choices": [
            "guest",
            "reporter",
            "developer",
            "maintainer"
          ],
          "suboptions": {}
        },
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gitlab_user": {
          "aliases": [],
          "description": "A username or a list of usernames to add to/remove from the GitLab project.\nMutually exclusive with I(gitlab_users_access).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "gitlab_users_access": {
          "aliases": [],
          "description": "Provide a list of user to access level mappings.\nEvery dictionary in this list specifies a user (by username) and the access level the user should have.\nMutually exclusive with I(gitlab_user) and I(access_level).\nUse together with I(purge_users) to remove all users not specified here from the project.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "3.7.0",
          "suboptions": {
            "access_level": {
              "aliases": [],
              "description": "The access level for the user.\nRequired if I(state=present), user state is set to present.",
              "type": "str",
              "required": true,
              "choices": [
                "guest",
                "reporter",
                "developer",
                "maintainer"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "A username or a list of usernames to add to/remove from the GitLab project.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "project": {
          "aliases": [],
          "description": "The name (or full path) of the GitLab project the member is added to/removed from.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "purge_users": {
          "aliases": [],
          "description": "Adds/remove users of the given access_level to match the given I(gitlab_user)/I(gitlab_users_access) list. If omitted do not purge orphaned members.\nIs only used when I(state=present).",
          "type": "list",
          "required": false,
          "choices": [
            "guest",
            "reporter",
            "developer",
            "maintainer"
          ],
          "elements": "str",
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the member in the project.\nOn C(present), it adds a user to a GitLab project.\nOn C(absent), it removes a user from a GitLab project.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "owner or maintainer rights to project on the GitLab server",
        "python-gitlab python module <= 1.15.0",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Manage project members on GitLab Server",
      "version_added": "2.2.0"
    },
    "examples": "\n- name: Add a user to a GitLab Project\n  community.general.gitlab_project_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    validate_certs: True\n    project: projectname\n    gitlab_user: username\n    access_level: developer\n    state: present\n\n- name: Remove a user from a GitLab project\n  community.general.gitlab_project_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    validate_certs: False\n    project: projectname\n    gitlab_user: username\n    state: absent\n\n- name: Add a list of Users to A GitLab project\n  community.general.gitlab_project_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    gitlab_project: projectname\n    gitlab_user:\n      - user1\n      - user2\n    access_level: developer\n    state: present\n\n- name: Add a list of Users with Dedicated Access Levels to A GitLab project\n  community.general.gitlab_project_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    project: projectname\n    gitlab_users_access:\n      - name: user1\n        access_level: developer\n      - name: user2\n        access_level: maintainer\n    state: present\n\n- name: Add a user, remove all others which might be on this access level\n  community.general.gitlab_project_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    project: projectname\n    gitlab_user: username\n    access_level: developer\n    pruge_users: developer\n    state: present\n\n- name: Remove a list of Users with Dedicated Access Levels to A GitLab project\n  community.general.gitlab_project_members:\n    api_url: 'https://gitlab.example.com'\n    api_token: 'Your-Private-Token'\n    project: projectname\n    gitlab_users_access:\n      - name: user1\n        access_level: developer\n      - name: user2\n        access_level: maintainer\n    state: absent\n"
  },
  "community.general.gitlab_project_variable": {
    "doc": {
      "description": "When a project variable does not exist, it will be created.\nWhen a project variable does exist, its value will be updated when the values are different.\nVariables which are untouched in the playbook, but are not untouched in the GitLab project, they stay untouched (I(purge) is C(false)) or will be deleted (I(purge) is C(true)).",
      "has_action": false,
      "options": {
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The path and name of the project.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "When set to true, all variables which are not untouched in the task will be deleted.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete project variable.\nPossible values are present and absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "A list of dictionaries that represents CI/CD variables.\nThis module works internal with this structure, even if the older I(vars) parameter is used.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "4.4.0",
          "suboptions": {
            "environment_scope": {
              "aliases": [],
              "description": "The scope for the variable.\nSupport for I(environment_scope) requires GitLab Premium >= 13.11.",
              "default": "*",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "masked": {
              "aliases": [],
              "description": "Wether variable value is masked or not.\nSupport for masked values requires GitLab >= 11.10.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the variable.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "protected": {
              "aliases": [],
              "description": "Wether variable value is protected or not.\nSupport for protected values requires GitLab >= 9.3.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "The variable value.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "variable_type": {
              "aliases": [],
              "description": "Wether a variable is an environment variable (C(env_var)) or a file (C(file)).\nSupport for I(variable_type) requires GitLab >= 11.11.",
              "default": "env_var",
              "type": "str",
              "required": false,
              "choices": [
                "env_var",
                "file"
              ],
              "suboptions": {}
            }
          }
        },
        "vars": {
          "aliases": [],
          "description": "When the list element is a simple key-value pair, masked and protected will be set to false.\nWhen the list element is a dict with the keys I(value), I(masked) and I(protected), the user can have full control about whether a value should be masked, protected or both.\nSupport for protected values requires GitLab >= 9.3.\nSupport for masked values requires GitLab >= 11.10.\nSupport for environment_scope requires GitLab Premium >= 13.11.\nSupport for variable_type requires GitLab >= 11.11.\nA I(value) must be a string or a number.\nField I(variable_type) must be a string with either C(env_var), which is the default, or C(file).\nField I(environment_scope) must be a string defined by scope environment.\nWhen a value is masked, it must be in Base64 and have a length of at least 8 characters. See GitLab documentation on acceptable values for a masked variable (https://docs.gitlab.com/ce/ci/variables/#masked-variables).",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab python module",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Creates/updates/deletes GitLab Projects Variables"
    },
    "examples": "\n- name: Set or update some CI/CD variables\n  community.general.gitlab_project_variable:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    project: markuman/dotfiles\n    purge: false\n    variables:\n      - name: ACCESS_KEY_ID\n        value: abc123\n      - name: SECRET_ACCESS_KEY\n        value: dassgrfaeui8989\n        masked: yes\n        protected: yes\n        environment_scope: production\n\n- name: Set or update some CI/CD variables\n  community.general.gitlab_project_variable:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    project: markuman/dotfiles\n    purge: false\n    vars:\n      ACCESS_KEY_ID: abc123\n      SECRET_ACCESS_KEY:\n        value: 3214cbad\n        masked: true\n        protected: true\n        variable_type: env_var\n        environment_scope: '*'\n\n- name: Delete one variable\n  community.general.gitlab_project_variable:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    project: markuman/dotfiles\n    state: absent\n    vars:\n      ACCESS_KEY_ID: abc123\n"
  },
  "community.general.gitlab_protected_branch": {
    "doc": {
      "description": "(un)Marking existing branches for protection.",
      "has_action": false,
      "options": {
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "merge_access_levels": {
          "aliases": [],
          "description": "Access levels allowed to merge.",
          "default": "maintainer",
          "type": "str",
          "required": false,
          "choices": [
            "maintainer",
            "developer",
            "nobody"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the branch that needs to be protected.\nCan make use a wildcard charachter for like C(production/*) or just have C(main) or C(develop) as value.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The path and name of the project.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "push_access_level": {
          "aliases": [],
          "description": "Access levels allowed to push.",
          "default": "maintainer",
          "type": "str",
          "required": false,
          "choices": [
            "maintainer",
            "developer",
            "nobody"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete proteced branch.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab >= 2.3.0",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "(un)Marking existing branches for protection",
      "version_added": "3.4.0"
    },
    "examples": "\n- name: Create protected branch on main\n  community.general.gitlab_protected_branch:\n    api_url: https://gitlab.com\n    api_token: secret_access_token\n    project: \"dj-wasabi/collection.general\"\n    name: main\n    merge_access_levels: maintainer\n    push_access_level: nobody\n\n"
  },
  "community.general.gitlab_runner": {
    "doc": {
      "description": "Register, update and delete runners with the GitLab API.\nAll operations are performed using the GitLab API v4.\nFor details, consult the full API documentation at U(https://docs.gitlab.com/ee/api/runners.html).\nA valid private API token is required for all operations. You can create as many tokens as you like using the GitLab web interface at U(https://$GITLAB_URL/profile/personal_access_tokens).\nA valid registration token is required for registering a new runner. To create shared runners, you need to ask your administrator to give you this token. It can be found at U(https://$GITLAB_URL/admin/runners/).",
      "has_action": false,
      "notes": "To create a new runner at least the C(api_token), C(description) and C(api_url) options are required.\nRunners need to have unique descriptions.",
      "options": {
        "access_level": {
          "aliases": [],
          "description": "Determines if a runner can pick up jobs only from protected branches.\nIf set to C(ref_protected), runner can pick up jobs only from protected branches.\nIf set to C(not_protected), runner can pick up jobs from both protected and unprotected branches.",
          "default": "ref_protected",
          "type": "str",
          "required": false,
          "choices": [
            "ref_protected",
            "not_protected"
          ],
          "suboptions": {}
        },
        "active": {
          "aliases": [],
          "description": "Define if the runners is immediately active after creation.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [
            "name"
          ],
          "description": "The unique name of the runner.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "locked": {
          "aliases": [],
          "description": "Determines if the runner is locked or not.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maximum_timeout": {
          "aliases": [],
          "description": "The maximum time that a runner has to complete a specific job.",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "owned": {
          "aliases": [],
          "description": "Searches only runners available to the user when searching for existing, when false admin token required.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "ID or full path of the project in the form of group/name.",
          "type": "str",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "registration_token": {
          "aliases": [],
          "description": "The registration token is used to register new runners.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "run_untagged": {
          "aliases": [],
          "description": "Run untagged jobs or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Make sure that the runner with the same name exists with the same configuration or delete the runner with the same name.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag_list": {
          "aliases": [],
          "description": "The tags that apply to the runner.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "python-gitlab >= 1.5.0",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Create, modify and delete GitLab Runners."
    },
    "examples": "\n- name: \"Register runner\"\n  community.general.gitlab_runner:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    registration_token: 4gfdsg345\n    description: Docker Machine t1\n    state: present\n    active: True\n    tag_list: ['docker']\n    run_untagged: False\n    locked: False\n\n- name: \"Delete runner\"\n  community.general.gitlab_runner:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    description: Docker Machine t1\n    state: absent\n\n- name: Delete an owned runner as a non-admin\n  community.general.gitlab_runner:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    description: Docker Machine t1\n    owned: yes\n    state: absent\n\n- name: Register runner for a specific project\n  community.general.gitlab_runner:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    registration_token: 4gfdsg345\n    description: MyProject runner\n    state: present\n    project: mygroup/mysubgroup/myproject\n"
  },
  "community.general.gitlab_user": {
    "doc": {
      "description": "When the user does not exist in GitLab, it will be created.\nWhen the user exists and state=absent, the user will be deleted.\nWhen the user exists and state=blocked, the user will be blocked.\nWhen changes are made to user, the user will be updated.",
      "has_action": false,
      "notes": "From community.general 0.2.0 and onwards, name, email and password are optional while deleting the user.",
      "options": {
        "access_level": {
          "aliases": [],
          "description": "The access level to the group. One of the following can be used.\nguest\nreporter\ndeveloper\nmaster (alias for maintainer)\nmaintainer\nowner",
          "default": "guest",
          "type": "str",
          "required": false,
          "choices": [
            "guest",
            "reporter",
            "developer",
            "master",
            "maintainer",
            "owner"
          ],
          "suboptions": {}
        },
        "api_job_token": {
          "aliases": [],
          "description": "GitLab CI job token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_oauth_token": {
          "aliases": [],
          "description": "GitLab OAuth token for logging in.",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "GitLab access token with API permissions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "The resolvable endpoint for the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The username to use for authentication against the API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "confirm": {
          "aliases": [],
          "description": "Require confirmation.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "The email that belongs to the user.\nRequired only if C(state) is set to C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external": {
          "aliases": [],
          "description": "Define external parameter for this user.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Id or Full path of parent group in the form of group/name.\nAdd user as a member to this group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identities": {
          "aliases": [],
          "description": "List of identities to be added/updated for this user.\nTo remove all other identities from this user, set I(overwrite_identities=true).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "3.3.0",
          "suboptions": {
            "extern_uid": {
              "aliases": [],
              "description": "User ID for external identity.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "provider": {
              "aliases": [],
              "description": "The name of the external identity provider",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "isadmin": {
          "aliases": [],
          "description": "Grant admin privileges to the user.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the user you want to create.\nRequired only if C(state) is set to C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "overwrite_identities": {
          "aliases": [],
          "description": "Overwrite identities with identities added in this module.\nThis means that all identities that the user has and that are not listed in I(identities) are removed from the user.\nThis is only done if a list is provided for I(identities). To remove all identities, provide an empty list.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password of the user.\nGitLab server enforces minimum password length to 8, set this value with 8 or more characters.\nRequired only if C(state) is set to C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reset_password": {
          "aliases": [],
          "description": "Whether the user can change its password or not.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "sshkey_expires_at": {
          "aliases": [],
          "description": "The expiration date of the SSH public key in ISO 8601 format C(YYYY-MM-DDTHH:MM:SSZ).\nThis is only used when adding new SSH public keys.",
          "type": "str",
          "required": false,
          "version_added": "3.1.0",
          "suboptions": {}
        },
        "sshkey_file": {
          "aliases": [],
          "description": "The SSH public key itself.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sshkey_name": {
          "aliases": [],
          "description": "The name of the SSH public key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create, delete or block a user.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "blocked",
            "unblocked"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username of the user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether or not to validate SSL certs when supplying a https endpoint.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "administrator rights on the GitLab server",
        "python >= 2.7",
        "python-gitlab python module",
        "requests (Python library U(https://pypi.org/project/requests/))"
      ],
      "short_description": "Creates/updates/deletes/blocks/unblocks GitLab Users"
    },
    "examples": "\n- name: \"Delete GitLab User\"\n  community.general.gitlab_user:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    validate_certs: False\n    username: myusername\n    state: absent\n\n- name: \"Create GitLab User\"\n  community.general.gitlab_user:\n    api_url: https://gitlab.example.com/\n    validate_certs: True\n    api_username: dj-wasabi\n    api_password: \"MySecretPassword\"\n    name: My Name\n    username: myusername\n    password: mysecretpassword\n    email: me@example.com\n    sshkey_name: MySSH\n    sshkey_file: ssh-rsa AAAAB3NzaC1yc...\n    state: present\n    group: super_group/mon_group\n    access_level: owner\n\n- name: \"Create GitLab User using external identity provider\"\n  community.general.gitlab_user:\n    api_url: https://gitlab.example.com/\n    validate_certs: True\n    api_token: \"{{ access_token }}\"\n    name: My Name\n    username: myusername\n    password: mysecretpassword\n    email: me@example.com\n    identities:\n    - provider: Keycloak\n      extern_uid: f278f95c-12c7-4d51-996f-758cc2eb11bc\n    state: present\n    group: super_group/mon_group\n    access_level: owner\n\n- name: \"Block GitLab User\"\n  community.general.gitlab_user:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    validate_certs: False\n    username: myusername\n    state: blocked\n\n- name: \"Unblock GitLab User\"\n  community.general.gitlab_user:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    validate_certs: False\n    username: myusername\n    state: unblocked\n"
  },
  "community.general.grove": {
    "doc": {
      "description": "The C(grove) module sends a message for a service to a Grove.io channel.",
      "has_action": false,
      "options": {
        "channel_token": {
          "aliases": [],
          "description": "Token of the channel to post to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "icon_url": {
          "aliases": [],
          "description": "Icon for the service",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "message_content": {
          "aliases": [],
          "description": "Message content.\nThe alias I(message) is deprecated and will be removed in community.general 4.0.0.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "Name of the service (displayed as the \"user\" in the message)",
          "default": "ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Service URL for the web client",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Sends a notification to a grove.io channel"
    },
    "examples": "\n- name: Sends a notification to a grove.io channel\n  community.general.grove:\n    channel_token: 6Ph62VBBJOccmtTPZbubiPzdrhipZXtg\n    service: my-app\n    message: 'deployed {{ target }}'\n"
  },
  "community.general.gunicorn": {
    "doc": {
      "description": "Starts gunicorn with the parameters specified. Common settings for gunicorn configuration are supported. For additional configuration use a config file See U(https://gunicorn-docs.readthedocs.io/en/latest/settings.html) for more options. It's recommended to always use the chdir option to avoid problems with the location of the app.",
      "has_action": false,
      "notes": "If not specified on config file, a temporary error log will be created on /tmp dir. Please make sure you have write access in /tmp dir. Not needed but will help you to identify any problem with configuration.",
      "options": {
        "app": {
          "aliases": [
            "name"
          ],
          "description": "The app module. A name refers to a WSGI callable that should be found in the specified module.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "chdir": {
          "aliases": [],
          "description": "Chdir to specified directory before apps loading.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [
            "conf"
          ],
          "description": "Path to the gunicorn configuration file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "pid": {
          "aliases": [],
          "description": "A filename to use for the PID file. If not set and not found on the configuration file a tmp pid file will be created to check a successful run of gunicorn.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Switch worker processes to run as this user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "venv": {
          "aliases": [
            "virtualenv"
          ],
          "description": "Path to the virtualenv directory.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "worker": {
          "aliases": [],
          "description": "The type of workers to use. The default class (sync) should handle most \"normal\" types of workloads.",
          "type": "str",
          "required": false,
          "choices": [
            "sync",
            "eventlet",
            "gevent",
            "tornado ",
            "gthread",
            "gaiohttp"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "gunicorn"
      ],
      "short_description": "Run gunicorn with various settings."
    },
    "examples": "\n- name: Simple gunicorn run example\n  community.general.gunicorn:\n    app: 'wsgi'\n    chdir: '/workspace/example'\n\n- name: Run gunicorn on a virtualenv\n  community.general.gunicorn:\n    app: 'wsgi'\n    chdir: '/workspace/example'\n    venv: '/workspace/example/venv'\n\n- name: Run gunicorn with a config file\n  community.general.gunicorn:\n    app: 'wsgi'\n    chdir: '/workspace/example'\n    conf: '/workspace/example/gunicorn.cfg'\n\n- name: Run gunicorn as ansible user with specified pid and config file\n  community.general.gunicorn:\n    app: 'wsgi'\n    chdir: '/workspace/example'\n    conf: '/workspace/example/gunicorn.cfg'\n    venv: '/workspace/example/venv'\n    pid: '/workspace/example/gunicorn.pid'\n    user: 'ansible'\n"
  },
  "community.general.hana_query": {
    "doc": {
      "description": "This module executes SQL statements on HANA with hdbsql.",
      "has_action": false,
      "notes": "Does not support C(check_mode).",
      "options": {
        "autocommit": {
          "aliases": [],
          "description": "Autocommit the statement.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "database": {
          "aliases": [],
          "description": "Define the database on which to connect.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "encrypted": {
          "aliases": [],
          "description": "Use encrypted connection. Defaults to C(false).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "filepath": {
          "aliases": [],
          "description": "One or more files each containing one SQL query to run.\nMust be a string or list containing strings.",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The Host IP address. The port can be defined as well.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance": {
          "aliases": [],
          "description": "The instance number.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to connect to the database.\nB(Note:) Since the passwords have to be passed as command line arguments, I(userstore=true) should be used whenever possible, as command line arguments can be seen by other users on the same machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "SQL query to run.\nMust be a string or list containing strings. Please note that if you supply a string, it will be split by commas (C(,)) to a list. It is better to supply a one-element list instead to avoid mangled input.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sid": {
          "aliases": [],
          "description": "The system ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "A dedicated username. The user could be also in hdbuserstore. Defaults to C(SYSTEM).",
          "default": "SYSTEM",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "userstore": {
          "aliases": [],
          "description": "If C(true) the user must be in hdbuserstore.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.5.0",
          "suboptions": {}
        }
      },
      "short_description": "Execute SQL on HANA",
      "version_added": "3.2.0"
    },
    "examples": "\n- name: Simple select query\n  community.general.hana_query:\n    sid: \"hdb\"\n    instance: \"01\"\n    password: \"Test123\"\n    query: \"select user_name from users\"\n\n- name: Run several queries\n  community.general.hana_query:\n    sid: \"hdb\"\n    instance: \"01\"\n    password: \"Test123\"\n    query:\n    - \"select user_name from users;\"\n    - select * from SYSTEM;\n    host: \"localhost\"\n    autocommit: False\n\n- name: Run several queries from file\n  community.general.hana_query:\n    sid: \"hdb\"\n    instance: \"01\"\n    password: \"Test123\"\n    filepath:\n    - /tmp/HANA_CPU_UtilizationPerCore_2.00.020+.txt\n    - /tmp/HANA.txt\n    host: \"localhost\"\n\n- name: Run several queries from user store\n  community.general.hana_query:\n    sid: \"hdb\"\n    instance: \"01\"\n    user: hdbstoreuser\n    userstore: true\n    query:\n    - \"select user_name from users;\"\n    - select * from users;\n    autocommit: False\n"
  },
  "community.general.haproxy": {
    "doc": {
      "description": "Enable, disable, drain and set weights for HAProxy backend servers using socket commands.",
      "has_action": false,
      "notes": "Enable, disable and drain commands are restricted and can only be issued on sockets configured for level 'admin'. For example, you can add the line 'stats socket /var/run/haproxy.sock level admin' to the general section of haproxy.cfg. See U(http://haproxy.1wt.eu/download/1.5/doc/configuration.txt).\nDepends on netcat (nc) being available; you need to install the appropriate package for your operating system before this module can be used.",
      "options": {
        "agent": {
          "aliases": [],
          "description": "Disable/enable agent checks (depending on I(state) value).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "backend": {
          "aliases": [],
          "description": "Name of the HAProxy backend pool.\nIf this parameter is unset, it will be auto-detected.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "drain": {
          "aliases": [],
          "description": "Wait until the server has no active connections or until the timeout determined by wait_interval and wait_retries is reached.\nContinue only after the status changes to 'MAINT'.\nThis overrides the shutdown_sessions option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fail_on_not_found": {
          "aliases": [],
          "description": "Fail whenever trying to enable/disable a backend host that does not exist",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "health": {
          "aliases": [],
          "description": "Disable/enable health checks (depending on I(state) value).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Name of the backend host to change.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "shutdown_sessions": {
          "aliases": [],
          "description": "When disabling a server, immediately terminate all the sessions attached to the specified server.\nThis can be used to terminate long-running sessions after a server is put into maintenance mode. Overridden by the drain option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "socket": {
          "aliases": [],
          "description": "Path to the HAProxy socket file.",
          "default": "/var/run/haproxy.sock",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the provided backend host.\nNote that C(drain) state was added in version 2.4.\nIt is supported only by HAProxy version 1.5 or later,\nWhen used on versions < 1.5, it will be ignored.",
          "type": "str",
          "required": true,
          "choices": [
            "disabled",
            "drain",
            "enabled"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait until the server reports a status of 'UP' when C(state=enabled), status of 'MAINT' when C(state=disabled) or status of 'DRAIN' when C(state=drain)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_interval": {
          "aliases": [],
          "description": "Number of seconds to wait between retries.",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_retries": {
          "aliases": [],
          "description": "Number of times to check for status after changing the state.",
          "default": "25",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "The value passed in argument.\nIf the value ends with the `%` sign, then the new weight will be relative to the initially configured weight.\nRelative weights are only permitted between 0 and 100% and absolute weights are permitted between 0 and 256.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Enable, disable, and set weights for HAProxy backend servers using socket commands"
    },
    "examples": "\n- name: Disable server in 'www' backend pool\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n\n- name: Disable server in 'www' backend pool, also stop health/agent checks\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    health: yes\n    agent: yes\n\n- name: Disable server without backend pool name (apply to all available backend pool)\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n\n- name: Disable server, provide socket file\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    backend: www\n\n- name: Disable server, provide socket file, wait until status reports in maintenance\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    backend: www\n    wait: yes\n\n# Place server in drain mode, providing a socket file.  Then check the server's\n# status every minute to see if it changes to maintenance mode, continuing if it\n# does in an hour and failing otherwise.\n- community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    backend: www\n    wait: yes\n    drain: yes\n    wait_interval: 60\n    wait_retries: 60\n\n- name: Disable backend server in 'www' backend pool and drop open sessions to it\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n    socket: /var/run/haproxy.sock\n    shutdown_sessions: yes\n\n- name: Disable server without backend pool name (apply to all available backend pool) but fail when the backend host is not found\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    fail_on_not_found: yes\n\n- name: Enable server in 'www' backend pool\n  community.general.haproxy:\n    state: enabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n\n- name: Enable server in 'www' backend pool wait until healthy\n  community.general.haproxy:\n    state: enabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n    wait: yes\n\n- name: Enable server in 'www' backend pool wait until healthy. Retry 10 times with intervals of 5 seconds to retrieve the health\n  community.general.haproxy:\n    state: enabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n    wait: yes\n    wait_retries: 10\n    wait_interval: 5\n\n- name: Enable server in 'www' backend pool with change server(s) weight\n  community.general.haproxy:\n    state: enabled\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    weight: 10\n    backend: www\n\n- name: Set the server in 'www' backend pool to drain mode\n  community.general.haproxy:\n    state: drain\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    backend: www\n"
  },
  "community.general.heroku_collaborator": {
    "doc": {
      "description": "Manages collaborators for Heroku apps.\nIf set to C(present) and heroku user is already collaborator, then do nothing.\nIf set to C(present) and heroku user is not collaborator, then add user to app.\nIf set to C(absent) and heroku user is collaborator, then delete user from app.",
      "has_action": false,
      "notes": "C(HEROKU_API_KEY) and C(TF_VAR_HEROKU_API_KEY) env variable can be used instead setting C(api_key).\nIf you use I(--check), you can also pass the I(-v) flag to see affected apps in C(msg), e.g. [\"heroku-example-app\"].",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Heroku API key",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "apps": {
          "aliases": [],
          "description": "List of Heroku App names",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or remove the heroku collaborator",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_invitation": {
          "aliases": [],
          "description": "Suppress email invitation when creating collaborator",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User ID or e-mail",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "heroku3"
      ],
      "short_description": "Add or delete app collaborators on Heroku"
    },
    "examples": "\n- name: Create a heroku collaborator\n  community.general.heroku_collaborator:\n    api_key: YOUR_API_KEY\n    user: max.mustermann@example.com\n    apps: heroku-example-app\n    state: present\n\n- name: An example of using the module in loop\n  community.general.heroku_collaborator:\n    api_key: YOUR_API_KEY\n    user: '{{ item.user }}'\n    apps: '{{ item.apps | default(apps) }}'\n    suppress_invitation: '{{ item.suppress_invitation | default(suppress_invitation) }}'\n    state: '{{ item.state | default(\"present\") }}'\n  with_items:\n    - { user: 'a.b@example.com' }\n    - { state: 'absent', user: 'b.c@example.com', suppress_invitation: false }\n    - { user: 'x.y@example.com', apps: [\"heroku-example-app\"] }\n"
  },
  "community.general.hg": {
    "doc": {
      "description": "Manages Mercurial (hg) repositories. Supports SSH, HTTP/S and local address.",
      "has_action": false,
      "notes": "This module does not support push capability. See U(https://github.com/ansible/ansible/issues/31156).\nIf the task seems to be hanging, first verify remote host is in C(known_hosts). SSH will prompt user to authorize the first contact with a remote host.  To avoid this prompt, one solution is to add the remote host public key in C(/etc/ssh/ssh_known_hosts) before calling the hg module, with the following command: ssh-keyscan remote_host.com >> /etc/ssh/ssh_known_hosts.\nAs per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such, if the underlying system still uses a Python version below 2.7.9, you will have issues checking out bitbucket repositories. See U(https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01).",
      "options": {
        "clone": {
          "aliases": [],
          "description": "If C(no), do not clone the repository if it does not exist locally.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Absolute path of where the repository should be cloned to. This parameter is required, unless clone and update are set to no",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "Path to hg executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Discards uncommitted changes. Runs C(hg update -C).  Prior to 1.9, the default was `yes`.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Deletes untracked files. Runs C(hg purge).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "repo": {
          "aliases": [
            "name"
          ],
          "description": "The repository address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "revision": {
          "aliases": [
            "version"
          ],
          "description": "Equivalent C(-r) option in hg command which could be the changeset, revision number, branch name or even tag.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "update": {
          "aliases": [],
          "description": "If C(no), do not retrieve new revisions from the origin repository",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Mercurial (hg) repositories"
    },
    "examples": "\n- name: Ensure the current working copy is inside the stable branch and deletes untracked files if any.\n  community.general.hg:\n    repo: https://bitbucket.org/user/repo1\n    dest: /home/user/repo1\n    revision: stable\n    purge: yes\n\n- name: Get information about the repository whether or not it has already been cloned locally.\n  community.general.hg:\n    repo: git://bitbucket.org/user/repo\n    dest: /srv/checkout\n    clone: no\n    update: no\n"
  },
  "community.general.hipchat": {
    "doc": {
      "description": "Send a message to a Hipchat room, with options to control the formatting.",
      "has_action": false,
      "options": {
        "api": {
          "aliases": [],
          "description": "API url if using a self-hosted hipchat server. For Hipchat API version 2 use the default URI with C(/v2) instead of C(/v1).",
          "default": "https://api.hipchat.com/v1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "color": {
          "aliases": [],
          "description": "Background color for the message.",
          "default": "yellow",
          "type": "str",
          "required": false,
          "choices": [
            "yellow",
            "red",
            "green",
            "purple",
            "gray",
            "random"
          ],
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The message body.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "msg_format": {
          "aliases": [],
          "description": "Message format.",
          "default": "text",
          "type": "str",
          "required": false,
          "choices": [
            "text",
            "html"
          ],
          "suboptions": {}
        },
        "msg_from": {
          "aliases": [
            "from"
          ],
          "description": "Name the message will appear to be sent from. Max length is 15 characters - above this it will be truncated.",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notify": {
          "aliases": [],
          "description": "If true, a notification will be triggered for users in the room.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "room": {
          "aliases": [],
          "description": "ID or name of the room.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send a message to Hipchat."
    },
    "examples": "\n- name: Send a message to a Hipchat room\n  community.general.hipchat:\n    room: notif\n    msg: Ansible task finished\n\n- name: Send a message to a Hipchat room using Hipchat API version 2\n  community.general.hipchat:\n    api: https://api.hipchat.com/v2/\n    token: OAUTH2_TOKEN\n    room: notify\n    msg: Ansible task finished\n"
  },
  "community.general.homebrew": {
    "doc": {
      "description": "Manages Homebrew packages",
      "has_action": false,
      "notes": "When used with a `loop:` each package will be processed individually, it is much more efficient to pass the list directly to the `name` option.",
      "options": {
        "install_options": {
          "aliases": [
            "options"
          ],
          "description": "options flags to install a package.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "formula",
            "package",
            "pkg"
          ],
          "description": "A list of names of packages to install/remove.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "A ':' separated list of paths to search for 'brew' executable. Since a package (I(formula) in homebrew parlance) location is prefixed relative to the actual path of I(brew) command, providing an alternative I(brew) path enables managing different set of packages in an alternative location in the system.",
          "default": "/usr/local/bin:/opt/homebrew/bin",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "state of the package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "head",
            "installed",
            "latest",
            "linked",
            "present",
            "removed",
            "uninstalled",
            "unlinked",
            "upgraded"
          ],
          "suboptions": {}
        },
        "update_homebrew": {
          "aliases": [
            "update-brew"
          ],
          "description": "update homebrew itself first.\nAlias C(update-brew) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upgrade_all": {
          "aliases": [
            "upgrade"
          ],
          "description": "upgrade all homebrew packages.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upgrade_options": {
          "aliases": [],
          "description": "Option flags to upgrade.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "homebrew must already be installed on the target system"
      ],
      "short_description": "Package manager for Homebrew"
    },
    "examples": "\n# Install formula foo with 'brew' in default path\n- community.general.homebrew:\n    name: foo\n    state: present\n\n# Install formula foo with 'brew' in alternate path C(/my/other/location/bin)\n- community.general.homebrew:\n    name: foo\n    path: /my/other/location/bin\n    state: present\n\n# Update homebrew first and install formula foo with 'brew' in default path\n- community.general.homebrew:\n    name: foo\n    state: present\n    update_homebrew: yes\n\n# Update homebrew first and upgrade formula foo to latest available with 'brew' in default path\n- community.general.homebrew:\n    name: foo\n    state: latest\n    update_homebrew: yes\n\n# Update homebrew and upgrade all packages\n- community.general.homebrew:\n    update_homebrew: yes\n    upgrade_all: yes\n\n# Miscellaneous other examples\n- community.general.homebrew:\n    name: foo\n    state: head\n\n- community.general.homebrew:\n    name: foo\n    state: linked\n\n- community.general.homebrew:\n    name: foo\n    state: absent\n\n- community.general.homebrew:\n    name: foo,bar\n    state: absent\n\n- community.general.homebrew:\n    name: foo\n    state: present\n    install_options: with-baz,enable-debug\n\n- name: Install formula foo with 'brew' from cask\n  community.general.homebrew:\n    name: homebrew/cask/foo\n    state: present\n\n- name: Use ignore-pinned option while upgrading all\n  community.general.homebrew:\n    upgrade_all: yes\n    upgrade_options: ignore-pinned\n"
  },
  "community.general.homebrew_cask": {
    "doc": {
      "description": "Manages Homebrew casks.",
      "has_action": false,
      "options": {
        "accept_external_apps": {
          "aliases": [],
          "description": "Allow external apps.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "greedy": {
          "aliases": [],
          "description": "Upgrade casks that auto update.\nPasses --greedy to brew cask outdated when checking if an installed cask has a newer version available.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "install_options": {
          "aliases": [
            "options"
          ],
          "description": "Options flags to install a package.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "cask",
            "package",
            "pkg"
          ],
          "description": "Name of cask to install or remove.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "':' separated list of paths to search for 'brew' executable.",
          "default": "/usr/local/bin:/opt/homebrew/bin",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the cask.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "installed",
            "latest",
            "present",
            "removed",
            "uninstalled",
            "upgraded"
          ],
          "suboptions": {}
        },
        "sudo_password": {
          "aliases": [],
          "description": "The sudo password to be passed to SUDO_ASKPASS.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "update_homebrew": {
          "aliases": [
            "update-brew"
          ],
          "description": "Update homebrew itself first.\nNote that C(brew cask update) is a synonym for C(brew update).\nAlias C(update-brew) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upgrade_all": {
          "aliases": [
            "upgrade"
          ],
          "description": "Upgrade all casks.\nMutually exclusive with C(upgraded) state.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6"
      ],
      "short_description": "Install and uninstall homebrew casks"
    },
    "examples": "\n- name: Install cask\n  community.general.homebrew_cask:\n    name: alfred\n    state: present\n\n- name: Remove cask\n  community.general.homebrew_cask:\n    name: alfred\n    state: absent\n\n- name: Install cask with install options\n  community.general.homebrew_cask:\n    name: alfred\n    state: present\n    install_options: 'appdir=/Applications'\n\n- name: Install cask with install options\n  community.general.homebrew_cask:\n    name: alfred\n    state: present\n    install_options: 'debug,appdir=/Applications'\n\n- name: Allow external app\n  community.general.homebrew_cask:\n    name: alfred\n    state: present\n    accept_external_apps: True\n\n- name: Remove cask with force option\n  community.general.homebrew_cask:\n    name: alfred\n    state: absent\n    install_options: force\n\n- name: Upgrade all casks\n  community.general.homebrew_cask:\n    upgrade_all: true\n\n- name: Upgrade given cask with force option\n  community.general.homebrew_cask:\n    name: alfred\n    state: upgraded\n    install_options: force\n\n- name: Upgrade cask with greedy option\n  community.general.homebrew_cask:\n    name: 1password\n    state: upgraded\n    greedy: True\n\n- name: Using sudo password for installing cask\n  community.general.homebrew_cask:\n    name: wireshark\n    state: present\n    sudo_password: \"{{ ansible_become_pass }}\"\n"
  },
  "community.general.homebrew_tap": {
    "doc": {
      "description": "Tap external Homebrew repositories.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [
            "tap"
          ],
          "description": "The GitHub user/organization repository to tap.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "A ':' separated list of paths to search for C(brew) executable.",
          "default": "/usr/local/bin:/opt/homebrew/bin",
          "type": "path",
          "required": false,
          "version_added": "2.1.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "state of the repository.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "The optional git URL of the repository to tap. The URL is not assumed to be on GitHub, and the protocol doesn't have to be HTTP. Any location and protocol that git can handle is fine.\nI(name) option may not be a list of multiple taps (but a single tap instead) when this option is provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "homebrew"
      ],
      "short_description": "Tap a Homebrew repository."
    },
    "examples": "\n- name: Tap a Homebrew repository, state present\n  community.general.homebrew_tap:\n    name: homebrew/dupes\n\n- name: Tap a Homebrew repository, state absent\n  community.general.homebrew_tap:\n    name: homebrew/dupes\n    state: absent\n\n- name: Tap a Homebrew repository, state present\n  community.general.homebrew_tap:\n    name: homebrew/dupes,homebrew/science\n    state: present\n\n- name: Tap a Homebrew repository using url, state present\n  community.general.homebrew_tap:\n    name: telemachus/brew\n    url: 'https://bitbucket.org/telemachus/brew'\n"
  },
  "community.general.homectl": {
    "doc": {
      "description": "Manages a user's home directory managed by systemd-homed.",
      "has_action": false,
      "options": {
        "disksize": {
          "aliases": [],
          "description": "The intended home directory disk space.\nHuman readable value such as C(10G), C(10M), or C(10B).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "The email address of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "environment": {
          "aliases": [
            "setenv"
          ],
          "description": "String separated by comma each containing an environment variable and its value to set for the user's login session, in a format compatible with ``putenv()``.\nAny environment variable listed here is automatically set by pam_systemd for all login sessions of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gid": {
          "aliases": [],
          "description": "Sets the gid of the user.\nIf using I(uid) homed requires the value to be the same.\nOnly used when a user is first created.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "homedir": {
          "aliases": [],
          "description": "Path to use as home directory for the user.\nThis is the directory the user's home directory is mounted to while the user is logged in.\nThis is not where the user's data is actually stored, see I(imagepath) for that.\nOnly used when a user is first created.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "iconname": {
          "aliases": [],
          "description": "The name of an icon picked by the user, for example for the purpose of an avatar.\nShould follow the semantics defined in the Icon Naming Specification.\nSee U(https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html) for specifics.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "imagepath": {
          "aliases": [],
          "description": "Path to place the user's home directory.\nSee U(https://www.freedesktop.org/software/systemd/man/homectl.html#--image-path=PATH) for more information.\nOnly used when a user is first created.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "language": {
          "aliases": [],
          "description": "The preferred language/locale for the user.\nThis should be in a format compatible with the C($LANG) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "A free-form location string describing the location of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "locked": {
          "aliases": [],
          "description": "Whether the user account should be locked or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "memberof": {
          "aliases": [
            "groups"
          ],
          "description": "String separated by comma each indicating a UNIX group this user shall be a member of.\nGroups the user should be a member of should be supplied as comma separated list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mountopts": {
          "aliases": [],
          "description": "String separated by comma each indicating mount options for a users home directory.\nValid options are C(nosuid), C(nodev) or C(noexec).\nHomed by default uses C(nodev) and C(nosuid) while C(noexec) is off.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "user",
            "username"
          ],
          "description": "The user name to create, remove, or update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "notafter": {
          "aliases": [],
          "description": "A time since the UNIX epoch after which the record should be considered invalid for the purpose of logging in.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "notbefore": {
          "aliases": [],
          "description": "A time since the UNIX epoch before which the record should be considered invalid for the purpose of logging in.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Set the user's password to this.\nHomed requires this value to be in cleartext on user creation and updating a user.\nThe module takes the password and generates a password hash in SHA-512 with 10000 rounds of salt generation using crypt.\nSee U(https://systemd.io/USER_RECORD/).\nThis is required for I(state=present). When an existing user is updated this is checked against the stored hash in homed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "passwordhint": {
          "aliases": [],
          "description": "Password hint for the given user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "The 'realm' a user is defined in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "realname": {
          "aliases": [
            "comment"
          ],
          "description": "The user's real ('human') name.\nThis can also be used to add a comment to maintain compatability with C(useradd).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resize": {
          "aliases": [],
          "description": "When used with I(disksize) this will attempt to resize the home directory immediately.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "shell": {
          "aliases": [],
          "description": "Shell binary to use for terminal logins of given user.\nIf not specified homed by default uses C(/bin/bash).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skeleton": {
          "aliases": [
            "skel"
          ],
          "description": "The absolute path to the skeleton directory to populate a new home directory from.\nThis is only used when a home directory is first created.\nIf not specified homed by default uses C(/etc/skel).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "sshkeys": {
          "aliases": [],
          "description": "String separated by comma each listing a SSH public key that is authorized to access the account.\nThe keys should follow the same format as the lines in a traditional C(~/.ssh/authorized_key) file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The operation to take on the user.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "storage": {
          "aliases": [],
          "description": "Indicates the storage mechanism for the user's home directory.\nIf the storage type is not specified, ``homed.conf(5)`` defines which default storage to use.\nOnly used when a user is first created.",
          "type": "str",
          "required": false,
          "choices": [
            "classic",
            "luks",
            "directory",
            "subvolume",
            "fscrypt",
            "cifs"
          ],
          "suboptions": {}
        },
        "timezone": {
          "aliases": [],
          "description": "Preferred timezone to use for the user.\nShould be a tzdata compatible location string such as C(America/New_York).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uid": {
          "aliases": [],
          "description": "Sets the UID of the user.\nIf using I(gid) homed requires the value to be the same.\nOnly used when a user is first created.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "umask": {
          "aliases": [],
          "description": "Sets the umask for the user's login sessions\nValue from C(0000) to C(0777).",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage user accounts with systemd-homed",
      "version_added": "4.4.0"
    },
    "examples": "\n- name: Add the user 'james'\n  community.general.homectl:\n    name: johnd\n    password: myreallysecurepassword1!\n    state: present\n\n- name: Add the user 'alice' with a zsh shell, uid of 1000, and gid of 2000\n  community.general.homectl:\n    name: alice\n    password: myreallysecurepassword1!\n    state: present\n    shell: /bin/zsh\n    uid: 1000\n    gid: 1000\n\n- name: Modify an existing user 'frank' to have 10G of diskspace and resize usage now\n  community.general.homectl:\n    name: frank\n    password: myreallysecurepassword1!\n    state: present\n    disksize: 10G\n    resize: yes\n\n- name: Remove an existing user 'janet'\n  community.general.homectl:\n    name: janet\n    state: absent\n"
  },
  "community.general.honeybadger_deployment": {
    "doc": {
      "description": "Notify Honeybadger.io about app deployments (see http://docs.honeybadger.io/article/188-deployment-tracking)",
      "has_action": false,
      "options": {
        "environment": {
          "aliases": [],
          "description": "The environment name, typically 'production', 'staging', etc.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "URL of the project repository",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "revision": {
          "aliases": [],
          "description": "A hash, number, tag, or other identifier showing what revision was deployed",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Optional URL to submit the notification to.",
          "default": "https://api.honeybadger.io/v1/deploys",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The username of the person doing the deployment",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Notify Honeybadger.io about app deployments"
    },
    "examples": "\n- name: Notify Honeybadger.io about an app deployment\n  community.general.honeybadger_deployment:\n    token: AAAAAA\n    environment: staging\n    user: ansible\n    revision: b6826b8\n    repo: 'git@github.com:user/repo.git'\n"
  },
  "community.general.hpilo_boot": {
    "doc": {
      "description": "This module boots a system through its HP iLO interface. The boot media can be one of: cdrom, floppy, hdd, network or usb.\nThis module requires the hpilo python module.",
      "has_action": false,
      "notes": "To use a USB key image you need to specify floppy as boot media.\nThis module ought to be run from a system that can access the HP iLO interface directly, either by using C(local_action) or using C(delegate_to).",
      "options": {
        "force": {
          "aliases": [],
          "description": "Whether to force a reboot (even when the system is already booted).\nAs a safeguard, without force, hpilo_boot will refuse to reboot a server that is already running.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The HP iLO hostname/address that is linked to the physical system.",
          "required": true,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The URL of a cdrom, floppy or usb boot media image. protocol://username:password@hostname:port/filename\nprotocol is either 'http' or 'https'\nusername:password is optional\nport is optional",
          "required": false,
          "suboptions": {}
        },
        "login": {
          "aliases": [],
          "description": "The login name to authenticate to the HP iLO interface.",
          "default": "Administrator",
          "required": false,
          "suboptions": {}
        },
        "media": {
          "aliases": [],
          "description": "The boot media to boot the system from",
          "required": false,
          "choices": [
            "cdrom",
            "floppy",
            "rbsu",
            "hdd",
            "network",
            "normal",
            "usb"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to authenticate to the HP iLO interface.",
          "default": "admin",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Change the ssl_version used.",
          "default": "TLSv1",
          "required": false,
          "choices": [
            "SSLv3",
            "SSLv23",
            "TLSv1",
            "TLSv1_1",
            "TLSv1_2"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the boot media.\nno_boot: Do not boot from the device\nboot_once: Boot from the device once and then notthereafter\nboot_always: Boot from the device each time the server is rebooted\nconnect: Connect the virtual media device and set to boot_always\ndisconnect: Disconnects the virtual media device and set to no_boot\npoweroff: Power off the server",
          "default": "boot_once",
          "required": false,
          "choices": [
            "boot_always",
            "boot_once",
            "connect",
            "disconnect",
            "no_boot",
            "poweroff"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python-hpilo"
      ],
      "short_description": "Boot system using specific media through HP iLO interface"
    },
    "examples": "\n- name: Task to boot a system using an ISO from an HP iLO interface only if the system is an HP server\n  community.general.hpilo_boot:\n    host: YOUR_ILO_ADDRESS\n    login: YOUR_ILO_LOGIN\n    password: YOUR_ILO_PASSWORD\n    media: cdrom\n    image: http://some-web-server/iso/boot.iso\n  when: cmdb_hwmodel.startswith('HP ')\n  delegate_to: localhost\n\n- name: Power off a server\n  community.general.hpilo_boot:\n    host: YOUR_ILO_HOST\n    login: YOUR_ILO_LOGIN\n    password: YOUR_ILO_PASSWORD\n    state: poweroff\n  delegate_to: localhost\n"
  },
  "community.general.hpilo_info": {
    "doc": {
      "description": "This module gathers information on a specific system using its HP iLO interface. These information includes hardware and network related information useful for provisioning (e.g. macaddress, uuid).\nThis module requires the C(hpilo) python module.\nThis module was called C(hpilo_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.hpilo_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module ought to be run from a system that can access the HP iLO interface directly, either by using C(local_action) or using C(delegate_to).",
      "options": {
        "host": {
          "aliases": [],
          "description": "The HP iLO hostname/address that is linked to the physical system.",
          "required": true,
          "suboptions": {}
        },
        "login": {
          "aliases": [],
          "description": "The login name to authenticate to the HP iLO interface.",
          "default": "Administrator",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to authenticate to the HP iLO interface.",
          "default": "admin",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Change the ssl_version used.",
          "default": "TLSv1",
          "required": false,
          "choices": [
            "SSLv3",
            "SSLv23",
            "TLSv1",
            "TLSv1_1",
            "TLSv1_2"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "hpilo"
      ],
      "short_description": "Gather information through an HP iLO interface"
    },
    "examples": "\n- name: Gather facts from a HP iLO interface only if the system is an HP server\n  community.general.hpilo_info:\n    host: YOUR_ILO_ADDRESS\n    login: YOUR_ILO_LOGIN\n    password: YOUR_ILO_PASSWORD\n  when: cmdb_hwmodel.startswith('HP ')\n  delegate_to: localhost\n  register: results\n\n- ansible.builtin.fail:\n    msg: 'CMDB serial ({{ cmdb_serialno }}) does not match hardware serial ({{ results.hw_system_serial }}) !'\n  when: cmdb_serialno != results.hw_system_serial\n"
  },
  "community.general.hponcfg": {
    "doc": {
      "description": "This modules configures the HP iLO interface using hponcfg.",
      "has_action": false,
      "notes": "You need a working hponcfg on the target system.",
      "options": {
        "executable": {
          "aliases": [],
          "description": "Path to the hponcfg executable (`hponcfg` which uses $PATH).",
          "default": "hponcfg",
          "required": false,
          "suboptions": {}
        },
        "minfw": {
          "aliases": [],
          "description": "The minimum firmware level needed.",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "src"
          ],
          "description": "The XML file as accepted by hponcfg.",
          "required": true,
          "suboptions": {}
        },
        "verbose": {
          "aliases": [],
          "description": "Run hponcfg in verbose mode (-v).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hponcfg tool"
      ],
      "short_description": "Configure HP iLO interface using hponcfg"
    },
    "examples": "\n- name: Example hponcfg configuration XML\n  ansible.builtin.copy:\n    content: |\n      <ribcl VERSION=\"2.0\">\n        <login USER_LOGIN=\"user\" PASSWORD=\"password\">\n          <rib_info MODE=\"WRITE\">\n            <mod_global_settings>\n              <session_timeout value=\"0\"/>\n              <ssh_status value=\"Y\"/>\n              <ssh_port value=\"22\"/>\n              <serial_cli_status value=\"3\"/>\n              <serial_cli_speed value=\"5\"/>\n            </mod_global_settings>\n          </rib_info>\n        </login>\n      </ribcl>\n    dest: /tmp/enable-ssh.xml\n\n- name: Configure HP iLO using enable-ssh.xml\n  community.general.hponcfg:\n    src: /tmp/enable-ssh.xml\n\n- name: Configure HP iLO on VMware ESXi hypervisor\n  community.general.hponcfg:\n    src: /tmp/enable-ssh.xml\n    executable: /opt/hp/tools/hponcfg\n"
  },
  "community.general.htpasswd": {
    "doc": {
      "description": "Add and remove username/password entries in a password file using htpasswd.\nThis is used by web servers such as Apache and Nginx for basic authentication.",
      "has_action": false,
      "notes": "This module depends on the I(passlib) Python library, which needs to be installed on all target systems.\nOn Debian, Ubuntu, or Fedora: install I(python-passlib).\nOn RHEL or CentOS: Enable EPEL, then install I(python-passlib).",
      "options": {
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "create": {
          "aliases": [],
          "description": "Used with C(state=present). If specified, the file will be created if it does not already exist. If set to \"no\", will fail if the file does not exist",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "crypt_scheme": {
          "aliases": [],
          "description": "Encryption scheme to be used.  As well as the four choices listed here, you can also use any other hash supported by passlib, such as md5_crypt and sha256_crypt, which are linux passwd hashes.  If you do so the password file will not be compatible with Apache or Nginx\nSome of the available choices might be: C(apr_md5_crypt), C(des_crypt), C(ldap_sha1), C(plaintext)",
          "default": "apr_md5_crypt",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The permissions the resulting filesystem object should have.\nFor those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.\nGiving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.\nAs of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).\nIf C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.\nIf C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.\nSpecifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "username"
          ],
          "description": "User name to add or remove",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password associated with user.\nMust be specified if user does not exist yet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest",
            "destfile"
          ],
          "description": "Path to the file that contains the usernames and passwords",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the user entry should be present or not",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        }
      },
      "requirements": [
        "passlib>=1.6"
      ],
      "short_description": "manage user files for basic authentication"
    },
    "examples": "\n- name: Add a user to a password file and ensure permissions are set\n  community.general.htpasswd:\n    path: /etc/nginx/passwdfile\n    name: janedoe\n    password: '9s36?;fyNp'\n    owner: root\n    group: www-data\n    mode: 0640\n\n- name: Remove a user from a password file\n  community.general.htpasswd:\n    path: /etc/apache2/passwdfile\n    name: foobar\n    state: absent\n\n- name: Add a user to a password file suitable for use by libpam-pwdfile\n  community.general.htpasswd:\n    path: /etc/mail/passwords\n    name: alex\n    password: oedu2eGh\n    crypt_scheme: md5_crypt\n"
  },
  "community.general.hwc_ecs_instance": {
    "doc": {
      "description": "instance management.",
      "has_action": false,
      "notes": "For authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "admin_pass": {
          "aliases": [],
          "description": "Specifies the initial login password of the administrator account for logging in to an ECS using password authentication. The Linux administrator is root, and the Windows administrator is Administrator. Password complexity requirements, consists of 8 to 26 characters. The password must contain at least three of the following character types 'uppercase letters, lowercase letters, digits, and special characters (!@$%^-_=+[{}]:,./?)'. The password cannot contain the username or the username in reverse. The Windows ECS password cannot contain the username, the username in reverse, or more than two consecutive characters in the username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Specifies the name of the AZ where the ECS is located.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "data_volumes": {
          "aliases": [],
          "description": "Specifies the data disks of ECS instance.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "device": {
              "aliases": [],
              "description": "Specifies the disk device name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "volume_id": {
              "aliases": [],
              "description": "Specifies the disk ID.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Specifies the description of an ECS, which is a null string by default. Can contain a maximum of 85 characters. Cannot contain special characters, such as < and >.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "eip_id": {
          "aliases": [],
          "description": "Specifies the ID of the elastic IP address assigned to the ECS. Only elastic IP addresses in the DOWN state can be assigned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enable_auto_recovery": {
          "aliases": [],
          "description": "Specifies whether automatic recovery is enabled on the ECS.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enterprise_project_id": {
          "aliases": [],
          "description": "Specifies the ID of the enterprise project to which the ECS belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor_name": {
          "aliases": [],
          "description": "Specifies the name of the system flavor.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "image_id": {
          "aliases": [],
          "description": "Specifies the ID of the system image.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the ECS name. Value requirements consists of 1 to 64 characters, including letters, digits, underscores C(_), hyphens (-), periods (.).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "Specifies the NIC information of the ECS. Constraints the network of the NIC must belong to the VPC specified by vpc_id. A maximum of 12 NICs can be attached to an ECS.",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {
            "ip_address": {
              "aliases": [],
              "description": "Specifies the IP address of the NIC. The value is an IPv4 address. Its value must be an unused IP address in the network segment of the subnet.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "subnet_id": {
              "aliases": [],
              "description": "Specifies the ID of subnet.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "root_volume": {
          "aliases": [],
          "description": "Specifies the configuration of the ECS's system disks.",
          "type": "dict",
          "required": true,
          "suboptions": {
            "size": {
              "aliases": [],
              "description": "Specifies the system disk size, in GB. The value range is 1 to 1024. The system disk size must be greater than or equal to the minimum system disk size supported by the image (min_disk attribute of the image). If this parameter is not specified or is set to 0, the default system disk size is the minimum value of the system disk in the image (min_disk attribute of the image).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "snapshot_id": {
              "aliases": [],
              "description": "Specifies the snapshot ID or ID of the original data disk contained in the full-ECS image.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "volume_type": {
              "aliases": [],
              "description": "Specifies the ECS system disk type.\nSATA is common I/O disk type.\nSAS is high I/O disk type.\nSSD is ultra-high I/O disk type.\nco-p1 is high I/O (performance-optimized I) disk type.\nuh-l1 is ultra-high I/O (latency-optimized) disk type.\nNOTE is For HANA, HL1, and HL2 ECSs, use co-p1 and uh-l1 disks. For other ECSs, do not use co-p1 or uh-l1 disks.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "security_groups": {
          "aliases": [],
          "description": "Specifies the security groups of the ECS. If this parameter is left blank, the default security group is bound to the ECS by default.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "server_metadata": {
          "aliases": [],
          "description": "Specifies the metadata of ECS to be created.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "server_tags": {
          "aliases": [],
          "description": "Specifies the tags of an ECS. When you create ECSs, one ECS supports up to 10 tags.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ssh_key_name": {
          "aliases": [],
          "description": "Specifies the name of the SSH key used for logging in to the ECS.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeouts": {
          "aliases": [],
          "description": "The timeouts for each operations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "create": {
              "aliases": [],
              "description": "The timeouts for create operation.",
              "default": "30m",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "delete": {
              "aliases": [],
              "description": "The timeouts for delete operation.",
              "default": "30m",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "update": {
              "aliases": [],
              "description": "The timeouts for update operation.",
              "default": "30m",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user_data": {
          "aliases": [],
          "description": "Specifies the user data to be injected during the ECS creation process. Text, text files, and gzip files can be injected. The content to be injected must be encoded with base64. The maximum size of the content to be injected (before encoding) is 32 KB. For Linux ECSs, this parameter does not take effect when adminPass is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vpc_id": {
          "aliases": [],
          "description": "Specifies the ID of the VPC to which the ECS belongs.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Ecs/Instance in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create an ecs instance\n- name: Create a vpc\n  hwc_network_vpc:\n    cidr: \"192.168.100.0/24\"\n    name: \"ansible_network_vpc_test\"\n  register: vpc\n- name: Create a subnet\n  hwc_vpc_subnet:\n    gateway_ip: \"192.168.100.32\"\n    name: \"ansible_network_subnet_test\"\n    dhcp_enable: true\n    vpc_id: \"{{ vpc.id }}\"\n    cidr: \"192.168.100.0/26\"\n  register: subnet\n- name: Create a eip\n  hwc_vpc_eip:\n    dedicated_bandwidth:\n      charge_mode: \"traffic\"\n      name: \"ansible_test_dedicated_bandwidth\"\n      size: 1\n    type: \"5_bgp\"\n  register: eip\n- name: Create a disk\n  hwc_evs_disk:\n    availability_zone: \"cn-north-1a\"\n    name: \"ansible_evs_disk_test\"\n    volume_type: \"SATA\"\n    size: 10\n  register: disk\n- name: Create an instance\n  community.general.hwc_ecs_instance:\n    data_volumes:\n      - volume_id: \"{{ disk.id }}\"\n    enable_auto_recovery: false\n    eip_id: \"{{ eip.id }}\"\n    name: \"ansible_ecs_instance_test\"\n    availability_zone: \"cn-north-1a\"\n    nics:\n      - subnet_id: \"{{ subnet.id }}\"\n        ip_address: \"192.168.100.33\"\n      - subnet_id: \"{{ subnet.id }}\"\n        ip_address: \"192.168.100.34\"\n    server_tags:\n      my_server: \"my_server\"\n    image_id: \"8da46d6d-6079-4e31-ad6d-a7167efff892\"\n    flavor_name: \"s3.small.1\"\n    vpc_id: \"{{ vpc.id }}\"\n    root_volume:\n      volume_type: \"SAS\"\n"
  },
  "community.general.hwc_evs_disk": {
    "doc": {
      "description": "block storage management.",
      "has_action": false,
      "notes": "For authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "availability_zone": {
          "aliases": [],
          "description": "Specifies the AZ where you want to create the disk.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "backup_id": {
          "aliases": [],
          "description": "Specifies the ID of the backup that can be used to create a disk. This parameter is mandatory when you use a backup to create the disk.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Specifies the disk description. The value can contain a maximum of 255 bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enable_full_clone": {
          "aliases": [],
          "description": "If the disk is created from a snapshot and linked cloning needs to be used, set this parameter to True.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_scsi": {
          "aliases": [],
          "description": "If this parameter is set to True, the disk device type will be SCSI, which allows ECS OSs to directly access underlying storage media. SCSI reservation command is supported. If this parameter is set to False, the disk device type will be VBD, which supports only simple SCSI read/write commands.\nIf parameter enable_share is set to True and this parameter is not specified, shared SCSI disks are created. SCSI EVS disks cannot be created from backups, which means that this parameter cannot be True if backup_id has been specified.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_share": {
          "aliases": [],
          "description": "Specifies whether the disk is shareable. The default value is False.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "encryption_id": {
          "aliases": [],
          "description": "Specifies the encryption ID. The length of it fixes at 36 bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enterprise_project_id": {
          "aliases": [],
          "description": "Specifies the enterprise project ID. This ID is associated with the disk during the disk creation. If it is not specified, the disk is bound to the default enterprise project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "image_id": {
          "aliases": [],
          "description": "Specifies the image ID. If this parameter is specified, the disk is created from an image. BMS system disks cannot be created from BMS images.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the disk name. The value can contain a maximum of 255 bytes.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Specifies the disk size, in GB. Its values are as follows, System disk 1 GB to 1024 GB, Data disk 10 GB to 32768 GB. This parameter is mandatory when you create an empty disk or use an image or a snapshot to create a disk. If you use an image or a snapshot to create a disk, the disk size must be greater than or equal to the image or snapshot size. This parameter is optional when you use a backup to create a disk. If this parameter is not specified, the disk size is equal to the backup size.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshot_id": {
          "aliases": [],
          "description": "Specifies the snapshot ID. If this parameter is specified, the disk is created from a snapshot.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huaweicloud Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeouts": {
          "aliases": [],
          "description": "The timeouts for each operations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "create": {
              "aliases": [],
              "description": "The timeouts for create operation.",
              "default": "30m",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "delete": {
              "aliases": [],
              "description": "The timeouts for delete operation.",
              "default": "30m",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "update": {
              "aliases": [],
              "description": "The timeouts for update operation.",
              "default": "30m",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "volume_type": {
          "aliases": [],
          "description": "Specifies the disk type. Currently, the value can be SSD, SAS, or SATA.\nSSD specifies the ultra-high I/O disk type.\nSAS specifies the high I/O disk type.\nSATA specifies the common I/O disk type.\nIf the specified disk type is not available in the AZ, the disk will fail to create. If the EVS disk is created from a snapshot, the volume_type field must be the same as that of the snapshot's source disk.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Evs/Disk in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# test create disk\n- name: Create a disk\n  community.general.hwc_evs_disk:\n    availability_zone: \"cn-north-1a\"\n    name: \"ansible_evs_disk_test\"\n    volume_type: \"SATA\"\n    size: 10\n"
  },
  "community.general.hwc_network_vpc": {
    "doc": {
      "description": "Represents an vpc resource.",
      "has_action": false,
      "notes": "For authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "cidr": {
          "aliases": [],
          "description": "The range of available subnets in the vpc.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of vpc.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in vpc.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeouts": {
          "aliases": [],
          "description": "The timeouts for each operations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "create": {
              "aliases": [],
              "description": "The timeout for create operation.",
              "default": "15m",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "delete": {
              "aliases": [],
              "description": "The timeout for delete operation.",
              "default": "15m",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "update": {
              "aliases": [],
              "description": "The timeout for update operation.",
              "default": "15m",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "requests >= 2.18.4",
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a Huawei Cloud VPC"
    },
    "examples": "\n- name: Create a vpc\n  community.general.hwc_network_vpc:\n      identity_endpoint: \"{{ identity_endpoint }}\"\n      user: \"{{ user }}\"\n      password: \"{{ password }}\"\n      domain: \"{{ domain }}\"\n      project: \"{{ project }}\"\n      region: \"{{ region }}\"\n      name: \"vpc_1\"\n      cidr: \"192.168.100.0/24\"\n      state: present\n"
  },
  "community.general.hwc_smn_topic": {
    "doc": {
      "description": "Represents a SMN notification topic resource.",
      "has_action": false,
      "notes": "For authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "display_name": {
          "aliases": [],
          "description": "Topic display name, which is presented as the name of the email sender in an email message. The topic display name contains a maximum of 192 bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the topic to be created. The topic name is a string of 1 to 256 characters. It must contain upper- or lower-case letters, digits, hyphens (-), and underscores C(_), and must start with a letter or digit.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huaweicloud Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "requests >= 2.18.4",
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of SMNTopic in Huaweicloud Cloud"
    },
    "examples": "\n- name: Create a smn topic\n  community.general.hwc_smn_topic:\n      identity_endpoint: \"{{ identity_endpoint }}\"\n      user_name: \"{{ user_name }}\"\n      password: \"{{ password }}\"\n      domain_name: \"{{ domain_name }}\"\n      project_name: \"{{ project_name }}\"\n      region: \"{{ region }}\"\n      name: \"ansible_smn_topic_test\"\n      state: present\n"
  },
  "community.general.hwc_vpc_eip": {
    "doc": {
      "description": "elastic ip management.",
      "has_action": false,
      "notes": "For authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "dedicated_bandwidth": {
          "aliases": [],
          "description": "Specifies the dedicated bandwidth object.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "charge_mode": {
              "aliases": [],
              "description": "Specifies whether the bandwidth is billed by traffic or by bandwidth size. The value can be bandwidth or traffic. If this parameter is left blank or is null character string, default value bandwidth is used. For IPv6 addresses, the default parameter value is bandwidth outside China and is traffic in China.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Specifies the bandwidth name. The value is a string of 1 to 64 characters that can contain letters, digits, underscores C(_), hyphens (-), and periods (.).",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "size": {
              "aliases": [],
              "description": "Specifies the bandwidth size. The value ranges from 1 Mbit/s to 2000 Mbit/s by default. (The specific range may vary depending on the configuration in each region. You can see the bandwidth range of each region on the management console.) The minimum unit for bandwidth adjustment varies depending on the bandwidth range. The details are as follows.\nThe minimum unit is 1 Mbit/s if the allowed bandwidth size ranges from 0 to 300 Mbit/s (with 300 Mbit/s included).\nThe minimum unit is 50 Mbit/s if the allowed bandwidth size ranges 300 Mbit/s to 1000 Mbit/s (with 1000 Mbit/s included).\nThe minimum unit is 500 Mbit/s if the allowed bandwidth size is greater than 1000 Mbit/s.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enterprise_project_id": {
          "aliases": [],
          "description": "Specifies the enterprise project ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ip_version": {
          "aliases": [],
          "description": "The value can be 4 (IPv4 address) or 6 (IPv6 address). If this parameter is left blank, an IPv4 address will be assigned.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipv4_address": {
          "aliases": [],
          "description": "Specifies the obtained IPv4 EIP. The system automatically assigns an EIP if you do not specify it.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port_id": {
          "aliases": [],
          "description": "Specifies the port ID. This parameter is returned only when a private IP address is bound with the EIP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shared_bandwidth_id": {
          "aliases": [],
          "description": "Specifies the ID of shared bandwidth.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeouts": {
          "aliases": [],
          "description": "The timeouts for each operations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "create": {
              "aliases": [],
              "description": "The timeouts for create operation.",
              "default": "5m",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "update": {
              "aliases": [],
              "description": "The timeouts for update operation.",
              "default": "5m",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "type": {
          "aliases": [],
          "description": "Specifies the EIP type.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Vpc/EIP in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create an eip and bind it to a port\n- name: Create vpc\n  hwc_network_vpc:\n    cidr: \"192.168.100.0/24\"\n    name: \"ansible_network_vpc_test\"\n  register: vpc\n- name: Create subnet\n  hwc_vpc_subnet:\n    gateway_ip: \"192.168.100.32\"\n    name: \"ansible_network_subnet_test\"\n    dhcp_enable: True\n    vpc_id: \"{{ vpc.id }}\"\n    cidr: \"192.168.100.0/26\"\n  register: subnet\n- name: Create a port\n  hwc_vpc_port:\n    subnet_id: \"{{ subnet.id }}\"\n    ip_address: \"192.168.100.33\"\n  register: port\n- name: Create an eip and bind it to a port\n  community.general.hwc_vpc_eip:\n    type: \"5_bgp\"\n    dedicated_bandwidth:\n      charge_mode: \"traffic\"\n      name: \"ansible_test_dedicated_bandwidth\"\n      size: 1\n    port_id: \"{{ port.id }}\"\n"
  },
  "community.general.hwc_vpc_peering_connect": {
    "doc": {
      "description": "vpc peering management.",
      "has_action": false,
      "notes": "For authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "description": {
          "aliases": [],
          "description": "The description of vpc peering connection.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "local_vpc_id": {
          "aliases": [],
          "description": "Specifies the ID of local VPC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the name of the VPC peering connection. The value can contain 1 to 64 characters.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "peering_vpc": {
          "aliases": [],
          "description": "Specifies information about the peering VPC.",
          "type": "dict",
          "required": true,
          "suboptions": {
            "project_id": {
              "aliases": [],
              "description": "Specifies the ID of the project which the peering vpc belongs to.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vpc_id": {
              "aliases": [],
              "description": "Specifies the ID of peering VPC.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeouts": {
          "aliases": [],
          "description": "The timeouts for each operations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "create": {
              "aliases": [],
              "description": "The timeouts for create operation.",
              "default": "15m",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Vpc/PeeringConnect in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create a peering connect\n- name: Create a local vpc\n  hwc_network_vpc:\n    cidr: \"192.168.0.0/16\"\n    name: \"ansible_network_vpc_test_local\"\n  register: vpc1\n- name: Create a peering vpc\n  hwc_network_vpc:\n    cidr: \"192.168.0.0/16\"\n    name: \"ansible_network_vpc_test_peering\"\n  register: vpc2\n- name: Create a peering connect\n  community.general.hwc_vpc_peering_connect:\n    local_vpc_id: \"{{ vpc1.id }}\"\n    name: \"ansible_network_peering_test\"\n    peering_vpc:\n      vpc_id: \"{{ vpc2.id }}\"\n"
  },
  "community.general.hwc_vpc_port": {
    "doc": {
      "description": "vpc port management.",
      "has_action": false,
      "notes": "For authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "admin_state_up": {
          "aliases": [],
          "description": "Specifies the administrative state of the port.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowed_address_pairs": {
          "aliases": [],
          "description": "Specifies a set of zero or more allowed address pairs.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip_address": {
              "aliases": [],
              "description": "Specifies the IP address. It cannot set it to 0.0.0.0. Configure an independent security group for the port if a large CIDR block (subnet mask less than 24) is configured for parameter allowed_address_pairs.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac_address": {
              "aliases": [],
              "description": "Specifies the MAC address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "extra_dhcp_opts": {
          "aliases": [],
          "description": "Specifies the extended option of DHCP.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Specifies the option name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Specifies the option value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Specifies the port IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the port name. The value can contain no more than 255 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "security_groups": {
          "aliases": [],
          "description": "Specifies the ID of the security group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subnet_id": {
          "aliases": [],
          "description": "Specifies the ID of the subnet to which the port belongs.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeouts": {
          "aliases": [],
          "description": "The timeouts for each operations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "create": {
              "aliases": [],
              "description": "The timeouts for create operation.",
              "default": "15m",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Vpc/Port in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create a port\n- name: Create vpc\n  hwc_network_vpc:\n    cidr: \"192.168.100.0/24\"\n    name: \"ansible_network_vpc_test\"\n  register: vpc\n- name: Create subnet\n  hwc_vpc_subnet:\n    gateway_ip: \"192.168.100.32\"\n    name: \"ansible_network_subnet_test\"\n    dhcp_enable: True\n    vpc_id: \"{{ vpc.id }}\"\n    cidr: \"192.168.100.0/26\"\n  register: subnet\n- name: Create a port\n  community.general.hwc_vpc_port:\n    subnet_id: \"{{ subnet.id }}\"\n    ip_address: \"192.168.100.33\"\n"
  },
  "community.general.hwc_vpc_private_ip": {
    "doc": {
      "description": "vpc private ip management.",
      "has_action": false,
      "notes": "If I(id) option is provided, it takes precedence over I(subnet_id), I(ip_address) for private ip selection.\nI(subnet_id), I(ip_address) are used for private ip selection. If more than one private ip with this options exists, execution is aborted.\nNo parameter support updating. If one of option is changed, the module will create a new resource.\nFor authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Specifies the target IP address. The value can be an available IP address in the subnet. If it is not specified, the system automatically assigns an IP address. Cannot be changed after creating the private ip.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subnet_id": {
          "aliases": [],
          "description": "Specifies the ID of the subnet from which IP addresses are assigned. Cannot be changed after creating the private ip.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Vpc/PrivateIP in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create a private ip\n- name: Create vpc\n  hwc_network_vpc:\n    cidr: \"192.168.100.0/24\"\n    name: \"ansible_network_vpc_test\"\n  register: vpc\n- name: Create subnet\n  hwc_vpc_subnet:\n    gateway_ip: \"192.168.100.32\"\n    name: \"ansible_network_subnet_test\"\n    dhcp_enable: True\n    vpc_id: \"{{ vpc.id }}\"\n    cidr: \"192.168.100.0/26\"\n  register: subnet\n- name: Create a private ip\n  community.general.hwc_vpc_private_ip:\n    subnet_id: \"{{ subnet.id }}\"\n    ip_address: \"192.168.100.33\"\n"
  },
  "community.general.hwc_vpc_route": {
    "doc": {
      "description": "vpc route management.",
      "has_action": false,
      "notes": "If I(id) option is provided, it takes precedence over I(destination), I(vpc_id), I(type) and I(next_hop) for route selection.\nI(destination), I(vpc_id), I(type) and I(next_hop) are used for route selection. If more than one route with this options exists, execution is aborted.\nNo parameter support updating. If one of option is changed, the module will create a new resource.\nFor authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "destination": {
          "aliases": [],
          "description": "Specifies the destination IP address or CIDR block.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "next_hop": {
          "aliases": [],
          "description": "Specifies the next hop. The value is VPC peering connection ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Specifies the type of route.",
          "default": "peering",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vpc_id": {
          "aliases": [],
          "description": "Specifies the VPC ID to which route is added.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Vpc/Route in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create a peering connect\n- name: Create a local vpc\n  hwc_network_vpc:\n    cidr: \"192.168.0.0/16\"\n    name: \"ansible_network_vpc_test_local\"\n  register: vpc1\n- name: Create a peering vpc\n  hwc_network_vpc:\n    cidr: \"192.168.0.0/16\"\n    name: \"ansible_network_vpc_test_peering\"\n  register: vpc2\n- name: Create a peering connect\n  hwc_vpc_peering_connect:\n    local_vpc_id: \"{{ vpc1.id }}\"\n    name: \"ansible_network_peering_test\"\n    filters:\n      - \"name\"\n    peering_vpc:\n      vpc_id: \"{{ vpc2.id }}\"\n  register: connect\n- name: Create a route\n  community.general.hwc_vpc_route:\n    vpc_id: \"{{ vpc1.id }}\"\n    destination: \"192.168.0.0/16\"\n    next_hop: \"{{ connect.id }}\"\n"
  },
  "community.general.hwc_vpc_security_group": {
    "doc": {
      "description": "vpc security group management.",
      "has_action": false,
      "notes": "If I(id) option is provided, it takes precedence over I(name), I(enterprise_project_id) and I(vpc_id) for security group selection.\nI(name), I(enterprise_project_id) and I(vpc_id) are used for security group selection. If more than one security group with this options exists, execution is aborted.\nNo parameter support updating. If one of option is changed, the module will create a new resource.\nFor authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enterprise_project_id": {
          "aliases": [],
          "description": "Specifies the enterprise project ID. When creating a security group, associate the enterprise project ID with the security group.s",
          "default": "0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the security group name. The value is a string of 1 to 64 characters that can contain letters, digits, underscores C(_), hyphens (-), and periods (.).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vpc_id": {
          "aliases": [],
          "description": "Specifies the resource ID of the VPC to which the security group belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Vpc/SecurityGroup in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create a security group\n- name: Create a security group\n  community.general.hwc_vpc_security_group:\n    name: \"ansible_network_security_group_test\"\n"
  },
  "community.general.hwc_vpc_security_group_rule": {
    "doc": {
      "description": "vpc security group management.",
      "has_action": false,
      "notes": "If I(id) option is provided, it takes precedence over I(enterprise_project_id) for security group rule selection.\nI(security_group_id) is used for security group rule selection. If more than one security group rule with this options exists, execution is aborted.\nNo parameter support updating. If one of option is changed, the module will create a new resource.\nFor authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "description": {
          "aliases": [],
          "description": "Provides supplementary information about the security group rule. The value is a string of no more than 255 characters that can contain letters and digits.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "direction": {
          "aliases": [],
          "description": "Specifies the direction of access control. The value can be egress or ingress.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ethertype": {
          "aliases": [],
          "description": "Specifies the IP protocol version. The value can be IPv4 or IPv6. If you do not set this parameter, IPv4 is used by default.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port_range_max": {
          "aliases": [],
          "description": "Specifies the end port number. The value ranges from 1 to 65535. If the protocol is not icmp, the value cannot be smaller than the port_range_min value. An empty value indicates all ports.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port_range_min": {
          "aliases": [],
          "description": "Specifies the start port number. The value ranges from 1 to 65535. The value cannot be greater than the port_range_max value. An empty value indicates all ports.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Specifies the protocol type. The value can be icmp, tcp, or udp. If the parameter is left blank, the security group supports all protocols.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_group_id": {
          "aliases": [],
          "description": "Specifies the ID of the peer security group. The value is exclusive with parameter remote_ip_prefix.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_ip_prefix": {
          "aliases": [],
          "description": "Specifies the remote IP address. If the access control direction is set to egress, the parameter specifies the source IP address. If the access control direction is set to ingress, the parameter specifies the destination IP address. The value can be in the CIDR format or IP addresses. The parameter is exclusive with parameter remote_group_id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "security_group_id": {
          "aliases": [],
          "description": "Specifies the security group rule ID, which uniquely identifies the security group rule.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Vpc/SecurityGroupRule in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create a security group rule\n- name: Create a security group\n  hwc_vpc_security_group:\n    name: \"ansible_network_security_group_test\"\n  register: sg\n- name: Create a security group rule\n  community.general.hwc_vpc_security_group_rule:\n    direction: \"ingress\"\n    protocol: \"tcp\"\n    ethertype: \"IPv4\"\n    port_range_max: 22\n    security_group_id: \"{{ sg.id }}\"\n    port_range_min: 22\n    remote_ip_prefix: \"0.0.0.0/0\"\n"
  },
  "community.general.hwc_vpc_subnet": {
    "doc": {
      "description": "subnet management.",
      "has_action": false,
      "notes": "For authentication, you can set identity_endpoint using the C(ANSIBLE_HWC_IDENTITY_ENDPOINT) env variable.\nFor authentication, you can set user using the C(ANSIBLE_HWC_USER) env variable.\nFor authentication, you can set password using the C(ANSIBLE_HWC_PASSWORD) env variable.\nFor authentication, you can set domain using the C(ANSIBLE_HWC_DOMAIN) env variable.\nFor authentication, you can set project using the C(ANSIBLE_HWC_PROJECT) env variable.\nFor authentication, you can set region using the C(ANSIBLE_HWC_REGION) env variable.\nEnvironment variables values will only be used if the playbook values are not set.",
      "options": {
        "availability_zone": {
          "aliases": [],
          "description": "Specifies the AZ to which the subnet belongs. Cannot be changed after creating the subnet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr": {
          "aliases": [],
          "description": "Specifies the subnet CIDR block. The value must be within the VPC CIDR block and be in CIDR format. The subnet mask cannot be greater than 28. Cannot be changed after creating the subnet.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dhcp_enable": {
          "aliases": [],
          "description": "Specifies whether DHCP is enabled for the subnet. The value can be true (enabled) or false(disabled), and default value is true. If this parameter is set to false, newly created ECSs cannot obtain IP addresses, and usernames and passwords cannot be injected using Cloud-init.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dns_address": {
          "aliases": [],
          "description": "Specifies the DNS server addresses for subnet. The address in the head will be used first.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The name of the Domain to scope to (Identity v3). (currently only domain names are supported, and not domain IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "gateway_ip": {
          "aliases": [],
          "description": "Specifies the gateway of the subnet. The value must be an IP address in the subnet. Cannot be changed after creating the subnet.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The id of resource to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_endpoint": {
          "aliases": [],
          "description": "The Identity authentication URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the subnet name. The value is a string of 1 to 64 characters that can contain letters, digits, underscores C(_), hyphens (-), and periods (.).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to login with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The name of the Tenant (Identity v2) or Project (Identity v3). (currently only project names are supported, and not project IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region to which the project belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the given object should exist in Huawei Cloud.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeouts": {
          "aliases": [],
          "description": "The timeouts for each operations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "create": {
              "aliases": [],
              "description": "The timeouts for create operation.",
              "default": "15m",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "update": {
              "aliases": [],
              "description": "The timeouts for update operation.",
              "default": "15m",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "user": {
          "aliases": [],
          "description": "The user name to login with (currently only user names are supported, and not user IDs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vpc_id": {
          "aliases": [],
          "description": "Specifies the ID of the VPC to which the subnet belongs. Cannot be changed after creating the subnet.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.6.0"
      ],
      "short_description": "Creates a resource of Vpc/Subnet in Huawei Cloud",
      "version_added": "0.2.0"
    },
    "examples": "\n# create subnet\n- name: Create vpc\n  hwc_network_vpc:\n    cidr: \"192.168.100.0/24\"\n    name: \"ansible_network_vpc_test\"\n  register: vpc\n- name: Create subnet\n  community.general.hwc_vpc_subnet:\n    vpc_id: \"{{ vpc.id }}\"\n    cidr: \"192.168.100.0/26\"\n    gateway_ip: \"192.168.100.32\"\n    name: \"ansible_network_subnet_test\"\n    dhcp_enable: True\n"
  },
  "community.general.ibm_sa_domain": {
    "doc": {
      "description": "This module can be used to add domains to or removes them from IBM Spectrum Accelerate Family storage systems.",
      "has_action": false,
      "notes": "This module requires pyxcli python library. Use 'pip install pyxcli' in order to get pyxcli.",
      "options": {
        "domain": {
          "aliases": [],
          "description": "Name of the domain to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "endpoints": {
          "aliases": [],
          "description": "The hostname or management IP of Spectrum Accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hard_capacity": {
          "aliases": [],
          "description": "Hard capacity of the domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ldap_id": {
          "aliases": [],
          "description": "ldap id to add to the domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_cgs": {
          "aliases": [],
          "description": "Number of max cgs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_dms": {
          "aliases": [],
          "description": "Number of max dms.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_mirrors": {
          "aliases": [],
          "description": "Number of max_mirrors.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_pools": {
          "aliases": [],
          "description": "Number of max_pools.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_volumes": {
          "aliases": [],
          "description": "Number of max_volumes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for username on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "perf_class": {
          "aliases": [],
          "description": "Add the domain to a performance class.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of the domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "soft_capacity": {
          "aliases": [],
          "description": "Soft capacity of the domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the domain.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Management user on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pyxcli"
      ],
      "short_description": "Manages domains on IBM Spectrum Accelerate Family storage systems"
    },
    "examples": "\n- name: Define new domain.\n  community.general.ibm_sa_domain:\n    domain: domain_name\n    size: domain_size\n    state: present\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n\n- name: Delete domain.\n  community.general.ibm_sa_domain:\n    domain: domain_name\n    state: absent\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n"
  },
  "community.general.ibm_sa_host": {
    "doc": {
      "description": "This module adds hosts to or removes them from IBM Spectrum Accelerate Family storage systems.",
      "has_action": false,
      "notes": "This module requires pyxcli python library. Use 'pip install pyxcli' in order to get pyxcli.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "The name of the cluster to include the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The domains the cluster will be attached to. To include more than one domain, separate domain names with commas. To include all existing domains, use an asterisk (\"*\").",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "endpoints": {
          "aliases": [],
          "description": "The hostname or management IP of Spectrum Accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Host name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "iscsi_chap_name": {
          "aliases": [],
          "description": "The host's CHAP name identifier",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "iscsi_chap_secret": {
          "aliases": [],
          "description": "The password of the initiator used to authenticate to the system when CHAP is enable",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for username on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Host state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Management user on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pyxcli"
      ],
      "short_description": "Adds hosts to or removes them from IBM Spectrum Accelerate Family storage systems."
    },
    "examples": "\n- name: Define new host.\n  community.general.ibm_sa_host:\n    host: host_name\n    state: present\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n\n- name: Delete host.\n  community.general.ibm_sa_host:\n    host: host_name\n    state: absent\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n"
  },
  "community.general.ibm_sa_host_ports": {
    "doc": {
      "description": "This module adds ports to or removes them from the hosts on IBM Spectrum Accelerate Family storage systems.",
      "has_action": false,
      "notes": "This module requires pyxcli python library. Use 'pip install pyxcli' in order to get pyxcli.",
      "options": {
        "endpoints": {
          "aliases": [],
          "description": "The hostname or management IP of Spectrum Accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fcaddress": {
          "aliases": [],
          "description": "Fiber channel address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Host name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "iscsi_name": {
          "aliases": [],
          "description": "iSCSI initiator name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "num_of_visible_targets": {
          "aliases": [],
          "description": "Number of visible targets.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for username on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Host ports state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Management user on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pyxcli"
      ],
      "short_description": "Add host ports on IBM Spectrum Accelerate Family storage systems."
    },
    "examples": "\n- name: Add ports for host.\n  community.general.ibm_sa_host_ports:\n    host: test_host\n    iscsi_name: iqn.1994-05.com***\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n    state: present\n\n- name: Remove ports for host.\n  community.general.ibm_sa_host_ports:\n    host: test_host\n    iscsi_name: iqn.1994-05.com***\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n    state: absent\n\n"
  },
  "community.general.ibm_sa_pool": {
    "doc": {
      "description": "This module creates or deletes pools to be used on IBM Spectrum Accelerate Family storage systems",
      "has_action": false,
      "notes": "This module requires pyxcli python library. Use 'pip install pyxcli' in order to get pyxcli.",
      "options": {
        "domain": {
          "aliases": [],
          "description": "Adds the pool to the specified domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "endpoints": {
          "aliases": [],
          "description": "The hostname or management IP of Spectrum Accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for username on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "perf_class": {
          "aliases": [],
          "description": "Assigns a perf_class to the pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "Pool name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Pool size in GB",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot_size": {
          "aliases": [],
          "description": "Pool snapshot size in GB",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Pool state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Management user on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pyxcli"
      ],
      "short_description": "Handles pools on IBM Spectrum Accelerate Family storage systems."
    },
    "examples": "\n- name: Create new pool.\n  community.general.ibm_sa_pool:\n    name: pool_name\n    size: 300\n    state: present\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n\n- name: Delete pool.\n  community.general.ibm_sa_pool:\n    name: pool_name\n    state: absent\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n"
  },
  "community.general.ibm_sa_vol": {
    "doc": {
      "description": "This module creates or deletes volumes to be used on IBM Spectrum Accelerate Family storage systems.",
      "has_action": false,
      "notes": "This module requires pyxcli python library. Use 'pip install pyxcli' in order to get pyxcli.",
      "options": {
        "endpoints": {
          "aliases": [],
          "description": "The hostname or management IP of Spectrum Accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for username on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "Volume pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Volume size.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Volume state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Management user on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vol": {
          "aliases": [],
          "description": "Volume name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pyxcli"
      ],
      "short_description": "Handle volumes on IBM Spectrum Accelerate Family storage systems."
    },
    "examples": "\n- name: Create a new volume.\n  community.general.ibm_sa_vol:\n    vol: volume_name\n    pool: pool_name\n    size: 17\n    state: present\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n\n- name: Delete an existing volume.\n  community.general.ibm_sa_vol:\n    vol: volume_name\n    state: absent\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n"
  },
  "community.general.ibm_sa_vol_map": {
    "doc": {
      "description": "This module maps volumes to or unmaps them from the hosts on IBM Spectrum Accelerate Family storage systems.",
      "has_action": false,
      "notes": "This module requires pyxcli python library. Use 'pip install pyxcli' in order to get pyxcli.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Maps the volume to a cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "endpoints": {
          "aliases": [],
          "description": "The hostname or management IP of Spectrum Accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Maps the volume to a host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lun": {
          "aliases": [],
          "description": "The LUN identifier.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "override": {
          "aliases": [],
          "description": "Overrides the existing volume mapping.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for username on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When the state is present the volume is mapped. When the state is absent, the volume is meant to be unmapped.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Management user on the spectrum accelerate storage system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vol": {
          "aliases": [],
          "description": "Volume name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pyxcli"
      ],
      "short_description": "Handles volume mapping on IBM Spectrum Accelerate Family storage systems."
    },
    "examples": "\n- name: Map volume to host.\n  community.general.ibm_sa_vol_map:\n    vol: volume_name\n    lun: 1\n    host: host_name\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n    state: present\n\n- name: Map volume to cluster.\n  community.general.ibm_sa_vol_map:\n    vol: volume_name\n    lun: 1\n    cluster: cluster_name\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n    state: present\n\n- name: Unmap volume.\n  community.general.ibm_sa_vol_map:\n    host: host_name\n    username: admin\n    password: secret\n    endpoints: hostdev-system\n    state: absent\n"
  },
  "community.general.icinga2_feature": {
    "doc": {
      "description": "This module can be used to enable or disable an Icinga2 feature.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "This is the feature name to enable or disable.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present) and feature is disabled, then feature is enabled.\nIf set to C(present) and feature is already enabled, then nothing is changed.\nIf set to C(absent) and feature is enabled, then feature is disabled.\nIf set to C(absent) and feature is already disabled, then nothing is changed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage Icinga2 feature"
    },
    "examples": "\n- name: Enable ido-pgsql feature\n  community.general.icinga2_feature:\n    name: ido-pgsql\n    state: present\n\n- name: Disable api feature\n  community.general.icinga2_feature:\n    name: api\n    state: absent\n"
  },
  "community.general.icinga2_host": {
    "doc": {
      "description": "Add or remove a host to Icinga2 through the API.\nSee U(https://www.icinga.com/docs/icinga2/latest/doc/12-icinga2-api/)",
      "has_action": false,
      "options": {
        "check_command": {
          "aliases": [],
          "description": "The command used to check if the host is alive.",
          "default": "hostalive",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication. This file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication. If C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [],
          "description": "The name used to display the host.\nIf not specified, it defaults to the value of the I(name) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip": {
          "aliases": [],
          "description": "The IP address of the host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "host"
          ],
          "description": "Name used to create / delete the host. This does not need to be the FQDN, but does needs to be unique.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Apply feature state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "The template used to define the host.\nTemplate cannot be modified after object creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without C(url_password) for sites that allow empty passwords.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "Dictionary of variables.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "The zone from where this host should be polled.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage a host in Icinga2"
    },
    "examples": "\n- name: Add host to icinga\n  community.general.icinga2_host:\n    url: \"https://icinga2.example.com\"\n    url_username: \"ansible\"\n    url_password: \"a_secret\"\n    state: present\n    name: \"{{ ansible_fqdn }}\"\n    ip: \"{{ ansible_default_ipv4.address }}\"\n    variables:\n      foo: \"bar\"\n  delegate_to: 127.0.0.1\n"
  },
  "community.general.idrac_redfish_command": {
    "doc": {
      "description": "Builds Redfish URIs locally and sends them to remote OOB controllers to perform an action.\nFor use with Dell iDRAC operations that require Redfish OEM extensions",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with OOB controller",
          "type": "str",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of OOB controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Category to execute on OOB controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on OOB controller",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_id": {
          "aliases": [],
          "description": "The ID of the System, Manager or Chassis to modify",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to OOB controller",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "User for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Out-Of-Band controllers using iDRAC OEM Redfish APIs"
    },
    "examples": "\n  - name: Create BIOS configuration job (schedule BIOS setting update)\n    community.general.idrac_redfish_command:\n      category: Systems\n      command: CreateBiosConfigJob\n      resource_id: System.Embedded.1\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n"
  },
  "community.general.idrac_redfish_config": {
    "doc": {
      "description": "For use with Dell iDRAC operations that require Redfish OEM extensions\nBuilds Redfish URIs locally and sends them to remote iDRAC controllers to set or update a configuration attribute.",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with OOB controller",
          "type": "str",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of iDRAC",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Category to execute on iDRAC",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on iDRAC\nI(SetManagerAttributes), I(SetLifecycleControllerAttributes) and I(SetSystemAttributes) are mutually exclusive commands when C(category) is I(Manager)",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "manager_attributes": {
          "aliases": [],
          "description": "dictionary of iDRAC attribute name and value pairs to update",
          "default": "{}",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with iDRAC",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_id": {
          "aliases": [],
          "description": "The ID of the System, Manager or Chassis to modify",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to iDRAC controller",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "User for authentication with iDRAC",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages servers through iDRAC using Dell Redfish APIs"
    },
    "examples": "\n  - name: Enable NTP and set NTP server and Time zone attributes in iDRAC\n    community.general.idrac_redfish_config:\n      category: Manager\n      command: SetManagerAttributes\n      resource_id: iDRAC.Embedded.1\n      manager_attributes:\n        NTPConfigGroup.1.NTPEnable: \"Enabled\"\n        NTPConfigGroup.1.NTP1: \"{{ ntpserver1 }}\"\n        Time.1.Timezone: \"{{ timezone }}\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username}}\"\n      password: \"{{ password }}\"\n\n  - name: Enable Syslog and set Syslog servers in iDRAC\n    community.general.idrac_redfish_config:\n      category: Manager\n      command: SetManagerAttributes\n      resource_id: iDRAC.Embedded.1\n      manager_attributes:\n        SysLog.1.SysLogEnable: \"Enabled\"\n        SysLog.1.Server1: \"{{ syslog_server1 }}\"\n        SysLog.1.Server2: \"{{ syslog_server2 }}\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username}}\"\n      password: \"{{ password }}\"\n\n  - name: Configure SNMP community string, port, protocol and trap format\n    community.general.idrac_redfish_config:\n      category: Manager\n      command: SetManagerAttributes\n      resource_id: iDRAC.Embedded.1\n      manager_attributes:\n        SNMP.1.AgentEnable: \"Enabled\"\n        SNMP.1.AgentCommunity: \"public_community_string\"\n        SNMP.1.TrapFormat: \"SNMPv1\"\n        SNMP.1.SNMPProtocol: \"All\"\n        SNMP.1.DiscoveryPort: 161\n        SNMP.1.AlertPort: 162\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username}}\"\n      password: \"{{ password }}\"\n\n  - name: Enable CSIOR\n    community.general.idrac_redfish_config:\n      category: Manager\n      command: SetLifecycleControllerAttributes\n      resource_id: iDRAC.Embedded.1\n      manager_attributes:\n        LCAttributes.1.CollectSystemInventoryOnRestart: \"Enabled\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username}}\"\n      password: \"{{ password }}\"\n\n  - name: Set Power Supply Redundancy Policy to A/B Grid Redundant\n    community.general.idrac_redfish_config:\n      category: Manager\n      command: SetSystemAttributes\n      resource_id: iDRAC.Embedded.1\n      manager_attributes:\n        ServerPwr.1.PSRedPolicy: \"A/B Grid Redundant\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username}}\"\n      password: \"{{ password }}\"\n"
  },
  "community.general.idrac_redfish_info": {
    "doc": {
      "description": "Builds Redfish URIs locally and sends them to remote iDRAC controllers to get information back.\nFor use with Dell EMC iDRAC operations that require Redfish OEM extensions\nThis module was called C(idrac_redfish_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.idrac_redfish_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with OOB controller",
          "type": "str",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of iDRAC controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Category to execute on iDRAC controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on iDRAC controller\nC(GetManagerAttributes) returns the list of dicts containing iDRAC, LifecycleController and System attributes",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with iDRAC controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to OOB controller",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "User for authentication with iDRAC controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather PowerEdge server information through iDRAC using Redfish APIs"
    },
    "examples": "\n  - name: Get Manager attributes with a default of 20 seconds\n    community.general.idrac_redfish_info:\n      category: Manager\n      command: GetManagerAttributes\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      timeout: 20\n    register: result\n\n  # Examples to display the value of all or a single iDRAC attribute\n  - name: Store iDRAC attributes as a fact variable\n    ansible.builtin.set_fact:\n      idrac_attributes: \"{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'iDRACAttributes') | list | first }}\"\n\n  - name: Display all iDRAC attributes\n    ansible.builtin.debug:\n      var: idrac_attributes\n\n  - name: Display the value of 'Syslog.1.SysLogEnable' iDRAC attribute\n    ansible.builtin.debug:\n      var: idrac_attributes['Syslog.1.SysLogEnable']\n\n  # Examples to display the value of all or a single LifecycleController attribute\n  - name: Store LifecycleController attributes as a fact variable\n    ansible.builtin.set_fact:\n      lc_attributes: \"{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'LCAttributes') | list | first }}\"\n\n  - name: Display LifecycleController attributes\n    ansible.builtin.debug:\n      var: lc_attributes\n\n  - name: Display the value of 'CollectSystemInventoryOnRestart' attribute\n    ansible.builtin.debug:\n      var: lc_attributes['LCAttributes.1.CollectSystemInventoryOnRestart']\n\n  # Examples to display the value of all or a single System attribute\n  - name: Store System attributes as a fact variable\n    ansible.builtin.set_fact:\n      system_attributes: \"{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'SystemAttributes') | list | first }}\"\n\n  - name: Display System attributes\n    ansible.builtin.debug:\n      var: system_attributes\n\n  - name: Display the value of 'PSRedPolicy'\n    ansible.builtin.debug:\n      var: system_attributes['ServerPwr.1.PSRedPolicy']\n\n"
  },
  "community.general.ilo_redfish_config": {
    "doc": {
      "description": "Builds Redfish URIs locally and sends them to iLO to set or update a configuration attribute.\nFor use with HPE iLO operations that require Redfish OEM extensions.",
      "has_action": false,
      "options": {
        "attribute_name": {
          "aliases": [],
          "description": "Name of the attribute to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "attribute_value": {
          "aliases": [],
          "description": "Value of the attribute to be configured.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with OOB controller.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of iLO.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Command category to execute on iLO.",
          "type": "str",
          "required": true,
          "choices": [
            "Manager"
          ],
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on iLO.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with iLO.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to iLO controller.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "User for authentication with iLO.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Sets or updates configuration attributes on HPE iLO with Redfish OEM extensions",
      "version_added": "4.2.0"
    },
    "examples": "\n  - name: Disable WINS Registration\n    community.general.ilo_redfish_config:\n      category: Manager\n      command: SetWINSReg\n      baseuri: 15.X.X.X\n      username: Admin\n      password: Testpass123\n      attribute_name: WINSRegistration\n\n  - name: Set Time Zone\n    community.general.ilo_redfish_config:\n      category: Manager\n      command: SetTimeZone\n      baseuri: 15.X.X.X\n      username: Admin\n      password: Testpass123\n      attribute_name: TimeZone\n      attribute_value: Chennai\n"
  },
  "community.general.ilo_redfish_info": {
    "doc": {
      "description": "Builds Redfish URIs locally and sends them to iLO to get information back.\nFor use with HPE iLO operations that require Redfish OEM extensions.",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with iLO.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of iLO.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "List of categories to execute on iLO.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on iLO.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with iLO.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to iLO.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "User for authentication with iLO.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gathers server information through iLO using Redfish APIs",
      "version_added": "4.2.0"
    },
    "examples": "\n  - name: Get iLO Sessions\n    community.general.ilo_redfish_info:\n      category: Sessions\n      command: GetiLOSessions\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result_sessions\n"
  },
  "community.general.imc_rest": {
    "doc": {
      "description": "Provides direct access to the Cisco IMC REST API.\nPerform any configuration changes and actions that the Cisco IMC supports.\nMore information about the IMC REST API is available from U(http://www.cisco.com/c/en/us/td/docs/unified_computing/ucs/c/sw/api/3_0/b_Cisco_IMC_api_301.html)",
      "has_action": false,
      "notes": "The XML fragments don't need an authentication cookie, this is injected by the module automatically.\nThe Cisco IMC XML output is being translated to JSON using the Cobra convention.\nAny configConfMo change requested has a return status of 'modified', even if there was no actual change from the previous configuration. As a result, this module will always report a change on subsequent runs. In case this behaviour is fixed in a future update to Cisco IMC, this module will automatically adapt.\nIf you get a C(Connection failure) related to C(The read operation timed out) increase the C(timeout) parameter. Some XML fragments can take longer than the default timeout.\nMore information about the IMC REST API is available from U(http://www.cisco.com/c/en/us/td/docs/unified_computing/ucs/c/sw/api/3_0/b_Cisco_IMC_api_301.html)",
      "options": {
        "content": {
          "aliases": [],
          "description": "When used instead of C(path), sets the content of the API requests directly.\nThis may be convenient to template simple requests, for anything complex use the M(ansible.builtin.template) module.\nYou can collate multiple IMC XML fragments and they will be processed sequentially in a single stream, the Cisco IMC output is subsequently merged.\nParameter C(content) is mutual exclusive with parameter C(path).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [
            "host",
            "ip"
          ],
          "description": "IP Address or hostname of Cisco IMC, resolvable by Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to use for authentication.",
          "default": "password",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "src",
            "config_file"
          ],
          "description": "Name of the absolute path of the filename that includes the body of the http request being sent to the Cisco IMC REST API.\nParameter C(path) is mutual exclusive with parameter C(content).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Connection protocol to use.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The socket level timeout in seconds.\nThis is the time that every single connection (every fragment) can spend. If this C(timeout) is reached, the module will fail with a C(Connection failure) indicating that C(The read operation timed out).",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "user"
          ],
          "description": "Username used to login to the switch.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "lxml",
        "xmljson >= 0.1.8"
      ],
      "short_description": "Manage Cisco IMC hardware through its REST API"
    },
    "examples": "\n- name: Power down server\n  community.general.imc_rest:\n    hostname: '{{ imc_hostname }}'\n    username: '{{ imc_username }}'\n    password: '{{ imc_password }}'\n    validate_certs: no\n    content: |\n      <configConfMo><inConfig>\n        <computeRackUnit dn=\"sys/rack-unit-1\" adminPower=\"down\"/>\n      </inConfig></configConfMo>\n  delegate_to: localhost\n\n- name: Configure IMC using multiple XML fragments\n  community.general.imc_rest:\n    hostname: '{{ imc_hostname }}'\n    username: '{{ imc_username }}'\n    password: '{{ imc_password }}'\n    validate_certs: no\n    timeout: 120\n    content: |\n      <!-- Configure Serial-on-LAN -->\n      <configConfMo><inConfig>\n        <solIf dn=\"sys/rack-unit-1/sol-if\" adminState=\"enable\" speed==\"115200\" comport=\"com0\"/>\n      </inConfig></configConfMo>\n\n      <!-- Configure Console Redirection -->\n      <configConfMo><inConfig>\n        <biosVfConsoleRedirection dn=\"sys/rack-unit-1/bios/bios-settings/Console-redirection\"\n          vpBaudRate=\"115200\"\n          vpConsoleRedirection=\"com-0\"\n          vpFlowControl=\"none\"\n          vpTerminalType=\"vt100\"\n          vpPuttyKeyPad=\"LINUX\"\n          vpRedirectionAfterPOST=\"Always Enable\"/>\n      </inConfig></configConfMo>\n  delegate_to: localhost\n\n- name: Enable PXE boot and power-cycle server\n  community.general.imc_rest:\n    hostname: '{{ imc_hostname }}'\n    username: '{{ imc_username }}'\n    password: '{{ imc_password }}'\n    validate_certs: no\n    content: |\n      <!-- Configure PXE boot -->\n      <configConfMo><inConfig>\n        <lsbootLan dn=\"sys/rack-unit-1/boot-policy/lan-read-only\" access=\"read-only\" order=\"1\" prot=\"pxe\" type=\"lan\"/>\n      </inConfig></configConfMo>\n\n      <!-- Power cycle server -->\n      <configConfMo><inConfig>\n        <computeRackUnit dn=\"sys/rack-unit-1\" adminPower=\"cycle-immediate\"/>\n      </inConfig></configConfMo>\n  delegate_to: localhost\n\n- name: Reconfigure IMC to boot from storage\n  community.general.imc_rest:\n    hostname: '{{ imc_host }}'\n    username: '{{ imc_username }}'\n    password: '{{ imc_password }}'\n    validate_certs: no\n    content: |\n      <configConfMo><inConfig>\n        <lsbootStorage dn=\"sys/rack-unit-1/boot-policy/storage-read-write\" access=\"read-write\" order=\"1\" type=\"storage\"/>\n      </inConfig></configConfMo>\n  delegate_to: localhost\n\n- name: Add customer description to server\n  community.general.imc_rest:\n    hostname: '{{ imc_host }}'\n    username: '{{ imc_username }}'\n    password: '{{ imc_password }}'\n    validate_certs: no\n    content: |\n        <configConfMo><inConfig>\n          <computeRackUnit dn=\"sys/rack-unit-1\" usrLbl=\"Customer Lab - POD{{ pod_id }} - {{ inventory_hostname_short }}\"/>\n        </inConfig></configConfMo>\n    delegate_to: localhost\n\n- name: Disable HTTP and increase session timeout to max value 10800 secs\n  community.general.imc_rest:\n    hostname: '{{ imc_host }}'\n    username: '{{ imc_username }}'\n    password: '{{ imc_password }}'\n    validate_certs: no\n    timeout: 120\n    content: |\n        <configConfMo><inConfig>\n          <commHttp dn=\"sys/svc-ext/http-svc\" adminState=\"disabled\"/>\n        </inConfig></configConfMo>\n\n        <configConfMo><inConfig>\n          <commHttps dn=\"sys/svc-ext/https-svc\" adminState=\"enabled\" sessionTimeout=\"10800\"/>\n        </inConfig></configConfMo>\n    delegate_to: localhost\n"
  },
  "community.general.imgadm": {
    "doc": {
      "description": "Manage SmartOS virtual machine images through imgadm(1M)",
      "has_action": false,
      "options": {
        "force": {
          "aliases": [],
          "description": "Force a given operation (where supported by imgadm(1M)).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "zpool to import to or delete images from.",
          "default": "zones",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "URI for the image source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State the object operated on should be in. C(imported) is an alias for for C(present) and C(deleted) for C(absent). When set to C(vacuumed) and C(uuid) to C(*), it will remove all unused images.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent",
            "deleted",
            "imported",
            "updated",
            "vacuumed"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type for image sources.",
          "default": "imgapi",
          "type": "str",
          "required": false,
          "choices": [
            "imgapi",
            "docker",
            "dsapi"
          ],
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Image UUID. Can either be a full UUID or C(*) for all images.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6"
      ],
      "short_description": "Manage SmartOS images"
    },
    "examples": "\n- name: Import an image\n  community.general.imgadm:\n    uuid: '70e3ae72-96b6-11e6-9056-9737fd4d0764'\n    state: imported\n\n- name: Delete an image\n  community.general.imgadm:\n    uuid: '70e3ae72-96b6-11e6-9056-9737fd4d0764'\n    state: deleted\n\n- name: Update all images\n  community.general.imgadm:\n    uuid: '*'\n    state: updated\n\n- name: Update a single image\n  community.general.imgadm:\n    uuid: '70e3ae72-96b6-11e6-9056-9737fd4d0764'\n    state: updated\n\n- name: Add a source\n  community.general.imgadm:\n    source: 'https://datasets.project-fifo.net'\n    state: present\n\n- name: Add a Docker source\n  community.general.imgadm:\n    source: 'https://docker.io'\n    type: docker\n    state: present\n\n- name: Remove a source\n  community.general.imgadm:\n    source: 'https://docker.io'\n    state: absent\n"
  },
  "community.general.infinity": {
    "doc": {
      "description": "Manage Infinity IPAM using REST API.",
      "has_action": false,
      "options": {
        "action": {
          "aliases": [],
          "description": "Action to perform",
          "type": "str",
          "required": true,
          "choices": [
            "add_network",
            "delete_network",
            "get_network",
            "get_network_id",
            "release_ip",
            "release_network",
            "reserve_network",
            "reserve_next_available_ip"
          ],
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "IP Address for a reservation or a release.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_address": {
          "aliases": [],
          "description": "Network address with CIDR format (e.g., 192.168.310.0).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_family": {
          "aliases": [],
          "description": "Network family defined by Infinity, e.g. IPv4, IPv6 and Dual stack",
          "default": "4",
          "type": "str",
          "required": false,
          "choices": [
            "4",
            "6",
            "dual"
          ],
          "suboptions": {}
        },
        "network_id": {
          "aliases": [],
          "description": "Network ID.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_location": {
          "aliases": [],
          "description": "The parent network id for a given network.",
          "default": "-1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "network_name": {
          "aliases": [],
          "description": "The name of a network.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_size": {
          "aliases": [],
          "description": "Network bitmask (e.g. 255.255.255.220) or CIDR format (e.g., /26).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_type": {
          "aliases": [],
          "description": "Network type defined by Infinity",
          "default": "lan",
          "type": "str",
          "required": false,
          "choices": [
            "lan",
            "shared_lan",
            "supernet"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Infinity password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "server_ip": {
          "aliases": [],
          "description": "Infinity server_ip with IP address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username to access Infinity.\nThe user must have REST API privileges.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage Infinity IPAM using Rest API"
    },
    "examples": "\n---\n- hosts: localhost\n  connection: local\n  strategy: debug\n  tasks:\n    - name: Reserve network into Infinity IPAM\n      community.general.infinity:\n        server_ip: 80.75.107.12\n        username: username\n        password: password\n        action: reserve_network\n        network_name: reserve_new_ansible_network\n        network_family: 4\n        network_type: lan\n        network_id: 1201\n        network_size: /28\n      register: infinity\n"
  },
  "community.general.influxdb_database": {
    "doc": {
      "description": "Manage InfluxDB databases.",
      "has_action": false,
      "options": {
        "database_name": {
          "aliases": [],
          "description": "Name of the database.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address on which InfluxDB server is listening.\nSince Ansible 2.5, defaulted to localhost.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "login_password"
          ],
          "description": "Password that will be used to authenticate against InfluxDB server.\nAlias C(login_password) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path on which InfluxDB server is accessible\nOnly available when using python-influxdb >= 5.1.0",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which InfluxDB server is listening",
          "default": "8086",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxies": {
          "aliases": [],
          "description": "HTTP(S) proxy to use for Requests to connect to InfluxDB server.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Number of retries client will try before aborting.\nC(0) indicates try until success.\nOnly available when using python-influxdb >= 4.1.0",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Use https instead of http to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines if the database should be created or destroyed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Number of seconds Requests will wait for client to establish a connection.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "udp_port": {
          "aliases": [],
          "description": "UDP port to connect to InfluxDB server.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_udp": {
          "aliases": [],
          "description": "Use UDP to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "login_username"
          ],
          "description": "Username that will be used to authenticate against InfluxDB server.\nAlias C(login_username) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "influxdb >= 0.9",
        "requests"
      ],
      "short_description": "Manage InfluxDB databases"
    },
    "examples": "\n# Example influxdb_database command from Ansible Playbooks\n- name: Create database\n  community.general.influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      database_name: \"{{influxdb_database_name}}\"\n\n- name: Destroy database\n  community.general.influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      database_name: \"{{influxdb_database_name}}\"\n      state: absent\n\n- name: Create database using custom credentials\n  community.general.influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      username: \"{{influxdb_username}}\"\n      password: \"{{influxdb_password}}\"\n      database_name: \"{{influxdb_database_name}}\"\n      ssl: yes\n      validate_certs: yes\n"
  },
  "community.general.influxdb_query": {
    "doc": {
      "description": "Query data points from InfluxDB.",
      "has_action": false,
      "options": {
        "database_name": {
          "aliases": [],
          "description": "Name of the database.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address on which InfluxDB server is listening.\nSince Ansible 2.5, defaulted to localhost.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "login_password"
          ],
          "description": "Password that will be used to authenticate against InfluxDB server.\nAlias C(login_password) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path on which InfluxDB server is accessible\nOnly available when using python-influxdb >= 5.1.0",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which InfluxDB server is listening",
          "default": "8086",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxies": {
          "aliases": [],
          "description": "HTTP(S) proxy to use for Requests to connect to InfluxDB server.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "Query to be executed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Number of retries client will try before aborting.\nC(0) indicates try until success.\nOnly available when using python-influxdb >= 4.1.0",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Use https instead of http to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Number of seconds Requests will wait for client to establish a connection.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "udp_port": {
          "aliases": [],
          "description": "UDP port to connect to InfluxDB server.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_udp": {
          "aliases": [],
          "description": "Use UDP to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "login_username"
          ],
          "description": "Username that will be used to authenticate against InfluxDB server.\nAlias C(login_username) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "influxdb >= 0.9"
      ],
      "short_description": "Query data points from InfluxDB"
    },
    "examples": "\n- name: Query connections\n  community.general.influxdb_query:\n    hostname: \"{{ influxdb_ip_address }}\"\n    database_name: \"{{ influxdb_database_name }}\"\n    query: \"select mean(value) from connections\"\n  register: connection\n\n- name: Query connections with tags filters\n  community.general.influxdb_query:\n    hostname: \"{{ influxdb_ip_address }}\"\n    database_name: \"{{ influxdb_database_name }}\"\n    query: \"select mean(value) from connections where region='zue01' and host='server01'\"\n  register: connection\n\n- name: Print results from the query\n  ansible.builtin.debug:\n    var: connection.query_results\n"
  },
  "community.general.influxdb_retention_policy": {
    "doc": {
      "description": "Manage InfluxDB retention policies.",
      "has_action": false,
      "options": {
        "database_name": {
          "aliases": [],
          "description": "Name of the database.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "default": {
          "aliases": [],
          "description": "Sets the retention policy as default retention policy.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "duration": {
          "aliases": [],
          "description": "Determines how long InfluxDB should keep the data. If specified, it should be C(INF) or at least one hour. If not specified, C(INF) is assumed. Supports complex duration expressions with multiple units.\nRequired only if I(state) is set to C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address on which InfluxDB server is listening.\nSince Ansible 2.5, defaulted to localhost.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "login_password"
          ],
          "description": "Password that will be used to authenticate against InfluxDB server.\nAlias C(login_password) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path on which InfluxDB server is accessible\nOnly available when using python-influxdb >= 5.1.0",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "policy_name": {
          "aliases": [],
          "description": "Name of the retention policy.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which InfluxDB server is listening",
          "default": "8086",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxies": {
          "aliases": [],
          "description": "HTTP(S) proxy to use for Requests to connect to InfluxDB server.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "replication": {
          "aliases": [],
          "description": "Determines how many independent copies of each point are stored in the cluster.\nRequired only if I(state) is set to C(present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Number of retries client will try before aborting.\nC(0) indicates try until success.\nOnly available when using python-influxdb >= 4.1.0",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "shard_group_duration": {
          "aliases": [],
          "description": "Determines the time range covered by a shard group. If specified it must be at least one hour. If none, it's determined by InfluxDB by the rentention policy's duration. Supports complex duration expressions with multiple units.",
          "type": "str",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Use https instead of http to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the retention policy.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "version_added": "3.1.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Number of seconds Requests will wait for client to establish a connection.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "udp_port": {
          "aliases": [],
          "description": "UDP port to connect to InfluxDB server.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_udp": {
          "aliases": [],
          "description": "Use UDP to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "login_username"
          ],
          "description": "Username that will be used to authenticate against InfluxDB server.\nAlias C(login_username) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "influxdb >= 0.9",
        "requests"
      ],
      "short_description": "Manage InfluxDB retention policies"
    },
    "examples": "\n# Example influxdb_retention_policy command from Ansible Playbooks\n- name: Create 1 hour retention policy\n  community.general.influxdb_retention_policy:\n      hostname: \"{{ influxdb_ip_address }}\"\n      database_name: \"{{ influxdb_database_name }}\"\n      policy_name: test\n      duration: 1h\n      replication: 1\n      ssl: yes\n      validate_certs: yes\n      state: present\n\n- name: Create 1 day retention policy with 1 hour shard group duration\n  community.general.influxdb_retention_policy:\n      hostname: \"{{ influxdb_ip_address }}\"\n      database_name: \"{{ influxdb_database_name }}\"\n      policy_name: test\n      duration: 1d\n      replication: 1\n      shard_group_duration: 1h\n      state: present\n\n- name: Create 1 week retention policy with 1 day shard group duration\n  community.general.influxdb_retention_policy:\n      hostname: \"{{ influxdb_ip_address }}\"\n      database_name: \"{{ influxdb_database_name }}\"\n      policy_name: test\n      duration: 1w\n      replication: 1\n      shard_group_duration: 1d\n      state: present\n\n- name: Create infinite retention policy with 1 week of shard group duration\n  community.general.influxdb_retention_policy:\n      hostname: \"{{ influxdb_ip_address }}\"\n      database_name: \"{{ influxdb_database_name }}\"\n      policy_name: test\n      duration: INF\n      replication: 1\n      ssl: no\n      validate_certs: no\n      shard_group_duration: 1w\n      state: present\n\n- name: Create retention policy with complex durations\n  community.general.influxdb_retention_policy:\n      hostname: \"{{ influxdb_ip_address }}\"\n      database_name: \"{{ influxdb_database_name }}\"\n      policy_name: test\n      duration: 5d1h30m\n      replication: 1\n      ssl: no\n      validate_certs: no\n      shard_group_duration: 1d10h30m\n      state: present\n\n- name: Drop retention policy\n  community.general.influxdb_retention_policy:\n      hostname: \"{{ influxdb_ip_address }}\"\n      database_name: \"{{ influxdb_database_name }}\"\n      policy_name: test\n      state: absent\n"
  },
  "community.general.influxdb_user": {
    "doc": {
      "description": "Manage InfluxDB users.",
      "has_action": false,
      "options": {
        "admin": {
          "aliases": [],
          "description": "Whether the user should be in the admin role or not.\nSince version 2.8, the role will also be updated.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "grants": {
          "aliases": [],
          "description": "Privileges to grant to this user.\nTakes a list of dicts containing the \"database\" and \"privilege\" keys.\nIf this argument is not provided, the current grants will be left alone.\nIf an empty list is provided, all grants for the user will be removed.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address on which InfluxDB server is listening.\nSince Ansible 2.5, defaulted to localhost.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "login_password"
          ],
          "description": "Password that will be used to authenticate against InfluxDB server.\nAlias C(login_password) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path on which InfluxDB server is accessible\nOnly available when using python-influxdb >= 5.1.0",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which InfluxDB server is listening",
          "default": "8086",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxies": {
          "aliases": [],
          "description": "HTTP(S) proxy to use for Requests to connect to InfluxDB server.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Number of retries client will try before aborting.\nC(0) indicates try until success.\nOnly available when using python-influxdb >= 4.1.0",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Use https instead of http to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the user.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Number of seconds Requests will wait for client to establish a connection.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "udp_port": {
          "aliases": [],
          "description": "UDP port to connect to InfluxDB server.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_udp": {
          "aliases": [],
          "description": "Use UDP to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user_name": {
          "aliases": [],
          "description": "Name of the user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user_password": {
          "aliases": [],
          "description": "Password to be set for the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "login_username"
          ],
          "description": "Username that will be used to authenticate against InfluxDB server.\nAlias C(login_username) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "influxdb >= 0.9"
      ],
      "short_description": "Manage InfluxDB users"
    },
    "examples": "\n- name: Create a user on localhost using default login credentials\n  community.general.influxdb_user:\n    user_name: john\n    user_password: s3cr3t\n\n- name: Create a user on localhost using custom login credentials\n  community.general.influxdb_user:\n    user_name: john\n    user_password: s3cr3t\n    login_username: \"{{ influxdb_username }}\"\n    login_password: \"{{ influxdb_password }}\"\n\n- name: Create an admin user on a remote host using custom login credentials\n  community.general.influxdb_user:\n    user_name: john\n    user_password: s3cr3t\n    admin: yes\n    hostname: \"{{ influxdb_hostname }}\"\n    login_username: \"{{ influxdb_username }}\"\n    login_password: \"{{ influxdb_password }}\"\n\n- name: Create a user on localhost with privileges\n  community.general.influxdb_user:\n    user_name: john\n    user_password: s3cr3t\n    login_username: \"{{ influxdb_username }}\"\n    login_password: \"{{ influxdb_password }}\"\n    grants:\n      - database: 'collectd'\n        privilege: 'WRITE'\n      - database: 'graphite'\n        privilege: 'READ'\n\n- name: Destroy a user using custom login credentials\n  community.general.influxdb_user:\n    user_name: john\n    login_username: \"{{ influxdb_username }}\"\n    login_password: \"{{ influxdb_password }}\"\n    state: absent\n"
  },
  "community.general.influxdb_write": {
    "doc": {
      "description": "Write data points into InfluxDB.",
      "has_action": false,
      "options": {
        "data_points": {
          "aliases": [],
          "description": "Data points as dict to write into the database.",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {}
        },
        "database_name": {
          "aliases": [],
          "description": "Name of the database.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address on which InfluxDB server is listening.\nSince Ansible 2.5, defaulted to localhost.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "login_password"
          ],
          "description": "Password that will be used to authenticate against InfluxDB server.\nAlias C(login_password) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path on which InfluxDB server is accessible\nOnly available when using python-influxdb >= 5.1.0",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which InfluxDB server is listening",
          "default": "8086",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxies": {
          "aliases": [],
          "description": "HTTP(S) proxy to use for Requests to connect to InfluxDB server.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Number of retries client will try before aborting.\nC(0) indicates try until success.\nOnly available when using python-influxdb >= 4.1.0",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Use https instead of http to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Number of seconds Requests will wait for client to establish a connection.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "udp_port": {
          "aliases": [],
          "description": "UDP port to connect to InfluxDB server.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_udp": {
          "aliases": [],
          "description": "Use UDP to connect to InfluxDB server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "login_username"
          ],
          "description": "Username that will be used to authenticate against InfluxDB server.\nAlias C(login_username) added in Ansible 2.5.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "influxdb >= 0.9"
      ],
      "short_description": "Write data points into InfluxDB"
    },
    "examples": "\n- name: Write points into database\n  community.general.influxdb_write:\n      hostname: \"{{influxdb_ip_address}}\"\n      database_name: \"{{influxdb_database_name}}\"\n      data_points:\n        - measurement: connections\n          tags:\n            host: server01\n            region: us-west\n          time: \"{{ ansible_date_time.iso8601 }}\"\n          fields:\n            value: 2000\n        - measurement: connections\n          tags:\n            host: server02\n            region: us-east\n          time: \"{{ ansible_date_time.iso8601 }}\"\n          fields:\n            value: 3000\n"
  },
  "community.general.ini_file": {
    "doc": {
      "description": "Manage (add, remove, change) individual settings in an INI-style file without having to manage the file as a whole with, say, M(ansible.builtin.template) or M(ansible.builtin.assemble).\nAdds missing sections if they don't exist.\nBefore Ansible 2.0, comments are discarded when the source file is read, and therefore will not show up in the destination file.\nSince Ansible 2.3, this module adds missing ending newlines to files to keep in line with the POSIX standard, even when no other modifications need to be applied.",
      "has_action": false,
      "notes": "While it is possible to add an I(option) without specifying a I(value), this makes no sense.\nAs of Ansible 2.3, the I(dest) option has been changed to I(path) as default, but I(dest) still works as well.\nAs of community.general 3.2.0, UTF-8 BOM markers are discarded when reading files.",
      "options": {
        "allow_no_value": {
          "aliases": [],
          "description": "Allow option without value and without '=' symbol.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "create": {
          "aliases": [],
          "description": "If set to C(no), the module will fail if the file does not already exist.\nBy default it will create the file if it is missing.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclusive": {
          "aliases": [],
          "description": "If set to C(yes) (default), all matching I(option) lines are removed when I(state=absent), or replaced when I(state=present).\nIf set to C(no), only the specified I(value(s)) are added when I(state=present), or removed when I(state=absent), and existing ones are not modified.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "3.6.0",
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The permissions the resulting filesystem object should have.\nFor those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.\nGiving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.\nAs of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).\nIf C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.\nIf C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.\nSpecifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "no_extra_spaces": {
          "aliases": [],
          "description": "Do not insert spaces before and after '=' symbol.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "option": {
          "aliases": [],
          "description": "If set (required for changing a I(value)), this is the name of the option.\nMay be omitted if adding/removing a whole I(section).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest"
          ],
          "description": "Path to the INI-style file; this file is created if required.\nBefore Ansible 2.3 this option was only usable as I(dest).",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "section": {
          "aliases": [],
          "description": "Section name in INI file. This is added if C(state=present) automatically when a single value is being set.\nIf left empty or set to C(null), the I(option) will be placed before the first I(section).\nUsing C(null) is also required if the config format does not support sections.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(absent) and I(exclusive) set to C(yes) all matching I(option) lines are removed.\nIf set to C(absent) and I(exclusive) set to C(no) the specified C(option=value) lines are removed, but the other I(option)s with the same name are not touched.\nIf set to C(present) and I(exclusive) set to C(no) the specified C(option=values) lines are added, but the other I(option)s with the same name are not touched.\nIf set to C(present) and I(exclusive) set to C(yes) all given C(option=values) lines will be added and the other I(option)s with the same name are removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The string value to be associated with an I(option).\nMay be omitted when removing an I(option).\nMutually exclusive with I(values).\nI(value=v) is equivalent to I(values=[v]).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "values": {
          "aliases": [],
          "description": "The string value to be associated with an I(option).\nMay be omitted when removing an I(option).\nMutually exclusive with I(value).\nI(value=v) is equivalent to I(values=[v]).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "3.6.0",
          "suboptions": {}
        }
      },
      "short_description": "Tweak settings in INI files"
    },
    "examples": "\n# Before Ansible 2.3, option 'dest' was used instead of 'path'\n- name: Ensure \"fav=lemonade is in section \"[drinks]\" in specified file\n  community.general.ini_file:\n    path: /etc/conf\n    section: drinks\n    option: fav\n    value: lemonade\n    mode: '0600'\n    backup: yes\n\n- name: Ensure \"temperature=cold is in section \"[drinks]\" in specified file\n  community.general.ini_file:\n    path: /etc/anotherconf\n    section: drinks\n    option: temperature\n    value: cold\n    backup: yes\n\n- name: Add \"beverage=lemon juice\" is in section \"[drinks]\" in specified file\n  community.general.ini_file:\n    path: /etc/conf\n    section: drinks\n    option: beverage\n    value: lemon juice\n    mode: '0600'\n    state: present\n    exclusive: no\n\n- name: Ensure multiple values \"beverage=coke\" and \"beverage=pepsi\" are in section \"[drinks]\" in specified file\n  community.general.ini_file:\n    path: /etc/conf\n    section: drinks\n    option: beverage\n    values:\n      - coke\n      - pepsi\n    mode: '0600'\n    state: present\n"
  },
  "community.general.installp": {
    "doc": {
      "description": "Manage packages using 'installp' on AIX",
      "has_action": false,
      "notes": "If the package is already installed, even the package/fileset is new, the module will not install it.",
      "options": {
        "accept_license": {
          "aliases": [],
          "description": "Whether to accept the license for the package(s).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "One or more packages to install or remove.\nUse C(all) to install all packages available on informed C(repository_path).",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "repository_path": {
          "aliases": [],
          "description": "Path with AIX packages (required to install).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the package needs to be present on or absent from the system.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage packages on AIX"
    },
    "examples": "\n- name: Install package foo\n  community.general.installp:\n    name: foo\n    repository_path: /repository/AIX71/installp/base\n    accept_license: yes\n    state: present\n\n- name: Install bos.sysmgt that includes bos.sysmgt.nim.master, bos.sysmgt.nim.spot\n  community.general.installp:\n    name: bos.sysmgt\n    repository_path: /repository/AIX71/installp/base\n    accept_license: yes\n    state: present\n\n- name: Install bos.sysmgt.nim.master only\n  community.general.installp:\n    name: bos.sysmgt.nim.master\n    repository_path: /repository/AIX71/installp/base\n    accept_license: yes\n    state: present\n\n- name: Install bos.sysmgt.nim.master and bos.sysmgt.nim.spot\n  community.general.installp:\n    name: bos.sysmgt.nim.master, bos.sysmgt.nim.spot\n    repository_path: /repository/AIX71/installp/base\n    accept_license: yes\n    state: present\n\n- name: Remove packages bos.sysmgt.nim.master\n  community.general.installp:\n    name: bos.sysmgt.nim.master\n    state: absent\n"
  },
  "community.general.interfaces_file": {
    "doc": {
      "description": "Manage (add, remove, change) individual interface options in an interfaces-style file without having to manage the file as a whole with, say, M(ansible.builtin.template) or M(ansible.builtin.assemble). Interface has to be presented in a file.\nRead information about interfaces from interfaces-styled files",
      "has_action": false,
      "notes": "If option is defined multiple times last one will be updated but all will be deleted in case of an absent state",
      "options": {
        "address_family": {
          "aliases": [],
          "description": "Address family of the interface, useful if same interface name is used for both inet and inet6",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Path to the interfaces file",
          "default": "/etc/network/interfaces",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "iface": {
          "aliases": [],
          "description": "Name of the interface, required for value changes or option remove",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The permissions the resulting filesystem object should have.\nFor those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.\nGiving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.\nAs of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).\nIf C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.\nIf C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.\nSpecifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "option": {
          "aliases": [],
          "description": "Name of the option, required for value changes or option remove",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(absent) the option or section will be removed if present instead of created.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "If I(option) is not presented for the I(interface) and I(state) is C(present) option will be added. If I(option) already exists and is not C(pre-up), C(up), C(post-up) or C(down), it's value will be updated. C(pre-up), C(up), C(post-up) and C(down) options can't be updated, only adding new options, removing existing ones or cleaning the whole option set are supported",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [],
      "short_description": "Tweak settings in /etc/network/interfaces files"
    },
    "examples": "\n- name: Set eth1 mtu configuration value to 8000\n  community.general.interfaces_file:\n    dest: /etc/network/interfaces.d/eth1.cfg\n    iface: eth1\n    option: mtu\n    value: 8000\n    backup: yes\n    state: present\n  register: eth1_cfg\n"
  },
  "community.general.ip_netns": {
    "doc": {
      "description": "Create or delete network namespaces using the ip command.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "Name of the namespace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the namespace should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "ip"
      ],
      "short_description": "Manage network namespaces"
    },
    "examples": "\n- name: Create a namespace named mario\n  community.general.ip_netns:\n    name: mario\n    state: present\n\n- name: Delete a namespace named luigi\n  community.general.ip_netns:\n    name: luigi\n    state: absent\n"
  },
  "community.general.ipa_config": {
    "doc": {
      "description": "Modify global configuration settings of a FreeIPA Server.",
      "has_action": false,
      "options": {
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipaconfigstring": {
          "aliases": [
            "configstring"
          ],
          "description": "Extra hashes to generate in password plug-in.",
          "type": "list",
          "required": false,
          "choices": [
            "AllowNThash",
            "KDC:Disable Last Success",
            "KDC:Disable Lockout",
            "KDC:Disable Default Preauth for SPNs"
          ],
          "elements": "str",
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipadefaultemaildomain": {
          "aliases": [
            "emaildomain"
          ],
          "description": "Default e-mail domain for new users.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipadefaultloginshell": {
          "aliases": [
            "loginshell"
          ],
          "description": "Default shell for new users.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipadefaultprimarygroup": {
          "aliases": [
            "primarygroup"
          ],
          "description": "Default group for new users.",
          "type": "str",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipagroupsearchfields": {
          "aliases": [
            "groupsearchfields"
          ],
          "description": "A list of fields to search in when searching for groups.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipahomesrootdir": {
          "aliases": [
            "homesrootdir"
          ],
          "description": "Default location of home directories.",
          "type": "str",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipakrbauthzdata": {
          "aliases": [
            "krbauthzdata"
          ],
          "description": "Default types of PAC supported for services.",
          "type": "list",
          "required": false,
          "choices": [
            "MS-PAC",
            "PAD",
            "nfs:NONE"
          ],
          "elements": "str",
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipamaxusernamelength": {
          "aliases": [
            "maxusernamelength"
          ],
          "description": "Maximum length of usernames.",
          "type": "int",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipapwdexpadvnotify": {
          "aliases": [
            "pwdexpadvnotify"
          ],
          "description": "Notice of impending password expiration, in days.",
          "type": "int",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipasearchrecordslimit": {
          "aliases": [
            "searchrecordslimit"
          ],
          "description": "Maximum number of records to search (-1 or 0 is unlimited).",
          "type": "int",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipasearchtimelimit": {
          "aliases": [
            "searchtimelimit"
          ],
          "description": "Maximum amount of time (seconds) for a search (-1 or 0 is unlimited).",
          "type": "int",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipaselinuxusermaporder": {
          "aliases": [
            "selinuxusermaporder"
          ],
          "description": "The SELinux user map order (order in increasing priority of SELinux users).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "ipauserauthtype": {
          "aliases": [
            "userauthtype"
          ],
          "description": "The authentication type to use by default.",
          "type": "list",
          "required": false,
          "choices": [
            "password",
            "radius",
            "otp",
            "pkinit",
            "hardened",
            "disabled"
          ],
          "elements": "str",
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "ipausersearchfields": {
          "aliases": [
            "usersearchfields"
          ],
          "description": "A list of fields to search in when searching for users.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Global FreeIPA Configuration Settings"
    },
    "examples": "\n- name: Ensure password plugin features DC:Disable Last Success and KDC:Disable Lockout are enabled\n  community.general.ipa_config:\n    ipaconfigstring: [\"KDC:Disable Last Success\", \"KDC:Disable Lockout\"]\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the default login shell is bash\n  community.general.ipa_config:\n    ipadefaultloginshell: /bin/bash\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the default e-mail domain is ansible.com\n  community.general.ipa_config:\n    ipadefaultemaildomain: ansible.com\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the default primary group is set to ipausers\n  community.general.ipa_config:\n    ipadefaultprimarygroup: ipausers\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the group search fields are set to 'cn,description'\n  community.general.ipa_config:\n    ipagroupsearchfields: ['cn', 'description']\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the home directory location is set to /home\n  community.general.ipa_config:\n    ipahomesrootdir: /home\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the default types of PAC supported for services is set to MS-PAC and PAD\n  community.general.ipa_config:\n    ipakrbauthzdata: [\"MS-PAC\", \"PAD\"]\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the maximum user name length is set to 32\n  community.general.ipa_config:\n    ipamaxusernamelength: 32\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the password expiration notice is set to 4 days\n  community.general.ipa_config:\n    ipapwdexpadvnotify: 4\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the search record limit is set to 100\n  community.general.ipa_config:\n    ipasearchrecordslimit: 100\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the search time limit is set to 2 seconds\n  community.general.ipa_config:\n    ipasearchtimelimit: 2\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the default user auth type is password\n  community.general.ipa_config:\n    ipauserauthtype: ['password']\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the user search fields is set to 'uid,givenname,sn,ou,title'\n  community.general.ipa_config:\n    ipausersearchfields: ['uid', 'givenname', 'sn', 'ou', 'title']\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the SELinux user map order is set\n  community.general.ipa_config:\n    ipaselinuxusermaporder:\n      - \"guest_u:s0\"\n      - \"xguest_u:s0\"\n      - \"user_u:s0\"\n      - \"staff_u:s0-s0:c0.c1023\"\n      - \"unconfined_u:s0-s0:c0.c1023\"\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n"
  },
  "community.general.ipa_dnsrecord": {
    "doc": {
      "description": "Add, modify and delete an IPA DNS Record using IPA API.",
      "has_action": false,
      "options": {
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "record_name": {
          "aliases": [
            "name"
          ],
          "description": "The DNS record name to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "record_ttl": {
          "aliases": [],
          "description": "Set the TTL for the record.\nApplies only when adding a new or changing the value of record_value.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "record_type": {
          "aliases": [],
          "description": "The type of DNS record name.\nCurrently, 'A', 'AAAA', 'A6', 'CNAME', 'DNAME', 'PTR', 'TXT', 'SRV' and 'MX' are supported.\n'A6', 'CNAME', 'DNAME' and 'TXT' are added in version 2.5.\n'SRV' and 'MX' are added in version 2.8.",
          "default": "A",
          "type": "str",
          "required": false,
          "choices": [
            "A",
            "AAAA",
            "A6",
            "CNAME",
            "DNAME",
            "MX",
            "PTR",
            "SRV",
            "TXT"
          ],
          "suboptions": {}
        },
        "record_value": {
          "aliases": [],
          "description": "Manage DNS record name with this value.\nIn the case of 'A' or 'AAAA' record types, this will be the IP address.\nIn the case of 'A6' record type, this will be the A6 Record data.\nIn the case of 'CNAME' record type, this will be the hostname.\nIn the case of 'DNAME' record type, this will be the DNAME target.\nIn the case of 'PTR' record type, this will be the hostname.\nIn the case of 'TXT' record type, this will be a text.\nIn the case of 'SRV' record type, this will be a service record.\nIn the case of 'MX' record type, this will be a mail exchanger record.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "zone_name": {
          "aliases": [],
          "description": "The DNS zone name to which DNS record needs to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA DNS records"
    },
    "examples": "\n- name: Ensure dns record is present\n  community.general.ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    record_name: vm-001\n    record_type: 'AAAA'\n    record_value: '::1'\n\n- name: Ensure that dns record exists with a TTL\n  community.general.ipa_dnsrecord:\n    name: host02\n    zone_name: example.com\n    record_type: 'AAAA'\n    record_value: '::1'\n    record_ttl: 300\n    ipa_host: ipa.example.com\n    ipa_pass: topsecret\n    state: present\n\n- name: Ensure a PTR record is present\n  community.general.ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: 2.168.192.in-addr.arpa\n    record_name: 5\n    record_type: 'PTR'\n    record_value: 'internal.ipa.example.com'\n\n- name: Ensure a TXT record is present\n  community.general.ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    record_name: _kerberos\n    record_type: 'TXT'\n    record_value: 'EXAMPLE.COM'\n\n- name: Ensure an SRV record is present\n  community.general.ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    record_name: _kerberos._udp.example.com\n    record_type: 'SRV'\n    record_value: '10 50 88 ipa.example.com'\n\n- name: Ensure an MX record is present\n  community.general.ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    record_name: '@'\n    record_type: 'MX'\n    record_value: '1 mailserver.example.com'\n\n- name: Ensure that dns record is removed\n  community.general.ipa_dnsrecord:\n    name: host01\n    zone_name: example.com\n    record_type: 'AAAA'\n    record_value: '::1'\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    state: absent\n"
  },
  "community.general.ipa_dnszone": {
    "doc": {
      "description": "Add and delete an IPA DNS Zones using IPA API",
      "has_action": false,
      "options": {
        "allowsyncptr": {
          "aliases": [],
          "description": "Allow synchronization of forward and reverse records in the zone.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "4.3.0",
          "suboptions": {}
        },
        "dynamicupdate": {
          "aliases": [],
          "description": "Apply dynamic update to zone.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "zone_name": {
          "aliases": [],
          "description": "The DNS zone name to which needs to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA DNS Zones"
    },
    "examples": "\n- name: Ensure dns zone is present\n  community.general.ipa_dnszone:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n\n- name: Ensure dns zone is present and is dynamic update\n  community.general.ipa_dnszone:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    dynamicupdate: true\n\n- name: Ensure that dns zone is removed\n  community.general.ipa_dnszone:\n    zone_name: example.com\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: topsecret\n    state: absent\n\n- name: Ensure dns zone is present and is allowing sync\n  community.general.ipa_dnszone:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    allowsyncptr: true\n"
  },
  "community.general.ipa_group": {
    "doc": {
      "description": "Add, modify and delete group within IPA server",
      "has_action": false,
      "options": {
        "append": {
          "aliases": [],
          "description": "If C(yes), add the listed I(user) and I(group) to the group members.\nIf C(no), only the listed I(user) and I(group) will be group members, removing any other members.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "cn": {
          "aliases": [
            "name"
          ],
          "description": "Canonical name.\nCan not be changed as it is the unique identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external": {
          "aliases": [],
          "description": "Allow adding external non-IPA members from trusted domains.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gidnumber": {
          "aliases": [
            "gid"
          ],
          "description": "GID (use this option to set it manually).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "List of group names assigned to this group.\nIf I(append=no) and an empty list is passed all groups will be removed from this group.\nGroups that are already assigned but not passed will be removed.\nIf I(append=yes) the listed groups will be assigned without removing other groups.\nIf option is omitted assigned groups will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nonposix": {
          "aliases": [],
          "description": "Create as a non-POSIX group.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "List of user names assigned to this group.\nIf I(append=no) and an empty list is passed all users will be removed from this group.\nUsers that are already assigned but not passed will be removed.\nIf I(append=yes) the listed users will be assigned without removing other users.\nIf option is omitted assigned users will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA group"
    },
    "examples": "\n- name: Ensure group is present\n  community.general.ipa_group:\n    name: oinstall\n    gidnumber: '54321'\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure that groups sysops and appops are assigned to ops but no other group\n  community.general.ipa_group:\n    name: ops\n    group:\n    - sysops\n    - appops\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure that users linus and larry are assign to the group, but no other user\n  community.general.ipa_group:\n    name: sysops\n    user:\n    - linus\n    - larry\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure that new starter named john is member of the group, without removing other members\n  community.general.ipa_group:\n    name: developers\n    user:\n    - john\n    append: yes\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure group is absent\n  community.general.ipa_group:\n    name: sysops\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_hbacrule": {
    "doc": {
      "description": "Add, modify or delete an IPA HBAC rule using IPA API.",
      "has_action": false,
      "options": {
        "cn": {
          "aliases": [
            "name"
          ],
          "description": "Canonical name.\nCan not be changed as it is the unique identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "List of host names to assign.\nIf an empty list is passed all hosts will be removed from the rule.\nIf option is omitted hosts will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostcategory": {
          "aliases": [],
          "description": "Host category",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "hostgroup": {
          "aliases": [],
          "description": "List of hostgroup names to assign.\nIf an empty list is passed all hostgroups will be removed. from the rule\nIf option is omitted hostgroups will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "List of service names to assign.\nIf an empty list is passed all services will be removed from the rule.\nIf option is omitted services will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "servicecategory": {
          "aliases": [],
          "description": "Service category",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "servicegroup": {
          "aliases": [],
          "description": "List of service group names to assign.\nIf an empty list is passed all assigned service groups will be removed from the rule.\nIf option is omitted service groups will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sourcehost": {
          "aliases": [],
          "description": "List of source host names to assign.\nIf an empty list if passed all assigned source hosts will be removed from the rule.\nIf option is omitted source hosts will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sourcehostcategory": {
          "aliases": [],
          "description": "Source host category",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "sourcehostgroup": {
          "aliases": [],
          "description": "List of source host group names to assign.\nIf an empty list if passed all assigned source host groups will be removed from the rule.\nIf option is omitted source host groups will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "List of user names to assign.\nIf an empty list if passed all assigned users will be removed from the rule.\nIf option is omitted users will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "usercategory": {
          "aliases": [],
          "description": "User category",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "usergroup": {
          "aliases": [],
          "description": "List of user group names to assign.\nIf an empty list if passed all assigned user groups will be removed from the rule.\nIf option is omitted user groups will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA HBAC rule"
    },
    "examples": "\n- name: Ensure rule to allow all users to access any host from any host\n  community.general.ipa_hbacrule:\n    name: allow_all\n    description: Allow all users to access any host from any host\n    hostcategory: all\n    servicecategory: all\n    usercategory: all\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure rule with certain limitations\n  community.general.ipa_hbacrule:\n    name: allow_all_developers_access_to_db\n    description: Allow all developers to access any database from any host\n    hostgroup:\n    - db-server\n    usergroup:\n    - developers\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure rule is absent\n  community.general.ipa_hbacrule:\n    name: rule_to_be_deleted\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_host": {
    "doc": {
      "description": "Add, modify and delete an IPA host using IPA API.",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "A description of this host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force host name even if not in DNS.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fqdn": {
          "aliases": [
            "name"
          ],
          "description": "Full qualified domain name.\nCan not be changed as it is the unique identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Add the host to DNS with this IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac_address": {
          "aliases": [
            "macaddress"
          ],
          "description": "List of Hardware MAC address(es) off this host.\nIf option is omitted MAC addresses will not be checked or changed.\nIf an empty list is passed all assigned MAC addresses will be removed.\nMAC addresses that are already assigned but not passed will be removed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ns_hardware_platform": {
          "aliases": [
            "nshardwareplatform"
          ],
          "description": "Host hardware platform (e.g. \"Lenovo T61\")",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ns_host_location": {
          "aliases": [
            "nshostlocation"
          ],
          "description": "Host location (e.g. \"Lab 2\")",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ns_os_version": {
          "aliases": [
            "nsosversion"
          ],
          "description": "Host operating system and version (e.g. \"Fedora 9\")",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "random_password": {
          "aliases": [],
          "description": "Generate a random password to be used in bulk enrollment.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "update_dns": {
          "aliases": [],
          "description": "If set C(\"True\") with state as C(\"absent\"), then removes DNS records of the host managed by FreeIPA DNS.\nThis option has no effect for states other than \"absent\".",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user_certificate": {
          "aliases": [
            "usercertificate"
          ],
          "description": "List of Base-64 encoded server certificates.\nIf option is omitted certificates will not be checked or changed.\nIf an empty list is passed all assigned certificates will be removed.\nCertificates already assigned but not passed will be removed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA host"
    },
    "examples": "\n- name: Ensure host is present\n  community.general.ipa_host:\n    name: host01.example.com\n    description: Example host\n    ip_address: 192.168.0.123\n    ns_host_location: Lab\n    ns_os_version: CentOS 7\n    ns_hardware_platform: Lenovo T61\n    mac_address:\n    - \"08:00:27:E3:B1:2D\"\n    - \"52:54:00:BD:97:1E\"\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Generate a random password for bulk enrolment\n  community.general.ipa_host:\n    name: host01.example.com\n    description: Example host\n    ip_address: 192.168.0.123\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    validate_certs: False\n    random_password: True\n\n- name: Ensure host is disabled\n  community.general.ipa_host:\n    name: host01.example.com\n    state: disabled\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure that all user certificates are removed\n  community.general.ipa_host:\n    name: host01.example.com\n    user_certificate: []\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure host is absent\n  community.general.ipa_host:\n    name: host01.example.com\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure host and its DNS record is absent\n  community.general.ipa_host:\n    name: host01.example.com\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    update_dns: True\n"
  },
  "community.general.ipa_hostgroup": {
    "doc": {
      "description": "Add, modify and delete an IPA host-group using IPA API.",
      "has_action": false,
      "options": {
        "cn": {
          "aliases": [
            "name"
          ],
          "description": "Name of host-group.\nCan not be changed as it is the unique identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "List of hosts that belong to the host-group.\nIf an empty list is passed all hosts will be removed from the group.\nIf option is omitted hosts will not be checked or changed.\nIf option is passed all assigned hosts that are not passed will be unassigned from the group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostgroup": {
          "aliases": [],
          "description": "List of host-groups than belong to that host-group.\nIf an empty list is passed all host-groups will be removed from the group.\nIf option is omitted host-groups will not be checked or changed.\nIf option is passed all assigned hostgroups that are not passed will be unassigned from the group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA host-group"
    },
    "examples": "\n- name: Ensure host-group databases is present\n  community.general.ipa_hostgroup:\n    name: databases\n    state: present\n    host:\n    - db.example.com\n    hostgroup:\n    - mysql-server\n    - oracle-server\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure host-group databases is absent\n  community.general.ipa_hostgroup:\n    name: databases\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_otpconfig": {
    "doc": {
      "description": "Modify global configuration settings of a FreeIPA Server with respect to OTP (One Time Passwords).",
      "has_action": false,
      "options": {
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipatokenhotpauthwindow": {
          "aliases": [
            "hotpauthwindow"
          ],
          "description": "HOTP authentication window in number of hops.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipatokenhotpsyncwindow": {
          "aliases": [
            "hotpsyncwindow"
          ],
          "description": "HOTP synchronization window in hops.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipatokentotpauthwindow": {
          "aliases": [
            "totpauthwindow"
          ],
          "description": "TOTP authentication window in seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipatokentotpsyncwindow": {
          "aliases": [
            "totpsyncwindow"
          ],
          "description": "TOTP synchronization window in seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA OTP Configuration Settings",
      "version_added": "2.5.0"
    },
    "examples": "\n- name: Ensure the TOTP authentication window is set to 300 seconds\n  community.general.ipa_otpconfig:\n    ipatokentotpauthwindow: '300'\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the TOTP syncronization window is set to 86400 seconds\n  community.general.ipa_otpconfig:\n    ipatokentotpsyncwindow: '86400'\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the HOTP authentication window is set to 10 hops\n  community.general.ipa_otpconfig:\n    ipatokenhotpauthwindow: '10'\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n\n- name: Ensure the HOTP syncronization window is set to 100 hops\n  community.general.ipa_otpconfig:\n    ipatokenhotpsyncwindow: '100'\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: supersecret\n"
  },
  "community.general.ipa_otptoken": {
    "doc": {
      "description": "Add, modify, and delete One Time Passwords in IPA.",
      "has_action": false,
      "options": {
        "algorithm": {
          "aliases": [],
          "description": "Token hash algorithm.\nB(Note:) Cannot be modified after OTP is created.",
          "type": "str",
          "required": false,
          "choices": [
            "sha1",
            "sha256",
            "sha384",
            "sha512"
          ],
          "suboptions": {}
        },
        "counter": {
          "aliases": [],
          "description": "Initial counter for the HOTP token.\nB(Note:) Cannot be modified after OTP is created.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the token (informational only).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "digits": {
          "aliases": [],
          "description": "Number of digits each token code will have.\nB(Note:) Cannot be modified after OTP is created.",
          "type": "int",
          "required": false,
          "choices": [
            "6",
            "8"
          ],
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Mark the token as enabled (default C(true)).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Length of TOTP token code validity in seconds.\nB(Note:) Cannot be modified after OTP is created.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "model": {
          "aliases": [],
          "description": "Token model (informational only).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "newuniqueid": {
          "aliases": [],
          "description": "If specified, the unique id specified will be changed to this.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notafter": {
          "aliases": [],
          "description": "Last date/time the token can be used.\nIn the format C(YYYYMMddHHmmss).\nFor example, C(20200121182022) will allow the token to be used until 21 January 2020 at 18:20:22.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notbefore": {
          "aliases": [],
          "description": "First date/time the token can be used.\nIn the format C(YYYYMMddHHmmss).\nFor example, C(20180121182022) will allow the token to be used starting on 21 January 2018 at 18:20:22.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "offset": {
          "aliases": [],
          "description": "TOTP token / IPA server time difference.\nB(Note:) Cannot be modified after OTP is created.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "otptype": {
          "aliases": [],
          "description": "Type of OTP.\nB(Note:) Cannot be modified after OTP is created.",
          "type": "str",
          "required": false,
          "choices": [
            "totp",
            "hotp"
          ],
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Assigned user of the token.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secretkey": {
          "aliases": [],
          "description": "Token secret (Base64).\nIf OTP is created and this is not specified, a random secret will be generated by IPA.\nB(Note:) Cannot be modified after OTP is created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serial": {
          "aliases": [],
          "description": "Token serial (informational only).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "uniqueid": {
          "aliases": [
            "name"
          ],
          "description": "Unique ID of the token in IPA.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vendor": {
          "aliases": [],
          "description": "Token vendor name (informational only).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA OTPs",
      "version_added": "2.5.0"
    },
    "examples": "\n- name: Create a totp for pinky, allowing the IPA server to generate using defaults\n  community.general.ipa_otptoken:\n    uniqueid: Token123\n    otptype: totp\n    owner: pinky\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Create a 8 digit hotp for pinky with sha256 with specified validity times\n  community.general.ipa_otptoken:\n    uniqueid: Token123\n    enabled: true\n    otptype: hotp\n    digits: 8\n    secretkey: UMKSIER00zT2T2tWMUlTRmNlekRCbFQvWFBVZUh2dElHWGR6T3VUR3IzK2xjaFk9\n    algorithm: sha256\n    notbefore: 20180121182123\n    notafter: 20220121182123\n    owner: pinky\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Update Token123 to indicate a vendor, model, serial number (info only), and description\n  community.general.ipa_otptoken:\n    uniqueid: Token123\n    vendor: Acme\n    model: acme101\n    serial: SerialNumber1\n    description: Acme OTP device\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Disable Token123\n  community.general.ipa_otptoken:\n    uniqueid: Token123\n    enabled: false\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Rename Token123 to TokenABC and enable it\n  community.general.ipa_otptoken:\n    uniqueid: Token123\n    newuniqueid: TokenABC\n    enabled: true\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_pwpolicy": {
    "doc": {
      "description": "Add, modify, or delete a password policy using the IPA API.",
      "has_action": false,
      "notes": "Supports C(check_mode).",
      "options": {
        "failinterval": {
          "aliases": [],
          "description": "Period (in seconds) after which the number of failed login attempts is reset.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [
            "name"
          ],
          "description": "Name of the group that the policy applies to.\nIf omitted, the global policy is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "historylength": {
          "aliases": [],
          "description": "Number of previous passwords that are remembered.\nUsers cannot reuse remembered passwords.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lockouttime": {
          "aliases": [],
          "description": "Period (in seconds) for which users are locked out.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maxfailcount": {
          "aliases": [],
          "description": "Maximum number of consecutive failures before lockout.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maxpwdlife": {
          "aliases": [],
          "description": "Maximum password lifetime (in days).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "minclasses": {
          "aliases": [],
          "description": "Minimum number of character classes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "minlength": {
          "aliases": [],
          "description": "Minimum password length.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "minpwdlife": {
          "aliases": [],
          "description": "Minimum password lifetime (in hours).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Priority of the policy.\nHigh number means lower priority.\nRequired when C(cn) is not the global policy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA password policies",
      "version_added": "2.0.0"
    },
    "examples": "\n- name: Modify the global password policy\n  community.general.ipa_pwpolicy:\n      maxpwdlife: '90'\n      minpwdlife: '1'\n      historylength: '8'\n      minclasses: '3'\n      minlength: '16'\n      maxfailcount: '6'\n      failinterval: '60'\n      lockouttime: '600'\n      ipa_host: ipa.example.com\n      ipa_user: admin\n      ipa_pass: topsecret\n\n- name: Ensure the password policy for the group admins is present\n  community.general.ipa_pwpolicy:\n      group: admins\n      state: present\n      maxpwdlife: '60'\n      minpwdlife: '24'\n      historylength: '16'\n      minclasses: '4'\n      priority: '10'\n      maxfailcount: '4'\n      failinterval: '600'\n      lockouttime: '1200'\n      ipa_host: ipa.example.com\n      ipa_user: admin\n      ipa_pass: topsecret\n\n- name: Ensure that the group sysops does not have a unique password policy\n  community.general.ipa_pwpolicy:\n      group: sysops\n      state: absent\n      ipa_host: ipa.example.com\n      ipa_user: admin\n      ipa_pass: topsecret\n"
  },
  "community.general.ipa_role": {
    "doc": {
      "description": "Add, modify and delete a role within FreeIPA server using FreeIPA API.",
      "has_action": false,
      "options": {
        "cn": {
          "aliases": [
            "name"
          ],
          "description": "Role name.\nCan not be changed as it is the unique identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A description of this role-group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "List of group names assign to this role.\nIf an empty list is passed all assigned groups will be unassigned from the role.\nIf option is omitted groups will not be checked or changed.\nIf option is passed all assigned groups that are not passed will be unassigned from the role.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "List of host names to assign.\nIf an empty list is passed all assigned hosts will be unassigned from the role.\nIf option is omitted hosts will not be checked or changed.\nIf option is passed all assigned hosts that are not passed will be unassigned from the role.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostgroup": {
          "aliases": [],
          "description": "List of host group names to assign.\nIf an empty list is passed all assigned host groups will be removed from the role.\nIf option is omitted host groups will not be checked or changed.\nIf option is passed all assigned hostgroups that are not passed will be unassigned from the role.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "privilege": {
          "aliases": [],
          "description": "List of privileges granted to the role.\nIf an empty list is passed all assigned privileges will be removed.\nIf option is omitted privileges will not be checked or changed.\nIf option is passed all assigned privileges that are not passed will be removed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "List of service names to assign.\nIf an empty list is passed all assigned services will be removed from the role.\nIf option is omitted services will not be checked or changed.\nIf option is passed all assigned services that are not passed will be removed from the role.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "List of user names to assign.\nIf an empty list is passed all assigned users will be removed from the role.\nIf option is omitted users will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA role"
    },
    "examples": "\n- name: Ensure role is present\n  community.general.ipa_role:\n    name: dba\n    description: Database Administrators\n    state: present\n    user:\n    - pinky\n    - brain\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure role with certain details\n  community.general.ipa_role:\n    name: another-role\n    description: Just another role\n    group:\n    - editors\n    host:\n    - host01.example.com\n    hostgroup:\n    - hostgroup01\n    privilege:\n    - Group Administrators\n    - User Administrators\n    service:\n    - service01\n\n- name: Ensure role is absent\n  community.general.ipa_role:\n    name: dba\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_service": {
    "doc": {
      "description": "Add and delete an IPA service using IPA API.",
      "has_action": false,
      "options": {
        "force": {
          "aliases": [],
          "description": "Force principal name even if host is not in DNS.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "Defines the list of 'ManagedBy' hosts.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "krbcanonicalname": {
          "aliases": [
            "name"
          ],
          "description": "Principal of the service.\nCan not be changed as it is the unique identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA service"
    },
    "examples": "\n- name: Ensure service is present\n  community.general.ipa_service:\n    name: http/host01.example.com\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure service is absent\n  community.general.ipa_service:\n    name: http/host01.example.com\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Changing Managing hosts list\n  community.general.ipa_service:\n    name: http/host01.example.com\n    hosts:\n       - host01.example.com\n       - host02.example.com\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_subca": {
    "doc": {
      "description": "Add, modify, enable, disable and delete an IPA Lightweight Sub Certificate Authorities using IPA API.",
      "has_action": false,
      "options": {
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.\nState 'disable' and 'enable' is available for FreeIPA 4.4.2 version and onwards.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "subca_desc": {
          "aliases": [],
          "description": "The Sub Certificate Authority's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subca_name": {
          "aliases": [
            "name"
          ],
          "description": "The Sub Certificate Authority name which needs to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "subca_subject": {
          "aliases": [],
          "description": "The Sub Certificate Authority's Subject. e.g., 'CN=SampleSubCA1,O=testrelm.test'.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA Lightweight Sub Certificate Authorities."
    },
    "examples": "\n- name: Ensure IPA Sub CA is present\n  community.general.ipa_subca:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    subca_name: AnsibleSubCA1\n    subca_subject: 'CN=AnsibleSubCA1,O=example.com'\n    subca_desc: Ansible Sub CA\n\n- name: Ensure that IPA Sub CA is removed\n  community.general.ipa_subca:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: absent\n    subca_name: AnsibleSubCA1\n\n- name: Ensure that IPA Sub CA is disabled\n  community.general.ipa_subca:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: disable\n    subca_name: AnsibleSubCA1\n"
  },
  "community.general.ipa_sudocmd": {
    "doc": {
      "description": "Add, modify or delete sudo command within FreeIPA server using FreeIPA API.",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "A description of this command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "sudocmd": {
          "aliases": [
            "name"
          ],
          "description": "Sudo command.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA sudo command"
    },
    "examples": "\n- name: Ensure sudo command exists\n  community.general.ipa_sudocmd:\n    name: su\n    description: Allow to run su via sudo\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure sudo command does not exist\n  community.general.ipa_sudocmd:\n    name: su\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_sudocmdgroup": {
    "doc": {
      "description": "Add, modify or delete sudo command group within IPA server using IPA API.",
      "has_action": false,
      "options": {
        "cn": {
          "aliases": [
            "name"
          ],
          "description": "Sudo Command Group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Group description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "sudocmd": {
          "aliases": [],
          "description": "List of sudo commands to assign to the group.\nIf an empty list is passed all assigned commands will be removed from the group.\nIf option is omitted sudo commands will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA sudo command group"
    },
    "examples": "\n- name: Ensure sudo command group exists\n  community.general.ipa_sudocmdgroup:\n    name: group01\n    description: Group of important commands\n    sudocmd:\n    - su\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure sudo command group does not exist\n  community.general.ipa_sudocmdgroup:\n    name: group01\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_sudorule": {
    "doc": {
      "description": "Add, modify or delete sudo rule within IPA server using IPA API.",
      "has_action": false,
      "options": {
        "cmd": {
          "aliases": [],
          "description": "List of commands assigned to the rule.\nIf an empty list is passed all commands will be removed from the rule.\nIf option is omitted commands will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "cmdcategory": {
          "aliases": [],
          "description": "Command category the rule applies to.",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "cmdgroup": {
          "aliases": [],
          "description": "List of command groups assigned to the rule.\nIf an empty list is passed all command groups will be removed from the rule.\nIf option is omitted command groups will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "cn": {
          "aliases": [
            "name"
          ],
          "description": "Canonical name.\nCan not be changed as it is the unique identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the sudo rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "List of hosts assigned to the rule.\nIf an empty list is passed all hosts will be removed from the rule.\nIf option is omitted hosts will not be checked or changed.\nOption C(hostcategory) must be omitted to assign hosts.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostcategory": {
          "aliases": [],
          "description": "Host category the rule applies to.\nIf 'all' is passed one must omit C(host) and C(hostgroup).\nOption C(host) and C(hostgroup) must be omitted to assign 'all'.",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "hostgroup": {
          "aliases": [],
          "description": "List of host groups assigned to the rule.\nIf an empty list is passed all host groups will be removed from the rule.\nIf option is omitted host groups will not be checked or changed.\nOption C(hostcategory) must be omitted to assign host groups.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "runasextusers": {
          "aliases": [],
          "description": "List of external RunAs users",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "runasgroupcategory": {
          "aliases": [],
          "description": "RunAs Group category the rule applies to.",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "runasusercategory": {
          "aliases": [],
          "description": "RunAs User category the rule applies to.",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "sudoopt": {
          "aliases": [],
          "description": "List of options to add to the sudo rule.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "List of users assigned to the rule.\nIf an empty list is passed all users will be removed from the rule.\nIf option is omitted users will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "usercategory": {
          "aliases": [],
          "description": "User category the rule applies to.",
          "type": "str",
          "required": false,
          "choices": [
            "all"
          ],
          "suboptions": {}
        },
        "usergroup": {
          "aliases": [],
          "description": "List of user groups assigned to the rule.\nIf an empty list is passed all user groups will be removed from the rule.\nIf option is omitted user groups will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA sudo rule"
    },
    "examples": "\n- name: Ensure sudo rule is present that's allows all every body to execute any command on any host without being asked for a password.\n  community.general.ipa_sudorule:\n    name: sudo_all_nopasswd\n    cmdcategory: all\n    description: Allow to run every command with sudo without password\n    hostcategory: all\n    sudoopt:\n    - '!authenticate'\n    usercategory: all\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure user group developers can run every command on host group db-server as well as on host db01.example.com.\n  community.general.ipa_sudorule:\n    name: sudo_dev_dbserver\n    description: Allow developers to run every command with sudo on all database server\n    cmdcategory: all\n    host:\n    - db01.example.com\n    hostgroup:\n    - db-server\n    sudoopt:\n    - '!authenticate'\n    usergroup:\n    - developers\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure user group operations can run any commands that is part of operations-cmdgroup on any host as user root.\n  community.general.ipa_sudorule:\n    name: sudo_operations_all\n    description: Allow operators to run any commands that is part of operations-cmdgroup on any host as user root.\n    cmdgroup:\n    - operations-cmdgroup\n    hostcategory: all\n    runasextusers:\n    - root\n    sudoopt:\n    - '!authenticate'\n    usergroup:\n    - operators\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_user": {
    "doc": {
      "description": "Add, modify and delete user within IPA server.",
      "has_action": false,
      "options": {
        "displayname": {
          "aliases": [],
          "description": "Display name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gidnumber": {
          "aliases": [],
          "description": "Posix Group ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "givenname": {
          "aliases": [],
          "description": "First name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "homedirectory": {
          "aliases": [],
          "description": "Default home directory of the user.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "krbpasswordexpiration": {
          "aliases": [],
          "description": "Date at which the user password will expire.\nIn the format YYYYMMddHHmmss.\ne.g. 20180121182022 will expire on 21 January 2018 at 18:20:22.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "loginshell": {
          "aliases": [],
          "description": "Login shell.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mail": {
          "aliases": [],
          "description": "List of mail addresses assigned to the user.\nIf an empty list is passed all assigned email addresses will be deleted.\nIf None is passed email addresses will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for a user.\nWill not be set for an existing user unless I(update_password=always), which is the default.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sn": {
          "aliases": [],
          "description": "Surname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sshpubkey": {
          "aliases": [],
          "description": "List of public SSH key.\nIf an empty list is passed all assigned public keys will be deleted.\nIf None is passed SSH public keys will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "telephonenumber": {
          "aliases": [],
          "description": "List of telephone numbers assigned to the user.\nIf an empty list is passed all assigned telephone numbers will be deleted.\nIf None is passed telephone numbers will not be checked or changed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "Title.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uid": {
          "aliases": [
            "name"
          ],
          "description": "uid of the user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "uidnumber": {
          "aliases": [],
          "description": "Account Settings UID/Posix User ID number.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "Set password for a user.",
          "default": "always",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "on_create"
          ],
          "suboptions": {}
        },
        "userauthtype": {
          "aliases": [],
          "description": "The authentication type to use for the user.",
          "type": "list",
          "required": false,
          "choices": [
            "password",
            "radius",
            "otp",
            "pkinit",
            "hardened"
          ],
          "elements": "str",
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This only applies if C(ipa_prot) is I(https).\nIf set to C(no), the SSL certificates will not be validated.\nThis should only set to C(no) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "base64",
        "hashlib"
      ],
      "short_description": "Manage FreeIPA users"
    },
    "examples": "\n- name: Ensure pinky is present and always reset password\n  community.general.ipa_user:\n    name: pinky\n    state: present\n    krbpasswordexpiration: 20200119235959\n    givenname: Pinky\n    sn: Acme\n    mail:\n    - pinky@acme.com\n    telephonenumber:\n    - '+555123456'\n    sshpubkey:\n    - ssh-rsa ....\n    - ssh-dsa ....\n    uidnumber: '1001'\n    gidnumber: '100'\n    homedirectory: /home/pinky\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure brain is absent\n  community.general.ipa_user:\n    name: brain\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure pinky is present but don't reset password if already exists\n  community.general.ipa_user:\n    name: pinky\n    state: present\n    givenname: Pinky\n    sn: Acme\n    password: zounds\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    update_password: on_create\n\n- name: Ensure pinky is present and using one time password and RADIUS authentication\n  community.general.ipa_user:\n    name: pinky\n    state: present\n    userauthtype:\n      - otp\n      - radius\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipa_vault": {
    "doc": {
      "description": "Add, modify and delete vaults and secret vaults.\nKRA service should be enabled to use this module.",
      "has_action": false,
      "options": {
        "cn": {
          "aliases": [
            "name"
          ],
          "description": "Vault name.\nCan not be changed as it is the unique identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_host": {
          "aliases": [],
          "description": "IP or hostname of IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.\nIf both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.\nThe relevant entry needed in FreeIPA is the 'ipa-ca' entry.\nIf neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "ipa.example.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_pass": {
          "aliases": [],
          "description": "Password of administrative user.\nIf the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.\nNote that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.\nIf the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.\nIf the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.\nIf GSSAPI is not available, the usage of 'ipa_pass' is required.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipa_port": {
          "aliases": [],
          "description": "Port of FreeIPA / IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.\nIf both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_prot": {
          "aliases": [],
          "description": "Protocol used by IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.\nIf both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "ipa_timeout": {
          "aliases": [],
          "description": "Specifies idle timeout (in seconds) for the connection.\nFor bulk operations, you may want to increase this in order to avoid timeout from IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.\nIf both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipa_user": {
          "aliases": [],
          "description": "Administrative account used on IPA server.\nIf the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.\nIf both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.\nEnvironment variable fallback mechanism is added in Ansible 2.5.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipavaultpublickey": {
          "aliases": [
            "vault_public_key"
          ],
          "description": "Public key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipavaultsalt": {
          "aliases": [
            "vault_salt"
          ],
          "description": "Vault Salt.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipavaulttype": {
          "aliases": [
            "vault_type"
          ],
          "description": "Vault types are based on security level.",
          "default": "symmetric",
          "type": "str",
          "required": false,
          "choices": [
            "asymmetric",
            "standard",
            "symmetric"
          ],
          "suboptions": {}
        },
        "replace": {
          "aliases": [],
          "description": "Force replace the existant vault on IPA server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "choices": [
            "True",
            "False"
          ],
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "Any service can own one or more service vaults.\nMutually exclusive with user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State to ensure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "user"
          ],
          "description": "Any user can own one or more user vaults.\nMutually exclusive with service.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate IPA server certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeIPA vaults"
    },
    "examples": "\n- name: Ensure vault is present\n  community.general.ipa_vault:\n    name: vault01\n    vault_type: standard\n    user: user01\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    validate_certs: false\n\n- name: Ensure vault is present for Admin user\n  community.general.ipa_vault:\n    name: vault01\n    vault_type: standard\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure vault is absent\n  community.general.ipa_vault:\n    name: vault01\n    vault_type: standard\n    user: user01\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Modify vault if already exists\n  community.general.ipa_vault:\n    name: vault01\n    vault_type: standard\n    description: \"Vault for test\"\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    replace: True\n\n- name: Get vault info if already exists\n  community.general.ipa_vault:\n    name: vault01\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n"
  },
  "community.general.ipify_facts": {
    "doc": {
      "description": "If behind NAT and need to know the public IP of your internet gateway.",
      "has_action": false,
      "notes": "Visit https://www.ipify.org to get more information.",
      "options": {
        "api_url": {
          "aliases": [],
          "description": "URL of the ipify.org API service.\nC(?format=json) will be appended per default.",
          "default": "https://api.ipify.org/",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "HTTP connection timeout in seconds.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "When set to C(NO), SSL certificates will not be validated.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Retrieve the public IP of your internet gateway"
    },
    "examples": "\n# Gather IP facts from ipify.org\n- name: Get my public IP\n  community.general.ipify_facts:\n\n# Gather IP facts from your own ipify service endpoint with a custom timeout\n- name: Get my public IP\n  community.general.ipify_facts:\n    api_url: http://api.example.com/ipify\n    timeout: 20\n"
  },
  "community.general.ipinfoio_facts": {
    "doc": {
      "description": "Gather IP geolocation facts of a host's IP address using ipinfo.io API",
      "has_action": false,
      "notes": "Check http://ipinfo.io/ for more information",
      "options": {
        "http_agent": {
          "aliases": [],
          "description": "Set http user agent",
          "default": "ansible-ipinfoio-module/0.0.1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "HTTP connection timeout in seconds",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Retrieve IP geolocation facts of a host's IP address"
    },
    "examples": "\n# Retrieve geolocation data of a host's IP address\n- name: Get IP geolocation data\n  community.general.ipinfoio_facts:\n"
  },
  "community.general.ipmi_boot": {
    "doc": {
      "description": "Use this module to manage order of boot devices",
      "has_action": false,
      "options": {
        "bootdev": {
          "aliases": [],
          "description": "Set boot device to use on next reboot\nThe choices for the device are: - network -- Request network boot - floppy -- Boot from floppy - hd -- Boot from hard drive - safe -- Boot from hard drive, requesting 'safe mode' - optical -- boot from CD/DVD/BD drive - setup -- Boot into setup utility - default -- remove any IPMI directed boot device request",
          "type": "str",
          "required": true,
          "choices": [
            "network",
            "floppy",
            "hd",
            "safe",
            "optical",
            "setup",
            "default"
          ],
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Encryption key to connect to the BMC in hex format.",
          "type": "str",
          "required": false,
          "version_added": "4.1.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Hostname or ip address of the BMC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to connect to the BMC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "persistent": {
          "aliases": [],
          "description": "If set, ask that system firmware uses this device beyond next boot. Be aware many systems do not honor this.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Remote RMCP port.",
          "default": "623",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to ensure that boot devices is desired.\nThe choices for the state are: - present -- Request system turn on - absent -- Request system turn on",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "uefiboot": {
          "aliases": [],
          "description": "If set, request UEFI boot explicitly. Strictly speaking, the spec suggests that if not set, the system should BIOS boot and offers no \"don't care\" option. In practice, this flag not being set does not preclude UEFI boot on any system I've encountered.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Username to use to connect to the BMC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyghmi"
      ],
      "short_description": "Management of order of boot devices"
    },
    "examples": "\n- name: Ensure bootdevice is HD\n  community.general.ipmi_boot:\n    name: test.testdomain.com\n    user: admin\n    password: password\n    bootdev: hd\n\n- name: Ensure bootdevice is not Network\n  community.general.ipmi_boot:\n    name: test.testdomain.com\n    user: admin\n    password: password\n    key: 1234567890AABBCCDEFF000000EEEE12\n    bootdev: network\n    state: absent\n"
  },
  "community.general.ipmi_power": {
    "doc": {
      "description": "Use this module for power management",
      "has_action": false,
      "options": {
        "key": {
          "aliases": [],
          "description": "Encryption key to connect to the BMC in hex format.",
          "type": "str",
          "required": false,
          "version_added": "4.1.0",
          "suboptions": {}
        },
        "machine": {
          "aliases": [],
          "description": "Provide a list of the remote target address for the bridge IPMI request, and the power status.\nEither this option or I(state) is required.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "4.3.0",
          "suboptions": {
            "state": {
              "aliases": [],
              "description": "Whether to ensure that the machine specified by I(targetAddress) in desired state.\nIf this option is not set, the power state is set by I(state).\nIf both this option and I(state) are set, this option takes precedence over I(state).",
              "type": "str",
              "required": false,
              "choices": [
                "on",
                "off",
                "shutdown",
                "reset",
                "boot"
              ],
              "suboptions": {}
            },
            "targetAddress": {
              "aliases": [],
              "description": "Remote target address for the bridge IPMI request.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Hostname or ip address of the BMC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to connect to the BMC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Remote RMCP port.",
          "default": "623",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to ensure that the machine in desired state.\nThe choices for state are: - on -- Request system turn on - off -- Request system turn off without waiting for OS to shutdown - shutdown -- Have system request OS proper shutdown - reset -- Request system reset without waiting for OS - boot -- If system is off, then 'on', else 'reset'\nEither this option or I(machine) is required.",
          "type": "str",
          "required": false,
          "choices": [
            "on",
            "off",
            "shutdown",
            "reset",
            "boot"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum number of seconds before interrupt request.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Username to use to connect to the BMC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyghmi"
      ],
      "short_description": "Power management for machine"
    },
    "examples": "\n- name: Ensure machine is powered on\n  community.general.ipmi_power:\n    name: test.testdomain.com\n    user: admin\n    password: password\n    state: on\n\n- name: Ensure machines of which remote target address is 48 and 50 are powered off\n  community.general.ipmi_power:\n    name: test.testdomain.com\n    user: admin\n    password: password\n    state: off\n    machine:\n      - targetAddress: 48\n      - targetAddress: 50\n\n- name: Ensure machine of which remote target address is 48 is powered on, and 50 is powered off\n  community.general.ipmi_power:\n    name: test.testdomain.com\n    user: admin\n    password: password\n    machine:\n      - targetAddress: 48\n        state: on\n      - targetAddress: 50\n        state: off\n"
  },
  "community.general.iptables_state": {
    "doc": {
      "description": "C(iptables) is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel.\nThis module handles the saving and/or loading of rules. This is the same as the behaviour of the C(iptables-save) and C(iptables-restore) (or C(ip6tables-save) and C(ip6tables-restore) for IPv6) commands which this module uses internally.\nModifying the state of the firewall remotely may lead to loose access to the host in case of mistake in new ruleset. This module embeds a rollback feature to avoid this, by telling the host to restore previous rules if a cookie is still there after a given delay, and all this time telling the controller to try to remove this cookie on the host through a new connection.",
      "has_action": true,
      "notes": "The rollback feature is not a module option and depends on task's attributes. To enable it, the module must be played asynchronously, i.e. by setting task attributes I(poll) to C(0), and I(async) to a value less or equal to C(ANSIBLE_TIMEOUT). If I(async) is greater, the rollback will still happen if it shall happen, but you will experience a connection timeout instead of more relevant info returned by the module after its failure.\nThis module supports I(check_mode).",
      "options": {
        "counters": {
          "aliases": [],
          "description": "Save or restore the values of all packet and byte counters.\nWhen C(true), the module is not idempotent.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ip_version": {
          "aliases": [],
          "description": "Which version of the IP protocol this module should apply to.",
          "default": "ipv4",
          "type": "str",
          "required": false,
          "choices": [
            "ipv4",
            "ipv6"
          ],
          "suboptions": {}
        },
        "modprobe": {
          "aliases": [],
          "description": "Specify the path to the C(modprobe) program internally used by iptables related commands to load kernel modules.\nBy default, C(/proc/sys/kernel/modprobe) is inspected to determine the executable's path.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "noflush": {
          "aliases": [],
          "description": "For I(state=restored), ignored otherwise.\nIf C(false), restoring iptables rules from a file flushes (deletes) all previous contents of the respective table(s). If C(true), the previous rules are left untouched (but policies are updated anyway, for all built-in chains).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The file the iptables state should be saved to.\nThe file the iptables state should be restored from.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the firewall state should be saved (into a file) or restored (from a file).",
          "type": "str",
          "required": true,
          "choices": [
            "saved",
            "restored"
          ],
          "suboptions": {}
        },
        "table": {
          "aliases": [],
          "description": "When I(state=restored), restore only the named table even if the input file contains other tables. Fail if the named table is not declared in the file.\nWhen I(state=saved), restrict output to the specified table. If not specified, output includes all active tables.",
          "type": "str",
          "required": false,
          "choices": [
            "filter",
            "nat",
            "mangle",
            "raw",
            "security"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait N seconds for the xtables lock to prevent instant failure in case multiple instances of the program are running concurrently.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "iptables",
        "ip6tables"
      ],
      "short_description": "Save iptables state into a file or restore it from a file",
      "version_added": "1.1.0"
    },
    "examples": "\n# This will apply to all loaded/active IPv4 tables.\n- name: Save current state of the firewall in system file\n  community.general.iptables_state:\n    state: saved\n    path: /etc/sysconfig/iptables\n\n# This will apply only to IPv6 filter table.\n- name: save current state of the firewall in system file\n  community.general.iptables_state:\n    ip_version: ipv6\n    table: filter\n    state: saved\n    path: /etc/iptables/rules.v6\n\n# This will load a state from a file, with a rollback in case of access loss\n- name: restore firewall state from a file\n  community.general.iptables_state:\n    state: restored\n    path: /run/iptables.apply\n  async: \"{{ ansible_timeout }}\"\n  poll: 0\n\n# This will load new rules by appending them to the current ones\n- name: restore firewall state from a file\n  community.general.iptables_state:\n    state: restored\n    path: /run/iptables.apply\n    noflush: true\n  async: \"{{ ansible_timeout }}\"\n  poll: 0\n\n# This will only retrieve information\n- name: get current state of the firewall\n  community.general.iptables_state:\n    state: saved\n    path: /tmp/iptables\n  check_mode: yes\n  changed_when: false\n  register: iptables_state\n\n- name: show current state of the firewall\n  ansible.builtin.debug:\n    var: iptables_state.initial_state\n"
  },
  "community.general.ipwcli_dns": {
    "doc": {
      "description": "Manage DNS records for the Ericsson IPWorks DNS server. The module will use the ipwcli to deploy the DNS records.",
      "has_action": false,
      "notes": "To make the DNS record changes effective, you need to run C(update dnsserver) on the ipwcli.",
      "options": {
        "address": {
          "aliases": [],
          "description": "The IP address for the A or AAAA record.\nRequired for C(type=A) or C(type=AAAA)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "Sets the container zone for the record.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dnsname": {
          "aliases": [],
          "description": "Name of the record.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "flags": {
          "aliases": [],
          "description": "Sets one of the possible flags of NAPTR record.\nRequired for C(type=NAPTR)",
          "type": "str",
          "required": false,
          "choices": [
            "S",
            "A",
            "U",
            "P"
          ],
          "suboptions": {}
        },
        "order": {
          "aliases": [],
          "description": "Sets the order of the NAPTR record.\nRequired for C(type=NAPTR)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to login on ipwcli.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Sets the port of the SRV record.\nRequired for C(type=SRV)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "preference": {
          "aliases": [],
          "description": "Sets the preference of the NAPTR record.\nRequired for C(type=NAPTR)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Sets the priority of the SRV record.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "replacement": {
          "aliases": [],
          "description": "Sets the replacement of the NAPTR record.\nRequired for C(type=NAPTR)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "Sets the service of the NAPTR record.\nRequired for C(type=NAPTR)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the record should exist or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "Sets the target of the SRV record.\nRequired for C(type=SRV)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Sets the TTL of the record.",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of the record.",
          "type": "str",
          "required": true,
          "choices": [
            "NAPTR",
            "SRV",
            "A",
            "AAAA"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username to login on ipwcli.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "Sets the weight of the SRV record.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ipwcli (installed on Ericsson IPWorks)"
      ],
      "short_description": "Manage DNS Records for Ericsson IPWorks via ipwcli",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Create A record\n  community.general.ipwcli_dns:\n    dnsname: example.com\n    type: A\n    container: ZoneOne\n    address: 127.0.0.1\n\n- name: Remove SRV record if exists\n  community.general.ipwcli_dns:\n    dnsname: _sip._tcp.test.example.com\n    type: SRV\n    container: ZoneOne\n    ttl: 100\n    state: absent\n    target: example.com\n    port: 5060\n\n- name: Create NAPTR record\n  community.general.ipwcli_dns:\n    dnsname: test.example.com\n    type: NAPTR\n    preference: 10\n    container: ZoneOne\n    ttl: 100\n    order: 10\n    service: 'SIP+D2T'\n    replacement: '_sip._tcp.test.example.com.'\n    flags: S\n"
  },
  "community.general.irc": {
    "doc": {
      "description": "Send a message to an IRC channel or a nick. This is a very simplistic implementation.",
      "has_action": false,
      "options": {
        "channel": {
          "aliases": [],
          "description": "Channel name.  One of nick_to or channel needs to be set.  When both are set, the message will be sent to both of them.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "color": {
          "aliases": [
            "colour"
          ],
          "description": "Text color for the message. (\"none\" is a valid option in 1.6 or later, in 1.6 and prior, the default color is black, not \"none\"). Added 11 more colors in version 2.0.",
          "default": "none",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "white",
            "black",
            "blue",
            "green",
            "red",
            "brown",
            "purple",
            "orange",
            "yellow",
            "light_green",
            "teal",
            "light_cyan",
            "light_blue",
            "pink",
            "gray",
            "light_gray"
          ],
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Channel key",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The message body.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nick": {
          "aliases": [],
          "description": "Nickname to send the message from. May be shortened, depending on server's NICKLEN setting.",
          "default": "ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nick_to": {
          "aliases": [],
          "description": "A list of nicknames to send the message to. One of nick_to or channel needs to be set.  When both are defined, the message will be sent to both of them.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "part": {
          "aliases": [],
          "description": "Designates whether user should part from channel after sending message or not. Useful for when using a faux bot and not wanting join/parts between messages.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "passwd": {
          "aliases": [],
          "description": "Server password",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "IRC server port number",
          "default": "6667",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "IRC server name/address",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "style": {
          "aliases": [],
          "description": "Text style for the message. Note italic does not work on some clients",
          "default": "none",
          "type": "str",
          "required": false,
          "choices": [
            "bold",
            "underline",
            "reverse",
            "italic",
            "none"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout to use while waiting for successful registration and join messages, this is to prevent an endless loop",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "topic": {
          "aliases": [],
          "description": "Set the channel topic",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssl": {
          "aliases": [],
          "description": "Designates whether TLS/SSL should be used when connecting to the IRC server",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "socket"
      ],
      "short_description": "Send a message to an IRC channel or a nick"
    },
    "examples": "\n- name: Send a message to an IRC channel from nick ansible\n  community.general.irc:\n    server: irc.example.net\n    channel: #t1\n    msg: Hello world\n\n- name: Send a message to an IRC channel\n  local_action:\n    module: irc\n    port: 6669\n    server: irc.example.net\n    channel: #t1\n    msg: 'All finished at {{ ansible_date_time.iso8601 }}'\n    color: red\n    nick: ansibleIRC\n\n- name: Send a message to an IRC channel\n  local_action:\n    module: irc\n    port: 6669\n    server: irc.example.net\n    channel: #t1\n    nick_to:\n      - nick1\n      - nick2\n    msg: 'All finished at {{ ansible_date_time.iso8601 }}'\n    color: red\n    nick: ansibleIRC\n"
  },
  "community.general.iso_create": {
    "doc": {
      "description": "This module is used to generate ISO file with specified path of files.",
      "has_action": false,
      "options": {
        "dest_iso": {
          "aliases": [],
          "description": "The absolute path with file name of the new generated ISO file on local machine.\nWill create intermediate folders when they does not exist.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "interchange_level": {
          "aliases": [],
          "description": "The ISO9660 interchange level to use, it dictates the rules on the names of files.\nLevels and valid values C(1), C(2), C(3), C(4) are supported.\nThe default value is level C(1), which is the most conservative, level C(3) is recommended.\nISO9660 file names at interchange level C(1) cannot have more than 8 characters or 3 characters in the extension.",
          "default": "1",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "2",
            "3",
            "4"
          ],
          "suboptions": {}
        },
        "joliet": {
          "aliases": [],
          "description": "Support levels and valid values are C(1), C(2), or C(3).\nLevel C(3) is by far the most common.\nIf not specified, then no Joliet support is added.",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "2",
            "3"
          ],
          "suboptions": {}
        },
        "rock_ridge": {
          "aliases": [],
          "description": "Whether to make this ISO have the Rock Ridge extensions or not.\nValid values are C(1.09), C(1.10) or C(1.12), means adding the specified Rock Ridge version to the ISO.\nIf unsure, set C(1.09) to ensure maximum compatibility.\nIf not specified, then not add Rock Ridge extension to the ISO.",
          "type": "str",
          "required": false,
          "choices": [
            "1.09",
            "1.10",
            "1.12"
          ],
          "suboptions": {}
        },
        "src_files": {
          "aliases": [],
          "description": "This is a list of absolute paths of source files or folders which will be contained in the new generated ISO file.\nWill fail if specified file or folder in C(src_files) does not exist on local machine.\nNote: With all ISO9660 levels from 1 to 3, all file names are restricted to uppercase letters, numbers and underscores (_). File names are limited to 31 characters, directory nesting is limited to 8 levels, and path names are limited to 255 characters.",
          "type": "list",
          "required": true,
          "elements": "path",
          "suboptions": {}
        },
        "udf": {
          "aliases": [],
          "description": "Whether to add UDF support to this ISO.\nIf set to C(True), then version 2.60 of the UDF spec is used.\nIf not specified or set to C(False), then no UDF support is added.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vol_ident": {
          "aliases": [],
          "description": "The volume identification string to use on the new generated ISO image.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pycdlib",
        "python >= 2.7"
      ],
      "short_description": "Generate ISO file with specified files or folders",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Create an ISO file\n  community.general.iso_create:\n    src_files:\n      - /root/testfile.yml\n      - /root/testfolder\n    dest_iso: /tmp/test.iso\n    interchange_level: 3\n\n- name: Create an ISO file with Rock Ridge extension\n  community.general.iso_create:\n    src_files:\n      - /root/testfile.yml\n      - /root/testfolder\n    dest_iso: /tmp/test.iso\n    rock_ridge: 1.09\n\n- name: Create an ISO file with Joliet support\n  community.general.iso_create:\n    src_files:\n      - ./windows_config/Autounattend.xml\n    dest_iso: ./test.iso\n    interchange_level: 3\n    joliet: 3\n    vol_ident: WIN_AUTOINSTALL\n"
  },
  "community.general.iso_extract": {
    "doc": {
      "description": "This module has two possible ways of operation.\nIf 7zip is installed on the system, this module extracts files from an ISO into a temporary directory and copies files to a given destination, if needed.\nIf the user has mount-capabilities (CAP_SYS_ADMIN on Linux) this module mounts the ISO image to a temporary location, and copies files to a given destination, if needed.",
      "has_action": false,
      "notes": "Only the file checksum (content) is taken into account when extracting files from the ISO image. If C(force=no), only checks the presence of the file.\nIn Ansible 2.3 this module was using C(mount) and C(umount) commands only, requiring root access. This is no longer needed with the introduction of 7zip for extraction.",
      "options": {
        "dest": {
          "aliases": [],
          "description": "The destination directory to extract files to.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "The path to the C(7z) executable to use for extracting files from the ISO.\nIf not provided, it will assume the value C(7z).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "files": {
          "aliases": [],
          "description": "A list of files to extract from the image.\nExtracting directories does not work.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If C(yes), which will replace the remote file when contents are different than the source.\nIf C(no), the file will only be extracted and copied if the destination does not already exist.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [
            "path",
            "src"
          ],
          "description": "The ISO image to extract files from.",
          "type": "path",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "Either 7z (from I(7zip) or I(p7zip) package)",
        "Or mount capabilities (root-access, or CAP_SYS_ADMIN capability on Linux)"
      ],
      "short_description": "Extract files from an ISO image"
    },
    "examples": "\n- name: Extract kernel and ramdisk from a LiveCD\n  community.general.iso_extract:\n    image: /tmp/rear-test.iso\n    dest: /tmp/virt-rear/\n    files:\n    - isolinux/kernel\n    - isolinux/initrd.cgz\n"
  },
  "community.general.jabber": {
    "doc": {
      "description": "Send a message to jabber",
      "has_action": false,
      "options": {
        "encoding": {
          "aliases": [],
          "description": "message encoding",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "host to connect, overrides user info",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The message body.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "password for user to connect",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "port to connect to, overrides default",
          "default": "5222",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "to": {
          "aliases": [],
          "description": "user ID or name of the room, when using room use a slash to indicate your nick.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User as which to connect",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python xmpp (xmpppy)"
      ],
      "short_description": "Send a message to jabber user or chat room"
    },
    "examples": "\n- name: Send a message to a user\n  community.general.jabber:\n    user: mybot@example.net\n    password: secret\n    to: friend@example.net\n    msg: Ansible task finished\n\n- name: Send a message to a room\n  community.general.jabber:\n    user: mybot@example.net\n    password: secret\n    to: mychaps@conference.example.net/ansiblebot\n    msg: Ansible task finished\n\n- name: Send a message, specifying the host and port\n  community.general.jabber:\n    user: mybot@example.net\n    host: talk.example.net\n    port: 5223\n    password: secret\n    to: mychaps@example.net\n    msg: Ansible task finished\n"
  },
  "community.general.java_cert": {
    "doc": {
      "description": "This is a wrapper module around keytool, which can be used to import certificates and optionally private keys to a given java keystore, or remove them from it.",
      "has_action": false,
      "options": {
        "cert_alias": {
          "aliases": [],
          "description": "Imported certificate alias.\nThe alias is used when checking for the presence of a certificate in the keystore.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cert_path": {
          "aliases": [],
          "description": "Local path to load certificate from.\nExactly one of C(cert_url), C(cert_path) or C(pkcs12_path) is required to load certificate.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "cert_port": {
          "aliases": [],
          "description": "Port to connect to URL.\nThis will be used to create server URL:PORT.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cert_url": {
          "aliases": [],
          "description": "Basic URL to fetch SSL certificate from.\nExactly one of C(cert_url), C(cert_path) or C(pkcs12_path) is required to load certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "Path to keytool binary if not used we search in PATH for it.",
          "default": "keytool",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keystore_create": {
          "aliases": [],
          "description": "Create keystore if it does not exist.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "keystore_pass": {
          "aliases": [],
          "description": "Keystore password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "keystore_path": {
          "aliases": [],
          "description": "Path to keystore.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "keystore_type": {
          "aliases": [],
          "description": "Keystore type (JCEKS, JKS).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pkcs12_alias": {
          "aliases": [],
          "description": "Alias in the PKCS12 keystore.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pkcs12_password": {
          "aliases": [],
          "description": "Password for importing from PKCS12 keystore.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pkcs12_path": {
          "aliases": [],
          "description": "Local path to load PKCS12 keystore from.\nUnlike C(cert_url) and C(cert_path), the PKCS12 keystore embeds the private key matching the certificate, and is used to import both the certificate and its private key into the java keystore.\nExactly one of C(cert_url), C(cert_path) or C(pkcs12_path) is required to load certificate.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Defines action which can be either certificate import or removal.\nWhen state is present, the certificate will always idempotently be inserted into the keystore, even if there already exists a cert alias that is different.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "trust_cacert": {
          "aliases": [],
          "description": "Trust imported cert as CAcert.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "openssl",
        "keytool"
      ],
      "short_description": "Uses keytool to import/remove certificate to/from java keystore (cacerts)"
    },
    "examples": "\n- name: Import SSL certificate from google.com to a given cacerts keystore\n  community.general.java_cert:\n    cert_url: google.com\n    cert_port: 443\n    keystore_path: /usr/lib/jvm/jre7/lib/security/cacerts\n    keystore_pass: changeit\n    state: present\n\n- name: Remove certificate with given alias from a keystore\n  community.general.java_cert:\n    cert_url: google.com\n    keystore_path: /usr/lib/jvm/jre7/lib/security/cacerts\n    keystore_pass: changeit\n    executable: /usr/lib/jvm/jre7/bin/keytool\n    state: absent\n\n- name: Import trusted CA from SSL certificate\n  community.general.java_cert:\n    cert_path: /opt/certs/rootca.crt\n    keystore_path: /tmp/cacerts\n    keystore_pass: changeit\n    keystore_create: yes\n    state: present\n    cert_alias: LE_RootCA\n    trust_cacert: True\n\n- name: Import SSL certificate from google.com to a keystore, create it if it doesn't exist\n  community.general.java_cert:\n    cert_url: google.com\n    keystore_path: /tmp/cacerts\n    keystore_pass: changeit\n    keystore_create: yes\n    state: present\n\n- name: Import a pkcs12 keystore with a specified alias, create it if it doesn't exist\n  community.general.java_cert:\n    pkcs12_path: \"/tmp/importkeystore.p12\"\n    cert_alias: default\n    keystore_path: /opt/wildfly/standalone/configuration/defaultkeystore.jks\n    keystore_pass: changeit\n    keystore_create: yes\n    state: present\n\n- name: Import SSL certificate to JCEKS keystore\n  community.general.java_cert:\n    pkcs12_path: \"/tmp/importkeystore.p12\"\n    pkcs12_alias: default\n    pkcs12_password: somepass\n    cert_alias: default\n    keystore_path: /opt/someapp/security/keystore.jceks\n    keystore_type: \"JCEKS\"\n    keystore_pass: changeit\n    keystore_create: yes\n    state: present\n"
  },
  "community.general.java_keystore": {
    "doc": {
      "description": "Bundle a x509 certificate and its private key into a Java Keystore in JKS format.",
      "has_action": false,
      "notes": "I(certificate) and I(private_key) require that their contents are available on the controller (either inline in a playbook, or with the C(file) lookup), while I(certificate_path) and I(private_key_path) require that the files are available on the target host.\nBy design, any change of a value of options I(keystore_type), I(name) or I(password), as well as changes of key or certificate materials will cause the existing I(dest) to be overwritten.",
      "options": {
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "certificate": {
          "aliases": [],
          "description": "Content of the certificate used to create the keystore.\nIf the fingerprint of the provided certificate does not match the fingerprint of the certificate bundled in the keystore, the keystore is regenerated with the provided certificate.\nExactly one of I(certificate) or I(certificate_path) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "certificate_path": {
          "aliases": [],
          "description": "Location of the certificate used to create the keystore.\nIf the fingerprint of the provided certificate does not match the fingerprint of the certificate bundled in the keystore, the keystore is regenerated with the provided certificate.\nExactly one of I(certificate) or I(certificate_path) is required.",
          "type": "path",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Absolute path of the generated keystore.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Keystore is created even if it already exists.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own jks file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keystore_type": {
          "aliases": [],
          "description": "Type of the Java keystore.\nWhen this option is omitted and the keystore doesn't already exist, the behavior follows C(keytool)'s default store type which depends on Java version; C(pkcs12) since Java 9 and C(jks) prior (may also be C(pkcs12) if new default has been backported to this version).\nWhen this option is omitted and the keystore already exists, the current type is left untouched, unless another option leads to overwrite the keystore (in that case, this option behaves like for keystore creation).\nWhen I(keystore_type) is set, the keystore is created with this type if it doesn't already exist, or is overwritten to match the given type in case of mismatch.",
          "type": "str",
          "required": false,
          "choices": [
            "jks",
            "pkcs12"
          ],
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode the file should be.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the certificate in the keystore.\nIf the provided name does not exist in the keystore, the module will re-create the keystore. This behavior changed in community.general 3.0.0, before that the module would fail when the name did not match.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own jks file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password that should be used to secure the keystore.\nIf the provided password fails to unlock the keystore, the module will re-create the keystore with the new passphrase. This behavior changed in community.general 3.0.0, before that the module would fail when the password did not match.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "private_key": {
          "aliases": [],
          "description": "Content of the private key used to create the keystore.\nExactly one of I(private_key) or I(private_key_path) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "private_key_passphrase": {
          "aliases": [],
          "description": "Passphrase used to read the private key, if required.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "private_key_path": {
          "aliases": [],
          "description": "Location of the private key used to create the keystore.\nExactly one of I(private_key) or I(private_key_path) is required.",
          "type": "path",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_backend": {
          "aliases": [],
          "description": "Backend for loading private keys and certificates.",
          "default": "openssl",
          "type": "str",
          "required": false,
          "choices": [
            "openssl",
            "cryptography"
          ],
          "version_added": "3.1.0",
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        }
      },
      "requirements": [
        "openssl in PATH (when I(ssl_backend=openssl))",
        "keytool in PATH",
        "cryptography >= 3.0 (when I(ssl_backend=cryptography))"
      ],
      "short_description": "Create a Java keystore in JKS format"
    },
    "examples": "\n- name: Create a keystore for the given certificate/private key pair (inline)\n  community.general.java_keystore:\n    name: example\n    certificate: |\n      -----BEGIN CERTIFICATE-----\n      h19dUZ2co2fI/ibYiwxWk4aeNE6KWvCaTQOMQ8t6Uo2XKhpL/xnjoAgh1uCQN/69\n      MG+34+RhUWzCfdZH7T8/qDxJw2kEPKluaYh7KnMsba+5jHjmtzix5QIDAQABo4IB\n      -----END CERTIFICATE-----\n    private_key: |\n      -----BEGIN RSA PRIVATE KEY-----\n      DBVFTEVDVFJJQ0lURSBERSBGUkFOQ0UxFzAVBgNVBAsMDjAwMDIgNTUyMDgxMzE3\n      GLlDNMw/uHyME7gHFsqJA7O11VY6O5WQ4IDP3m/s5ZV6s+Nn6Lerz17VZ99\n      -----END RSA PRIVATE KEY-----\n    password: changeit\n    dest: /etc/security/keystore.jks\n\n- name: Create a keystore for the given certificate/private key pair (with files on controller)\n  community.general.java_keystore:\n    name: example\n    certificate: \"{{ lookup('file', '/path/to/certificate.crt') }}\"\n    private_key: \"{{ lookup('file', '/path/to/private.key') }}\"\n    password: changeit\n    dest: /etc/security/keystore.jks\n\n- name: Create a keystore for the given certificate/private key pair (with files on target host)\n  community.general.java_keystore:\n    name: snakeoil\n    certificate_path: /etc/ssl/certs/ssl-cert-snakeoil.pem\n    private_key_path: /etc/ssl/private/ssl-cert-snakeoil.key\n    password: changeit\n    dest: /etc/security/keystore.jks\n"
  },
  "community.general.jboss": {
    "doc": {
      "description": "Deploy applications to JBoss standalone using the filesystem.",
      "has_action": false,
      "notes": "The JBoss standalone deployment-scanner has to be enabled in standalone.xml\nThe module can wait until I(deployment) file is deployed/undeployed by deployment-scanner. Duration of waiting time depends on scan-interval parameter from standalone.xml.\nEnsure no identically named application is deployed through the JBoss CLI",
      "options": {
        "deploy_path": {
          "aliases": [],
          "description": "The location in the filesystem where the deployment scanner listens.",
          "default": "/var/lib/jbossas/standalone/deployments",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "deployment": {
          "aliases": [],
          "description": "The name of the deployment.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "The remote path of the application ear or war to deploy.\nRequired when I(state=present).\nIgnored when I(state=absent).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the application should be deployed or undeployed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Deploy applications to JBoss"
    },
    "examples": "\n- name: Deploy a hello world application to the default deploy_path\n  community.general.jboss:\n    src: /tmp/hello-1.0-SNAPSHOT.war\n    deployment: hello.war\n    state: present\n\n- name: Update the hello world application to the non-default deploy_path\n  community.general.jboss:\n    src: /tmp/hello-1.1-SNAPSHOT.war\n    deploy_path: /opt/wildfly/deployment\n    deployment: hello.war\n    state: present\n\n- name: Undeploy the hello world application from the default deploy_path\n  community.general.jboss:\n    deployment: hello.war\n    state: absent\n"
  },
  "community.general.jenkins_build": {
    "doc": {
      "description": "Manage Jenkins builds with Jenkins REST API.",
      "has_action": false,
      "options": {
        "args": {
          "aliases": [],
          "description": "A list of parameters to pass to the build.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "build_number": {
          "aliases": [],
          "description": "An integer which specifies a build of a job. Is required to remove a build from the queue.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Jenkins job to build.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to authenticate with the Jenkins server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Attribute that specifies if the build is to be created, deleted or stopped.\nThe C(stopped) state has been added in community.general 3.3.0.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "stopped"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token used to authenticate with the Jenkins server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL of the Jenkins server.",
          "default": "http://localhost:8080",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User to authenticate with the Jenkins server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-jenkins >= 0.4.12"
      ],
      "short_description": "Manage jenkins builds",
      "version_added": "2.2.0"
    },
    "examples": "\n- name: Create a jenkins build using basic authentication\n  community.general.jenkins_build:\n    name: \"test-check\"\n    args:\n      cloud: \"test\"\n      availability_zone: \"test_az\"\n    state: present\n    user: admin\n    password: asdfg\n    url: http://localhost:8080\n\n- name: Stop a running jenkins build anonymously\n  community.general.jenkins_build:\n    name: \"stop-check\"\n    build_number: 3\n    state: stopped\n    url: http://localhost:8080\n\n- name: Delete a jenkins build using token authentication\n  community.general.jenkins_build:\n    name: \"delete-experiment\"\n    build_number: 30\n    state: absent\n    user: Jenkins\n    token: abcdefghijklmnopqrstuvwxyz123456\n    url: http://localhost:8080\n"
  },
  "community.general.jenkins_job": {
    "doc": {
      "description": "Manage Jenkins jobs by using Jenkins REST API.",
      "has_action": false,
      "options": {
        "config": {
          "aliases": [],
          "description": "config in XML format.\nRequired if job does not yet exist.\nMutually exclusive with C(enabled).\nConsidered if C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Whether the job should be enabled or disabled.\nMutually exclusive with C(config).\nConsidered if C(state=present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Jenkins job.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to authenticate with the Jenkins server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Attribute that specifies if the job has to be created or deleted.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token used to authenticate alternatively to password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL where the Jenkins server is accessible.",
          "default": "http://localhost:8080",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User to authenticate with the Jenkins server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), the SSL certificates will not be validated. This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.\nThe C(python-jenkins) library only handles this by using the environment variable C(PYTHONHTTPSVERIFY).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "python-jenkins >= 0.4.12"
      ],
      "short_description": "Manage jenkins jobs"
    },
    "examples": "\n- name: Create a jenkins job using basic authentication\n  community.general.jenkins_job:\n    config: \"{{ lookup('file', 'templates/test.xml') }}\"\n    name: test\n    password: admin\n    url: http://localhost:8080\n    user: admin\n\n- name: Create a jenkins job using the token\n  community.general.jenkins_job:\n    config: \"{{ lookup('template', 'templates/test.xml.j2') }}\"\n    name: test\n    token: asdfasfasfasdfasdfadfasfasdfasdfc\n    url: http://localhost:8080\n    user: admin\n\n- name: Delete a jenkins job using basic authentication\n  community.general.jenkins_job:\n    name: test\n    password: admin\n    state: absent\n    url: http://localhost:8080\n    user: admin\n\n- name: Delete a jenkins job using the token\n  community.general.jenkins_job:\n    name: test\n    token: asdfasfasfasdfasdfadfasfasdfasdfc\n    state: absent\n    url: http://localhost:8080\n    user: admin\n\n- name: Disable a jenkins job using basic authentication\n  community.general.jenkins_job:\n    name: test\n    password: admin\n    enabled: False\n    url: http://localhost:8080\n    user: admin\n\n- name: Disable a jenkins job using the token\n  community.general.jenkins_job:\n    name: test\n    token: asdfasfasfasdfasdfadfasfasdfasdfc\n    enabled: False\n    url: http://localhost:8080\n    user: admin\n"
  },
  "community.general.jenkins_job_info": {
    "doc": {
      "description": "This module can be used to query information about which Jenkins jobs which already exists.\nThis module was called C(jenkins_job_info) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "options": {
        "color": {
          "aliases": [],
          "description": "Only fetch jobs with the given status color.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "glob": {
          "aliases": [],
          "description": "A shell glob of Jenkins job names to fetch information about.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Exact name of the Jenkins job to fetch information about.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to authenticate with the Jenkins server.\nThis is mutually exclusive with I(token).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token used to authenticate with the Jenkins server.\nThis is mutually exclusive with I(password).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL where the Jenkins server is accessible.",
          "default": "http://localhost:8080",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User to authenticate with the Jenkins server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(False), the SSL certificates will not be validated.\nThis should only set to C(False) used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-jenkins >= 0.4.12"
      ],
      "short_description": "Get information about Jenkins jobs"
    },
    "examples": "\n# Get all Jenkins jobs anonymously\n- community.general.jenkins_job_info:\n    user: admin\n  register: my_jenkins_job_info\n\n# Get all Jenkins jobs using basic auth\n- community.general.jenkins_job_info:\n    user: admin\n    password: hunter2\n  register: my_jenkins_job_info\n\n# Get all Jenkins jobs using the token\n- community.general.jenkins_job_info:\n    user: admin\n    token: abcdefghijklmnop\n  register: my_jenkins_job_info\n\n# Get info about a single job using basic auth\n- community.general.jenkins_job_info:\n    name: some-job-name\n    user: admin\n    password: hunter2\n  register: my_jenkins_job_info\n\n# Get info about a single job in a folder using basic auth\n- community.general.jenkins_job_info:\n    name: some-folder-name/some-job-name\n    user: admin\n    password: hunter2\n  register: my_jenkins_job_info\n\n# Get info about jobs matching a shell glob using basic auth\n- community.general.jenkins_job_info:\n    glob: some-job-*\n    user: admin\n    password: hunter2\n  register: my_jenkins_job_info\n\n# Get info about all failing jobs using basic auth\n- community.general.jenkins_job_info:\n    color: red\n    user: admin\n    password: hunter2\n  register: my_jenkins_job_info\n\n# Get info about passing jobs matching a shell glob using basic auth\n- community.general.jenkins_job_info:\n    name: some-job-*\n    color: blue\n    user: admin\n    password: hunter2\n  register: my_jenkins_job_info\n\n- name: Get the info from custom URL with token and validate_certs=False\n  community.general.jenkins_job_info:\n    user: admin\n    token: 126df5c60d66c66e3b75b11104a16a8a\n    url: https://jenkins.example.com\n    validate_certs: False\n  register: my_jenkins_job_info\n"
  },
  "community.general.jenkins_plugin": {
    "doc": {
      "description": "Ansible module which helps to manage Jenkins plugins.",
      "has_action": false,
      "notes": "Plugin installation should be run under root or the same user which owns the plugin files on the disk. Only if the plugin is not installed yet and no version is specified, the API installation is performed which requires only the Web UI credentials.\nIt's necessary to notify the handler or call the I(service) module to restart the Jenkins service after a new plugin was installed.\nPinning works only if the plugin is installed and Jenkins service was successfully restarted after the plugin installation.\nIt is not possible to run the module remotely by changing the I(url) parameter to point to the Jenkins server. The module must be used on the host where Jenkins runs as it needs direct access to the plugin files.",
      "options": {
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the Jenkins group on the OS.",
          "default": "jenkins",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "jenkins_home": {
          "aliases": [],
          "description": "Home directory of the Jenkins user.",
          "default": "/var/lib/jenkins",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "latest_plugins_url_segments": {
          "aliases": [],
          "description": "Path inside the I(updates_url) to get latest plugins from.",
          "default": "['latest']",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "File mode applied on versioned plugins.",
          "default": "0644",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Plugin name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the Jenkins user on the OS.",
          "default": "jenkins",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired plugin state.\nIf the C(latest) is set, the check for new version will be performed every time. This is suitable to keep the plugin up-to-date.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "pinned",
            "unpinned",
            "enabled",
            "disabled",
            "latest"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Server connection timeout in secs.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        },
        "update_json_url_segment": {
          "aliases": [],
          "description": "A list of URL segment(s) to retrieve the update center json file from.",
          "default": "['update-center.json', 'updates/update-center.json']",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "updates_expiration": {
          "aliases": [],
          "description": "Number of seconds after which a new copy of the I(update-center.json) file is downloaded. This is used to avoid the need to download the plugin to calculate its checksum when C(latest) is specified.\nSet it to C(0) if no cache file should be used. In that case, the plugin file will always be downloaded to calculate its checksum when C(latest) is specified.",
          "default": "86400",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "updates_url": {
          "aliases": [],
          "description": "A list of base URL(s) to retrieve I(update-center.json), and direct plugin files from.\nThis can be a list since community.general 3.3.0.",
          "default": "['https://updates.jenkins.io', 'http://mirrors.jenkins.io']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL of the Jenkins server.",
          "default": "http://localhost:8080",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Plugin version number.\nIf this option is specified, all plugin dependencies must be installed manually.\nIt might take longer to verify that the correct version is installed. This is especially true if a specific version number is specified.\nQuote the version to prevent the value to be interpreted as float. For example if C(1.20) would be unquoted, it would become C(1.2).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "versioned_plugins_url_segments": {
          "aliases": [],
          "description": "Path inside the I(updates_url) to get specific version of plugins from.",
          "default": "['download/plugins', 'plugins']",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "with_dependencies": {
          "aliases": [],
          "description": "Defines whether to install plugin dependencies.\nThis option takes effect only if the I(version) is not defined.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Add or remove Jenkins plugin"
    },
    "examples": "\n- name: Install plugin\n  community.general.jenkins_plugin:\n    name: build-pipeline-plugin\n\n- name: Install plugin without its dependencies\n  community.general.jenkins_plugin:\n    name: build-pipeline-plugin\n    with_dependencies: no\n\n- name: Make sure the plugin is always up-to-date\n  community.general.jenkins_plugin:\n    name: token-macro\n    state: latest\n\n- name: Install specific version of the plugin\n  community.general.jenkins_plugin:\n    name: token-macro\n    version: \"1.15\"\n\n- name: Pin the plugin\n  community.general.jenkins_plugin:\n    name: token-macro\n    state: pinned\n\n- name: Unpin the plugin\n  community.general.jenkins_plugin:\n    name: token-macro\n    state: unpinned\n\n- name: Enable the plugin\n  community.general.jenkins_plugin:\n    name: token-macro\n    state: enabled\n\n- name: Disable the plugin\n  community.general.jenkins_plugin:\n    name: token-macro\n    state: disabled\n\n- name: Uninstall plugin\n  community.general.jenkins_plugin:\n    name: build-pipeline-plugin\n    state: absent\n\n#\n# Example of how to authenticate\n#\n- name: Install plugin\n  community.general.jenkins_plugin:\n    name: build-pipeline-plugin\n    url_username: admin\n    url_password: p4ssw0rd\n    url: http://localhost:8888\n\n#\n# Example of a Play which handles Jenkins restarts during the state changes\n#\n- name: Jenkins Master play\n  hosts: jenkins-master\n  vars:\n    my_jenkins_plugins:\n      token-macro:\n        enabled: yes\n      build-pipeline-plugin:\n        version: \"1.4.9\"\n        pinned: no\n        enabled: yes\n  tasks:\n    - name: Install plugins without a specific version\n      community.general.jenkins_plugin:\n        name: \"{{ item.key }}\"\n      register: my_jenkins_plugin_unversioned\n      when: >\n        'version' not in item.value\n      with_dict: \"{{ my_jenkins_plugins }}\"\n\n    - name: Install plugins with a specific version\n      community.general.jenkins_plugin:\n        name: \"{{ item.key }}\"\n        version: \"{{ item.value['version'] }}\"\n      register: my_jenkins_plugin_versioned\n      when: >\n        'version' in item.value\n      with_dict: \"{{ my_jenkins_plugins }}\"\n\n    - name: Initiate the fact\n      ansible.builtin.set_fact:\n        jenkins_restart_required: no\n\n    - name: Check if restart is required by any of the versioned plugins\n      ansible.builtin.set_fact:\n        jenkins_restart_required: yes\n      when: item.changed\n      with_items: \"{{ my_jenkins_plugin_versioned.results }}\"\n\n    - name: Check if restart is required by any of the unversioned plugins\n      ansible.builtin.set_fact:\n        jenkins_restart_required: yes\n      when: item.changed\n      with_items: \"{{ my_jenkins_plugin_unversioned.results }}\"\n\n    - name: Restart Jenkins if required\n      ansible.builtin.service:\n        name: jenkins\n        state: restarted\n      when: jenkins_restart_required\n\n    - name: Wait for Jenkins to start up\n      ansible.builtin.uri:\n        url: http://localhost:8080\n        status_code: 200\n        timeout: 5\n      register: jenkins_service_status\n      # Keep trying for 5 mins in 5 sec intervals\n      retries: 60\n      delay: 5\n      until: >\n         'status' in jenkins_service_status and\n         jenkins_service_status['status'] == 200\n      when: jenkins_restart_required\n\n    - name: Reset the fact\n      ansible.builtin.set_fact:\n        jenkins_restart_required: no\n      when: jenkins_restart_required\n\n    - name: Plugin pinning\n      community.general.jenkins_plugin:\n        name: \"{{ item.key }}\"\n        state: \"{{ 'pinned' if item.value['pinned'] else 'unpinned'}}\"\n      when: >\n        'pinned' in item.value\n      with_dict: \"{{ my_jenkins_plugins }}\"\n\n    - name: Plugin enabling\n      community.general.jenkins_plugin:\n        name: \"{{ item.key }}\"\n        state: \"{{ 'enabled' if item.value['enabled'] else 'disabled'}}\"\n      when: >\n        'enabled' in item.value\n      with_dict: \"{{ my_jenkins_plugins }}\"\n"
  },
  "community.general.jenkins_script": {
    "doc": {
      "description": "The C(jenkins_script) module takes a script plus a dict of values to use within the script and returns the result of the script being run.",
      "has_action": false,
      "notes": "Since the script can do anything this does not report on changes. Knowing the script is being run it's important to set changed_when for the ansible output to be clear on any alterations made.",
      "options": {
        "args": {
          "aliases": [],
          "description": "A dict of key-value pairs used in formatting the script using string.Template (see https://docs.python.org/2/library/string.html#template-strings).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to connect to the jenkins server with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "script": {
          "aliases": [],
          "description": "The groovy script to be executed. This gets passed as a string Template if args is defined.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The request timeout in seconds",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "The jenkins server to execute the script against. The default is a local jenkins instance that is not being proxied through a webserver.",
          "default": "http://localhost:8080",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The username to connect to the jenkins server with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), the SSL certificates will not be validated. This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Executes a groovy script in the jenkins instance"
    },
    "examples": "\n- name: Obtaining a list of plugins\n  community.general.jenkins_script:\n    script: 'println(Jenkins.instance.pluginManager.plugins)'\n    user: admin\n    password: admin\n\n- name: Setting master using a variable to hold a more complicate script\n  ansible.builtin.set_fact:\n    setmaster_mode: |\n        import jenkins.model.*\n        instance = Jenkins.getInstance()\n        instance.setMode(${jenkins_mode})\n        instance.save()\n\n- name: Use the variable as the script\n  community.general.jenkins_script:\n    script: \"{{ setmaster_mode }}\"\n    args:\n      jenkins_mode: Node.Mode.EXCLUSIVE\n\n- name: Interacting with an untrusted HTTPS connection\n  community.general.jenkins_script:\n    script: \"println(Jenkins.instance.pluginManager.plugins)\"\n    user: admin\n    password: admin\n    url: https://localhost\n    validate_certs: no\n"
  },
  "community.general.jira": {
    "doc": {
      "description": "Create and modify issues in a JIRA instance.",
      "has_action": false,
      "notes": "Currently this only works with basic-auth, or tokens.\nTo use with JIRA Cloud, pass the login e-mail as the I(username) and the API token as I(password).",
      "options": {
        "account_id": {
          "aliases": [],
          "description": "Sets the account identifier for the assignee when I(operation) is C(create), C(transition) or C(edit).\nNote that JIRA may not allow changing field values on specific transitions or states.",
          "type": "str",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "assignee": {
          "aliases": [],
          "description": "Sets the the assignee when I(operation) is C(create), C(transition) or C(edit).\nRecent versions of JIRA no longer accept a user name as a user identifier. In that case, use I(account_id) instead.\nNote that JIRA may not allow changing field values on specific transitions or states.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attachment": {
          "aliases": [],
          "description": "Information about the attachment being uploaded.",
          "type": "dict",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {
            "content": {
              "aliases": [],
              "description": "The Base64 encoded contents of the file to attach. If not specified, the contents of I(filename) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The path to the file to upload (from the remote node) or, if I(content) is specified, the filename to use for the attachment.",
              "type": "path",
              "required": true,
              "suboptions": {}
            },
            "mimetype": {
              "aliases": [],
              "description": "The MIME type to supply for the upload. If not specified, best-effort detection will be done.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "comment": {
          "aliases": [],
          "description": "The comment text to add.\nNote that JIRA may not allow changing field values on specific transitions or states.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment_visibility": {
          "aliases": [],
          "description": "Used to specify comment comment visibility.\nSee U(https://developer.atlassian.com/cloud/jira/platform/rest/v2/api-group-issue-comments/#api-rest-api-2-issue-issueidorkey-comment-post) for details.",
          "type": "dict",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {
            "type": {
              "aliases": [],
              "description": "Use type to specify which of the JIRA visibility restriction types will be used.",
              "type": "str",
              "required": true,
              "choices": [
                "group",
                "role"
              ],
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Use value to specify value corresponding to the type of visibility restriction. For example name of the group or role.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "The issue description, where appropriate.\nNote that JIRA may not allow changing field values on specific transitions or states.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fields": {
          "aliases": [],
          "description": "This is a free-form data structure that can contain arbitrary data. This is passed directly to the JIRA REST API (possibly after merging with other required data, as when passed to create). See examples for more information, and the JIRA REST API for the structure required for various fields.\nNote that JIRA may not allow changing field values on specific transitions or states.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "inwardissue": {
          "aliases": [],
          "description": "Set issue from which link will be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "issue": {
          "aliases": [
            "ticket"
          ],
          "description": "An existing issue key to operate on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "issuetype": {
          "aliases": [],
          "description": "The issue type, for issue creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "jql": {
          "aliases": [],
          "description": "Query JIRA in JQL Syntax, e.g. 'CMDB Hostname'='test.example.com'.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "linktype": {
          "aliases": [],
          "description": "Set type of link, when action 'link' selected.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maxresults": {
          "aliases": [],
          "description": "Limit the result of I(operation=search). If no value is specified, the default jira limit will be used.\nUsed when I(operation=search) only, ignored otherwise.",
          "type": "int",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "operation": {
          "aliases": [
            "command"
          ],
          "description": "The operation to perform.",
          "type": "str",
          "required": true,
          "choices": [
            "attach",
            "comment",
            "create",
            "edit",
            "fetch",
            "link",
            "search",
            "transition",
            "update"
          ],
          "suboptions": {}
        },
        "outwardissue": {
          "aliases": [],
          "description": "Set issue to which link will be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to log-in with.\nMust be used with I(username).  Mutually exclusive with I(token).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "The project for this operation. Required for issue creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Only used when I(operation) is C(transition), and a bit of a misnomer, it actually refers to the transition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "summary": {
          "aliases": [],
          "description": "The issue summary, where appropriate.\nNote that JIRA may not allow changing field values on specific transitions or states.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Set timeout, in seconds, on requests to JIRA API.",
          "default": "10",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "The personal access token to log-in with.\nMutually exclusive with I(username) and I(password).",
          "type": "str",
          "required": false,
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "uri": {
          "aliases": [],
          "description": "Base URI for the JIRA instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username to log-in with.\nMust be used with I(password). Mutually exclusive with I(token).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Require valid SSL certificates (set to `false` if you'd like to use self-signed certificates)",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create and modify issues in a JIRA instance"
    },
    "examples": "\n# Create a new issue and add a comment to it:\n- name: Create an issue\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    project: ANS\n    operation: create\n    summary: Example Issue\n    description: Created using Ansible\n    issuetype: Task\n  args:\n    fields:\n        customfield_13225: \"test\"\n        customfield_12931: {\"value\": \"Test\"}\n  register: issue\n\n- name: Comment on issue\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    issue: '{{ issue.meta.key }}'\n    operation: comment\n    comment: A comment added by Ansible\n\n- name: Comment on issue with restricted visibility\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    issue: '{{ issue.meta.key }}'\n    operation: comment\n    comment: A comment added by Ansible\n    comment_visibility:\n      type: role\n      value: Developers\n\n# Assign an existing issue using edit\n- name: Assign an issue using free-form fields\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    issue: '{{ issue.meta.key}}'\n    operation: edit\n    assignee: ssmith\n\n# Create an issue with an existing assignee\n- name: Create an assigned issue\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    project: ANS\n    operation: create\n    summary: Assigned issue\n    description: Created and assigned using Ansible\n    issuetype: Task\n    assignee: ssmith\n\n# Edit an issue\n- name: Set the labels on an issue using free-form fields\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    issue: '{{ issue.meta.key }}'\n    operation: edit\n  args:\n    fields:\n        labels:\n          - autocreated\n          - ansible\n\n# Updating a field using operations: add, set & remove\n- name: Change the value of a Select dropdown\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    issue: '{{ issue.meta.key }}'\n    operation: update\n  args:\n    fields:\n      customfield_12931: [ {'set': {'value': 'Virtual'}} ]\n      customfield_13820: [ {'set': {'value':'Manually'}} ]\n  register: cmdb_issue\n  delegate_to: localhost\n\n\n# Retrieve metadata for an issue and use it to create an account\n- name: Get an issue\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    project: ANS\n    operation: fetch\n    issue: ANS-63\n  register: issue\n\n# Search for an issue\n# You can limit the search for specific fields by adding optional args. Note! It must be a dict, hence, lastViewed: null\n- name: Search for an issue\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    project: ANS\n    operation: search\n    maxresults: 10\n    jql: project=cmdb AND cf[13225]=\"test\"\n  args:\n    fields:\n      lastViewed: null\n  register: issue\n\n- name: Create a unix account for the reporter\n  become: true\n  user:\n    name: '{{ issue.meta.fields.creator.name }}'\n    comment: '{{ issue.meta.fields.creator.displayName }}'\n\n# You can get list of valid linktypes at /rest/api/2/issueLinkType\n# url of your jira installation.\n- name: Create link from HSP-1 to MKY-1\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    operation: link\n    linktype: Relates\n    inwardissue: HSP-1\n    outwardissue: MKY-1\n\n# Transition an issue\n- name: Resolve the issue\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    issue: '{{ issue.meta.key }}'\n    operation: transition\n    status: Resolve Issue\n    account_id: 112233445566778899aabbcc\n    fields:\n      resolution:\n        name: Done\n      description: I am done! This is the last description I will ever give you.\n\n# Attach a file to an issue\n- name: Attach a file\n  community.general.jira:\n    uri: '{{ server }}'\n    username: '{{ user }}'\n    password: '{{ pass }}'\n    issue: HSP-1\n    operation: attach\n    attachment:\n      filename: topsecretreport.xlsx\n"
  },
  "community.general.kernel_blacklist": {
    "doc": {
      "description": "Add or remove kernel modules from blacklist.",
      "has_action": false,
      "options": {
        "blacklist_file": {
          "aliases": [],
          "description": "If specified, use this blacklist file instead of C(/etc/modprobe.d/blacklist-ansible.conf).",
          "default": "/etc/modprobe.d/blacklist-ansible.conf",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of kernel module to black- or whitelist.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the module should be present in the blacklist or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Blacklist kernel modules"
    },
    "examples": "\n- name: Blacklist the nouveau driver module\n  community.general.kernel_blacklist:\n    name: nouveau\n    state: present\n"
  },
  "community.general.keycloak_authentication": {
    "doc": {
      "description": "This module actually can only make a copy of an existing authentication flow, add an execution to it and configure it.\nIt can also delete the flow.",
      "has_action": false,
      "options": {
        "alias": {
          "aliases": [],
          "description": "Alias for the authentication flow.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "authenticationExecutions": {
          "aliases": [],
          "description": "Configuration structure for the executions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "authenticationConfig": {
              "aliases": [],
              "description": "Describe the config of the authentication.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "displayName": {
              "aliases": [],
              "description": "Name of the execution or subflow to create or update.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "flowAlias": {
              "aliases": [],
              "description": "Alias of parent flow.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "index": {
              "aliases": [],
              "description": "Priority order of the execution.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "providerId": {
              "aliases": [],
              "description": "C(providerID) for the new flow when not copied from an existing flow.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "requirement": {
              "aliases": [],
              "description": "Control status of the subflow or execution.",
              "type": "str",
              "required": false,
              "choices": [
                "REQUIRED",
                "ALTERNATIVE",
                "DISABLED",
                "CONDITIONAL"
              ],
              "suboptions": {}
            }
          }
        },
        "copyFrom": {
          "aliases": [],
          "description": "C(flowAlias) of the authentication flow to use for the copy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the flow.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If C(true), allows to remove the authentication flow and recreate it.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "providerId": {
          "aliases": [],
          "description": "C(providerId) for the new flow when not copied from an existing flow.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "The name of the realm in which is the authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Control if the authentication flow must exists or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Configure authentication in Keycloak",
      "version_added": "3.3.0"
    },
    "examples": "\n    - name: Create an authentication flow from first broker login and add an execution to it.\n      community.general.keycloak_authentication:\n        auth_keycloak_url: http://localhost:8080/auth\n        auth_realm: master\n        auth_username: admin\n        auth_password: password\n        realm: master\n        alias: \"Copy of first broker login\"\n        copyFrom: \"first broker login\"\n        authenticationExecutions:\n          - providerId: \"test-execution1\"\n            requirement: \"REQUIRED\"\n            authenticationConfig:\n              alias: \"test.execution1.property\"\n              config:\n                test1.property: \"value\"\n          - providerId: \"test-execution2\"\n            requirement: \"REQUIRED\"\n            authenticationConfig:\n              alias: \"test.execution2.property\"\n              config:\n                test2.property: \"value\"\n        state: present\n\n    - name: Re-create the authentication flow\n      community.general.keycloak_authentication:\n        auth_keycloak_url: http://localhost:8080/auth\n        auth_realm: master\n        auth_username: admin\n        auth_password: password\n        realm: master\n        alias: \"Copy of first broker login\"\n        copyFrom: \"first broker login\"\n        authenticationExecutions:\n          - providerId: \"test-provisioning\"\n            requirement: \"REQUIRED\"\n            authenticationConfig:\n              alias: \"test.provisioning.property\"\n              config:\n                test.provisioning.property: \"value\"\n        state: present\n        force: true\n\n    - name: Create an authentication flow with subflow containing an execution.\n      community.general.keycloak_authentication:\n        auth_keycloak_url: http://localhost:8080/auth\n        auth_realm: master\n        auth_username: admin\n        auth_password: password\n        realm: master\n        alias: \"Copy of first broker login\"\n        copyFrom: \"first broker login\"\n        authenticationExecutions:\n          - providerId: \"test-execution1\"\n            requirement: \"REQUIRED\"\n          - displayName: \"New Subflow\"\n            requirement: \"REQUIRED\"\n          - providerId: \"auth-cookie\"\n            requirement: \"REQUIRED\"\n            flowAlias: \"New Sublow\"\n        state: present\n\n    - name: Remove authentication.\n      community.general.keycloak_authentication:\n        auth_keycloak_url: http://localhost:8080/auth\n        auth_realm: master\n        auth_username: admin\n        auth_password: password\n        realm: master\n        alias: \"Copy of first broker login\"\n        state: absent\n"
  },
  "community.general.keycloak_client": {
    "doc": {
      "description": "This module allows the administration of Keycloak clients via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html). Aliases are provided so camelCased versions can be used as well.\nThe Keycloak API does not always sanity check inputs e.g. you can set SAML-specific settings on an OpenID Connect client for instance and vice versa. Be careful. If you do not specify a setting, usually a sensible default is chosen.",
      "has_action": false,
      "options": {
        "admin_url": {
          "aliases": [
            "adminUrl"
          ],
          "description": "URL to the admin interface of the client. This is 'adminUrl' in the Keycloak REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [],
          "description": "A dict of further attributes for this client. This can contain various configuration settings; an example is given in the examples section. While an exhaustive list of permissible options is not available; possible options as of Keycloak 3.4 are listed below. The Keycloak API does not validate whether a given option is appropriate for the protocol used; if specified anyway, Keycloak will simply not use it.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "jwks.url": {
              "aliases": [],
              "description": "For OpenID-Connect clients, URL where client keys in JWK are stored.",
              "required": false,
              "suboptions": {}
            },
            "jwt.credential.certificate": {
              "aliases": [],
              "description": "For OpenID-Connect clients, client certificate for validating JWT issued by client and signed by its key, base64-encoded.",
              "required": false,
              "suboptions": {}
            },
            "request.object.signature.alg": {
              "aliases": [],
              "description": "For OpenID-Connect clients, JWA algorithm which the client needs to use when sending OIDC request object. One of C(any), C(none), C(RS256).",
              "required": false,
              "suboptions": {}
            },
            "saml.authnstatement": {
              "aliases": [],
              "description": "For SAML clients, boolean specifying whether or not a statement containing method and timestamp should be included in the login response.",
              "required": false,
              "suboptions": {}
            },
            "saml.client.signature": {
              "aliases": [],
              "description": "For SAML clients, boolean specifying whether a client signature is required and validated.",
              "required": false,
              "suboptions": {}
            },
            "saml.encrypt": {
              "aliases": [],
              "description": "Boolean specifying whether SAML assertions should be encrypted with the client's public key.",
              "required": false,
              "suboptions": {}
            },
            "saml.force.post.binding": {
              "aliases": [],
              "description": "For SAML clients, boolean specifying whether always to use POST binding for responses.",
              "required": false,
              "suboptions": {}
            },
            "saml.onetimeuse.condition": {
              "aliases": [],
              "description": "For SAML clients, boolean specifying whether a OneTimeUse condition should be included in login responses.",
              "required": false,
              "suboptions": {}
            },
            "saml.server.signature": {
              "aliases": [],
              "description": "Boolean specifying whether SAML documents should be signed by the realm.",
              "required": false,
              "suboptions": {}
            },
            "saml.server.signature.keyinfo.ext": {
              "aliases": [],
              "description": "For SAML clients, boolean specifying whether REDIRECT signing key lookup should be optimized through inclusion of the signing key id in the SAML Extensions element.",
              "required": false,
              "suboptions": {}
            },
            "saml.signature.algorithm": {
              "aliases": [],
              "description": "Signature algorithm used to sign SAML documents. One of C(RSA_SHA256), C(RSA_SHA1), C(RSA_SHA512), or C(DSA_SHA1).",
              "required": false,
              "suboptions": {}
            },
            "saml.signing.certificate": {
              "aliases": [],
              "description": "SAML signing key certificate, base64-encoded.",
              "required": false,
              "suboptions": {}
            },
            "saml.signing.private.key": {
              "aliases": [],
              "description": "SAML signing key private key, base64-encoded.",
              "required": false,
              "suboptions": {}
            },
            "saml_assertion_consumer_url_post": {
              "aliases": [],
              "description": "SAML POST Binding URL for the client's assertion consumer service (login responses).",
              "required": false,
              "suboptions": {}
            },
            "saml_assertion_consumer_url_redirect": {
              "aliases": [],
              "description": "SAML Redirect Binding URL for the client's assertion consumer service (login responses).",
              "required": false,
              "suboptions": {}
            },
            "saml_force_name_id_format": {
              "aliases": [],
              "description": "For SAML clients, Boolean specifying whether to ignore requested NameID subject format and using the configured one instead.",
              "required": false,
              "suboptions": {}
            },
            "saml_name_id_format": {
              "aliases": [],
              "description": "For SAML clients, the NameID format to use (one of C(username), C(email), C(transient), or C(persistent))",
              "required": false,
              "suboptions": {}
            },
            "saml_signature_canonicalization_method": {
              "aliases": [],
              "description": "SAML signature canonicalization method. This is one of four values, namely C(http://www.w3.org/2001/10/xml-exc-c14n#) for EXCLUSIVE, C(http://www.w3.org/2001/10/xml-exc-c14n#WithComments) for EXCLUSIVE_WITH_COMMENTS, C(http://www.w3.org/TR/2001/REC-xml-c14n-20010315) for INCLUSIVE, and C(http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments) for INCLUSIVE_WITH_COMMENTS.",
              "required": false,
              "suboptions": {}
            },
            "saml_single_logout_service_url_post": {
              "aliases": [],
              "description": "SAML POST binding url for the client's single logout service.",
              "required": false,
              "suboptions": {}
            },
            "saml_single_logout_service_url_redirect": {
              "aliases": [],
              "description": "SAML redirect binding url for the client's single logout service.",
              "required": false,
              "suboptions": {}
            },
            "use.jwks.url": {
              "aliases": [],
              "description": "For OpenID-Connect clients, boolean specifying whether to use a JWKS URL to obtain client public keys.",
              "required": false,
              "suboptions": {}
            },
            "user.info.response.signature.alg": {
              "aliases": [],
              "description": "For OpenID-Connect clients, JWA algorithm for signed UserInfo-endpoint responses. One of C(RS256) or C(unsigned).",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "authentication_flow_binding_overrides": {
          "aliases": [
            "authenticationFlowBindingOverrides"
          ],
          "description": "Override realm authentication flow bindings.",
          "type": "dict",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "authorization_services_enabled": {
          "aliases": [
            "authorizationServicesEnabled"
          ],
          "description": "Are authorization services enabled for this client or not (OpenID connect). This is 'authorizationServicesEnabled' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "authorization_settings": {
          "aliases": [
            "authorizationSettings"
          ],
          "description": "a data structure defining the authorization settings for this client. For reference, please see the Keycloak API docs at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html#_resourceserverrepresentation). This is 'authorizationSettings' in the Keycloak REST API.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "base_url": {
          "aliases": [
            "baseUrl"
          ],
          "description": "Default URL to use when the auth server needs to redirect or link back to the client This is 'baseUrl' in the Keycloak REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bearer_only": {
          "aliases": [
            "bearerOnly"
          ],
          "description": "The access type of this client is bearer-only. This is 'bearerOnly' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "client_authenticator_type": {
          "aliases": [
            "clientAuthenticatorType"
          ],
          "description": "How do clients authenticate with the auth server? Either C(client-secret) or C(client-jwt) can be chosen. When using C(client-secret), the module parameter I(secret) can set it, while for C(client-jwt), you can use the keys C(use.jwks.url), C(jwks.url), and C(jwt.credential.certificate) in the I(attributes) module parameter to configure its behavior. This is 'clientAuthenticatorType' in the Keycloak REST API.",
          "type": "str",
          "required": false,
          "choices": [
            "client-secret",
            "client-jwt"
          ],
          "suboptions": {}
        },
        "client_id": {
          "aliases": [
            "clientId"
          ],
          "description": "Client id of client to be worked on. This is usually an alphanumeric name chosen by you. Either this or I(id) is required. If you specify both, I(id) takes precedence. This is 'clientId' in the Keycloak REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_template": {
          "aliases": [
            "clientTemplate"
          ],
          "description": "Client template to use for this client. If it does not exist this field will silently be dropped. This is 'clientTemplate' in the Keycloak REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "consent_required": {
          "aliases": [
            "consentRequired"
          ],
          "description": "If enabled, users have to consent to client access. This is 'consentRequired' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "default_roles": {
          "aliases": [
            "defaultRoles"
          ],
          "description": "list of default roles for this client. If the client roles referenced do not exist yet, they will be created. This is 'defaultRoles' in the Keycloak REST API.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the client in Keycloak.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "direct_access_grants_enabled": {
          "aliases": [
            "directAccessGrantsEnabled"
          ],
          "description": "Are direct access grants enabled for this client or not (OpenID connect). This is 'directAccessGrantsEnabled' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is this client enabled or not?",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "frontchannel_logout": {
          "aliases": [
            "frontchannelLogout"
          ],
          "description": "Is frontchannel logout enabled for this client or not. This is 'frontchannelLogout' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "full_scope_allowed": {
          "aliases": [
            "fullScopeAllowed"
          ],
          "description": "Is the \"Full Scope Allowed\" feature set for this client or not. This is 'fullScopeAllowed' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id of client to be worked on. This is usually an UUID. Either this or I(client_id) is required. If you specify both, this takes precedence.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "implicit_flow_enabled": {
          "aliases": [
            "implicitFlowEnabled"
          ],
          "description": "Enable implicit flow for this client or not (OpenID connect). This is 'implicitFlowEnabled' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the client (this is not the same as I(client_id)).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "node_re_registration_timeout": {
          "aliases": [
            "nodeReRegistrationTimeout"
          ],
          "description": "Cluster node re-registration timeout for this client. This is 'nodeReRegistrationTimeout' in the Keycloak REST API.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "not_before": {
          "aliases": [
            "notBefore"
          ],
          "description": "Revoke any tokens issued before this date for this client (this is a UNIX timestamp). This is 'notBefore' in the Keycloak REST API.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Type of client (either C(openid-connect) or C(saml).",
          "type": "str",
          "required": false,
          "choices": [
            "openid-connect",
            "saml"
          ],
          "suboptions": {}
        },
        "protocol_mappers": {
          "aliases": [
            "protocolMappers"
          ],
          "description": "a list of dicts defining protocol mappers for this client. This is 'protocolMappers' in the Keycloak REST API.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "config": {
              "aliases": [],
              "description": "Dict specifying the configuration options for the protocol mapper; the contents differ depending on the value of I(protocolMapper) and are not documented other than by the source of the mappers and its parent class(es). An example is given below. It is easiest to obtain valid config values by dumping an already-existing protocol mapper configuration through check-mode in the I(existing) field.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "consentRequired": {
              "aliases": [],
              "description": "Specifies whether a user needs to provide consent to a client for this mapper to be active.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "consentText": {
              "aliases": [],
              "description": "The human-readable name of the consent the user is presented to accept.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "Usually a UUID specifying the internal ID of this protocol mapper instance.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of this protocol mapper.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "This is either C(openid-connect) or C(saml), this specifies for which protocol this protocol mapper. is active.",
              "type": "str",
              "required": false,
              "choices": [
                "openid-connect",
                "saml"
              ],
              "suboptions": {}
            },
            "protocolMapper": {
              "aliases": [],
              "description": "The Keycloak-internal name of the type of this protocol-mapper. While an exhaustive list is impossible to provide since this may be extended through SPIs by the user of Keycloak, by default Keycloak as of 3.4 ships with at least\nC(docker-v2-allow-all-mapper)\nC(oidc-address-mapper)\nC(oidc-full-name-mapper)\nC(oidc-group-membership-mapper)\nC(oidc-hardcoded-claim-mapper)\nC(oidc-hardcoded-role-mapper)\nC(oidc-role-name-mapper)\nC(oidc-script-based-protocol-mapper)\nC(oidc-sha256-pairwise-sub-mapper)\nC(oidc-usermodel-attribute-mapper)\nC(oidc-usermodel-client-role-mapper)\nC(oidc-usermodel-property-mapper)\nC(oidc-usermodel-realm-role-mapper)\nC(oidc-usersessionmodel-note-mapper)\nC(saml-group-membership-mapper)\nC(saml-hardcode-attribute-mapper)\nC(saml-hardcode-role-mapper)\nC(saml-role-list-mapper)\nC(saml-role-name-mapper)\nC(saml-user-attribute-mapper)\nC(saml-user-property-mapper)\nC(saml-user-session-note-mapper)\nAn exhaustive list of available mappers on your installation can be obtained on the admin console by going to Server Info -> Providers and looking under 'protocol-mapper'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "public_client": {
          "aliases": [
            "publicClient"
          ],
          "description": "Is the access type for this client public or not. This is 'publicClient' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "The realm to create the client in.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "redirect_uris": {
          "aliases": [
            "redirectUris"
          ],
          "description": "Acceptable redirect URIs for this client. This is 'redirectUris' in the Keycloak REST API.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "registered_nodes": {
          "aliases": [
            "registeredNodes"
          ],
          "description": "dict of registered cluster nodes (with C(nodename) as the key and last registration time as the value). This is 'registeredNodes' in the Keycloak REST API.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "registration_access_token": {
          "aliases": [
            "registrationAccessToken"
          ],
          "description": "The registration access token provides access for clients to the client registration service. This is 'registrationAccessToken' in the Keycloak REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "root_url": {
          "aliases": [
            "rootUrl"
          ],
          "description": "Root URL appended to relative URLs for this client. This is 'rootUrl' in the Keycloak REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secret": {
          "aliases": [],
          "description": "When using I(client_authenticator_type) C(client-secret) (the default), you can specify a secret here (otherwise one will be generated if it does not exit). If changing this secret, the module will not register a change currently (but the changed secret will be saved).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_accounts_enabled": {
          "aliases": [
            "serviceAccountsEnabled"
          ],
          "description": "Are service accounts enabled for this client or not (OpenID connect). This is 'serviceAccountsEnabled' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "standard_flow_enabled": {
          "aliases": [
            "standardFlowEnabled"
          ],
          "description": "Enable standard flow for this client or not (OpenID connect). This is 'standardFlowEnabled' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the client\nOn C(present), the client will be created (or updated if it exists already).\nOn C(absent), the client will be removed if it exists",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "surrogate_auth_required": {
          "aliases": [
            "surrogateAuthRequired"
          ],
          "description": "Whether or not surrogate auth is required. This is 'surrogateAuthRequired' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "use_template_config": {
          "aliases": [
            "useTemplateConfig"
          ],
          "description": "Whether or not to use configuration from the I(client_template). This is 'useTemplateConfig' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_template_mappers": {
          "aliases": [
            "useTemplateMappers"
          ],
          "description": "Whether or not to use mapper configuration from the I(client_template). This is 'useTemplateMappers' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_template_scope": {
          "aliases": [
            "useTemplateScope"
          ],
          "description": "Whether or not to use scope configuration from the I(client_template). This is 'useTemplateScope' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "web_origins": {
          "aliases": [
            "webOrigins"
          ],
          "description": "List of allowed CORS origins. This is 'webOrigins' in the Keycloak REST API.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak clients via Keycloak API"
    },
    "examples": "\n- name: Create or update Keycloak client (minimal example), authentication with credentials\n  community.general.keycloak_client:\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    client_id: test\n    state: present\n  delegate_to: localhost\n\n\n- name: Create or update Keycloak client (minimal example), authentication with token\n  community.general.keycloak_client:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    token: TOKEN\n    client_id: test\n    state: present\n  delegate_to: localhost\n\n\n- name: Delete a Keycloak client\n  community.general.keycloak_client:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    client_id: test\n    state: absent\n  delegate_to: localhost\n\n\n- name: Create or update a Keycloak client (with all the bells and whistles)\n  community.general.keycloak_client:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    state: present\n    realm: master\n    client_id: test\n    id: d8b127a3-31f6-44c8-a7e4-4ab9a3e78d95\n    name: this_is_a_test\n    description: Description of this wonderful client\n    root_url: https://www.example.com/\n    admin_url: https://www.example.com/admin_url\n    base_url: basepath\n    enabled: True\n    client_authenticator_type: client-secret\n    secret: REALLYWELLKEPTSECRET\n    redirect_uris:\n      - https://www.example.com/*\n      - http://localhost:8888/\n    web_origins:\n      - https://www.example.com/*\n    not_before: 1507825725\n    bearer_only: False\n    consent_required: False\n    standard_flow_enabled: True\n    implicit_flow_enabled: False\n    direct_access_grants_enabled: False\n    service_accounts_enabled: False\n    authorization_services_enabled: False\n    public_client: False\n    frontchannel_logout: False\n    protocol: openid-connect\n    full_scope_allowed: false\n    node_re_registration_timeout: -1\n    client_template: test\n    use_template_config: False\n    use_template_scope: false\n    use_template_mappers: no\n    registered_nodes:\n      node01.example.com: 1507828202\n    registration_access_token: eyJWT_TOKEN\n    surrogate_auth_required: false\n    default_roles:\n      - test01\n      - test02\n    authentication_flow_binding_overrides:\n        browser: 4c90336b-bf1d-4b87-916d-3677ba4e5fbb\n    protocol_mappers:\n      - config:\n          access.token.claim: True\n          claim.name: \"family_name\"\n          id.token.claim: True\n          jsonType.label: String\n          user.attribute: lastName\n          userinfo.token.claim: True\n        consentRequired: True\n        consentText: \"${familyName}\"\n        name: family name\n        protocol: openid-connect\n        protocolMapper: oidc-usermodel-property-mapper\n      - config:\n          attribute.name: Role\n          attribute.nameformat: Basic\n          single: false\n        consentRequired: false\n        name: role list\n        protocol: saml\n        protocolMapper: saml-role-list-mapper\n    attributes:\n      saml.authnstatement: True\n      saml.client.signature: True\n      saml.force.post.binding: True\n      saml.server.signature: True\n      saml.signature.algorithm: RSA_SHA256\n      saml.signing.certificate: CERTIFICATEHERE\n      saml.signing.private.key: PRIVATEKEYHERE\n      saml_force_name_id_format: False\n      saml_name_id_format: username\n      saml_signature_canonicalization_method: \"http://www.w3.org/2001/10/xml-exc-c14n#\"\n      user.info.response.signature.alg: RS256\n      request.object.signature.alg: RS256\n      use.jwks.url: true\n      jwks.url: JWKS_URL_FOR_CLIENT_AUTH_JWT\n      jwt.credential.certificate: JWT_CREDENTIAL_CERTIFICATE_FOR_CLIENT_AUTH\n  delegate_to: localhost\n"
  },
  "community.general.keycloak_client_rolemapping": {
    "doc": {
      "description": "This module allows you to add, remove or modify Keycloak client_rolemapping with the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html).\nAttributes are multi-valued in the Keycloak API. All attributes are lists of individual values and will be returned that way by this module. You may pass single values for attributes when calling the module, and this will be translated into a list suitable for the API.\nWhen updating a client_rolemapping, where possible provide the role ID to the module. This removes a lookup to the API to translate the name into the role ID.",
      "has_action": false,
      "options": {
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cid": {
          "aliases": [],
          "description": "Id of the client to be mapped.\nThis parameter is not required for updating or deleting the rolemapping but providing it will reduce the number of API calls required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_id": {
          "aliases": [],
          "description": "Name of the client to be mapped (different than I(cid)).\nThis parameter is required (can be replaced by cid for less API call).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gid": {
          "aliases": [],
          "description": "Id of the group to be mapped.\nThis parameter is not required for updating or deleting the rolemapping but providing it will reduce the number of API calls required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group_name": {
          "aliases": [],
          "description": "Name of the group to be mapped.\nThis parameter is required (can be replaced by gid for less API call).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "They Keycloak realm under which this role_representation resides.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "roles": {
          "aliases": [],
          "description": "Roles to be mapped to the group.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "id": {
              "aliases": [],
              "description": "The unique identifier for this role_representation.\nThis parameter is not required for updating or deleting a role_representation but providing it will reduce the number of API calls required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the role_representation.\nThis parameter is required only when creating or updating the role_representation.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "State of the client_rolemapping.\nOn C(present), the client_rolemapping will be created if it does not yet exist, or updated with the parameters you provide.\nOn C(absent), the client_rolemapping will be removed if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak client_rolemapping with the Keycloak API",
      "version_added": "3.5.0"
    },
    "examples": "\n- name: Map a client role to a group, authentication with credentials\n  community.general.keycloak_client_rolemappings:\n    realm: MyCustomRealm\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    state: present\n    client_id: client1\n    group_name: group1\n    roles:\n      - name: role_name1\n        id: role_id1\n      - name: role_name2\n        id: role_id2\n  delegate_to: localhost\n\n- name: Map a client role to a group, authentication with token\n  community.general.keycloak_client_rolemappings:\n    realm: MyCustomRealm\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    token: TOKEN\n    state: present\n    client_id: client1\n    group_name: group1\n    roles:\n      - name: role_name1\n        id: role_id1\n      - name: role_name2\n        id: role_id2\n  delegate_to: localhost\n\n- name: Unmap client role from a group\n  community.general.keycloak_client_rolemappings:\n    realm: MyCustomRealm\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    state: absent\n    client_id: client1\n    group_name: group1\n    roles:\n      - name: role_name1\n        id: role_id1\n      - name: role_name2\n        id: role_id2\n  delegate_to: localhost\n\n"
  },
  "community.general.keycloak_clientscope": {
    "doc": {
      "description": "This module allows you to add, remove or modify Keycloak client_scopes via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html).\nAttributes are multi-valued in the Keycloak API. All attributes are lists of individual values and will be returned that way by this module. You may pass single values for attributes when calling the module, and this will be translated into a list suitable for the API.\nWhen updating a client_scope, where possible provide the client_scope ID to the module. This removes a lookup to the API to translate the name into the client_scope ID.",
      "has_action": false,
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A dict of key/value pairs to set as custom attributes for the client_scope.\nValues may be single values (for example a string) or a list of strings.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description for this client_scope.\nThis parameter is not required for updating or deleting a client_scope.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The unique identifier for this client_scope.\nThis parameter is not required for updating or deleting a client_scope but providing it will reduce the number of API calls required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the client_scope.\nThis parameter is required only when creating or updating the client_scope.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Type of client.",
          "type": "str",
          "required": false,
          "choices": [
            "openid-connect",
            "saml",
            "wsfed"
          ],
          "suboptions": {}
        },
        "protocol_mappers": {
          "aliases": [
            "protocolMappers"
          ],
          "description": "A list of dicts defining protocol mappers for this client.\nThis is 'protocolMappers' in the Keycloak REST API.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "config": {
              "aliases": [],
              "description": "Dict specifying the configuration options for the protocol mapper; the contents differ depending on the value of I(protocolMapper) and are not documented other than by the source of the mappers and its parent class(es). An example is given below. It is easiest to obtain valid config values by dumping an already-existing protocol mapper configuration through check-mode in the C(existing) return value.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "Usually a UUID specifying the internal ID of this protocol mapper instance.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of this protocol mapper.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "This specifies for which protocol this protocol mapper.\nis active.",
              "type": "str",
              "required": false,
              "choices": [
                "openid-connect",
                "saml",
                "wsfed"
              ],
              "suboptions": {}
            },
            "protocolMapper": {
              "aliases": [],
              "description": "The Keycloak-internal name of the type of this protocol-mapper. While an exhaustive list is impossible to provide since this may be extended through SPIs by the user of Keycloak, by default Keycloak as of 3.4 ships with at least:\nC(docker-v2-allow-all-mapper)\nC(oidc-address-mapper)\nC(oidc-full-name-mapper)\nC(oidc-group-membership-mapper)\nC(oidc-hardcoded-claim-mapper)\nC(oidc-hardcoded-role-mapper)\nC(oidc-role-name-mapper)\nC(oidc-script-based-protocol-mapper)\nC(oidc-sha256-pairwise-sub-mapper)\nC(oidc-usermodel-attribute-mapper)\nC(oidc-usermodel-client-role-mapper)\nC(oidc-usermodel-property-mapper)\nC(oidc-usermodel-realm-role-mapper)\nC(oidc-usersessionmodel-note-mapper)\nC(saml-group-membership-mapper)\nC(saml-hardcode-attribute-mapper)\nC(saml-hardcode-role-mapper)\nC(saml-role-list-mapper)\nC(saml-role-name-mapper)\nC(saml-user-attribute-mapper)\nC(saml-user-property-mapper)\nC(saml-user-session-note-mapper)\nAn exhaustive list of available mappers on your installation can be obtained on the admin console by going to Server Info -> Providers and looking under 'protocol-mapper'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "realm": {
          "aliases": [],
          "description": "They Keycloak realm under which this client_scope resides.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the client_scope.\nOn C(present), the client_scope will be created if it does not yet exist, or updated with the parameters you provide.\nOn C(absent), the client_scope will be removed if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak client_scopes via Keycloak API",
      "version_added": "3.4.0"
    },
    "examples": "\n- name: Create a Keycloak client_scopes, authentication with credentials\n  community.general.keycloak_clientscope:\n    name: my-new-kc-clientscope\n    realm: MyCustomRealm\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Create a Keycloak client_scopes, authentication with token\n  community.general.keycloak_clientscope:\n    name: my-new-kc-clientscope\n    realm: MyCustomRealm\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    token: TOKEN\n  delegate_to: localhost\n\n- name: Delete a keycloak client_scopes\n  community.general.keycloak_clientscope:\n    id: '9d59aa76-2755-48c6-b1af-beb70a82c3cd'\n    state: absent\n    realm: MyCustomRealm\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Delete a Keycloak client_scope based on name\n  community.general.keycloak_clientscope:\n    name: my-clientscope-for-deletion\n    state: absent\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Update the name of a Keycloak client_scope\n  community.general.keycloak_clientscope:\n    id: '9d59aa76-2755-48c6-b1af-beb70a82c3cd'\n    name: an-updated-kc-clientscope-name\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Create a Keycloak client_scope with some custom attributes\n  community.general.keycloak_clientscope:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    name: my-new_clientscope\n    description: description-of-clientscope\n    protocol: openid-connect\n    protocol_mappers:\n      - config:\n          access.token.claim: True\n          claim.name: \"family_name\"\n          id.token.claim: True\n          jsonType.label: String\n          user.attribute: lastName\n          userinfo.token.claim: True\n        name: family name\n        protocol: openid-connect\n        protocolMapper: oidc-usermodel-property-mapper\n      - config:\n          attribute.name: Role\n          attribute.nameformat: Basic\n          single: false\n        name: role list\n        protocol: saml\n        protocolMapper: saml-role-list-mapper\n    attributes:\n        attrib1: value1\n        attrib2: value2\n        attrib3:\n            - with\n            - numerous\n            - individual\n            - list\n            - items\n  delegate_to: localhost\n"
  },
  "community.general.keycloak_clienttemplate": {
    "doc": {
      "description": "This module allows the administration of Keycloak client templates via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html)\nThe Keycloak API does not always enforce for only sensible settings to be used -- you can set SAML-specific settings on an OpenID Connect client for instance and vice versa. Be careful. If you do not specify a setting, usually a sensible default is chosen.",
      "has_action": false,
      "notes": "The Keycloak REST API defines further fields (namely I(bearerOnly), I(consentRequired), I(standardFlowEnabled), I(implicitFlowEnabled), I(directAccessGrantsEnabled), I(serviceAccountsEnabled), I(publicClient), and I(frontchannelLogout)) which, while available with keycloak_client, do not have any effect on Keycloak client-templates and are discarded if supplied with an API request changing client-templates. As such, they are not available through this module.",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A dict of further attributes for this client template. This can contain various configuration settings, though in the default installation of Keycloak as of 3.4, none are documented or known, so this is usually empty.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the client template in Keycloak.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "full_scope_allowed": {
          "aliases": [],
          "description": "Is the \"Full Scope Allowed\" feature set for this client template or not. This is 'fullScopeAllowed' in the Keycloak REST API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id of client template to be worked on. This is usually a UUID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the client template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Type of client template (either C(openid-connect) or C(saml).",
          "type": "str",
          "required": false,
          "choices": [
            "openid-connect",
            "saml"
          ],
          "suboptions": {}
        },
        "protocol_mappers": {
          "aliases": [],
          "description": "a list of dicts defining protocol mappers for this client template. This is 'protocolMappers' in the Keycloak REST API.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "config": {
              "aliases": [],
              "description": "Dict specifying the configuration options for the protocol mapper; the contents differ depending on the value of I(protocolMapper) and are not documented other than by the source of the mappers and its parent class(es). An example is given below. It is easiest to obtain valid config values by dumping an already-existing protocol mapper configuration through check-mode in the I(existing) field.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "consentRequired": {
              "aliases": [],
              "description": "Specifies whether a user needs to provide consent to a client for this mapper to be active.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "consentText": {
              "aliases": [],
              "description": "The human-readable name of the consent the user is presented to accept.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "Usually a UUID specifying the internal ID of this protocol mapper instance.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of this protocol mapper.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "This is either C(openid-connect) or C(saml), this specifies for which protocol this protocol mapper. is active.",
              "type": "str",
              "required": false,
              "choices": [
                "openid-connect",
                "saml"
              ],
              "suboptions": {}
            },
            "protocolMapper": {
              "aliases": [],
              "description": "The Keycloak-internal name of the type of this protocol-mapper. While an exhaustive list is impossible to provide since this may be extended through SPIs by the user of Keycloak, by default Keycloak as of 3.4 ships with at least\nC(docker-v2-allow-all-mapper)\nC(oidc-address-mapper)\nC(oidc-full-name-mapper)\nC(oidc-group-membership-mapper)\nC(oidc-hardcoded-claim-mapper)\nC(oidc-hardcoded-role-mapper)\nC(oidc-role-name-mapper)\nC(oidc-script-based-protocol-mapper)\nC(oidc-sha256-pairwise-sub-mapper)\nC(oidc-usermodel-attribute-mapper)\nC(oidc-usermodel-client-role-mapper)\nC(oidc-usermodel-property-mapper)\nC(oidc-usermodel-realm-role-mapper)\nC(oidc-usersessionmodel-note-mapper)\nC(saml-group-membership-mapper)\nC(saml-hardcode-attribute-mapper)\nC(saml-hardcode-role-mapper)\nC(saml-role-list-mapper)\nC(saml-role-name-mapper)\nC(saml-user-attribute-mapper)\nC(saml-user-property-mapper)\nC(saml-user-session-note-mapper)\nAn exhaustive list of available mappers on your installation can be obtained on the admin console by going to Server Info -> Providers and looking under 'protocol-mapper'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "realm": {
          "aliases": [],
          "description": "Realm this client template is found in.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the client template.\nOn C(present), the client template will be created (or updated if it exists already).\nOn C(absent), the client template will be removed if it exists",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak client templates via Keycloak API"
    },
    "examples": "\n- name: Create or update Keycloak client template (minimal), authentication with credentials\n  community.general.keycloak_client:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    realm: master\n    name: this_is_a_test\n  delegate_to: localhost\n\n- name: Create or update Keycloak client template (minimal), authentication with token\n  community.general.keycloak_clienttemplate:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    token: TOKEN\n    realm: master\n    name: this_is_a_test\n  delegate_to: localhost\n\n- name: Delete Keycloak client template\n  community.general.keycloak_client:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    realm: master\n    state: absent\n    name: test01\n  delegate_to: localhost\n\n- name: Create or update Keycloak client template (with a protocol mapper)\n  community.general.keycloak_client:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    realm: master\n    name: this_is_a_test\n    protocol_mappers:\n      - config:\n          access.token.claim: True\n          claim.name: \"family_name\"\n          id.token.claim: True\n          jsonType.label: String\n          user.attribute: lastName\n          userinfo.token.claim: True\n        consentRequired: True\n        consentText: \"${familyName}\"\n        name: family name\n        protocol: openid-connect\n        protocolMapper: oidc-usermodel-property-mapper\n    full_scope_allowed: false\n    id: bce6f5e9-d7d3-4955-817e-c5b7f8d65b3f\n  delegate_to: localhost\n"
  },
  "community.general.keycloak_group": {
    "doc": {
      "description": "This module allows you to add, remove or modify Keycloak groups via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html).\nAttributes are multi-valued in the Keycloak API. All attributes are lists of individual values and will be returned that way by this module. You may pass single values for attributes when calling the module, and this will be translated into a list suitable for the API.\nWhen updating a group, where possible provide the group ID to the module. This removes a lookup to the API to translate the name into the group ID.",
      "has_action": false,
      "notes": "Presently, the I(realmRoles), I(clientRoles) and I(access) attributes returned by the Keycloak API are read-only for groups. This limitation will be removed in a later version of this module.",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A dict of key/value pairs to set as custom attributes for the group.\nValues may be single values (e.g. a string) or a list of strings.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The unique identifier for this group.\nThis parameter is not required for updating or deleting a group but providing it will reduce the number of API calls required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the group.\nThis parameter is required only when creating or updating the group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "They Keycloak realm under which this group resides.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the group.\nOn C(present), the group will be created if it does not yet exist, or updated with the parameters you provide.\nOn C(absent), the group will be removed if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak groups via Keycloak API"
    },
    "examples": "\n- name: Create a Keycloak group, authentication with credentials\n  community.general.keycloak_group:\n    name: my-new-kc-group\n    realm: MyCustomRealm\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Create a Keycloak group, authentication with token\n  community.general.keycloak_group:\n    name: my-new-kc-group\n    realm: MyCustomRealm\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    token: TOKEN\n  delegate_to: localhost\n\n- name: Delete a keycloak group\n  community.general.keycloak_group:\n    id: '9d59aa76-2755-48c6-b1af-beb70a82c3cd'\n    state: absent\n    realm: MyCustomRealm\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Delete a Keycloak group based on name\n  community.general.keycloak_group:\n    name: my-group-for-deletion\n    state: absent\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Update the name of a Keycloak group\n  community.general.keycloak_group:\n    id: '9d59aa76-2755-48c6-b1af-beb70a82c3cd'\n    name: an-updated-kc-group-name\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Create a keycloak group with some custom attributes\n  community.general.keycloak_group:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    name: my-new_group\n    attributes:\n        attrib1: value1\n        attrib2: value2\n        attrib3:\n            - with\n            - numerous\n            - individual\n            - list\n            - items\n  delegate_to: localhost\n"
  },
  "community.general.keycloak_identity_provider": {
    "doc": {
      "description": "This module allows you to add, remove or modify Keycloak identity providers via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/15.0/rest-api/index.html).",
      "has_action": false,
      "options": {
        "add_read_token_role_on_create": {
          "aliases": [
            "addReadTokenRoleOnCreate"
          ],
          "description": "Enable/disable whether new users can read any stored tokens. This assigns the C(broker.read-token) role.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "alias": {
          "aliases": [],
          "description": "The alias uniquely identifies an identity provider and it is also used to build the redirect URI.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "authenticate_by_default": {
          "aliases": [
            "authenticateByDefault"
          ],
          "description": "Specifies if this identity provider should be used by default for authentication even before displaying login screen.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Dict specifying the configuration options for the provider; the contents differ depending on the value of I(providerId). Examples are given below for C(oidc) and C(saml). It is easiest to obtain valid config values by dumping an already-existing identity provider configuration through check-mode in the I(existing) field.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "authorizationUrl": {
              "aliases": [],
              "description": "The Authorization URL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "backchannelSupported": {
              "aliases": [],
              "description": "Does the external IDP support backchannel logout?",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "clientAuthMethod": {
              "aliases": [],
              "description": "The client authentication method.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "clientId": {
              "aliases": [],
              "description": "The client or client identifier registered within the identity provider.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "clientSecret": {
              "aliases": [],
              "description": "The client or client secret registered within the identity provider.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "defaultScope": {
              "aliases": [],
              "description": "The scopes to be sent when asking for authorization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "entityId": {
              "aliases": [],
              "description": "The Entity ID that will be used to uniquely identify this SAML Service Provider.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "gui_order": {
              "aliases": [
                "guiOrder"
              ],
              "description": "Number defining order of the provider in GUI (for example, on Login page).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "hide_on_login_page": {
              "aliases": [
                "hideOnLoginPage"
              ],
              "description": "If hidden, login with this provider is possible only if requested explicitly, for example using the C(kc_idp_hint) parameter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "issuer": {
              "aliases": [],
              "description": "The issuer identifier for the issuer of the response. If not provided, no validation will be performed.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "jwksUrl": {
              "aliases": [],
              "description": "URL where identity provider keys in JWK format are stored. See JWK specification for more details.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "logoutUrl": {
              "aliases": [],
              "description": "End session endpoint to use to logout user from external IDP.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "nameIDPolicyFormat": {
              "aliases": [],
              "description": "Specifies the URI reference corresponding to a name identifier format.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "principalType": {
              "aliases": [],
              "description": "Way to identify and track external users from the assertion.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "singleLogoutServiceUrl": {
              "aliases": [],
              "description": "The URL that must be used to send logout requests.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "singleSignOnServiceUrl": {
              "aliases": [],
              "description": "The URL that must be used to send authentication requests (SAML AuthnRequest).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "sync_mode": {
              "aliases": [
                "syncMode"
              ],
              "description": "Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tokenUrl": {
              "aliases": [],
              "description": "The Token URL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "useJwksUrl": {
              "aliases": [],
              "description": "If the switch is on, identity provider public keys will be downloaded from given JWKS URL.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "userInfoUrl": {
              "aliases": [],
              "description": "The User Info URL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validateSignature": {
              "aliases": [],
              "description": "Enable/disable signature validation of external IDP signatures.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "display_name": {
          "aliases": [
            "displayName"
          ],
          "description": "Friendly name for identity provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable/disable this identity provider.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "first_broker_login_flow_alias": {
          "aliases": [
            "firstBrokerLoginFlowAlias"
          ],
          "description": "Alias of authentication flow, which is triggered after first login with this identity provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "link_only": {
          "aliases": [
            "linkOnly"
          ],
          "description": "If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't want to allow login from the provider, but want to integrate with a provider.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mappers": {
          "aliases": [],
          "description": "A list of dicts defining mappers associated with this Identity Provider.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "config": {
              "aliases": [],
              "description": "Dict specifying the configuration options for the mapper; the contents differ depending on the value of I(identityProviderMapper).",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "Unique ID of this mapper.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "identityProviderAlias": {
              "aliases": [],
              "description": "Alias of the identity provider for this mapper.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "identityProviderMapper": {
              "aliases": [],
              "description": "Type of mapper.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the mapper.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "post_broker_login_flow_alias": {
          "aliases": [
            "postBrokerLoginFlowAlias"
          ],
          "description": "Alias of authentication flow, which is triggered after each login with this identity provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_id": {
          "aliases": [
            "providerId"
          ],
          "description": "Protocol used by this provider (supported values are C(oidc) or C(saml)).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "The Keycloak realm under which this identity provider resides.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the identity provider.\nOn C(present), the identity provider will be created if it does not yet exist, or updated with the parameters you provide.\nOn C(absent), the identity provider will be removed if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "store_token": {
          "aliases": [
            "storeToken"
          ],
          "description": "Enable/disable whether tokens must be stored after authenticating users.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "trust_email": {
          "aliases": [
            "trustEmail"
          ],
          "description": "If enabled, email provided by this provider is not verified even if verification is enabled for the realm.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak identity providers via Keycloak API",
      "version_added": "3.6.0"
    },
    "examples": "\n- name: Create OIDC identity provider, authentication with credentials\n  community.general.keycloak_identity_provider:\n    state: present\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: admin\n    auth_password: admin\n    realm: myrealm\n    alias: oidc-idp\n    display_name: OpenID Connect IdP\n    enabled: true\n    provider_id: oidc\n    config:\n      issuer: https://idp.example.com\n      authorizationUrl: https://idp.example.com/auth\n      tokenUrl: https://idp.example.com/token\n      userInfoUrl: https://idp.example.com/userinfo\n      clientAuthMethod: client_secret_post\n      clientId: my-client\n      clientSecret: secret\n      syncMode: FORCE\n    mappers:\n      - name: first_name\n        identityProviderMapper: oidc-user-attribute-idp-mapper\n        config:\n          claim: first_name\n          user.attribute: first_name\n          syncMode: INHERIT\n      - name: last_name\n        identityProviderMapper: oidc-user-attribute-idp-mapper\n        config:\n          claim: last_name\n          user.attribute: last_name\n          syncMode: INHERIT\n\n- name: Create SAML identity provider, authentication with credentials\n  community.general.keycloak_identity_provider:\n    state: present\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: admin\n    auth_password: admin\n    realm: myrealm\n    alias: saml-idp\n    display_name: SAML IdP\n    enabled: true\n    provider_id: saml\n    config:\n      entityId: https://auth.example.com/auth/realms/myrealm\n      singleSignOnServiceUrl: https://idp.example.com/login\n      wantAuthnRequestsSigned: true\n      wantAssertionsSigned: true\n    mappers:\n      - name: roles\n        identityProviderMapper: saml-user-attribute-idp-mapper\n        config:\n          user.attribute: roles\n          attribute.friendly.name: User Roles\n          attribute.name: roles\n          syncMode: INHERIT\n"
  },
  "community.general.keycloak_realm": {
    "doc": {
      "description": "This module allows the administration of Keycloak realm via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the realm being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate realm definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html). Aliases are provided so camelCased versions can be used as well.\nThe Keycloak API does not always sanity check inputs e.g. you can set SAML-specific settings on an OpenID Connect client for instance and vice versa. Be careful. If you do not specify a setting, usually a sensible default is chosen.",
      "has_action": false,
      "options": {
        "access_code_lifespan": {
          "aliases": [
            "accessCodeLifespan"
          ],
          "description": "The realm access code lifespan.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "access_code_lifespan_login": {
          "aliases": [
            "accessCodeLifespanLogin"
          ],
          "description": "The realm access code lifespan login.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "access_code_lifespan_user_action": {
          "aliases": [
            "accessCodeLifespanUserAction"
          ],
          "description": "The realm access code lifespan user action.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "access_token_lifespan": {
          "aliases": [
            "accessTokenLifespan"
          ],
          "description": "The realm access token lifespan.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "access_token_lifespan_for_implicit_flow": {
          "aliases": [
            "accessTokenLifespanForImplicitFlow"
          ],
          "description": "The realm access token lifespan for implicit flow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "account_theme": {
          "aliases": [
            "accountTheme"
          ],
          "description": "The realm account theme.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "action_token_generated_by_admin_lifespan": {
          "aliases": [
            "actionTokenGeneratedByAdminLifespan"
          ],
          "description": "The realm action token generated by admin lifespan.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "action_token_generated_by_user_lifespan": {
          "aliases": [
            "actionTokenGeneratedByUserLifespan"
          ],
          "description": "The realm action token generated by user lifespan.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "admin_events_details_enabled": {
          "aliases": [
            "adminEventsDetailsEnabled"
          ],
          "description": "The realm admin events details enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "admin_events_enabled": {
          "aliases": [
            "adminEventsEnabled"
          ],
          "description": "The realm admin events enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "admin_theme": {
          "aliases": [
            "adminTheme"
          ],
          "description": "The realm admin theme.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [],
          "description": "The realm attributes.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "browser_flow": {
          "aliases": [
            "browserFlow"
          ],
          "description": "The realm browser flow.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "browser_security_headers": {
          "aliases": [
            "browserSecurityHeaders"
          ],
          "description": "The realm browser security headers.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "brute_force_protected": {
          "aliases": [
            "bruteForceProtected"
          ],
          "description": "The realm brute force protected.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "client_authentication_flow": {
          "aliases": [
            "clientAuthenticationFlow"
          ],
          "description": "The realm client authentication flow.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_scope_mappings": {
          "aliases": [
            "clientScopeMappings"
          ],
          "description": "The realm client scope mappings.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "default_default_client_scopes": {
          "aliases": [
            "defaultDefaultClientScopes"
          ],
          "description": "The realm default default client scopes.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "default_groups": {
          "aliases": [
            "defaultGroups"
          ],
          "description": "The realm default groups.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "default_locale": {
          "aliases": [
            "defaultLocale"
          ],
          "description": "The realm default locale.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_optional_client_scopes": {
          "aliases": [
            "defaultOptionalClientScopes"
          ],
          "description": "The realm default optional client scopes.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "default_roles": {
          "aliases": [
            "defaultRoles"
          ],
          "description": "The realm default roles.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "default_signature_algorithm": {
          "aliases": [
            "defaultSignatureAlgorithm"
          ],
          "description": "The realm default signature algorithm.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "direct_grant_flow": {
          "aliases": [
            "directGrantFlow"
          ],
          "description": "The realm direct grant flow.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [
            "displayName"
          ],
          "description": "The realm display name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name_html": {
          "aliases": [
            "displayNameHtml"
          ],
          "description": "The realm display name HTML.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "docker_authentication_flow": {
          "aliases": [
            "dockerAuthenticationFlow"
          ],
          "description": "The realm docker authentication flow.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "duplicate_emails_allowed": {
          "aliases": [
            "duplicateEmailsAllowed"
          ],
          "description": "The realm duplicate emails allowed option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "edit_username_allowed": {
          "aliases": [
            "editUsernameAllowed"
          ],
          "description": "The realm edit username allowed option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "email_theme": {
          "aliases": [
            "emailTheme"
          ],
          "description": "The realm email theme.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "The realm enabled option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled_event_types": {
          "aliases": [
            "enabledEventTypes"
          ],
          "description": "The realm enabled event types.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "events_enabled": {
          "aliases": [
            "eventsEnabled"
          ],
          "description": "Enables or disables login events for this realm.",
          "type": "bool",
          "required": false,
          "version_added": "3.6.0",
          "suboptions": {}
        },
        "events_expiration": {
          "aliases": [
            "eventsExpiration"
          ],
          "description": "The realm events expiration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "events_listeners": {
          "aliases": [
            "eventsListeners"
          ],
          "description": "The realm events listeners.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "failure_factor": {
          "aliases": [
            "failureFactor"
          ],
          "description": "The realm failure factor.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The realm to create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internationalization_enabled": {
          "aliases": [
            "internationalizationEnabled"
          ],
          "description": "The realm internationalization enabled option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login_theme": {
          "aliases": [
            "loginTheme"
          ],
          "description": "The realm login theme.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_with_email_allowed": {
          "aliases": [
            "loginWithEmailAllowed"
          ],
          "description": "The realm login with email allowed option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "max_delta_time_seconds": {
          "aliases": [
            "maxDeltaTimeSeconds"
          ],
          "description": "The realm max delta time in seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "max_failure_wait_seconds": {
          "aliases": [
            "maxFailureWaitSeconds"
          ],
          "description": "The realm max failure wait in seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "minimum_quick_login_wait_seconds": {
          "aliases": [
            "minimumQuickLoginWaitSeconds"
          ],
          "description": "The realm minimum quick login wait in seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "not_before": {
          "aliases": [
            "notBefore"
          ],
          "description": "The realm not before.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "offline_session_idle_timeout": {
          "aliases": [
            "offlineSessionIdleTimeout"
          ],
          "description": "The realm offline session idle timeout.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "offline_session_max_lifespan": {
          "aliases": [
            "offlineSessionMaxLifespan"
          ],
          "description": "The realm offline session max lifespan.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "offline_session_max_lifespan_enabled": {
          "aliases": [
            "offlineSessionMaxLifespanEnabled"
          ],
          "description": "The realm offline session max lifespan enabled option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "otp_policy_algorithm": {
          "aliases": [
            "otpPolicyAlgorithm"
          ],
          "description": "The realm otp policy algorithm.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "otp_policy_digits": {
          "aliases": [
            "otpPolicyDigits"
          ],
          "description": "The realm otp policy digits.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "otp_policy_initial_counter": {
          "aliases": [
            "otpPolicyInitialCounter"
          ],
          "description": "The realm otp policy initial counter.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "otp_policy_look_ahead_window": {
          "aliases": [
            "otpPolicyLookAheadWindow"
          ],
          "description": "The realm otp policy look ahead window.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "otp_policy_period": {
          "aliases": [
            "otpPolicyPeriod"
          ],
          "description": "The realm otp policy period.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "otp_policy_type": {
          "aliases": [
            "otpPolicyType"
          ],
          "description": "The realm otp policy type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "otp_supported_applications": {
          "aliases": [
            "otpSupportedApplications"
          ],
          "description": "The realm otp supported applications.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "password_policy": {
          "aliases": [
            "passwordPolicy"
          ],
          "description": "The realm password policy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "permanent_lockout": {
          "aliases": [
            "permanentLockout"
          ],
          "description": "The realm permanent lockout.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "quick_login_check_milli_seconds": {
          "aliases": [
            "quickLoginCheckMilliSeconds"
          ],
          "description": "The realm quick login check in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "The realm name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "refresh_token_max_reuse": {
          "aliases": [
            "refreshTokenMaxReuse"
          ],
          "description": "The realm refresh token max reuse.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "registration_allowed": {
          "aliases": [
            "registrationAllowed"
          ],
          "description": "The realm registration allowed option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "registration_email_as_username": {
          "aliases": [
            "registrationEmailAsUsername"
          ],
          "description": "The realm registration email as username option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "registration_flow": {
          "aliases": [
            "registrationFlow"
          ],
          "description": "The realm registration flow.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remember_me": {
          "aliases": [
            "rememberMe"
          ],
          "description": "The realm remember me option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "reset_credentials_flow": {
          "aliases": [
            "resetCredentialsFlow"
          ],
          "description": "The realm reset credentials flow.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reset_password_allowed": {
          "aliases": [
            "resetPasswordAllowed"
          ],
          "description": "The realm reset password allowed option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "revoke_refresh_token": {
          "aliases": [
            "revokeRefreshToken"
          ],
          "description": "The realm revoke refresh token option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "smtp_server": {
          "aliases": [
            "smtpServer"
          ],
          "description": "The realm smtp server.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ssl_required": {
          "aliases": [
            "sslRequired"
          ],
          "description": "The realm ssl required option.",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "external",
            "none"
          ],
          "suboptions": {}
        },
        "sso_session_idle_timeout": {
          "aliases": [
            "ssoSessionIdleTimeout"
          ],
          "description": "The realm sso session idle timeout.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sso_session_idle_timeout_remember_me": {
          "aliases": [
            "ssoSessionIdleTimeoutRememberMe"
          ],
          "description": "The realm sso session idle timeout remember me.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sso_session_max_lifespan": {
          "aliases": [
            "ssoSessionMaxLifespan"
          ],
          "description": "The realm sso session max lifespan.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sso_session_max_lifespan_remember_me": {
          "aliases": [
            "ssoSessionMaxLifespanRememberMe"
          ],
          "description": "The realm sso session max lifespan remember me.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the realm.\nOn C(present), the realm will be created (or updated if it exists already).\nOn C(absent), the realm will be removed if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "supported_locales": {
          "aliases": [
            "supportedLocales"
          ],
          "description": "The realm supported locales.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "user_managed_access_allowed": {
          "aliases": [
            "userManagedAccessAllowed"
          ],
          "description": "The realm user managed access allowed option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verify_email": {
          "aliases": [
            "verifyEmail"
          ],
          "description": "The realm verify email option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_increment_seconds": {
          "aliases": [
            "waitIncrementSeconds"
          ],
          "description": "The realm wait increment in seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak realm via Keycloak API",
      "version_added": "3.0.0"
    },
    "examples": "\n- name: Create or update Keycloak realm (minimal example)\n  community.general.keycloak_realm:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    id: realm\n    state: present\n\n- name: Delete a Keycloak realm\n  community.general.keycloak_realm:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    id: test\n    state: absent\n\n"
  },
  "community.general.keycloak_realm_info": {
    "doc": {
      "description": "This module allows you to get Keycloak realm public information via the Keycloak REST API.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html).\nAttributes are multi-valued in the Keycloak API. All attributes are lists of individual values and will be returned that way by this module. You may pass single values for attributes when calling the module, and this will be translated into a list suitable for the API.",
      "has_action": false,
      "options": {
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "They Keycloak realm ID.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows obtaining Keycloak realm public information via Keycloak API",
      "version_added": "4.3.0"
    },
    "examples": "\n- name: Get a Keycloak public key\n  community.general.keycloak_realm_info:\n    realm: MyCustomRealm\n    auth_keycloak_url: https://auth.example.com/auth\n  delegate_to: localhost\n"
  },
  "community.general.keycloak_role": {
    "doc": {
      "description": "This module allows you to add, remove or modify Keycloak roles via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html).\nAttributes are multi-valued in the Keycloak API. All attributes are lists of individual values and will be returned that way by this module. You may pass single values for attributes when calling the module, and this will be translated into a list suitable for the API.",
      "has_action": false,
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A dict of key/value pairs to set as custom attributes for the role.\nValues may be single values (e.g. a string) or a list of strings.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_id": {
          "aliases": [],
          "description": "If the role is a client role, the client id under which it resides.\nIf this parameter is absent, the role is considered a realm role.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The role description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the role.\nThis parameter is required.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "The Keycloak realm under which this role resides.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the role.\nOn C(present), the role will be created if it does not yet exist, or updated with the parameters you provide.\nOn C(absent), the role will be removed if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak roles via Keycloak API",
      "version_added": "3.4.0"
    },
    "examples": "\n- name: Create a Keycloak realm role, authentication with credentials\n  community.general.keycloak_role:\n    name: my-new-kc-role\n    realm: MyCustomRealm\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Create a Keycloak realm role, authentication with token\n  community.general.keycloak_role:\n    name: my-new-kc-role\n    realm: MyCustomRealm\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    token: TOKEN\n  delegate_to: localhost\n\n- name: Create a Keycloak client role\n  community.general.keycloak_role:\n    name: my-new-kc-role\n    realm: MyCustomRealm\n    client_id: MyClient\n    state: present\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Delete a Keycloak role\n  community.general.keycloak_role:\n    name: my-role-for-deletion\n    state: absent\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n  delegate_to: localhost\n\n- name: Create a keycloak role with some custom attributes\n  community.general.keycloak_role:\n    auth_client_id: admin-cli\n    auth_keycloak_url: https://auth.example.com/auth\n    auth_realm: master\n    auth_username: USERNAME\n    auth_password: PASSWORD\n    name: my-new-role\n    attributes:\n        attrib1: value1\n        attrib2: value2\n        attrib3:\n            - with\n            - numerous\n            - individual\n            - list\n            - items\n  delegate_to: localhost\n"
  },
  "community.general.keycloak_user_federation": {
    "doc": {
      "description": "This module allows you to add, remove or modify Keycloak user federations via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(https://www.keycloak.org/docs-api/15.0/rest-api/index.html).",
      "has_action": false,
      "options": {
        "auth_client_id": {
          "aliases": [],
          "description": "OpenID Connect I(client_id) to authenticate to the API with.",
          "default": "admin-cli",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_client_secret": {
          "aliases": [],
          "description": "Client Secret to use in conjunction with I(auth_client_id) (if required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_keycloak_url": {
          "aliases": [
            "url"
          ],
          "description": "URL to the Keycloak instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_password": {
          "aliases": [
            "password"
          ],
          "description": "Password to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_realm": {
          "aliases": [],
          "description": "Keycloak realm name to authenticate to for API access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_username": {
          "aliases": [
            "username"
          ],
          "description": "Username to authenticate for API access with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Dict specifying the configuration options for the provider; the contents differ depending on the value of I(provider_id). Examples are given below for C(ldap), C(kerberos) and C(sssd). It is easiest to obtain valid config values by dumping an already-existing user federation configuration through check-mode in the I(existing) field.\nThe value C(sssd) has been supported since community.general 4.2.0.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "allowKerberosAuthentication": {
              "aliases": [],
              "description": "Enable/disable HTTP authentication of users with SPNEGO/Kerberos tokens. The data about authenticated users will be provisioned from this LDAP server.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowPasswordAuthentication": {
              "aliases": [],
              "description": "Enable/disable possibility of username/password authentication against Kerberos database.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "authType": {
              "aliases": [],
              "description": "Type of the Authentication method used during LDAP Bind operation. It is used in most of the requests sent to the LDAP server.",
              "default": "none",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "simple"
              ],
              "suboptions": {}
            },
            "batchSizeForSync": {
              "aliases": [],
              "description": "Count of LDAP users to be imported from LDAP to Keycloak within a single transaction.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "bindCredential": {
              "aliases": [],
              "description": "Password of LDAP admin.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "bindDn": {
              "aliases": [],
              "description": "DN of LDAP user which will be used by Keycloak to access LDAP server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "cachePolicy": {
              "aliases": [],
              "description": "Cache Policy for this storage provider.",
              "default": "DEFAULT",
              "type": "str",
              "required": false,
              "choices": [
                "DEFAULT",
                "EVICT_DAILY",
                "EVICT_WEEKLY",
                "MAX_LIFESPAN",
                "NO_CACHE"
              ],
              "suboptions": {}
            },
            "changedSyncPeriod": {
              "aliases": [],
              "description": "Period for synchronization of changed or newly created LDAP users in seconds.",
              "default": "-1",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "connectionPooling": {
              "aliases": [],
              "description": "Determines if Keycloak should use connection pooling for accessing LDAP server.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "connectionPoolingAuthentication": {
              "aliases": [],
              "description": "A list of space-separated authentication types of connections that may be pooled.",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "simple",
                "DIGEST-MD5"
              ],
              "suboptions": {}
            },
            "connectionPoolingDebug": {
              "aliases": [],
              "description": "A string that indicates the level of debug output to produce. Example valid values are C(fine) (trace connection creation and removal) and C(all) (all debugging information).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "connectionPoolingInitSize": {
              "aliases": [],
              "description": "The number of connections per connection identity to create when initially creating a connection for the identity.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "connectionPoolingMaxSize": {
              "aliases": [],
              "description": "The maximum number of connections per connection identity that can be maintained concurrently.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "connectionPoolingPrefSize": {
              "aliases": [],
              "description": "The preferred number of connections per connection identity that should be maintained concurrently.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "connectionPoolingProtocol": {
              "aliases": [],
              "description": "A list of space-separated protocol types of connections that may be pooled. Valid types are C(plain) and C(ssl).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "connectionPoolingTimeout": {
              "aliases": [],
              "description": "The number of milliseconds that an idle connection may remain in the pool without being closed and removed from the pool.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "connectionTimeout": {
              "aliases": [],
              "description": "LDAP Connection Timeout in milliseconds.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "connectionUrl": {
              "aliases": [],
              "description": "Connection URL to your LDAP server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "customUserSearchFilter": {
              "aliases": [],
              "description": "Additional LDAP Filter for filtering searched users. Leave this empty if you don't need additional filter.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "debug": {
              "aliases": [],
              "description": "Enable/disable debug logging to standard output for Krb5LoginModule.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "editMode": {
              "aliases": [],
              "description": "C(READ_ONLY) is a read-only LDAP store. C(WRITABLE) means data will be synced back to LDAP on demand. C(UNSYNCED) means user data will be imported, but not synced back to LDAP.",
              "type": "str",
              "required": false,
              "choices": [
                "READ_ONLY",
                "WRITABLE",
                "UNSYNCED"
              ],
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Enable/disable this user federation.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "evictionDay": {
              "aliases": [],
              "description": "Day of the week the entry will become invalid on.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "evictionHour": {
              "aliases": [],
              "description": "Hour of day the entry will become invalid on.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "evictionMinute": {
              "aliases": [],
              "description": "Minute of day the entry will become invalid on.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "fullSyncPeriod": {
              "aliases": [],
              "description": "Period for full synchronization in seconds.",
              "default": "-1",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "importEnabled": {
              "aliases": [],
              "description": "If C(true), LDAP users will be imported into Keycloak DB and synced by the configured sync policies.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberosRealm": {
              "aliases": [],
              "description": "Name of kerberos realm.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "keyTab": {
              "aliases": [],
              "description": "Location of Kerberos KeyTab file containing the credentials of server principal. For example C(/etc/krb5.keytab).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "maxLifespan": {
              "aliases": [],
              "description": "Max lifespan of cache entry in milliseconds.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "pagination": {
              "aliases": [],
              "description": "Does the LDAP server support pagination.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "priority": {
              "aliases": [],
              "description": "Priority of provider when doing a user lookup. Lowest first.",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "rdnLDAPAttribute": {
              "aliases": [],
              "description": "Name of LDAP attribute, which is used as RDN (top attribute) of typical user DN. Usually it's the same as Username LDAP attribute, however it is not required. For example for Active directory, it is common to use C(cn) as RDN attribute when username attribute might be C(sAMAccountName).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "readTimeout": {
              "aliases": [],
              "description": "LDAP Read Timeout in milliseconds. This timeout applies for LDAP read operations.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "searchScope": {
              "aliases": [],
              "description": "For one level, the search applies only for users in the DNs specified by User DNs. For subtree, the search applies to the whole subtree. See LDAP documentation for more details.",
              "default": "1",
              "type": "str",
              "required": false,
              "choices": [
                "1",
                "2"
              ],
              "suboptions": {}
            },
            "serverPrincipal": {
              "aliases": [],
              "description": "Full name of server principal for HTTP service including server and domain name. For example C(HTTP/host.foo.org@FOO.ORG). Use C(*) to accept any service principal in the KeyTab file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTls": {
              "aliases": [],
              "description": "Encrypts the connection to LDAP using STARTTLS, which will disable connection pooling.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "syncRegistrations": {
              "aliases": [],
              "description": "Should newly created users be created within LDAP store? Priority effects which provider is chosen to sync the new user.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "trustEmail": {
              "aliases": [],
              "description": "If enabled, email provided by this provider is not verified even if verification is enabled for the realm.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "updateProfileFirstLogin": {
              "aliases": [],
              "description": "Update profile on first login.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "useKerberosForPasswordAuthentication": {
              "aliases": [],
              "description": "Use Kerberos login module for authenticate username/password against Kerberos server instead of authenticating against LDAP server with Directory Service API.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "usePasswordModifyExtendedOp": {
              "aliases": [],
              "description": "Use the LDAPv3 Password Modify Extended Operation (RFC-3062). The password modify extended operation usually requires that LDAP user already has password in the LDAP server. So when this is used with 'Sync Registrations', it can be good to add also 'Hardcoded LDAP attribute mapper' with randomly generated initial password.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "useTruststoreSpi": {
              "aliases": [],
              "description": "Specifies whether LDAP connection will use the truststore SPI with the truststore configured in standalone.xml/domain.xml. C(Always) means that it will always use it. C(Never) means that it will not use it. C(Only for ldaps) means that it will use if your connection URL use ldaps. Note even if standalone.xml/domain.xml is not configured, the default Java cacerts or certificate specified by C(javax.net.ssl.trustStore) property will be used.",
              "default": "ldapsOnly",
              "type": "str",
              "required": false,
              "choices": [
                "always",
                "ldapsOnly",
                "never"
              ],
              "suboptions": {}
            },
            "userObjectClasses": {
              "aliases": [],
              "description": "All values of LDAP objectClass attribute for users in LDAP divided by comma. For example C(inetOrgPerson, organizationalPerson). Newly created Keycloak users will be written to LDAP with all those object classes and existing LDAP user records are found just if they contain all those object classes.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "usernameLDAPAttribute": {
              "aliases": [],
              "description": "Name of LDAP attribute, which is mapped as Keycloak username. For many LDAP server vendors it can be C(uid). For Active directory it can be C(sAMAccountName) or C(cn). The attribute should be filled for all LDAP user records you want to import from LDAP to Keycloak.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "usersDn": {
              "aliases": [],
              "description": "Full DN of LDAP tree where your users are. This DN is the parent of LDAP users.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "uuidLDAPAttribute": {
              "aliases": [],
              "description": "Name of LDAP attribute, which is used as unique object identifier (UUID) for objects in LDAP. For many LDAP server vendors, it is C(entryUUID); however some are different. For example for Active directory it should be C(objectGUID). If your LDAP server does not support the notion of UUID, you can use any other attribute that is supposed to be unique among LDAP users in tree.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validatePasswordPolicy": {
              "aliases": [],
              "description": "Determines if Keycloak should validate the password with the realm password policy before updating it.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vendor": {
              "aliases": [],
              "description": "LDAP vendor (provider).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "The unique ID for this user federation. If left empty, the user federation will be searched by its I(name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mappers": {
          "aliases": [],
          "description": "A list of dicts defining mappers associated with this Identity Provider.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "config": {
              "aliases": [],
              "description": "Dict specifying the configuration options for the mapper; the contents differ depending on the value of I(identityProviderMapper).",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "Unique ID of this mapper.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the mapper. If no ID is given, the mapper will be searched by name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "parentId": {
              "aliases": [],
              "description": "Unique ID for the parent of this mapper. ID of the user federation will automatically be used if left blank.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "providerId": {
              "aliases": [],
              "description": "The mapper type for this mapper (for instance C(user-attribute-ldap-mapper)).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "providerType": {
              "aliases": [],
              "description": "Component type for this mapper (only supported value is C(org.keycloak.storage.ldap.mappers.LDAPStorageMapper)).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Display name of provider when linked in admin console.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parent_id": {
          "aliases": [
            "parentId"
          ],
          "description": "Unique ID for the parent of this user federation. Realm ID will be automatically used if left blank.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_id": {
          "aliases": [
            "providerId"
          ],
          "description": "Provider for this user federation.",
          "type": "str",
          "required": false,
          "choices": [
            "ldap",
            "kerberos",
            "sssd"
          ],
          "suboptions": {}
        },
        "provider_type": {
          "aliases": [
            "providerType"
          ],
          "description": "Component type for user federation (only supported value is C(org.keycloak.storage.UserStorageProvider)).",
          "default": "org.keycloak.storage.UserStorageProvider",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "realm": {
          "aliases": [],
          "description": "The Keycloak realm under which this user federation resides.",
          "default": "master",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the user federation.\nOn C(present), the user federation will be created if it does not yet exist, or updated with the parameters you provide.\nOn C(absent), the user federation will be removed if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for Keycloak API.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Verify TLS certificates (do not disable this in production).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Allows administration of Keycloak user federations via Keycloak API",
      "version_added": "3.7.0"
    },
    "examples": "\n  - name: Create LDAP user federation\n    community.general.keycloak_user_federation:\n      auth_keycloak_url: https://keycloak.example.com/auth\n      auth_realm: master\n      auth_username: admin\n      auth_password: password\n      realm: my-realm\n      name: my-ldap\n      state: present\n      provider_id: ldap\n      provider_type: org.keycloak.storage.UserStorageProvider\n      config:\n        priority: 0\n        enabled: true\n        cachePolicy: DEFAULT\n        batchSizeForSync: 1000\n        editMode: READ_ONLY\n        importEnabled: true\n        syncRegistrations: false\n        vendor: other\n        usernameLDAPAttribute: uid\n        rdnLDAPAttribute: uid\n        uuidLDAPAttribute: entryUUID\n        userObjectClasses: inetOrgPerson, organizationalPerson\n        connectionUrl: ldaps://ldap.example.com:636\n        usersDn: ou=Users,dc=example,dc=com\n        authType: simple\n        bindDn: cn=directory reader\n        bindCredential: password\n        searchScope: 1\n        validatePasswordPolicy: false\n        trustEmail: false\n        useTruststoreSpi: ldapsOnly\n        connectionPooling: true\n        pagination: true\n        allowKerberosAuthentication: false\n        debug: false\n        useKerberosForPasswordAuthentication: false\n      mappers:\n        - name: \"full name\"\n          providerId: \"full-name-ldap-mapper\"\n          providerType: \"org.keycloak.storage.ldap.mappers.LDAPStorageMapper\"\n          config:\n            ldap.full.name.attribute: cn\n            read.only: true\n            write.only: false\n\n  - name: Create Kerberos user federation\n    community.general.keycloak_user_federation:\n      auth_keycloak_url: https://keycloak.example.com/auth\n      auth_realm: master\n      auth_username: admin\n      auth_password: password\n      realm: my-realm\n      name: my-kerberos\n      state: present\n      provider_id: kerberos\n      provider_type: org.keycloak.storage.UserStorageProvider\n      config:\n        priority: 0\n        enabled: true\n        cachePolicy: DEFAULT\n        kerberosRealm: EXAMPLE.COM\n        serverPrincipal: HTTP/host.example.com@EXAMPLE.COM\n        keyTab: keytab\n        allowPasswordAuthentication: false\n        updateProfileFirstLogin: false\n\n  - name: Create sssd user federation\n    community.general.keycloak_user_federation:\n      auth_keycloak_url: https://keycloak.example.com/auth\n      auth_realm: master\n      auth_username: admin\n      auth_password: password\n      realm: my-realm\n      name: my-sssd\n      state: present\n      provider_id: sssd\n      provider_type: org.keycloak.storage.UserStorageProvider\n      config:\n        priority: 0\n        enabled: true\n        cachePolicy: DEFAULT\n\n  - name: Delete user federation\n    community.general.keycloak_user_federation:\n      auth_keycloak_url: https://keycloak.example.com/auth\n      auth_realm: master\n      auth_username: admin\n      auth_password: password\n      realm: my-realm\n      name: my-federation\n      state: absent\n\n"
  },
  "community.general.kibana_plugin": {
    "doc": {
      "description": "This module can be used to manage Kibana plugins.",
      "has_action": false,
      "options": {
        "allow_root": {
          "aliases": [],
          "description": "Whether to allow C(kibana) and C(kibana-plugin) to be run as root. Passes the C(--allow-root) flag to these commands.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Delete and re-install the plugin. Can be useful for plugins update.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the plugin to install.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "plugin_bin": {
          "aliases": [],
          "description": "Location of the Kibana binary.",
          "default": "/opt/kibana/bin/kibana",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "plugin_dir": {
          "aliases": [],
          "description": "Your configured plugin directory specified in Kibana.",
          "default": "/opt/kibana/installedPlugins/",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of a plugin.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout setting: 30s, 1m, 1h etc.",
          "default": "1m",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Set exact URL to download the plugin from.\nFor local file, prefix its absolute path with file://",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Version of the plugin to be installed.\nIf plugin exists with previous version, plugin will NOT be updated unless C(force) is set to yes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Kibana plugins"
    },
    "examples": "\n- name: Install Elasticsearch head plugin\n  community.general.kibana_plugin:\n    state: present\n    name: elasticsearch/marvel\n\n- name: Install specific version of a plugin\n  community.general.kibana_plugin:\n    state: present\n    name: elasticsearch/marvel\n    version: '2.3.3'\n\n- name: Uninstall Elasticsearch head plugin\n  community.general.kibana_plugin:\n    state: absent\n    name: elasticsearch/marvel\n"
  },
  "community.general.launchd": {
    "doc": {
      "description": "Manage launchd services on target macOS hosts.",
      "has_action": false,
      "notes": "A user must privileged to manage services using this module.",
      "options": {
        "enabled": {
          "aliases": [],
          "description": "Whether the service should start on boot.\nB(At least one of state and enabled are required.)",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_stop": {
          "aliases": [],
          "description": "Whether the service should not be restarted automatically by launchd.\nServices might have the 'KeepAlive' attribute set to true in a launchd configuration. In case this is set to true, stopping a service will cause that launchd starts the service again.\nSet this option to C(yes) to let this module change the 'KeepAlive' attribute to false.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the service.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\nLaunchd does not support C(restarted) nor C(reloaded) natively. These will trigger a stop/start (restarted) or an unload/load (reloaded).\nC(restarted) unloads and loads the service before start to ensure that the latest job definition (plist) is used.\nC(reloaded) unloads and loads the service to ensure that the latest job definition (plist) is used. Whether a service is started or stopped depends on the content of the definition file.",
          "type": "str",
          "required": false,
          "choices": [
            "reloaded",
            "restarted",
            "started",
            "stopped",
            "unloaded"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "A system managed by launchd",
        "The plistlib python library"
      ],
      "short_description": "Manage macOS services",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Make sure spotify webhelper is started\n  community.general.launchd:\n    name: com.spotify.webhelper\n    state: started\n\n- name: Deploy custom memcached job definition\n  template:\n    src: org.memcached.plist.j2\n    dest: /Library/LaunchDaemons/org.memcached.plist\n\n- name: Run memcached\n  community.general.launchd:\n    name: org.memcached\n    state: started\n\n- name: Stop memcached\n  community.general.launchd:\n    name: org.memcached\n    state: stopped\n\n- name: Stop memcached\n  community.general.launchd:\n    name: org.memcached\n    state: stopped\n    force_stop: yes\n\n- name: Restart memcached\n  community.general.launchd:\n    name: org.memcached\n    state: restarted\n\n- name: Unload memcached\n  community.general.launchd:\n    name: org.memcached\n    state: unloaded\n"
  },
  "community.general.layman": {
    "doc": {
      "description": "Uses Layman to manage an additional repositories for the Portage package manager on Gentoo Linux. Please note that Layman must be installed on a managed node prior using this module.",
      "has_action": false,
      "options": {
        "list_url": {
          "aliases": [
            "url"
          ],
          "description": "An URL of the alternative overlays list that defines the overlay to install. This list will be fetched and saved under C(${overlay_defs})/${name}.xml), where C(overlay_defs) is readed from the Layman's configuration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The overlay id to install, synchronize, or uninstall. Use 'ALL' to sync all of the installed overlays (can be used only when C(state=updated)).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to install (C(present)), sync (C(updated)), or uninstall (C(absent)) the overlay.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "updated"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be set to C(no) when no other option exists.  Prior to 1.9.3 the code defaulted to C(no).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "layman python module"
      ],
      "short_description": "Manage Gentoo overlays"
    },
    "examples": "\n- name: Install the overlay mozilla which is on the central overlays list\n  community.general.layman:\n    name: mozilla\n\n- name: Install the overlay cvut from the specified alternative list\n  community.general.layman:\n    name: cvut\n    list_url: 'http://raw.github.com/cvut/gentoo-overlay/master/overlay.xml'\n\n- name: Update (sync) the overlay cvut or install if not installed yet\n  community.general.layman:\n    name: cvut\n    list_url: 'http://raw.github.com/cvut/gentoo-overlay/master/overlay.xml'\n    state: updated\n\n- name: Update (sync) all of the installed overlays\n  community.general.layman:\n    name: ALL\n    state: updated\n\n- name: Uninstall the overlay cvut\n  community.general.layman:\n    name: cvut\n    state: absent\n"
  },
  "community.general.lbu": {
    "doc": {
      "description": "Manage Local Backup Utility of Alpine Linux in run-from-RAM mode",
      "has_action": false,
      "options": {
        "commit": {
          "aliases": [],
          "description": "Control whether to commit changed files.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude": {
          "aliases": [],
          "description": "List of paths to exclude.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "include": {
          "aliases": [],
          "description": "List of paths to include.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Local Backup Utility for Alpine Linux",
      "version_added": "0.2.0"
    },
    "examples": "\n# Commit changed files (if any)\n- name: Commit\n  community.general.lbu:\n    commit: true\n\n# Exclude path and commit\n- name: Exclude directory\n  community.general.lbu:\n    commit: true\n    exclude:\n    - /etc/opt\n\n# Include paths without committing\n- name: Include file and directory\n  community.general.lbu:\n    include:\n    - /root/.ssh/authorized_keys\n    - /var/lib/misc\n"
  },
  "community.general.ldap_attrs": {
    "doc": {
      "description": "Add or remove multiple LDAP attribute values.",
      "has_action": false,
      "notes": "This only deals with attributes on existing entries. To add or remove whole entries, see M(community.general.ldap_entry).\nThe default authentication settings will attempt to use a SASL EXTERNAL bind over a UNIX domain socket. This works well with the default Ubuntu install for example, which includes a cn=peercred,cn=external,cn=auth ACL rule allowing root to modify the server configuration. If you need to use a simple bind to access your server, pass the credentials in I(bind_dn) and I(bind_pw).\nFor I(state=present) and I(state=absent), all value comparisons are performed on the server for maximum accuracy. For I(state=exact), values have to be compared in Python, which obviously ignores LDAP matching rules. This should work out in most cases, but it is theoretically possible to see spurious changes when target and actual values are semantically identical but lexically distinct.",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "The attribute(s) and value(s) to add or remove. The complex argument format is required in order to pass a list of strings (see examples).",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "bind_dn": {
          "aliases": [],
          "description": "A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism as default.\nIf this is blank, we'll use an anonymous bind.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bind_pw": {
          "aliases": [],
          "description": "The password to use with I(bind_dn).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dn": {
          "aliases": [],
          "description": "The DN of the entry to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ordered": {
          "aliases": [],
          "description": "If C(yes), prepend list values with X-ORDERED index numbers in all attributes specified in the current task. This is useful mostly with I(olcAccess) attribute to easily manage LDAP Access Control Lists.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "referrals_chasing": {
          "aliases": [],
          "description": "Set the referrals chasing behavior.\nC(anonymous) follow referrals anonymously. This is the default behavior.\nC(disabled) disable referrals chasing. This sets C(OPT_REFERRALS) to off.",
          "default": "anonymous",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "anonymous"
          ],
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "sasl_class": {
          "aliases": [],
          "description": "The class to use for SASL authentication.\npossible choices are C(external), C(gssapi).",
          "default": "external",
          "type": "str",
          "required": false,
          "choices": [
            "external",
            "gssapi"
          ],
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "server_uri": {
          "aliases": [],
          "description": "A URI to the LDAP server.\nThe default value lets the underlying LDAP client library look for a UNIX domain socket in its default location.",
          "default": "ldapi:///",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_tls": {
          "aliases": [],
          "description": "If true, we'll use the START_TLS LDAP extension.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the attribute values. If C(present), all given attribute values will be added if they're missing. If C(absent), all given attribute values will be removed if present. If C(exact), the set of attribute values will be forced to exactly those provided and no others. If I(state=exact) and the attribute I(value) is empty, all values for this attribute will be removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "exact"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), SSL certificates will not be validated.\nThis should only be used on sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-ldap"
      ],
      "short_description": "Add or remove multiple LDAP attribute values",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Configure directory number 1 for example.com\n  community.general.ldap_attrs:\n    dn: olcDatabase={1}hdb,cn=config\n    attributes:\n        olcSuffix: dc=example,dc=com\n    state: exact\n\n# The complex argument format is required here to pass a list of ACL strings.\n- name: Set up the ACL\n  community.general.ldap_attrs:\n    dn: olcDatabase={1}hdb,cn=config\n    attributes:\n        olcAccess:\n          - >-\n            {0}to attrs=userPassword,shadowLastChange\n            by self write\n            by anonymous auth\n            by dn=\"cn=admin,dc=example,dc=com\" write\n            by * none'\n          - >-\n            {1}to dn.base=\"dc=example,dc=com\"\n            by dn=\"cn=admin,dc=example,dc=com\" write\n            by * read\n    state: exact\n\n# An alternative approach with automatic X-ORDERED numbering\n- name: Set up the ACL\n  community.general.ldap_attrs:\n    dn: olcDatabase={1}hdb,cn=config\n    attributes:\n        olcAccess:\n          - >-\n            to attrs=userPassword,shadowLastChange\n            by self write\n            by anonymous auth\n            by dn=\"cn=admin,dc=example,dc=com\" write\n            by * none'\n          - >-\n            to dn.base=\"dc=example,dc=com\"\n            by dn=\"cn=admin,dc=example,dc=com\" write\n            by * read\n    ordered: yes\n    state: exact\n\n- name: Declare some indexes\n  community.general.ldap_attrs:\n    dn: olcDatabase={1}hdb,cn=config\n    attributes:\n        olcDbIndex:\n            - objectClass eq\n            - uid eq\n\n- name: Set up a root user, which we can use later to bootstrap the directory\n  community.general.ldap_attrs:\n    dn: olcDatabase={1}hdb,cn=config\n    attributes:\n        olcRootDN: cn=root,dc=example,dc=com\n        olcRootPW: \"{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND\"\n    state: exact\n\n- name: Remove an attribute with a specific value\n  community.general.ldap_attrs:\n    dn: uid=jdoe,ou=people,dc=example,dc=com\n    attributes:\n        description: \"An example user account\"\n    state: absent\n    server_uri: ldap://localhost/\n    bind_dn: cn=admin,dc=example,dc=com\n    bind_pw: password\n\n- name: Remove specified attribute(s) from an entry\n  community.general.ldap_attrs:\n    dn: uid=jdoe,ou=people,dc=example,dc=com\n    attributes:\n        description: []\n    state: exact\n    server_uri: ldap://localhost/\n    bind_dn: cn=admin,dc=example,dc=com\n    bind_pw: password\n"
  },
  "community.general.ldap_entry": {
    "doc": {
      "description": "Add or remove LDAP entries. This module only asserts the existence or non-existence of an LDAP entry, not its attributes. To assert the attribute values of an entry, see M(community.general.ldap_attrs).",
      "has_action": false,
      "notes": "The default authentication settings will attempt to use a SASL EXTERNAL bind over a UNIX domain socket. This works well with the default Ubuntu install for example, which includes a cn=peercred,cn=external,cn=auth ACL rule allowing root to modify the server configuration. If you need to use a simple bind to access your server, pass the credentials in I(bind_dn) and I(bind_pw).",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "If I(state=present), attributes necessary to create an entry. Existing entries are never modified. To assert specific attribute values on an existing entry, use M(community.general.ldap_attrs) module instead.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "bind_dn": {
          "aliases": [],
          "description": "A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism as default.\nIf this is blank, we'll use an anonymous bind.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bind_pw": {
          "aliases": [],
          "description": "The password to use with I(bind_dn).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dn": {
          "aliases": [],
          "description": "The DN of the entry to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "objectClass": {
          "aliases": [],
          "description": "If I(state=present), value or list of values to use when creating the entry. It can either be a string or an actual list of strings.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "referrals_chasing": {
          "aliases": [],
          "description": "Set the referrals chasing behavior.\nC(anonymous) follow referrals anonymously. This is the default behavior.\nC(disabled) disable referrals chasing. This sets C(OPT_REFERRALS) to off.",
          "default": "anonymous",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "anonymous"
          ],
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "sasl_class": {
          "aliases": [],
          "description": "The class to use for SASL authentication.\npossible choices are C(external), C(gssapi).",
          "default": "external",
          "type": "str",
          "required": false,
          "choices": [
            "external",
            "gssapi"
          ],
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "server_uri": {
          "aliases": [],
          "description": "A URI to the LDAP server.\nThe default value lets the underlying LDAP client library look for a UNIX domain socket in its default location.",
          "default": "ldapi:///",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_tls": {
          "aliases": [],
          "description": "If true, we'll use the START_TLS LDAP extension.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The target state of the entry.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), SSL certificates will not be validated.\nThis should only be used on sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-ldap"
      ],
      "short_description": "Add or remove LDAP entries."
    },
    "examples": "\n- name: Make sure we have a parent entry for users\n  community.general.ldap_entry:\n    dn: ou=users,dc=example,dc=com\n    objectClass: organizationalUnit\n\n- name: Make sure we have an admin user\n  community.general.ldap_entry:\n    dn: cn=admin,dc=example,dc=com\n    objectClass:\n      - simpleSecurityObject\n      - organizationalRole\n    attributes:\n      description: An LDAP administrator\n      userPassword: \"{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND\"\n\n- name: Get rid of an old entry\n  community.general.ldap_entry:\n    dn: ou=stuff,dc=example,dc=com\n    state: absent\n    server_uri: ldap://localhost/\n    bind_dn: cn=admin,dc=example,dc=com\n    bind_pw: password\n\n#\n# The same as in the previous example but with the authentication details\n# stored in the ldap_auth variable:\n#\n# ldap_auth:\n#   server_uri: ldap://localhost/\n#   bind_dn: cn=admin,dc=example,dc=com\n#   bind_pw: password\n#\n# In the example below, 'args' is a task keyword, passed at the same level as the module\n- name: Get rid of an old entry\n  community.general.ldap_entry:\n    dn: ou=stuff,dc=example,dc=com\n    state: absent\n  args: \"{{ ldap_auth }}\"\n"
  },
  "community.general.ldap_passwd": {
    "doc": {
      "description": "Set a password for an LDAP entry.  This module only asserts that a given password is valid for a given entry.  To assert the existence of an entry, see M(community.general.ldap_entry).",
      "has_action": false,
      "notes": "The default authentication settings will attempt to use a SASL EXTERNAL bind over a UNIX domain socket. This works well with the default Ubuntu install for example, which includes a cn=peercred,cn=external,cn=auth ACL rule allowing root to modify the server configuration. If you need to use a simple bind to access your server, pass the credentials in I(bind_dn) and I(bind_pw).",
      "options": {
        "bind_dn": {
          "aliases": [],
          "description": "A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism as default.\nIf this is blank, we'll use an anonymous bind.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bind_pw": {
          "aliases": [],
          "description": "The password to use with I(bind_dn).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dn": {
          "aliases": [],
          "description": "The DN of the entry to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "passwd": {
          "aliases": [],
          "description": "The (plaintext) password to be set for I(dn).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "referrals_chasing": {
          "aliases": [],
          "description": "Set the referrals chasing behavior.\nC(anonymous) follow referrals anonymously. This is the default behavior.\nC(disabled) disable referrals chasing. This sets C(OPT_REFERRALS) to off.",
          "default": "anonymous",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "anonymous"
          ],
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "sasl_class": {
          "aliases": [],
          "description": "The class to use for SASL authentication.\npossible choices are C(external), C(gssapi).",
          "default": "external",
          "type": "str",
          "required": false,
          "choices": [
            "external",
            "gssapi"
          ],
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "server_uri": {
          "aliases": [],
          "description": "A URI to the LDAP server.\nThe default value lets the underlying LDAP client library look for a UNIX domain socket in its default location.",
          "default": "ldapi:///",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_tls": {
          "aliases": [],
          "description": "If true, we'll use the START_TLS LDAP extension.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), SSL certificates will not be validated.\nThis should only be used on sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-ldap"
      ],
      "short_description": "Set passwords in LDAP."
    },
    "examples": "\n- name: Set a password for the admin user\n  community.general.ldap_passwd:\n    dn: cn=admin,dc=example,dc=com\n    passwd: \"{{ vault_secret }}\"\n\n- name: Setting passwords in bulk\n  community.general.ldap_passwd:\n    dn: \"{{ item.key }}\"\n    passwd: \"{{ item.value }}\"\n  with_dict:\n    alice: alice123123\n    bob:   \"|30b!\"\n    admin: \"{{ vault_secret }}\"\n"
  },
  "community.general.ldap_search": {
    "doc": {
      "description": "Return the results of an LDAP search.",
      "has_action": false,
      "notes": "The default authentication settings will attempt to use a SASL EXTERNAL bind over a UNIX domain socket. This works well with the default Ubuntu install for example, which includes a C(cn=peercred,cn=external,cn=auth) ACL rule allowing root to modify the server configuration. If you need to use a simple bind to access your server, pass the credentials in I(bind_dn) and I(bind_pw).",
      "options": {
        "attrs": {
          "aliases": [],
          "description": "A list of attributes for limiting the result. Use an actual list or a comma-separated string.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "bind_dn": {
          "aliases": [],
          "description": "A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism as default.\nIf this is blank, we'll use an anonymous bind.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bind_pw": {
          "aliases": [],
          "description": "The password to use with I(bind_dn).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dn": {
          "aliases": [],
          "description": "The LDAP DN to search in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "Used for filtering the LDAP search result.",
          "default": "(objectClass=*)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "referrals_chasing": {
          "aliases": [],
          "description": "Set the referrals chasing behavior.\nC(anonymous) follow referrals anonymously. This is the default behavior.\nC(disabled) disable referrals chasing. This sets C(OPT_REFERRALS) to off.",
          "default": "anonymous",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "anonymous"
          ],
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "sasl_class": {
          "aliases": [],
          "description": "The class to use for SASL authentication.\npossible choices are C(external), C(gssapi).",
          "default": "external",
          "type": "str",
          "required": false,
          "choices": [
            "external",
            "gssapi"
          ],
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Set to C(true) to return the full attribute schema of entries, not their attribute values. Overrides I(attrs) when provided.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "The LDAP scope to use.",
          "default": "base",
          "type": "str",
          "required": false,
          "choices": [
            "base",
            "onelevel",
            "subordinate",
            "children"
          ],
          "suboptions": {}
        },
        "server_uri": {
          "aliases": [],
          "description": "A URI to the LDAP server.\nThe default value lets the underlying LDAP client library look for a UNIX domain socket in its default location.",
          "default": "ldapi:///",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_tls": {
          "aliases": [],
          "description": "If true, we'll use the START_TLS LDAP extension.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If set to C(no), SSL certificates will not be validated.\nThis should only be used on sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-ldap"
      ],
      "short_description": "Search for entries in a LDAP server",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Return all entries within the 'groups' organizational unit.\n  community.general.ldap_search:\n    dn: \"ou=groups,dc=example,dc=com\"\n  register: ldap_groups\n\n- name: Return GIDs for all groups\n  community.general.ldap_search:\n    dn: \"ou=groups,dc=example,dc=com\"\n    scope: \"onelevel\"\n    attrs:\n      - \"gidNumber\"\n  register: ldap_group_gids\n"
  },
  "community.general.librato_annotation": {
    "doc": {
      "description": "Create an annotation event on the given annotation stream :name. If the annotation stream does not exist, it will be created automatically",
      "has_action": false,
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Librato account api key",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description contains extra metadata about a particular annotation\nThe description should contain specifics on the individual annotation e.g. Deployed 9b562b2 shipped new feature foo!",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_time": {
          "aliases": [],
          "description": "The unix timestamp indicating the time at which the event referenced by this annotation ended\nFor events that have a duration, this is a useful way to annotate the duration of the event",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "links": {
          "aliases": [],
          "description": "See examples",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The annotation stream name\nIf the annotation stream does not exist, it will be created automatically",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "A string which describes the originating source of an annotation when that annotation is tracked across multiple members of a population",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_time": {
          "aliases": [],
          "description": "The unix timestamp indicating the time at which the event referenced by this annotation started",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "The title of an annotation is a string and may contain spaces\nThe title should be a short, high-level summary of the annotation e.g. v45 Deployment",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Librato account username",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [],
      "short_description": "create an annotation in librato"
    },
    "examples": "\n- name: Create a simple annotation event with a source\n  community.general.librato_annotation:\n    user: user@example.com\n    api_key: XXXXXXXXXXXXXXXXX\n    title: App Config Change\n    source: foo.bar\n    description: This is a detailed description of the config change\n\n- name: Create an annotation that includes a link\n  community.general.librato_annotation:\n    user: user@example.com\n    api_key: XXXXXXXXXXXXXXXXXX\n    name: code.deploy\n    title: app code deploy\n    description: this is a detailed description of a deployment\n    links:\n      - rel: example\n        href: http://www.example.com/deploy\n\n- name: Create an annotation with a start_time and end_time\n  community.general.librato_annotation:\n    user: user@example.com\n    api_key: XXXXXXXXXXXXXXXXXX\n    name: maintenance\n    title: Maintenance window\n    description: This is a detailed description of maintenance\n    start_time: 1395940006\n    end_time: 1395954406\n"
  },
  "community.general.linode": {
    "doc": {
      "description": "Manage Linode Public Cloud instances and optionally wait for it to be 'running'.",
      "has_action": false,
      "notes": "Please note, linode-python does not have python 3 support.\nThis module uses the now deprecated v3 of the Linode API.\nPlease review U(https://www.linode.com/api/linode) for determining the required parameters.",
      "options": {
        "additional_disks": {
          "aliases": [],
          "description": "List of dictionaries for creating additional disks that are added to the Linode configuration settings.\nDictionary takes Size, Label, Type. Size is in MB.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "alert_bwin_enabled": {
          "aliases": [],
          "description": "Set status of bandwidth in alerts.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "alert_bwin_threshold": {
          "aliases": [],
          "description": "Set threshold in MB of bandwidth in alerts.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "alert_bwout_enabled": {
          "aliases": [],
          "description": "Set status of bandwidth out alerts.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "alert_bwout_threshold": {
          "aliases": [],
          "description": "Set threshold in MB of bandwidth out alerts.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "alert_bwquota_enabled": {
          "aliases": [],
          "description": "Set status of bandwidth quota alerts as percentage of network transfer quota.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "alert_bwquota_threshold": {
          "aliases": [],
          "description": "Set threshold in MB of bandwidth quota alerts.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "alert_cpu_enabled": {
          "aliases": [],
          "description": "Set status of receiving CPU usage alerts.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "alert_cpu_threshold": {
          "aliases": [],
          "description": "Set percentage threshold for receiving CPU usage alerts. Each CPU core adds 100% to total.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "alert_diskio_enabled": {
          "aliases": [],
          "description": "Set status of receiving disk IO alerts.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "alert_diskio_threshold": {
          "aliases": [],
          "description": "Set threshold for average IO ops/sec over 2 hour period.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "Linode API key.\nC(LINODE_API_KEY) env variable can be used instead.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "backupsenabled": {
          "aliases": [],
          "description": "Deprecated parameter, it will be removed in community.general C(5.0.0).\nTo enable backups pass values to either I(backupweeklyday) or I(backupwindow).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "backupweeklyday": {
          "aliases": [],
          "description": "Day of the week to take backups.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "backupwindow": {
          "aliases": [],
          "description": "The time window in which backups will be taken.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "datacenter to create an instance in (Linode Datacenter)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "displaygroup": {
          "aliases": [],
          "description": "Add the instance to a Display Group in Linode Manager.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "distribution": {
          "aliases": [],
          "description": "distribution to use for the instance (Linode Distribution)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "kernel_id": {
          "aliases": [],
          "description": "kernel to use for the instance (Linode Kernel)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "linode_id": {
          "aliases": [
            "lid"
          ],
          "description": "Unique ID of a linode server. This value is read-only in the sense that if you specify it on creation of a Linode it will not be used. The Linode API generates these IDs and we can those generated value here to reference a Linode more specifically. This is useful for idempotence.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to give the instance (alphanumeric, dashes, underscore).\nTo keep sanity on the Linode Web Console, name is prepended with C(LinodeID-).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "root password to apply to a new server (auto generated if missing)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "payment_term": {
          "aliases": [],
          "description": "payment term to use for the instance (payment term in months)",
          "default": "1",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "12",
            "24"
          ],
          "suboptions": {}
        },
        "plan": {
          "aliases": [],
          "description": "plan to use for the instance (Linode plan)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "private_ip": {
          "aliases": [],
          "description": "Add private IPv4 address when Linode is created.\nDefault is C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssh_pub_key": {
          "aliases": [],
          "description": "SSH public key applied to root user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "active",
            "deleted",
            "present",
            "restarted",
            "started",
            "stopped"
          ],
          "suboptions": {}
        },
        "swap": {
          "aliases": [],
          "description": "swap size in MB",
          "default": "512",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state C(running) before returning",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "watchdog": {
          "aliases": [],
          "description": "Set status of Lassie watchdog.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "linode-python"
      ],
      "short_description": "Manage instances on the Linode Public Cloud"
    },
    "examples": "\n\n- name: Create a new Linode\n  community.general.linode:\n    name: linode-test1\n    plan: 1\n    datacenter: 7\n    distribution: 129\n    state: present\n  register: linode_creation\n\n- name: Create a server with a private IP Address\n  community.general.linode:\n     module: linode\n     api_key: 'longStringFromLinodeApi'\n     name: linode-test1\n     plan: 1\n     datacenter: 2\n     distribution: 99\n     password: 'superSecureRootPassword'\n     private_ip: yes\n     ssh_pub_key: 'ssh-rsa qwerty'\n     swap: 768\n     wait: yes\n     wait_timeout: 600\n     state: present\n  delegate_to: localhost\n  register: linode_creation\n\n- name: Fully configure new server\n  community.general.linode:\n     api_key: 'longStringFromLinodeApi'\n     name: linode-test1\n     plan: 4\n     datacenter: 2\n     distribution: 99\n     kernel_id: 138\n     password: 'superSecureRootPassword'\n     private_ip: yes\n     ssh_pub_key: 'ssh-rsa qwerty'\n     swap: 768\n     wait: yes\n     wait_timeout: 600\n     state: present\n     alert_bwquota_enabled: True\n     alert_bwquota_threshold: 80\n     alert_bwin_enabled: True\n     alert_bwin_threshold: 10\n     alert_cpu_enabled: True\n     alert_cpu_threshold: 210\n     alert_bwout_enabled: True\n     alert_bwout_threshold: 10\n     alert_diskio_enabled: True\n     alert_diskio_threshold: 10000\n     backupweeklyday: 1\n     backupwindow: 2\n     displaygroup: 'test'\n     additional_disks:\n      - {Label: 'disk1', Size: 2500, Type: 'raw'}\n      - {Label: 'newdisk', Size: 2000}\n     watchdog: True\n  delegate_to: localhost\n  register: linode_creation\n\n- name: Ensure a running server (create if missing)\n  community.general.linode:\n     api_key: 'longStringFromLinodeApi'\n     name: linode-test1\n     plan: 1\n     datacenter: 2\n     distribution: 99\n     password: 'superSecureRootPassword'\n     ssh_pub_key: 'ssh-rsa qwerty'\n     swap: 768\n     wait: yes\n     wait_timeout: 600\n     state: present\n  delegate_to: localhost\n  register: linode_creation\n\n- name: Delete a server\n  community.general.linode:\n     api_key: 'longStringFromLinodeApi'\n     name: linode-test1\n     linode_id: \"{{ linode_creation.instance.id }}\"\n     state: absent\n  delegate_to: localhost\n\n- name: Stop a server\n  community.general.linode:\n     api_key: 'longStringFromLinodeApi'\n     name: linode-test1\n     linode_id: \"{{ linode_creation.instance.id }}\"\n     state: stopped\n  delegate_to: localhost\n\n- name: Reboot a server\n  community.general.linode:\n     api_key: 'longStringFromLinodeApi'\n     name: linode-test1\n     linode_id: \"{{ linode_creation.instance.id }}\"\n     state: restarted\n  delegate_to: localhost\n"
  },
  "community.general.linode_v4": {
    "doc": {
      "description": "Manage instances on the Linode cloud.",
      "has_action": false,
      "notes": "No Linode resizing is currently implemented. This module will, in time, replace the current Linode module which uses deprecated API bindings on the Linode side.",
      "options": {
        "access_token": {
          "aliases": [],
          "description": "The Linode API v4 access token. It may also be specified by exposing the C(LINODE_ACCESS_TOKEN) environment variable. See U(https://www.linode.com/docs/api#access-and-authentication).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "authorized_keys": {
          "aliases": [],
          "description": "A list of SSH public key parts to deploy for the root user.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "The group that the instance should be marked under. Please note, that group labelling is deprecated but still supported. The encouraged method for marking instances is to use tags.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The image of the instance. This is a required parameter only when creating Linode instances. See U(https://www.linode.com/docs/api/images/).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "The instance label. This label is used as the main determiner for idempotence for the module and is therefore mandatory.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "private_ip": {
          "aliases": [],
          "description": "If C(true), the created Linode will have private networking enabled and assigned a private IPv4 address.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The region of the instance. This is a required parameter only when creating Linode instances. See U(https://www.linode.com/docs/api/regions/).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "root_pass": {
          "aliases": [],
          "description": "The password for the root user. If not specified, one will be generated. This generated password will be available in the task success JSON.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "stackscript_data": {
          "aliases": [],
          "description": "An object containing arguments to any User Defined Fields present in the StackScript used when creating the instance. Only valid when a stackscript_id is provided. See U(https://www.linode.com/docs/api/stackscripts/).",
          "type": "dict",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "stackscript_id": {
          "aliases": [],
          "description": "The numeric ID of the StackScript to use when creating the instance. See U(https://www.linode.com/docs/api/stackscripts/).",
          "type": "int",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired instance state.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "The tags that the instance should be marked under. See U(https://www.linode.com/docs/api/tags/).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of the instance. This is a required parameter only when creating Linode instances. See U(https://www.linode.com/docs/api/linode-types/).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "linode_api4 >= 2.0.0"
      ],
      "short_description": "Manage instances on the Linode cloud."
    },
    "examples": "\n- name: Create a new Linode.\n  community.general.linode_v4:\n    label: new-linode\n    type: g6-nanode-1\n    region: eu-west\n    image: linode/debian9\n    root_pass: passw0rd\n    authorized_keys:\n      - \"ssh-rsa ...\"\n    stackscript_id: 1337\n    stackscript_data:\n      variable: value\n    state: present\n\n- name: Delete that new Linode.\n  community.general.linode_v4:\n    label: new-linode\n    state: absent\n"
  },
  "community.general.listen_ports_facts": {
    "doc": {
      "description": "Gather facts on processes listening on TCP and UDP ports using the C(netstat) or C(ss) commands.\nThis module currently supports Linux only.",
      "has_action": false,
      "notes": "C(ss) returns all processes for each listen address and port.\nThis plugin will return each of them, so multiple entries for the same listen address and port are likely in results.\n",
      "options": {
        "command": {
          "aliases": [],
          "description": "Override which command to use for fetching listen ports.\nBy default module will use first found supported command on the system (in alphanumerical order).",
          "type": "str",
          "required": false,
          "choices": [
            "netstat",
            "ss"
          ],
          "version_added": "4.1.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "netstat or ss"
      ],
      "short_description": "Gather facts on processes listening on TCP and UDP ports."
    },
    "examples": "\n- name: Gather facts on listening ports\n  community.general.listen_ports_facts:\n\n- name: TCP whitelist violation\n  ansible.builtin.debug:\n    msg: TCP port {{ item.port }} by pid {{ item.pid }} violates the whitelist\n  vars:\n    tcp_listen_violations: \"{{ ansible_facts.tcp_listen | selectattr('port', 'in', tcp_whitelist) | list }}\"\n    tcp_whitelist:\n      - 22\n      - 25\n  loop: \"{{ tcp_listen_violations }}\"\n\n- name: List TCP ports\n  ansible.builtin.debug:\n    msg: \"{{ ansible_facts.tcp_listen  | map(attribute='port') | sort | list }}\"\n\n- name: List UDP ports\n  ansible.builtin.debug:\n    msg: \"{{ ansible_facts.udp_listen | map(attribute='port') | sort | list }}\"\n\n- name: List all ports\n  ansible.builtin.debug:\n    msg: \"{{ (ansible_facts.tcp_listen + ansible_facts.udp_listen) | map(attribute='port') | unique | sort | list }}\"\n"
  },
  "community.general.lldp": {
    "doc": {
      "description": "Reads data out of lldpctl",
      "has_action": false,
      "notes": "Requires lldpd running and lldp enabled on switches",
      "options": {},
      "requirements": [
        "lldpctl"
      ],
      "short_description": "get details reported by lldp"
    },
    "examples": "\n# Retrieve switch/port information\n - name: Gather information from lldp\n   community.general.lldp:\n\n - name: Print each switch/port\n   ansible.builtin.debug:\n    msg: \"{{ lldp[item]['chassis']['name'] }} / {{ lldp[item]['port']['ifname'] }}\"\n   with_items: \"{{ lldp.keys() }}\"\n\n# TASK: [Print each switch/port] ***********************************************************\n# ok: [10.13.0.22] => (item=eth2) => {\"item\": \"eth2\", \"msg\": \"switch1.example.com / Gi0/24\"}\n# ok: [10.13.0.22] => (item=eth1) => {\"item\": \"eth1\", \"msg\": \"switch2.example.com / Gi0/3\"}\n# ok: [10.13.0.22] => (item=eth0) => {\"item\": \"eth0\", \"msg\": \"switch3.example.com / Gi0/3\"}\n\n"
  },
  "community.general.locale_gen": {
    "doc": {
      "description": "Manages locales by editing /etc/locale.gen and invoking locale-gen.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "Name and encoding of the locale, such as \"en_GB.UTF-8\".",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the locale shall be present.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Creates or removes locales"
    },
    "examples": "\n- name: Ensure a locale exists\n  community.general.locale_gen:\n    name: de_CH.UTF-8\n    state: present\n"
  },
  "community.general.logentries": {
    "doc": {
      "description": "Sends logs to LogEntries in realtime",
      "has_action": false,
      "notes": "Requires the LogEntries agent which can be installed following the instructions at logentries.com",
      "options": {
        "logtype": {
          "aliases": [
            "type"
          ],
          "description": "type of the log",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "name of the log",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "path to a log file",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "following state of the log",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "followed",
            "unfollowed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Module for tracking logs via logentries.com"
    },
    "examples": "\n- name: Track nginx logs\n  community.general.logentries:\n    path: /var/log/nginx/access.log\n    state: present\n    name: nginx-access-log\n\n- name: Stop tracking nginx logs\n  community.general.logentries:\n    path: /var/log/nginx/error.log\n    state: absent\n"
  },
  "community.general.logentries_msg": {
    "doc": {
      "description": "Send a message to logentries",
      "has_action": false,
      "options": {
        "api": {
          "aliases": [],
          "description": "API endpoint",
          "default": "data.logentries.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The message body.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "API endpoint port",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Log token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6"
      ],
      "short_description": "Send a message to logentries."
    },
    "examples": "\n- name: Send a message to logentries\n  community.general.logentries_msg:\n    token=00000000-0000-0000-0000-000000000000\n    msg=\"{{ ansible_hostname }}\"\n"
  },
  "community.general.logstash_plugin": {
    "doc": {
      "description": "Manages Logstash plugins.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "Install plugin with that name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "plugin_bin": {
          "aliases": [],
          "description": "Specify logstash-plugin to use for plugin management.",
          "default": "/usr/share/logstash/bin/logstash-plugin",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Proxy host to use during plugin installation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Proxy port to use during plugin installation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Apply plugin state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Specify plugin Version of the plugin to install. If plugin exists with previous version, it will NOT be updated.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Logstash plugins"
    },
    "examples": "\n- name: Install Logstash beats input plugin\n  community.general.logstash_plugin:\n    state: present\n    name: logstash-input-beats\n\n- name: Install specific version of a plugin\n  community.general.logstash_plugin:\n    state: present\n    name: logstash-input-syslog\n    version: '3.2.0'\n\n- name: Uninstall Logstash plugin\n  community.general.logstash_plugin:\n    state: absent\n    name: logstash-filter-multiline\n\n- name: Install Logstash plugin with alternate heap size\n  community.general.logstash_plugin:\n    state: present\n    name: logstash-input-beats\n  environment:\n    LS_JAVA_OPTS: \"-Xms256m -Xmx256m\"\n"
  },
  "community.general.lvg": {
    "doc": {
      "description": "This module creates, removes or resizes volume groups.",
      "has_action": false,
      "notes": "This module does not modify PE size for already present volume group.",
      "options": {
        "force": {
          "aliases": [],
          "description": "If C(yes), allows to remove volume group with logical volumes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pesize": {
          "aliases": [],
          "description": "The size of the physical extent. I(pesize) must be a power of 2 of at least 1 sector (where the sector size is the largest sector size of the PVs currently used in the VG), or at least 128KiB.\nSince Ansible 2.6, pesize can be optionally suffixed by a UNIT (k/K/m/M/g/G), default unit is megabyte.",
          "default": "4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pv_options": {
          "aliases": [],
          "description": "Additional options to pass to C(pvcreate) when creating the volume group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pvresize": {
          "aliases": [],
          "description": "If C(yes), resize the physical volume to the maximum available size.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "pvs": {
          "aliases": [],
          "description": "List of comma-separated devices to use as physical devices in this volume group.\nRequired when creating or resizing volume group.\nThe module will take care of running pvcreate if needed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Control if the volume group exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "vg": {
          "aliases": [],
          "description": "The name of the volume group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vg_options": {
          "aliases": [],
          "description": "Additional options to pass to C(vgcreate) when creating the volume group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Configure LVM volume groups"
    },
    "examples": "\n- name: Create a volume group on top of /dev/sda1 with physical extent size = 32MB\n  community.general.lvg:\n    vg: vg.services\n    pvs: /dev/sda1\n    pesize: 32\n\n- name: Create a volume group on top of /dev/sdb with physical extent size = 128KiB\n  community.general.lvg:\n    vg: vg.services\n    pvs: /dev/sdb\n    pesize: 128K\n\n# If, for example, we already have VG vg.services on top of /dev/sdb1,\n# this VG will be extended by /dev/sdc5.  Or if vg.services was created on\n# top of /dev/sda5, we first extend it with /dev/sdb1 and /dev/sdc5,\n# and then reduce by /dev/sda5.\n- name: Create or resize a volume group on top of /dev/sdb1 and /dev/sdc5.\n  community.general.lvg:\n    vg: vg.services\n    pvs: /dev/sdb1,/dev/sdc5\n\n- name: Remove a volume group with name vg.services\n  community.general.lvg:\n    vg: vg.services\n    state: absent\n\n- name: Create a volume group on top of /dev/sda3 and resize the volume group /dev/sda3 to the maximum possible\n  community.general.lvg:\n    vg: resizableVG\n    pvs: /dev/sda3\n    pvresize: yes\n"
  },
  "community.general.lvol": {
    "doc": {
      "description": "This module creates, removes or resizes logical volumes.",
      "has_action": false,
      "notes": "You must specify lv (when managing the state of logical volumes) or thinpool (when managing a thin provisioned volume).",
      "options": {
        "active": {
          "aliases": [],
          "description": "Whether the volume is active and visible to the host.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Shrink or remove operations of volumes requires this switch. Ensures that that filesystems get never corrupted/destroyed by mistake.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lv": {
          "aliases": [],
          "description": "The name of the logical volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "opts": {
          "aliases": [],
          "description": "Free-form options to be passed to the lvcreate command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pvs": {
          "aliases": [],
          "description": "Comma separated list of physical volumes (e.g. /dev/sda,/dev/sdb).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resizefs": {
          "aliases": [],
          "description": "Resize the underlying filesystem together with the logical volume.\nSupported for C(ext2), C(ext3), C(ext4), C(reiserfs) and C(XFS) filesystems. Attempts to resize other filesystem types will fail.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "shrink": {
          "aliases": [],
          "description": "Shrink if current size is higher than size requested.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "The size of the logical volume, according to lvcreate(8) --size, by default in megabytes or optionally with one of [bBsSkKmMgGtTpPeE] units; or according to lvcreate(8) --extents as a percentage of [VG|PVS|FREE]; Float values must begin with a digit.\nWhen resizing, apart from specifying an absolute size you may, according to lvextend(8)|lvreduce(8) C(--size), specify the amount to extend the logical volume with the prefix C(+) or the amount to reduce the logical volume by with prefix C(-).\nResizing using C(+) or C(-) was not supported prior to community.general 3.0.0.\nPlease note that when using C(+) or C(-), the module is B(not idempotent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot": {
          "aliases": [],
          "description": "The name of the snapshot volume",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Control if the logical volume exists. If C(present) and the volume does not already exist then the C(size) option is required.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "thinpool": {
          "aliases": [],
          "description": "The thin pool volume name. When you want to create a thin provisioned volume, specify a thin pool volume name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vg": {
          "aliases": [],
          "description": "The volume group this logical volume is part of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Configure LVM logical volumes"
    },
    "examples": "\n- name: Create a logical volume of 512m\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 512\n\n- name: Create a logical volume of 512m with disks /dev/sda and /dev/sdb\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 512\n    pvs: /dev/sda,/dev/sdb\n\n- name: Create cache pool logical volume\n  community.general.lvol:\n    vg: firefly\n    lv: lvcache\n    size: 512m\n    opts: --type cache-pool\n\n- name: Create a logical volume of 512g.\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 512g\n\n- name: Create a logical volume the size of all remaining space in the volume group\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 100%FREE\n\n- name: Create a logical volume with special options\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 512g\n    opts: -r 16\n\n- name: Extend the logical volume to 1024m.\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 1024\n\n- name: Extend the logical volume to consume all remaining space in the volume group\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: +100%FREE\n\n- name: Extend the logical volume by given space\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: +512M\n\n- name: Extend the logical volume to take all remaining space of the PVs and resize the underlying filesystem\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 100%PVS\n    resizefs: true\n\n- name: Resize the logical volume to % of VG\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 80%VG\n    force: yes\n\n- name: Reduce the logical volume to 512m\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 512\n    force: yes\n\n- name: Reduce the logical volume by given space\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: -512M\n    force: yes\n\n- name: Set the logical volume to 512m and do not try to shrink if size is lower than current one\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 512\n    shrink: no\n\n- name: Remove the logical volume.\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    state: absent\n    force: yes\n\n- name: Create a snapshot volume of the test logical volume.\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    snapshot: snap1\n    size: 100m\n\n- name: Deactivate a logical volume\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    active: false\n\n- name: Create a deactivated logical volume\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    size: 512g\n    active: false\n\n- name: Create a thin pool of 512g\n  community.general.lvol:\n    vg: firefly\n    thinpool: testpool\n    size: 512g\n\n- name: Create a thin volume of 128g\n  community.general.lvol:\n    vg: firefly\n    lv: test\n    thinpool: testpool\n    size: 128g\n"
  },
  "community.general.lxc_container": {
    "doc": {
      "description": "Management of LXC containers.",
      "has_action": false,
      "notes": "Containers must have a unique name. If you attempt to create a container with a name that already exists in the users namespace the module will simply return as \"unchanged\".\nThe \"container_command\" can be used with any state except \"absent\". If used with state \"stopped\" the container will be \"started\", the command executed, and then the container \"stopped\" again. Likewise if the state is \"stopped\" and the container does not exist it will be first created, \"started\", the command executed, and then \"stopped\". If you use a \"|\" in the variable you can use common script formatting within the variable itself The \"container_command\" option will always execute as BASH. When using \"container_command\" a log file is created in the /tmp/ directory which contains both stdout and stderr of any command executed.\nIf \"archive\" is **true** the system will attempt to create a compressed tarball of the running container. The \"archive\" option supports LVM backed containers and will create a snapshot of the running container when creating the archive.\nIf your distro does not have a package for \"python2-lxc\", which is a requirement for this module, it can be installed from source at \"https://github.com/lxc/python2-lxc\" or installed via pip using the package name lxc-python2.",
      "options": {
        "archive": {
          "aliases": [],
          "description": "Create an archive of a container.\nThis will create a tarball of the running container.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "archive_compression": {
          "aliases": [],
          "description": "Type of compression to use when creating an archive of a running container.",
          "default": "gzip",
          "type": "str",
          "required": false,
          "choices": [
            "gzip",
            "bzip2",
            "none"
          ],
          "suboptions": {}
        },
        "archive_path": {
          "aliases": [],
          "description": "Path the save the archived container.\nIf the path does not exist the archive method will attempt to create it.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "backing_store": {
          "aliases": [],
          "description": "Backend storage type for the container.",
          "default": "dir",
          "type": "str",
          "required": false,
          "choices": [
            "dir",
            "lvm",
            "loop",
            "btrfs",
            "overlayfs",
            "zfs"
          ],
          "suboptions": {}
        },
        "clone_name": {
          "aliases": [],
          "description": "Name of the new cloned server.\nThis is only used when state is clone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clone_snapshot": {
          "aliases": [],
          "description": "Create a snapshot a container when cloning.\nThis is not supported by all container storage backends.\nEnabling this may fail if the backing store does not support snapshots.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to the LXC configuration file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "container_command": {
          "aliases": [],
          "description": "Run a command within a container.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "container_config": {
          "aliases": [],
          "description": "A list of C(key=value) options to use when configuring a container.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "container_log": {
          "aliases": [],
          "description": "Enable a container log for host actions to the container.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "container_log_level": {
          "aliases": [],
          "description": "Set the log level for a container where *container_log* was set.",
          "default": "INFO",
          "type": "str",
          "required": false,
          "choices": [
            "Info",
            "info",
            "INFO",
            "Error",
            "error",
            "ERROR",
            "Debug",
            "debug",
            "DEBUG"
          ],
          "suboptions": {}
        },
        "directory": {
          "aliases": [],
          "description": "Place rootfs directory under DIR.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "fs_size": {
          "aliases": [],
          "description": "File system Size.",
          "default": "5G",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fs_type": {
          "aliases": [],
          "description": "Create fstype TYPE.",
          "default": "ext4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lv_name": {
          "aliases": [],
          "description": "Name of the logical volume, defaults to the container name.\nIf not specified, it defaults to C($CONTAINER_NAME).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lxc_path": {
          "aliases": [],
          "description": "Place container under PATH.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of a container.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define the state of a container.\nIf you clone a container using I(clone_name) the newly cloned container created in a stopped state.\nThe running container will be stopped while the clone operation is happening and upon completion of the clone the original container state will be restored.",
          "default": "started",
          "type": "str",
          "required": false,
          "choices": [
            "started",
            "stopped",
            "restarted",
            "absent",
            "frozen",
            "clone"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Name of the template to use within an LXC create.",
          "default": "ubuntu",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template_options": {
          "aliases": [],
          "description": "Template options when building the container.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "thinpool": {
          "aliases": [],
          "description": "Use LVM thin pool called TP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vg_name": {
          "aliases": [],
          "description": "If backend store is lvm, specify the name of the volume group.",
          "default": "lxc",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zfs_root": {
          "aliases": [],
          "description": "Create zfs under given zfsroot.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "lxc >= 1.0 # OS package",
        "python >= 2.6 # OS Package",
        "lxc-python2 >= 0.1 # PIP Package from https://github.com/lxc/python2-lxc"
      ],
      "short_description": "Manage LXC Containers"
    },
    "examples": "\n- name: Create a started container\n  community.general.lxc_container:\n    name: test-container-started\n    container_log: true\n    template: ubuntu\n    state: started\n    template_options: --release trusty\n\n- name: Create a stopped container\n  community.general.lxc_container:\n    name: test-container-stopped\n    container_log: true\n    template: ubuntu\n    state: stopped\n    template_options: --release trusty\n\n- name: Create a frozen container\n  community.general.lxc_container:\n    name: test-container-frozen\n    container_log: true\n    template: ubuntu\n    state: frozen\n    template_options: --release trusty\n    container_command: |\n      echo 'hello world.' | tee /opt/started-frozen\n\n# Create filesystem container, configure it, and archive it, and start it.\n- name: Create filesystem container\n  community.general.lxc_container:\n    name: test-container-config\n    backing_store: dir\n    container_log: true\n    template: ubuntu\n    state: started\n    archive: true\n    archive_compression: none\n    container_config:\n      - \"lxc.aa_profile=unconfined\"\n      - \"lxc.cgroup.devices.allow=a *:* rmw\"\n    template_options: --release trusty\n\n# Create an lvm container, run a complex command in it, add additional\n# configuration to it, create an archive of it, and finally leave the container\n# in a frozen state. The container archive will be compressed using bzip2\n- name: Create a frozen lvm container\n  community.general.lxc_container:\n    name: test-container-lvm\n    container_log: true\n    template: ubuntu\n    state: frozen\n    backing_store: lvm\n    template_options: --release trusty\n    container_command: |\n      apt-get update\n      apt-get install -y vim lxc-dev\n      echo 'hello world.' | tee /opt/started\n      if [[ -f \"/opt/started\" ]]; then\n          echo 'hello world.' | tee /opt/found-started\n      fi\n    container_config:\n      - \"lxc.aa_profile=unconfined\"\n      - \"lxc.cgroup.devices.allow=a *:* rmw\"\n    archive: true\n    archive_compression: bzip2\n  register: lvm_container_info\n\n- name: Debug info on container \"test-container-lvm\"\n  ansible.builtin.debug:\n    var: lvm_container_info\n\n- name: Run a command in a container and ensure its in a \"stopped\" state.\n  community.general.lxc_container:\n    name: test-container-started\n    state: stopped\n    container_command: |\n      echo 'hello world.' | tee /opt/stopped\n\n- name: Run a command in a container and ensure its it in a \"frozen\" state.\n  community.general.lxc_container:\n    name: test-container-stopped\n    state: frozen\n    container_command: |\n      echo 'hello world.' | tee /opt/frozen\n\n- name: Start a container\n  community.general.lxc_container:\n    name: test-container-stopped\n    state: started\n\n- name: Run a command in a container and then restart it\n  community.general.lxc_container:\n    name: test-container-started\n    state: restarted\n    container_command: |\n      echo 'hello world.' | tee /opt/restarted\n\n- name: Run a complex command within a \"running\" container\n  community.general.lxc_container:\n    name: test-container-started\n    container_command: |\n      apt-get update\n      apt-get install -y curl wget vim apache2\n      echo 'hello world.' | tee /opt/started\n      if [[ -f \"/opt/started\" ]]; then\n          echo 'hello world.' | tee /opt/found-started\n      fi\n\n# Create an archive of an existing container, save the archive to a defined\n# path and then destroy it.\n- name: Archive container\n  community.general.lxc_container:\n    name: test-container-started\n    state: absent\n    archive: true\n    archive_path: /opt/archives\n\n# Create a container using overlayfs, create an archive of it, create a\n# snapshot clone of the container and and finally leave the container\n# in a frozen state. The container archive will be compressed using gzip.\n- name: Create an overlayfs container archive and clone it\n  community.general.lxc_container:\n    name: test-container-overlayfs\n    container_log: true\n    template: ubuntu\n    state: started\n    backing_store: overlayfs\n    template_options: --release trusty\n    clone_snapshot: true\n    clone_name: test-container-overlayfs-clone-snapshot\n    archive: true\n    archive_compression: gzip\n  register: clone_container_info\n\n- name: Debug info on container \"test-container\"\n  ansible.builtin.debug:\n    var: clone_container_info\n\n- name: Clone a container using snapshot\n  community.general.lxc_container:\n    name: test-container-overlayfs-clone-snapshot\n    backing_store: overlayfs\n    clone_name: test-container-overlayfs-clone-snapshot2\n    clone_snapshot: true\n\n- name: Create a new container and clone it\n  community.general.lxc_container:\n    name: test-container-new-archive\n    backing_store: dir\n    clone_name: test-container-new-archive-clone\n\n- name: Archive and clone a container then destroy it\n  community.general.lxc_container:\n    name: test-container-new-archive\n    state: absent\n    clone_name: test-container-new-archive-destroyed-clone\n    archive: true\n    archive_compression: gzip\n\n- name: Start a cloned container.\n  community.general.lxc_container:\n    name: test-container-new-archive-destroyed-clone\n    state: started\n\n- name: Destroy a container\n  community.general.lxc_container:\n    name: '{{ item }}'\n    state: absent\n  with_items:\n    - test-container-stopped\n    - test-container-started\n    - test-container-frozen\n    - test-container-lvm\n    - test-container-config\n    - test-container-overlayfs\n    - test-container-overlayfs-clone\n    - test-container-overlayfs-clone-snapshot\n    - test-container-overlayfs-clone-snapshot2\n    - test-container-new-archive\n    - test-container-new-archive-clone\n    - test-container-new-archive-destroyed-clone\n"
  },
  "community.general.lxca_cmms": {
    "doc": {
      "description": "This module returns/displays a inventory details of cmms",
      "has_action": false,
      "notes": "Additional detail about pylxca can be found at U(https://github.com/lenovo/pylxca)\nPlaybooks using these modules can be found at U(https://github.com/lenovo/ansible.lenovo-lxca)\nCheck mode is not supported.",
      "options": {
        "auth_url": {
          "aliases": [],
          "description": "lxca https full web address",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "chassis": {
          "aliases": [],
          "description": "uuid of chassis, this is string with length greater than 16.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "command_options": {
          "aliases": [],
          "description": "options to filter nodes information",
          "default": "cmms",
          "type": "str",
          "required": false,
          "choices": [
            "cmms",
            "cmms_by_uuid",
            "cmms_by_chassis_uuid"
          ],
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "uuid of device, this is string with length greater than 16.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pylxca"
      ],
      "short_description": "Custom module for lxca cmms inventory utility"
    },
    "examples": "\n# get all cmms info\n- name: Get nodes data from LXCA\n  community.general.lxca_cmms:\n    login_user: USERID\n    login_password: Password\n    auth_url: \"https://10.243.15.168\"\n\n# get specific cmms info by uuid\n- name: Get nodes data from LXCA\n  community.general.lxca_cmms:\n    login_user: USERID\n    login_password: Password\n    auth_url: \"https://10.243.15.168\"\n    uuid: \"3C737AA5E31640CE949B10C129A8B01F\"\n    command_options: cmms_by_uuid\n\n# get specific cmms info by chassis uuid\n- name: Get nodes data from LXCA\n  community.general.lxca_cmms:\n    login_user: USERID\n    login_password: Password\n    auth_url: \"https://10.243.15.168\"\n    chassis: \"3C737AA5E31640CE949B10C129A8B01F\"\n    command_options: cmms_by_chassis_uuid\n\n"
  },
  "community.general.lxca_nodes": {
    "doc": {
      "description": "This module returns/displays a inventory details of nodes",
      "has_action": false,
      "notes": "Additional detail about pylxca can be found at U(https://github.com/lenovo/pylxca)\nPlaybooks using these modules can be found at U(https://github.com/lenovo/ansible.lenovo-lxca)\nCheck mode is not supported.",
      "options": {
        "auth_url": {
          "aliases": [],
          "description": "lxca https full web address",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "chassis": {
          "aliases": [],
          "description": "uuid of chassis, this is string with length greater than 16.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "command_options": {
          "aliases": [],
          "description": "options to filter nodes information",
          "default": "nodes",
          "type": "str",
          "required": false,
          "choices": [
            "nodes",
            "nodes_by_uuid",
            "nodes_by_chassis_uuid",
            "nodes_status_managed",
            "nodes_status_unmanaged"
          ],
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "uuid of device, this is string with length greater than 16.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pylxca"
      ],
      "short_description": "Custom module for lxca nodes inventory utility"
    },
    "examples": "\n# get all nodes info\n- name: Get nodes data from LXCA\n  community.general.lxca_nodes:\n    login_user: USERID\n    login_password: Password\n    auth_url: \"https://10.243.15.168\"\n    command_options: nodes\n\n# get specific nodes info by uuid\n- name: Get nodes data from LXCA\n  community.general.lxca_nodes:\n    login_user: USERID\n    login_password: Password\n    auth_url: \"https://10.243.15.168\"\n    uuid: \"3C737AA5E31640CE949B10C129A8B01F\"\n    command_options: nodes_by_uuid\n\n# get specific nodes info by chassis uuid\n- name: Get nodes data from LXCA\n  community.general.lxca_nodes:\n    login_user: USERID\n    login_password: Password\n    auth_url: \"https://10.243.15.168\"\n    chassis: \"3C737AA5E31640CE949B10C129A8B01F\"\n    command_options: nodes_by_chassis_uuid\n\n# get managed nodes\n- name: Get nodes data from LXCA\n  community.general.lxca_nodes:\n    login_user: USERID\n    login_password: Password\n    auth_url: \"https://10.243.15.168\"\n    command_options: nodes_status_managed\n\n# get unmanaged nodes\n- name: Get nodes data from LXCA\n  community.general.lxca_nodes:\n    login_user: USERID\n    login_password: Password\n    auth_url: \"https://10.243.15.168\"\n    command_options: nodes_status_unmanaged\n\n"
  },
  "community.general.lxd_container": {
    "doc": {
      "description": "Management of LXD containers and virtual machines.",
      "has_action": false,
      "notes": "Instances can be a container or a virtual machine, both of them must have unique name. If you attempt to create an instance with a name that already existed in the users namespace the module will simply return as \"unchanged\".\nThere are two ways to run commands inside a container or virtual machine, using the command module or using the ansible lxd connection plugin bundled in Ansible >= 2.1, the later requires python to be installed in the instance which can be done with the command module.\nYou can copy a file from the host to the instance with the Ansible M(ansible.builtin.copy) and M(ansible.builtin.template) module and the `lxd` connection plugin. See the example below.\nYou can copy a file in the created instance to the localhost with `command=lxc file pull instance_name/dir/filename filename`. See the first example below.",
      "options": {
        "architecture": {
          "aliases": [],
          "description": "The architecture for the instance (for example C(x86_64) or C(i686)). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert_file"
          ],
          "description": "The client certificate file path.\nIf not specified, it defaults to C(${HOME}/.config/lxc/client.crt).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key_file"
          ],
          "description": "The client certificate key file path.\nIf not specified, it defaults to C(${HOME}/.config/lxc/client.key).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The config for the instance (for example C({\"limits.cpu\": \"2\"})). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1).\nIf the instance already exists and its \"config\" values in metadata obtained from the LXD API U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#instances-containers-and-virtual-machines) are different, this module tries to apply the configurations.\nThe keys starting with C(volatile.) are ignored for this comparison when I(ignore_volatile_options=true).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "devices": {
          "aliases": [],
          "description": "The devices for the instance (for example C({ \"rootfs\": { \"path\": \"/dev/kvm\", \"type\": \"unix-char\" }})). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ephemeral": {
          "aliases": [],
          "description": "Whether or not the instance is ephemeral (for example C(true) or C(false)). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_stop": {
          "aliases": [],
          "description": "If this is true, the C(lxd_container) forces to stop the instance when it stops or restarts the instance.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ignore_volatile_options": {
          "aliases": [],
          "description": "If set to C(true), options starting with C(volatile.) are ignored. As a result, they are reapplied for each execution.\nThis default behavior can be changed by setting this option to C(false).\nThe current default value C(true) is deprecated since community.general 4.0.0, and will change to C(false) in community.general 6.0.0.",
          "type": "bool",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of an instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "profiles": {
          "aliases": [],
          "description": "Profile to be used by the instance.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "snap_url": {
          "aliases": [],
          "description": "The unix domain socket path when LXD is installed by snap package manager.",
          "default": "unix:/var/snap/lxd/common/lxd/unix.socket",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The source for the instance (e.g. { \"type\": \"image\", \"mode\": \"pull\", \"server\": \"https://images.linuxcontainers.org\", \"protocol\": \"lxd\", \"alias\": \"ubuntu/xenial/amd64\" }).\nSee U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1) for complete API documentation.\nNote that C(protocol) accepts two choices: C(lxd) or C(simplestreams).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define the state of an instance.",
          "default": "started",
          "type": "str",
          "required": false,
          "choices": [
            "started",
            "stopped",
            "restarted",
            "absent",
            "frozen"
          ],
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "For cluster deployments. Will attempt to create an instance on a target node. If the instance exists elsewhere in a cluster, then it will not be replaced or moved. The name should respond to same name of the node you see in C(lxc cluster list).",
          "type": "str",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "A timeout for changing the state of the instance.\nThis is also used as a timeout for waiting until IPv4 addresses are set to the all network interfaces in the instance after starting or restarting.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "trust_password": {
          "aliases": [],
          "description": "The client trusted password.\nYou need to set this password on the LXD server before running this module using the following command: C(lxc config set core.trust_password <some random password>). See U(https://www.stgraber.org/2016/04/18/lxd-api-direct-interaction/).\nIf trust_password is set, this module send a request for authentication before sending any requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Instance type can be either C(virtual-machine) or C(container).",
          "default": "container",
          "type": "str",
          "required": false,
          "choices": [
            "container",
            "virtual-machine"
          ],
          "version_added": "4.1.0",
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "The unix domain socket path or the https URL for the LXD server.",
          "default": "unix:/var/lib/lxd/unix.socket",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait_for_container": {
          "aliases": [],
          "description": "If set to C(true), the tasks will wait till the task reports a success status when performing container operations.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "4.4.0",
          "suboptions": {}
        },
        "wait_for_ipv4_addresses": {
          "aliases": [],
          "description": "If this is true, the C(lxd_container) waits until IPv4 addresses are set to the all network interfaces in the instance after starting or restarting.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage LXD instances"
    },
    "examples": "\n# An example for creating a Ubuntu container and install python\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Create a started container\n      community.general.lxd_container:\n        name: mycontainer\n        ignore_volatile_options: true\n        state: started\n        source:\n          type: image\n          mode: pull\n          server: https://images.linuxcontainers.org\n          protocol: lxd # if you get a 404, try setting protocol: simplestreams\n          alias: ubuntu/xenial/amd64\n        profiles: [\"default\"]\n        wait_for_ipv4_addresses: true\n        timeout: 600\n\n    - name: Check python is installed in container\n      delegate_to: mycontainer\n      ansible.builtin.raw: dpkg -s python\n      register: python_install_check\n      failed_when: python_install_check.rc not in [0, 1]\n      changed_when: false\n\n    - name: Install python in container\n      delegate_to: mycontainer\n      ansible.builtin.raw: apt-get install -y python\n      when: python_install_check.rc == 1\n\n# An example for creating an Ubuntu 14.04 container using an image fingerprint.\n# This requires changing 'server' and 'protocol' key values, replacing the\n# 'alias' key with with 'fingerprint' and supplying an appropriate value that\n# matches the container image you wish to use.\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Create a started container\n      community.general.lxd_container:\n        name: mycontainer\n        ignore_volatile_options: true\n        state: started\n        source:\n          type: image\n          mode: pull\n          # Provides current (and older) Ubuntu images with listed fingerprints\n          server: https://cloud-images.ubuntu.com/releases\n          # Protocol used by 'ubuntu' remote (as shown by 'lxc remote list')\n          protocol: simplestreams\n          # This provides an Ubuntu 14.04 LTS amd64 image from 20150814.\n          fingerprint: e9a8bdfab6dc\n        profiles: [\"default\"]\n        wait_for_ipv4_addresses: true\n        timeout: 600\n\n# An example for deleting a container\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Delete a container\n      community.general.lxd_container:\n        name: mycontainer\n        state: absent\n        type: container\n\n# An example for restarting a container\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Restart a container\n      community.general.lxd_container:\n        name: mycontainer\n        state: restarted\n        type: container\n\n# An example for restarting a container using https to connect to the LXD server\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Restart a container\n      community.general.lxd_container:\n        url: https://127.0.0.1:8443\n        # These client_cert and client_key values are equal to the default values.\n        #client_cert: \"{{ lookup('env', 'HOME') }}/.config/lxc/client.crt\"\n        #client_key: \"{{ lookup('env', 'HOME') }}/.config/lxc/client.key\"\n        trust_password: mypassword\n        name: mycontainer\n        state: restarted\n\n# Note your container must be in the inventory for the below example.\n#\n# [containers]\n# mycontainer ansible_connection=lxd\n#\n- hosts:\n    - mycontainer\n  tasks:\n    - name: Copy /etc/hosts in the created container to localhost with name \"mycontainer-hosts\"\n      ansible.builtin.fetch:\n        src: /etc/hosts\n        dest: /tmp/mycontainer-hosts\n        flat: true\n\n# An example for LXD cluster deployments. This example will create two new container on specific\n# nodes - 'node01' and 'node02'. In 'target:', 'node01' and 'node02' are names of LXD cluster\n# members that LXD cluster recognizes, not ansible inventory names, see: 'lxc cluster list'.\n# LXD API calls can be made to any LXD member, in this example, we send API requests to\n#'node01.example.com', which matches ansible inventory name.\n- hosts: node01.example.com\n  tasks:\n    - name: Create LXD container\n      community.general.lxd_container:\n        name: new-container-1\n        ignore_volatile_options: true\n        state: started\n        source:\n          type: image\n          mode: pull\n          alias: ubuntu/xenial/amd64\n        target: node01\n\n    - name: Create container on another node\n      community.general.lxd_container:\n        name: new-container-2\n        ignore_volatile_options: true\n        state: started\n        source:\n          type: image\n          mode: pull\n          alias: ubuntu/xenial/amd64\n        target: node02\n\n# An example for creating a virtual machine\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Create container on another node\n      community.general.lxd_container:\n        name: new-vm-1\n        type: virtual-machine\n        state: started\n        ignore_volatile_options: true\n        wait_for_ipv4_addresses: true\n        profiles: [\"default\"]\n        source:\n          protocol: simplestreams\n          type: image\n          mode: pull\n          server: https://images.linuxcontainers.org\n          alias: debian/11\n        timeout: 600\n"
  },
  "community.general.lxd_profile": {
    "doc": {
      "description": "Management of LXD profiles",
      "has_action": false,
      "notes": "Profiles must have a unique name. If you attempt to create a profile with a name that already existed in the users namespace the module will simply return as \"unchanged\".",
      "options": {
        "client_cert": {
          "aliases": [
            "cert_file"
          ],
          "description": "The client certificate file path.\nIf not specified, it defaults to C($HOME/.config/lxc/client.crt).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key_file"
          ],
          "description": "The client certificate key file path.\nIf not specified, it defaults to C($HOME/.config/lxc/client.key).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The config for the container (e.g. {\"limits.memory\": \"4GB\"}). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#patch-3)\nIf the profile already exists and its \"config\" value in metadata obtained from GET /1.0/profiles/<name> U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#get-19) are different, they this module tries to apply the configurations.\nNot all config values are supported to apply the existing profile. Maybe you need to delete and recreate a profile.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the profile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "devices": {
          "aliases": [],
          "description": "The devices for the profile (e.g. {\"rootfs\": {\"path\": \"/dev/kvm\", \"type\": \"unix-char\"}). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#patch-3)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "merge_profile": {
          "aliases": [],
          "description": "Merge the configuration of the present profile with the new desired configuration, instead of replacing it.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.1.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of a profile.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "A new name of a profile.\nIf this parameter is specified a profile will be renamed to this name. See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-11)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snap_url": {
          "aliases": [],
          "description": "The unix domain socket path when LXD is installed by snap package manager.",
          "default": "unix:/var/snap/lxd/common/lxd/unix.socket",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define the state of a profile.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "trust_password": {
          "aliases": [],
          "description": "The client trusted password.\nYou need to set this password on the LXD server before running this module using the following command. lxc config set core.trust_password <some random password> See U(https://www.stgraber.org/2016/04/18/lxd-api-direct-interaction/)\nIf trust_password is set, this module send a request for authentication before sending any requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "The unix domain socket path or the https URL for the LXD server.",
          "default": "unix:/var/lib/lxd/unix.socket",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage LXD profiles"
    },
    "examples": "\n# An example for creating a profile\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Create a profile\n      community.general.lxd_profile:\n        name: macvlan\n        state: present\n        config: {}\n        description: my macvlan profile\n        devices:\n          eth0:\n            nictype: macvlan\n            parent: br0\n            type: nic\n\n# An example for creating a profile via http connection\n- hosts: localhost\n  connection: local\n  tasks:\n  - name: Create macvlan profile\n    community.general.lxd_profile:\n      url: https://127.0.0.1:8443\n      # These client_cert and client_key values are equal to the default values.\n      #client_cert: \"{{ lookup('env', 'HOME') }}/.config/lxc/client.crt\"\n      #client_key: \"{{ lookup('env', 'HOME') }}/.config/lxc/client.key\"\n      trust_password: mypassword\n      name: macvlan\n      state: present\n      config: {}\n      description: my macvlan profile\n      devices:\n        eth0:\n          nictype: macvlan\n          parent: br0\n          type: nic\n\n# An example for modify/merge a profile\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Merge a profile\n      community.general.lxd_profile:\n        merge_profile: true\n        name: macvlan\n        state: present\n        config: {}\n        description: my macvlan profile\n        devices:\n          eth0:\n            nictype: macvlan\n            parent: br0\n            type: nic\n\n# An example for deleting a profile\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Delete a profile\n      community.general.lxd_profile:\n        name: macvlan\n        state: absent\n\n# An example for renaming a profile\n- hosts: localhost\n  connection: local\n  tasks:\n    - name: Rename a profile\n      community.general.lxd_profile:\n        name: macvlan\n        new_name: macvlan2\n        state: present\n"
  },
  "community.general.macports": {
    "doc": {
      "description": "Manages MacPorts packages (ports)",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [
            "port"
          ],
          "description": "A list of port names.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "selfupdate": {
          "aliases": [
            "update_cache",
            "update_ports"
          ],
          "description": "Update Macports and the ports tree, either prior to installing ports or as a separate step.\nEquivalent to running C(port selfupdate).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired state of the port.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "active",
            "inactive",
            "installed",
            "removed"
          ],
          "suboptions": {}
        },
        "upgrade": {
          "aliases": [],
          "description": "Upgrade all outdated ports, either prior to installing ports or as a separate step.\nEquivalent to running C(port upgrade outdated).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variant": {
          "aliases": [
            "variants"
          ],
          "description": "A port variant specification.\nC(variant) is only supported with state: I(installed)/I(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Package manager for MacPorts"
    },
    "examples": "\n- name: Install the foo port\n  community.general.macports:\n    name: foo\n\n- name: Install the universal, x11 variant of the foo port\n  community.general.macports:\n    name: foo\n    variant: +universal+x11\n\n- name: Install a list of ports\n  community.general.macports:\n    name: \"{{ ports }}\"\n  vars:\n    ports:\n    - foo\n    - foo-tools\n\n- name: Update Macports and the ports tree, then upgrade all outdated ports\n  community.general.macports:\n    selfupdate: yes\n    upgrade: yes\n\n- name: Update Macports and the ports tree, then install the foo port\n  community.general.macports:\n    name: foo\n    selfupdate: yes\n\n- name: Remove the foo port\n  community.general.macports:\n    name: foo\n    state: absent\n\n- name: Activate the foo port\n  community.general.macports:\n    name: foo\n    state: active\n\n- name: Deactivate the foo port\n  community.general.macports:\n    name: foo\n    state: inactive\n"
  },
  "community.general.mail": {
    "doc": {
      "description": "This module is useful for sending emails from playbooks.\nOne may wonder why automate sending emails?  In complex environments there are from time to time processes that cannot be automated, either because you lack the authority to make it so, or because not everyone agrees to a common approach.\nIf you cannot automate a specific step, but the step is non-blocking, sending out an email to the responsible party to make them perform their part of the bargain is an elegant way to put the responsibility in someone else's lap.\nOf course sending out a mail can be equally useful as a way to notify one or more people in a team that a specific action has been (successfully) taken.",
      "has_action": false,
      "options": {
        "attach": {
          "aliases": [],
          "description": "A list of pathnames of files to attach to the message.\nAttached files will have their content-type set to C(application/octet-stream).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "bcc": {
          "aliases": [],
          "description": "The email-address(es) the mail is being 'blind' copied to.\nThis is a list, which may contain address and phrase portions.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "body": {
          "aliases": [],
          "description": "The body of the email being sent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cc": {
          "aliases": [],
          "description": "The email-address(es) the mail is being copied to.\nThis is a list, which may contain address and phrase portions.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "charset": {
          "aliases": [],
          "description": "The character set of email being sent.",
          "default": "utf-8",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ehlohost": {
          "aliases": [],
          "description": "Allows for manual specification of host for EHLO.",
          "type": "str",
          "required": false,
          "version_added": "3.8.0",
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A list of headers which should be added to the message.\nEach individual header is specified as C(header=value) (see example below).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The mail server.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "If SMTP requires password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The mail server port.\nThis must be a valid integer between 1 and 65534",
          "default": "25",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "secure": {
          "aliases": [],
          "description": "If C(always), the connection will only send email if the connection is Encrypted. If the server doesn't accept the encrypted connection it will fail.\nIf C(try), the connection will attempt to setup a secure SSL/TLS session, before trying to send.\nIf C(never), the connection will not attempt to setup a secure SSL/TLS session, before sending\nIf C(starttls), the connection will try to upgrade to a secure SSL/TLS connection, before sending. If it is unable to do so it will fail.",
          "default": "try",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "never",
            "starttls",
            "try"
          ],
          "suboptions": {}
        },
        "sender": {
          "aliases": [
            "from"
          ],
          "description": "The email-address the mail is sent from. May contain address and phrase.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subject": {
          "aliases": [
            "msg"
          ],
          "description": "The subject of the email being sent.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "subtype": {
          "aliases": [],
          "description": "The minor mime type, can be either C(plain) or C(html).\nThe major type is always C(text).",
          "default": "plain",
          "type": "str",
          "required": false,
          "choices": [
            "html",
            "plain"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Sets the timeout in seconds for connection attempts.",
          "default": "20",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "to": {
          "aliases": [
            "recipients"
          ],
          "description": "The email-address(es) the mail is being sent to.\nThis is a list, which may contain address and phrase portions.",
          "default": "root",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "If SMTP requires username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send an email"
    },
    "examples": "\n- name: Example playbook sending mail to root\n  community.general.mail:\n    subject: System {{ ansible_hostname }} has been successfully provisioned.\n  delegate_to: localhost\n\n- name: Sending an e-mail using Gmail SMTP servers\n  community.general.mail:\n    host: smtp.gmail.com\n    port: 587\n    username: username@gmail.com\n    password: mysecret\n    to: John Smith <john.smith@example.com>\n    subject: Ansible-report\n    body: System {{ ansible_hostname }} has been successfully provisioned.\n  delegate_to: localhost\n\n- name: Send e-mail to a bunch of users, attaching files\n  community.general.mail:\n    host: 127.0.0.1\n    port: 2025\n    subject: Ansible-report\n    body: Hello, this is an e-mail. I hope you like it ;-)\n    from: jane@example.net (Jane Jolie)\n    to:\n    - John Doe <j.d@example.org>\n    - Suzie Something <sue@example.com>\n    cc: Charlie Root <root@localhost>\n    attach:\n    - /etc/group\n    - /tmp/avatar2.png\n    headers:\n    - Reply-To=john@example.com\n    - X-Special=\"Something or other\"\n    charset: us-ascii\n  delegate_to: localhost\n\n- name: Sending an e-mail using the remote machine, not the Ansible controller node\n  community.general.mail:\n    host: localhost\n    port: 25\n    to: John Smith <john.smith@example.com>\n    subject: Ansible-report\n    body: System {{ ansible_hostname }} has been successfully provisioned.\n\n- name: Sending an e-mail using Legacy SSL to the remote machine\n  community.general.mail:\n    host: localhost\n    port: 25\n    to: John Smith <john.smith@example.com>\n    subject: Ansible-report\n    body: System {{ ansible_hostname }} has been successfully provisioned.\n    secure: always\n\n- name: Sending an e-mail using StartTLS to the remote machine\n  community.general.mail:\n    host: localhost\n    port: 25\n    to: John Smith <john.smith@example.com>\n    subject: Ansible-report\n    body: System {{ ansible_hostname }} has been successfully provisioned.\n    secure: starttls\n\n- name: Sending an e-mail using StartTLS, remote server, custom EHLO\n  community.general.mail:\n    host: some.smtp.host.tld\n    port: 25\n    ehlohost: my-resolvable-hostname.tld\n    to: John Smith <john.smith@example.com>\n    subject: Ansible-report\n    body: System {{ ansible_hostname }} has been successfully provisioned.\n    secure: starttls\n"
  },
  "community.general.make": {
    "doc": {
      "description": "Run targets in a Makefile.",
      "has_action": false,
      "options": {
        "chdir": {
          "aliases": [],
          "description": "Change to this directory before running make.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "file": {
          "aliases": [],
          "description": "Use a custom Makefile.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "jobs": {
          "aliases": [],
          "description": "Set the number of make jobs to run concurrently.\nTypically if set, this would be the number of processors and/or threads available to the machine.\nThis is not supported by all make implementations.",
          "type": "int",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "make": {
          "aliases": [],
          "description": "Use a specific make binary.",
          "type": "path",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "Any extra parameters to pass to make.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "The target to run.\nTypically this would be something like C(install),C(test) or C(all).\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "make"
      ],
      "short_description": "Run targets in a Makefile"
    },
    "examples": "\n- name: Build the default target\n  community.general.make:\n    chdir: /home/ubuntu/cool-project\n\n- name: Run 'install' target as root\n  community.general.make:\n    chdir: /home/ubuntu/cool-project\n    target: install\n  become: yes\n\n- name: Build 'all' target with extra arguments\n  community.general.make:\n    chdir: /home/ubuntu/cool-project\n    target: all\n    params:\n      NUM_THREADS: 4\n      BACKEND: lapack\n\n- name: Build 'all' target with a custom Makefile\n  community.general.make:\n    chdir: /home/ubuntu/cool-project\n    target: all\n    file: /some-project/Makefile\n"
  },
  "community.general.manageiq_alert_profiles": {
    "doc": {
      "description": "The manageiq_alert_profiles module supports adding, updating and deleting alert profiles in ManageIQ.",
      "has_action": false,
      "options": {
        "alerts": {
          "aliases": [],
          "description": "List of alert descriptions to assign to this profile.\nRequired if state is \"present\"",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "manageiq_connection": {
          "aliases": [],
          "description": "ManageIQ connection configuration information.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [
                "ca_bundle_path"
              ],
              "description": "The path to a CA bundle file or directory with certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "ManageIQ password. C(MIQ_PASSWORD) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "ManageIQ token. C(MIQ_TOKEN) env var if set. otherwise, required if no username or password is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "ManageIQ environment url. C(MIQ_URL) env var if set. otherwise, it is required to pass it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether SSL certificates should be verified for HTTPS requests. defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The unique alert profile name in ManageIQ.\nRequired when state is \"absent\" or \"present\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notes": {
          "aliases": [],
          "description": "Optional notes for this profile",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_type": {
          "aliases": [],
          "description": "The resource type for the alert profile in ManageIQ. Required when state is \"present\".",
          "type": "str",
          "required": false,
          "choices": [
            "Vm",
            "ContainerNode",
            "MiqServer",
            "Host",
            "Storage",
            "EmsCluster",
            "ExtManagementSystem",
            "MiddlewareServer"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "absent - alert profile should not exist,\npresent - alert profile should exist,",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "manageiq-client U(https://github.com/ManageIQ/manageiq-api-client-python/)"
      ],
      "short_description": "Configuration of alert profiles for ManageIQ"
    },
    "examples": "\n- name: Add an alert profile to ManageIQ\n  community.general.manageiq_alert_profiles:\n    state: present\n    name: Test profile\n    resource_type: ContainerNode\n    alerts:\n      - Test Alert 01\n      - Test Alert 02\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Delete an alert profile from ManageIQ\n  community.general.manageiq_alert_profiles:\n    state: absent\n    name: Test profile\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n"
  },
  "community.general.manageiq_alerts": {
    "doc": {
      "description": "The manageiq_alerts module supports adding, updating and deleting alerts in ManageIQ.",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "The unique alert description in ManageIQ.\nRequired when state is \"absent\" or \"present\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable or disable the alert. Required if state is \"present\".",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "expression": {
          "aliases": [],
          "description": "The alert expression for ManageIQ.\nCan either be in the \"Miq Expression\" format or the \"Hash Expression format\".\nRequired if state is \"present\".",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "expression_type": {
          "aliases": [],
          "description": "Expression type.",
          "default": "hash",
          "type": "str",
          "required": false,
          "choices": [
            "hash",
            "miq"
          ],
          "suboptions": {}
        },
        "manageiq_connection": {
          "aliases": [],
          "description": "ManageIQ connection configuration information.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [
                "ca_bundle_path"
              ],
              "description": "The path to a CA bundle file or directory with certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "ManageIQ password. C(MIQ_PASSWORD) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "ManageIQ token. C(MIQ_TOKEN) env var if set. otherwise, required if no username or password is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "ManageIQ environment url. C(MIQ_URL) env var if set. otherwise, it is required to pass it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether SSL certificates should be verified for HTTPS requests. defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "options": {
          "aliases": [],
          "description": "Additional alert options, such as notification type and frequency",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "resource_type": {
          "aliases": [],
          "description": "The entity type for the alert in ManageIQ. Required when state is \"present\".",
          "type": "str",
          "required": false,
          "choices": [
            "Vm",
            "ContainerNode",
            "MiqServer",
            "Host",
            "Storage",
            "EmsCluster",
            "ExtManagementSystem",
            "MiddlewareServer"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "absent - alert should not exist,\npresent - alert should exist,",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "manageiq-client U(https://github.com/ManageIQ/manageiq-api-client-python/)"
      ],
      "short_description": "Configuration of alerts in ManageIQ"
    },
    "examples": "\n- name: Add an alert with a \"hash expression\" to ManageIQ\n  community.general.manageiq_alerts:\n    state: present\n    description: Test Alert 01\n    options:\n      notifications:\n        email:\n          to: [\"example@example.com\"]\n          from: \"example@example.com\"\n    resource_type: ContainerNode\n    expression:\n        eval_method: hostd_log_threshold\n        mode: internal\n        options: {}\n    enabled: true\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Add an alert with a \"miq expression\" to ManageIQ\n  community.general.manageiq_alerts:\n    state: present\n    description: Test Alert 02\n    options:\n      notifications:\n        email:\n          to: [\"example@example.com\"]\n          from: \"example@example.com\"\n    resource_type: Vm\n    expression_type: miq\n    expression:\n        and:\n          - CONTAINS:\n              tag: Vm.managed-environment\n              value: prod\n          - not:\n            CONTAINS:\n              tag: Vm.host.managed-environment\n              value: prod\n    enabled: true\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Delete an alert from ManageIQ\n  community.general.manageiq_alerts:\n    state: absent\n    description: Test Alert 01\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n"
  },
  "community.general.manageiq_group": {
    "doc": {
      "description": "The manageiq_group module supports adding, updating and deleting groups in ManageIQ.",
      "has_action": false,
      "options": {
        "belongsto_filters": {
          "aliases": [],
          "description": "A list of strings with a reference to the allowed host, cluster or folder",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "belongsto_filters_merge_mode": {
          "aliases": [],
          "description": "In merge mode existing settings are merged with the supplied C(belongsto_filters).\nIn replace mode current values are replaced with the supplied C(belongsto_filters).",
          "default": "replace",
          "type": "str",
          "required": false,
          "choices": [
            "merge",
            "replace"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The group description.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "managed_filters": {
          "aliases": [],
          "description": "The tag values per category",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "managed_filters_merge_mode": {
          "aliases": [],
          "description": "In merge mode existing categories are kept or updated, new categories are added.\nIn replace mode all categories will be replaced with the supplied C(managed_filters).",
          "default": "replace",
          "type": "str",
          "required": false,
          "choices": [
            "merge",
            "replace"
          ],
          "suboptions": {}
        },
        "manageiq_connection": {
          "aliases": [],
          "description": "ManageIQ connection configuration information.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [
                "ca_bundle_path"
              ],
              "description": "The path to a CA bundle file or directory with certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "ManageIQ password. C(MIQ_PASSWORD) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "ManageIQ token. C(MIQ_TOKEN) env var if set. otherwise, required if no username or password is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "ManageIQ environment url. C(MIQ_URL) env var if set. otherwise, it is required to pass it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether SSL certificates should be verified for HTTPS requests. defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "role": {
          "aliases": [],
          "description": "The the group role name\nThe C(role_id) has precedence over the C(role) when supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "role_id": {
          "aliases": [],
          "description": "The the group role id",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "absent - group should not exist, present - group should be.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tenant": {
          "aliases": [],
          "description": "The tenant for the group identified by the tenant name.\nThe C(tenant_id) has precedence over the C(tenant) when supplied.\nTenant names are case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant for the group identified by the tenant id.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "manageiq-client",
        "manageiq-client U(https://github.com/ManageIQ/manageiq-api-client-python/)"
      ],
      "short_description": "Management of groups in ManageIQ."
    },
    "examples": "\n- name: Create a group in ManageIQ with the role EvmRole-user and tenant 'my_tenant'\n  community.general.manageiq_group:\n    description: 'MyGroup-user'\n    role: 'EvmRole-user'\n    tenant: 'my_tenant'\n    manageiq_connection:\n      url: 'https://manageiq_server'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Create a group in ManageIQ with the role EvmRole-user and tenant with tenant_id 4\n  community.general.manageiq_group:\n    description: 'MyGroup-user'\n    role: 'EvmRole-user'\n    tenant_id: 4\n    manageiq_connection:\n      url: 'https://manageiq_server'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name:\n  - Create or update a group in ManageIQ with the role EvmRole-user and tenant my_tenant.\n  - Apply 3 prov_max_cpu and 2 department tags to the group.\n  - Limit access to a cluster for the group.\n  community.general.manageiq_group:\n    description: 'MyGroup-user'\n    role: 'EvmRole-user'\n    tenant: my_tenant\n    managed_filters:\n      prov_max_cpu:\n      - '1'\n      - '2'\n      - '4'\n      department:\n      - defense\n      - engineering\n    managed_filters_merge_mode: replace\n    belongsto_filters:\n    - \"/belongsto/ExtManagementSystem|ProviderName/EmsFolder|Datacenters/EmsFolder|dc_name/EmsFolder|host/EmsCluster|Cluster name\"\n    belongsto_filters_merge_mode: merge\n    manageiq_connection:\n      url: 'https://manageiq_server'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Delete a group in ManageIQ\n  community.general.manageiq_group:\n    state: 'absent'\n    description: 'MyGroup-user'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n\n- name: Delete a group in ManageIQ using a token\n  community.general.manageiq_group:\n    state: 'absent'\n    description: 'MyGroup-user'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      token: 'sometoken'\n"
  },
  "community.general.manageiq_policies": {
    "doc": {
      "description": "The manageiq_policies module supports adding and deleting policy_profiles in ManageIQ.",
      "has_action": false,
      "options": {
        "manageiq_connection": {
          "aliases": [],
          "description": "ManageIQ connection configuration information.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [
                "ca_bundle_path"
              ],
              "description": "The path to a CA bundle file or directory with certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "ManageIQ password. C(MIQ_PASSWORD) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "ManageIQ token. C(MIQ_TOKEN) env var if set. otherwise, required if no username or password is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "ManageIQ environment url. C(MIQ_URL) env var if set. otherwise, it is required to pass it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether SSL certificates should be verified for HTTPS requests. defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "policy_profiles": {
          "aliases": [],
          "description": "list of dictionaries, each includes the policy_profile 'name' key.\nrequired if state is present or absent.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "resource_id": {
          "aliases": [],
          "description": "The ID of the resource to which the profile should be [un]assigned.\nMust be specified if I(resource_name) is not set. Both options are mutually exclusive.",
          "type": "int",
          "required": false,
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "resource_name": {
          "aliases": [],
          "description": "The name of the resource to which the profile should be [un]assigned.\nMust be specified if I(resource_id) is not set. Both options are mutually exclusive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_type": {
          "aliases": [],
          "description": "The type of the resource to which the profile should be [un]assigned.",
          "type": "str",
          "required": true,
          "choices": [
            "provider",
            "host",
            "vm",
            "blueprint",
            "category",
            "cluster",
            "data store",
            "group",
            "resource pool",
            "service",
            "service template",
            "template",
            "tenant",
            "user"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "absent - policy_profiles should not exist,\npresent - policy_profiles should exist,\nlist - list current policy_profiles and policies.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "list"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "manageiq-client U(https://github.com/ManageIQ/manageiq-api-client-python/)"
      ],
      "short_description": "Management of resource policy_profiles in ManageIQ."
    },
    "examples": "\n- name: Assign new policy_profile for a provider in ManageIQ\n  community.general.manageiq_policies:\n    resource_name: 'EngLab'\n    resource_type: 'provider'\n    policy_profiles:\n      - name: openscap profile\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Unassign a policy_profile for a provider in ManageIQ\n  community.general.manageiq_policies:\n    state: absent\n    resource_name: 'EngLab'\n    resource_type: 'provider'\n    policy_profiles:\n      - name: openscap profile\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: List current policy_profile and policies for a provider in ManageIQ\n  community.general.manageiq_policies:\n    state: list\n    resource_name: 'EngLab'\n    resource_type: 'provider'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n"
  },
  "community.general.manageiq_provider": {
    "doc": {
      "description": "The manageiq_provider module supports adding, updating, and deleting provider in ManageIQ.",
      "has_action": false,
      "options": {
        "alerts": {
          "aliases": [],
          "description": "Alerts endpoint connection information.",
          "required": false,
          "suboptions": {
            "auth_key": {
              "aliases": [],
              "description": "Provider's api endpoint authentication bearer token. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "certificate_authority": {
              "aliases": [],
              "description": "The CA bundle string with custom certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "The provider's api hostname.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Provider's api endpoint authentication password. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "The provider's api port.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "security_protocol": {
              "aliases": [],
              "description": "How SSL certificates should be used for HTTPS requests. defaults to None.",
              "type": "str",
              "required": false,
              "choices": [
                "ssl-with-validation",
                "ssl-with-validation-custom-ca",
                "ssl-without-validation",
                "non-ssl"
              ],
              "suboptions": {}
            },
            "userid": {
              "aliases": [],
              "description": "Provider's api endpoint authentication userid. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "Whether SSL certificates should be verified for HTTPS requests (deprecated). defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "api_version": {
          "aliases": [],
          "description": "The OpenStack Keystone API version. defaults to None.",
          "type": "str",
          "required": false,
          "choices": [
            "v2",
            "v3"
          ],
          "suboptions": {}
        },
        "azure_tenant_id": {
          "aliases": [
            "keystone_v3_domain_id"
          ],
          "description": "Tenant ID. defaults to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_default_vnc_port_end": {
          "aliases": [],
          "description": "The last port in the host VNC range. defaults to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_default_vnc_port_start": {
          "aliases": [],
          "description": "The first port in the host VNC range. defaults to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "manageiq_connection": {
          "aliases": [],
          "description": "ManageIQ connection configuration information.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [
                "ca_bundle_path"
              ],
              "description": "The path to a CA bundle file or directory with certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "ManageIQ password. C(MIQ_PASSWORD) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "ManageIQ token. C(MIQ_TOKEN) env var if set. otherwise, required if no username or password is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "ManageIQ environment url. C(MIQ_URL) env var if set. otherwise, it is required to pass it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether SSL certificates should be verified for HTTPS requests. defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "metrics": {
          "aliases": [],
          "description": "Metrics endpoint connection information.",
          "required": false,
          "suboptions": {
            "auth_key": {
              "aliases": [],
              "description": "Provider's api endpoint authentication bearer token. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "certificate_authority": {
              "aliases": [],
              "description": "The CA bundle string with custom certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "The provider's api hostname.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Provider's api endpoint authentication password. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "path": {
              "aliases": [],
              "description": "Database name for oVirt metrics. Defaults to C(ovirt_engine_history).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "The provider's api port.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "security_protocol": {
              "aliases": [],
              "description": "How SSL certificates should be used for HTTPS requests. defaults to None.",
              "type": "str",
              "required": false,
              "choices": [
                "ssl-with-validation",
                "ssl-with-validation-custom-ca",
                "ssl-without-validation",
                "non-ssl"
              ],
              "suboptions": {}
            },
            "userid": {
              "aliases": [],
              "description": "Provider's api endpoint authentication userid. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "Whether SSL certificates should be verified for HTTPS requests (deprecated). defaults to True.",
              "default": "yes",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The provider's name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Google Compute Engine Project ID. defaults to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "Default endpoint connection information, required if state is true.",
          "required": false,
          "suboptions": {
            "auth_key": {
              "aliases": [],
              "description": "Provider's api endpoint authentication bearer token. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "certificate_authority": {
              "aliases": [],
              "description": "The CA bundle string with custom certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "The provider's api hostname.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Provider's api endpoint authentication password. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "The provider's api port.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "security_protocol": {
              "aliases": [],
              "description": "How SSL certificates should be used for HTTPS requests. defaults to None.",
              "type": "str",
              "required": false,
              "choices": [
                "ssl-with-validation",
                "ssl-with-validation-custom-ca",
                "ssl-without-validation",
                "non-ssl"
              ],
              "suboptions": {}
            },
            "userid": {
              "aliases": [],
              "description": "Provider's api endpoint authentication userid. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "Whether SSL certificates should be verified for HTTPS requests (deprecated). defaults to True.",
              "default": "yes",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "provider_region": {
          "aliases": [],
          "description": "The provider region name to connect to (e.g. AWS region for Amazon).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssh_keypair": {
          "aliases": [],
          "description": "SSH key pair used for SSH connections to all hosts in this provider.",
          "required": false,
          "suboptions": {
            "auth_key": {
              "aliases": [],
              "description": "SSH private key.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "Director hostname.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "userid": {
              "aliases": [],
              "description": "SSH username.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether certificates should be verified for connections.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "absent - provider should not exist, present - provider should be present, refresh - provider will be refreshed",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "refresh"
          ],
          "suboptions": {}
        },
        "subscription": {
          "aliases": [],
          "description": "Microsoft Azure subscription ID. defaults to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_mapping_enabled": {
          "aliases": [],
          "description": "Whether to enable mapping of existing tenants. defaults to False.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The provider's type.",
          "type": "str",
          "required": false,
          "choices": [
            "Openshift",
            "Amazon",
            "oVirt",
            "VMware",
            "Azure",
            "Director",
            "OpenStack",
            "GCE"
          ],
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "The ManageIQ zone name that will manage the provider.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "manageiq-client U(https://github.com/ManageIQ/manageiq-api-client-python/)"
      ],
      "short_description": "Management of provider in ManageIQ."
    },
    "examples": "\n- name: Create a new provider in ManageIQ ('Hawkular' metrics)\n  community.general.manageiq_provider:\n    name: 'EngLab'\n    type: 'OpenShift'\n    state: 'present'\n    provider:\n      auth_key: 'topSecret'\n      hostname: 'example.com'\n      port: 8443\n      validate_certs: true\n      security_protocol: 'ssl-with-validation-custom-ca'\n      certificate_authority: |\n        -----BEGIN CERTIFICATE-----\n        FAKECERTsdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\n        c2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkwHhcNMTcwODIxMTI1NTE5WhcNMjIwODIw\n        MTI1NTIwWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkw\n        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDUDnL2tQ2xf/zO7F7hmZ4S\n        ZuwKENdI4IYuWSxye4i3hPhKg6eKPzGzmDNWkIMDOrDAj1EgVSNPtPwsOL8OWvJm\n        AaTjr070D7ZGWWnrrDrWEClBx9Rx/6JAM38RT8Pu7c1hXBm0J81KufSLLYiZ/gOw\n        Znks5v5RUSGcAXvLkBJeATbsbh6fKX0RgQ3fFTvqQaE/r8LxcTN1uehPX1g5AaRa\n        z/SNDHaFtQlE3XcqAAukyMn4N5kdNcuwF3GlQ+tJnJv8SstPkfQcZbTMUQ7I2KpJ\n        ajXnMxmBhV5fCN4rb0QUNCrk2/B+EUMBY4MnxIakqNxnN1kvgI7FBbFgrHUe6QvJ\n        AgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n        SIb3DQEBCwUAA4IBAQAYRV57LUsqznSLZHA77o9+0fQetIE115DYP7wea42PODJI\n        QJ+JETEfoCr0+YOMAbVmznP9GH5cMTKEWHExcIpbMBU7nMZp6A3htcJgF2fgPzOA\n        aTUtzkuVCSrV//mbbYVxoFOc6sR3Br0wBs5+5iz3dBSt7xmgpMzZvqsQl655i051\n        gGSTIY3z5EJmBZBjwuTjal9mMoPGA4eoTPqlITJDHQ2bdCV2oDbc7zqupGrUfZFA\n        qzgieEyGzdCSRwjr1/PibA3bpwHyhD9CGD0PRVVTLhw6h6L5kuN1jA20OfzWxf/o\n        XUsdmRaWiF+l4s6Dcd56SuRp5SGNa2+vP9Of/FX5\n        -----END CERTIFICATE-----\n    metrics:\n      auth_key: 'topSecret'\n      role: 'hawkular'\n      hostname: 'example.com'\n      port: 443\n      validate_certs: true\n      security_protocol: 'ssl-with-validation-custom-ca'\n      certificate_authority: |\n        -----BEGIN CERTIFICATE-----\n        FAKECERTsdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\n        c2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkwHhcNMTcwODIxMTI1NTE5WhcNMjIwODIw\n        MTI1NTIwWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkw\n        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDUDnL2tQ2xf/zO7F7hmZ4S\n        ZuwKENdI4IYuWSxye4i3hPhKg6eKPzGzmDNWkIMDOrDAj1EgVSNPtPwsOL8OWvJm\n        AaTjr070D7ZGWWnrrDrWEClBx9Rx/6JAM38RT8Pu7c1hXBm0J81KufSLLYiZ/gOw\n        Znks5v5RUSGcAXvLkBJeATbsbh6fKX0RgQ3fFTvqQaE/r8LxcTN1uehPX1g5AaRa\n        z/SNDHaFtQlE3XcqAAukyMn4N5kdNcuwF3GlQ+tJnJv8SstPkfQcZbTMUQ7I2KpJ\n        ajXnMxmBhV5fCN4rb0QUNCrk2/B+EUMBY4MnxIakqNxnN1kvgI7FBbFgrHUe6QvJ\n        AgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n        SIb3DQEBCwUAA4IBAQAYRV57LUsqznSLZHA77o9+0fQetIE115DYP7wea42PODJI\n        QJ+JETEfoCr0+YOMAbVmznP9GH5cMTKEWHExcIpbMBU7nMZp6A3htcJgF2fgPzOA\n        aTUtzkuVCSrV//mbbYVxoFOc6sR3Br0wBs5+5iz3dBSt7xmgpMzZvqsQl655i051\n        gGSTIY3z5EJmBZBjwuTjal9mMoPGA4eoTPqlITJDHQ2bdCV2oDbc7zqupGrUfZFA\n        qzgieEyGzdCSRwjr1/PibA3bpwHyhD9CGD0PRVVTLhw6h6L5kuN1jA20OfzWxf/o\n        XUsdmRaWiF+l4s6Dcd56SuRp5SGNa2+vP9Of/FX5\n        -----END CERTIFICATE-----\n    manageiq_connection:\n      url: 'https://127.0.0.1:80'\n      username: 'admin'\n      password: 'password'\n      validate_certs: true\n\n\n- name: Update an existing provider named 'EngLab' (defaults to 'Prometheus' metrics)\n  community.general.manageiq_provider:\n    name: 'EngLab'\n    type: 'Openshift'\n    state: 'present'\n    provider:\n      auth_key: 'topSecret'\n      hostname: 'next.example.com'\n      port: 8443\n      validate_certs: true\n      security_protocol: 'ssl-with-validation-custom-ca'\n      certificate_authority: |\n        -----BEGIN CERTIFICATE-----\n        FAKECERTsdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\n        c2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkwHhcNMTcwODIxMTI1NTE5WhcNMjIwODIw\n        MTI1NTIwWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkw\n        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDUDnL2tQ2xf/zO7F7hmZ4S\n        ZuwKENdI4IYuWSxye4i3hPhKg6eKPzGzmDNWkIMDOrDAj1EgVSNPtPwsOL8OWvJm\n        AaTjr070D7ZGWWnrrDrWEClBx9Rx/6JAM38RT8Pu7c1hXBm0J81KufSLLYiZ/gOw\n        Znks5v5RUSGcAXvLkBJeATbsbh6fKX0RgQ3fFTvqQaE/r8LxcTN1uehPX1g5AaRa\n        z/SNDHaFtQlE3XcqAAukyMn4N5kdNcuwF3GlQ+tJnJv8SstPkfQcZbTMUQ7I2KpJ\n        ajXnMxmBhV5fCN4rb0QUNCrk2/B+EUMBY4MnxIakqNxnN1kvgI7FBbFgrHUe6QvJ\n        AgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n        SIb3DQEBCwUAA4IBAQAYRV57LUsqznSLZHA77o9+0fQetIE115DYP7wea42PODJI\n        QJ+JETEfoCr0+YOMAbVmznP9GH5cMTKEWHExcIpbMBU7nMZp6A3htcJgF2fgPzOA\n        aTUtzkuVCSrV//mbbYVxoFOc6sR3Br0wBs5+5iz3dBSt7xmgpMzZvqsQl655i051\n        gGSTIY3z5EJmBZBjwuTjal9mMoPGA4eoTPqlITJDHQ2bdCV2oDbc7zqupGrUfZFA\n        qzgieEyGzdCSRwjr1/PibA3bpwHyhD9CGD0PRVVTLhw6h6L5kuN1jA20OfzWxf/o\n        XUsdmRaWiF+l4s6Dcd56SuRp5SGNa2+vP9Of/FX5\n        -----END CERTIFICATE-----\n    metrics:\n      auth_key: 'topSecret'\n      hostname: 'next.example.com'\n      port: 443\n      validate_certs: true\n      security_protocol: 'ssl-with-validation-custom-ca'\n      certificate_authority: |\n        -----BEGIN CERTIFICATE-----\n        FAKECERTsdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\n        c2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkwHhcNMTcwODIxMTI1NTE5WhcNMjIwODIw\n        MTI1NTIwWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkw\n        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDUDnL2tQ2xf/zO7F7hmZ4S\n        ZuwKENdI4IYuWSxye4i3hPhKg6eKPzGzmDNWkIMDOrDAj1EgVSNPtPwsOL8OWvJm\n        AaTjr070D7ZGWWnrrDrWEClBx9Rx/6JAM38RT8Pu7c1hXBm0J81KufSLLYiZ/gOw\n        Znks5v5RUSGcAXvLkBJeATbsbh6fKX0RgQ3fFTvqQaE/r8LxcTN1uehPX1g5AaRa\n        z/SNDHaFtQlE3XcqAAukyMn4N5kdNcuwF3GlQ+tJnJv8SstPkfQcZbTMUQ7I2KpJ\n        ajXnMxmBhV5fCN4rb0QUNCrk2/B+EUMBY4MnxIakqNxnN1kvgI7FBbFgrHUe6QvJ\n        AgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n        SIb3DQEBCwUAA4IBAQAYRV57LUsqznSLZHA77o9+0fQetIE115DYP7wea42PODJI\n        QJ+JETEfoCr0+YOMAbVmznP9GH5cMTKEWHExcIpbMBU7nMZp6A3htcJgF2fgPzOA\n        aTUtzkuVCSrV//mbbYVxoFOc6sR3Br0wBs5+5iz3dBSt7xmgpMzZvqsQl655i051\n        gGSTIY3z5EJmBZBjwuTjal9mMoPGA4eoTPqlITJDHQ2bdCV2oDbc7zqupGrUfZFA\n        qzgieEyGzdCSRwjr1/PibA3bpwHyhD9CGD0PRVVTLhw6h6L5kuN1jA20OfzWxf/o\n        XUsdmRaWiF+l4s6Dcd56SuRp5SGNa2+vP9Of/FX5\n        -----END CERTIFICATE-----\n    manageiq_connection:\n      url: 'https://127.0.0.1'\n      username: 'admin'\n      password: 'password'\n      validate_certs: true\n\n\n- name: Delete a provider in ManageIQ\n  community.general.manageiq_provider:\n    name: 'EngLab'\n    type: 'Openshift'\n    state: 'absent'\n    manageiq_connection:\n      url: 'https://127.0.0.1'\n      username: 'admin'\n      password: 'password'\n      validate_certs: true\n\n\n- name: Create a new Amazon provider in ManageIQ using token authentication\n  community.general.manageiq_provider:\n    name: 'EngAmazon'\n    type: 'Amazon'\n    state: 'present'\n    provider:\n      hostname: 'amazon.example.com'\n      userid: 'hello'\n      password: 'world'\n    manageiq_connection:\n      url: 'https://127.0.0.1'\n      token: 'VeryLongToken'\n      validate_certs: true\n\n\n- name: Create a new oVirt provider in ManageIQ\n  community.general.manageiq_provider:\n    name: 'RHEV'\n    type: 'oVirt'\n    state: 'present'\n    provider:\n      hostname: 'rhev01.example.com'\n      userid: 'admin@internal'\n      password: 'password'\n      validate_certs: true\n      certificate_authority: |\n        -----BEGIN CERTIFICATE-----\n        FAKECERTsdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\n        c2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkwHhcNMTcwODIxMTI1NTE5WhcNMjIwODIw\n        MTI1NTIwWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkw\n        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDUDnL2tQ2xf/zO7F7hmZ4S\n        ZuwKENdI4IYuWSxye4i3hPhKg6eKPzGzmDNWkIMDOrDAj1EgVSNPtPwsOL8OWvJm\n        AaTjr070D7ZGWWnrrDrWEClBx9Rx/6JAM38RT8Pu7c1hXBm0J81KufSLLYiZ/gOw\n        Znks5v5RUSGcAXvLkBJeATbsbh6fKX0RgQ3fFTvqQaE/r8LxcTN1uehPX1g5AaRa\n        z/SNDHaFtQlE3XcqAAukyMn4N5kdNcuwF3GlQ+tJnJv8SstPkfQcZbTMUQ7I2KpJ\n        ajXnMxmBhV5fCN4rb0QUNCrk2/B+EUMBY4MnxIakqNxnN1kvgI7FBbFgrHUe6QvJ\n        AgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n        SIb3DQEBCwUAA4IBAQAYRV57LUsqznSLZHA77o9+0fQetIE115DYP7wea42PODJI\n        QJ+JETEfoCr0+YOMAbVmznP9GH5cMTKEWHExcIpbMBU7nMZp6A3htcJgF2fgPzOA\n        aTUtzkuVCSrV//mbbYVxoFOc6sR3Br0wBs5+5iz3dBSt7xmgpMzZvqsQl655i051\n        gGSTIY3z5EJmBZBjwuTjal9mMoPGA4eoTPqlITJDHQ2bdCV2oDbc7zqupGrUfZFA\n        qzgieEyGzdCSRwjr1/PibA3bpwHyhD9CGD0PRVVTLhw6h6L5kuN1jA20OfzWxf/o\n        XUsdmRaWiF+l4s6Dcd56SuRp5SGNa2+vP9Of/FX5\n        -----END CERTIFICATE-----\n    metrics:\n      hostname: 'metrics.example.com'\n      path: 'ovirt_engine_history'\n      userid: 'user_id_metrics'\n      password: 'password_metrics'\n      validate_certs: true\n      certificate_authority: |\n        -----BEGIN CERTIFICATE-----\n        FAKECERTsdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\n        c2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkwHhcNMTcwODIxMTI1NTE5WhcNMjIwODIw\n        MTI1NTIwWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkw\n        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDUDnL2tQ2xf/zO7F7hmZ4S\n        ZuwKENdI4IYuWSxye4i3hPhKg6eKPzGzmDNWkIMDOrDAj1EgVSNPtPwsOL8OWvJm\n        AaTjr070D7ZGWWnrrDrWEClBx9Rx/6JAM38RT8Pu7c1hXBm0J81KufSLLYiZ/gOw\n        Znks5v5RUSGcAXvLkBJeATbsbh6fKX0RgQ3fFTvqQaE/r8LxcTN1uehPX1g5AaRa\n        z/SNDHaFtQlE3XcqAAukyMn4N5kdNcuwF3GlQ+tJnJv8SstPkfQcZbTMUQ7I2KpJ\n        ajXnMxmBhV5fCN4rb0QUNCrk2/B+EUMBY4MnxIakqNxnN1kvgI7FBbFgrHUe6QvJ\n        AgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n        SIb3DQEBCwUAA4IBAQAYRV57LUsqznSLZHA77o9+0fQetIE115DYP7wea42PODJI\n        QJ+JETEfoCr0+YOMAbVmznP9GH5cMTKEWHExcIpbMBU7nMZp6A3htcJgF2fgPzOA\n        aTUtzkuVCSrV//mbbYVxoFOc6sR3Br0wBs5+5iz3dBSt7xmgpMzZvqsQl655i051\n        gGSTIY3z5EJmBZBjwuTjal9mMoPGA4eoTPqlITJDHQ2bdCV2oDbc7zqupGrUfZFA\n        qzgieEyGzdCSRwjr1/PibA3bpwHyhD9CGD0PRVVTLhw6h6L5kuN1jA20OfzWxf/o\n        XUsdmRaWiF+l4s6Dcd56SuRp5SGNa2+vP9Of/FX5\n        -----END CERTIFICATE-----\n    manageiq_connection:\n      url: 'https://127.0.0.1'\n      username: 'admin'\n      password: 'password'\n      validate_certs: true\n\n- name: Create a new VMware provider in ManageIQ\n  community.general.manageiq_provider:\n    name: 'EngVMware'\n    type: 'VMware'\n    state: 'present'\n    provider:\n      hostname: 'vcenter.example.com'\n      host_default_vnc_port_start: 5800\n      host_default_vnc_port_end: 5801\n      userid: 'root'\n      password: 'password'\n    manageiq_connection:\n      url: 'https://127.0.0.1'\n      token: 'VeryLongToken'\n      validate_certs: true\n\n- name: Create a new Azure provider in ManageIQ\n  community.general.manageiq_provider:\n    name: 'EngAzure'\n    type: 'Azure'\n    provider_region: 'northeurope'\n    subscription: 'e272bd74-f661-484f-b223-88dd128a4049'\n    azure_tenant_id: 'e272bd74-f661-484f-b223-88dd128a4048'\n    state: 'present'\n    provider:\n      hostname: 'azure.example.com'\n      userid: 'e272bd74-f661-484f-b223-88dd128a4049'\n      password: 'password'\n    manageiq_connection:\n      url: 'https://cf-6af0.rhpds.opentlc.com'\n      username: 'admin'\n      password: 'password'\n      validate_certs: false\n\n- name: Create a new OpenStack Director provider in ManageIQ with rsa keypair\n  community.general.manageiq_provider:\n    name: 'EngDirector'\n    type: 'Director'\n    api_version: 'v3'\n    state: 'present'\n    provider:\n      hostname: 'director.example.com'\n      userid: 'admin'\n      password: 'password'\n      security_protocol: 'ssl-with-validation'\n      validate_certs: 'true'\n      certificate_authority: |\n        -----BEGIN CERTIFICATE-----\n        FAKECERTsdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\n        c2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkwHhcNMTcwODIxMTI1NTE5WhcNMjIwODIw\n        MTI1NTIwWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkw\n        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDUDnL2tQ2xf/zO7F7hmZ4S\n        ZuwKENdI4IYuWSxye4i3hPhKg6eKPzGzmDNWkIMDOrDAj1EgVSNPtPwsOL8OWvJm\n        AaTjr070D7ZGWWnrrDrWEClBx9Rx/6JAM38RT8Pu7c1hXBm0J81KufSLLYiZ/gOw\n        Znks5v5RUSGcAXvLkBJeATbsbh6fKX0RgQ3fFTvqQaE/r8LxcTN1uehPX1g5AaRa\n        z/SNDHaFtQlE3XcqAAukyMn4N5kdNcuwF3GlQ+tJnJv8SstPkfQcZbTMUQ7I2KpJ\n        ajXnMxmBhV5fCN4rb0QUNCrk2/B+EUMBY4MnxIakqNxnN1kvgI7FBbFgrHUe6QvJ\n        AgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n        SIb3DQEBCwUAA4IBAQAYRV57LUsqznSLZHA77o9+0fQetIE115DYP7wea42PODJI\n        QJ+JETEfoCr0+YOMAbVmznP9GH5cMTKEWHExcIpbMBU7nMZp6A3htcJgF2fgPzOA\n        aTUtzkuVCSrV//mbbYVxoFOc6sR3Br0wBs5+5iz3dBSt7xmgpMzZvqsQl655i051\n        gGSTIY3z5EJmBZBjwuTjal9mMoPGA4eoTPqlITJDHQ2bdCV2oDbc7zqupGrUfZFA\n        qzgieEyGzdCSRwjr1/PibA3bpwHyhD9CGD0PRVVTLhw6h6L5kuN1jA20OfzWxf/o\n        XUsdmRaWiF+l4s6Dcd56SuRp5SGNa2+vP9Of/FX5\n        -----END CERTIFICATE-----\n    ssh_keypair:\n      hostname: director.example.com\n      userid: heat-admin\n      auth_key: 'SecretSSHPrivateKey'\n\n- name: Create a new OpenStack provider in ManageIQ with amqp metrics\n  community.general.manageiq_provider:\n    name: 'EngOpenStack'\n    type: 'OpenStack'\n    api_version: 'v3'\n    state: 'present'\n    provider_region: 'europe'\n    tenant_mapping_enabled: 'False'\n    keystone_v3_domain_id: 'mydomain'\n    provider:\n      hostname: 'openstack.example.com'\n      userid: 'admin'\n      password: 'password'\n      security_protocol: 'ssl-with-validation'\n      validate_certs: 'true'\n      certificate_authority: |\n        -----BEGIN CERTIFICATE-----\n        FAKECERTsdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\n        c2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkwHhcNMTcwODIxMTI1NTE5WhcNMjIwODIw\n        MTI1NTIwWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MDMzMjAxMTkw\n        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDUDnL2tQ2xf/zO7F7hmZ4S\n        ZuwKENdI4IYuWSxye4i3hPhKg6eKPzGzmDNWkIMDOrDAj1EgVSNPtPwsOL8OWvJm\n        AaTjr070D7ZGWWnrrDrWEClBx9Rx/6JAM38RT8Pu7c1hXBm0J81KufSLLYiZ/gOw\n        Znks5v5RUSGcAXvLkBJeATbsbh6fKX0RgQ3fFTvqQaE/r8LxcTN1uehPX1g5AaRa\n        z/SNDHaFtQlE3XcqAAukyMn4N5kdNcuwF3GlQ+tJnJv8SstPkfQcZbTMUQ7I2KpJ\n        ajXnMxmBhV5fCN4rb0QUNCrk2/B+EUMBY4MnxIakqNxnN1kvgI7FBbFgrHUe6QvJ\n        AgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n        SIb3DQEBCwUAA4IBAQAYRV57LUsqznSLZHA77o9+0fQetIE115DYP7wea42PODJI\n        QJ+JETEfoCr0+YOMAbVmznP9GH5cMTKEWHExcIpbMBU7nMZp6A3htcJgF2fgPzOA\n        aTUtzkuVCSrV//mbbYVxoFOc6sR3Br0wBs5+5iz3dBSt7xmgpMzZvqsQl655i051\n        gGSTIY3z5EJmBZBjwuTjal9mMoPGA4eoTPqlITJDHQ2bdCV2oDbc7zqupGrUfZFA\n        qzgieEyGzdCSRwjr1/PibA3bpwHyhD9CGD0PRVVTLhw6h6L5kuN1jA20OfzWxf/o\n        XUsdmRaWiF+l4s6Dcd56SuRp5SGNa2+vP9Of/FX5\n        -----END CERTIFICATE-----\n    metrics:\n      role: amqp\n      hostname: 'amqp.example.com'\n      security_protocol: 'non-ssl'\n      port: 5666\n      userid: admin\n      password: password\n\n\n- name: Create a new GCE provider in ManageIQ\n  community.general.manageiq_provider:\n    name: 'EngGoogle'\n    type: 'GCE'\n    provider_region: 'europe-west1'\n    project: 'project1'\n    state: 'present'\n    provider:\n      hostname: 'gce.example.com'\n      auth_key: 'google_json_key'\n      validate_certs: 'false'\n"
  },
  "community.general.manageiq_tags": {
    "doc": {
      "description": "The manageiq_tags module supports adding, updating and deleting tags in ManageIQ.",
      "has_action": false,
      "options": {
        "manageiq_connection": {
          "aliases": [],
          "description": "ManageIQ connection configuration information.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [
                "ca_bundle_path"
              ],
              "description": "The path to a CA bundle file or directory with certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "ManageIQ password. C(MIQ_PASSWORD) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "ManageIQ token. C(MIQ_TOKEN) env var if set. otherwise, required if no username or password is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "ManageIQ environment url. C(MIQ_URL) env var if set. otherwise, it is required to pass it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether SSL certificates should be verified for HTTPS requests. defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "resource_id": {
          "aliases": [],
          "description": "The ID of the resource at which tags will be controlled.\nMust be specified if I(resource_name) is not set. Both options are mutually exclusive.",
          "type": "int",
          "required": false,
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "resource_name": {
          "aliases": [],
          "description": "The name of the resource at which tags will be controlled.\nMust be specified if I(resource_id) is not set. Both options are mutually exclusive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_type": {
          "aliases": [],
          "description": "The relevant resource type in manageiq.",
          "type": "str",
          "required": true,
          "choices": [
            "provider",
            "host",
            "vm",
            "blueprint",
            "category",
            "cluster",
            "data store",
            "group",
            "resource pool",
            "service",
            "service template",
            "template",
            "tenant",
            "user"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "absent - tags should not exist,\npresent - tags should exist,\nlist - list current tags.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "list"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "tags - list of dictionaries, each includes 'name' and 'category' keys.\nrequired if state is present or absent.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        }
      },
      "requirements": [
        "manageiq-client U(https://github.com/ManageIQ/manageiq-api-client-python/)"
      ],
      "short_description": "Management of resource tags in ManageIQ."
    },
    "examples": "\n- name: Create new tags for a provider in ManageIQ\n  community.general.manageiq_tags:\n    resource_name: 'EngLab'\n    resource_type: 'provider'\n    tags:\n    - category: environment\n      name: prod\n    - category: owner\n      name: prod_ops\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Create new tags for a provider in ManageIQ\n  community.general.manageiq_tags:\n    resource_id: 23000000790497\n    resource_type: 'provider'\n    tags:\n    - category: environment\n      name: prod\n    - category: owner\n      name: prod_ops\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Remove tags for a provider in ManageIQ\n  community.general.manageiq_tags:\n    state: absent\n    resource_name: 'EngLab'\n    resource_type: 'provider'\n    tags:\n    - category: environment\n      name: prod\n    - category: owner\n      name: prod_ops\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: List current tags for a provider in ManageIQ\n  community.general.manageiq_tags:\n    state: list\n    resource_name: 'EngLab'\n    resource_type: 'provider'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n"
  },
  "community.general.manageiq_tenant": {
    "doc": {
      "description": "The manageiq_tenant module supports adding, updating and deleting tenants in ManageIQ.",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "The tenant description.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "manageiq_connection": {
          "aliases": [],
          "description": "ManageIQ connection configuration information.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [
                "ca_bundle_path"
              ],
              "description": "The path to a CA bundle file or directory with certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "ManageIQ password. C(MIQ_PASSWORD) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "ManageIQ token. C(MIQ_TOKEN) env var if set. otherwise, required if no username or password is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "ManageIQ environment url. C(MIQ_URL) env var if set. otherwise, it is required to pass it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether SSL certificates should be verified for HTTPS requests. defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The tenant name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parent": {
          "aliases": [],
          "description": "The name of the parent tenant. If not supplied and no C(parent_id) is supplied the root tenant is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parent_id": {
          "aliases": [],
          "description": "The id of the parent tenant. If not supplied the root tenant is used.\nThe C(parent_id) takes president over C(parent) when supplied",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "quotas": {
          "aliases": [],
          "description": "The tenant quotas.\nAll parameters case sensitive.\nValid attributes are:\n - C(cpu_allocated) (int): use null to remove the quota.\n - C(mem_allocated) (GB): use null to remove the quota.\n - C(storage_allocated) (GB): use null to remove the quota.\n - C(vms_allocated) (int): use null to remove the quota.\n - C(templates_allocated) (int): use null to remove the quota.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "absent - tenant should not exist, present - tenant should be.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "manageiq-client",
        "manageiq-client U(https://github.com/ManageIQ/manageiq-api-client-python/)"
      ],
      "short_description": "Management of tenants in ManageIQ."
    },
    "examples": "\n- name: Update the root tenant in ManageIQ\n  community.general.manageiq_tenant:\n    name: 'My Company'\n    description: 'My company name'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Create a tenant in ManageIQ\n  community.general.manageiq_tenant:\n    name: 'Dep1'\n    description: 'Manufacturing department'\n    parent_id: 1\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Delete a tenant in ManageIQ\n  community.general.manageiq_tenant:\n    state: 'absent'\n    name: 'Dep1'\n    parent_id: 1\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Set tenant quota for cpu_allocated, mem_allocated, remove quota for vms_allocated\n  community.general.manageiq_tenant:\n    name: 'Dep1'\n    parent_id: 1\n    quotas:\n      - cpu_allocated: 100\n      - mem_allocated: 50\n      - vms_allocated: null\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n\n- name: Delete a tenant in ManageIQ using a token\n  community.general.manageiq_tenant:\n    state: 'absent'\n    name: 'Dep1'\n    parent_id: 1\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      token: 'sometoken'\n      validate_certs: False\n"
  },
  "community.general.manageiq_user": {
    "doc": {
      "description": "The manageiq_user module supports adding, updating and deleting users in ManageIQ.",
      "has_action": false,
      "options": {
        "email": {
          "aliases": [],
          "description": "The users' E-mail address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "The name of the group to which the user belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "manageiq_connection": {
          "aliases": [],
          "description": "ManageIQ connection configuration information.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [
                "ca_bundle_path"
              ],
              "description": "The path to a CA bundle file or directory with certificates. defaults to None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "ManageIQ password. C(MIQ_PASSWORD) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "ManageIQ token. C(MIQ_TOKEN) env var if set. otherwise, required if no username or password is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "ManageIQ environment url. C(MIQ_URL) env var if set. otherwise, it is required to pass it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, required if no token is passed in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "verify_ssl"
              ],
              "description": "Whether SSL certificates should be verified for HTTPS requests. defaults to True.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The users' full name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The users' password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "absent - user should not exist, present - user should be.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "C(always) will update passwords unconditionally.  C(on_create) will only set the password for a newly created user.",
          "default": "always",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "on_create"
          ],
          "suboptions": {}
        },
        "userid": {
          "aliases": [],
          "description": "The unique userid in manageiq, often mentioned as username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "manageiq-client U(https://github.com/ManageIQ/manageiq-api-client-python/)"
      ],
      "short_description": "Management of users in ManageIQ."
    },
    "examples": "\n- name: Create a new user in ManageIQ\n  community.general.manageiq_user:\n    userid: 'jdoe'\n    name: 'Jane Doe'\n    password: 'VerySecret'\n    group: 'EvmGroup-user'\n    email: 'jdoe@example.com'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Create a new user in ManageIQ using a token\n  community.general.manageiq_user:\n    userid: 'jdoe'\n    name: 'Jane Doe'\n    password: 'VerySecret'\n    group: 'EvmGroup-user'\n    email: 'jdoe@example.com'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      token: 'sometoken'\n      validate_certs: False\n\n- name: Delete a user in ManageIQ\n  community.general.manageiq_user:\n    state: 'absent'\n    userid: 'jdoe'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Delete a user in ManageIQ using a token\n  community.general.manageiq_user:\n    state: 'absent'\n    userid: 'jdoe'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      token: 'sometoken'\n      validate_certs: False\n\n- name: Update email of user in ManageIQ\n  community.general.manageiq_user:\n    userid: 'jdoe'\n    email: 'jaustine@example.com'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      username: 'admin'\n      password: 'smartvm'\n      validate_certs: False\n\n- name: Update email of user in ManageIQ using a token\n  community.general.manageiq_user:\n    userid: 'jdoe'\n    email: 'jaustine@example.com'\n    manageiq_connection:\n      url: 'http://127.0.0.1:3000'\n      token: 'sometoken'\n      validate_certs: False\n"
  },
  "community.general.mas": {
    "doc": {
      "description": "Installs, uninstalls and updates macOS applications from the Mac App Store using the C(mas-cli).",
      "has_action": false,
      "notes": "This module supports C(check_mode).",
      "options": {
        "id": {
          "aliases": [],
          "description": "The Mac App Store identifier of the app(s) you want to manage.\nThis can be found by running C(mas search APP_NAME) on your machine.",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the app installation.\nThe C(absent) value requires root permissions, also see the examples.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "latest",
            "present"
          ],
          "suboptions": {}
        },
        "upgrade_all": {
          "aliases": [
            "upgrade"
          ],
          "description": "Upgrade all installed Mac App Store apps.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "macOS 10.11+",
        "mas-cli (U(https://github.com/mas-cli/mas)) 1.5.0+ available as C(mas) in the bin path",
        "The Apple ID to use already needs to be signed in to the Mac App Store (check with C(mas account))."
      ],
      "short_description": "Manage Mac App Store applications with mas-cli",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Install Keynote\n  community.general.mas:\n    id: 409183694\n    state: present\n\n- name: Install Divvy with command mas installed in /usr/local/bin\n  community.general.mas:\n    id: 413857545\n    state: present\n  environment:\n    PATH: /usr/local/bin:{{ ansible_facts.env.PATH }}\n\n- name: Install a list of apps\n  community.general.mas:\n    id:\n      - 409183694 # Keynote\n      - 413857545 # Divvy\n    state: present\n\n- name: Ensure the latest Keynote version is installed\n  community.general.mas:\n    id: 409183694\n    state: latest\n\n- name: Upgrade all installed Mac App Store apps\n  community.general.mas:\n    upgrade_all: yes\n\n- name: Install specific apps and also upgrade all others\n  community.general.mas:\n    id:\n      - 409183694 # Keynote\n      - 413857545 # Divvy\n    state: present\n    upgrade_all: yes\n\n- name: Uninstall Divvy\n  community.general.mas:\n    id: 413857545\n    state: absent\n  become: yes # Uninstallation requires root permissions\n"
  },
  "community.general.matrix": {
    "doc": {
      "description": "This module sends html formatted notifications to matrix rooms.",
      "has_action": false,
      "options": {
        "hs_url": {
          "aliases": [],
          "description": "URL of the homeserver, where the CS-API is reachable",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "msg_html": {
          "aliases": [],
          "description": "HTML form of the message to send to matrix",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "msg_plain": {
          "aliases": [],
          "description": "Plain text form of the message to send to matrix, usually markdown",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to log in with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "room_id": {
          "aliases": [],
          "description": "ID of the room to send the notification to",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Authentication token for the API call. If provided, user_id and password are not required",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_id": {
          "aliases": [],
          "description": "The user id of the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "matrix-client (Python library)"
      ],
      "short_description": "Send notifications to matrix"
    },
    "examples": "\n- name: Send matrix notification with token\n  community.general.matrix:\n    msg_plain: \"**hello world**\"\n    msg_html: \"<b>hello world</b>\"\n    room_id: \"!12345678:server.tld\"\n    hs_url: \"https://matrix.org\"\n    token: \"{{ matrix_auth_token }}\"\n\n- name: Send matrix notification with user_id and password\n  community.general.matrix:\n    msg_plain: \"**hello world**\"\n    msg_html: \"<b>hello world</b>\"\n    room_id: \"!12345678:server.tld\"\n    hs_url: \"https://matrix.org\"\n    user_id: \"ansible_notification_bot\"\n    password: \"{{ matrix_auth_password }}\"\n"
  },
  "community.general.mattermost": {
    "doc": {
      "description": "Sends notifications to U(http://your.mattermost.url) via the Incoming WebHook integration.",
      "has_action": false,
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Mattermost webhook api key. Log into your mattermost site, go to Menu -> Integration -> Incoming Webhook -> Add Incoming Webhook. This will give you full URL. api_key is the last part. http://mattermost.example.com/hooks/C(API_KEY)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "attachments": {
          "aliases": [],
          "description": "Define a list of attachments.\nFor more information, see U(https://developers.mattermost.com/integrate/admin-guide/admin-message-attachments/).\nRequired when I(text) is not set.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "4.3.0",
          "suboptions": {}
        },
        "channel": {
          "aliases": [],
          "description": "Channel to send the message to. If absent, the message goes to the channel selected for the I(api_key).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "icon_url": {
          "aliases": [],
          "description": "Url for the message sender's icon.",
          "default": "https://www.ansible.com/favicon.ico",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "Text to send. Note that the module does not handle escaping characters.\nRequired when I(attachments) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Mattermost url (i.e. http://mattermost.yourcompany.com).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "This is the sender of the message (Username Override need to be enabled by mattermost admin, see mattermost doc.",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send Mattermost notifications"
    },
    "examples": "\n- name: Send notification message via Mattermost\n  community.general.mattermost:\n    url: http://mattermost.example.com\n    api_key: my_api_key\n    text: '{{ inventory_hostname }} completed'\n\n- name: Send notification message via Mattermost all options\n  community.general.mattermost:\n    url: http://mattermost.example.com\n    api_key: my_api_key\n    text: '{{ inventory_hostname }} completed'\n    channel: notifications\n    username: 'Ansible on {{ inventory_hostname }}'\n    icon_url: http://www.example.com/some-image-file.png\n\n- name: Send attachments message via Mattermost\n  community.general.mattermost:\n    url: http://mattermost.example.com\n    api_key: my_api_key\n    attachments:\n      - text: Display my system load on host A and B\n        color: '#ff00dd'\n        title: System load\n        fields:\n          - title: System A\n            value: \"load average: 0,74, 0,66, 0,63\"\n            short: True\n          - title: System B\n            value: 'load average: 5,16, 4,64, 2,43'\n            short: True\n"
  },
  "community.general.maven_artifact": {
    "doc": {
      "description": "Downloads an artifact from a maven repository given the maven coordinates provided to the module.\nCan retrieve snapshots or release versions of the artifact and will resolve the latest available version if one is not available.",
      "has_action": false,
      "options": {
        "artifact_id": {
          "aliases": [],
          "description": "The maven artifactId coordinate",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "checksum_alg": {
          "aliases": [],
          "description": "If C(md5), checksums will use the MD5 algorithm. This is the default.\nIf C(sha1), checksums will use the SHA1 algorithm. This can be used on systems configured to use FIPS-compliant algorithms, since MD5 will be blocked on such systems.",
          "default": "md5",
          "type": "str",
          "required": false,
          "choices": [
            "md5",
            "sha1"
          ],
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "classifier": {
          "aliases": [],
          "description": "The maven classifier coordinate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, I(client_key) is not required.",
          "type": "path",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf I(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "The path where the artifact should be written to\nIf file mode or ownerships are specified and destination path already exists, they affect the downloaded file",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "directory_mode": {
          "aliases": [],
          "description": "Filesystem permission mode applied recursively to I(dest) when it is a directory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extension": {
          "aliases": [],
          "description": "The maven type/extension coordinate",
          "default": "jar",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request.",
          "default": "no",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group_id": {
          "aliases": [],
          "description": "The Maven groupId coordinate",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "Add custom HTTP headers to a request in hash/dict format.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "keep_name": {
          "aliases": [],
          "description": "If C(yes), the downloaded artifact's name is preserved, i.e the version number remains part of it.\nThis option only has effect when C(dest) is a directory and C(version) is set to C(latest) or C(version_by_spec) is defined.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The permissions the resulting filesystem object should have.\nFor those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.\nGiving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.\nAs of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).\nIf C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.\nIf C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.\nSpecifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "aws_secret_access_key"
          ],
          "description": "The password to authenticate with to the Maven Repository. Use AWS secret access key of the repository is hosted on S3",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository_url": {
          "aliases": [],
          "description": "The URL of the Maven Repository to download from.\nUse s3://... if the repository is hosted on Amazon S3, added in version 2.2.\nUse file://... if the repository is local, added in version 2.6",
          "default": "https://repo1.maven.org/maven2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the artifact",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Specifies a timeout in seconds for the connection attempt",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "aws_secret_key"
          ],
          "description": "The username to authenticate as to the Maven Repository. Use AWS secret key of the repository is hosted on S3",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be set to C(no) when no other option exists.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verify_checksum": {
          "aliases": [],
          "description": "If C(never), the MD5/SHA1 checksum will never be downloaded and verified.\nIf C(download), the MD5/SHA1 checksum will be downloaded and verified only after artifact download. This is the default.\nIf C(change), the MD5/SHA1 checksum will be downloaded and verified if the destination already exist, to verify if they are identical. This was the behaviour before 2.6. Since it downloads the checksum before (maybe) downloading the artifact, and since some repository software, when acting as a proxy/cache, return a 404 error if the artifact has not been cached yet, it may fail unexpectedly. If you still need it, you should consider using C(always) instead - if you deal with a checksum, it is better to use it to verify integrity after download.\nC(always) combines C(download) and C(change).",
          "default": "download",
          "type": "str",
          "required": false,
          "choices": [
            "never",
            "download",
            "change",
            "always"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The maven version coordinate\nMutually exclusive with I(version_by_spec).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "version_by_spec": {
          "aliases": [],
          "description": "The maven dependency version ranges.\nSee supported version ranges on U(https://cwiki.apache.org/confluence/display/MAVENOLD/Dependency+Mediation+and+Conflict+Resolution)\nThe range type \"(,1.0],[1.2,)\" and \"(,1.1),(1.1,)\" is not supported.\nMutually exclusive with I(version).",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "lxml",
        "boto if using a S3 repository (s3://...)"
      ],
      "short_description": "Downloads an Artifact from a Maven Repository"
    },
    "examples": "\n- name: Download the latest version of the JUnit framework artifact from Maven Central\n  community.general.maven_artifact:\n    group_id: junit\n    artifact_id: junit\n    dest: /tmp/junit-latest.jar\n\n- name: Download JUnit 4.11 from Maven Central\n  community.general.maven_artifact:\n    group_id: junit\n    artifact_id: junit\n    version: 4.11\n    dest: /tmp/junit-4.11.jar\n\n- name: Download an artifact from a private repository requiring authentication\n  community.general.maven_artifact:\n    group_id: com.company\n    artifact_id: library-name\n    repository_url: 'https://repo.company.com/maven'\n    username: user\n    password: pass\n    dest: /tmp/library-name-latest.jar\n\n- name: Download an artifact from a private repository requiring certificate authentication\n  community.general.maven_artifact:\n    group_id: com.company\n    artifact_id: library-name\n    repository_url: 'https://repo.company.com/maven'\n    client_cert: /path/to/cert.pem\n    client_key: /path/to/key.pem\n    dest: /tmp/library-name-latest.jar\n\n- name: Download a WAR File to the Tomcat webapps directory to be deployed\n  community.general.maven_artifact:\n    group_id: com.company\n    artifact_id: web-app\n    extension: war\n    repository_url: 'https://repo.company.com/maven'\n    dest: /var/lib/tomcat7/webapps/web-app.war\n\n- name: Keep a downloaded artifact's name, i.e. retain the version\n  community.general.maven_artifact:\n    version: latest\n    artifact_id: spring-core\n    group_id: org.springframework\n    dest: /tmp/\n    keep_name: yes\n\n- name: Download the latest version of the JUnit framework artifact from Maven local\n  community.general.maven_artifact:\n    group_id: junit\n    artifact_id: junit\n    dest: /tmp/junit-latest.jar\n    repository_url: \"file://{{ lookup('env','HOME') }}/.m2/repository\"\n\n- name: Download the latest version between 3.8 and 4.0 (exclusive) of the JUnit framework artifact from Maven Central\n  community.general.maven_artifact:\n    group_id: junit\n    artifact_id: junit\n    version_by_spec: \"[3.8,4.0)\"\n    dest: /tmp/\n"
  },
  "community.general.memset_dns_reload": {
    "doc": {
      "description": "Request a reload of Memset's DNS infrastructure, and optionally poll until it finishes.",
      "has_action": false,
      "notes": "DNS reload requests are a best-effort service provided by Memset; these generally happen every 15 minutes by default, however you can request an immediate reload if later tasks rely on the records being created. An API key generated via the Memset customer control panel is required with the following minimum scope - I(dns.reload). If you wish to poll the job status to wait until the reload has completed, then I(job.status) is also required.",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "The API key obtained from the Memset control panel.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll": {
          "aliases": [],
          "description": "Boolean value, if set will poll the reload job's status and return when the job has completed (unless the 30 second timeout is reached first). If the timeout is reached then the task will not be marked as failed, but stderr will indicate that the polling failed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Request reload of Memset's DNS infrastructure,"
    },
    "examples": "\n- name: Submit DNS reload and poll\n  community.general.memset_dns_reload:\n    api_key: 5eb86c9196ab03919abcf03857163741\n    poll: True\n  delegate_to: localhost\n"
  },
  "community.general.memset_memstore_info": {
    "doc": {
      "description": "Retrieve Memstore product usage information.\nThis module was called C(memset_memstore_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "An API key generated via the Memset customer control panel is needed with the following minimum scope - I(memstore.usage).",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "The API key obtained from the Memset control panel.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Memstore product name (i.e. C(mstestyaa1)).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Retrieve Memstore product usage information."
    },
    "examples": "\n- name: Get usage for mstestyaa1\n  community.general.memset_memstore_info:\n    name: mstestyaa1\n    api_key: 5eb86c9896ab03919abcf03857163741\n  delegate_to: localhost\n"
  },
  "community.general.memset_server_info": {
    "doc": {
      "description": "Retrieve server information.\nThis module was called C(memset_server_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "An API key generated via the Memset customer control panel is needed with the following minimum scope - I(server.info).",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "The API key obtained from the Memset control panel.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The server product name (i.e. C(testyaa1)).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Retrieve server information."
    },
    "examples": "\n- name: Get details for testyaa1\n  community.general.memset_server_info:\n    name: testyaa1\n    api_key: 5eb86c9896ab03919abcf03857163741\n  delegate_to: localhost\n"
  },
  "community.general.memset_zone": {
    "doc": {
      "description": "Manage DNS zones in a Memset account.",
      "has_action": false,
      "notes": "Zones can be thought of as a logical group of domains, all of which share the same DNS records (i.e. they point to the same IP). An API key generated via the Memset customer control panel is needed with the following minimum scope - I(dns.zone_create), I(dns.zone_delete), I(dns.zone_list).",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "The API key obtained from the Memset control panel.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Forces deletion of a zone and all zone domains/zone records it contains.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "nickname"
          ],
          "description": "The zone nickname; usually the same as the main domain. Ensure this value has at most 250 characters.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of resource.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "The default TTL for all records created in the zone. This must be a valid int from U(https://www.memset.com/apidocs/methods_dns.html#dns.zone_create).",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "300",
            "600",
            "900",
            "1800",
            "3600",
            "7200",
            "10800",
            "21600",
            "43200",
            "86400"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Creates and deletes Memset DNS zones."
    },
    "examples": "\n# Create the zone 'test'\n- name: Create zone\n  community.general.memset_zone:\n    name: test\n    state: present\n    api_key: 5eb86c9196ab03919abcf03857163741\n    ttl: 300\n  delegate_to: localhost\n\n# Force zone deletion\n- name: Force delete zone\n  community.general.memset_zone:\n    name: test\n    state: absent\n    api_key: 5eb86c9196ab03919abcf03857163741\n    force: true\n  delegate_to: localhost\n"
  },
  "community.general.memset_zone_domain": {
    "doc": {
      "description": "Manage DNS zone domains in a Memset account.",
      "has_action": false,
      "notes": "Zone domains can be thought of as a collection of domains, all of which share the same DNS records (i.e. they point to the same IP). An API key generated via the Memset customer control panel is needed with the following minimum scope - I(dns.zone_domain_create), I(dns.zone_domain_delete), I(dns.zone_domain_list).\nCurrently this module can only create one domain at a time. Multiple domains should be created using C(with_items).",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "The API key obtained from the Memset control panel.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [
            "name"
          ],
          "description": "The zone domain name. Ensure this value has at most 250 characters.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "The zone to add the domain to (this must already exist).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Create and delete domains in Memset DNS zones."
    },
    "examples": "\n# Create the zone domain 'test.com'\n- name: Create zone domain\n  community.general.memset_zone_domain:\n    domain: test.com\n    zone: testzone\n    state: present\n    api_key: 5eb86c9196ab03919abcf03857163741\n  delegate_to: localhost\n"
  },
  "community.general.memset_zone_record": {
    "doc": {
      "description": "Manage DNS records in a Memset account.",
      "has_action": false,
      "notes": "Zones can be thought of as a logical group of domains, all of which share the same DNS records (i.e. they point to the same IP). An API key generated via the Memset customer control panel is needed with the following minimum scope - I(dns.zone_create), I(dns.zone_delete), I(dns.zone_list).\nCurrently this module can only create one DNS record at a time. Multiple records should be created using C(with_items).",
      "options": {
        "address": {
          "aliases": [
            "ip",
            "data"
          ],
          "description": "The address for this record (can be IP or text string depending on record type).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "The API key obtained from the Memset control panel.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "C(SRV) and C(TXT) record priority, in the range 0 > 999 (inclusive).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "record": {
          "aliases": [],
          "description": "The subdomain to create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "relative": {
          "aliases": [],
          "description": "If set then the current domain is added onto the address field for C(CNAME), C(MX), C(NS) and C(SRV)record types.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "The record's TTL in seconds (will inherit zone's TTL if not explicitly set). This must be a valid int from U(https://www.memset.com/apidocs/methods_dns.html#dns.zone_record_create).",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "300",
            "600",
            "900",
            "1800",
            "3600",
            "7200",
            "10800",
            "21600",
            "43200",
            "86400"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of DNS record to create.",
          "type": "str",
          "required": true,
          "choices": [
            "A",
            "AAAA",
            "CNAME",
            "MX",
            "NS",
            "SRV",
            "TXT"
          ],
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "The name of the zone to which to add the record to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Create and delete records in Memset DNS zones."
    },
    "examples": "\n# Create DNS record for www.domain.com\n- name: Create DNS record\n  community.general.memset_zone_record:\n    api_key: dcf089a2896940da9ffefb307ef49ccd\n    state: present\n    zone: domain.com\n    type: A\n    record: www\n    address: 1.2.3.4\n    ttl: 300\n    relative: false\n  delegate_to: localhost\n\n# create an SPF record for domain.com\n- name: Create SPF record for domain.com\n  community.general.memset_zone_record:\n    api_key: dcf089a2896940da9ffefb307ef49ccd\n    state: present\n    zone: domain.com\n    type: TXT\n    address: \"v=spf1 +a +mx +ip4:a1.2.3.4 ?all\"\n  delegate_to: localhost\n\n# create multiple DNS records\n- name: Create multiple DNS records\n  community.general.memset_zone_record:\n    api_key: dcf089a2896940da9ffefb307ef49ccd\n    zone: \"{{ item.zone }}\"\n    type: \"{{ item.type }}\"\n    record: \"{{ item.record }}\"\n    address: \"{{ item.address }}\"\n  delegate_to: localhost\n  with_items:\n    - { 'zone': 'domain1.com', 'type': 'A', 'record': 'www', 'address': '1.2.3.4' }\n    - { 'zone': 'domain2.com', 'type': 'A', 'record': 'mail', 'address': '4.3.2.1' }\n"
  },
  "community.general.mksysb": {
    "doc": {
      "description": "This module manages a basic AIX mksysb (image) of rootvg.",
      "has_action": false,
      "options": {
        "backup_crypt_files": {
          "aliases": [],
          "description": "Backup encrypted files.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_dmapi_fs": {
          "aliases": [],
          "description": "Back up DMAPI filesystem files.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "create_map_files": {
          "aliases": [],
          "description": "Creates a new MAP files.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_files": {
          "aliases": [],
          "description": "Excludes files using C(/etc/rootvg.exclude).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_wpar_files": {
          "aliases": [],
          "description": "Excludes WPAR files.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extended_attrs": {
          "aliases": [],
          "description": "Backup extended attributes.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Backup name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_image_data": {
          "aliases": [],
          "description": "Creates a new file data.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "software_packing": {
          "aliases": [],
          "description": "Exclude files from packing option listed in C(/etc/exclude_packing.rootvg).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "storage_path": {
          "aliases": [],
          "description": "Storage path where the mksysb will stored.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "use_snapshot": {
          "aliases": [],
          "description": "Creates backup using snapshots.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Generates AIX mksysb rootvg backups."
    },
    "examples": "\n- name: Running a backup image mksysb\n  community.general.mksysb:\n    name: myserver\n    storage_path: /repository/images\n    exclude_files: yes\n    exclude_wpar_files: yes\n"
  },
  "community.general.modprobe": {
    "doc": {
      "description": "Load or unload kernel modules.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "Name of kernel module to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "Modules parameters.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the module should be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Load or unload kernel modules"
    },
    "examples": "\n- name: Add the 802.1q module\n  community.general.modprobe:\n    name: 8021q\n    state: present\n\n- name: Add the dummy module\n  community.general.modprobe:\n    name: dummy\n    state: present\n    params: 'numdummies=2'\n"
  },
  "community.general.monit": {
    "doc": {
      "description": "Manage the state of a program monitored via I(Monit).",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "The name of the I(monit) program/process to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of service.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "started",
            "stopped",
            "restarted",
            "monitored",
            "unmonitored",
            "reloaded"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If there are pending actions for the service monitored by monit, then Ansible will check for up to this many seconds to verify the requested action has been performed. Ansible will sleep for five seconds between each check.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage the state of a program monitored via Monit"
    },
    "examples": "\n- name: Manage the state of program httpd to be in started state\n  community.general.monit:\n    name: httpd\n    state: started\n"
  },
  "community.general.mqtt": {
    "doc": {
      "description": "Publish a message on an MQTT topic.",
      "has_action": false,
      "notes": "This module requires a connection to an MQTT broker such as Mosquitto U(http://mosquitto.org) and the I(Paho) C(mqtt) Python client (U(https://pypi.org/project/paho-mqtt/)).",
      "options": {
        "ca_cert": {
          "aliases": [
            "ca_certs"
          ],
          "description": "The path to the Certificate Authority certificate files that are to be treated as trusted by this client. If this is the only option given then the client will operate in a similar manner to a web browser. That is to say it will require the broker to have a certificate signed by the Certificate Authorities in ca_certs and will communicate using TLS v1, but will not attempt any form of authentication. This provides basic network encryption but may not be sufficient depending on how the broker is configured.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "certfile"
          ],
          "description": "The path pointing to the PEM encoded client certificate. If this is not None it will be used as client information for TLS based authentication. Support for this feature is broker dependent.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_id": {
          "aliases": [],
          "description": "MQTT client identifier\nIf not specified, a value C(hostname + pid) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "keyfile"
          ],
          "description": "The path pointing to the PEM encoded client private key. If this is not None it will be used as client information for TLS based authentication. Support for this feature is broker dependent.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for C(username) to authenticate against the broker.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "payload": {
          "aliases": [],
          "description": "Payload. The special string C(\"None\") may be used to send a NULL (i.e. empty) payload which is useful to simply notify with the I(topic) or to clear previously retained messages.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "MQTT broker port number",
          "default": "1883",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "qos": {
          "aliases": [],
          "description": "QoS (Quality of Service)",
          "default": "0",
          "type": "str",
          "required": false,
          "choices": [
            "0",
            "1",
            "2"
          ],
          "suboptions": {}
        },
        "retain": {
          "aliases": [],
          "description": "Setting this flag causes the broker to retain (i.e. keep) the message so that applications that subsequently subscribe to the topic can received the last retained message immediately.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "MQTT broker address/name",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tls_version": {
          "aliases": [],
          "description": "Specifies the version of the SSL/TLS protocol to be used.\nBy default (if the python version supports it) the highest TLS version is detected. If unavailable, TLS v1 is used.",
          "type": "str",
          "required": false,
          "choices": [
            "tlsv1.1",
            "tlsv1.2"
          ],
          "suboptions": {}
        },
        "topic": {
          "aliases": [],
          "description": "MQTT topic name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username to authenticate against the broker.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "mosquitto"
      ],
      "short_description": "Publish a message on an MQTT topic for the IoT"
    },
    "examples": "\n- name: Publish a message on an MQTT topic\n  community.general.mqtt:\n    topic: 'service/ansible/{{ ansible_hostname }}'\n    payload: 'Hello at {{ ansible_date_time.iso8601 }}'\n    qos: 0\n    retain: False\n    client_id: ans001\n  delegate_to: localhost\n"
  },
  "community.general.mssql_db": {
    "doc": {
      "description": "Add or remove MSSQL databases from a remote host.",
      "has_action": false,
      "notes": "Requires the pymssql Python package on the remote host. For Ubuntu, this is as easy as pip install pymssql (See M(ansible.builtin.pip).)",
      "options": {
        "autocommit": {
          "aliases": [],
          "description": "Automatically commit the change only if the import succeed. Sometimes it is necessary to use autocommit=true, since some content can't be changed within a transaction.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "Port of the MSSQL server. Requires login_host be defined as other than localhost if login_port is used",
          "default": "1433",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username used to authenticate with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "db"
          ],
          "description": "name of the database to add or remove",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The database state",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "import"
          ],
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL files (C(.sql)) files are supported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pymssql"
      ],
      "short_description": "Add or remove MSSQL databases from a remote host."
    },
    "examples": "\n- name: Create a new database with name 'jackdata'\n  community.general.mssql_db:\n    name: jackdata\n    state: present\n\n# Copy database dump file to remote host and restore it to database 'my_db'\n- name: Copy database dump file to remote host\n  ansible.builtin.copy:\n    src: dump.sql\n    dest: /tmp\n\n- name: Restore the dump file to database 'my_db'\n  community.general.mssql_db:\n    name: my_db\n    state: import\n    target: /tmp/dump.sql\n"
  },
  "community.general.mssql_script": {
    "doc": {
      "description": "Execute SQL scripts on a MSSQL database.",
      "has_action": false,
      "notes": "Requires the pymssql Python package on the remote host. For Ubuntu, this is as easy as C(pip install pymssql) (See M(ansible.builtin.pip).)",
      "options": {
        "login_host": {
          "aliases": [],
          "description": "Host running the database.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "Port of the MSSQL server. Requires I(login_host) be defined as well.",
          "default": "1433",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username used to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "db"
          ],
          "description": "Database to run script against.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output": {
          "aliases": [],
          "description": "With C(default) each row will be returned as a list of values. See C(query_results).\nOutput format C(dict) will return dictionary with the column names as keys. See C(query_results_dict).\nC(dict) requires named columns to be returned by each query otherwise an error is thrown.",
          "default": "default",
          "type": "str",
          "required": false,
          "choices": [
            "dict",
            "default"
          ],
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "Parameters passed to the script as SQL parameters. ('SELECT %(name)s\"' with C(example: '{\"name\": \"John Doe\"}).)'\n",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "script": {
          "aliases": [],
          "description": "The SQL script to be executed.\nScript can contain multiple SQL statements. Multiple Batches can be separated by C(GO) command.\nEach batch must return at least one result set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pymssql"
      ],
      "short_description": "Execute SQL scripts on a MSSQL database",
      "version_added": "4.0.0"
    },
    "examples": "\n- name: Check DB connection\n  community.general.mssql_script:\n    login_user: \"{{ mssql_login_user }}\"\n    login_password: \"{{ mssql_login_password }}\"\n    login_host: \"{{ mssql_host }}\"\n    login_port: \"{{ mssql_port }}\"\n    db: master\n    script: \"SELECT 1\"\n\n- name: Query with parameter\n  community.general.mssql_script:\n    login_user: \"{{ mssql_login_user }}\"\n    login_password: \"{{ mssql_login_password }}\"\n    login_host: \"{{ mssql_host }}\"\n    login_port: \"{{ mssql_port }}\"\n    script: |\n      SELECT name, state_desc FROM sys.databases WHERE name = %(dbname)s\n    params:\n      dbname: msdb\n  register: result_params\n- assert:\n    that:\n      - result_params.query_results[0][0][0][0] == 'msdb'\n      - result_params.query_results[0][0][0][1] == 'ONLINE'\n\n- name: two batches with default output\n  community.general.mssql_script:\n    login_user: \"{{ mssql_login_user }}\"\n    login_password: \"{{ mssql_login_password }}\"\n    login_host: \"{{ mssql_host }}\"\n    login_port: \"{{ mssql_port }}\"\n    script: |\n      SELECT 'Batch 0 - Select 0'\n      SELECT 'Batch 0 - Select 1'\n      GO\n      SELECT 'Batch 1 - Select 0'\n  register: result_batches\n- assert:\n    that:\n      - result_batches.query_results | length == 2  # two batch results\n      - result_batches.query_results[0] | length == 2  # two selects in first batch\n      - result_batches.query_results[0][0] | length == 1  # one row in first select\n      - result_batches.query_results[0][0][0] | length == 1  # one column in first row\n      - result_batches.query_results[0][0][0][0] == 'Batch 0 - Select 0'  # each row contains a list of values.\n\n- name: two batches with dict output\n  community.general.mssql_script:\n    login_user: \"{{ mssql_login_user }}\"\n    login_password: \"{{ mssql_login_password }}\"\n    login_host: \"{{ mssql_host }}\"\n    login_port: \"{{ mssql_port }}\"\n    output: dict\n    script: |\n      SELECT 'Batch 0 - Select 0' as b0s0\n      SELECT 'Batch 0 - Select 1' as b0s1\n      GO\n      SELECT 'Batch 1 - Select 0' as b1s0\n  register: result_batches_dict\n- assert:\n    that:\n      - result_batches_dict.query_results_dict | length == 2  # two batch results\n      - result_batches_dict.query_results_dict[0] | length == 2  # two selects in first batch\n      - result_batches_dict.query_results_dict[0][0] | length == 1  # one row in first select\n      - result_batches_dict.query_results_dict[0][0][0]['b0s0'] == 'Batch 0 - Select 0'  # column 'b0s0' of first row\n"
  },
  "community.general.nagios": {
    "doc": {
      "description": "The C(nagios) module has two basic functions: scheduling downtime and toggling alerts for services or hosts.\nThe C(nagios) module is not idempotent.\nAll actions require the I(host) parameter to be given explicitly. In playbooks you can use the C({{inventory_hostname}}) variable to refer to the host the playbook is currently running on.\nYou can specify multiple services at once by separating them with commas, .e.g., C(services=httpd,nfs,puppet).\nWhen specifying what service to handle there is a special service value, I(host), which will handle alerts/downtime/acknowledge for the I(host itself), e.g., C(service=host). This keyword may not be given with other services at the same time. I(Setting alerts/downtime/acknowledge for a host does not affect alerts/downtime/acknowledge for any of the services running on it.) To schedule downtime for all services on particular host use keyword \"all\", e.g., C(service=all).",
      "has_action": false,
      "options": {
        "action": {
          "aliases": [],
          "description": "Action to take.\nservicegroup options were added in 2.0.\ndelete_downtime options were added in 2.2.\nThe C(acknowledge) and C(forced_check) actions were added in community.general 1.2.0.",
          "type": "str",
          "required": true,
          "choices": [
            "downtime",
            "delete_downtime",
            "enable_alerts",
            "disable_alerts",
            "silence",
            "unsilence",
            "silence_nagios",
            "unsilence_nagios",
            "command",
            "servicegroup_service_downtime",
            "servicegroup_host_downtime",
            "acknowledge",
            "forced_check"
          ],
          "suboptions": {}
        },
        "author": {
          "aliases": [],
          "description": "Author to leave downtime comments as. Only usable with the C(downtime) and C(acknowledge) action.",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cmdfile": {
          "aliases": [],
          "description": "Path to the nagios I(command file) (FIFO pipe). Only required if auto-detection fails.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "The raw command to send to nagios, which should not include the submitted time header or the line-feed B(Required) option when using the C(command) action.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Comment for C(downtime) and C(acknowledge)action.",
          "default": "Scheduling downtime",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Host to operate on in Nagios.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "minutes": {
          "aliases": [],
          "description": "Minutes to schedule downtime for.\nOnly usable with the C(downtime) action.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "servicegroup": {
          "aliases": [],
          "description": "The Servicegroup we want to set downtimes/alerts for. B(Required) option when using the C(servicegroup_service_downtime) amd C(servicegroup_host_downtime).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "services": {
          "aliases": [
            "service"
          ],
          "description": "What to manage downtime/alerts for. Separate multiple services with commas. C(service) is an alias for C(services). B(Required) option when using the C(downtime), C(acknowledge), C(forced_check), C(enable_alerts), and C(disable_alerts) actions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start": {
          "aliases": [],
          "description": "When downtime should start, in time_t format (epoch seconds).",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "short_description": "Perform common tasks in Nagios related to downtime and notifications."
    },
    "examples": "\n- name: Set 30 minutes of apache downtime\n  community.general.nagios:\n    action: downtime\n    minutes: 30\n    service: httpd\n    host: '{{ inventory_hostname }}'\n\n- name: Schedule an hour of HOST downtime\n  community.general.nagios:\n    action: downtime\n    minutes: 60\n    service: host\n    host: '{{ inventory_hostname }}'\n\n- name: Schedule an hour of HOST downtime starting at 2019-04-23T02:00:00+00:00\n  community.general.nagios:\n    action: downtime\n    start: 1555984800\n    minutes: 60\n    service: host\n    host: '{{ inventory_hostname }}'\n\n- name: Schedule an hour of HOST downtime, with a comment describing the reason\n  community.general.nagios:\n    action: downtime\n    minutes: 60\n    service: host\n    host: '{{ inventory_hostname }}'\n    comment: Rebuilding machine\n\n- name: Schedule downtime for ALL services on HOST\n  community.general.nagios:\n    action: downtime\n    minutes: 45\n    service: all\n    host: '{{ inventory_hostname }}'\n\n- name: Schedule downtime for a few services\n  community.general.nagios:\n    action: downtime\n    services: frob,foobar,qeuz\n    host: '{{ inventory_hostname }}'\n\n- name: Set 30 minutes downtime for all services in servicegroup foo\n  community.general.nagios:\n    action: servicegroup_service_downtime\n    minutes: 30\n    servicegroup: foo\n    host: '{{ inventory_hostname }}'\n\n- name: Set 30 minutes downtime for all host in servicegroup foo\n  community.general.nagios:\n    action: servicegroup_host_downtime\n    minutes: 30\n    servicegroup: foo\n    host: '{{ inventory_hostname }}'\n\n- name: Delete all downtime for a given host\n  community.general.nagios:\n    action: delete_downtime\n    host: '{{ inventory_hostname }}'\n    service: all\n\n- name: Delete all downtime for HOST with a particular comment\n  community.general.nagios:\n    action: delete_downtime\n    host: '{{ inventory_hostname }}'\n    service: host\n    comment: Planned maintenance\n\n- name: Acknowledge an HOST with a particular comment\n  community.general.nagios:\n    action: acknowledge\n    service: host\n    host: '{{ inventory_hostname }}'\n    comment: 'power outage - see casenr 12345'\n\n- name: Acknowledge an active service problem for the httpd service with a particular comment\n  community.general.nagios:\n    action: acknowledge\n    service: httpd\n    host: '{{ inventory_hostname }}'\n    comment: 'service crashed - see casenr 12345'\n\n- name: Reset a passive service check for snmp trap\n  community.general.nagios:\n    action: forced_check\n    service: snmp\n    host: '{{ inventory_hostname }}'\n\n- name: Force an active service check for the httpd service\n  community.general.nagios:\n    action: forced_check\n    service: httpd\n    host: '{{ inventory_hostname }}'\n\n- name: Force an active service check for all services of a particular host\n  community.general.nagios:\n    action: forced_check\n    service: all\n    host: '{{ inventory_hostname }}'\n\n- name: Force an active service check for a particular host\n  community.general.nagios:\n    action: forced_check\n    service: host\n    host: '{{ inventory_hostname }}'\n\n- name: Enable SMART disk alerts\n  community.general.nagios:\n    action: enable_alerts\n    service: smart\n    host: '{{ inventory_hostname }}'\n\n- name: Disable httpd and nfs alerts\n  community.general.nagios:\n    action: disable_alerts\n    service: httpd,nfs\n    host: '{{ inventory_hostname }}'\n\n- name: Disable HOST alerts\n  community.general.nagios:\n    action: disable_alerts\n    service: host\n    host: '{{ inventory_hostname }}'\n\n- name: Silence ALL alerts\n  community.general.nagios:\n    action: silence\n    host: '{{ inventory_hostname }}'\n\n- name: Unsilence all alerts\n  community.general.nagios:\n    action: unsilence\n    host: '{{ inventory_hostname }}'\n\n- name: Shut up nagios\n  community.general.nagios:\n    action: silence_nagios\n\n- name: Annoy me negios\n  community.general.nagios:\n    action: unsilence_nagios\n\n- name: Command something\n  community.general.nagios:\n    action: command\n    command: DISABLE_FAILURE_PREDICTION\n"
  },
  "community.general.netcup_dns": {
    "doc": {
      "description": "Manages DNS records via the Netcup API, see the docs U(https://ccp.netcup.net/run/webservice/servers/endpoint.php)",
      "has_action": false,
      "notes": "",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "API key for authentication, must be obtained via the netcup CCP (U(https://ccp.netcup.net))",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "API password for authentication, must be obtained via the netcup CCP (https://ccp.netcup.net)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "customer_id": {
          "aliases": [],
          "description": "Netcup customer id",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domainname the records should be added / removed",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Record priority. Required for C(type=MX)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "record": {
          "aliases": [
            "name"
          ],
          "description": "Record to add or delete, supports wildcard (*). Default is C(@) (e.g. the zone name)",
          "default": "@",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "solo": {
          "aliases": [],
          "description": "Whether the record should be the only one for that record type and record name. Only use with C(state=present)\nThis will delete all other records with the same record name and type.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the record should exist or not",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Record type",
          "type": "str",
          "required": true,
          "choices": [
            "A",
            "AAAA",
            "MX",
            "CNAME",
            "CAA",
            "SRV",
            "TXT",
            "TLSA",
            "NS",
            "DS"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Record value",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "nc-dnsapi >= 0.1.3"
      ],
      "short_description": "manage Netcup DNS records"
    },
    "examples": "\n- name: Create a record of type A\n  community.general.netcup_dns:\n    api_key: \"...\"\n    api_password: \"...\"\n    customer_id: \"...\"\n    domain: \"example.com\"\n    name: \"mail\"\n    type: \"A\"\n    value: \"127.0.0.1\"\n\n- name: Delete that record\n  community.general.netcup_dns:\n    api_key: \"...\"\n    api_password: \"...\"\n    customer_id: \"...\"\n    domain: \"example.com\"\n    name: \"mail\"\n    type: \"A\"\n    value: \"127.0.0.1\"\n    state: absent\n\n- name: Create a wildcard record\n  community.general.netcup_dns:\n    api_key: \"...\"\n    api_password: \"...\"\n    customer_id: \"...\"\n    domain: \"example.com\"\n    name: \"*\"\n    type: \"A\"\n    value: \"127.0.1.1\"\n\n- name: Set the MX record for example.com\n  community.general.netcup_dns:\n    api_key: \"...\"\n    api_password: \"...\"\n    customer_id: \"...\"\n    domain: \"example.com\"\n    type: \"MX\"\n    value: \"mail.example.com\"\n\n- name: Set a record and ensure that this is the only one\n  community.general.netcup_dns:\n    api_key: \"...\"\n    api_password: \"...\"\n    customer_id: \"...\"\n    name: \"demo\"\n    domain: \"example.com\"\n    type: \"AAAA\"\n    value: \"::1\"\n    solo: true\n"
  },
  "community.general.newrelic_deployment": {
    "doc": {
      "description": "Notify newrelic about app deployments (see https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/deployment-notifications#api)",
      "has_action": false,
      "options": {
        "app_name": {
          "aliases": [],
          "description": "(one of app_name or application_id are required) The value of app_name in the newrelic.yml file used by the application",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "application_id": {
          "aliases": [],
          "description": "(one of app_name or application_id are required) The application id, found in the URL when viewing the application in RPM",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "appname": {
          "aliases": [],
          "description": "Name of the application",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "changelog": {
          "aliases": [],
          "description": "A list of changes for this deployment",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Text annotation for the deployment - notes for you",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "environment": {
          "aliases": [],
          "description": "The environment for this deployment",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "revision": {
          "aliases": [],
          "description": "A revision number (e.g., git commit SHA)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "API token, to place in the x-api-key header.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The name of the user/process that triggered this deployment",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [],
      "short_description": "Notify newrelic about app deployments"
    },
    "examples": "\n- name:  Notify newrelic about an app deployment\n  community.general.newrelic_deployment:\n    token: AAAAAA\n    app_name: myapp\n    user: ansible deployment\n    revision: '1.0'\n"
  },
  "community.general.nexmo": {
    "doc": {
      "description": "Send a SMS message via nexmo",
      "has_action": false,
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Nexmo API Key",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Nexmo API Secret",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Phone number(s) to send SMS message to",
          "type": "list",
          "required": true,
          "elements": "int",
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "Message to text to send. Messages longer than 160 characters will be split into multiple messages",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Nexmo Number to send from",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send a SMS via nexmo"
    },
    "examples": "\n- name: Send notification message via Nexmo\n  community.general.nexmo:\n    api_key: 640c8a53\n    api_secret: 0ce239a6\n    src: 12345678901\n    dest:\n      - 10987654321\n      - 16789012345\n    msg: '{{ inventory_hostname }} completed'\n  delegate_to: localhost\n"
  },
  "community.general.nginx_status_info": {
    "doc": {
      "description": "Gathers information from nginx from an URL having C(stub_status) enabled.",
      "has_action": false,
      "notes": "See U(http://nginx.org/en/docs/http/ngx_http_stub_status_module.html) for more information.",
      "options": {
        "timeout": {
          "aliases": [],
          "description": "HTTP connection timeout in seconds.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL of the nginx status.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Retrieve information on nginx status."
    },
    "examples": "\n# Gather status info from nginx on localhost\n- name: Get current http stats\n  community.general.nginx_status_info:\n    url: http://localhost/nginx_status\n  register: result\n\n# Gather status info from nginx on localhost with a custom timeout of 20 seconds\n- name: Get current http stats\n  community.general.nginx_status_info:\n    url: http://localhost/nginx_status\n    timeout: 20\n  register: result\n"
  },
  "community.general.nictagadm": {
    "doc": {
      "description": "Create or delete nic tags on SmartOS systems.",
      "has_action": false,
      "options": {
        "etherstub": {
          "aliases": [],
          "description": "Specifies that the nic tag will be attached to a created I(etherstub).\nParameter I(etherstub) is mutually exclusive with both I(mtu), and I(mac).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "When I(state) is absent set this switch will use the C(-f) parameter and delete the nic tag regardless of existing VMs.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "Specifies the I(mac) address to attach the nic tag to when not creating an I(etherstub).\nParameters I(mac) and I(etherstub) are mutually exclusive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "Specifies the size of the I(mtu) of the desired nic tag.\nParameters I(mtu) and I(etherstub) are mutually exclusive.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the nic tag.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete a SmartOS nic tag.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage nic tags on SmartOS systems"
    },
    "examples": "\n- name: Create 'storage0' on '00:1b:21:a3:f5:4d'\n  community.general.nictagadm:\n    name: storage0\n    mac: 00:1b:21:a3:f5:4d\n    mtu: 9000\n    state: present\n\n- name: Remove 'storage0' nic tag\n  community.general.nictagadm:\n    name: storage0\n    state: absent\n"
  },
  "community.general.nmcli": {
    "doc": {
      "description": "Manage the network devices. Create, modify and manage various connection and device type e.g., ethernet, teams, bonds, vlans etc.\nOn CentOS 8 and Fedora >=29 like systems, the requirements can be met by installing the following packages: NetworkManager.\nOn CentOS 7 and Fedora <=28 like systems, the requirements can be met by installing the following packages: NetworkManager-tui.\nOn Ubuntu and Debian like systems, the requirements can be met by installing the following packages: network-manager\nOn openSUSE, the requirements can be met by installing the following packages: NetworkManager.",
      "has_action": false,
      "options": {
        "addr_gen_mode6": {
          "aliases": [],
          "description": "Configure method for creating the address for use with IPv6 Stateless Address Autoconfiguration.",
          "type": "str",
          "required": false,
          "choices": [
            "eui64",
            "stable-privacy"
          ],
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "ageingtime": {
          "aliases": [],
          "description": "This is only used with bridge - [ageing-time <0-1000000>] the Ethernet MAC address aging time, in seconds.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "arp_interval": {
          "aliases": [],
          "description": "This is only used with bond - ARP interval.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "arp_ip_target": {
          "aliases": [],
          "description": "This is only used with bond - ARP IP target.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "autoconnect": {
          "aliases": [],
          "description": "Whether the connection should start on boot.\nWhether the connection profile can be automatically activated",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "conn_name": {
          "aliases": [],
          "description": "The name used to call the connection. Pattern is <type>[-<ifname>][-<num>].",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dhcp_client_id": {
          "aliases": [],
          "description": "DHCP Client Identifier sent to the DHCP server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns4": {
          "aliases": [],
          "description": "A list of up to 3 dns servers.\nIPv4 format e.g. to add two IPv4 DNS server addresses, use C(192.0.2.53 198.51.100.53).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns4_ignore_auto": {
          "aliases": [],
          "description": "Ignore automatically configured IPv4 name servers.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "dns4_search": {
          "aliases": [],
          "description": "A list of DNS search domains.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns6": {
          "aliases": [],
          "description": "A list of up to 3 dns servers.\nIPv6 format e.g. to add two IPv6 DNS server addresses, use C(2001:4860:4860::8888 2001:4860:4860::8844).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns6_ignore_auto": {
          "aliases": [],
          "description": "Ignore automatically configured IPv6 name servers.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "dns6_search": {
          "aliases": [],
          "description": "A list of DNS search domains.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "downdelay": {
          "aliases": [],
          "description": "This is only used with bond - downdelay.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "egress": {
          "aliases": [],
          "description": "This is only used with VLAN - VLAN egress priority mapping.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flags": {
          "aliases": [],
          "description": "This is only used with VLAN - flags.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "forwarddelay": {
          "aliases": [],
          "description": "This is only used with bridge - [forward-delay <2-30>] STP forwarding delay, in seconds.",
          "default": "15",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "gsm": {
          "aliases": [],
          "description": "The configuration of the GSM connection.\nNote the list of suboption attributes may vary depending on which version of NetworkManager/nmcli is installed on the host.\nAn up-to-date list of supported attributes can be found here: U(https://networkmanager.dev/docs/api/latest/settings-gsm.html).\nFor instance to use apn, pin, username and password: C({apn: provider.apn, pin: 1234, username: apn.username, password: apn.password}).",
          "type": "dict",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {
            "apn": {
              "aliases": [],
              "description": "The GPRS Access Point Name specifying the APN used when establishing a data session with the GSM-based network.\nThe APN often determines how the user will be billed for their network usage and whether the user has access to the Internet or just a provider-specific walled-garden, so it is important to use the correct APN for the user's mobile broadband plan.\nThe APN may only be composed of the characters a-z, 0-9, ., and - per GSM 03.60 Section 14.9.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "auto-config": {
              "aliases": [],
              "description": "When C(true), the settings such as I(gsm.apn), I(gsm.username), or I(gsm.password) will default to values that match the network the modem will register to in the Mobile Broadband Provider database.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "device-id": {
              "aliases": [],
              "description": "The device unique identifier (as given by the C(WWAN) management service) which this connection applies to.\nIf given, the connection will only apply to the specified device.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "home-only": {
              "aliases": [],
              "description": "When C(true), only connections to the home network will be allowed.\nConnections to roaming networks will not be made.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mtu": {
              "aliases": [],
              "description": "If non-zero, only transmit packets of the specified size or smaller, breaking larger packets up into multiple Ethernet frames.",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "network-id": {
              "aliases": [],
              "description": "The Network ID (GSM LAI format, ie MCC-MNC) to force specific network registration.\nIf the Network ID is specified, NetworkManager will attempt to force the device to register only on the specified network.\nThis can be used to ensure that the device does not roam when direct roaming control of the device is not otherwise possible.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "number": {
              "aliases": [],
              "description": "Legacy setting that used to help establishing PPP data sessions for GSM-based modems.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password used to authenticate with the network, if required.\nMany providers do not require a password, or accept any password.\nBut if a password is required, it is specified here.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password-flags": {
              "aliases": [],
              "description": "NMSettingSecretFlags indicating how to handle the I(password) property.\nFollowing choices are allowed: C(0) B(NONE): The system is responsible for providing and storing this secret (default), C(1) B(AGENT_OWNED): A user secret agent is responsible for providing and storing this secret; when it is required agents will be asked to retrieve it C(2) B(NOT_SAVED): This secret should not be saved, but should be requested from the user each time it is needed C(4) B(NOT_REQUIRED): In situations where it cannot be automatically determined that the secret is required (some VPNs and PPP providers do not require all secrets) this flag indicates that the specific secret is not required.",
              "default": "0",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "4"
              ],
              "suboptions": {}
            },
            "pin": {
              "aliases": [],
              "description": "If the SIM is locked with a PIN it must be unlocked before any other operations are requested.\nSpecify the PIN here to allow operation of the device.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "pin-flags": {
              "aliases": [],
              "description": "NMSettingSecretFlags indicating how to handle the I(gsm.pin) property.\nSee I(gsm.password-flags) for NMSettingSecretFlags choices.",
              "default": "0",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "4"
              ],
              "suboptions": {}
            },
            "sim-id": {
              "aliases": [],
              "description": "The SIM card unique identifier (as given by the C(WWAN) management service) which this connection applies to.\nIf given, the connection will apply to any device also allowed by I(gsm.device-id) which contains a SIM card matching the given identifier.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "sim-operator-id": {
              "aliases": [],
              "description": "A MCC/MNC string like C(310260) or C(21601I) identifying the specific mobile network operator which this connection applies to.\nIf given, the connection will apply to any device also allowed by I(gsm.device-id) and I(gsm.sim-id) which contains a SIM card provisioned by the given operator.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username used to authenticate with the network, if required.\nMany providers do not require a username, or accept any username.\nBut if a username is required, it is specified here.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "gw4": {
          "aliases": [],
          "description": "The IPv4 gateway for this interface.\nUse the format C(192.0.2.1).\nThis parameter is mutually_exclusive with never_default4 parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gw4_ignore_auto": {
          "aliases": [],
          "description": "Ignore automatically configured IPv4 routes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "gw6": {
          "aliases": [],
          "description": "The IPv6 gateway for this interface.\nUse the format C(2001:db8::1).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gw6_ignore_auto": {
          "aliases": [],
          "description": "Ignore automatically configured IPv6 routes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "hairpin": {
          "aliases": [],
          "description": "This is only used with 'bridge-slave' - 'hairpin mode' for the slave, which allows frames to be sent back out through the slave the frame was received on.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hellotime": {
          "aliases": [],
          "description": "This is only used with bridge - [hello-time <1-10>] STP hello time, in seconds.",
          "default": "2",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ifname": {
          "aliases": [],
          "description": "The interface to bind the connection to.\nThe connection will only be applicable to this interface name.\nA special value of C('*') can be used for interface-independent connections.\nThe ifname argument is mandatory for all connection types except bond, team, bridge and vlan.\nThis parameter defaults to C(conn_name) when left unset.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ignore_unsupported_suboptions": {
          "aliases": [],
          "description": "Ignore suboptions which are invalid or unsupported by the version of NetworkManager/nmcli installed on the host.\nOnly I(wifi) and I(wifi_sec) options are currently affected.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.6.0",
          "suboptions": {}
        },
        "ingress": {
          "aliases": [],
          "description": "This is only used with VLAN - VLAN ingress priority mapping.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip4": {
          "aliases": [],
          "description": "List of IPv4 addresses to this interface.\nUse the format C(192.0.2.24/24) or C(192.0.2.24).\nIf defined and I(method4) is not specified, automatically set C(ipv4.method) to C(manual).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ip6": {
          "aliases": [],
          "description": "List of IPv6 addresses to this interface.\nUse the format C(abbe::cafe/128) or C(abbe::cafe).\nIf defined and I(method6) is not specified, automatically set C(ipv6.method) to C(manual).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ip_privacy6": {
          "aliases": [],
          "description": "If enabled, it makes the kernel generate a temporary IPv6 address in addition to the public one.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "prefer-public-addr",
            "prefer-temp-addr",
            "unknown"
          ],
          "version_added": "4.2.0",
          "suboptions": {}
        },
        "ip_tunnel_dev": {
          "aliases": [],
          "description": "This is used with GRE/IPIP/SIT - parent device this GRE/IPIP/SIT tunnel, can use ifname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_tunnel_input_key": {
          "aliases": [],
          "description": "The key used for tunnel input packets.\nOnly used when I(type=gre).",
          "type": "str",
          "required": false,
          "version_added": "3.6.0",
          "suboptions": {}
        },
        "ip_tunnel_local": {
          "aliases": [],
          "description": "This is used with GRE/IPIP/SIT - GRE/IPIP/SIT local IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_tunnel_output_key": {
          "aliases": [],
          "description": "The key used for tunnel output packets.\nOnly used when I(type=gre).",
          "type": "str",
          "required": false,
          "version_added": "3.6.0",
          "suboptions": {}
        },
        "ip_tunnel_remote": {
          "aliases": [],
          "description": "This is used with GRE/IPIP/SIT - GRE/IPIP/SIT destination IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "MAC address of the connection.\nNote this requires a recent kernel feature, originally introduced in 3.15 upstream kernel.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "master": {
          "aliases": [],
          "description": "Master <master (ifname, or connection UUID or conn_name) of bridge, team, bond master connection profile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maxage": {
          "aliases": [],
          "description": "This is only used with bridge - [max-age <6-42>] STP maximum message age, in seconds.",
          "default": "20",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "may_fail4": {
          "aliases": [],
          "description": "If you need I(ip4) configured before C(network-online.target) is reached, set this option to C(false).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "method4": {
          "aliases": [],
          "description": "Configuration method to be used for IPv4.\nIf I(ip4) is set, C(ipv4.method) is automatically set to C(manual) and this parameter is not needed.",
          "type": "str",
          "required": false,
          "choices": [
            "auto",
            "link-local",
            "manual",
            "shared",
            "disabled"
          ],
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "method6": {
          "aliases": [],
          "description": "Configuration method to be used for IPv6\nIf I(ip6) is set, C(ipv6.method) is automatically set to C(manual) and this parameter is not needed.\nC(disabled) was added in community.general 3.3.0.",
          "type": "str",
          "required": false,
          "choices": [
            "ignore",
            "auto",
            "dhcp",
            "link-local",
            "manual",
            "shared",
            "disabled"
          ],
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "miimon": {
          "aliases": [],
          "description": "This is only used with bond - miimon.\nThis parameter defaults to C(100) when unset.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "This is the type of device or network connection that you wish to create for a bond or bridge.",
          "default": "balance-rr",
          "type": "str",
          "required": false,
          "choices": [
            "802.3ad",
            "active-backup",
            "balance-alb",
            "balance-rr",
            "balance-tlb",
            "balance-xor",
            "broadcast"
          ],
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "The connection MTU, e.g. 9000. This can't be applied when creating the interface and is done once the interface has been created.\nCan be used when modifying Team, VLAN, Ethernet (Future plans to implement wifi, gsm, pppoe, infiniband)\nThis parameter defaults to C(1500) when unset.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "never_default4": {
          "aliases": [],
          "description": "Set as default route.\nThis parameter is mutually_exclusive with gw4 parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "path_cost": {
          "aliases": [],
          "description": "This is only used with 'bridge-slave' - [<1-65535>] - STP port cost for destinations via this slave.",
          "default": "100",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "primary": {
          "aliases": [],
          "description": "This is only used with bond and is the primary interface name (for \"active-backup\" mode), this is the usually the 'ifname'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "This is only used with 'bridge' - sets STP priority.",
          "default": "128",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "route_metric4": {
          "aliases": [],
          "description": "Set metric level of ipv4 routes configured on interface.",
          "type": "int",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "route_metric6": {
          "aliases": [],
          "description": "Set metric level of IPv6 routes configured on interface.",
          "type": "int",
          "required": false,
          "version_added": "4.4.0",
          "suboptions": {}
        },
        "routes4": {
          "aliases": [],
          "description": "The list of ipv4 routes.\nUse the format '192.0.3.0/24 192.0.2.1'",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "routes6": {
          "aliases": [],
          "description": "The list of IPv6 routes.\nUse the format C(fd12:3456:789a:1::/64 2001:dead:beef::1).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "4.4.0",
          "suboptions": {}
        },
        "routing_rules4": {
          "aliases": [],
          "description": "Is the same as in an C(ip route add) command, except always requires specifying a priority.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "runner": {
          "aliases": [],
          "description": "This is the type of device or network connection that you wish to create for a team.",
          "default": "roundrobin",
          "type": "str",
          "required": false,
          "choices": [
            "broadcast",
            "roundrobin",
            "activebackup",
            "loadbalance",
            "lacp"
          ],
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "runner_hwaddr_policy": {
          "aliases": [],
          "description": "This defines the policy of how hardware addresses of team device and port devices should be set during the team lifetime.",
          "type": "str",
          "required": false,
          "choices": [
            "same_all",
            "by_active",
            "only_active"
          ],
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "slavepriority": {
          "aliases": [],
          "description": "This is only used with 'bridge-slave' - [<0-63>] - STP priority of this slave.",
          "default": "32",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssid": {
          "aliases": [],
          "description": "Name of the Wireless router or the access point.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the device should exist or not, taking action if the state is different from what is stated.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "stp": {
          "aliases": [],
          "description": "This is only used with bridge and controls whether Spanning Tree Protocol (STP) is enabled for this bridge.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "This is the type of device or network connection that you wish to create or modify.\nType C(dummy) is added in community.general 3.5.0.\nType C(generic) is added in Ansible 2.5.\nType C(infiniband) is added in community.general 2.0.0.\nType C(gsm) is added in community.general 3.7.0.\nType C(wireguard) is added in community.general 4.3.0",
          "type": "str",
          "required": false,
          "choices": [
            "bond",
            "bond-slave",
            "bridge",
            "bridge-slave",
            "dummy",
            "ethernet",
            "generic",
            "gre",
            "infiniband",
            "ipip",
            "sit",
            "team",
            "team-slave",
            "vlan",
            "vxlan",
            "wifi",
            "gsm",
            "wireguard"
          ],
          "suboptions": {}
        },
        "updelay": {
          "aliases": [],
          "description": "This is only used with bond - updelay.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vlandev": {
          "aliases": [],
          "description": "This is only used with VLAN - parent device this VLAN is on, can use ifname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vlanid": {
          "aliases": [],
          "description": "This is only used with VLAN - VLAN ID in range <0-4095>.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vxlan_id": {
          "aliases": [],
          "description": "This is only used with VXLAN - VXLAN ID.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vxlan_local": {
          "aliases": [],
          "description": "This is only used with VXLAN - VXLAN local IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vxlan_remote": {
          "aliases": [],
          "description": "This is only used with VXLAN - VXLAN destination IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wifi": {
          "aliases": [],
          "description": "The configuration of the WiFi connection.\nNote the list of suboption attributes may vary depending on which version of NetworkManager/nmcli is installed on the host.\nAn up-to-date list of supported attributes can be found here: U(https://networkmanager.dev/docs/api/latest/settings-802-11-wireless.html).\nFor instance to create a hidden AP mode WiFi connection: C({hidden: true, mode: ap}).",
          "type": "dict",
          "required": false,
          "version_added": "3.5.0",
          "suboptions": {
            "ap-isolation": {
              "aliases": [],
              "description": "Configures AP isolation, which prevents communication between wireless devices connected to this AP.\nThis property can be set to a value different from C(-1) only when the interface is configured in AP mode.\nIf set to C(1), devices are not able to communicate with each other. This increases security because it protects devices against attacks from other clients in the network. At the same time, it prevents devices to access resources on the same wireless networks as file shares, printers, etc.\nIf set to C(0), devices can talk to each other.\nWhen set to C(-1), the global default is used; in case the global default is unspecified it is assumed to be C(0).",
              "default": "-1",
              "type": "int",
              "required": false,
              "choices": [
                "-1",
                "0",
                "1"
              ],
              "suboptions": {}
            },
            "assigned-mac-address": {
              "aliases": [],
              "description": "The new field for the cloned MAC address.\nIt can be either a hardware address in ASCII representation, or one of the special values C(preserve), C(permanent), C(random) or C(stable).\nThis field replaces the deprecated I(cloned-mac-address) on D-Bus, which can only contain explicit hardware addresses.\nNote that this property only exists in D-Bus API. libnm and nmcli continue to call this property I(cloned-mac-address).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "band": {
              "aliases": [],
              "description": "802.11 frequency band of the network.\nOne of C(a) for 5GHz 802.11a or C(bg) for 2.4GHz 802.11.\nThis will lock associations to the Wi-Fi network to the specific band, so for example, if C(a) is specified, the device will not associate with the same network in the 2.4GHz band even if the network's settings are compatible.\nThis setting depends on specific driver capability and may not work with all drivers.",
              "type": "str",
              "required": false,
              "choices": [
                "a",
                "bg"
              ],
              "suboptions": {}
            },
            "bssid": {
              "aliases": [],
              "description": "If specified, directs the device to only associate with the given access point.\nThis capability is highly driver dependent and not supported by all devices.\nNote this property does not control the BSSID used when creating an Ad-Hoc network and is unlikely to in the future.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "channel": {
              "aliases": [],
              "description": "Wireless channel to use for the Wi-Fi connection.\nThe device will only join (or create for Ad-Hoc networks) a Wi-Fi network on the specified channel.\nBecause channel numbers overlap between bands, this property also requires the I(band) property to be set.",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "cloned-mac-address": {
              "aliases": [],
              "description": "This D-Bus field is deprecated in favor of I(assigned-mac-address) which is more flexible and allows specifying special variants like C(random).\nFor libnm and nmcli, this field is called I(cloned-mac-address).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "generate-mac-address-mask": {
              "aliases": [],
              "description": "With I(cloned-mac-address) setting C(random) or C(stable), by default all bits of the MAC address are scrambled and a locally-administered, unicast MAC address is created. This property allows to specify that certain bits are fixed.\nNote that the least significant bit of the first MAC address will always be unset to create a unicast MAC address.\nIf the property is C(null), it is eligible to be overwritten by a default connection setting.\nIf the value is still c(null) or an empty string, the default is to create a locally-administered, unicast MAC address.\nIf the value contains one MAC address, this address is used as mask. The set bits of the mask are to be filled with the current MAC address of the device, while the unset bits are subject to randomization.\nSetting C(FE:FF:FF:00:00:00) means to preserve the OUI of the current MAC address and only randomize the lower 3 bytes using the C(random) or C(stable) algorithm.\nIf the value contains one additional MAC address after the mask, this address is used instead of the current MAC address to fill the bits that shall not be randomized.\nFor example, a value of C(FE:FF:FF:00:00:00 68:F7:28:00:00:00) will set the OUI of the MAC address to 68:F7:28, while the lower bits are randomized.\nA value of C(02:00:00:00:00:00 00:00:00:00:00:00) will create a fully scrambled globally-administered, burned-in MAC address.\nIf the value contains more than one additional MAC addresses, one of them is chosen randomly. For example, C(02:00:00:00:00:00 00:00:00:00:00:00 02:00:00:00:00:00) will create a fully scrambled MAC address, randomly locally or globally administered.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hidden": {
              "aliases": [],
              "description": "If C(true), indicates that the network is a non-broadcasting network that hides its SSID. This works both in infrastructure and AP mode.\nIn infrastructure mode, various workarounds are used for a more reliable discovery of hidden networks, such as probe-scanning the SSID. However, these workarounds expose inherent insecurities with hidden SSID networks, and thus hidden SSID networks should be used with caution.\nIn AP mode, the created network does not broadcast its SSID.\nNote that marking the network as hidden may be a privacy issue for you (in infrastructure mode) or client stations (in AP mode), as the explicit probe-scans are distinctly recognizable on the air.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mac-address": {
              "aliases": [],
              "description": "If specified, this connection will only apply to the Wi-Fi device whose permanent MAC address matches.\nThis property does not change the MAC address of the device (for example for MAC spoofing).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac-address-blacklist": {
              "aliases": [],
              "description": "A list of permanent MAC addresses of Wi-Fi devices to which this connection should never apply.\nEach MAC address should be given in the standard hex-digits-and-colons notation (for example, C(00:11:22:33:44:55)).",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "mac-address-randomization": {
              "aliases": [],
              "description": "One of C(0) (never randomize unless the user has set a global default to randomize and the supplicant supports randomization), C(1) (never randomize the MAC address), or C(2) (always randomize the MAC address).\nThis property is deprecated for I(cloned-mac-address).",
              "default": "0",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2"
              ],
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Wi-Fi network mode. If blank, C(infrastructure) is assumed.",
              "default": "infrastructure",
              "type": "str",
              "required": false,
              "choices": [
                "infrastructure",
                "mesh",
                "adhoc",
                "ap"
              ],
              "suboptions": {}
            },
            "mtu": {
              "aliases": [],
              "description": "If non-zero, only transmit packets of the specified size or smaller, breaking larger packets up into multiple Ethernet frames.",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "powersave": {
              "aliases": [],
              "description": "One of C(2) (disable Wi-Fi power saving), C(3) (enable Wi-Fi power saving), C(1) (don't touch currently configure setting) or C(0) (use the globally configured value).\nAll other values are reserved.",
              "default": "0",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            },
            "rate": {
              "aliases": [],
              "description": "If non-zero, directs the device to only use the specified bitrate for communication with the access point.\nUnits are in Kb/s, so for example C(5500) = 5.5 Mbit/s.\nThis property is highly driver dependent and not all devices support setting a static bitrate.",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "tx-power": {
              "aliases": [],
              "description": "If non-zero, directs the device to use the specified transmit power.\nUnits are dBm.\nThis property is highly driver dependent and not all devices support setting a static transmit power.",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "wake-on-wlan": {
              "aliases": [],
              "description": "The NMSettingWirelessWakeOnWLan options to enable. Not all devices support all options.\nMay be any combination of C(NM_SETTING_WIRELESS_WAKE_ON_WLAN_ANY) (C(0x2)), C(NM_SETTING_WIRELESS_WAKE_ON_WLAN_DISCONNECT) (C(0x4)), C(NM_SETTING_WIRELESS_WAKE_ON_WLAN_MAGIC) (C(0x8)), C(NM_SETTING_WIRELESS_WAKE_ON_WLAN_GTK_REKEY_FAILURE) (C(0x10)), C(NM_SETTING_WIRELESS_WAKE_ON_WLAN_EAP_IDENTITY_REQUEST) (C(0x20)), C(NM_SETTING_WIRELESS_WAKE_ON_WLAN_4WAY_HANDSHAKE) (C(0x40)), C(NM_SETTING_WIRELESS_WAKE_ON_WLAN_RFKILL_RELEASE) (C(0x80)), C(NM_SETTING_WIRELESS_WAKE_ON_WLAN_TCP) (C(0x100)) or the special values C(0x1) (to use global settings) and C(0x8000) (to disable management of Wake-on-LAN in NetworkManager).\nNote the option values' sum must be specified in order to combine multiple options.",
              "default": "1",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "wifi_sec": {
          "aliases": [],
          "description": "The security configuration of the WiFi connection.\nNote the list of suboption attributes may vary depending on which version of NetworkManager/nmcli is installed on the host.\nAn up-to-date list of supported attributes can be found here: U(https://networkmanager.dev/docs/api/latest/settings-802-11-wireless-security.html).\nFor instance to use common WPA-PSK auth with a password: C({key-mgmt: wpa-psk, psk: my_password}).",
          "type": "dict",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {
            "auth-alg": {
              "aliases": [],
              "description": "When WEP is used (that is, if I(key-mgmt) = C(none) or C(ieee8021x)) indicate the 802.11 authentication algorithm required by the AP here.\nOne of C(open) for Open System, C(shared) for Shared Key, or C(leap) for Cisco LEAP.\nWhen using Cisco LEAP (that is, if I(key-mgmt=ieee8021x) and I(auth-alg=leap)) the I(leap-username) and I(leap-password) properties must be specified.",
              "type": "str",
              "required": false,
              "choices": [
                "open",
                "shared",
                "leap"
              ],
              "suboptions": {}
            },
            "fils": {
              "aliases": [],
              "description": "Indicates whether Fast Initial Link Setup (802.11ai) must be enabled for the connection.\nOne of C(0) (use global default value), C(1) (disable FILS), C(2) (enable FILS if the supplicant and the access point support it) or C(3) (enable FILS and fail if not supported).\nWhen set to C(0) and no global default is set, FILS will be optionally enabled.",
              "default": "0",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            },
            "group": {
              "aliases": [],
              "description": "A list of group/broadcast encryption algorithms which prevents connections to Wi-Fi networks that do not utilize one of the algorithms in the list.\nFor maximum compatibility leave this property empty.",
              "type": "list",
              "required": false,
              "choices": [
                "wep40",
                "wep104",
                "tkip",
                "ccmp"
              ],
              "elements": "str",
              "suboptions": {}
            },
            "key-mgmt": {
              "aliases": [],
              "description": "Key management used for the connection.\nOne of C(none) (WEP or no password protection), C(ieee8021x) (Dynamic WEP), C(owe) (Opportunistic Wireless Encryption), C(wpa-psk) (WPA2 + WPA3 personal), C(sae) (WPA3 personal only), C(wpa-eap) (WPA2 + WPA3 enterprise) or C(wpa-eap-suite-b-192) (WPA3 enterprise only).\nThis property must be set for any Wi-Fi connection that uses security.",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "ieee8021x",
                "owe",
                "wpa-psk",
                "sae",
                "wpa-eap",
                "wpa-eap-suite-b-192"
              ],
              "suboptions": {}
            },
            "leap-password": {
              "aliases": [],
              "description": "The login password for legacy LEAP connections (that is, if I(key-mgmt=ieee8021x) and I(auth-alg=leap)).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "leap-password-flags": {
              "aliases": [],
              "description": "Flags indicating how to handle the I(leap-password) property.",
              "type": "list",
              "required": false,
              "elements": "int",
              "suboptions": {}
            },
            "leap-username": {
              "aliases": [],
              "description": "The login username for legacy LEAP connections (that is, if I(key-mgmt=ieee8021x) and I(auth-alg=leap)).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "pairwise": {
              "aliases": [],
              "description": "A list of pairwise encryption algorithms which prevents connections to Wi-Fi networks that do not utilize one of the algorithms in the list.\nFor maximum compatibility leave this property empty.",
              "type": "list",
              "required": false,
              "choices": [
                "tkip",
                "ccmp"
              ],
              "elements": "str",
              "suboptions": {}
            },
            "pmf": {
              "aliases": [],
              "description": "Indicates whether Protected Management Frames (802.11w) must be enabled for the connection.\nOne of C(0) (use global default value), C(1) (disable PMF), C(2) (enable PMF if the supplicant and the access point support it) or C(3) (enable PMF and fail if not supported).\nWhen set to C(0) and no global default is set, PMF will be optionally enabled.",
              "default": "0",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            },
            "proto": {
              "aliases": [],
              "description": "List of strings specifying the allowed WPA protocol versions to use.\nEach element may be C(wpa) (allow WPA) or C(rsn) (allow WPA2/RSN).\nIf not specified, both WPA and RSN connections are allowed.",
              "type": "list",
              "required": false,
              "choices": [
                "wpa",
                "rsn"
              ],
              "elements": "str",
              "suboptions": {}
            },
            "psk": {
              "aliases": [],
              "description": "Pre-Shared-Key for WPA networks.\nFor WPA-PSK, it is either an ASCII passphrase of 8 to 63 characters that is (as specified in the 802.11i standard) hashed to derive the actual key, or the key in form of 64 hexadecimal character.\nThe WPA3-Personal networks use a passphrase of any length for SAE authentication.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "psk-flags": {
              "aliases": [],
              "description": "Flags indicating how to handle the I(psk) property.",
              "type": "list",
              "required": false,
              "elements": "int",
              "suboptions": {}
            },
            "wep-key-flags": {
              "aliases": [],
              "description": "Flags indicating how to handle the I(wep-key0), I(wep-key1), I(wep-key2), and I(wep-key3) properties.",
              "type": "list",
              "required": false,
              "elements": "int",
              "suboptions": {}
            },
            "wep-key-type": {
              "aliases": [],
              "description": "Controls the interpretation of WEP keys.\nAllowed values are C(1), in which case the key is either a 10- or 26-character hexadecimal string, or a 5- or 13-character ASCII password; or C(2), in which case the passphrase is provided as a string and will be hashed using the de-facto MD5 method to derive the actual WEP key.",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2"
              ],
              "suboptions": {}
            },
            "wep-key0": {
              "aliases": [],
              "description": "Index 0 WEP key. This is the WEP key used in most networks.\nSee the I(wep-key-type) property for a description of how this key is interpreted.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "wep-key1": {
              "aliases": [],
              "description": "Index 1 WEP key. This WEP index is not used by most networks.\nSee the I(wep-key-type) property for a description of how this key is interpreted.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "wep-key2": {
              "aliases": [],
              "description": "Index 2 WEP key. This WEP index is not used by most networks.\nSee the I(wep-key-type) property for a description of how this key is interpreted.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "wep-key3": {
              "aliases": [],
              "description": "Index 3 WEP key. This WEP index is not used by most networks.\nSee the I(wep-key-type) property for a description of how this key is interpreted.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "wep-tx-keyidx": {
              "aliases": [],
              "description": "When static WEP is used (that is, if I(key-mgmt=none)) and a non-default WEP key index is used by the AP, put that WEP key index here.\nValid values are C(0) (default key) through C(3).\nNote that some consumer access points (like the Linksys WRT54G) number the keys C(1) - C(4).",
              "default": "0",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            },
            "wps-method": {
              "aliases": [],
              "description": "Flags indicating which mode of WPS is to be used if any.\nThere is little point in changing the default setting as NetworkManager will automatically determine whether it is feasible to start WPS enrollment from the Access Point capabilities.\nWPS can be disabled by setting this property to a value of C(1).",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "wireguard": {
          "aliases": [],
          "description": "The configuration of the Wireguard connection.\nNote the list of suboption attributes may vary depending on which version of NetworkManager/nmcli is installed on the host.\nAn up-to-date list of supported attributes can be found here: U(https://networkmanager.dev/docs/api/latest/settings-wireguard.html).\nFor instance to configure a listen port: C({listen-port: 12345}).",
          "type": "dict",
          "required": false,
          "version_added": "4.3.0",
          "suboptions": {
            "fwmark": {
              "aliases": [],
              "description": "The 32-bit fwmark for outgoing packets.\nThe use of fwmark is optional and is by default off. Setting it to 0 disables it.\nNote that I(wireguard.ip4-auto-default-route) or I(wireguard.ip6-auto-default-route) enabled, implies to automatically choose a fwmark.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ip4-auto-default-route": {
              "aliases": [],
              "description": "Whether to enable special handling of the IPv4 default route.\nIf enabled, the IPv4 default route from I(wireguard.peer-routes) will be placed to a dedicated routing-table and two policy routing rules will be added.\nThe fwmark number is also used as routing-table for the default-route, and if fwmark is zero, an unused fwmark/table is chosen automatically. This corresponds to what wg-quick does with Table=auto and what WireGuard calls \"Improved Rule-based Routing\"",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "ip6-auto-default-route": {
              "aliases": [],
              "description": "Like I(wireguard.ip4-auto-default-route), but for the IPv6 default route.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "listen-port": {
              "aliases": [],
              "description": "The WireGuard connection listen-port. If not specified, the port will be chosen randomly when the interface comes up.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "mtu": {
              "aliases": [],
              "description": "If non-zero, only transmit packets of the specified size or smaller, breaking larger packets up into multiple fragments.\nIf zero a default MTU is used. Note that contrary to wg-quick's MTU setting, this does not take into account the current routes at the time of activation.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "peer-routes": {
              "aliases": [],
              "description": "Whether to automatically add routes for the AllowedIPs ranges of the peers.\nIf C(true) (the default), NetworkManager will automatically add routes in the routing tables according to C(ipv4.route-table) and C(ipv6.route-table). Usually you want this automatism enabled.\nIf C(false), no such routes are added automatically. In this case, the user may want to configure static routes in C(ipv4.routes) and C(ipv6.routes), respectively.\nNote that if the peer's AllowedIPs is C(0.0.0.0/0) or C(::/0) and the profile's C(ipv4.never-default) or C(ipv6.never-default) setting is enabled, the peer route for this peer won't be added automatically.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "private-key": {
              "aliases": [],
              "description": "The 256 bit private-key in base64 encoding.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "private-key-flags": {
              "aliases": [],
              "description": "C(NMSettingSecretFlags) indicating how to handle the I(wireguard.private-key) property.",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2"
              ],
              "suboptions": {}
            }
          }
        },
        "zone": {
          "aliases": [],
          "description": "The trust level of the connection.\nWhen updating this property on a currently activated connection, the change takes effect immediately.",
          "type": "str",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "nmcli"
      ],
      "short_description": "Manage Networking"
    },
    "examples": "\n# These examples are using the following inventory:\n#\n# ## Directory layout:\n#\n# |_/inventory/cloud-hosts\n# |           /group_vars/openstack-stage.yml\n# |           /host_vars/controller-01.openstack.host.com\n# |           /host_vars/controller-02.openstack.host.com\n# |_/playbook/library/nmcli.py\n# |          /playbook-add.yml\n# |          /playbook-del.yml\n# ```\n#\n# ## inventory examples\n# ### groups_vars\n# ```yml\n# ---\n# #devops_os_define_network\n# storage_gw: \"192.0.2.254\"\n# external_gw: \"198.51.100.254\"\n# tenant_gw: \"203.0.113.254\"\n#\n# #Team vars\n# nmcli_team:\n#   - conn_name: tenant\n#     ip4: '{{ tenant_ip }}'\n#     gw4: '{{ tenant_gw }}'\n#   - conn_name: external\n#     ip4: '{{ external_ip }}'\n#     gw4: '{{ external_gw }}'\n#   - conn_name: storage\n#     ip4: '{{ storage_ip }}'\n#     gw4: '{{ storage_gw }}'\n# nmcli_team_slave:\n#   - conn_name: em1\n#     ifname: em1\n#     master: tenant\n#   - conn_name: em2\n#     ifname: em2\n#     master: tenant\n#   - conn_name: p2p1\n#     ifname: p2p1\n#     master: storage\n#   - conn_name: p2p2\n#     ifname: p2p2\n#     master: external\n#\n# #bond vars\n# nmcli_bond:\n#   - conn_name: tenant\n#     ip4: '{{ tenant_ip }}'\n#     gw4: ''\n#     mode: balance-rr\n#   - conn_name: external\n#     ip4: '{{ external_ip }}'\n#     gw4: ''\n#     mode: balance-rr\n#   - conn_name: storage\n#     ip4: '{{ storage_ip }}'\n#     gw4: '{{ storage_gw }}'\n#     mode: balance-rr\n# nmcli_bond_slave:\n#   - conn_name: em1\n#     ifname: em1\n#     master: tenant\n#   - conn_name: em2\n#     ifname: em2\n#     master: tenant\n#   - conn_name: p2p1\n#     ifname: p2p1\n#     master: storage\n#   - conn_name: p2p2\n#     ifname: p2p2\n#     master: external\n#\n# #ethernet vars\n# nmcli_ethernet:\n#   - conn_name: em1\n#     ifname: em1\n#     ip4:\n#       - '{{ tenant_ip }}'\n#       - '{{ second_tenant_ip }}'\n#     gw4: '{{ tenant_gw }}'\n#   - conn_name: em2\n#     ifname: em2\n#     ip4: '{{ tenant_ip1 }}'\n#     gw4: '{{ tenant_gw }}'\n#   - conn_name: p2p1\n#     ifname: p2p1\n#     ip4: '{{ storage_ip }}'\n#     gw4: '{{ storage_gw }}'\n#   - conn_name: p2p2\n#     ifname: p2p2\n#     ip4: '{{ external_ip }}'\n#     gw4: '{{ external_gw }}'\n# ```\n#\n# ### host_vars\n# ```yml\n# ---\n# storage_ip: \"192.0.2.91/23\"\n# external_ip: \"198.51.100.23/21\"\n# tenant_ip: \"203.0.113.77/23\"\n# second_tenant_ip: \"204.0.113.77/23\"\n# ```\n\n\n\n## playbook-add.yml example\n\n---\n- hosts: openstack-stage\n  remote_user: root\n  tasks:\n\n  - name: Install needed network manager libs\n    ansible.builtin.package:\n      name:\n        - NetworkManager-libnm\n        - nm-connection-editor\n        - libsemanage-python\n        - policycoreutils-python\n      state: present\n\n##### Working with all cloud nodes - Teaming\n  - name: Try nmcli add team - conn_name only & ip4 gw4\n    community.general.nmcli:\n      type: team\n      conn_name: '{{ item.conn_name }}'\n      ip4: '{{ item.ip4 }}'\n      gw4: '{{ item.gw4 }}'\n      state: present\n    with_items:\n      - '{{ nmcli_team }}'\n\n  - name: Try nmcli add teams-slave\n    community.general.nmcli:\n      type: team-slave\n      conn_name: '{{ item.conn_name }}'\n      ifname: '{{ item.ifname }}'\n      master: '{{ item.master }}'\n      state: present\n    with_items:\n      - '{{ nmcli_team_slave }}'\n\n###### Working with all cloud nodes - Bonding\n  - name: Try nmcli add bond - conn_name only & ip4 gw4 mode\n    community.general.nmcli:\n      type: bond\n      conn_name: '{{ item.conn_name }}'\n      ip4: '{{ item.ip4 }}'\n      gw4: '{{ item.gw4 }}'\n      mode: '{{ item.mode }}'\n      state: present\n    with_items:\n      - '{{ nmcli_bond }}'\n\n  - name: Try nmcli add bond-slave\n    community.general.nmcli:\n      type: bond-slave\n      conn_name: '{{ item.conn_name }}'\n      ifname: '{{ item.ifname }}'\n      master: '{{ item.master }}'\n      state: present\n    with_items:\n      - '{{ nmcli_bond_slave }}'\n\n##### Working with all cloud nodes - Ethernet\n  - name: Try nmcli add Ethernet - conn_name only & ip4 gw4\n    community.general.nmcli:\n      type: ethernet\n      conn_name: '{{ item.conn_name }}'\n      ip4: '{{ item.ip4 }}'\n      gw4: '{{ item.gw4 }}'\n      state: present\n    with_items:\n      - '{{ nmcli_ethernet }}'\n\n## playbook-del.yml example\n- hosts: openstack-stage\n  remote_user: root\n  tasks:\n\n  - name: Try nmcli del team - multiple\n    community.general.nmcli:\n      conn_name: '{{ item.conn_name }}'\n      state: absent\n    with_items:\n      - conn_name: em1\n      - conn_name: em2\n      - conn_name: p1p1\n      - conn_name: p1p2\n      - conn_name: p2p1\n      - conn_name: p2p2\n      - conn_name: tenant\n      - conn_name: storage\n      - conn_name: external\n      - conn_name: team-em1\n      - conn_name: team-em2\n      - conn_name: team-p1p1\n      - conn_name: team-p1p2\n      - conn_name: team-p2p1\n      - conn_name: team-p2p2\n\n  - name: Add an Ethernet connection with static IP configuration\n    community.general.nmcli:\n      conn_name: my-eth1\n      ifname: eth1\n      type: ethernet\n      ip4: 192.0.2.100/24\n      gw4: 192.0.2.1\n      state: present\n\n  - name: Add an Team connection with static IP configuration\n    community.general.nmcli:\n      conn_name: my-team1\n      ifname: my-team1\n      type: team\n      ip4: 192.0.2.100/24\n      gw4: 192.0.2.1\n      state: present\n      autoconnect: yes\n\n  - name: Optionally, at the same time specify IPv6 addresses for the device\n    community.general.nmcli:\n      conn_name: my-eth1\n      ifname: eth1\n      type: ethernet\n      ip4: 192.0.2.100/24\n      gw4: 192.0.2.1\n      ip6: 2001:db8::cafe\n      gw6: 2001:db8::1\n      state: present\n\n  - name: Add two IPv4 DNS server addresses\n    community.general.nmcli:\n      conn_name: my-eth1\n      type: ethernet\n      dns4:\n      - 192.0.2.53\n      - 198.51.100.53\n      state: present\n\n  - name: Make a profile usable for all compatible Ethernet interfaces\n    community.general.nmcli:\n      ctype: ethernet\n      name: my-eth1\n      ifname: '*'\n      state: present\n\n  - name: Change the property of a setting e.g. MTU\n    community.general.nmcli:\n      conn_name: my-eth1\n      mtu: 9000\n      type: ethernet\n      state: present\n\n  - name: Add second ip4 address\n    community.general.nmcli:\n      conn_name: my-eth1\n      ifname: eth1\n      type: ethernet\n      ip4:\n        - 192.0.2.100/24\n        - 192.0.3.100/24\n      state: present\n\n  - name: Add second ip6 address\n    community.general.nmcli:\n      conn_name: my-eth1\n      ifname: eth1\n      type: ethernet\n      ip6:\n        - 2001:db8::cafe\n        - 2002:db8::cafe\n      state: present\n\n  - name: Add VxLan\n    community.general.nmcli:\n      type: vxlan\n      conn_name: vxlan_test1\n      vxlan_id: 16\n      vxlan_local: 192.168.1.2\n      vxlan_remote: 192.168.1.5\n\n  - name: Add gre\n    community.general.nmcli:\n      type: gre\n      conn_name: gre_test1\n      ip_tunnel_dev: eth0\n      ip_tunnel_local: 192.168.1.2\n      ip_tunnel_remote: 192.168.1.5\n\n  - name: Add ipip\n    community.general.nmcli:\n      type: ipip\n      conn_name: ipip_test1\n      ip_tunnel_dev: eth0\n      ip_tunnel_local: 192.168.1.2\n      ip_tunnel_remote: 192.168.1.5\n\n  - name: Add sit\n    community.general.nmcli:\n      type: sit\n      conn_name: sit_test1\n      ip_tunnel_dev: eth0\n      ip_tunnel_local: 192.168.1.2\n      ip_tunnel_remote: 192.168.1.5\n\n  - name: Add zone\n    community.general.nmcli:\n      type: ethernet\n      conn_name: my-eth1\n      zone: external\n      state: present\n\n# nmcli exits with status 0 if it succeeds and exits with a status greater\n# than zero when there is a failure. The following list of status codes may be\n# returned:\n#\n#     - 0 Success - indicates the operation succeeded\n#     - 1 Unknown or unspecified error\n#     - 2 Invalid user input, wrong nmcli invocation\n#     - 3 Timeout expired (see --wait option)\n#     - 4 Connection activation failed\n#     - 5 Connection deactivation failed\n#     - 6 Disconnecting device failed\n#     - 7 Connection deletion failed\n#     - 8 NetworkManager is not running\n#     - 9 nmcli and NetworkManager versions mismatch\n#     - 10 Connection, device, or access point does not exist.\n\n- name: Create the wifi connection\n  community.general.nmcli:\n    type: wifi\n    conn_name: Brittany\n    ifname: wlp4s0\n    ssid: Brittany\n    wifi_sec:\n      key-mgmt: wpa-psk\n      psk: my_password\n    autoconnect: true\n    state: present\n\n- name: Create a hidden AP mode wifi connection\n  community.general.nmcli:\n    type: wifi\n    conn_name: ChocoMaster\n    ifname: wlo1\n    ssid: ChocoMaster\n    wifi:\n      hidden: true\n      mode: ap\n    autoconnect: true\n    state: present\n\n- name: Create a gsm connection\n  community.general.nmcli:\n    type: gsm\n    conn_name: my-gsm-provider\n    ifname: cdc-wdm0\n    gsm:\n        apn: my.provider.apn\n        username: my-provider-username\n        password: my-provider-password\n        pin: my-sim-pin\n    autoconnect: true\n    state: present\n\n- name: Create a wireguard connection\n  community.general.nmcli:\n    type: wireguard\n    conn_name: my-wg-provider\n    ifname: mywg0\n    wireguard:\n        listen-port: 51820\n        private-key: my-private-key\n    autoconnect: true\n    state: present\n\n"
  },
  "community.general.nomad_job": {
    "doc": {
      "description": "Launch a Nomad job.\nStop a Nomad job.\nForce start a Nomad job",
      "has_action": false,
      "notes": "C(check_mode) is supported.",
      "options": {
        "client_cert": {
          "aliases": [],
          "description": "Path of certificate for TLS/SSL.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "Path of certificate's private key for TLS/SSL.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "content": {
          "aliases": [],
          "description": "Content of Nomad job.\nEither this or I(name) must be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "content_format": {
          "aliases": [],
          "description": "Type of content of Nomad job.",
          "default": "hcl",
          "type": "str",
          "required": false,
          "choices": [
            "hcl",
            "json"
          ],
          "suboptions": {}
        },
        "force_start": {
          "aliases": [],
          "description": "Force job to started.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "FQDN of Nomad server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of job for delete, stop and start job without source.\nName of job for delete, stop and start job without source.\nEither this or I(content) must be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace for Nomad.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Deploy or remove job.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout (in seconds) for the request to Nomad.",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "ACL token for authentification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssl": {
          "aliases": [],
          "description": "Use TLS/SSL connection.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Enable TLS/SSL certificate validation.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-nomad"
      ],
      "short_description": "Launch a Nomad Job",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Create job\n  community.general.nomad_job:\n    host: localhost\n    state: present\n    content: \"{{ lookup('ansible.builtin.file', 'job.hcl') }}\"\n    timeout: 120\n\n- name: Stop job\n  community.general.nomad_job:\n    host: localhost\n    state: absent\n    name: api\n\n- name: Force job to start\n  community.general.nomad_job:\n    host: localhost\n    state: present\n    name: api\n    timeout: 120\n    force_start: true\n"
  },
  "community.general.nomad_job_info": {
    "doc": {
      "description": "Get info for one Nomad job.\nList Nomad jobs.",
      "has_action": false,
      "notes": "C(check_mode) is supported.",
      "options": {
        "client_cert": {
          "aliases": [],
          "description": "Path of certificate for TLS/SSL.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "Path of certificate's private key for TLS/SSL.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "FQDN of Nomad server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of job for Get info.\nIf not specified, lists all jobs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace for Nomad.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout (in seconds) for the request to Nomad.",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "ACL token for authentification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssl": {
          "aliases": [],
          "description": "Use TLS/SSL connection.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Enable TLS/SSL certificate validation.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-nomad"
      ],
      "short_description": "Get Nomad Jobs info",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Get info for job awx\n  community.general.nomad_job_info:\n    host: localhost\n    name: awx\n  register: result\n\n- name: List Nomad jobs\n  community.general.nomad_job_info:\n    host: localhost\n  register: result\n\n"
  },
  "community.general.nosh": {
    "doc": {
      "description": "Control running and enabled state for system-wide or user services.\nBSD and Linux systems are supported.",
      "has_action": false,
      "notes": "Information on the nosh utilities suite may be found at U(https://jdebp.eu/Softwares/nosh/).",
      "options": {
        "enabled": {
          "aliases": [],
          "description": "Enable or disable the service, independently of C(*.preset) file preference or running state. Mutually exclusive with I(preset). Will take effect prior to I(state=reset).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the service to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "preset": {
          "aliases": [],
          "description": "Enable or disable the service according to local preferences in C(*.preset) files. Mutually exclusive with I(enabled). Only has an effect if set to true. Will take effect prior to I(state=reset).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(started)/C(stopped) are idempotent actions that will not run commands unless necessary. C(restarted) will always bounce the service. C(reloaded) will send a SIGHUP or start the service. C(reset) will start or stop the service according to whether it is enabled or not.",
          "type": "str",
          "required": false,
          "choices": [
            "started",
            "stopped",
            "reset",
            "restarted",
            "reloaded"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Run system-control talking to the calling user's service manager, rather than the system-wide service manager.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "A system with an active nosh service manager, see Notes for further information."
      ],
      "short_description": "Manage services with nosh"
    },
    "examples": "\n- name: Start dnscache if not running\n  community.general.nosh: name=dnscache state=started\n\n- name: Stop mpd, if running\n  community.general.nosh: name=mpd state=stopped\n\n- name: Restart unbound or start it if not already running\n  community.general.nosh:\n    name: unbound\n    state: restarted\n\n- name: Reload fail2ban or start it if not already running\n  community.general.nosh:\n    name: fail2ban\n    state: reloaded\n\n- name: Disable nsd\n  community.general.nosh: name=nsd enabled=no\n\n- name: For package installers, set nginx running state according to local enable settings, preset and reset\n  community.general.nosh: name=nginx preset=True state=reset\n\n- name: Reboot the host if nosh is the system manager, would need a \"wait_for*\" task at least, not recommended as-is\n  community.general.nosh: name=reboot state=started\n\n- name: Using conditionals with the module facts\n  tasks:\n    - name: Obtain information on tinydns service\n      community.general.nosh: name=tinydns\n      register: result\n\n    - name: Fail if service not loaded\n      ansible.builtin.fail: msg=\"The {{ result.name }} service is not loaded\"\n      when: not result.status\n\n    - name: Fail if service is running\n      ansible.builtin.fail: msg=\"The {{ result.name }} service is running\"\n      when: result.status and result.status['DaemontoolsEncoreState'] == \"running\"\n"
  },
  "community.general.npm": {
    "doc": {
      "description": "Manage node.js packages with Node Package Manager (npm).",
      "has_action": false,
      "options": {
        "ci": {
          "aliases": [],
          "description": "Install packages based on package-lock file, same as running C(npm ci).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "The executable location for npm.\nThis is useful if you are using a version manager, such as nvm.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "global": {
          "aliases": [],
          "description": "Install the node.js library globally.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ignore_scripts": {
          "aliases": [],
          "description": "Use the C(--ignore-scripts) flag when installing.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of a node.js library to install.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "no_bin_links": {
          "aliases": [],
          "description": "Use the C(--no-bin-links) flag when installing.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.5.0",
          "suboptions": {}
        },
        "no_optional": {
          "aliases": [],
          "description": "Use the C(--no-optional) flag when installing.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The base path where to install the node.js libraries.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "production": {
          "aliases": [],
          "description": "Install dependencies in production mode, excluding devDependencies.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "registry": {
          "aliases": [],
          "description": "The registry to install modules from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the node.js library.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest"
          ],
          "suboptions": {}
        },
        "unsafe_perm": {
          "aliases": [],
          "description": "Use the C(--unsafe-perm) flag when installing.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The version to be installed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "npm installed in bin path (recommended /usr/local/bin)"
      ],
      "short_description": "Manage node.js packages with npm"
    },
    "examples": "\n- name: Install \"coffee-script\" node.js package.\n  community.general.npm:\n    name: coffee-script\n    path: /app/location\n\n- name: Install \"coffee-script\" node.js package on version 1.6.1.\n  community.general.npm:\n    name: coffee-script\n    version: '1.6.1'\n    path: /app/location\n\n- name: Install \"coffee-script\" node.js package globally.\n  community.general.npm:\n    name: coffee-script\n    global: yes\n\n- name: Remove the globally package \"coffee-script\".\n  community.general.npm:\n    name: coffee-script\n    global: yes\n    state: absent\n\n- name: Install \"coffee-script\" node.js package from custom registry.\n  community.general.npm:\n    name: coffee-script\n    registry: 'http://registry.mysite.com'\n\n- name: Install packages based on package.json.\n  community.general.npm:\n    path: /app/location\n\n- name: Update packages based on package.json to their latest version.\n  community.general.npm:\n    path: /app/location\n    state: latest\n\n- name: Install packages based on package.json using the npm installed with nvm v0.10.1.\n  community.general.npm:\n    path: /app/location\n    executable: /opt/nvm/v0.10.1/bin/npm\n    state: present\n"
  },
  "community.general.nsupdate": {
    "doc": {
      "description": "Create, update and remove DNS records using DDNS updates",
      "has_action": false,
      "options": {
        "key_algorithm": {
          "aliases": [],
          "description": "Specify key algorithm used by C(key_secret).",
          "default": "hmac-md5",
          "type": "str",
          "required": false,
          "choices": [
            "HMAC-MD5.SIG-ALG.REG.INT",
            "hmac-md5",
            "hmac-sha1",
            "hmac-sha224",
            "hmac-sha256",
            "hmac-sha384",
            "hmac-sha512"
          ],
          "suboptions": {}
        },
        "key_name": {
          "aliases": [],
          "description": "Use TSIG key name to authenticate against DNS C(server)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key_secret": {
          "aliases": [],
          "description": "Use TSIG key secret, associated with C(key_name), to authenticate against C(server)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Use this TCP port when connecting to C(server).",
          "default": "53",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Sets the transport protocol (TCP or UDP). TCP is the recommended and a more robust option.",
          "default": "tcp",
          "type": "str",
          "required": false,
          "choices": [
            "tcp",
            "udp"
          ],
          "suboptions": {}
        },
        "record": {
          "aliases": [],
          "description": "Sets the DNS record to modify. When zone is omitted this has to be absolute (ending with a dot).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Apply DNS modification on this server, specified by IPv4 or IPv6 address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage DNS record.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Sets the record TTL.",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Sets the record type.",
          "default": "A",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Sets the record value.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "DNS record will be modified on this C(zone).\nWhen omitted DNS will be queried to attempt finding the correct zone.\nStarting with Ansible 2.7 this parameter is optional.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "dnspython"
      ],
      "short_description": "Manage DNS records."
    },
    "examples": "\n- name: Add or modify ansible.example.org A to 192.168.1.1\"\n  community.general.nsupdate:\n    key_name: \"nsupdate\"\n    key_secret: \"+bFQtBCta7j2vWkjPkAFtgA==\"\n    server: \"10.1.1.1\"\n    zone: \"example.org\"\n    record: \"ansible\"\n    value: \"192.168.1.1\"\n\n- name: Add or modify ansible.example.org A to 192.168.1.1, 192.168.1.2 and 192.168.1.3\"\n  community.general.nsupdate:\n    key_name: \"nsupdate\"\n    key_secret: \"+bFQtBCta7j2vWkjPkAFtgA==\"\n    server: \"10.1.1.1\"\n    zone: \"example.org\"\n    record: \"ansible\"\n    value: [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"]\n\n- name: Remove puppet.example.org CNAME\n  community.general.nsupdate:\n    key_name: \"nsupdate\"\n    key_secret: \"+bFQtBCta7j2vWkjPkAFtgA==\"\n    server: \"10.1.1.1\"\n    zone: \"example.org\"\n    record: \"puppet\"\n    type: \"CNAME\"\n    state: absent\n\n- name: Add 1.1.168.192.in-addr.arpa. PTR for ansible.example.org\n  community.general.nsupdate:\n    key_name: \"nsupdate\"\n    key_secret: \"+bFQtBCta7j2vWkjPkAFtgA==\"\n    server: \"10.1.1.1\"\n    record: \"1.1.168.192.in-addr.arpa.\"\n    type: \"PTR\"\n    value: \"ansible.example.org.\"\n    state: present\n\n- name: Remove 1.1.168.192.in-addr.arpa. PTR\n  community.general.nsupdate:\n    key_name: \"nsupdate\"\n    key_secret: \"+bFQtBCta7j2vWkjPkAFtgA==\"\n    server: \"10.1.1.1\"\n    record: \"1.1.168.192.in-addr.arpa.\"\n    type: \"PTR\"\n    state: absent\n"
  },
  "community.general.oci_vcn": {
    "doc": {
      "description": "This module allows the user to create, delete and update virtual cloud networks(VCNs) in OCI. The complete Oracle Cloud Infrastructure Ansible Modules can be downloaded from U(https://github.com/oracle/oci-ansible-modules/releases).",
      "has_action": false,
      "notes": "For OCI python sdk configuration, please refer to U(https://oracle-cloud-infrastructure-python-sdk.readthedocs.io/en/latest/configuration.html)",
      "options": {
        "api_user": {
          "aliases": [],
          "description": "The OCID of the user, on whose behalf, OCI APIs are invoked. If not set, then the value of the OCI_USER_OCID environment variable, if any, is used. This option is required if the user is not specified through a configuration file (See C(config_file_location)). To get the user's OCID, please refer U(https://docs.us-phoenix-1.oraclecloud.com/Content/API/Concepts/apisigningkey.htm).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_user_fingerprint": {
          "aliases": [],
          "description": "Fingerprint for the key pair being used. If not set, then the value of the OCI_USER_FINGERPRINT environment variable, if any, is used. This option is required if the key fingerprint is not specified through a configuration file (See C(config_file_location)). To get the key pair's fingerprint value please refer U(https://docs.us-phoenix-1.oraclecloud.com/Content/API/Concepts/apisigningkey.htm).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_user_key_file": {
          "aliases": [],
          "description": "Full path and filename of the private key (in PEM format). If not set, then the value of the OCI_USER_KEY_FILE variable, if any, is used. This option is required if the private key is not specified through a configuration file (See C(config_file_location)). If the key is encrypted with a pass-phrase, the C(api_user_key_pass_phrase) option must also be provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "api_user_key_pass_phrase": {
          "aliases": [],
          "description": "Passphrase used by the key referenced in C(api_user_key_file), if it is encrypted. If not set, then the value of the OCI_USER_KEY_PASS_PHRASE variable, if any, is used. This option is required if the key passphrase is not specified through a configuration file (See C(config_file_location)).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "The type of authentication to use for making API requests. By default C(auth_type=\"api_key\") based authentication is performed and the API key (see I(api_user_key_file)) in your config file will be used. If this 'auth_type' module option is not specified, the value of the OCI_ANSIBLE_AUTH_TYPE, if any, is used. Use C(auth_type=\"instance_principal\") to use instance principal based authentication when running ansible playbooks within an OCI compute instance.",
          "default": "api_key",
          "type": "str",
          "required": false,
          "choices": [
            "api_key",
            "instance_principal"
          ],
          "suboptions": {}
        },
        "cidr_block": {
          "aliases": [],
          "description": "The CIDR IP address block of the VCN. Required when creating a VCN with I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "compartment_id": {
          "aliases": [],
          "description": "The OCID of the compartment to contain the VCN. Required when creating a VCN with I(state=present). This option is mutually exclusive with I(vcn_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "config_file_location": {
          "aliases": [],
          "description": "Path to configuration file. If not set then the value of the OCI_CONFIG_FILE environment variable, if any, is used. Otherwise, defaults to ~/.oci/config.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "config_profile_name": {
          "aliases": [],
          "description": "The profile to load from the config file referenced by C(config_file_location). If not set, then the value of the OCI_CONFIG_PROFILE environment variable, if any, is used. Otherwise, defaults to the \"DEFAULT\" profile in C(config_file_location).",
          "default": "DEFAULT",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "defined_tags": {
          "aliases": [],
          "description": "Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see U(https://docs.us-phoenix-1.oraclecloud.com/Content/General/Concepts/resourcetags.htm).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [
            "name"
          ],
          "description": "A user-friendly name. Does not have to be unique, and it's changeable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_label": {
          "aliases": [],
          "description": "A DNS label for the VCN, used in conjunction with the VNIC's hostname and subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, bminstance-1.subnet123.vcn1.oraclevcn.com). Not required to be unique, but it's a best practice to set unique DNS labels for VCNs in your tenancy. Must be an alphanumeric string that begins with a letter. The value cannot be changed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_create": {
          "aliases": [],
          "description": "Whether to attempt non-idempotent creation of a resource. By default, create resource is an idempotent operation, and doesn't create the resource if it already exists. Setting this option to true, forcefully creates a copy of the resource, even if it already exists.This option is mutually exclusive with I(key_by).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "freeform_tags": {
          "aliases": [],
          "description": "Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see U(https://docs.us-phoenix-1.oraclecloud.com/Content/General/Concepts/resourcetags.htm).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "key_by": {
          "aliases": [],
          "description": "The list of comma-separated attributes of this resource which should be used to uniquely identify an instance of the resource. By default, all the attributes of a resource except I(freeform_tags) are used to uniquely identify a resource.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The Oracle Cloud Infrastructure region to use for all OCI API requests. If not set, then the value of the OCI_REGION variable, if any, is used. This option is required if the region is not specified through a configuration file (See C(config_file_location)). Please refer to U(https://docs.us-phoenix-1.oraclecloud.com/Content/General/Concepts/regions.htm) for more information on OCI regions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or update a VCN with I(state=present). Use I(state=absent) to delete a VCN.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenancy": {
          "aliases": [],
          "description": "OCID of your tenancy. If not set, then the value of the OCI_TENANCY variable, if any, is used. This option is required if the tenancy OCID is not specified through a configuration file (See C(config_file_location)). To get the tenancy OCID, please refer U(https://docs.us-phoenix-1.oraclecloud.com/Content/API/Concepts/apisigningkey.htm)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vcn_id": {
          "aliases": [
            "id"
          ],
          "description": "The OCID of the VCN. Required when deleting a VCN with I(state=absent) or updating a VCN with I(state=present). This option is mutually exclusive with I(compartment_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for create or delete operation to complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "Time, in seconds, to wait when I(wait=yes).",
          "default": "1200",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_until": {
          "aliases": [],
          "description": "The lifecycle state to wait for the resource to transition into when I(wait=yes). By default, when I(wait=yes), we wait for the resource to get into ACTIVE/ATTACHED/AVAILABLE/PROVISIONED/ RUNNING applicable lifecycle state during create operation & to get into DELETED/DETACHED/ TERMINATED lifecycle state during delete operation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "Python SDK for Oracle Cloud Infrastructure U(https://oracle-cloud-infrastructure-python-sdk.readthedocs.io)"
      ],
      "short_description": "Manage Virtual Cloud Networks(VCN) in OCI"
    },
    "examples": "\n- name: Create a VCN\n  community.general.oci_vcn:\n    cidr_block: '10.0.0.0/16'\n    compartment_id: 'ocid1.compartment.oc1..xxxxxEXAMPLExxxxx'\n    display_name: my_vcn\n    dns_label: ansiblevcn\n\n- name: Updates the specified VCN's display name\n  community.general.oci_vcn:\n    vcn_id: ocid1.vcn.oc1.phx.xxxxxEXAMPLExxxxx\n    display_name: ansible_vcn\n\n- name: Delete the specified VCN\n  community.general.oci_vcn:\n    vcn_id: ocid1.vcn.oc1.phx.xxxxxEXAMPLExxxxx\n    state: absent\n"
  },
  "community.general.odbc": {
    "doc": {
      "description": "Read/Write info via ODBC drivers.",
      "has_action": false,
      "notes": "Like the command module, this module always returns changed = yes whether or not the query would change the database.\nTo alter this behavior you can use C(changed_when): [yes or no].\nFor details about return values (description and row_count) see U(https://github.com/mkleehammer/pyodbc/wiki/Cursor).",
      "options": {
        "commit": {
          "aliases": [],
          "description": "Perform a commit after the execution of the SQL query.\nSome databases allow a commit after a select whereas others raise an exception.\nDefault is C(true) to support legacy module behavior.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "dsn": {
          "aliases": [],
          "description": "The connection string passed into ODBC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "Parameters to pass to the SQL query.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "The SQL query to perform.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyodbc"
      ],
      "short_description": "Execute SQL via ODBC",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Set some values in the test db\n  community.general.odbc:\n    dsn: \"DRIVER={ODBC Driver 13 for SQL Server};Server=db.ansible.com;Database=my_db;UID=admin;PWD=password;\"\n    query: \"Select * from table_a where column1 = ?\"\n    params:\n      - \"value1\"\n    commit: false\n  changed_when: no\n"
  },
  "community.general.office_365_connector_card": {
    "doc": {
      "description": "Creates Connector Card messages through\nOffice 365 Connectors U(https://dev.outlook.com/Connectors)",
      "has_action": false,
      "notes": "This module is not idempotent, therefore if the same task is run twice there will be two Connector Cards created",
      "options": {
        "actions": {
          "aliases": [],
          "description": "This array of objects will power the action links\nfound at the bottom of the card.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "color": {
          "aliases": [],
          "description": "Accent color used for branding or indicating status in the card.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sections": {
          "aliases": [],
          "description": "Contains a list of sections to display in the card.\nFor more information see https://dev.outlook.com/Connectors/reference.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "summary": {
          "aliases": [],
          "description": "A string used for summarizing card content.\nThis will be shown as the message subject.\nThis is required if the text parameter isn't populated.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "The main text of the card.\nThis will be rendered below the sender information and optional title,\nand above any sections or actions present.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "A title for the Connector message. Shown at the top of the message.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "webhook": {
          "aliases": [],
          "description": "The webhook URL is given to you when you create a new Connector.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Use webhooks to create Connector Card messages within an Office 365 group"
    },
    "examples": "\n- name: Create a simple Connector Card\n  community.general.office_365_connector_card:\n    webhook: https://outlook.office.com/webhook/GUID/IncomingWebhook/GUID/GUID\n    text: 'Hello, World!'\n\n- name: Create a Connector Card with the full format\n  community.general.office_365_connector_card:\n    webhook: https://outlook.office.com/webhook/GUID/IncomingWebhook/GUID/GUID\n    summary: This is the summary property\n    title: This is the **card's title** property\n    text: This is the **card's text** property. Lorem ipsum dolor sit amet, consectetur\n      adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n    color: E81123\n    sections:\n    - title: This is the **section's title** property\n      activity_image: http://connectorsdemo.azurewebsites.net/images/MSC12_Oscar_002.jpg\n      activity_title: This is the section's **activityTitle** property\n      activity_subtitle: This is the section's **activitySubtitle** property\n      activity_text: This is the section's **activityText** property.\n      hero_image:\n        image: http://connectorsdemo.azurewebsites.net/images/WIN12_Scene_01.jpg\n        title: This is the image's alternate text\n      text: This is the section's text property. Lorem ipsum dolor sit amet, consectetur\n        adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      facts:\n      - name: This is a fact name\n        value: This is a fact value\n      - name: This is a fact name\n        value: This is a fact value\n      - name: This is a fact name\n        value: This is a fact value\n      images:\n      - image: http://connectorsdemo.azurewebsites.net/images/MicrosoftSurface_024_Cafe_OH-06315_VS_R1c.jpg\n        title: This is the image's alternate text\n      - image: http://connectorsdemo.azurewebsites.net/images/WIN12_Scene_01.jpg\n        title: This is the image's alternate text\n      - image: http://connectorsdemo.azurewebsites.net/images/WIN12_Anthony_02.jpg\n        title: This is the image's alternate text\n      actions:\n      - \"@type\": ActionCard\n        name: Comment\n        inputs:\n        - \"@type\": TextInput\n          id: comment\n          is_multiline: true\n          title: Input's title property\n        actions:\n        - \"@type\": HttpPOST\n          name: Save\n          target: http://...\n      - \"@type\": ActionCard\n        name: Due Date\n        inputs:\n        - \"@type\": DateInput\n          id: dueDate\n          title: Input's title property\n        actions:\n        - \"@type\": HttpPOST\n          name: Save\n          target: http://...\n      - \"@type\": HttpPOST\n        name: Action's name prop.\n        target: http://...\n      - \"@type\": OpenUri\n        name: Action's name prop\n        targets:\n        - os: default\n          uri: http://...\n    - start_group: true\n      title: This is the title of a **second section**\n      text: This second section is visually separated from the first one by setting its\n        **startGroup** property to true.\n"
  },
  "community.general.ohai": {
    "doc": {
      "description": "Similar to the M(community.general.facter) module, this runs the I(Ohai) discovery program (U(https://docs.chef.io/ohai.html)) on the remote host and returns JSON inventory data. I(Ohai) data is a bit more verbose and nested than I(facter).",
      "has_action": false,
      "notes": "",
      "options": {},
      "requirements": [
        "ohai"
      ],
      "short_description": "Returns inventory data from I(Ohai)"
    },
    "examples": "\n# Retrieve (ohai) data from all Web servers and store in one-file per host\nansible webservers -m ohai --tree=/tmp/ohaidata\n"
  },
  "community.general.omapi_host": {
    "doc": {
      "description": "Manage OMAPI hosts into compatible DHCPd servers",
      "has_action": false,
      "options": {
        "ddns": {
          "aliases": [],
          "description": "Enable dynamic DNS updates for this host.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Sets OMAPI server host to interact with.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [
            "name"
          ],
          "description": "Sets the host lease hostname (mandatory if state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip": {
          "aliases": [],
          "description": "Sets the lease host IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Sets the TSIG key content for authenticating against OMAPI server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "key_name": {
          "aliases": [],
          "description": "Sets the TSIG key name for authenticating against OMAPI server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "macaddr": {
          "aliases": [],
          "description": "Sets the lease host MAC address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Sets the OMAPI server port to interact with.",
          "default": "7911",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or remove OMAPI host.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "statements": {
          "aliases": [],
          "description": "Attach a list of OMAPI DHCP statements with host lease (without ending semicolon).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "pypureomapi"
      ],
      "short_description": "Setup OMAPI hosts."
    },
    "examples": "\n- name: Add a host using OMAPI\n  community.general.omapi_host:\n    key_name: defomapi\n    key: +bFQtBCta6j2vWkjPkNFtgA==\n    host: 10.98.4.55\n    macaddr: 44:dd:ab:dd:11:44\n    name: server01\n    ip: 192.168.88.99\n    ddns: yes\n    statements:\n    - filename \"pxelinux.0\"\n    - next-server 1.1.1.1\n    state: present\n\n- name: Remove a host using OMAPI\n  community.general.omapi_host:\n    key_name: defomapi\n    key: +bFQtBCta6j2vWkjPkNFtgA==\n    host: 10.1.1.1\n    macaddr: 00:66:ab:dd:11:44\n    state: absent\n"
  },
  "community.general.one_host": {
    "doc": {
      "description": "Manages OpenNebula Hosts",
      "has_action": false,
      "options": {
        "api_password": {
          "aliases": [
            "api_token"
          ],
          "description": "The password or token for XMLRPC authentication.\nIf not specified then the value of the ONE_PASSWORD environment variable, if any, is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "api_endpoint"
          ],
          "description": "The ENDPOINT URL of the XMLRPC server.\nIf not specified then the value of the ONE_URL environment variable, if any, is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The name of the user for XMLRPC authentication.\nIf not specified then the value of the ONE_USERNAME environment variable, if any, is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster_id": {
          "aliases": [],
          "description": "The cluster ID.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "The cluster specified by name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "im_mad_name": {
          "aliases": [],
          "description": "The name of the information manager, this values are taken from the oned.conf with the tag name IM_MAD (name)",
          "default": "kvm",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "The labels for this host.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Hostname of the machine to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Takes the host to the desired lifecycle state.\nIf C(absent) the host will be deleted from the cluster.\nIf C(present) the host will be created in the cluster (includes C(enabled), C(disabled) and C(offline) states).\nIf C(enabled) the host is fully operational.\nC(disabled), e.g. to perform maintenance operations.\nC(offline), host is totally offline.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "enabled",
            "disabled",
            "offline"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [
            "attributes"
          ],
          "description": "The template or attribute changes to merge into the host template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate the SSL certificates or not.\nThis parameter is ignored if PYTHONHTTPSVERIFY environment variable is used.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmm_mad_name": {
          "aliases": [],
          "description": "The name of the virtual machine manager mad name, this values are taken from the oned.conf with the tag name VM_MAD (name)",
          "default": "kvm",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "Time to wait for the desired state to be reached before timeout, in seconds.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyone"
      ],
      "short_description": "Manages OpenNebula Hosts"
    },
    "examples": "\n- name: Create a new host in OpenNebula\n  community.general.one_host:\n    name: host1\n    cluster_id: 1\n    api_url: http://127.0.0.1:2633/RPC2\n\n- name: Create a host and adjust its template\n  community.general.one_host:\n    name: host2\n    cluster_name: default\n    template:\n        LABELS:\n            - gold\n            - ssd\n        RESERVED_CPU: -100\n"
  },
  "community.general.one_image": {
    "doc": {
      "description": "Manages OpenNebula images",
      "has_action": false,
      "options": {
        "api_password": {
          "aliases": [],
          "description": "Password of the user to login into OpenNebula RPC server. If not set\nthen the value of the C(ONE_PASSWORD) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the OpenNebula RPC server.\nIt is recommended to use HTTPS so that the username/password are not\ntransferred over the network unencrypted.\nIf not set then the value of the C(ONE_URL) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "Name of the user to login into the OpenNebula RPC server. If not set\nthen the value of the C(ONE_USERNAME) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Whether the image should be enabled or disabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "A C(id) of the image you would like to manage.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A C(name) of the image you would like to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "A name that will be assigned to the existing or new image.\nIn the case of cloning, by default C(new_name) will take the name of the origin image with the prefix 'Copy of'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) - state that is used to manage the image\nC(absent) - delete the image\nC(cloned) - clone the image\nC(renamed) - rename the image to the C(new_name)",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "cloned",
            "renamed"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pyone"
      ],
      "short_description": "Manages OpenNebula images"
    },
    "examples": "\n- name: Fetch the IMAGE by id\n  community.general.one_image:\n    id: 45\n  register: result\n\n- name: Print the IMAGE properties\n  ansible.builtin.debug:\n    var: result\n\n- name: Rename existing IMAGE\n  community.general.one_image:\n    id: 34\n    state: renamed\n    new_name: bar-image\n\n- name: Disable the IMAGE by id\n  community.general.one_image:\n    id: 37\n    enabled: no\n\n- name: Enable the IMAGE by name\n  community.general.one_image:\n    name: bar-image\n    enabled: yes\n\n- name: Clone the IMAGE by name\n  community.general.one_image:\n    name: bar-image\n    state: cloned\n    new_name: bar-image-clone\n  register: result\n\n- name: Delete the IMAGE by id\n  community.general.one_image:\n    id: '{{ result.id }}'\n    state: absent\n"
  },
  "community.general.one_image_info": {
    "doc": {
      "description": "Gather information on OpenNebula images.\nThis module was called C(one_image_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "options": {
        "api_password": {
          "aliases": [],
          "description": "Password of the user to login into OpenNebula RPC server. If not set\nthen the value of the C(ONE_PASSWORD) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the OpenNebula RPC server.\nIt is recommended to use HTTPS so that the username/password are not\ntransferred over the network unencrypted.\nIf not set then the value of the C(ONE_URL) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "Name of the user to login into the OpenNebula RPC server. If not set\nthen the value of the C(ONE_USERNAME) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ids": {
          "aliases": [
            "id"
          ],
          "description": "A list of images ids whose facts you want to gather.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A C(name) of the image whose facts will be gathered.\nIf the C(name) begins with '~' the C(name) will be used as regex pattern\nwhich restricts the list of images (whose facts will be returned) whose names match specified regex.\nAlso, if the C(name) begins with '~*' case-insensitive matching will be performed.\nSee examples for more details.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyone"
      ],
      "short_description": "Gather information on OpenNebula images"
    },
    "examples": "\n- name: Gather facts about all images\n  community.general.one_image_info:\n  register: result\n\n- name: Print all images facts\n  ansible.builtin.debug:\n    msg: result\n\n- name: Gather facts about an image using ID\n  community.general.one_image_info:\n    ids:\n      - 123\n\n- name: Gather facts about an image using the name\n  community.general.one_image_info:\n    name: 'foo-image'\n  register: foo_image\n\n- name: Gather facts about all IMAGEs whose name matches regex 'app-image-.*'\n  community.general.one_image_info:\n    name: '~app-image-.*'\n  register: app_images\n\n- name: Gather facts about all IMAGEs whose name matches regex 'foo-image-.*' ignoring cases\n  community.general.one_image_info:\n    name: '~*foo-image-.*'\n  register: foo_images\n"
  },
  "community.general.one_service": {
    "doc": {
      "description": "Manage OpenNebula services",
      "has_action": false,
      "options": {
        "api_password": {
          "aliases": [],
          "description": "Password of the user to login into OpenNebula OneFlow API server. If not set then the value of the C(ONEFLOW_PASSWORD) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the OpenNebula OneFlow API server.\nIt is recommended to use HTTPS so that the username/password are not transferred over the network unencrypted.\nIf not set then the value of the ONEFLOW_URL environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "Name of the user to login into the OpenNebula OneFlow API server. If not set then the value of the C(ONEFLOW_USERNAME) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cardinality": {
          "aliases": [],
          "description": "Number of VMs for the specified role",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "custom_attrs": {
          "aliases": [],
          "description": "Dictionary of key/value custom attributes which will be used when instantiating a new service.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force the new cardinality even if it is outside the limits",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group_id": {
          "aliases": [],
          "description": "ID of the group which will be set as the group of the service",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Set permission mode of a service instance in octet format, e.g. C(600) to give owner C(use) and C(manage) and nothing to group and others.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner_id": {
          "aliases": [],
          "description": "ID of the user which will be set as the owner of the service",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "Name of the role whose cardinality should be changed",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_id": {
          "aliases": [],
          "description": "ID of a service instance that you would like to manage",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "service_name": {
          "aliases": [],
          "description": "Name of a service instance that you would like to manage",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) - instantiate a service from a template specified with C(template_id)/C(template_name).\nC(absent) - terminate an instance of a service specified with C(service_id)/C(service_name).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "template_id": {
          "aliases": [],
          "description": "ID of a service template to use to create a new instance of a service",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_name": {
          "aliases": [],
          "description": "Name of service template to use to create a new instance of a service",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unique": {
          "aliases": [],
          "description": "Setting C(unique=yes) will make sure that there is only one service instance running with a name set with C(service_name) when\ninstantiating a service from a template specified with C(template_id)/C(template_name). Check examples below.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the instance to reach RUNNING state after DEPLOYING or COOLDOWN state after SCALING",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "How long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Deploy and manage OpenNebula services"
    },
    "examples": "\n- name: Instantiate a new service\n  community.general.one_service:\n    template_id: 90\n  register: result\n\n- name: Print service properties\n  ansible.builtin.debug:\n    msg: result\n\n- name: Instantiate a new service with specified service_name, service group and mode\n  community.general.one_service:\n    template_name: 'app1_template'\n    service_name: 'app1'\n    group_id: 1\n    mode: '660'\n\n- name: Instantiate a new service with template_id and pass custom_attrs dict\n  community.general.one_service:\n    template_id: 90\n    custom_attrs:\n      public_network_id: 21\n      private_network_id: 26\n\n- name: Instantiate a new service 'foo' if the service doesn't already exist, otherwise do nothing\n  community.general.one_service:\n    template_id: 53\n    service_name: 'foo'\n    unique: yes\n\n- name: Delete a service by ID\n  community.general.one_service:\n    service_id: 153\n    state: absent\n\n- name: Get service info\n  community.general.one_service:\n    service_id: 153\n  register: service_info\n\n- name: Change service owner, group and mode\n  community.general.one_service:\n    service_name: 'app2'\n    owner_id: 34\n    group_id: 113\n    mode: '600'\n\n- name: Instantiate service and wait for it to become RUNNING\n  community.general.one_service:\n    template_id: 43\n    service_name: 'foo1'\n\n- name: Wait service to become RUNNING\n  community.general.one_service:\n    service_id: 112\n    wait: yes\n\n- name: Change role cardinality\n  community.general.one_service:\n    service_id: 153\n    role: bar\n    cardinality: 5\n\n- name: Change role cardinality and wait for it to be applied\n  community.general.one_service:\n    service_id: 112\n    role: foo\n    cardinality: 7\n    wait: yes\n"
  },
  "community.general.one_template": {
    "doc": {
      "description": "Manages OpenNebula templates.",
      "has_action": false,
      "notes": "Supports C(check_mode).  Note that check mode always returns C(changed=true) for existing templates, even if the template would not actually change.",
      "options": {
        "api_password": {
          "aliases": [
            "api_token"
          ],
          "description": "The password or token for XMLRPC authentication.\nIf not specified then the value of the ONE_PASSWORD environment variable, if any, is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "api_endpoint"
          ],
          "description": "The ENDPOINT URL of the XMLRPC server.\nIf not specified then the value of the ONE_URL environment variable, if any, is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "The name of the user for XMLRPC authentication.\nIf not specified then the value of the ONE_USERNAME environment variable, if any, is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "A I(id) of the template you would like to manage.  If not set then a\nnew template will be created with the given I(name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A I(name) of the template you would like to manage.  If a template with\nthe given name does not exist it will be created, otherwise it will be\nmanaged by this module.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) - state that is used to manage the template.\nC(absent) - delete the template.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "A string containing the template contents.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate the SSL certificates or not.\nThis parameter is ignored if PYTHONHTTPSVERIFY environment variable is used.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "Time to wait for the desired state to be reached before timeout, in seconds.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyone"
      ],
      "short_description": "Manages OpenNebula templates",
      "version_added": "2.4.0"
    },
    "examples": "\n- name: Fetch the TEMPLATE by id\n  community.general.one_template:\n    id: 6459\n  register: result\n\n- name: Print the TEMPLATE properties\n  ansible.builtin.debug:\n    var: result\n\n- name: Fetch the TEMPLATE by name\n  community.general.one_template:\n    name: tf-prd-users-workerredis-p6379a\n  register: result\n\n- name: Create a new or update an existing TEMPLATE\n  community.general.one_template:\n    name: generic-opensuse\n    template: |\n      CONTEXT = [\n        HOSTNAME = \"generic-opensuse\"\n      ]\n      CPU = \"1\"\n      CUSTOM_ATTRIBUTE = \"\"\n      DISK = [\n        CACHE = \"writeback\",\n        DEV_PREFIX = \"sd\",\n        DISCARD = \"unmap\",\n        IMAGE = \"opensuse-leap-15.2\",\n        IMAGE_UNAME = \"oneadmin\",\n        IO = \"threads\",\n        SIZE = \"\" ]\n      MEMORY = \"2048\"\n      NIC = [\n        MODEL = \"virtio\",\n        NETWORK = \"testnet\",\n        NETWORK_UNAME = \"oneadmin\" ]\n      OS = [\n        ARCH = \"x86_64\",\n        BOOT = \"disk0\" ]\n      SCHED_REQUIREMENTS = \"CLUSTER_ID=\\\"100\\\"\"\n      VCPU = \"2\"\n\n- name: Delete the TEMPLATE by id\n  community.general.one_template:\n    id: 6459\n    state: absent\n"
  },
  "community.general.one_vm": {
    "doc": {
      "description": "Manages OpenNebula instances",
      "has_action": false,
      "options": {
        "api_password": {
          "aliases": [],
          "description": "Password of the user to login into OpenNebula RPC server. If not set\nthen the value of the C(ONE_PASSWORD) environment variable is used.\nif both I(api_username) or I(api_password) are not set, then it will try\nauthenticate with ONE auth file. Default path is \"~/.one/one_auth\".\nSet environment variable C(ONE_AUTH) to override this path.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the OpenNebula RPC server.\nIt is recommended to use HTTPS so that the username/password are not\ntransferred over the network unencrypted.\nIf not set then the value of the C(ONE_URL) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_username": {
          "aliases": [],
          "description": "Name of the user to login into the OpenNebula RPC server. If not set\nthen the value of the C(ONE_USERNAME) environment variable is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [],
          "description": "A dictionary of key/value attributes to add to new instances, or for\nsetting C(state) of instances with these attributes.\nKeys are case insensitive and OpenNebula automatically converts them to upper case.\nBe aware C(NAME) is a special attribute which sets the name of the VM when it's deployed.\nC(#) character(s) can be appended to the C(NAME) and the module will automatically add\nindexes to the names of VMs.\nFor example':' C(NAME':' foo-###) would create VMs with names C(foo-000), C(foo-001),...\nWhen used with C(count_attributes) and C(exact_count) the module will\nmatch the base name without the index part.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "Number of instances to launch",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "count_attributes": {
          "aliases": [],
          "description": "A dictionary of key/value attributes that can only be used with\nC(exact_count) to determine how many nodes based on a specific\nattributes criteria should be deployed. This can be expressed in\nmultiple ways and is shown in the EXAMPLES section.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "count_labels": {
          "aliases": [],
          "description": "A list of labels that can only be used with C(exact_count) to determine\nhow many nodes based on a specific labels criteria should be deployed.\nThis can be expressed in multiple ways and is shown in the EXAMPLES\nsection.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "cpu": {
          "aliases": [],
          "description": "Percentage of CPU divided by 100 required for the new instance. Half a\nprocessor is written 0.5.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "datastore_id": {
          "aliases": [],
          "description": "Name of Datastore to use to create a new instace",
          "type": "int",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "datastore_name": {
          "aliases": [],
          "description": "Name of Datastore to use to create a new instace",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "disk_saveas": {
          "aliases": [],
          "description": "Creates an image from a VM disk.\nIt is a dictionary where you have to specify C(name) of the new image.\nOptionally you can specify C(disk_id) of the disk you want to save. By default C(disk_id) is 0.\nI(NOTE)':' This operation will only be performed on the first VM (if more than one VM ID is passed)\nand the VM has to be in the C(poweredoff) state.\nAlso this operation will fail if an image with specified C(name) already exists.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "disk_size": {
          "aliases": [],
          "description": "The size of the disk created for new instances (in MB, GB, TB,...).\nNOTE':' If The Template hats Multiple Disks the Order of the Sizes is\nmatched against the order specified in C(template_id)/C(template_name).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "exact_count": {
          "aliases": [],
          "description": "Indicates how many instances that match C(count_attributes) and\nC(count_labels) parameters should be deployed. Instances are either\ncreated or terminated based on this value.\nNOTE':' Instances with the least IDs will be terminated first.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "group_id": {
          "aliases": [],
          "description": "ID of the group which will be set as the group of the instance",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "hard": {
          "aliases": [],
          "description": "Reboot, power-off or terminate instances C(hard)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "instance_ids": {
          "aliases": [
            "ids"
          ],
          "description": "A list of instance ids used for states':' C(absent), C(running), C(rebooted), C(poweredoff)",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "A list of labels to associate with new instances, or for setting\nC(state) of instances with these labels.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "The size of the memory for new instances (in MB, GB, ...)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Set permission mode of the instance in octet format, e.g. C(600) to give owner C(use) and C(manage) and nothing to group and others.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "A list of dictionaries with network parameters. See examples for more details.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "owner_id": {
          "aliases": [],
          "description": "ID of the user which will be set as the owner of the instance",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "persistent": {
          "aliases": [],
          "description": "Create a private persistent copy of the template plus any image defined in DISK, and instantiate that copy.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) - create instances from a template specified with C(template_id)/C(template_name).\nC(running) - run instances\nC(poweredoff) - power-off instances\nC(rebooted) - reboot instances\nC(absent) - terminate instances",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "running",
            "rebooted",
            "poweredoff"
          ],
          "suboptions": {}
        },
        "template_id": {
          "aliases": [],
          "description": "ID of a VM template to use to create a new instance",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_name": {
          "aliases": [],
          "description": "Name of VM template to use to create a new instace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vcpu": {
          "aliases": [],
          "description": "Number of CPUs (cores) new VM will have.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vm_start_on_hold": {
          "aliases": [],
          "description": "Set to true to put vm on hold while creating",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the instance to reach its desired state before returning. Keep\nin mind if you are waiting for instance to be in running state it\ndoesn't mean that you will be able to SSH on that machine only that\nboot process have started on that instance, see 'wait_for' example for\ndetails.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "How long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyone"
      ],
      "short_description": "Creates or terminates OpenNebula instances"
    },
    "examples": "\n- name: Create a new instance\n  community.general.one_vm:\n    template_id: 90\n  register: result\n\n- name: Print VM properties\n  ansible.builtin.debug:\n    msg: result\n\n- name: Deploy a new VM on hold\n  community.general.one_vm:\n    template_name: 'app1_template'\n    vm_start_on_hold: 'True'\n\n- name: Deploy a new VM and set its name to 'foo'\n  community.general.one_vm:\n    template_name: 'app1_template'\n    attributes:\n      name: foo\n\n- name: Deploy a new VM and set its group_id and mode\n  community.general.one_vm:\n    template_id: 90\n    group_id: 16\n    mode: 660\n\n- name: Deploy a new VM  as persistent\n  community.general.one_vm:\n    template_id: 90\n    persistent: yes\n\n- name: Change VM's permissions to 640\n  community.general.one_vm:\n    instance_ids: 5\n    mode: 640\n\n- name: Deploy 2 new instances and set memory, vcpu, disk_size and 3 networks\n  community.general.one_vm:\n    template_id: 15\n    disk_size: 35.2 GB\n    memory: 4 GB\n    vcpu: 4\n    count: 2\n    networks:\n      - NETWORK_ID: 27\n      - NETWORK: \"default-network\"\n        NETWORK_UNAME: \"app-user\"\n        SECURITY_GROUPS: \"120,124\"\n      - NETWORK_ID: 27\n        SECURITY_GROUPS: \"10\"\n\n- name: Deploy a new instance which uses a Template with two Disks\n  community.general.one_vm:\n    template_id: 42\n    disk_size:\n      - 35.2 GB\n      - 50 GB\n    memory: 4 GB\n    vcpu: 4\n    count: 1\n    networks:\n      - NETWORK_ID: 27\n\n- name: \"Deploy an new instance with attribute 'bar: bar1' and set its name to 'foo'\"\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      name: foo\n      bar: bar1\n\n- name: \"Enforce that 2 instances with attributes 'foo1: app1' and 'foo2: app2' are deployed\"\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      foo1: app1\n      foo2: app2\n    exact_count: 2\n    count_attributes:\n      foo1: app1\n      foo2: app2\n\n- name: Enforce that 4 instances with an attribute 'bar' are deployed\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      name: app\n      bar: bar2\n    exact_count: 4\n    count_attributes:\n      bar:\n\n# Deploy 2 new instances with attribute 'foo: bar' and labels 'app1' and 'app2' and names in format 'fooapp-##'\n# Names will be: fooapp-00 and fooapp-01\n- name: Deploy 2 new instances\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      name: fooapp-##\n      foo: bar\n    labels:\n      - app1\n      - app2\n    count: 2\n\n# Deploy 2 new instances with attribute 'app: app1' and names in format 'fooapp-###'\n# Names will be: fooapp-002 and fooapp-003\n- name: Deploy 2 new instances\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      name: fooapp-###\n      app: app1\n    count: 2\n\n# Reboot all instances with name in format 'fooapp-#'\n# Instances 'fooapp-00', 'fooapp-01', 'fooapp-002' and 'fooapp-003' will be rebooted\n- name: Reboot all instances with names in a certain format\n  community.general.one_vm:\n    attributes:\n      name: fooapp-#\n    state: rebooted\n\n# Enforce that only 1 instance with name in format 'fooapp-#' is deployed\n# The task will delete oldest instances, so only the 'fooapp-003' will remain\n- name: Enforce that only 1 instance with name in a certain format is deployed\n  community.general.one_vm:\n    template_id: 53\n    exact_count: 1\n    count_attributes:\n      name: fooapp-#\n\n- name: Deploy an new instance with a network\n  community.general.one_vm:\n    template_id: 53\n    networks:\n      - NETWORK_ID: 27\n  register: vm\n\n- name: Wait for SSH to come up\n  ansible.builtin.wait_for_connection:\n  delegate_to: '{{ vm.instances[0].networks[0].ip }}'\n\n- name: Terminate VMs by ids\n  community.general.one_vm:\n    instance_ids:\n      - 153\n      - 160\n    state: absent\n\n- name: Reboot all VMs that have labels 'foo' and 'app1'\n  community.general.one_vm:\n    labels:\n      - foo\n      - app1\n    state: rebooted\n\n- name: \"Fetch all VMs that have name 'foo' and attribute 'app: bar'\"\n  community.general.one_vm:\n    attributes:\n      name: foo\n      app: bar\n  register: results\n\n- name: Deploy 2 new instances with labels 'foo1' and 'foo2'\n  community.general.one_vm:\n    template_name: app_template\n    labels:\n      - foo1\n      - foo2\n    count: 2\n\n- name: Enforce that only 1 instance with label 'foo1' will be running\n  community.general.one_vm:\n    template_name: app_template\n    labels:\n      - foo1\n    exact_count: 1\n    count_labels:\n      - foo1\n\n- name: Terminate all instances that have attribute foo\n  community.general.one_vm:\n    template_id: 53\n    exact_count: 0\n    count_attributes:\n      foo:\n\n- name: \"Power-off the VM and save VM's disk with id=0 to the image with name 'foo-image'\"\n  community.general.one_vm:\n    instance_ids: 351\n    state: poweredoff\n    disk_saveas:\n      name: foo-image\n\n- name: \"Save VM's disk with id=1 to the image with name 'bar-image'\"\n  community.general.one_vm:\n    instance_ids: 351\n    disk_saveas:\n      name: bar-image\n      disk_id: 1\n"
  },
  "community.general.oneandone_firewall_policy": {
    "doc": {
      "description": "Create, remove, reconfigure, update firewall policies. This module has a dependency on 1and1 >= 1.0",
      "has_action": false,
      "options": {
        "add_rules": {
          "aliases": [],
          "description": "A list of rules that will be added to an existing firewall policy. It is syntax is the same as the one used for rules parameter. Used in combination with update state.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "add_server_ips": {
          "aliases": [],
          "description": "A list of server identifiers (id or name) to be assigned to a firewall policy. Used in combination with update state.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "Custom API URL. Overrides the ONEANDONE_API_URL environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Authenticating API token provided by 1&1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Firewall policy description. maxLength=256",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "firewall_policy": {
          "aliases": [],
          "description": "The identifier (id or name) of the firewall policy used with update state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Firewall policy name used with present state. Used as identifier (id or name) when used with absent state. maxLength=128",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remove_rules": {
          "aliases": [],
          "description": "A list of rule ids that will be removed from an existing firewall policy. Used in combination with update state.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "remove_server_ips": {
          "aliases": [],
          "description": "A list of server IP ids to be unassigned from a firewall policy. Used in combination with update state.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "A list of rules that will be set for the firewall policy. Each rule must contain protocol parameter, in addition to three optional parameters (port_from, port_to, and source)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define a firewall policy state to create, remove, or update.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state 'running' before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_interval": {
          "aliases": [],
          "description": "Defines the number of seconds to wait when using the _wait_for methods",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "1and1",
        "python >= 2.6"
      ],
      "short_description": "Configure 1&1 firewall policy."
    },
    "examples": "\n- name: Create a firewall policy\n  community.general.oneandone_firewall_policy:\n    auth_token: oneandone_private_api_key\n    name: ansible-firewall-policy\n    description: Testing creation of firewall policies with ansible\n    rules:\n     -\n       protocol: TCP\n       port_from: 80\n       port_to: 80\n       source: 0.0.0.0\n    wait: true\n    wait_timeout: 500\n\n- name: Destroy a firewall policy\n  community.general.oneandone_firewall_policy:\n    auth_token: oneandone_private_api_key\n    state: absent\n    name: ansible-firewall-policy\n\n- name: Update a firewall policy\n  community.general.oneandone_firewall_policy:\n    auth_token: oneandone_private_api_key\n    state: update\n    firewall_policy: ansible-firewall-policy\n    name: ansible-firewall-policy-updated\n    description: Testing creation of firewall policies with ansible - updated\n\n- name: Add server to a firewall policy\n  community.general.oneandone_firewall_policy:\n    auth_token: oneandone_private_api_key\n    firewall_policy: ansible-firewall-policy-updated\n    add_server_ips:\n     - server_identifier (id or name)\n     - server_identifier #2 (id or name)\n    wait: true\n    wait_timeout: 500\n    state: update\n\n- name: Remove server from a firewall policy\n  community.general.oneandone_firewall_policy:\n    auth_token: oneandone_private_api_key\n    firewall_policy: ansible-firewall-policy-updated\n    remove_server_ips:\n     - B2504878540DBC5F7634EB00A07C1EBD (server's IP id)\n    wait: true\n    wait_timeout: 500\n    state: update\n\n- name: Add rules to a firewall policy\n  community.general.oneandone_firewall_policy:\n    auth_token: oneandone_private_api_key\n    firewall_policy: ansible-firewall-policy-updated\n    description: Adding rules to an existing firewall policy\n    add_rules:\n     -\n       protocol: TCP\n       port_from: 70\n       port_to: 70\n       source: 0.0.0.0\n     -\n       protocol: TCP\n       port_from: 60\n       port_to: 60\n       source: 0.0.0.0\n    wait: true\n    wait_timeout: 500\n    state: update\n\n- name: Remove rules from a firewall policy\n  community.general.oneandone_firewall_policy:\n    auth_token: oneandone_private_api_key\n    firewall_policy: ansible-firewall-policy-updated\n    remove_rules:\n     - rule_id #1\n     - rule_id #2\n     - ...\n    wait: true\n    wait_timeout: 500\n    state: update\n"
  },
  "community.general.oneandone_load_balancer": {
    "doc": {
      "description": "Create, remove, update load balancers. This module has a dependency on 1and1 >= 1.0",
      "has_action": false,
      "options": {
        "add_rules": {
          "aliases": [],
          "description": "A list of rules that will be added to an existing load balancer. It is syntax is the same as the one used for rules parameter. Used in combination with update state.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "add_server_ips": {
          "aliases": [],
          "description": "A list of server identifiers (id or name) to be assigned to a load balancer. Used in combination with update state.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "Custom API URL. Overrides the ONEANDONE_API_URL environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Authenticating API token provided by 1&1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "ID or country code of the datacenter where the load balancer will be created.\nIf not specified, it defaults to I(US).",
          "type": "str",
          "required": false,
          "choices": [
            "US",
            "ES",
            "DE",
            "GB"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the load balancer. maxLength=256",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "health_check_interval": {
          "aliases": [],
          "description": "Health check period in seconds. minimum=5, maximum=300, multipleOf=1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "health_check_parse": {
          "aliases": [],
          "description": "Regular expression to check. Required for HTTP health check. maxLength=64",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "health_check_path": {
          "aliases": [],
          "description": "Url to call for checking. Required for HTTP health check. maxLength=1000",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "health_check_test": {
          "aliases": [],
          "description": "Type of the health check. At the moment, HTTP is not allowed.",
          "type": "str",
          "required": false,
          "choices": [
            "NONE",
            "TCP",
            "HTTP",
            "ICMP"
          ],
          "suboptions": {}
        },
        "load_balancer": {
          "aliases": [],
          "description": "The identifier (id or name) of the load balancer used with update state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "method": {
          "aliases": [],
          "description": "Balancing procedure.",
          "type": "str",
          "required": false,
          "choices": [
            "ROUND_ROBIN",
            "LEAST_CONNECTIONS"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Load balancer name used with present state. Used as identifier (id or name) when used with absent state. maxLength=128",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "persistence": {
          "aliases": [],
          "description": "Persistence.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "persistence_time": {
          "aliases": [],
          "description": "Persistence time in seconds. Required if persistence is enabled. minimum=30, maximum=1200, multipleOf=1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remove_rules": {
          "aliases": [],
          "description": "A list of rule ids that will be removed from an existing load balancer. Used in combination with update state.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "remove_server_ips": {
          "aliases": [],
          "description": "A list of server IP ids to be unassigned from a load balancer. Used in combination with update state.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "A list of rule objects that will be set for the load balancer. Each rule must contain protocol, port_balancer, and port_server parameters, in addition to source parameter, which is optional.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define a load balancer state to create, remove, or update.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state 'running' before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_interval": {
          "aliases": [],
          "description": "Defines the number of seconds to wait when using the _wait_for methods",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "1and1",
        "python >= 2.6"
      ],
      "short_description": "Configure 1&1 load balancer."
    },
    "examples": "\n- name: Create a load balancer\n  community.general.oneandone_load_balancer:\n    auth_token: oneandone_private_api_key\n    name: ansible load balancer\n    description: Testing creation of load balancer with ansible\n    health_check_test: TCP\n    health_check_interval: 40\n    persistence: true\n    persistence_time: 1200\n    method: ROUND_ROBIN\n    datacenter: US\n    rules:\n     -\n       protocol: TCP\n       port_balancer: 80\n       port_server: 80\n       source: 0.0.0.0\n    wait: true\n    wait_timeout: 500\n\n- name: Destroy a load balancer\n  community.general.oneandone_load_balancer:\n    auth_token: oneandone_private_api_key\n    name: ansible load balancer\n    wait: true\n    wait_timeout: 500\n    state: absent\n\n- name: Update a load balancer\n  community.general.oneandone_load_balancer:\n    auth_token: oneandone_private_api_key\n    load_balancer: ansible load balancer\n    name: ansible load balancer updated\n    description: Testing the update of a load balancer with ansible\n    wait: true\n    wait_timeout: 500\n    state: update\n\n- name: Add server to a load balancer\n  community.general.oneandone_load_balancer:\n    auth_token: oneandone_private_api_key\n    load_balancer: ansible load balancer updated\n    description: Adding server to a load balancer with ansible\n    add_server_ips:\n     - server identifier (id or name)\n    wait: true\n    wait_timeout: 500\n    state: update\n\n- name: Remove server from a load balancer\n  community.general.oneandone_load_balancer:\n    auth_token: oneandone_private_api_key\n    load_balancer: ansible load balancer updated\n    description: Removing server from a load balancer with ansible\n    remove_server_ips:\n     - B2504878540DBC5F7634EB00A07C1EBD (server's ip id)\n    wait: true\n    wait_timeout: 500\n    state: update\n\n- name: Add rules to a load balancer\n  community.general.oneandone_load_balancer:\n    auth_token: oneandone_private_api_key\n    load_balancer: ansible load balancer updated\n    description: Adding rules to a load balancer with ansible\n    add_rules:\n     -\n       protocol: TCP\n       port_balancer: 70\n       port_server: 70\n       source: 0.0.0.0\n     -\n       protocol: TCP\n       port_balancer: 60\n       port_server: 60\n       source: 0.0.0.0\n    wait: true\n    wait_timeout: 500\n    state: update\n\n- name: Remove rules from a load balancer\n  community.general.oneandone_load_balancer:\n    auth_token: oneandone_private_api_key\n    load_balancer: ansible load balancer updated\n    description: Adding rules to a load balancer with ansible\n    remove_rules:\n     - rule_id #1\n     - rule_id #2\n     - ...\n    wait: true\n    wait_timeout: 500\n    state: update\n"
  },
  "community.general.oneandone_monitoring_policy": {
    "doc": {
      "description": "Create, remove, update monitoring policies (and add/remove ports, processes, and servers). This module has a dependency on 1and1 >= 1.0",
      "has_action": false,
      "options": {
        "add_ports": {
          "aliases": [],
          "description": "Ports to add to the monitoring policy.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "add_processes": {
          "aliases": [],
          "description": "Processes to add to the monitoring policy.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "add_servers": {
          "aliases": [],
          "description": "Servers to add to the monitoring policy.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "agent": {
          "aliases": [],
          "description": "Set true for using agent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "Custom API URL. Overrides the ONEANDONE_API_URL environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Authenticating API token provided by 1&1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Monitoring policy description. maxLength=256",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "User's email. maxLength=128",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "monitoring_policy": {
          "aliases": [],
          "description": "The identifier (id or name) of the monitoring policy used with update state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Monitoring policy name used with present state. Used as identifier (id or name) when used with absent state. maxLength=128",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ports": {
          "aliases": [],
          "description": "Array of ports that will be monitoring.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "alert_if": {
              "aliases": [],
              "description": "Case of alert.",
              "required": true,
              "choices": [
                "RESPONDING",
                "NOT_RESPONDING"
              ],
              "suboptions": {}
            },
            "email_notification": {
              "aliases": [],
              "description": "Set true for sending e-mail notifications.",
              "required": true,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port number. minimum=1, maximum=65535",
              "required": true,
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Internet protocol.",
              "required": true,
              "choices": [
                "TCP",
                "UDP"
              ],
              "suboptions": {}
            }
          }
        },
        "processes": {
          "aliases": [],
          "description": "Array of processes that will be monitoring.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "alert_if": {
              "aliases": [],
              "description": "Case of alert.",
              "required": true,
              "choices": [
                "RUNNING",
                "NOT_RUNNING"
              ],
              "suboptions": {}
            },
            "process": {
              "aliases": [],
              "description": "Name of the process. maxLength=50",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "remove_ports": {
          "aliases": [],
          "description": "Ports to remove from the monitoring policy.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "remove_processes": {
          "aliases": [],
          "description": "Processes to remove from the monitoring policy.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "remove_servers": {
          "aliases": [],
          "description": "Servers to remove from the monitoring policy.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define a monitoring policy's state to create, remove, update.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        },
        "thresholds": {
          "aliases": [],
          "description": "Monitoring policy thresholds. Each of the suboptions have warning and critical, which both have alert and value suboptions. Warning is used to set limits for warning alerts, critical is used to set critical alerts. alert enables alert, and value is used to advise when the value is exceeded.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "cpu": {
              "aliases": [],
              "description": "Consumption limits of CPU.",
              "required": true,
              "suboptions": {}
            },
            "disk": {
              "aliases": [],
              "description": "Consumption limits of hard disk.",
              "required": true,
              "suboptions": {}
            },
            "internal_ping": {
              "aliases": [],
              "description": "Response limits of internal ping.",
              "required": true,
              "suboptions": {}
            },
            "ram": {
              "aliases": [],
              "description": "Consumption limits of RAM.",
              "required": true,
              "suboptions": {}
            },
            "transfer": {
              "aliases": [],
              "description": "Consumption limits for transfer.",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "update_ports": {
          "aliases": [],
          "description": "Ports to be updated on the monitoring policy.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "update_processes": {
          "aliases": [],
          "description": "Processes to be updated on the monitoring policy.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state 'running' before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_interval": {
          "aliases": [],
          "description": "Defines the number of seconds to wait when using the _wait_for methods",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "1and1",
        "python >= 2.6"
      ],
      "short_description": "Configure 1&1 monitoring policy."
    },
    "examples": "\n- name: Create a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    name: ansible monitoring policy\n    description: Testing creation of a monitoring policy with ansible\n    email: your@emailaddress.com\n    agent: true\n    thresholds:\n     -\n       cpu:\n         warning:\n           value: 80\n           alert: false\n         critical:\n           value: 92\n           alert: false\n     -\n       ram:\n         warning:\n           value: 80\n           alert: false\n         critical:\n           value: 90\n           alert: false\n     -\n       disk:\n         warning:\n           value: 80\n           alert: false\n         critical:\n           value: 90\n           alert: false\n     -\n       internal_ping:\n         warning:\n           value: 50\n           alert: false\n         critical:\n           value: 100\n           alert: false\n     -\n       transfer:\n         warning:\n           value: 1000\n           alert: false\n         critical:\n           value: 2000\n           alert: false\n    ports:\n     -\n       protocol: TCP\n       port: 22\n       alert_if: RESPONDING\n       email_notification: false\n    processes:\n     -\n       process: test\n       alert_if: NOT_RUNNING\n       email_notification: false\n    wait: true\n\n- name: Destroy a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    state: absent\n    name: ansible monitoring policy\n\n- name: Update a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy\n    name: ansible monitoring policy updated\n    description: Testing creation of a monitoring policy with ansible updated\n    email: another@emailaddress.com\n    thresholds:\n     -\n       cpu:\n         warning:\n           value: 70\n           alert: false\n         critical:\n           value: 90\n           alert: false\n     -\n       ram:\n         warning:\n           value: 70\n           alert: false\n         critical:\n           value: 80\n           alert: false\n     -\n       disk:\n         warning:\n           value: 70\n           alert: false\n         critical:\n           value: 80\n           alert: false\n     -\n       internal_ping:\n         warning:\n           value: 60\n           alert: false\n         critical:\n           value: 90\n           alert: false\n     -\n       transfer:\n         warning:\n           value: 900\n           alert: false\n         critical:\n           value: 1900\n           alert: false\n    wait: true\n    state: update\n\n- name: Add a port to a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy updated\n    add_ports:\n     -\n       protocol: TCP\n       port: 33\n       alert_if: RESPONDING\n       email_notification: false\n    wait: true\n    state: update\n\n- name: Update existing ports of a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy updated\n    update_ports:\n     -\n       id: existing_port_id\n       protocol: TCP\n       port: 34\n       alert_if: RESPONDING\n       email_notification: false\n     -\n       id: existing_port_id\n       protocol: TCP\n       port: 23\n       alert_if: RESPONDING\n       email_notification: false\n    wait: true\n    state: update\n\n- name: Remove a port from a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy updated\n    remove_ports:\n     - port_id\n    state: update\n\n- name: Add a process to a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy updated\n    add_processes:\n     -\n       process: test_2\n       alert_if: NOT_RUNNING\n       email_notification: false\n    wait: true\n    state: update\n\n- name: Update existing processes of a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy updated\n    update_processes:\n     -\n       id: process_id\n       process: test_1\n       alert_if: NOT_RUNNING\n       email_notification: false\n     -\n       id: process_id\n       process: test_3\n       alert_if: NOT_RUNNING\n       email_notification: false\n    wait: true\n    state: update\n\n- name: Remove a process from a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy updated\n    remove_processes:\n     - process_id\n    wait: true\n    state: update\n\n- name: Add server to a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy updated\n    add_servers:\n     - server id or name\n    wait: true\n    state: update\n\n- name: Remove server from a monitoring policy\n  community.general.oneandone_monitoring_policy:\n    auth_token: oneandone_private_api_key\n    monitoring_policy: ansible monitoring policy updated\n    remove_servers:\n     - server01\n    wait: true\n    state: update\n"
  },
  "community.general.oneandone_private_network": {
    "doc": {
      "description": "Create, remove, reconfigure, update a private network. This module has a dependency on 1and1 >= 1.0",
      "has_action": false,
      "options": {
        "add_members": {
          "aliases": [],
          "description": "List of server identifiers (name or id) to be added to the private network.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "Custom API URL. Overrides the ONEANDONE_API_URL environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Authenticating API token provided by 1&1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The identifier of the datacenter where the private network will be created",
          "type": "str",
          "required": false,
          "choices": [
            "US",
            "ES",
            "DE",
            "GB"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Set a description for the network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Private network name used with present state. Used as identifier (id or name) when used with absent state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_address": {
          "aliases": [],
          "description": "Set a private network space, i.e. 192.168.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "private_network": {
          "aliases": [],
          "description": "The identifier (id or name) of the network used with update state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remove_members": {
          "aliases": [],
          "description": "List of server identifiers (name or id) to be removed from the private network.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define a network's state to create, remove, or update.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        },
        "subnet_mask": {
          "aliases": [],
          "description": "Set the netmask for the private network, i.e. 255.255.255.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state 'running' before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_interval": {
          "aliases": [],
          "description": "Defines the number of seconds to wait when using the _wait_for methods",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "1and1",
        "python >= 2.6"
      ],
      "short_description": "Configure 1&1 private networking."
    },
    "examples": "\n- name: Create a private network\n  community.general.oneandone_private_network:\n    auth_token: oneandone_private_api_key\n    name: backup_network\n    description: Testing creation of a private network with ansible\n    network_address: 70.35.193.100\n    subnet_mask: 255.0.0.0\n    datacenter: US\n\n- name: Destroy a private network\n  community.general.oneandone_private_network:\n    auth_token: oneandone_private_api_key\n    state: absent\n    name: backup_network\n\n- name: Modify the private network\n  community.general.oneandone_private_network:\n    auth_token: oneandone_private_api_key\n    state: update\n    private_network: backup_network\n    network_address: 192.168.2.0\n    subnet_mask: 255.255.255.0\n\n- name: Add members to the private network\n  community.general.oneandone_private_network:\n    auth_token: oneandone_private_api_key\n    state: update\n    private_network: backup_network\n    add_members:\n     - server identifier (id or name)\n\n- name: Remove members from the private network\n  community.general.oneandone_private_network:\n    auth_token: oneandone_private_api_key\n    state: update\n    private_network: backup_network\n    remove_members:\n     - server identifier (id or name)\n"
  },
  "community.general.oneandone_public_ip": {
    "doc": {
      "description": "Create, update, and remove public IPs. This module has a dependency on 1and1 >= 1.0",
      "has_action": false,
      "options": {
        "api_url": {
          "aliases": [],
          "description": "Custom API URL. Overrides the ONEANDONE_API_URL environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Authenticating API token provided by 1&1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "ID of the datacenter where the IP will be created (only for unassigned IPs).",
          "default": "US",
          "type": "str",
          "required": false,
          "choices": [
            "US",
            "ES",
            "DE",
            "GB"
          ],
          "suboptions": {}
        },
        "public_ip_id": {
          "aliases": [],
          "description": "The ID of the public IP used with update and delete states.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reverse_dns": {
          "aliases": [],
          "description": "Reverse DNS name. maxLength=256",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define a public ip state to create, remove, or update.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "update"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of IP. Currently, only IPV4 is available.",
          "default": "IPV4",
          "type": "str",
          "required": false,
          "choices": [
            "IPV4",
            "IPV6"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state 'running' before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_interval": {
          "aliases": [],
          "description": "Defines the number of seconds to wait when using the _wait_for methods",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "1and1",
        "python >= 2.6"
      ],
      "short_description": "Configure 1&1 public IPs."
    },
    "examples": "\n- name: Create a public IP\n  community.general.oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    reverse_dns: example.com\n    datacenter: US\n    type: IPV4\n\n- name: Update a public IP\n  community.general.oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    public_ip_id: public ip id\n    reverse_dns: secondexample.com\n    state: update\n\n- name: Delete a public IP\n  community.general.oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    public_ip_id: public ip id\n    state: absent\n"
  },
  "community.general.oneandone_server": {
    "doc": {
      "description": "Create, destroy, update, start, stop, and reboot a 1&1 Host server. When the server is created it can optionally wait for it to be 'running' before returning.",
      "has_action": false,
      "options": {
        "api_url": {
          "aliases": [],
          "description": "Custom API URL. Overrides the ONEANDONE_API_URL environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "appliance": {
          "aliases": [],
          "description": "The operating system name or ID for the server. It is required only for 'present' state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Authenticating API token provided by 1&1. Overrides the ONEANDONE_AUTH_TOKEN environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_increment": {
          "aliases": [],
          "description": "When creating multiple servers at once, whether to differentiate hostnames by appending a count after them or substituting the count where there is a %02d or %03d in the hostname string.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cores_per_processor": {
          "aliases": [],
          "description": "The number of cores per processor. It must be provided with vcore, ram, and hdds parameters.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "The number of servers to create.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter location.",
          "default": "US",
          "type": "str",
          "required": false,
          "choices": [
            "US",
            "ES",
            "DE",
            "GB"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "firewall_policy": {
          "aliases": [],
          "description": "The firewall policy name or ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fixed_instance_size": {
          "aliases": [],
          "description": "The instance size name or ID of the server. It is required only for 'present' state, and it is mutually exclusive with vcore, cores_per_processor, ram, and hdds parameters.\nThe available choices are: C(S), C(M), C(L), C(XL), C(XXL), C(3XL), C(4XL), C(5XL)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hdds": {
          "aliases": [],
          "description": "A list of hard disks with nested \"size\" and \"is_main\" properties. It must be provided with vcore, cores_per_processor, and ram parameters.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or ID of the server. Only used when state is 'present'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "load_balancer": {
          "aliases": [],
          "description": "The load balancer name or ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "monitoring_policy": {
          "aliases": [],
          "description": "The monitoring policy name or ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "private_network": {
          "aliases": [],
          "description": "The private network name or ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "The amount of RAM memory. It must be provided with with vcore, cores_per_processor, and hdds parameters.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Server identifier (ID or hostname). It is required for all states except 'running' and 'present'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_type": {
          "aliases": [],
          "description": "The type of server to be built.",
          "default": "cloud",
          "type": "str",
          "required": false,
          "choices": [
            "cloud",
            "baremetal",
            "k8s_node"
          ],
          "suboptions": {}
        },
        "ssh_key": {
          "aliases": [],
          "description": "User's public SSH key (contents, not path).",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define a server's state to create, remove, start or stop it.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "running",
            "stopped"
          ],
          "suboptions": {}
        },
        "vcore": {
          "aliases": [],
          "description": "The total number of processors. It must be provided with cores_per_processor, ram, and hdds parameters.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the server to be in state 'running' before returning. Also used for delete operation (set to 'false' if you don't want to wait for each individual server to be deleted before moving on with other tasks.)",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_interval": {
          "aliases": [],
          "description": "Defines the number of seconds to wait when using the wait_for methods",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "1and1",
        "python >= 2.6"
      ],
      "short_description": "Create, destroy, start, stop, and reboot a 1&1 Host server."
    },
    "examples": "\n- name: Create three servers and enumerate their names\n  community.general.oneandone_server:\n    auth_token: oneandone_private_api_key\n    hostname: node%02d\n    fixed_instance_size: XL\n    datacenter: US\n    appliance: C5A349786169F140BCBC335675014C08\n    auto_increment: true\n    count: 3\n\n- name: Create three servers, passing in an ssh_key\n  community.general.oneandone_server:\n    auth_token: oneandone_private_api_key\n    hostname: node%02d\n    vcore: 2\n    cores_per_processor: 4\n    ram: 8.0\n    hdds:\n      - size: 50\n        is_main: false\n    datacenter: ES\n    appliance: C5A349786169F140BCBC335675014C08\n    count: 3\n    wait: yes\n    wait_timeout: 600\n    wait_interval: 10\n    ssh_key: SSH_PUBLIC_KEY\n\n- name: Removing server\n  community.general.oneandone_server:\n    auth_token: oneandone_private_api_key\n    state: absent\n    server: 'node01'\n\n- name: Starting server\n  community.general.oneandone_server:\n    auth_token: oneandone_private_api_key\n    state: running\n    server: 'node01'\n\n- name: Stopping server\n  community.general.oneandone_server:\n    auth_token: oneandone_private_api_key\n    state: stopped\n    server: 'node01'\n"
  },
  "community.general.onepassword_info": {
    "doc": {
      "description": "M(community.general.onepassword_info) wraps the C(op) command line utility to fetch data about one or more 1Password items.\nA fatal error occurs if any of the items being searched for can not be found.\nRecommend using with the C(no_log) option to avoid logging the values of the secrets being retrieved.\nThis module was called C(onepassword_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.onepassword_info) module no longer returns C(ansible_facts)! You must now use the C(register) option to use the facts in other tasks.",
      "has_action": false,
      "notes": "Tested with C(op) version 0.5.5\nBased on the C(onepassword) lookup plugin by Scott Buchanan <sbuchanan@ri.pn>.",
      "options": {
        "auto_login": {
          "aliases": [],
          "description": "A dictionary containing authentication details. If this is set, M(community.general.onepassword_info) will attempt to sign in to 1Password automatically.\nWithout this option, you must have already logged in via the 1Password CLI before running Ansible.\nIt is B(highly) recommended to store 1Password credentials in an Ansible Vault. Ensure that the key used to encrypt the Ansible Vault is equal to or greater in strength than the 1Password master password.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "master_password": {
              "aliases": [],
              "description": "The master password for your subdomain.\nThis is always required when specifying C(auto_login).",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "secret_key": {
              "aliases": [],
              "description": "The secret key for your subdomain.\nOnly required for initial sign in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "subdomain": {
              "aliases": [],
              "description": "1Password subdomain name (<subdomain>.1password.com).\nIf this is not specified, the most recent subdomain will be used.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "1Password username.\nOnly required for initial sign in.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cli_path": {
          "aliases": [],
          "description": "Used to specify the exact path to the C(op) command line interface",
          "default": "op",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "search_terms": {
          "aliases": [],
          "description": "A list of one or more search terms.\nEach search term can either be a simple string or it can be a dictionary for more control.\nWhen passing a simple string, I(field) is assumed to be C(password).\nWhen passing a dictionary, the following fields are available.",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {
            "field": {
              "aliases": [],
              "description": "The name of the field to search for within this item (optional, defaults to \"password\" (or \"document\" if the item has an attachment).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the 1Password item to search for (required).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "section": {
              "aliases": [],
              "description": "The name of a section within this item containing the specified field (optional, will search all sections if not specified).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vault": {
              "aliases": [],
              "description": "The name of the particular 1Password vault to search, useful if your 1Password user has access to multiple vaults (optional).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "C(op) 1Password command line utility. See U(https://support.1password.com/command-line/)"
      ],
      "short_description": "Gather items from 1Password"
    },
    "examples": "\n# Gather secrets from 1Password, assuming there is a 'password' field:\n- name: Get a password\n  community.general.onepassword_info:\n    search_terms: My 1Password item\n  delegate_to: localhost\n  register: my_1password_item\n  no_log: true         # Don't want to log the secrets to the console!\n\n# Gather secrets from 1Password, with more advanced search terms:\n- name: Get a password\n  community.general.onepassword_info:\n    search_terms:\n      - name:    My 1Password item\n        field:   Custom field name       # optional, defaults to 'password'\n        section: Custom section name     # optional, defaults to 'None'\n        vault:   Name of the vault       # optional, only necessary if there is more than 1 Vault available\n  delegate_to: localhost\n  register: my_1password_item\n  no_log: True                           # Don't want to log the secrets to the console!\n\n# Gather secrets combining simple and advanced search terms to retrieve two items, one of which we fetch two\n# fields. In the first 'password' is fetched, as a field name is not specified (default behaviour) and in the\n# second, 'Custom field name' is fetched, as that is specified explicitly.\n- name: Get a password\n  community.general.onepassword_info:\n    search_terms:\n      - My 1Password item                # 'name' is optional when passing a simple string...\n      - name: My Other 1Password item    # ...but it can also be set for consistency\n      - name:    My 1Password item\n        field:   Custom field name       # optional, defaults to 'password'\n        section: Custom section name     # optional, defaults to 'None'\n        vault:   Name of the vault       # optional, only necessary if there is more than 1 Vault available\n      - name: A 1Password item with document attachment\n  delegate_to: localhost\n  register: my_1password_item\n  no_log: true                           # Don't want to log the secrets to the console!\n\n- name: Debug a password (for example)\n  ansible.builtin.debug:\n    msg: \"{{ my_1password_item['onepassword']['My 1Password item'] }}\"\n"
  },
  "community.general.oneview_datacenter_info": {
    "doc": {
      "description": "Retrieve information about the OneView Data Centers.\nThis module was called C(oneview_datacenter_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.oneview_datacenter_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Data Center name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "Retrieve additional information. Options available: 'visualContent'.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "List of params to delimit, filter and sort the list of resources.\nparams allowed: - C(start): The first item to return, using 0-based indexing. - C(count): The number of resources to return. - C(filter): A general filter/query string to narrow the list of items returned. - C(sort): The sort order of the returned data set.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 2.0.1",
        "python >= 2.7.9"
      ],
      "short_description": "Retrieve information about the OneView Data Centers"
    },
    "examples": "\n- name: Gather information about all Data Centers\n  community.general.oneview_datacenter_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Data Centers\n  ansible.builtin.debug:\n    msg: \"{{ result.datacenters }}\"\n\n- name: Gather paginated, filtered and sorted information about Data Centers\n  community.general.oneview_datacenter_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n    params:\n      start: 0\n      count: 3\n      sort: 'name:descending'\n      filter: 'state=Unmanaged'\n  register: result\n\n- name: Print fetched information about paginated, filtered and sorted list of Data Centers\n  ansible.builtin.debug:\n    msg: \"{{ result.datacenters }}\"\n\n- name: Gather information about a Data Center by name\n  community.general.oneview_datacenter_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n    name: \"My Data Center\"\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Data Center found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.datacenters }}\"\n\n- name: Gather information about the Data Center Visual Content\n  community.general.oneview_datacenter_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n    name: \"My Data Center\"\n    options:\n      - visualContent\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Data Center found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.datacenters }}\"\n\n- name: Print fetched information about Data Center Visual Content\n  ansible.builtin.debug:\n    msg: \"{{ result.datacenter_visual_content }}\"\n"
  },
  "community.general.oneview_enclosure_info": {
    "doc": {
      "description": "Retrieve information about one or more of the Enclosures from OneView.\nThis module was called C(oneview_enclosure_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.oneview_enclosure_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Enclosure name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "List with options to gather additional information about an Enclosure and related resources. Options allowed: C(script), C(environmentalConfiguration), and C(utilization). For the option C(utilization), you can provide specific parameters.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "List of params to delimit, filter and sort the list of resources.\nparams allowed: - C(start): The first item to return, using 0-based indexing. - C(count): The number of resources to return. - C(filter): A general filter/query string to narrow the list of items returned. - C(sort): The sort order of the returned data set.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 2.0.1",
        "python >= 2.7.9"
      ],
      "short_description": "Retrieve information about one or more Enclosures"
    },
    "examples": "\n- name: Gather information about all Enclosures\n  community.general.oneview_enclosure_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Enclosures\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosures }}\"\n\n- name: Gather paginated, filtered and sorted information about Enclosures\n  community.general.oneview_enclosure_info:\n    params:\n      start: 0\n      count: 3\n      sort: name:descending\n      filter: status=OK\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about paginated, filtered ans sorted list of Enclosures\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosures }}\"\n\n- name: Gather information about an Enclosure by name\n  community.general.oneview_enclosure_info:\n    name: Enclosure-Name\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Enclosure found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosures }}\"\n\n- name: Gather information about an Enclosure by name with options\n  community.general.oneview_enclosure_info:\n    name: Test-Enclosure\n    options:\n      - script                       # optional\n      - environmentalConfiguration   # optional\n      - utilization                  # optional\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Enclosure found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosures }}\"\n\n- name: Print fetched information about Enclosure Script\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosure_script }}\"\n\n- name: Print fetched information about Enclosure Environmental Configuration\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosure_environmental_configuration }}\"\n\n- name: Print fetched information about Enclosure Utilization\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosure_utilization }}\"\n\n- name: \"Gather information about an Enclosure with temperature data at a resolution of one sample per day, between two\n         specified dates\"\n  community.general.oneview_enclosure_info:\n    name: Test-Enclosure\n    options:\n      - utilization:                   # optional\n          fields: AmbientTemperature\n          filter:\n            - startDate=2016-07-01T14:29:42.000Z\n            - endDate=2017-07-01T03:29:42.000Z\n          view: day\n          refresh: false\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Enclosure found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosures }}\"\n\n- name: Print fetched information about Enclosure Utilization\n  ansible.builtin.debug:\n    msg: \"{{ result.enclosure_utilization }}\"\n"
  },
  "community.general.oneview_ethernet_network": {
    "doc": {
      "description": "Provides an interface to manage Ethernet Network resources. Can create, update, or delete.",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "List with Ethernet Network properties.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired state for the Ethernet Network resource. - C(present) will ensure data properties are compliant with OneView. - C(absent) will remove the resource from OneView, if it exists. - C(default_bandwidth_reset) will reset the network connection template to the default.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "default_bandwidth_reset"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_etag": {
          "aliases": [],
          "description": "When the ETag Validation is enabled, the request will be conditionally processed only if the current ETag for the resource matches the ETag provided in the data.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 3.1.0",
        "python >= 2.7.9"
      ],
      "short_description": "Manage OneView Ethernet Network resources"
    },
    "examples": "\n- name: Ensure that the Ethernet Network is present using the default configuration\n  community.general.oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      vlanId: '201'\n  delegate_to: localhost\n\n- name: Update the Ethernet Network changing bandwidth and purpose\n  community.general.oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      purpose: Management\n      bandwidth:\n          maximumBandwidth: 3000\n          typicalBandwidth: 2000\n  delegate_to: localhost\n\n- name: Ensure that the Ethernet Network is present with name 'Renamed Ethernet Network'\n  community.general.oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      newName: 'Renamed Ethernet Network'\n  delegate_to: localhost\n\n- name: Ensure that the Ethernet Network is absent\n  community.general.oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: absent\n    data:\n      name: 'New Ethernet Network'\n  delegate_to: localhost\n\n- name: Create Ethernet networks in bulk\n  community.general.oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      vlanIdRange: '1-10,15,17'\n      purpose: General\n      namePrefix: TestNetwork\n      smartLink: false\n      privateNetwork: false\n      bandwidth:\n        maximumBandwidth: 10000\n        typicalBandwidth: 2000\n  delegate_to: localhost\n\n- name: Reset to the default network connection template\n  community.general.oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: default_bandwidth_reset\n    data:\n      name: 'Test Ethernet Network'\n  delegate_to: localhost\n"
  },
  "community.general.oneview_ethernet_network_info": {
    "doc": {
      "description": "Retrieve the information about one or more of the Ethernet Networks from OneView.\nThis module was called C(oneview_ethernet_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.oneview_ethernet_network_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Ethernet Network name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "List with options to gather additional information about an Ethernet Network and related resources. Options allowed: C(associatedProfiles) and C(associatedUplinkGroups).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "List of params to delimit, filter and sort the list of resources.\nparams allowed: - C(start): The first item to return, using 0-based indexing. - C(count): The number of resources to return. - C(filter): A general filter/query string to narrow the list of items returned. - C(sort): The sort order of the returned data set.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 2.0.1",
        "python >= 2.7.9"
      ],
      "short_description": "Retrieve the information about one or more of the OneView Ethernet Networks"
    },
    "examples": "\n- name: Gather information about all Ethernet Networks\n  community.general.oneview_ethernet_network_info:\n    config: /etc/oneview/oneview_config.json\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Ethernet Networks\n  ansible.builtin.debug:\n    msg: \"{{ result.ethernet_networks }}\"\n\n- name: Gather paginated and filtered information about Ethernet Networks\n  community.general.oneview_ethernet_network_info:\n    config: /etc/oneview/oneview_config.json\n    params:\n      start: 1\n      count: 3\n      sort: 'name:descending'\n      filter: 'purpose=General'\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about paginated and filtered list of Ethernet Networks\n  ansible.builtin.debug:\n    msg: \"{{ result.ethernet_networks }}\"\n\n- name: Gather information about an Ethernet Network by name\n  community.general.oneview_ethernet_network_info:\n    config: /etc/oneview/oneview_config.json\n    name: Ethernet network name\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Ethernet Network found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.ethernet_networks }}\"\n\n- name: Gather information about an Ethernet Network by name with options\n  community.general.oneview_ethernet_network_info:\n    config: /etc/oneview/oneview_config.json\n    name: eth1\n    options:\n      - associatedProfiles\n      - associatedUplinkGroups\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Ethernet Network Associated Profiles\n  ansible.builtin.debug:\n    msg: \"{{ result.enet_associated_profiles }}\"\n\n- name: Print fetched information about Ethernet Network Associated Uplink Groups\n  ansible.builtin.debug:\n    msg: \"{{ result.enet_associated_uplink_groups }}\"\n"
  },
  "community.general.oneview_fc_network": {
    "doc": {
      "description": "Provides an interface to manage Fibre Channel Network resources. Can create, update, and delete.",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "List with the Fibre Channel Network properties.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired state for the Fibre Channel Network resource. C(present) will ensure data properties are compliant with OneView. C(absent) will remove the resource from OneView, if it exists.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_etag": {
          "aliases": [],
          "description": "When the ETag Validation is enabled, the request will be conditionally processed only if the current ETag for the resource matches the ETag provided in the data.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 4.0.0",
        "python >= 2.7.9"
      ],
      "short_description": "Manage OneView Fibre Channel Network resources."
    },
    "examples": "\n- name: Ensure that the Fibre Channel Network is present using the default configuration\n  community.general.oneview_fc_network:\n    config: \"{{ config_file_path }}\"\n    state: present\n    data:\n      name: 'New FC Network'\n\n- name: Ensure that the Fibre Channel Network is present with fabricType 'DirectAttach'\n  community.general.oneview_fc_network:\n    config: \"{{ config_file_path }}\"\n    state: present\n    data:\n      name: 'New FC Network'\n      fabricType: 'DirectAttach'\n\n- name: Ensure that the Fibre Channel Network is present and is inserted in the desired scopes\n  community.general.oneview_fc_network:\n    config: \"{{ config_file_path }}\"\n    state: present\n    data:\n      name: 'New FC Network'\n      scopeUris:\n        - '/rest/scopes/00SC123456'\n        - '/rest/scopes/01SC123456'\n\n- name: Ensure that the Fibre Channel Network is absent\n  community.general.oneview_fc_network:\n    config: \"{{ config_file_path }}\"\n    state: absent\n    data:\n      name: 'New FC Network'\n"
  },
  "community.general.oneview_fc_network_info": {
    "doc": {
      "description": "Retrieve the information about one or more of the Fibre Channel Networks from OneView.\nThis module was called C(oneview_fc_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.oneview_fc_network_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Fibre Channel Network name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "List of params to delimit, filter and sort the list of resources.\nparams allowed: - C(start): The first item to return, using 0-based indexing. - C(count): The number of resources to return. - C(filter): A general filter/query string to narrow the list of items returned. - C(sort): The sort order of the returned data set.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 2.0.1",
        "python >= 2.7.9"
      ],
      "short_description": "Retrieve the information about one or more of the OneView Fibre Channel Networks"
    },
    "examples": "\n- name: Gather information about all Fibre Channel Networks\n  community.general.oneview_fc_network_info:\n    config: /etc/oneview/oneview_config.json\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Fibre Channel Networks\n  ansible.builtin.debug:\n    msg: \"{{ result.fc_networks }}\"\n\n- name: Gather paginated, filtered and sorted information about Fibre Channel Networks\n  community.general.oneview_fc_network_info:\n    config: /etc/oneview/oneview_config.json\n    params:\n      start: 1\n      count: 3\n      sort: 'name:descending'\n      filter: 'fabricType=FabricAttach'\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about paginated, filtered and sorted list of Fibre Channel Networks\n  ansible.builtin.debug:\n    msg: \"{{ result.fc_networks }}\"\n\n- name: Gather information about a Fibre Channel Network by name\n  community.general.oneview_fc_network_info:\n    config: /etc/oneview/oneview_config.json\n    name: network name\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Fibre Channel Network found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.fc_networks }}\"\n"
  },
  "community.general.oneview_fcoe_network": {
    "doc": {
      "description": "Provides an interface to manage FCoE Network resources. Can create, update, or delete.",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "List with FCoE Network properties.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired state for the FCoE Network resource. C(present) will ensure data properties are compliant with OneView. C(absent) will remove the resource from OneView, if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_etag": {
          "aliases": [],
          "description": "When the ETag Validation is enabled, the request will be conditionally processed only if the current ETag for the resource matches the ETag provided in the data.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 4.0.0",
        "python >= 2.7.9"
      ],
      "short_description": "Manage OneView FCoE Network resources"
    },
    "examples": "\n- name: Ensure that FCoE Network is present using the default configuration\n  community.general.oneview_fcoe_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: Test FCoE Network\n      vlanId: 201\n  delegate_to: localhost\n\n- name: Update the FCOE network scopes\n  community.general.oneview_fcoe_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: New FCoE Network\n      scopeUris:\n        - '/rest/scopes/00SC123456'\n        - '/rest/scopes/01SC123456'\n  delegate_to: localhost\n\n- name: Ensure that FCoE Network is absent\n  community.general.oneview_fcoe_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: absent\n    data:\n      name: New FCoE Network\n  delegate_to: localhost\n"
  },
  "community.general.oneview_fcoe_network_info": {
    "doc": {
      "description": "Retrieve the information about one or more of the FCoE Networks from OneView.\nThis module was called C(oneview_fcoe_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.oneview_fcoe_network_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "FCoE Network name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "List of params to delimit, filter and sort the list of resources.\nparams allowed: - C(start): The first item to return, using 0-based indexing. - C(count): The number of resources to return. - C(filter): A general filter/query string to narrow the list of items returned. - C(sort): The sort order of the returned data set.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 2.0.1",
        "python >= 2.7.9"
      ],
      "short_description": "Retrieve the information about one or more of the OneView FCoE Networks"
    },
    "examples": "\n- name: Gather information about all FCoE Networks\n  community.general.oneview_fcoe_network_info:\n    config: /etc/oneview/oneview_config.json\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about FCoE Networks\n  ansible.builtin.debug:\n    msg: \"{{ result.fcoe_networks }}\"\n\n- name: Gather paginated, filtered and sorted information about FCoE Networks\n  community.general.oneview_fcoe_network_info:\n    config: /etc/oneview/oneview_config.json\n    params:\n      start: 0\n      count: 3\n      sort: 'name:descending'\n      filter: 'vlanId=2'\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about paginated, filtered and sorted list of FCoE Networks\n  ansible.builtin.debug:\n    msg: \"{{ result.fcoe_networks }}\"\n\n- name: Gather information about a FCoE Network by name\n  community.general.oneview_fcoe_network_info:\n    config: /etc/oneview/oneview_config.json\n    name: Test FCoE Network Information\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about FCoE Network found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.fcoe_networks }}\"\n"
  },
  "community.general.oneview_logical_interconnect_group": {
    "doc": {
      "description": "Provides an interface to manage Logical Interconnect Group resources. Can create, update, or delete.",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "List with the Logical Interconnect Group properties.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired state for the Logical Interconnect Group resource. C(absent) will remove the resource from OneView, if it exists. C(present) will ensure data properties are compliant with OneView.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_etag": {
          "aliases": [],
          "description": "When the ETag Validation is enabled, the request will be conditionally processed only if the current ETag for the resource matches the ETag provided in the data.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 4.0.0",
        "python >= 2.7.9"
      ],
      "short_description": "Manage OneView Logical Interconnect Group resources"
    },
    "examples": "\n- name: Ensure that the Logical Interconnect Group is present\n  community.general.oneview_logical_interconnect_group:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: Test Logical Interconnect Group\n      uplinkSets: []\n      enclosureType: C7000\n      interconnectMapTemplate:\n        interconnectMapEntryTemplates:\n          - logicalDownlinkUri: ~\n            logicalLocation:\n                locationEntries:\n                    - relativeValue: 1\n                      type: Bay\n                    - relativeValue: 1\n                      type: Enclosure\n            permittedInterconnectTypeName: HP VC Flex-10/10D Module\n            # Alternatively you can inform permittedInterconnectTypeUri\n  delegate_to: localhost\n\n- name: Ensure that the Logical Interconnect Group has the specified scopes\n  community.general.oneview_logical_interconnect_group:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: Test Logical Interconnect Group\n      scopeUris:\n        - /rest/scopes/00SC123456\n        - /rest/scopes/01SC123456\n  delegate_to: localhost\n\n- name: Ensure that the Logical Interconnect Group is present with name 'Test'\n  community.general.oneview_logical_interconnect_group:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: New Logical Interconnect Group\n      newName: Test\n  delegate_to: localhost\n\n- name: Ensure that the Logical Interconnect Group is absent\n  community.general.oneview_logical_interconnect_group:\n    config: /etc/oneview/oneview_config.json\n    state: absent\n    data:\n      name: New Logical Interconnect Group\n  delegate_to: localhost\n"
  },
  "community.general.oneview_logical_interconnect_group_info": {
    "doc": {
      "description": "Retrieve information about one or more of the Logical Interconnect Groups from OneView\nThis module was called C(oneview_logical_interconnect_group_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.oneview_logical_interconnect_group_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Logical Interconnect Group name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "List of params to delimit, filter and sort the list of resources.\nparams allowed: - C(start): The first item to return, using 0-based indexing. - C(count): The number of resources to return. - C(filter): A general filter/query string to narrow the list of items returned. - C(sort): The sort order of the returned data set.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 2.0.1",
        "python >= 2.7.9"
      ],
      "short_description": "Retrieve information about one or more of the OneView Logical Interconnect Groups"
    },
    "examples": "\n- name: Gather information about all Logical Interconnect Groups\n  community.general.oneview_logical_interconnect_group_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Logical Interconnect Groups\n  ansible.builtin.debug:\n    msg: \"{{ result.logical_interconnect_groups }}\"\n\n- name: Gather paginated, filtered and sorted information about Logical Interconnect Groups\n  community.general.oneview_logical_interconnect_group_info:\n    params:\n      start: 0\n      count: 3\n      sort: name:descending\n      filter: name=LIGName\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about paginated, filtered and sorted list of Logical Interconnect Groups\n  ansible.builtin.debug:\n    msg: \"{{ result.logical_interconnect_groups }}\"\n\n- name: Gather information about a Logical Interconnect Group by name\n  community.general.oneview_logical_interconnect_group_info:\n    name: logical interconnect group name\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Logical Interconnect Group found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.logical_interconnect_groups }}\"\n"
  },
  "community.general.oneview_network_set": {
    "doc": {
      "description": "Provides an interface to manage Network Set resources. Can create, update, or delete.",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "List with the Network Set properties.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired state for the Network Set resource. - C(present) will ensure data properties are compliant with OneView. - C(absent) will remove the resource from OneView, if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_etag": {
          "aliases": [],
          "description": "When the ETag Validation is enabled, the request will be conditionally processed only if the current ETag for the resource matches the ETag provided in the data.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 4.0.0",
        "python >= 2.7.9"
      ],
      "short_description": "Manage HPE OneView Network Set resources"
    },
    "examples": "\n- name: Create a Network Set\n  community.general.oneview_network_set:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: OneViewSDK Test Network Set\n      networkUris:\n        - Test Ethernet Network_1                                       # can be a name\n        - /rest/ethernet-networks/e4360c9d-051d-4931-b2aa-7de846450dd8  # or a URI\n  delegate_to: localhost\n\n- name: Update the Network Set name to 'OneViewSDK Test Network Set - Renamed' and change the associated networks\n  community.general.oneview_network_set:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: OneViewSDK Test Network Set\n      newName: OneViewSDK Test Network Set - Renamed\n      networkUris:\n        - Test Ethernet Network_1\n  delegate_to: localhost\n\n- name: Delete the Network Set\n  community.general.oneview_network_set:\n    config: /etc/oneview/oneview_config.json\n    state: absent\n    data:\n        name: OneViewSDK Test Network Set - Renamed\n  delegate_to: localhost\n\n- name: Update the Network set with two scopes\n  community.general.oneview_network_set:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: OneViewSDK Test Network Set\n      scopeUris:\n        - /rest/scopes/01SC123456\n        - /rest/scopes/02SC123456\n  delegate_to: localhost\n"
  },
  "community.general.oneview_network_set_info": {
    "doc": {
      "description": "Retrieve information about the Network Sets from OneView.\nThis module was called C(oneview_network_set_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.oneview_network_set_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Network Set name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "List with options to gather information about Network Set. Option allowed: C(withoutEthernet). The option C(withoutEthernet) retrieves the list of network_sets excluding Ethernet networks.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "List of params to delimit, filter and sort the list of resources.\nparams allowed: - C(start): The first item to return, using 0-based indexing. - C(count): The number of resources to return. - C(filter): A general filter/query string to narrow the list of items returned. - C(sort): The sort order of the returned data set.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 2.0.1",
        "python >= 2.7.9"
      ],
      "short_description": "Retrieve information about the OneView Network Sets"
    },
    "examples": "\n- name: Gather information about all Network Sets\n  community.general.oneview_network_set_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Network Sets\n  ansible.builtin.debug:\n    msg: \"{{ result.network_sets }}\"\n\n- name: Gather paginated, filtered and sorted information about Network Sets\n  community.general.oneview_network_set_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n    params:\n      start: 0\n      count: 3\n      sort: 'name:descending'\n      filter: name='netset001'\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about paginated, filtered and sorted list of Network Sets\n  ansible.builtin.debug:\n    msg: \"{{ result.network_sets }}\"\n\n- name: Gather information about all Network Sets, excluding Ethernet networks\n  community.general.oneview_network_set_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n    options:\n        - withoutEthernet\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Network Sets, excluding Ethernet networks\n  ansible.builtin.debug:\n    msg: \"{{ result.network_sets }}\"\n\n- name: Gather information about a Network Set by name\n  community.general.oneview_network_set_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n    name: Name of the Network Set\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Network Set found by name\n  ansible.builtin.debug:\n    msg: \"{{ result.network_sets }}\"\n\n- name: Gather information about a Network Set by name, excluding Ethernet networks\n  community.general.oneview_network_set_info:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n    name: Name of the Network Set\n    options:\n        - withoutEthernet\n  no_log: true\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about Network Set found by name, excluding Ethernet networks\n  ansible.builtin.debug:\n    msg: \"{{ result.network_sets }}\"\n"
  },
  "community.general.oneview_san_manager": {
    "doc": {
      "description": "Provides an interface to manage SAN Manager resources. Can create, update, or delete.",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "List with SAN Manager properties.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired state for the Uplink Set resource. - C(present) ensures data properties are compliant with OneView. - C(absent) removes the resource from OneView, if it exists. - C(connection_information_set) updates the connection information for the SAN Manager. This operation is non-idempotent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "connection_information_set"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_etag": {
          "aliases": [],
          "description": "When the ETag Validation is enabled, the request will be conditionally processed only if the current ETag for the resource matches the ETag provided in the data.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 3.1.1",
        "python >= 2.7.9"
      ],
      "short_description": "Manage OneView SAN Manager resources"
    },
    "examples": "\n- name: Creates a Device Manager for the Brocade SAN provider with the given hostname and credentials\n  community.general.oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      providerDisplayName: Brocade Network Advisor\n      connectionInfo:\n        - name: Host\n          value: 172.18.15.1\n        - name: Port\n          value: 5989\n        - name: Username\n          value: username\n        - name: Password\n          value: password\n        - name: UseSsl\n          value: true\n  delegate_to: localhost\n\n- name: Ensure a Device Manager for the Cisco SAN Provider is present\n  community.general.oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: 172.18.20.1\n      providerDisplayName: Cisco\n      connectionInfo:\n        - name: Host\n          value: 172.18.20.1\n        - name: SnmpPort\n          value: 161\n        - name: SnmpUserName\n          value: admin\n        - name: SnmpAuthLevel\n          value: authnopriv\n        - name: SnmpAuthProtocol\n          value: sha\n        - name: SnmpAuthString\n          value: password\n  delegate_to: localhost\n\n- name: Sets the SAN Manager connection information\n  community.general.oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: connection_information_set\n    data:\n      connectionInfo:\n        - name: Host\n          value: '172.18.15.1'\n        - name: Port\n          value: '5989'\n        - name: Username\n          value: 'username'\n        - name: Password\n          value: 'password'\n        - name: UseSsl\n          value: true\n  delegate_to: localhost\n\n- name: Refreshes the SAN Manager\n  community.general.oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: 172.18.15.1\n      refreshState: RefreshPending\n  delegate_to: localhost\n\n- name: Delete the SAN Manager recently created\n  community.general.oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: absent\n    data:\n      name: '172.18.15.1'\n  delegate_to: localhost\n"
  },
  "community.general.oneview_san_manager_info": {
    "doc": {
      "description": "Retrieve information about one or more of the SAN Managers from OneView\nThis module was called C(oneview_san_manager_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.oneview_san_manager_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "A sample configuration file for the config parameter can be found at: U(https://github.com/HewlettPackard/oneview-ansible/blob/master/examples/oneview_config-rename.json)\nCheck how to use environment variables for configuration at: U(https://github.com/HewlettPackard/oneview-ansible#environment-variables)\nAdditional Playbooks for the HPE OneView Ansible modules can be found at: U(https://github.com/HewlettPackard/oneview-ansible/tree/master/examples)\nThe OneView API version used will directly affect returned and expected fields in resources. Information on setting the desired API version and can be found at: U(https://github.com/HewlettPackard/oneview-ansible#setting-your-oneview-version)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "OneView API Version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "Path to a .json configuration file containing the OneView client configuration. The configuration file is optional and when used should be present in the host running the ansible commands. If the file path is not provided, the configuration will be loaded from environment variables. For links to example configuration files or how to use the environment variables verify the notes section.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "IP address or hostname for the appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_streamer_hostname": {
          "aliases": [],
          "description": "IP address or hostname for the HPE Image Streamer REST API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "params": {
          "aliases": [],
          "description": "List of params to delimit, filter and sort the list of resources.\nparams allowed: - C(start): The first item to return, using 0-based indexing. - C(count): The number of resources to return. - C(query): A general query string to narrow the list of resources returned. - C(sort): The sort order of the returned data set.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_display_name": {
          "aliases": [],
          "description": "Provider Display Name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for API authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpOneView >= 2.0.1",
        "python >= 2.7.9"
      ],
      "short_description": "Retrieve information about one or more of the OneView SAN Managers"
    },
    "examples": "\n- name: Gather information about all SAN Managers\n  community.general.oneview_san_manager_info:\n    config: /etc/oneview/oneview_config.json\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about SAN Managers\n  ansible.builtin.debug:\n    msg: \"{{ result.san_managers }}\"\n\n- name: Gather paginated, filtered and sorted information about SAN Managers\n  community.general.oneview_san_manager_info:\n    config: /etc/oneview/oneview_config.json\n    params:\n      start: 0\n      count: 3\n      sort: name:ascending\n      query: isInternal eq false\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about paginated, filtered and sorted list of SAN Managers\n  ansible.builtin.debug:\n    msg: \"{{ result.san_managers }}\"\n\n- name: Gather information about a SAN Manager by provider display name\n  community.general.oneview_san_manager_info:\n    config: /etc/oneview/oneview_config.json\n    provider_display_name: Brocade Network Advisor\n  delegate_to: localhost\n  register: result\n\n- name: Print fetched information about SAN Manager found by provider display name\n  ansible.builtin.debug:\n    msg: \"{{ result.san_managers }}\"\n"
  },
  "community.general.online_server_info": {
    "doc": {
      "description": "Gather information about the servers.\nU(https://www.online.net/en/dedicated-server)",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://console.online.net/en/api/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(ONLINE_TOKEN), C(ONLINE_API_KEY), C(ONLINE_OAUTH_TOKEN), C(ONLINE_API_TOKEN)\nIf one wants to use a different C(api_url) one can also set the C(ONLINE_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Online API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Online OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Online API URL",
          "default": "https://api.online.net",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Online API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about Online servers."
    },
    "examples": "\n- name: Gather Online server information\n  community.general.online_server_info:\n    api_token: '0d1627e8-bbf0-44c5-a46f-5c4d3aef033f'\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.online_server_info }}\"\n"
  },
  "community.general.online_user_info": {
    "doc": {
      "description": "Gather information about the user.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://console.online.net/en/api/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(ONLINE_TOKEN), C(ONLINE_API_KEY), C(ONLINE_OAUTH_TOKEN), C(ONLINE_API_TOKEN)\nIf one wants to use a different C(api_url) one can also set the C(ONLINE_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Online API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Online OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Online API URL",
          "default": "https://api.online.net",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Online API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about Online user."
    },
    "examples": "\n- name: Gather Online user info\n  community.general.online_user_info:\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.online_user_info }}\"\n"
  },
  "community.general.open_iscsi": {
    "doc": {
      "description": "Discover targets on given portal, (dis)connect targets, mark targets to manually or auto start, return device nodes of connected targets.",
      "has_action": false,
      "options": {
        "auto_node_startup": {
          "aliases": [
            "automatic"
          ],
          "description": "Whether the target node should be automatically connected at startup.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_portal_startup": {
          "aliases": [],
          "description": "Whether the target node portal should be automatically connected at startup.",
          "type": "bool",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "discover": {
          "aliases": [],
          "description": "Whether the list of target nodes on the portal should be (re)discovered and added to the persistent iSCSI database.\nKeep in mind that C(iscsiadm) discovery resets configuration, like C(node.startup) to manual, hence combined with C(auto_node_startup=yes) will always return a changed state.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login": {
          "aliases": [
            "state"
          ],
          "description": "Whether the target node should be connected.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "node_auth": {
          "aliases": [],
          "description": "The value for C(node.session.auth.authmethod).",
          "default": "CHAP",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "node_pass": {
          "aliases": [],
          "description": "The value for C(node.session.auth.password).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "node_pass_in": {
          "aliases": [],
          "description": "The value for C(node.session.auth.password_in).",
          "type": "str",
          "required": false,
          "version_added": "3.8.0",
          "suboptions": {}
        },
        "node_user": {
          "aliases": [],
          "description": "The value for C(node.session.auth.username).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "node_user_in": {
          "aliases": [],
          "description": "The value for C(node.session.auth.username_in).",
          "type": "str",
          "required": false,
          "version_added": "3.8.0",
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which the iSCSI target process listens.",
          "default": "3260",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portal": {
          "aliases": [
            "ip"
          ],
          "description": "The domain name or IP address of the iSCSI target.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rescan": {
          "aliases": [],
          "description": "Rescan an established session for discovering new targets.\nWhen I(target) is omitted, will rescan all sessions.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "4.1.0",
          "suboptions": {}
        },
        "show_nodes": {
          "aliases": [],
          "description": "Whether the list of nodes in the persistent iSCSI database should be returned by the module.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "target": {
          "aliases": [
            "name",
            "targetname"
          ],
          "description": "The iSCSI target name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "open_iscsi library and tools (iscsiadm)"
      ],
      "short_description": "Manage iSCSI targets with Open-iSCSI"
    },
    "examples": "\n- name: Perform a discovery on sun.com and show available target nodes\n  community.general.open_iscsi:\n    show_nodes: yes\n    discover: yes\n    portal: sun.com\n\n- name: Perform a discovery on 10.1.2.3 and show available target nodes\n  community.general.open_iscsi:\n    show_nodes: yes\n    discover: yes\n    ip: 10.1.2.3\n\n# NOTE: Only works if exactly one target is exported to the initiator\n- name: Discover targets on portal and login to the one available\n  community.general.open_iscsi:\n    portal: '{{ iscsi_target }}'\n    login: yes\n    discover: yes\n\n- name: Connect to the named target, after updating the local persistent database (cache)\n  community.general.open_iscsi:\n    login: yes\n    target: iqn.1986-03.com.sun:02:f8c1f9e0-c3ec-ec84-c9c9-8bfb0cd5de3d\n\n- name: Disconnect from the cached named target\n  community.general.open_iscsi:\n    login: no\n    target: iqn.1986-03.com.sun:02:f8c1f9e0-c3ec-ec84-c9c9-8bfb0cd5de3d\n\n- name: Override and disable automatic portal login on specific portal\n  community.general.open_iscsi:\n    login: false\n    portal: 10.1.1.250\n    auto_portal_startup: false\n    target: iqn.1986-03.com.sun:02:f8c1f9e0-c3ec-ec84-c9c9-8bfb0cd5de3d\n\n- name: Rescan one or all established sessions to discover new targets (omit target for all sessions)\n  community.general.open_iscsi:\n    rescan: true\n    target: iqn.1986-03.com.sun:02:f8c1f9e0-c3ec-ec84-c9c9-8bfb0cd5de3d\n"
  },
  "community.general.openbsd_pkg": {
    "doc": {
      "description": "Manage packages on OpenBSD using the pkg tools.",
      "has_action": false,
      "notes": "When used with a `loop:` each package will be processed individually, it is much more efficient to pass the list directly to the `name` option.",
      "options": {
        "build": {
          "aliases": [],
          "description": "Build the package from source instead of downloading and installing a binary. Requires that the port source tree is already installed. Automatically builds and installs the 'sqlports' package, if it is not already installed.\nMutually exclusive with I(snapshot).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "clean": {
          "aliases": [],
          "description": "When updating or removing packages, delete the extra configuration file(s) in the old packages which are annotated with @extra in the packaging-list.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A name or a list of names of the packages.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "ports_dir": {
          "aliases": [],
          "description": "When used in combination with the C(build) option, allows overriding the default ports source directory.",
          "default": "/usr/ports",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "quick": {
          "aliases": [],
          "description": "Replace or delete packages quickly; do not bother with checksums before removing normal files.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "snapshot": {
          "aliases": [],
          "description": "Force C(%c) and C(%m) to expand to C(snapshots), even on a release kernel.\nMutually exclusive with I(build).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) will make sure the package is installed. C(latest) will make sure the latest version of the package is installed. C(absent) will make sure the specified package is not installed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "latest",
            "present",
            "installed",
            "removed"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.5"
      ],
      "short_description": "Manage packages on OpenBSD"
    },
    "examples": "\n- name: Make sure nmap is installed\n  community.general.openbsd_pkg:\n    name: nmap\n    state: present\n\n- name: Make sure nmap is the latest version\n  community.general.openbsd_pkg:\n    name: nmap\n    state: latest\n\n- name: Make sure nmap is not installed\n  community.general.openbsd_pkg:\n    name: nmap\n    state: absent\n\n- name: Make sure nmap is installed, build it from source if it is not\n  community.general.openbsd_pkg:\n    name: nmap\n    state: present\n    build: yes\n\n- name: Specify a pkg flavour with '--'\n  community.general.openbsd_pkg:\n    name: vim--no_x11\n    state: present\n\n- name: Specify the default flavour to avoid ambiguity errors\n  community.general.openbsd_pkg:\n    name: vim--\n    state: present\n\n- name: Specify a package branch (requires at least OpenBSD 6.0)\n  community.general.openbsd_pkg:\n    name: python%3.5\n    state: present\n\n- name: Update all packages on the system\n  community.general.openbsd_pkg:\n    name: '*'\n    state: latest\n\n- name: Purge a package and it's configuration files\n  community.general.openbsd_pkg:\n    name: mpd\n    clean: yes\n    state: absent\n\n- name: Quickly remove a package without checking checksums\n  community.general.openbsd_pkg:\n    name: qt5\n    quick: yes\n    state: absent\n"
  },
  "community.general.opendj_backendprop": {
    "doc": {
      "description": "This module will update settings for OpenDJ with the command set-backend-prop.\nIt will check first via de get-backend-prop if configuration needs to be applied.",
      "has_action": false,
      "options": {
        "backend": {
          "aliases": [],
          "description": "The name of the backend on which the property needs to be updated.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname of the OpenDJ server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The configuration setting to update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "opendj_bindir": {
          "aliases": [],
          "description": "The path to the bin directory of OpenDJ.",
          "default": "/opt/opendj/bin",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password for the cn=Directory Manager user.\nEither password or passwordfile is needed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "passwordfile": {
          "aliases": [],
          "description": "Location to the password file which holds the password for the cn=Directory Manager user.\nEither password or passwordfile is needed.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The Admin port on which the OpenDJ instance is available.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If configuration needs to be added/updated",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username to connect to.",
          "default": "cn=Directory Manager",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value for the configuration item.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Will update the backend configuration of OpenDJ via the dsconfig set-backend-prop command."
    },
    "examples": "\n  - name: Add or update OpenDJ backend properties\n    action: opendj_backendprop\n            hostname=localhost\n            port=4444\n            username=\"cn=Directory Manager\"\n            password=password\n            backend=userRoot\n            name=index-entry-limit\n            value=5000\n"
  },
  "community.general.openwrt_init": {
    "doc": {
      "description": "Controls OpenWrt services on remote hosts.",
      "has_action": false,
      "notes": "One option other than name is required.",
      "options": {
        "enabled": {
          "aliases": [],
          "description": "Whether the service should start on boot. B(At least one of state and enabled are required.)",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "service"
          ],
          "description": "Name of the service.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "If the service does not respond to the 'running' command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a 'running' result.  If the string is found, the service will be assumed to be running.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(started)/C(stopped) are idempotent actions that will not run commands unless necessary. C(restarted) will always bounce the service. C(reloaded) will always reload.",
          "type": "str",
          "required": false,
          "choices": [
            "started",
            "stopped",
            "restarted",
            "reloaded"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "An OpenWrt system (with python)"
      ],
      "short_description": "Manage services on OpenWrt."
    },
    "examples": "\n- name: Start service httpd, if not running\n  community.general.openwrt_init:\n    state: started\n    name: httpd\n\n- name: Stop service cron, if running\n  community.general.openwrt_init:\n    name: cron\n    state: stopped\n\n- name: Reload service httpd, in all cases\n  community.general.openwrt_init:\n    name: httpd\n    state: reloaded\n\n- name: Enable service httpd\n  community.general.openwrt_init:\n    name: httpd\n    enabled: yes\n"
  },
  "community.general.opkg": {
    "doc": {
      "description": "Manages OpenWrt packages",
      "has_action": false,
      "options": {
        "force": {
          "aliases": [],
          "description": "The C(opkg --force) parameter used.",
          "type": "str",
          "required": false,
          "choices": [
            "depends",
            "maintainer",
            "reinstall",
            "overwrite",
            "downgrade",
            "space",
            "postinstall",
            "remove",
            "checksum",
            "removal-of-dependent-packages"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "Name of package(s) to install/remove.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "installed",
            "removed"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [
            "update-cache"
          ],
          "description": "Update the package DB first.\nAlias C(update-cache) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "opkg",
        "python"
      ],
      "short_description": "Package manager for OpenWrt"
    },
    "examples": "\n- name: Install foo\n  community.general.opkg:\n    name: foo\n    state: present\n\n- name: Update cache and install foo\n  community.general.opkg:\n    name: foo\n    state: present\n    update_cache: yes\n\n- name: Remove foo\n  community.general.opkg:\n    name: foo\n    state: absent\n\n- name: Remove foo and bar\n  community.general.opkg:\n    name:\n      - foo\n      - bar\n    state: absent\n\n- name: Install foo using overwrite option forcibly\n  community.general.opkg:\n    name: foo\n    state: present\n    force: overwrite\n"
  },
  "community.general.osx_defaults": {
    "doc": {
      "description": "osx_defaults allows users to read, write, and delete macOS user defaults from Ansible scripts.\nmacOS applications and other programs use the defaults system to record user preferences and other information that must be maintained when the applications are not running (such as default font for new documents, or the position of an Info panel).",
      "has_action": false,
      "notes": "Apple Mac caches defaults. You may need to logout and login to apply the changes.",
      "options": {
        "array_add": {
          "aliases": [],
          "description": "Add new elements to the array for a key which has an array as its value.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The domain is a domain name of the form C(com.companyname.appname).",
          "default": "NSGlobalDomain",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The host on which the preference should apply.\nThe special value C(currentHost) corresponds to the C(-currentHost) switch of the defaults commandline tool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "The key of the user preference.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path in which to search for C(defaults).",
          "default": "/usr/bin:/usr/local/bin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the user defaults.\nIf set to C(list) will query the given parameter specified by C(key). Returns 'null' is nothing found or mis-spelled.\nC(list) added in version 2.8.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "list",
            "present"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of value to write.",
          "default": "string",
          "type": "str",
          "required": false,
          "choices": [
            "array",
            "bool",
            "boolean",
            "date",
            "float",
            "int",
            "integer",
            "string"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value to write.\nOnly required when C(state=present).",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage macOS user defaults"
    },
    "examples": "\n# TODO: Describe what happens in each example\n\n- community.general.osx_defaults:\n    domain: com.apple.Safari\n    key: IncludeInternalDebugMenu\n    type: bool\n    value: true\n    state: present\n\n- community.general.osx_defaults:\n    domain: NSGlobalDomain\n    key: AppleMeasurementUnits\n    type: string\n    value: Centimeters\n    state: present\n\n- community.general.osx_defaults:\n    domain: /Library/Preferences/com.apple.SoftwareUpdate\n    key: AutomaticCheckEnabled\n    type: int\n    value: 1\n  become: yes\n\n- community.general.osx_defaults:\n    domain: com.apple.screensaver\n    host: currentHost\n    key: showClock\n    type: int\n    value: 1\n\n- community.general.osx_defaults:\n    key: AppleMeasurementUnits\n    type: string\n    value: Centimeters\n\n- community.general.osx_defaults:\n    key: AppleLanguages\n    type: array\n    value:\n      - en\n      - nl\n\n- community.general.osx_defaults:\n    domain: com.geekchimp.macable\n    key: ExampleKeyToRemove\n    state: absent\n"
  },
  "community.general.ovh_ip_failover": {
    "doc": {
      "description": "Manage OVH (French European hosting provider) IP Failover Address. For now, this module can only be used to move an ip failover (or failover block) between services",
      "has_action": false,
      "notes": "Uses the python OVH Api U(https://github.com/ovh/python-ovh). You have to create an application (a key and secret) with a consummer key as described into U(https://docs.ovh.com/gb/en/customer/first-steps-with-ovh-api/)",
      "options": {
        "application_key": {
          "aliases": [],
          "description": "The applicationKey to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "application_secret": {
          "aliases": [],
          "description": "The application secret to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "consumer_key": {
          "aliases": [],
          "description": "The consumer key to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "endpoint": {
          "aliases": [],
          "description": "The endpoint to use ( for instance ovh-eu)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The IP address to manage (can be a single IP like 1.1.1.1 or a block like 1.1.1.1/28 )",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "The name of the OVH service this IP address should be routed",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The timeout in seconds used to wait for a task to be completed. Default is 120 seconds.",
          "default": "120",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_completion": {
          "aliases": [],
          "description": "If true, the module will wait for the IP address to be moved. If false, exit without waiting. The taskId will be returned in module output",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_task_completion": {
          "aliases": [],
          "description": "If not 0, the module will wait for this task id to be completed. Use wait_task_completion if you want to wait for completion of a previously executed task with wait_completion=false. You can execute this module repeatedly on a list of failover IPs using wait_completion=false (see examples)",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ovh >=  0.4.8"
      ],
      "short_description": "Manage OVH IP failover address"
    },
    "examples": "\n# Route an IP address 1.1.1.1 to the service ns666.ovh.net\n- community.general.ovh_ip_failover:\n    name: 1.1.1.1\n    service: ns666.ovh.net\n    endpoint: ovh-eu\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n- community.general.ovh_ip_failover:\n    name: 1.1.1.1\n    service: ns666.ovh.net\n    endpoint: ovh-eu\n    wait_completion: false\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n  register: moved\n- community.general.ovh_ip_failover:\n    name: 1.1.1.1\n    service: ns666.ovh.net\n    endpoint: ovh-eu\n    wait_task_completion: \"{{moved.taskId}}\"\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n"
  },
  "community.general.ovh_ip_loadbalancing_backend": {
    "doc": {
      "description": "Manage OVH (French European hosting provider) LoadBalancing IP backends",
      "has_action": false,
      "notes": "Uses the python OVH Api U(https://github.com/ovh/python-ovh). You have to create an application (a key and secret) with a consumer key as described into U(https://docs.ovh.com/gb/en/customer/first-steps-with-ovh-api/)",
      "options": {
        "application_key": {
          "aliases": [],
          "description": "The applicationKey to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "application_secret": {
          "aliases": [],
          "description": "The application secret to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "backend": {
          "aliases": [],
          "description": "The IP address of the backend to update / modify / delete",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "consumer_key": {
          "aliases": [],
          "description": "The consumer key to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "endpoint": {
          "aliases": [],
          "description": "The endpoint to use ( for instance ovh-eu)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the LoadBalancing internal name (ip-X.X.X.X)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "probe": {
          "aliases": [],
          "description": "Determines the type of probe to use for this backend",
          "default": "none",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "http",
            "icmp",
            "oco"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the backend is to be created/modified or deleted",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The timeout in seconds used to wait for a task to be completed.",
          "default": "120",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "Determines the weight for this backend",
          "default": "8",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ovh >  0.3.5"
      ],
      "short_description": "Manage OVH IP LoadBalancing backends"
    },
    "examples": "\n- name: Adds or modify the backend '212.1.1.1' to a loadbalancing 'ip-1.1.1.1'\n  ovh_ip_loadbalancing:\n    name: ip-1.1.1.1\n    backend: 212.1.1.1\n    state: present\n    probe: none\n    weight: 8\n    endpoint: ovh-eu\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n\n- name: Removes a backend '212.1.1.1' from a loadbalancing 'ip-1.1.1.1'\n  ovh_ip_loadbalancing:\n    name: ip-1.1.1.1\n    backend: 212.1.1.1\n    state: absent\n    endpoint: ovh-eu\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n"
  },
  "community.general.ovh_monthly_billing": {
    "doc": {
      "description": "Enable monthly billing on OVH cloud intances (be aware OVH does not allow to disable it).",
      "has_action": false,
      "options": {
        "application_key": {
          "aliases": [],
          "description": "The applicationKey to use",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "application_secret": {
          "aliases": [],
          "description": "The application secret to use",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "consumer_key": {
          "aliases": [],
          "description": "The consumer key to use",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "endpoint": {
          "aliases": [],
          "description": "The endpoint to use (for instance ovh-eu)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "ID of the instance, get it with U(https://api.ovh.com/console/#/cloud/project/%7BserviceName%7D/instance#GET)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "ID of the project, get it with U(https://api.ovh.com/console/#/cloud/project#GET)",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "ovh"
      ],
      "short_description": "Manage OVH monthly billing",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Basic usage, using auth from /etc/ovh.conf\n  community.general.ovh_monthly_billing:\n    project_id: 0c727a20aa144485b70c44dee9123b46\n    instance_id: 8fa89ad2-8f08-4220-9fa4-9695ea23e948\n\n# Get openstack cloud ID and instance ID, OVH use them in its API\n- name: Get openstack cloud ID and instance ID\n  os_server_info:\n    cloud: myProjectName\n    region_name: myRegionName\n    server: myServerName\n  register: openstack_servers\n\n- name: Use IDs\n  community.general.ovh_monthly_billing:\n    project_id: \"{{ openstack_servers.0.tenant_id }}\"\n    instance_id: \"{{ openstack_servers.0.id }}\"\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n"
  },
  "community.general.pacemaker_cluster": {
    "doc": {
      "description": "This module can manage a pacemaker cluster and nodes from Ansible using the pacemaker cli.",
      "has_action": false,
      "options": {
        "force": {
          "aliases": [],
          "description": "Force the change of the cluster state",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "Specify which node of the cluster you want to manage. None == the cluster status itself, 'all' == check the status of all nodes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the cluster",
          "type": "str",
          "required": false,
          "choices": [
            "cleanup",
            "offline",
            "online",
            "restart"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout when the module should considered that the action has failed",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage pacemaker clusters"
    },
    "examples": "\n---\n- name: Set cluster Online\n  hosts: localhost\n  gather_facts: no\n  tasks:\n  - name: Get cluster state\n    community.general.pacemaker_cluster:\n      state: online\n"
  },
  "community.general.packet_device": {
    "doc": {
      "description": "Manage a bare metal server in the Packet Host (a \"device\" in the API terms).\nWhen the machine is created it can optionally wait for public IP address, or for active state.\nThis module has a dependency on packet >= 1.0.\nAPI is documented at U(https://www.packet.net/developers/api/devices).",
      "has_action": false,
      "notes": "Doesn't support check mode.",
      "options": {
        "always_pxe": {
          "aliases": [],
          "description": "Persist PXE as the first boot option.\nNormally, the PXE process happens only on the first boot. Set this arg to have your device continuously boot to iPXE.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Packet API token. You can also supply it in env var C(PACKET_API_TOKEN).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "The number of devices to create. Count number can be included in hostname via the %d string formatter.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "count_offset": {
          "aliases": [],
          "description": "From which number to start the count.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_ids": {
          "aliases": [],
          "description": "List of device IDs on which to operate.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "facility": {
          "aliases": [],
          "description": "Facility slug for device creation. See Packet API for current list - U(https://www.packet.net/developers/api/facilities/).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "features": {
          "aliases": [],
          "description": "Dict with \"features\" for device creation. See Packet API docs for details.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "hostnames": {
          "aliases": [
            "name"
          ],
          "description": "A hostname of a device, or a list of hostnames.\nIf given string or one-item list, you can use the C(\"%d\") Python string format to expand numbers from I(count).\nIf only one hostname, it might be expanded to list if I(count)>1.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ipxe_script_url": {
          "aliases": [],
          "description": "URL of custom iPXE script for provisioning.\nMore about custom iPXE for Packet devices at U(https://help.packet.net/technical/infrastructure/custom-ipxe).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "locked": {
          "aliases": [
            "lock"
          ],
          "description": "Whether to lock a created device.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operating_system": {
          "aliases": [],
          "description": "OS slug for device creation. See Packet API for current list - U(https://www.packet.net/developers/api/operatingsystems/).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "plan": {
          "aliases": [],
          "description": "Plan slug for device creation. See Packet API for current list - U(https://www.packet.net/developers/api/plans/).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "ID of project of the device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the device.\nIf set to C(present) (the default), the module call will return immediately after the device-creating HTTP request successfully returns.\nIf set to C(active), the module call will block until all the specified devices are in state active due to the Packet API, or until I(wait_timeout).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "active",
            "inactive",
            "rebooted"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of device tags.\nCurrently implemented only for device creation.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "user_data": {
          "aliases": [],
          "description": "Userdata blob made available to the machine",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait_for_public_IPv": {
          "aliases": [],
          "description": "Whether to wait for the instance to be assigned a public IPv4/IPv6 address.\nIf set to 4, it will wait until IPv4 is assigned to the instance.\nIf set to 6, wait until public IPv6 is assigned to the instance.",
          "type": "int",
          "required": false,
          "choices": [
            "4",
            "6"
          ],
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "How long (seconds) to wait either for automatic IP address assignment, or for the device to reach the C(active) I(state).\nIf I(wait_for_public_IPv) is set and I(state) is C(active), the module will wait for both events consequently, applying the timeout twice.",
          "default": "900",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "packet-python >= 1.35"
      ],
      "short_description": "Manage a bare metal server in the Packet Host."
    },
    "examples": "\n# All the examples assume that you have your Packet API token in env var PACKET_API_TOKEN.\n# You can also pass it to the auth_token parameter of the module instead.\n\n# Creating devices\n\n- name: Create 1 device\n  hosts: localhost\n  tasks:\n  - community.general.packet_device:\n      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df\n      hostnames: myserver\n      tags: ci-xyz\n      operating_system: ubuntu_16_04\n      plan: baremetal_0\n      facility: sjc1\n\n# Create the same device and wait until it is in state \"active\", (when it's\n# ready for other API operations). Fail if the device is not \"active\" in\n# 10 minutes.\n\n- name: Create device and wait up to 10 minutes for active state\n  hosts: localhost\n  tasks:\n  - community.general.packet_device:\n      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df\n      hostnames: myserver\n      operating_system: ubuntu_16_04\n      plan: baremetal_0\n      facility: sjc1\n      state: active\n      wait_timeout: 600\n\n- name: Create 3 ubuntu devices called server-01, server-02 and server-03\n  hosts: localhost\n  tasks:\n  - community.general.packet_device:\n      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df\n      hostnames: server-%02d\n      count: 3\n      operating_system: ubuntu_16_04\n      plan: baremetal_0\n      facility: sjc1\n\n- name: Create 3 coreos devices with userdata, wait until they get IPs and then wait for SSH\n  hosts: localhost\n  tasks:\n  - name: Create 3 devices and register their facts\n    community.general.packet_device:\n      hostnames: [coreos-one, coreos-two, coreos-three]\n      operating_system: coreos_stable\n      plan: baremetal_0\n      facility: ewr1\n      locked: true\n      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df\n      wait_for_public_IPv: 4\n      user_data: |\n        #cloud-config\n        ssh_authorized_keys:\n          - {{ lookup('file', 'my_packet_sshkey') }}\n        coreos:\n          etcd:\n            discovery: https://discovery.etcd.io/6a28e078895c5ec737174db2419bb2f3\n            addr: $private_ipv4:4001\n            peer-addr: $private_ipv4:7001\n          fleet:\n            public-ip: $private_ipv4\n          units:\n            - name: etcd.service\n              command: start\n            - name: fleet.service\n              command: start\n    register: newhosts\n\n  - name: Wait for ssh\n    ansible.builtin.wait_for:\n      delay: 1\n      host: \"{{ item.public_ipv4 }}\"\n      port: 22\n      state: started\n      timeout: 500\n    with_items: \"{{ newhosts.devices }}\"\n\n\n# Other states of devices\n\n- name: Remove 3 devices by uuid\n  hosts: localhost\n  tasks:\n  - community.general.packet_device:\n      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df\n      state: absent\n      device_ids:\n        - 1fb4faf8-a638-4ac7-8f47-86fe514c30d8\n        - 2eb4faf8-a638-4ac7-8f47-86fe514c3043\n        - 6bb4faf8-a638-4ac7-8f47-86fe514c301f\n"
  },
  "community.general.packet_ip_subnet": {
    "doc": {
      "description": "Assign or unassign IPv4 or IPv6 subnets to or from a device in the Packet host.\nIPv4 subnets must come from already reserved block.\nIPv6 subnets must come from publicly routable /56 block from your project.\nSee U(https://support.packet.com/kb/articles/elastic-ips) for more info on IP block reservation.",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Packet API token. You can also supply it in env var C(PACKET_API_TOKEN).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr": {
          "aliases": [
            "name"
          ],
          "description": "IPv4 or IPv6 subnet which you want to manage. It must come from a reserved block for your project in the Packet Host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "device_count": {
          "aliases": [],
          "description": "The number of devices to retrieve from the project. The max allowed value is 1000.\nSee U(https://www.packet.com/developers/api/#retrieve-all-devices-of-a-project) for more info.",
          "default": "100",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "UUID of a device to/from which to assign/remove a subnet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "A hostname of a device to/from which to assign/remove a subnet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "UUID of a project of the device to/from which to assign/remove a subnet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the IP subnet on the specified device.\nWith state == C(present), you must specify either hostname or device_id. Subnet with given CIDR will then be assigned to the specified device.\nWith state == C(absent), you can specify either hostname or device_id. The subnet will be removed from specified devices.\nIf you leave both hostname and device_id empty, the subnet will be removed from any device it's assigned to.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "packet-python >= 1.35",
        "python >= 2.6"
      ],
      "short_description": "Assign IP subnet to a bare metal server.",
      "version_added": "0.2.0"
    },
    "examples": "\n# All the examples assume that you have your Packet API token in env var PACKET_API_TOKEN.\n# You can also pass it to the auth_token parameter of the module instead.\n\n- name: Create 1 device and assign an arbitrary public IPv4 subnet to it\n  hosts: localhost\n  tasks:\n\n  - packet_device:\n      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df\n      hostnames: myserver\n      operating_system: ubuntu_16_04\n      plan: baremetal_0\n      facility: sjc1\n      state: active\n\n# Pick an IPv4 address from a block allocated to your project.\n\n  - community.general.packet_ip_subnet:\n      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df\n      hostname: myserver\n      cidr: \"147.75.201.78/32\"\n\n# Release IP address 147.75.201.78\n\n- name: Unassign IP address from any device in your project\n  hosts: localhost\n  tasks:\n  - community.general.packet_ip_subnet:\n      project_id: 89b497ee-5afc-420a-8fb5-56984898f4df\n      cidr: \"147.75.201.78/32\"\n      state: absent\n"
  },
  "community.general.packet_project": {
    "doc": {
      "description": "Create/delete a project in Packet host.\nAPI is documented at U(https://www.packet.com/developers/api/#projects).",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Packet api token. You can also supply it in env var C(PACKET_API_TOKEN).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_data": {
          "aliases": [],
          "description": "Custom data about the project to create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "UUID of the project which you want to remove.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for/of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "UUID of the organization to create a project for.\nWhen blank, the API assumes the default organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "payment_method": {
          "aliases": [],
          "description": "Payment method is name of one of the payment methods available to your user.\nWhen blank, the API assumes the default payment method.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the target.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "packet-python >= 1.40"
      ],
      "short_description": "Create/delete a project in Packet host.",
      "version_added": "0.2.0"
    },
    "examples": "\n# All the examples assume that you have your Packet API token in env var PACKET_API_TOKEN.\n# You can also pass the api token in module param auth_token.\n\n- name: Create new project\n  hosts: localhost\n  tasks:\n    community.general.packet_project:\n      name: \"new project\"\n\n- name: Create new project within non-default organization\n  hosts: localhost\n  tasks:\n    community.general.packet_project:\n      name: \"my org project\"\n      org_id: a4cc87f9-e00f-48c2-9460-74aa60beb6b0\n\n- name: Remove project by id\n  hosts: localhost\n  tasks:\n    community.general.packet_project:\n      state: absent\n      id: eef49903-7a09-4ca1-af67-4087c29ab5b6\n\n- name: Create new project with non-default billing method\n  hosts: localhost\n  tasks:\n    community.general.packet_project:\n      name: \"newer project\"\n      payment_method: \"the other visa\"\n"
  },
  "community.general.packet_sshkey": {
    "doc": {
      "description": "Create/delete an SSH key in Packet host.\nAPI is documented at U(https://www.packet.net/help/api/#page:ssh-keys,header:ssh-keys-ssh-keys-post).",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Packet API token. You can also supply it in env var C(PACKET_API_TOKEN).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fingerprint": {
          "aliases": [],
          "description": "Fingerprint of the key which you want to remove.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "UUID of the key which you want to remove.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Public Key string ({type} {base64 encoded key} {description}).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key_file": {
          "aliases": [],
          "description": "File with the public key.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [
            "name"
          ],
          "description": "Label for the key. If you keep it empty, it will be read from key string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the target.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "packet-python"
      ],
      "short_description": "Create/delete an SSH key in Packet host."
    },
    "examples": "\n# All the examples assume that you have your Packet API token in env var PACKET_API_TOKEN.\n# You can also pass the api token in module param auth_token.\n\n- name: Create sshkey from string\n  hosts: localhost\n  tasks:\n    community.general.packet_sshkey:\n      key: \"{{ lookup('file', 'my_packet_sshkey.pub') }}\"\n\n- name: Create sshkey from file\n  hosts: localhost\n  tasks:\n    community.general.packet_sshkey:\n      label: key from file\n      key_file: ~/ff.pub\n\n- name: Remove sshkey by id\n  hosts: localhost\n  tasks:\n    community.general.packet_sshkey:\n      state: absent\n      id: eef49903-7a09-4ca1-af67-4087c29ab5b6\n"
  },
  "community.general.packet_volume": {
    "doc": {
      "description": "Create/delete a volume in Packet host.\nAPI is documented at U(https://www.packet.com/developers/api/#volumes).",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Packet API token. You can also supply it in env var C(PACKET_API_TOKEN).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "billing_cycle": {
          "aliases": [],
          "description": "Billing cycle for new volume.",
          "default": "hourly",
          "type": "str",
          "required": false,
          "choices": [
            "hourly",
            "monthly"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "User-defined description attribute for Packet volume.\nIt is used used as idempotent identifier - if volume with given description exists, new one is not created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "facility": {
          "aliases": [],
          "description": "Location of the volume.\nVolumes can only be attached to device in the same location.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "UUID of a volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "locked": {
          "aliases": [],
          "description": "Create new volume locked.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Selector for API-generated name of the volume",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "plan": {
          "aliases": [],
          "description": "storage_1 for standard tier, storage_2 for premium (performance) tier.\nTiers are described at U(https://www.packet.com/cloud/storage/).",
          "default": "storage_1",
          "type": "str",
          "required": false,
          "choices": [
            "storage_1",
            "storage_2"
          ],
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "ID of project of the device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of the volume in gigabytes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshot_policy": {
          "aliases": [],
          "description": "Snapshot policy for new volume.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "snapshot_count": {
              "aliases": [],
              "description": "How many snapshots to keep, a positive integer.",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "snapshot_frequency": {
              "aliases": [],
              "description": "Frequency of snapshots.",
              "type": "str",
              "required": true,
              "choices": [
                "15min",
                "1hour",
                "1day",
                "1week",
                "1month",
                "1year"
              ],
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the volume.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "packet-python >= 1.35"
      ],
      "short_description": "Create/delete a volume in Packet host.",
      "version_added": "0.2.0"
    },
    "examples": "\n# All the examples assume that you have your Packet API token in env var PACKET_API_TOKEN.\n# You can also pass the api token in module param auth_token.\n\n- hosts: localhost\n  vars:\n    volname: testvol123\n    project_id: 53000fb2-ee46-4673-93a8-de2c2bdba33b\n\n  tasks:\n    - name: Create volume\n      community.general.packet_volume:\n        description: \"{{ volname }}\"\n        project_id: \"{{ project_id }}\"\n        facility: 'ewr1'\n        plan: 'storage_1'\n        state: present\n        size: 10\n        snapshot_policy:\n          snapshot_count: 10\n          snapshot_frequency: 1day\n      register: result_create\n\n    - name: Delete volume\n      community.general.packet_volume:\n        id: \"{{ result_create.id }}\"\n        project_id: \"{{ project_id }}\"\n        state: absent\n"
  },
  "community.general.packet_volume_attachment": {
    "doc": {
      "description": "Attach/detach a volume to a device in the Packet host.\nAPI is documented at U(https://www.packet.com/developers/api/volumes/).\nThis module creates the attachment route in the Packet API. In order to discover the block devices on the server, you have to run the Attach Scripts, as documented at U(https://help.packet.net/technical/storage/packet-block-storage-linux).",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Packet API token. You can also supply it in env var C(PACKET_API_TOKEN).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "Selector for the device.\nIt can be a UUID of the device, or a hostname.\nExample values: 98a14f7a-3d27-4478-b7cf-35b5670523f3, \"my device\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "UUID of the project to which the device and volume belong.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the attachment.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Selector for the volume.\nIt can be a UUID, an API-generated volume name, or user-defined description string.\nExample values: 4a347482-b546-4f67-8300-fb5018ef0c5, volume-4a347482, \"my volume\"",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "packet-python >= 1.35"
      ],
      "short_description": "Attach/detach a volume to a device in the Packet host.",
      "version_added": "0.2.0"
    },
    "examples": "\n# All the examples assume that you have your Packet API token in env var PACKET_API_TOKEN.\n# You can also pass the api token in module param auth_token.\n\n- hosts: localhost\n\n  vars:\n    volname: testvol\n    devname: testdev\n    project_id: 52000fb2-ee46-4673-93a8-de2c2bdba33b\n\n  tasks:\n    - name: Create volume\n      packet_volume:\n        description: \"{{ volname }}\"\n        project_id: \"{{ project_id }}\"\n        facility: ewr1\n        plan: storage_1\n        state: present\n        size: 10\n        snapshot_policy:\n          snapshot_count: 10\n          snapshot_frequency: 1day\n\n    - name: Create a device\n      packet_device:\n        project_id: \"{{ project_id }}\"\n        hostnames: \"{{ devname }}\"\n        operating_system: ubuntu_16_04\n        plan: baremetal_0\n        facility: ewr1\n        state: present\n\n    - name: Attach testvol to testdev\n      community.general.packet_volume_attachment:\n        project_id: \"{{ project_id }}\"\n        volume: \"{{ volname }}\"\n        device: \"{{ devname }}\"\n\n    - name: Detach testvol from testdev\n      community.general.packet_volume_attachment:\n        project_id: \"{{ project_id }}\"\n        volume: \"{{ volname }}\"\n        device: \"{{ devname }}\"\n        state: absent\n"
  },
  "community.general.pacman": {
    "doc": {
      "description": "Manage packages with the I(pacman) package manager, which is used by Arch Linux and its variants.",
      "has_action": false,
      "notes": "When used with a C(loop:) each package will be processed individually, it is much more efficient to pass the list directly to the I(name) option.\nTo use an AUR helper (I(executable) option), a few extra setup steps might be required beforehand. For example, a dedicated build user with permissions to install packages could be necessary.",
      "options": {
        "executable": {
          "aliases": [],
          "description": "Name of binary to use. This can either be C(pacman) or a pacman compatible AUR helper.\nBeware that AUR helpers might behave unexpectedly and are therefore not recommended.",
          "default": "pacman",
          "type": "str",
          "required": false,
          "version_added": "3.1.0",
          "suboptions": {}
        },
        "extra_args": {
          "aliases": [],
          "description": "Additional option to pass to pacman when enforcing C(state).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "When removing package, force remove package, without any checks. Same as `extra_args=\"--nodeps --nodeps\"`. When update_cache, force redownload repo databases. Same as `update_cache_extra_args=\"--refresh --refresh\"`.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "package",
            "pkg"
          ],
          "description": "Name or list of names of the package(s) or file(s) to install, upgrade, or remove. Can't be used in combination with C(upgrade).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.\nC(present) and C(installed) will simply ensure that a desired package is installed.\nC(latest) will update the specified package if it is not of the latest available version.\nC(absent) and C(removed) will remove the specified package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "installed",
            "latest",
            "present",
            "removed"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [
            "update-cache"
          ],
          "description": "Whether or not to refresh the master package lists.\nThis can be run as part of a package installation or as a separate step.\nAlias C(update-cache) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "update_cache_extra_args": {
          "aliases": [],
          "description": "Additional option to pass to pacman when enforcing C(update_cache).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "upgrade": {
          "aliases": [],
          "description": "Whether or not to upgrade the whole system. Can't be used in combination with C(name).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upgrade_extra_args": {
          "aliases": [],
          "description": "Additional option to pass to pacman when enforcing C(upgrade).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage packages with I(pacman)"
    },
    "examples": "\n- name: Install package foo from repo\n  community.general.pacman:\n    name: foo\n    state: present\n\n- name: Install package bar from file\n  community.general.pacman:\n    name: ~/bar-1.0-1-any.pkg.tar.xz\n    state: present\n\n- name: Install package foo from repo and bar from file\n  community.general.pacman:\n    name:\n      - foo\n      - ~/bar-1.0-1-any.pkg.tar.xz\n    state: present\n\n- name: Install package from AUR using a Pacman compatible AUR helper\n  community.general.pacman:\n    name: foo\n    state: present\n    executable: yay\n    extra_args: --builddir /var/cache/yay\n\n- name: Upgrade package foo\n  community.general.pacman:\n    name: foo\n    state: latest\n    update_cache: yes\n\n- name: Remove packages foo and bar\n  community.general.pacman:\n    name:\n      - foo\n      - bar\n    state: absent\n\n- name: Recursively remove package baz\n  community.general.pacman:\n    name: baz\n    state: absent\n    extra_args: --recursive\n\n- name: Run the equivalent of \"pacman -Sy\" as a separate step\n  community.general.pacman:\n    update_cache: yes\n\n- name: Run the equivalent of \"pacman -Su\" as a separate step\n  community.general.pacman:\n    upgrade: yes\n\n- name: Run the equivalent of \"pacman -Syu\" as a separate step\n  community.general.pacman:\n    update_cache: yes\n    upgrade: yes\n\n- name: Run the equivalent of \"pacman -Rdd\", force remove package baz\n  community.general.pacman:\n    name: baz\n    state: absent\n    force: yes\n"
  },
  "community.general.pacman_key": {
    "doc": {
      "description": "Add or remove gpg keys from the pacman keyring.",
      "has_action": false,
      "notes": "Use full-length key ID (40 characters).\nKeys will be verified when using I(data), I(file), or I(url) unless I(verify) is overridden.\nKeys will be locally signed after being imported into the keyring.\nIf the key ID exists in the keyring, the key will not be added unless I(force_update) is specified.\nI(data), I(file), I(url), and I(keyserver) are mutually exclusive.\nSupports C(check_mode).",
      "options": {
        "data": {
          "aliases": [],
          "description": "The keyfile contents to add to the keyring.\nMust be of C(PGP PUBLIC KEY BLOCK) type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "file": {
          "aliases": [],
          "description": "The path to a keyfile on the remote server to add to the keyring.\nRemote file must be of C(PGP PUBLIC KEY BLOCK) type.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force_update": {
          "aliases": [],
          "description": "This forces the key to be updated if it already exists in the keyring.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The 40 character identifier of the key.\nIncluding this allows check mode to correctly report the changed state.\nDo not specify a subkey ID, instead specify the primary key ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "keyring": {
          "aliases": [],
          "description": "The full path to the keyring folder on the remote server.\nIf not specified, module will use pacman's default (C(/etc/pacman.d/gnupg)).\nUseful if the remote system requires an alternative gnupg directory.",
          "default": "/etc/pacman.d/gnupg",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "keyserver": {
          "aliases": [],
          "description": "The keyserver used to retrieve key from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Ensures that the key is present (added) or absent (revoked).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "The URL to retrieve keyfile from.\nRemote file must be of C(PGP PUBLIC KEY BLOCK) type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "verify": {
          "aliases": [],
          "description": "Whether or not to verify the keyfile's key ID against specified key ID.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "gpg",
        "pacman-key"
      ],
      "short_description": "Manage pacman's list of trusted keys",
      "version_added": "3.2.0"
    },
    "examples": "\n- name: Import a key via local file\n  community.general.pacman_key:\n    data: \"{{ lookup('file', 'keyfile.asc') }}\"\n    state: present\n\n- name: Import a key via remote file\n  community.general.pacman_key:\n    file: /tmp/keyfile.asc\n    state: present\n\n- name: Import a key via url\n  community.general.pacman_key:\n    id: 01234567890ABCDE01234567890ABCDE12345678\n    url: https://domain.tld/keys/keyfile.asc\n    state: present\n\n- name: Import a key via keyserver\n  community.general.pacman_key:\n    id: 01234567890ABCDE01234567890ABCDE12345678\n    keyserver: keyserver.domain.tld\n\n- name: Import a key into an alternative keyring\n  community.general.pacman_key:\n    id: 01234567890ABCDE01234567890ABCDE12345678\n    file: /tmp/keyfile.asc\n    keyring: /etc/pacman.d/gnupg-alternative\n\n- name: Remove a key from the keyring\n  community.general.pacman_key:\n    id: 01234567890ABCDE01234567890ABCDE12345678\n    state: absent\n"
  },
  "community.general.pagerduty": {
    "doc": {
      "description": "This module will let you create PagerDuty maintenance windows",
      "has_action": false,
      "options": {
        "desc": {
          "aliases": [],
          "description": "Short description of maintenance window.",
          "default": "Created by Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hours": {
          "aliases": [],
          "description": "Length of maintenance window in hours.",
          "default": "1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "minutes": {
          "aliases": [],
          "description": "Maintenance window in minutes (this is added to the hours).",
          "default": "0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "PagerDuty unique subdomain. Obsolete. It is not used with PagerDuty REST v2 API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "requester_id": {
          "aliases": [],
          "description": "ID of user making the request. Only needed when creating a maintenance_window.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service": {
          "aliases": [
            "services"
          ],
          "description": "A comma separated list of PagerDuty service IDs.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create a maintenance window or get a list of ongoing windows.",
          "type": "str",
          "required": true,
          "choices": [
            "running",
            "started",
            "ongoing",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "A pagerduty token, generated on the pagerduty site. It is used for authorization.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "PagerDuty user ID. Obsolete. Please, use I(token) for authorization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "window_id": {
          "aliases": [],
          "description": "ID of maintenance window. Only needed when absent a maintenance_window.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "PagerDuty API access"
      ],
      "short_description": "Create PagerDuty maintenance windows"
    },
    "examples": "\n- name: List ongoing maintenance windows using a token\n  community.general.pagerduty:\n    name: companyabc\n    token: xxxxxxxxxxxxxx\n    state: ongoing\n\n- name: Create a 1 hour maintenance window for service FOO123\n  community.general.pagerduty:\n    name: companyabc\n    user: example@example.com\n    token: yourtoken\n    state: running\n    service: FOO123\n\n- name: Create a 5 minute maintenance window for service FOO123\n  community.general.pagerduty:\n    name: companyabc\n    token: xxxxxxxxxxxxxx\n    hours: 0\n    minutes: 5\n    state: running\n    service: FOO123\n\n\n- name: Create a 4 hour maintenance window for service FOO123 with the description \"deployment\"\n  community.general.pagerduty:\n    name: companyabc\n    user: example@example.com\n    state: running\n    service: FOO123\n    hours: 4\n    desc: deployment\n  register: pd_window\n\n- name: Delete the previous maintenance window\n  community.general.pagerduty:\n    name: companyabc\n    user: example@example.com\n    state: absent\n    window_id: '{{ pd_window.result.maintenance_window.id }}'\n\n# Delete a maintenance window from a separate playbook than its creation,\n# and if it is the only existing maintenance window\n- name: Check\n  community.general.pagerduty:\n    requester_id: XXXXXXX\n    token: yourtoken\n    state: ongoing\n  register: pd_window\n\n- name: Delete\n  community.general.pagerduty:\n    requester_id: XXXXXXX\n    token: yourtoken\n    state: absent\n    window_id: \"{{ pd_window.result.maintenance_windows[0].id }}\"\n"
  },
  "community.general.pagerduty_alert": {
    "doc": {
      "description": "This module will let you trigger, acknowledge or resolve a PagerDuty incident by sending events",
      "has_action": false,
      "options": {
        "api_key": {
          "aliases": [],
          "description": "The pagerduty API key (readonly access), generated on the pagerduty site.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "client": {
          "aliases": [],
          "description": "The name of the monitoring client that is triggering this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_url": {
          "aliases": [],
          "description": "The URL of the monitoring client that is triggering this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "desc": {
          "aliases": [],
          "description": "For C(triggered) I(state) - Required. Short description of the problem that led to this trigger. This field (or a truncated version) will be used when generating phone calls, SMS messages and alert emails. It will also appear on the incidents tables in the PagerDuty UI. The maximum length is 1024 characters.\nFor C(acknowledged) or C(resolved) I(state) - Text that will appear in the incident's log associated with this event.",
          "default": "Created via Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "incident_key": {
          "aliases": [],
          "description": "Identifies the incident to which this I(state) should be applied.\nFor C(triggered) I(state) - If there's no open (i.e. unresolved) incident with this key, a new one will be created. If there's already an open incident with a matching key, this event will be appended to that incident's log. The event key provides an easy way to \"de-dup\" problem reports.\nFor C(acknowledged) or C(resolved) I(state) - This should be the incident_key you received back when the incident was first opened by a trigger event. Acknowledge events referencing resolved or nonexistent incidents will be discarded.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "integration_key": {
          "aliases": [],
          "description": "The GUID of one of your \"Generic API\" services.\nThis is the \"integration key\" listed on a \"Integrations\" tab of PagerDuty service.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "PagerDuty unique subdomain. Obsolete. It is not used with PagerDuty REST v2 API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_id": {
          "aliases": [],
          "description": "ID of PagerDuty service when incidents will be triggered, acknowledged or resolved.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "service_key": {
          "aliases": [],
          "description": "The GUID of one of your \"Generic API\" services. Obsolete. Please use I(integration_key).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Type of event to be sent.",
          "type": "str",
          "required": true,
          "choices": [
            "triggered",
            "acknowledged",
            "resolved"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "PagerDuty API access"
      ],
      "short_description": "Trigger, acknowledge or resolve PagerDuty incidents"
    },
    "examples": "\n- name: Trigger an incident with just the basic options\n  community.general.pagerduty_alert:\n    name: companyabc\n    integration_key: xxx\n    api_key: yourapikey\n    service_id: PDservice\n    state: triggered\n    desc: problem that led to this trigger\n\n- name: Trigger an incident with more options\n  community.general.pagerduty_alert:\n    integration_key: xxx\n    api_key: yourapikey\n    service_id: PDservice\n    state: triggered\n    desc: problem that led to this trigger\n    incident_key: somekey\n    client: Sample Monitoring Service\n    client_url: http://service.example.com\n\n- name: Acknowledge an incident based on incident_key\n  community.general.pagerduty_alert:\n    integration_key: xxx\n    api_key: yourapikey\n    service_id: PDservice\n    state: acknowledged\n    incident_key: somekey\n    desc: \"some text for incident's log\"\n\n- name: Resolve an incident based on incident_key\n  community.general.pagerduty_alert:\n    integration_key: xxx\n    api_key: yourapikey\n    service_id: PDservice\n    state: resolved\n    incident_key: somekey\n    desc: \"some text for incident's log\"\n"
  },
  "community.general.pagerduty_change": {
    "doc": {
      "description": "This module will let you create a PagerDuty change event each time the module is run.\nThis is not an idempotent action and a new change event will be created each time it is run.",
      "has_action": false,
      "notes": "Supports C(check_mode). Note that check mode simply does nothing except returning C(changed=true) in case the I(url) seems to be correct.",
      "options": {
        "environment": {
          "aliases": [],
          "description": "The environment name, typically C(production), C(staging), etc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "integration_key": {
          "aliases": [],
          "description": "The integration key that identifies the service the change was made to. This can be found by adding an integration to a service in PagerDuty.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "link_text": {
          "aliases": [],
          "description": "Descriptive text for a URL where more information about the deployment can be obtained.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "link_url": {
          "aliases": [],
          "description": "A URL where more information about the deployment can be obtained.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "The URL of the project repository.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "revision": {
          "aliases": [],
          "description": "An identifier of the revision being deployed, typically a number or SHA from a version control system.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The source of the change event.",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "summary": {
          "aliases": [],
          "description": "A short description of the change that occurred.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL to submit the change event to.",
          "default": "https://events.pagerduty.com/v2/change/enqueue",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The name of the user or process that triggered this deployment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates for the target URL will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "PagerDuty integration key"
      ],
      "short_description": "Track a code or infrastructure change as a PagerDuty change event",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Track the deployment as a PagerDuty change event\n  community.general.pagerduty_change:\n    integration_key: abc123abc123abc123abc123abc123ab\n    summary: The application was deployed\n\n- name: Track the deployment as a PagerDuty change event with more details\n  community.general.pagerduty_change:\n    integration_key: abc123abc123abc123abc123abc123ab\n    summary: The application was deployed\n    source: Ansible Deploy\n    user: ansible\n    repo: github.com/ansible/ansible\n    revision: '4.2'\n    environment: production\n    link_url: https://github.com/ansible-collections/community.general/pull/1269\n    link_text: View changes on GitHub\n"
  },
  "community.general.pagerduty_user": {
    "doc": {
      "description": "This module manages the creation/removal of a user account on PagerDuty.",
      "has_action": false,
      "notes": "Supports C(check_mode).",
      "options": {
        "access_token": {
          "aliases": [],
          "description": "An API access token to authenticate with the PagerDuty REST API.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pd_email": {
          "aliases": [],
          "description": "The user's email address.\nI(pd_email) is the unique identifier used and cannot be updated using this module.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pd_role": {
          "aliases": [],
          "description": "The user's role.",
          "default": "responder",
          "type": "str",
          "required": false,
          "choices": [
            "global_admin",
            "manager",
            "responder",
            "observer",
            "stakeholder",
            "limited_stakeholder",
            "restricted_access"
          ],
          "suboptions": {}
        },
        "pd_teams": {
          "aliases": [],
          "description": "The teams to which the user belongs.\nRequired if I(state=present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pd_user": {
          "aliases": [],
          "description": "Name of the user in PagerDuty.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the user.\nOn C(present), it creates a user if the user doesn't exist.\nOn C(absent), it removes a user if the account exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pdpyras python module = 4.1.1",
        "PagerDuty API Access"
      ],
      "short_description": "Manage a user account on PagerDuty",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Create a user account on PagerDuty\n  community.general.pagerduty_user:\n    access_token: 'Your_Access_token'\n    pd_user: user_full_name\n    pd_email: user_email\n    pd_role: user_pd_role\n    pd_teams: user_pd_teams\n    state: \"present\"\n\n- name: Remove a user account from PagerDuty\n  community.general.pagerduty_user:\n    access_token: 'Your_Access_token'\n    pd_user: user_full_name\n    pd_email: user_email\n    state: \"absent\"\n"
  },
  "community.general.pam_limits": {
    "doc": {
      "description": "The C(pam_limits) module modifies PAM limits.\nThe default file is C(/etc/security/limits.conf).\nFor the full documentation, see C(man 5 limits.conf).",
      "has_action": false,
      "notes": "If I(dest) file does not exist, it is created.",
      "options": {
        "backup": {
          "aliases": [],
          "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Comment associated with the limit.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Modify the limits.conf path.",
          "default": "/etc/security/limits.conf",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "A username, @groupname, wildcard, UID/GID range.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "limit_item": {
          "aliases": [],
          "description": "The limit to be set.",
          "type": "str",
          "required": true,
          "choices": [
            "core",
            "data",
            "fsize",
            "memlock",
            "nofile",
            "rss",
            "stack",
            "cpu",
            "nproc",
            "as",
            "maxlogins",
            "maxsyslogins",
            "priority",
            "locks",
            "sigpending",
            "msgqueue",
            "nice",
            "rtprio",
            "chroot"
          ],
          "suboptions": {}
        },
        "limit_type": {
          "aliases": [],
          "description": "Limit type, see C(man 5 limits.conf) for an explanation.",
          "type": "str",
          "required": true,
          "choices": [
            "hard",
            "soft",
            "-"
          ],
          "suboptions": {}
        },
        "use_max": {
          "aliases": [],
          "description": "If set to C(yes), the maximal value will be used or conserved.\nIf the specified value is superior to the value in the file, file content is replaced with the new value, else content is not modified.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_min": {
          "aliases": [],
          "description": "If set to C(yes), the minimal value will be used or conserved.\nIf the specified value is inferior to the value in the file, file content is replaced with the new value, else content is not modified.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value of the limit.\nValue must either be C(unlimited), C(infinity) or C(-1), all of which indicate no limit, or a limit of 0 or larger.\nValue must be a number in the range -20 to 19 inclusive, if I(limit_item) is set to C(nice) or C(priority).\nRefer to the C(man 5 limits.conf) manual pages for more details.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Modify Linux PAM limits"
    },
    "examples": "\n- name: Add or modify nofile soft limit for the user joe\n  community.general.pam_limits:\n    domain: joe\n    limit_type: soft\n    limit_item: nofile\n    value: 64000\n\n- name: Add or modify fsize hard limit for the user smith. Keep or set the maximal value\n  community.general.pam_limits:\n    domain: smith\n    limit_type: hard\n    limit_item: fsize\n    value: 1000000\n    use_max: yes\n\n- name: Add or modify memlock, both soft and hard, limit for the user james with a comment\n  community.general.pam_limits:\n    domain: james\n    limit_type: '-'\n    limit_item: memlock\n    value: unlimited\n    comment: unlimited memory lock for james\n\n- name: Add or modify hard nofile limits for wildcard domain\n  community.general.pam_limits:\n    domain: '*'\n    limit_type: hard\n    limit_item: nofile\n    value: 39693561\n"
  },
  "community.general.pamd": {
    "doc": {
      "description": "Edit PAM service's type, control, module path and module arguments.\nIn order for a PAM rule to be modified, the type, control and module_path must match an existing rule. See man(5) pam.d for details.",
      "has_action": false,
      "notes": "This module does not handle authselect profiles.",
      "options": {
        "backup": {
          "aliases": [],
          "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "control": {
          "aliases": [],
          "description": "The control of the PAM rule being modified.\nThis may be a complicated control with brackets. If this is the case, be sure to put \"[bracketed controls]\" in quotes.\nThe C(type), C(control) and C(module_path) all must match a rule to be modified.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "module_arguments": {
          "aliases": [],
          "description": "When state is C(updated), the module_arguments will replace existing module_arguments.\nWhen state is C(args_absent) args matching those listed in module_arguments will be removed.\nWhen state is C(args_present) any args listed in module_arguments are added if missing from the existing rule.\nFurthermore, if the module argument takes a value denoted by C(=), the value will be changed to that specified in module_arguments.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "module_path": {
          "aliases": [],
          "description": "The module path of the PAM rule being modified.\nThe C(type), C(control) and C(module_path) all must match a rule to be modified.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name generally refers to the PAM service file to change, for example system-auth.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_control": {
          "aliases": [],
          "description": "The new control to assign to the new rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_module_path": {
          "aliases": [],
          "description": "The new module path to be assigned to the new rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_type": {
          "aliases": [],
          "description": "The new type to assign to the new rule.",
          "type": "str",
          "required": false,
          "choices": [
            "account",
            "-account",
            "auth",
            "-auth",
            "password",
            "-password",
            "session",
            "-session"
          ],
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "This is the path to the PAM service files.",
          "default": "/etc/pam.d",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The default of C(updated) will modify an existing rule if type, control and module_path all match an existing rule.\nWith C(before), the new rule will be inserted before a rule matching type, control and module_path.\nSimilarly, with C(after), the new rule will be inserted after an existing rulematching type, control and module_path.\nWith either C(before) or C(after) new_type, new_control, and new_module_path must all be specified.\nIf state is C(args_absent) or C(args_present), new_type, new_control, and new_module_path will be ignored.\nState C(absent) will remove the rule.  The 'absent' state was added in Ansible 2.4.",
          "default": "updated",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "before",
            "after",
            "args_absent",
            "args_present",
            "updated"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of the PAM rule being modified.\nThe C(type), C(control) and C(module_path) all must match a rule to be modified.",
          "type": "str",
          "required": true,
          "choices": [
            "account",
            "-account",
            "auth",
            "-auth",
            "password",
            "-password",
            "session",
            "-session"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage PAM Modules"
    },
    "examples": "\n- name: Update pamd rule's control in /etc/pam.d/system-auth\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    new_control: sufficient\n\n- name: Update pamd rule's complex control in /etc/pam.d/system-auth\n  community.general.pamd:\n    name: system-auth\n    type: session\n    control: '[success=1 default=ignore]'\n    module_path: pam_succeed_if.so\n    new_control: '[success=2 default=ignore]'\n\n- name: Insert a new rule before an existing rule\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    new_type: auth\n    new_control: sufficient\n    new_module_path: pam_faillock.so\n    state: before\n\n- name: Insert a new rule pam_wheel.so with argument 'use_uid' after an \\\n        existing rule pam_rootok.so\n  community.general.pamd:\n    name: su\n    type: auth\n    control: sufficient\n    module_path: pam_rootok.so\n    new_type: auth\n    new_control: required\n    new_module_path: pam_wheel.so\n    module_arguments: 'use_uid'\n    state: after\n\n- name: Remove module arguments from an existing rule\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    module_arguments: ''\n    state: updated\n\n- name: Replace all module arguments in an existing rule\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    module_arguments: 'preauth\n        silent\n        deny=3\n        unlock_time=604800\n        fail_interval=900'\n    state: updated\n\n- name: Remove specific arguments from a rule\n  community.general.pamd:\n    name: system-auth\n    type: session\n    control: '[success=1 default=ignore]'\n    module_path: pam_succeed_if.so\n    module_arguments: crond,quiet\n    state: args_absent\n\n- name: Ensure specific arguments are present in a rule\n  community.general.pamd:\n    name: system-auth\n    type: session\n    control: '[success=1 default=ignore]'\n    module_path: pam_succeed_if.so\n    module_arguments: crond,quiet\n    state: args_present\n\n- name: Ensure specific arguments are present in a rule (alternative)\n  community.general.pamd:\n    name: system-auth\n    type: session\n    control: '[success=1 default=ignore]'\n    module_path: pam_succeed_if.so\n    module_arguments:\n    - crond\n    - quiet\n    state: args_present\n\n- name: Module arguments requiring commas must be listed as a Yaml list\n  community.general.pamd:\n    name: special-module\n    type: account\n    control: required\n    module_path: pam_access.so\n    module_arguments:\n    - listsep=,\n    state: args_present\n\n- name: Update specific argument value in a rule\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    module_arguments: 'fail_interval=300'\n    state: args_present\n\n- name: Add pam common-auth rule for duo\n  community.general.pamd:\n    name: common-auth\n    new_type: auth\n    new_control: '[success=1 default=ignore]'\n    new_module_path: '/lib64/security/pam_duo.so'\n    state: after\n    type: auth\n    module_path: pam_sss.so\n    control: 'requisite'\n"
  },
  "community.general.parted": {
    "doc": {
      "description": "This module allows configuring block device partition using the C(parted) command line tool. For a full description of the fields and the options check the GNU parted manual.",
      "has_action": false,
      "notes": "When fetching information about a new disk and when the version of parted installed on the system is before version 3.1, the module queries the kernel through C(/sys/) to obtain disk information. In this case the units CHS and CYL are not supported.\nNegative C(part_start) start values were rejected if C(fs_type) was not given. This bug was fixed in parted 3.2.153. If you want to use negative C(part_start), specify C(fs_type) as well or make sure your system contains newer parted.",
      "options": {
        "align": {
          "aliases": [],
          "description": "Set alignment for newly created partitions. Use 'undefined' for parted default aligment.",
          "default": "optimal",
          "type": "str",
          "required": false,
          "choices": [
            "cylinder",
            "minimal",
            "none",
            "optimal",
            "undefined"
          ],
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "The block device (disk) where to operate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "flags": {
          "aliases": [],
          "description": "A list of the flags that has to be set on the partition.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "fs_type": {
          "aliases": [],
          "description": "If specified and the partition does not exist, will set filesystem type to given partition.\nParameter optional, but see notes below about negative C(part_start) values.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Disk label type to use.\nIf C(device) already contains different label, it will be changed to C(label) and any previous partitions will be lost.",
          "default": "msdos",
          "type": "str",
          "required": false,
          "choices": [
            "aix",
            "amiga",
            "bsd",
            "dvh",
            "gpt",
            "loop",
            "mac",
            "msdos",
            "pc98",
            "sun"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sets the name for the partition number (GPT, Mac, MIPS and PC98 only).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number": {
          "aliases": [],
          "description": "The number of the partition to work with or the number of the partition that will be created.\nRequired when performing any action on the disk, except fetching information.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "part_end": {
          "aliases": [],
          "description": "Where the partition will end as offset from the beginning of the disk, that is, the \"distance\" from the start of the disk. Negative numbers specify distance from the end of the disk.\nThe distance can be specified with all the units supported by parted (except compat) and it is case sensitive, e.g. C(10GiB), C(15%).",
          "default": "100%",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "part_start": {
          "aliases": [],
          "description": "Where the partition will start as offset from the beginning of the disk, that is, the \"distance\" from the start of the disk. Negative numbers specify distance from the end of the disk.\nThe distance can be specified with all the units supported by parted (except compat) and it is case sensitive, e.g. C(10GiB), C(15%).\nUsing negative values may require setting of C(fs_type) (see notes).",
          "default": "0%",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "part_type": {
          "aliases": [],
          "description": "May be specified only with 'msdos' or 'dvh' partition tables.\nA C(name) must be specified for a 'gpt' partition table.\nNeither C(part_type) nor C(name) may be used with a 'sun' partition table.",
          "default": "primary",
          "type": "str",
          "required": false,
          "choices": [
            "extended",
            "logical",
            "primary"
          ],
          "suboptions": {}
        },
        "resize": {
          "aliases": [],
          "description": "Call C(resizepart) on existing partitions to match the size specified by I(part_end).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create or delete a partition.\nIf set to C(info) the module will only return the device information.",
          "default": "info",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "info"
          ],
          "suboptions": {}
        },
        "unit": {
          "aliases": [],
          "description": "Selects the current default unit that Parted will use to display locations and capacities on the disk and to interpret those given by the user if they are not suffixed by an unit.\nWhen fetching information about a disk, it is always recommended to specify a unit.",
          "default": "KiB",
          "type": "str",
          "required": false,
          "choices": [
            "s",
            "B",
            "KB",
            "KiB",
            "MB",
            "MiB",
            "GB",
            "GiB",
            "TB",
            "TiB",
            "%",
            "cyl",
            "chs",
            "compact"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "This module requires parted version 1.8.3 and above",
        "align option (except 'undefined') requires parted 2.1 and above",
        "If the version of parted is below 3.1, it requires a Linux version running the sysfs file system C(/sys/)."
      ],
      "short_description": "Configure block device partitions"
    },
    "examples": "\n- name: Create a new ext4 primary partition\n  community.general.parted:\n    device: /dev/sdb\n    number: 1\n    state: present\n    fs_type: ext4\n\n- name: Remove partition number 1\n  community.general.parted:\n    device: /dev/sdb\n    number: 1\n    state: absent\n\n- name: Create a new primary partition with a size of 1GiB\n  community.general.parted:\n    device: /dev/sdb\n    number: 1\n    state: present\n    part_end: 1GiB\n\n- name: Create a new primary partition for LVM\n  community.general.parted:\n    device: /dev/sdb\n    number: 2\n    flags: [ lvm ]\n    state: present\n    part_start: 1GiB\n\n- name: Create a new primary partition with a size of 1GiB at disk's end\n  community.general.parted:\n    device: /dev/sdb\n    number: 3\n    state: present\n    fs_type: ext3\n    part_start: -1GiB\n\n# Example on how to read info and reuse it in subsequent task\n- name: Read device information (always use unit when probing)\n  community.general.parted: device=/dev/sdb unit=MiB\n  register: sdb_info\n\n- name: Remove all partitions from disk\n  community.general.parted:\n    device: /dev/sdb\n    number: '{{ item.num }}'\n    state: absent\n  loop: '{{ sdb_info.partitions }}'\n\n- name: Extend an existing partition to fill all available space\n  community.general.parted:\n    device: /dev/sdb\n    number: \"{{ sdb_info.partitions | length }}\"\n    part_end: \"100%\"\n    resize: true\n    state: present\n"
  },
  "community.general.pear": {
    "doc": {
      "description": "Manage PHP packages with the pear package manager.",
      "has_action": false,
      "options": {
        "executable": {
          "aliases": [],
          "description": "Path to the pear executable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "Name of the package to install, upgrade, or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "prompts": {
          "aliases": [],
          "description": "List of regular expressions that can be used to detect prompts during pear package installation to answer the expected question.\nPrompts will be processed in the same order as the packages list.\nYou can optionnally specify an answer to any question in the list.\nIf no answer is provided, the list item will only contain the regular expression.\nTo specify an answer, the item will be a dict with the regular expression as key and the answer as value C(my_regular_expression: 'an_answer').\nYou can provide a list containing items with or without answer.\nA prompt list can be shorter or longer than the packages list but will issue a warning.\nIf you want to specify that a package will not need prompts in the middle of a list,  C(null).",
          "type": "list",
          "required": false,
          "elements": "raw",
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "installed",
            "latest",
            "absent",
            "removed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage pear/pecl packages"
    },
    "examples": "\n- name: Install pear package\n  community.general.pear:\n    name: Net_URL2\n    state: present\n\n- name: Install pecl package\n  community.general.pear:\n    name: pecl/json_post\n    state: present\n\n- name: Install pecl package with expected prompt\n  community.general.pear:\n    name: pecl/apcu\n    state: present\n    prompts:\n        - (.*)Enable internal debugging in APCu \\[no\\]\n\n- name: Install pecl package with expected prompt and an answer\n  community.general.pear:\n    name: pecl/apcu\n    state: present\n    prompts:\n        - (.*)Enable internal debugging in APCu \\[no\\]: \"yes\"\n\n- name: Install multiple pear/pecl packages at once with prompts.\n    Prompts will be processed on the same order as the packages order.\n    If there is more prompts than packages, packages without prompts will be installed without any prompt expected.\n    If there is more packages than prompts, additionnal prompts will be ignored.\n  community.general.pear:\n    name: pecl/gnupg, pecl/apcu\n    state: present\n    prompts:\n      - I am a test prompt because gnupg doesnt asks anything\n      - (.*)Enable internal debugging in APCu \\[no\\]: \"yes\"\n\n- name: Install multiple pear/pecl packages at once skipping the first prompt.\n    Prompts will be processed on the same order as the packages order.\n    If there is more prompts than packages, packages without prompts will be installed without any prompt expected.\n    If there is more packages than prompts, additionnal prompts will be ignored.\n  community.general.pear:\n    name: pecl/gnupg, pecl/apcu\n    state: present\n    prompts:\n      - null\n      - (.*)Enable internal debugging in APCu \\[no\\]: \"yes\"\n\n- name: Upgrade package\n  community.general.pear:\n    name: Net_URL2\n    state: latest\n\n- name: Remove packages\n  community.general.pear:\n    name: Net_URL2,pecl/json_post\n    state: absent\n"
  },
  "community.general.pids": {
    "doc": {
      "description": "Retrieves a list of PIDs of given process name in Ansible controller/controlled machines.Returns an empty list if no process in that name exists.",
      "has_action": false,
      "options": {
        "ignore_case": {
          "aliases": [],
          "description": "Ignore case in pattern if using the I(pattern) option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the process(es) you want to get PID(s) for.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "The pattern (regular expression) to match the process(es) you want to get PID(s) for.",
          "type": "str",
          "required": false,
          "version_added": "3.0.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psutil(python module)"
      ],
      "short_description": "Retrieves process IDs list if the process is running otherwise return empty list"
    },
    "examples": "\n# Pass the process name\n- name: Getting process IDs of the process\n  community.general.pids:\n      name: python\n  register: pids_of_python\n\n- name: Printing the process IDs obtained\n  ansible.builtin.debug:\n    msg: \"PIDS of python:{{pids_of_python.pids|join(',')}}\"\n\n- name: Getting process IDs of processes matching pattern\n  community.general.pids:\n    pattern: python(2(\\.7)?|3(\\.6)?)?\\s+myapp\\.py\n  register: myapp_pids\n"
  },
  "community.general.pingdom": {
    "doc": {
      "description": "This module will let you pause/unpause Pingdom alerts",
      "has_action": false,
      "notes": "This module does not yet have support to add/remove checks.",
      "options": {
        "checkid": {
          "aliases": [],
          "description": "Pingdom ID of the check.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Pingdom API key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "passwd": {
          "aliases": [],
          "description": "Pingdom user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define whether or not the check should be running or paused.",
          "type": "str",
          "required": true,
          "choices": [
            "running",
            "paused",
            "started",
            "stopped"
          ],
          "suboptions": {}
        },
        "uid": {
          "aliases": [],
          "description": "Pingdom user ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "This pingdom python library: https://github.com/mbabineau/pingdom-python"
      ],
      "short_description": "Pause/unpause Pingdom alerts"
    },
    "examples": "\n- name: Pause the check with the ID of 12345\n  community.general.pingdom:\n    uid: example@example.com\n    passwd: password123\n    key: apipassword123\n    checkid: 12345\n    state: paused\n\n- name: Unpause the check with the ID of 12345\n  community.general.pingdom:\n    uid: example@example.com\n    passwd: password123\n    key: apipassword123\n    checkid: 12345\n    state: running\n"
  },
  "community.general.pip_package_info": {
    "doc": {
      "description": "Return information about installed pip packages",
      "has_action": false,
      "options": {
        "clients": {
          "aliases": [],
          "description": "A list of the pip executables that will be used to get the packages. They can be supplied with the full path or just the executable name, i.e `pip3.7`.",
          "default": "['pip']",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        }
      },
      "requirements": [
        "The requested pip executables must be installed on the target."
      ],
      "short_description": "pip package information"
    },
    "examples": "\n- name: Just get the list from default pip\n  community.general.pip_package_info:\n\n- name: Get the facts for default pip, pip2 and pip3.6\n  community.general.pip_package_info:\n    clients: ['pip', 'pip2', 'pip3.6']\n\n- name: Get from specific paths (virtualenvs?)\n  community.general.pip_package_info:\n    clients: '/home/me/projec42/python/pip3.5'\n"
  },
  "community.general.pipx": {
    "doc": {
      "description": "Manage Python applications installed in isolated virtualenvs using pipx.",
      "has_action": false,
      "notes": "This module does not install the C(pipx) python package, however that can be easily done with the module M(ansible.builtin.pip).\nThis module does not require C(pipx) to be in the shell C(PATH), but it must be loadable by Python as a module.\nPlease note that C(pipx) requires Python 3.6 or above.\nThis first implementation does not verify whether a specified version constraint has been installed or not. Hence, when using version operators, C(pipx) module will always try to execute the operation, even when the application was previously installed. This feature will be added in the future.\n\nSee also the C(pipx) documentation at U(https://pypa.github.io/pipx/).",
      "options": {
        "executable": {
          "aliases": [],
          "description": "Path to the C(pipx) installed in the system.\nIf not specified, the module will use C(python -m pipx) to run the tool, using the same Python interpreter as ansible itself.\n",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force modification of the application's virtual environment. See C(pipx) for details.\nOnly used when I(state=install), I(state=upgrade), I(state=upgrade_all), or I(state=inject).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "include_injected": {
          "aliases": [],
          "description": "Upgrade the injected packages along with the application.\nOnly used when I(state=upgrade) or I(state=upgrade_all).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "index_url": {
          "aliases": [],
          "description": "Base URL of Python Package Index.\nOnly used when I(state=install), I(state=upgrade), or I(state=inject).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inject_packages": {
          "aliases": [],
          "description": "Packages to be injected into an existing virtual environment.\nOnly used when I(state=inject).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "install_deps": {
          "aliases": [],
          "description": "Include applications of dependent packages.\nOnly used when I(state=install) or I(state=upgrade).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the application to be installed. It must to be a simple package name. For passing package specifications or installing from URLs or directories, please use the I(source) option.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "python": {
          "aliases": [],
          "description": "Python version to be used when creating the application virtual environment. Must be 3.6+.\nOnly used when I(state=install), I(state=reinstall), or I(state=reinstall_all).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "If the application source, such as a package with version specifier, or an URL, directory or any other accepted specification. See C(pipx) documentation for more details.\n\nWhen specified, the C(pipx) command will use I(source) instead of I(name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state for the application.\nThe states C(present) and C(absent) are aliases to C(install) and C(uninstall), respectively.",
          "default": "install",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "install",
            "uninstall",
            "uninstall_all",
            "inject",
            "upgrade",
            "upgrade_all",
            "reinstall",
            "reinstall_all"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages applications installed with pipx",
      "version_added": "3.8.0"
    },
    "examples": "\n- name: Install tox\n  community.general.pipx:\n    name: tox\n\n- name: Install tox from git repository\n  community.general.pipx:\n    name: tox\n    source: git+https://github.com/tox-dev/tox.git\n\n- name: Upgrade tox\n  community.general.pipx:\n    name: tox\n    state: upgrade\n\n- name: Reinstall black with specific Python version\n  community.general.pipx:\n    name: black\n    state: reinstall\n    python: 3.7\n\n- name: Uninstall pycowsay\n  community.general.pipx:\n    name: pycowsay\n    state: absent\n"
  },
  "community.general.pkg5": {
    "doc": {
      "description": "IPS packages are the native packages in Solaris 11 and higher.",
      "has_action": false,
      "notes": "The naming of IPS packages is explained at U(http://www.oracle.com/technetwork/articles/servers-storage-admin/ips-package-versioning-2232906.html).",
      "options": {
        "accept_licenses": {
          "aliases": [
            "accept",
            "accept_licences"
          ],
          "description": "Accept any licences.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "be_name": {
          "aliases": [],
          "description": "Creates a new boot environment with the given name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "An FRMI of the package(s) to be installed/removed/updated.\nMultiple packages may be specified, separated by C(,).",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "refresh": {
          "aliases": [],
          "description": "Refresh publishers before execution.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to install (I(present), I(latest)), or remove (I(absent)) a package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "latest",
            "present",
            "installed",
            "removed",
            "uninstalled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages packages with the Solaris 11 Image Packaging System"
    },
    "examples": "\n- name: Install Vim\n  community.general.pkg5:\n    name: editor/vim\n\n- name: Install Vim without refreshing publishers\n  community.general.pkg5:\n    name: editor/vim\n    refresh: no\n\n- name: Remove finger daemon\n  community.general.pkg5:\n    name: service/network/finger\n    state: absent\n\n- name: Install several packages at once\n  community.general.pkg5:\n    name:\n    - /file/gnu-findutils\n    - /text/gnu-grep\n"
  },
  "community.general.pkg5_publisher": {
    "doc": {
      "description": "IPS packages are the native packages in Solaris 11 and higher.\nThis modules will configure which publishers a client will download IPS packages from.",
      "has_action": false,
      "options": {
        "enabled": {
          "aliases": [],
          "description": "Is the repository enabled or disabled?",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mirror": {
          "aliases": [],
          "description": "A path or URL to the repository mirror.\nMultiple values may be provided.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "publisher"
          ],
          "description": "The publisher's name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "origin": {
          "aliases": [],
          "description": "A path or URL to the repository.\nMultiple values may be provided.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to ensure that a publisher is present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "sticky": {
          "aliases": [],
          "description": "Packages installed from a sticky repository can only receive updates from that repository.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Solaris 11 Image Packaging System publishers"
    },
    "examples": "\n- name: Fetch packages for the solaris publisher direct from Oracle\n  community.general.pkg5_publisher:\n    name: solaris\n    sticky: true\n    origin: https://pkg.oracle.com/solaris/support/\n\n- name: Configure a publisher for locally-produced packages\n  community.general.pkg5_publisher:\n    name: site\n    origin: 'https://pkg.example.com/site/'\n"
  },
  "community.general.pkgin": {
    "doc": {
      "description": "The standard package manager for SmartOS, but also usable on NetBSD or any OS that uses C(pkgsrc).  (Home: U(http://pkgin.net/))",
      "has_action": false,
      "notes": "Known bug with pkgin < 0.8.0: if a package is removed and another package depends on it, the other package will be silently removed as well.  New to Ansible 1.9: check-mode support.",
      "options": {
        "clean": {
          "aliases": [],
          "description": "Clean packages cache",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force package reinstall",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "full_upgrade": {
          "aliases": [],
          "description": "Upgrade all packages to their newer versions",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "Name of package to install/remove;\nmultiple names may be given, separated by commas",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Intended state of the package",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [],
          "description": "Update repository database. Can be run with other steps or on it's own.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upgrade": {
          "aliases": [],
          "description": "Upgrade main packages to their newer versions",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Package manager for SmartOS, NetBSD, et al."
    },
    "examples": "\n- name: Install package foo\n  community.general.pkgin:\n    name: foo\n    state: present\n\n- name: Install specific version of foo package\n  community.general.pkgin:\n    name: foo-2.0.1\n    state: present\n\n- name: Update cache and install foo package\n  community.general.pkgin:\n    name: foo\n    update_cache: yes\n\n- name: Remove package foo\n  community.general.pkgin:\n    name: foo\n    state: absent\n\n- name: Remove packages foo and bar\n  community.general.pkgin:\n    name: foo,bar\n    state: absent\n\n- name: Update repositories as a separate step\n  community.general.pkgin:\n    update_cache: yes\n\n- name: Upgrade main packages (equivalent to pkgin upgrade)\n  community.general.pkgin:\n    upgrade: yes\n\n- name: Upgrade all packages (equivalent to pkgin full-upgrade)\n  community.general.pkgin:\n    full_upgrade: yes\n\n- name: Force-upgrade all packages (equivalent to pkgin -F full-upgrade)\n  community.general.pkgin:\n    full_upgrade: yes\n    force: yes\n\n- name: Clean packages cache (equivalent to pkgin clean)\n  community.general.pkgin:\n    clean: yes\n"
  },
  "community.general.pkgng": {
    "doc": {
      "description": "Manage binary packages for FreeBSD using 'pkgng' which is available in versions after 9.0.",
      "has_action": false,
      "notes": "When using pkgsite, be careful that already in cache packages won't be downloaded again.\nWhen used with a `loop:` each package will be processed individually, it is much more efficient to pass the list directly to the `name` option.",
      "options": {
        "annotation": {
          "aliases": [],
          "description": "A list of keyvalue-pairs of the form C(<+/-/:><key>[=<value>]). A C(+) denotes adding an annotation, a C(-) denotes removing an annotation, and C(:) denotes modifying an annotation. If setting or modifying annotations, a value must be provided.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "autoremove": {
          "aliases": [],
          "description": "Remove automatically installed packages which are no longer needed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cached": {
          "aliases": [],
          "description": "Use local package base instead of fetching an updated one.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "chroot": {
          "aliases": [],
          "description": "Pkg will chroot in the specified environment.\nCan not be used together with I(rootdir) or I(jail) options.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "ignore_osver": {
          "aliases": [],
          "description": "Ignore FreeBSD OS version check, useful on -STABLE and -CURRENT branches.\nDefines the C(IGNORE_OSVERSION) environment variable.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "jail": {
          "aliases": [],
          "description": "Pkg will execute in the given jail name or id.\nCan not be used together with I(chroot) or I(rootdir) options.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "Name or list of names of packages to install/remove.\nWith I(name=*), I(state: latest) will operate, but I(state: present) and I(state: absent) will be noops.\nWarning: In Ansible 2.9 and earlier this module had a misfeature where I(name=*) with I(state: latest) or I(state: present) would install every package from every package repository, filling up the machines disk. Avoid using them unless you are certain that your role will only be used with newer versions.\n",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "pkgsite": {
          "aliases": [],
          "description": "For pkgng versions before 1.1.4, specify packagesite to use for downloading packages. If not specified, use settings from C(/usr/local/etc/pkg.conf).\nFor newer pkgng versions, specify a the name of a repository configured in C(/usr/local/etc/pkg/repos).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rootdir": {
          "aliases": [],
          "description": "For pkgng versions 1.5 and later, pkg will install all packages within the specified root directory.\nCan not be used together with I(chroot) or I(jail) options.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the package.\nNote: \"latest\" added in 2.7",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "latest",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Package manager for FreeBSD >= 9.0"
    },
    "examples": "\n- name: Install package foo\n  community.general.pkgng:\n    name: foo\n    state: present\n\n- name: Annotate package foo and bar\n  community.general.pkgng:\n    name:\n      - foo\n      - bar\n    annotation: '+test1=baz,-test2,:test3=foobar'\n\n- name: Remove packages foo and bar\n  community.general.pkgng:\n    name:\n      - foo\n      - bar\n    state: absent\n\n# \"latest\" support added in 2.7\n- name: Upgrade package baz\n  community.general.pkgng:\n    name: baz\n    state: latest\n\n- name: Upgrade all installed packages (see warning for the name option first!)\n  community.general.pkgng:\n    name: \"*\"\n    state: latest\n"
  },
  "community.general.pkgutil": {
    "doc": {
      "description": "This module installs, updates and removes packages from the OpenCSW project for Solaris.\nUnlike the M(community.general.svr4pkg) module, it will resolve and download dependencies.\nSee U(https://www.opencsw.org/) for more information about the project.",
      "has_action": false,
      "notes": "In order to check the availability of packages, the catalog cache under C(/var/opt/csw/pkgutil) may be refreshed even in check mode.",
      "options": {
        "force": {
          "aliases": [],
          "description": "To allow the update process to downgrade packages to match what is present in the repository, set this to C(yes).\nThis is useful for rolling back to stable from testing, or similar operations.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "The name of the package.\nWhen using C(state=latest), this can be C('*'), which updates all installed packages managed by pkgutil.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "site": {
          "aliases": [],
          "description": "The repository path to install the package from.\nIts global definition is in C(/etc/opt/csw/pkgutil.conf).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to install (C(present)/C(installed)), or remove (C(absent)/C(removed)) packages.\nThe upgrade (C(latest)) operation will update/install the packages to the latest version available.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "installed",
            "latest",
            "present",
            "removed"
          ],
          "suboptions": {}
        },
        "update_catalog": {
          "aliases": [],
          "description": "If you always want to refresh your catalog from the mirror, even when it's not stale, set this to C(yes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "OpenCSW package management on Solaris"
    },
    "examples": "\n- name: Install a package\n  community.general.pkgutil:\n    name: CSWcommon\n    state: present\n\n- name: Install a package from a specific repository\n  community.general.pkgutil:\n    name: CSWnrpe\n    site: ftp://myinternal.repo/opencsw/kiel\n    state: latest\n\n- name: Remove a package\n  community.general.pkgutil:\n    name: CSWtop\n    state: absent\n\n- name: Install several packages\n  community.general.pkgutil:\n    name:\n    - CSWsudo\n    - CSWtop\n    state: present\n\n- name: Update all packages\n  community.general.pkgutil:\n    name: '*'\n    state: latest\n\n- name: Update all packages and force versions to match latest in catalog\n  community.general.pkgutil:\n    name: '*'\n    state: latest\n    force: yes\n"
  },
  "community.general.portage": {
    "doc": {
      "description": "Manages Gentoo packages",
      "has_action": false,
      "options": {
        "changed_use": {
          "aliases": [],
          "description": "Include installed packages where USE flags have changed, except when\nflags that the user has not enabled are added or removed\n(--changed-use)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "deep": {
          "aliases": [],
          "description": "Consider the entire dependency tree of packages (--deep)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "depclean": {
          "aliases": [],
          "description": "Remove packages not needed by explicitly merged packages (--depclean)\nIf no package is specified, clean up the world's dependencies\nOtherwise, --depclean serves as a dependency aware version of --unmerge",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "getbinpkg": {
          "aliases": [],
          "description": "Prefer packages specified at C(PORTAGE_BINHOST) in C(make.conf).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "getbinpkgonly": {
          "aliases": [],
          "description": "Merge only packages specified at C(PORTAGE_BINHOST) in C(make.conf).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "jobs": {
          "aliases": [],
          "description": "Specifies the number of packages to build simultaneously.\nSince version 2.6: Value of 0 or False resets any previously added\n--jobs setting values",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "keepgoing": {
          "aliases": [],
          "description": "Continue as much as possible after an error.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "loadavg": {
          "aliases": [],
          "description": "Specifies that no new builds should be started if there are\nother builds running and the load average is at least LOAD\nSince version 2.6: Value of 0 or False resets any previously added\n--load-average setting values",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "newuse": {
          "aliases": [],
          "description": "Include installed packages where USE flags have changed (--newuse)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nodeps": {
          "aliases": [],
          "description": "Only merge packages but not their dependencies (--nodeps)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "noreplace": {
          "aliases": [],
          "description": "Do not re-emerge installed packages (--noreplace)",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "oneshot": {
          "aliases": [],
          "description": "Do not add the packages to the world file (--oneshot)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "onlydeps": {
          "aliases": [],
          "description": "Only merge packages' dependencies but not the packages (--onlydeps)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "package": {
          "aliases": [
            "name"
          ],
          "description": "Package atom or set, e.g. C(sys-apps/foo) or C(>foo-2.13) or C(@world)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "quiet": {
          "aliases": [],
          "description": "Run emerge in quiet mode (--quiet)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "quietbuild": {
          "aliases": [],
          "description": "Redirect all build output to logs alone, and do not display it\non stdout (--quiet-build)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "quietfail": {
          "aliases": [],
          "description": "Suppresses display of the build log on stdout (--quiet-fail)\nOnly the die message and the path of the build log will be\ndisplayed on stdout.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the package atom",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "installed",
            "emerged",
            "absent",
            "removed",
            "unmerged",
            "latest"
          ],
          "suboptions": {}
        },
        "sync": {
          "aliases": [],
          "description": "Sync package repositories first\nIf yes, perform \"emerge --sync\"\nIf web, perform \"emerge-webrsync\"",
          "type": "str",
          "required": false,
          "choices": [
            "web",
            "yes",
            "no"
          ],
          "suboptions": {}
        },
        "update": {
          "aliases": [],
          "description": "Update packages to the best version available (--update)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "usepkg": {
          "aliases": [],
          "description": "Tries to use the binary package(s) in the locally available packages directory.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "usepkgonly": {
          "aliases": [],
          "description": "Merge only binaries (no compiling).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbose": {
          "aliases": [],
          "description": "Run emerge in verbose mode (--verbose)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "gentoolkit"
      ],
      "short_description": "Package manager for Gentoo"
    },
    "examples": "\n- name: Make sure package foo is installed\n  community.general.portage:\n    package: foo\n    state: present\n\n- name: Make sure package foo is not installed\n  community.general.portage:\n    package: foo\n    state: absent\n\n- name: Update package foo to the latest version (os specific alternative to latest)\n  community.general.portage:\n    package: foo\n    update: yes\n\n- name: Install package foo using PORTAGE_BINHOST setup\n  community.general.portage:\n    package: foo\n    getbinpkg: yes\n\n- name: Re-install world from binary packages only and do not allow any compiling\n  community.general.portage:\n    package: '@world'\n    usepkgonly: yes\n\n- name: Sync repositories and update world\n  community.general.portage:\n    package: '@world'\n    update: yes\n    deep: yes\n    sync: yes\n\n- name: Remove unneeded packages\n  community.general.portage:\n    depclean: yes\n\n- name: Remove package foo if it is not explicitly needed\n  community.general.portage:\n    package: foo\n    state: absent\n    depclean: yes\n"
  },
  "community.general.portinstall": {
    "doc": {
      "description": "Manage packages for FreeBSD using 'portinstall'.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "name of package to install/remove",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "state of the package",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "use_packages": {
          "aliases": [],
          "description": "use packages instead of ports whenever available",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Installing packages from FreeBSD's ports system"
    },
    "examples": "\n- name: Install package foo\n  community.general.portinstall:\n    name: foo\n    state: present\n\n- name: Install package security/cyrus-sasl2-saslauthd\n  community.general.portinstall:\n    name: security/cyrus-sasl2-saslauthd\n    state: present\n\n- name: Remove packages foo and bar\n  community.general.portinstall:\n    name: foo,bar\n    state: absent\n"
  },
  "community.general.pritunl_org": {
    "doc": {
      "description": "A module to manage Pritunl organizations using the Pritunl API.",
      "has_action": false,
      "options": {
        "force": {
          "aliases": [],
          "description": "If I(force) is C(true) and I(state) is C(absent), the module will delete the organization, no matter if it contains users or not. By default I(force) is C(false), which will cause the module to fail the deletion of the organization when it contains users.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "org"
          ],
          "description": "The name of the organization to manage in Pritunl.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_api_secret": {
          "aliases": [],
          "description": "API Secret found in Administrators > USERNAME > API Secret.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_api_token": {
          "aliases": [],
          "description": "API Token of a Pritunl admin user.\nIt needs to be enabled in Administrators > USERNAME > Enable Token Authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_url": {
          "aliases": [],
          "description": "URL and port of the Pritunl server on which the API is enabled.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(present), the module adds organization I(name) to Pritunl. If C(absent), attempt to delete the organization from Pritunl (please read about I(force) usage).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If certificates should be validated or not.\nThis should never be set to C(false), except if you are very sure that your connection to the server can not be subject to a Man In The Middle attack.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Pritunl Organizations using the Pritunl API",
      "version_added": "2.5.0"
    },
    "examples": "\n- name: Ensure the organization named MyOrg exists\n  community.general.pritunl_org:\n    state: present\n    name: MyOrg\n\n- name: Ensure the organization named MyOrg does not exist\n  community.general.pritunl_org:\n    state: absent\n    name: MyOrg\n"
  },
  "community.general.pritunl_org_info": {
    "doc": {
      "description": "A module to list Pritunl organizations using the Pritunl API.",
      "has_action": false,
      "options": {
        "organization": {
          "aliases": [
            "org"
          ],
          "description": "Name of the Pritunl organization to search for. If none provided, the module will return all Pritunl organizations.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pritunl_api_secret": {
          "aliases": [],
          "description": "API Secret found in Administrators > USERNAME > API Secret.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_api_token": {
          "aliases": [],
          "description": "API Token of a Pritunl admin user.\nIt needs to be enabled in Administrators > USERNAME > Enable Token Authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_url": {
          "aliases": [],
          "description": "URL and port of the Pritunl server on which the API is enabled.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If certificates should be validated or not.\nThis should never be set to C(false), except if you are very sure that your connection to the server can not be subject to a Man In The Middle attack.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "List Pritunl Organizations using the Pritunl API",
      "version_added": "2.5.0"
    },
    "examples": "\n- name: List all existing Pritunl organizations\n  community.general.pritunl_org_info:\n\n- name: Search for an organization named MyOrg\n  community.general.pritunl_user_info:\n    organization: MyOrg\n"
  },
  "community.general.pritunl_user": {
    "doc": {
      "description": "A module to manage Pritunl users using the Pritunl API.",
      "has_action": false,
      "options": {
        "organization": {
          "aliases": [
            "org"
          ],
          "description": "The name of the organization the user is part of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_api_secret": {
          "aliases": [],
          "description": "API Secret found in Administrators > USERNAME > API Secret.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_api_token": {
          "aliases": [],
          "description": "API Token of a Pritunl admin user.\nIt needs to be enabled in Administrators > USERNAME > Enable Token Authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_url": {
          "aliases": [],
          "description": "URL and port of the Pritunl server on which the API is enabled.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(present), the module adds user I(user_name) to the Pritunl I(organization). If C(absent), removes the user I(user_name) from the Pritunl I(organization).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user_disabled": {
          "aliases": [],
          "description": "Enable/Disable the user I(user_name).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user_email": {
          "aliases": [],
          "description": "Email address associated with the user I(user_name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_gravatar": {
          "aliases": [],
          "description": "Enable/Disable Gravatar usage for the user I(user_name).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user_groups": {
          "aliases": [],
          "description": "List of groups associated with the user I(user_name).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "user_name": {
          "aliases": [],
          "description": "Name of the user to create or delete from Pritunl.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user_type": {
          "aliases": [],
          "description": "Type of the user I(user_name).",
          "default": "client",
          "type": "str",
          "required": false,
          "choices": [
            "client",
            "server"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If certificates should be validated or not.\nThis should never be set to C(false), except if you are very sure that your connection to the server can not be subject to a Man In The Middle attack.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Pritunl Users using the Pritunl API",
      "version_added": "2.3.0"
    },
    "examples": "\n- name: Create the user Foo with email address foo@bar.com in MyOrg\n  community.general.pritunl_user:\n    state: present\n    name: MyOrg\n    user_name: Foo\n    user_email: foo@bar.com\n\n- name: Disable the user Foo but keep it in Pritunl\n  community.general.pritunl_user:\n    state: present\n    name: MyOrg\n    user_name: Foo\n    user_email: foo@bar.com\n    user_disabled: yes\n\n- name: Make sure the user Foo is not part of MyOrg anymore\n  community.general.pritunl_user:\n    state: absent\n    name: MyOrg\n    user_name: Foo\n"
  },
  "community.general.pritunl_user_info": {
    "doc": {
      "description": "A module to list Pritunl users using the Pritunl API.",
      "has_action": false,
      "options": {
        "organization": {
          "aliases": [
            "org"
          ],
          "description": "The name of the organization the user is part of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_api_secret": {
          "aliases": [],
          "description": "API Secret found in Administrators > USERNAME > API Secret.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_api_token": {
          "aliases": [],
          "description": "API Token of a Pritunl admin user.\nIt needs to be enabled in Administrators > USERNAME > Enable Token Authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pritunl_url": {
          "aliases": [],
          "description": "URL and port of the Pritunl server on which the API is enabled.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user_name": {
          "aliases": [],
          "description": "Name of the user to filter on Pritunl.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_type": {
          "aliases": [],
          "description": "Type of the user I(user_name).",
          "default": "client",
          "type": "str",
          "required": false,
          "choices": [
            "client",
            "server"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If certificates should be validated or not.\nThis should never be set to C(false), except if you are very sure that your connection to the server can not be subject to a Man In The Middle attack.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "List Pritunl Users using the Pritunl API",
      "version_added": "2.3.0"
    },
    "examples": "\n- name: List all existing users part of the organization MyOrg\n  community.general.pritunl_user_info:\n    state: list\n    organization: MyOrg\n\n- name: Search for the user named Florian part of the organization MyOrg\n  community.general.pritunl_user_info:\n    state: list\n    organization: MyOrg\n    user_name: Florian\n"
  },
  "community.general.profitbricks": {
    "doc": {
      "description": "Create, destroy, update, start, stop, and reboot a ProfitBricks virtual machine. When the virtual machine is created it can optionally wait for it to be 'running' before returning. This module has a dependency on profitbricks >= 1.0.0",
      "has_action": false,
      "options": {
        "assign_public_ip": {
          "aliases": [],
          "description": "This will assign the machine to the public LAN. If no LAN exists with public Internet access it is created.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_increment": {
          "aliases": [],
          "description": "Whether or not to increment a single number in the name for created virtual machines.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bus": {
          "aliases": [],
          "description": "The bus type for the volume.",
          "default": "VIRTIO",
          "type": "str",
          "required": false,
          "choices": [
            "IDE",
            "VIRTIO"
          ],
          "suboptions": {}
        },
        "cores": {
          "aliases": [],
          "description": "The number of CPU cores to allocate to the virtual machine.",
          "default": "2",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "The number of virtual machines to create.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_family": {
          "aliases": [],
          "description": "The CPU family type to allocate to the virtual machine.",
          "default": "AMD_OPTERON",
          "type": "str",
          "required": false,
          "choices": [
            "AMD_OPTERON",
            "INTEL_XEON"
          ],
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter to provision this virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_type": {
          "aliases": [],
          "description": "the type of disk to be allocated.",
          "default": "HDD",
          "type": "str",
          "required": false,
          "choices": [
            "SSD",
            "HDD"
          ],
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The system image ID for creating the virtual machine, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_password": {
          "aliases": [],
          "description": "Password set for the administrative user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_ids": {
          "aliases": [],
          "description": "list of instance ids, currently only used when state='absent' to remove instances.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "lan": {
          "aliases": [],
          "description": "The ID of the LAN you wish to add the servers to.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The datacenter location. Use only if you want to create the Datacenter or else this value is ignored.",
          "default": "us/las",
          "type": "str",
          "required": false,
          "choices": [
            "us/las",
            "de/fra",
            "de/fkb"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "The amount of memory to allocate to the virtual machine.",
          "default": "2048",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "remove_boot_volume": {
          "aliases": [],
          "description": "remove the bootVolume of the virtual machine you're destroying.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssh_keys": {
          "aliases": [],
          "description": "Public SSH keys allowing access to the virtual machine.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "create or terminate instances\nThe choices available are: C(running), C(stopped), C(absent), C(present).",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_password": {
          "aliases": [],
          "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_user": {
          "aliases": [],
          "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume_size": {
          "aliases": [],
          "description": "The size in GB of the boot volume.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state 'running' before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "profitbricks",
        "python >= 2.6"
      ],
      "short_description": "Create, destroy, start, stop, and reboot a ProfitBricks virtual machine."
    },
    "examples": "\n\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Provisioning example\n- name: Create three servers and enumerate their names\n  community.general.profitbricks:\n    datacenter: Tardis One\n    name: web%02d.stackpointcloud.com\n    cores: 4\n    ram: 2048\n    volume_size: 50\n    cpu_family: INTEL_XEON\n    image: a3eae284-a2fe-11e4-b187-5f1f641608c8\n    location: us/las\n    count: 3\n    assign_public_ip: true\n\n- name: Remove virtual machines\n  community.general.profitbricks:\n    datacenter: Tardis One\n    instance_ids:\n      - 'web001.stackpointcloud.com'\n      - 'web002.stackpointcloud.com'\n      - 'web003.stackpointcloud.com'\n    wait_timeout: 500\n    state: absent\n\n- name: Start virtual machines\n  community.general.profitbricks:\n    datacenter: Tardis One\n    instance_ids:\n      - 'web001.stackpointcloud.com'\n      - 'web002.stackpointcloud.com'\n      - 'web003.stackpointcloud.com'\n    wait_timeout: 500\n    state: running\n\n- name: Stop virtual machines\n  community.general.profitbricks:\n    datacenter: Tardis One\n    instance_ids:\n      - 'web001.stackpointcloud.com'\n      - 'web002.stackpointcloud.com'\n      - 'web003.stackpointcloud.com'\n    wait_timeout: 500\n    state: stopped\n"
  },
  "community.general.profitbricks_datacenter": {
    "doc": {
      "description": "This is a simple module that supports creating or removing vDCs. A vDC is required before you can create servers. This module has a dependency on profitbricks >= 1.0.0",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "The description of the virtual datacenter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The datacenter location.",
          "default": "us/las",
          "type": "str",
          "required": false,
          "choices": [
            "us/las",
            "de/fra",
            "de/fkb"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the virtual datacenter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or terminate datacenters.\nThe available choices are: C(present), C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_password": {
          "aliases": [],
          "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_user": {
          "aliases": [],
          "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the datacenter to be created before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "profitbricks"
      ],
      "short_description": "Create or destroy a ProfitBricks Virtual Datacenter."
    },
    "examples": "\n- name: Create a datacenter\n  community.general.profitbricks_datacenter:\n    datacenter: Tardis One\n    wait_timeout: 500\n\n- name: Destroy a datacenter (remove all servers, volumes, and other objects in the datacenter)\n  community.general.profitbricks_datacenter:\n    datacenter: Tardis One\n    wait_timeout: 500\n    state: absent\n"
  },
  "community.general.profitbricks_nic": {
    "doc": {
      "description": "This module allows you to create or restore a volume snapshot. This module has a dependency on profitbricks >= 1.0.0",
      "has_action": false,
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter in which to operate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "lan": {
          "aliases": [],
          "description": "The LAN to place the NIC on. You can pass a LAN that doesn't exist and it will be created. Required on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name or ID of the NIC. This is only required on deletes, but not on create.\nIf not specified, it defaults to a value based on UUID4.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "The server name or ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource\nThe available choices are: C(present), C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_password": {
          "aliases": [],
          "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "subscription_user": {
          "aliases": [],
          "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the operation to complete before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "profitbricks"
      ],
      "short_description": "Create or Remove a NIC."
    },
    "examples": "\n- name: Create a NIC\n  community.general.profitbricks_nic:\n    datacenter: Tardis One\n    server: node002\n    lan: 2\n    wait_timeout: 500\n    state: present\n\n- name: Remove a NIC\n  community.general.profitbricks_nic:\n    datacenter: Tardis One\n    server: node002\n    name: 7341c2454f\n    wait_timeout: 500\n    state: absent\n"
  },
  "community.general.profitbricks_volume": {
    "doc": {
      "description": "Allows you to create or remove a volume from a ProfitBricks datacenter. This module has a dependency on profitbricks >= 1.0.0",
      "has_action": false,
      "options": {
        "auto_increment": {
          "aliases": [],
          "description": "Whether or not to increment a single number in the name for created virtual machines.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bus": {
          "aliases": [],
          "description": "The bus type.",
          "default": "VIRTIO",
          "type": "str",
          "required": false,
          "choices": [
            "IDE",
            "VIRTIO"
          ],
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "The number of volumes you wish to create.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter in which to create the volumes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_type": {
          "aliases": [],
          "description": "The disk type of the volume.",
          "default": "HDD",
          "type": "str",
          "required": false,
          "choices": [
            "HDD",
            "SSD"
          ],
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The system image ID for the volume, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8. This can also be a snapshot image ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_password": {
          "aliases": [],
          "description": "Password set for the administrative user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_ids": {
          "aliases": [],
          "description": "list of instance ids, currently only used when state='absent' to remove instances.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "licence_type": {
          "aliases": [],
          "description": "The licence type for the volume. This is used when the image is non-standard.\nThe available choices are: C(LINUX), C(WINDOWS), C(UNKNOWN), C(OTHER).",
          "default": "UNKNOWN",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the volumes. You can enumerate the names using auto_increment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Server name to attach the volume to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "The size of the volume.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssh_keys": {
          "aliases": [],
          "description": "Public SSH keys allowing access to the virtual machine.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "create or terminate datacenters\nThe available choices are: C(present), C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_password": {
          "aliases": [],
          "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_user": {
          "aliases": [],
          "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the datacenter to be created before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "profitbricks"
      ],
      "short_description": "Create or destroy a volume."
    },
    "examples": "\n- name: Create multiple volumes\n  community.general.profitbricks_volume:\n    datacenter: Tardis One\n    name: vol%02d\n    count: 5\n    auto_increment: yes\n    wait_timeout: 500\n    state: present\n\n- name: Remove Volumes\n  community.general.profitbricks_volume:\n    datacenter: Tardis One\n    instance_ids:\n      - 'vol01'\n      - 'vol02'\n    wait_timeout: 500\n    state: absent\n"
  },
  "community.general.profitbricks_volume_attachments": {
    "doc": {
      "description": "Allows you to attach or detach a volume from a ProfitBricks server. This module has a dependency on profitbricks >= 1.0.0",
      "has_action": false,
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter in which to operate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "The name of the server you wish to detach or attach the volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource\nThe available choices are: C(present), C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_password": {
          "aliases": [],
          "description": "THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription_user": {
          "aliases": [],
          "description": "The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "The volume name or ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the operation to complete before returning",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "profitbricks"
      ],
      "short_description": "Attach or detach a volume."
    },
    "examples": "\n- name: Attach a volume\n  community.general.profitbricks_volume_attachments:\n    datacenter: Tardis One\n    server: node002\n    volume: vol01\n    wait_timeout: 500\n    state: present\n\n- name: Detach a volume\n  community.general.profitbricks_volume_attachments:\n    datacenter: Tardis One\n    server: node002\n    volume: vol01\n    wait_timeout: 500\n    state: absent\n"
  },
  "community.general.proxmox": {
    "doc": {
      "description": "allows you to create/delete/stop instances in Proxmox VE cluster\nStarting in Ansible 2.1, it automatically detects containerization type (lxc for PVE 4, openvz for older)\nSince community.general 4.0.0 on, there are no more default values, see I(proxmox_default_behavior).",
      "has_action": false,
      "options": {
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "clone": {
          "aliases": [],
          "description": "ID of the container to be cloned.\nI(description), I(hostname), and I(pool) will be copied from the cloned container if not specified.\nThe type of clone created is defined by the I(clone_type) parameter.\nThis operator is only supported for Proxmox clusters that use LXC containerization (PVE version >= 4).",
          "type": "int",
          "required": false,
          "version_added": "4.3.0",
          "suboptions": {}
        },
        "clone_type": {
          "aliases": [],
          "description": "Type of the clone created.\nC(full) creates a full clone, and I(storage) must be specified.\nC(linked) creates a linked clone, and the cloned container must be a template container.\nC(opportunistic) creates a linked clone if the cloned container is a template container, and a full clone if not. I(storage) may be specified, if not it will fall back to the default.",
          "default": "opportunistic",
          "type": "str",
          "required": false,
          "choices": [
            "full",
            "linked",
            "opportunistic"
          ],
          "version_added": "4.3.0",
          "suboptions": {}
        },
        "cores": {
          "aliases": [],
          "description": "Specify number of cores per socket.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(1).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpus": {
          "aliases": [],
          "description": "numbers of allocated cpus for instance\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(1).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpuunits": {
          "aliases": [],
          "description": "CPU weight for a VM\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(1000).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Specify the description for the container. Only used on the configuration web interface.\nThis is saved as a comment inside the configuration file.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "disk": {
          "aliases": [],
          "description": "This option was previously described as \"hard disk size in GB for instance\" however several formats describing a lxc mount are permitted.\nOlder versions of Proxmox will accept a numeric value for size using the I(storage) parameter to automatically choose which storage to allocate from, however new versions enforce the C(<STORAGE>:<SIZE>) syntax.\nAdditional options are available by using some combination of the following key-value pairs as a comma-delimited list C([volume=]<volume> [,acl=<1|0>] [,mountoptions=<opt[;opt...]>] [,quota=<1|0>] [,replicate=<1|0>] [,ro=<1|0>] [,shared=<1|0>] [,size=<DiskSize>]).\nSee U(https://pve.proxmox.com/wiki/Linux_Container) for a full description.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(3).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "features": {
          "aliases": [],
          "description": "Specifies a list of features to be enabled. For valid options, see U(https://pve.proxmox.com/wiki/Linux_Container#pct_options).\nSome features require the use of a privileged container.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "forcing operations\ncan be used only with states C(present), C(stopped), C(restarted)\nwith C(state=present) force option allow to overwrite existing container\nwith states C(stopped) , C(restarted) allow to force stop instance",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hookscript": {
          "aliases": [],
          "description": "Script that will be executed during various steps in the containers lifetime.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "the instance hostname\nrequired only for C(state=present)\nmust be unique if vmid is not passed",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "specifies the address the container will be assigned",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "memory size in MB for instance\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(512).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mounts": {
          "aliases": [],
          "description": "specifies additional mounts (separate disks) for the container. As a hash/dictionary defining mount points",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "nameserver": {
          "aliases": [],
          "description": "sets DNS server IP address for a container",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "netif": {
          "aliases": [],
          "description": "specifies network interfaces for the container. As a hash/dictionary defining interfaces.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "Proxmox VE node on which to operate.\nOnly required for I(state=present).\nFor every other states it will be autodiscovered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "onboot": {
          "aliases": [],
          "description": "specifies whether a VM will be started during system bootup\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(no).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ostemplate": {
          "aliases": [],
          "description": "the template for VM creating\nrequired only for C(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "the instance root password",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "Add the new VM to the specified pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxmox_default_behavior": {
          "aliases": [],
          "description": "As of community.general 4.0.0, various options no longer have default values. These default values caused problems when users expected different behavior from Proxmox by default or filled options which caused problems when set.\nThe value C(compatibility) (default before community.general 4.0.0) will ensure that the default values are used when the values are not explicitly specified by the user. The new default is C(no_defaults), which makes sure these options have no defaults.\nThis affects the I(disk), I(cores), I(cpus), I(memory), I(onboot), I(swap), I(cpuunits) options.",
          "default": "no_defaults",
          "type": "str",
          "required": false,
          "choices": [
            "compatibility",
            "no_defaults"
          ],
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "pubkey": {
          "aliases": [],
          "description": "Public key to add to /root/.ssh/authorized_keys. This was added on Proxmox 4.2, it is ignored for earlier versions",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Remove container from all related configurations.\nFor example backup jobs, replication jobs, or HA.\nRelated ACLs and Firewall entries will always be removed.\nUsed with state C(absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "searchdomain": {
          "aliases": [],
          "description": "sets DNS search domain for a container",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the instance",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "started",
            "absent",
            "stopped",
            "restarted"
          ],
          "suboptions": {}
        },
        "storage": {
          "aliases": [],
          "description": "target storage",
          "default": "local",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "swap": {
          "aliases": [],
          "description": "swap memory size in MB for instance\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(0).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "timeout for operations",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "unprivileged": {
          "aliases": [],
          "description": "Indicate if the container should be unprivileged",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmid": {
          "aliases": [],
          "description": "Specifies the instance ID.\nIf not set the next available ID will be fetched from ProxmoxAPI.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "management of instances in Proxmox VE cluster"
    },
    "examples": "\n- name: Create new container with minimal options\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n\n- name: Create new container with hookscript and description\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n    hookscript: 'local:snippets/vm_hook.sh'\n    description: created with ansible\n\n- name: Create new container automatically selecting the next available vmid.\n  community.general.proxmox:\n    node: 'uk-mc02'\n    api_user: 'root@pam'\n    api_password: '1q2w3e'\n    api_host: 'node1'\n    password: '123456'\n    hostname: 'example.org'\n    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n\n- name: Create new container with minimal options with force(it will rewrite existing container)\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n    force: yes\n\n- name: Create new container with minimal options use environment PROXMOX_PASSWORD variable(you should export it before)\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n\n- name: Create new container with minimal options defining network interface with dhcp\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n    netif: '{\"net0\":\"name=eth0,ip=dhcp,ip6=dhcp,bridge=vmbr0\"}'\n\n- name: Create new container with minimal options defining network interface with static ip\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: 'local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n    netif: '{\"net0\":\"name=eth0,gw=192.168.0.1,ip=192.168.0.2/24,bridge=vmbr0\"}'\n\n- name: Create new container with minimal options defining a mount with 8GB\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n    mounts: '{\"mp0\":\"local:8,mp=/mnt/test/\"}'\n\n- name: Create new container with minimal options defining a cpu core limit\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n    cores: 2\n\n- name: Create a new container with nesting enabled and allows the use of CIFS/NFS inside the container.\n  community.general.proxmox:\n    vmid: 100\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    password: 123456\n    hostname: example.org\n    ostemplate: local:vztmpl/ubuntu-14.04-x86_64.tar.gz'\n    features:\n     - nesting=1\n     - mount=cifs,nfs\n\n- name: >\n    Create a linked clone of the template container with id 100. The newly created container with be a\n    linked clone, because no storage parameter is defined\n  community.general.proxmox:\n    vmid: 201\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    clone: 100\n    hostname: clone.example.org\n\n- name: Create a full clone of the container with id 100\n  community.general.proxmox:\n    vmid: 201\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    clone: 100\n    hostname: clone.example.org\n    storage: local\n\n- name: Start container\n  community.general.proxmox:\n    vmid: 100\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    state: started\n\n- name: >\n    Start container with mount. You should enter a 90-second timeout because servers\n    with additional disks take longer to boot\n  community.general.proxmox:\n    vmid: 100\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    state: started\n    timeout: 90\n\n- name: Stop container\n  community.general.proxmox:\n    vmid: 100\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    state: stopped\n\n- name: Stop container with force\n  community.general.proxmox:\n    vmid: 100\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    force: yes\n    state: stopped\n\n- name: Restart container(stopped or mounted container you can't restart)\n  community.general.proxmox:\n    vmid: 100\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    state: restarted\n\n- name: Remove container\n  community.general.proxmox:\n    vmid: 100\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    state: absent\n"
  },
  "community.general.proxmox_domain_info": {
    "doc": {
      "description": "Retrieve information about one or more Proxmox VE domains.",
      "has_action": false,
      "options": {
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [
            "realm",
            "name"
          ],
          "description": "Restrict results to a specific authentication realm.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "Retrieve information about one or more Proxmox VE domains",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: List existing domains\n  community.general.proxmox_domain_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n  register: proxmox_domains\n\n- name: Retrieve information about the pve domain\n  community.general.proxmox_domain_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n    domain: pve\n  register: proxmox_domain_pve\n"
  },
  "community.general.proxmox_group_info": {
    "doc": {
      "description": "Retrieve information about one or more Proxmox VE groups",
      "has_action": false,
      "options": {
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "group": {
          "aliases": [
            "groupid",
            "name"
          ],
          "description": "Restrict results to a specific group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "Retrieve information about one or more Proxmox VE groups",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: List existing groups\n  community.general.proxmox_group_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n  register: proxmox_groups\n\n- name: Retrieve information about the admin group\n  community.general.proxmox_group_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n    group: admin\n  register: proxmox_group_admin\n"
  },
  "community.general.proxmox_kvm": {
    "doc": {
      "description": "Allows you to create/delete/stop Qemu(KVM) Virtual Machines in Proxmox VE cluster.\nSince community.general 4.0.0 on, there are no more default values, see I(proxmox_default_behavior).",
      "has_action": false,
      "options": {
        "acpi": {
          "aliases": [],
          "description": "Specify if ACPI should be enabled/disabled.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "agent": {
          "aliases": [],
          "description": "Specify if the QEMU Guest Agent should be enabled/disabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "args": {
          "aliases": [],
          "description": "Pass arbitrary arguments to kvm.\nThis option is for experts only!\nIf I(proxmox_default_behavior) is set to C(compatiblity), this option has a default of C(-serial unix:/var/run/qemu-server/<vmid>.serial,server,nowait).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "autostart": {
          "aliases": [],
          "description": "Specify if the VM should be automatically restarted after crash (currently ignored in PVE API).\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(no).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "balloon": {
          "aliases": [],
          "description": "Specify the amount of RAM for the VM in MB.\nUsing zero disables the balloon driver.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(0).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "bios": {
          "aliases": [],
          "description": "Specify the BIOS implementation.",
          "type": "str",
          "required": false,
          "choices": [
            "seabios",
            "ovmf"
          ],
          "suboptions": {}
        },
        "boot": {
          "aliases": [],
          "description": "Specify the boot order -> boot on floppy C(a), hard disk C(c), CD-ROM C(d), or network C(n).\nYou can combine to set order.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(cnd).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bootdisk": {
          "aliases": [],
          "description": "Enable booting from specified disk. C((ide|sata|scsi|virtio)\\d+)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cicustom": {
          "aliases": [],
          "description": "cloud-init: Specify custom files to replace the automatically generated ones at start.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "cipassword": {
          "aliases": [],
          "description": "cloud-init: password of default user to create.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "citype": {
          "aliases": [],
          "description": "cloud-init: Specifies the cloud-init configuration format.\nThe default depends on the configured operating system type (C(ostype)).\nWe use the C(nocloud) format for Linux, and C(configdrive2) for Windows.",
          "type": "str",
          "required": false,
          "choices": [
            "nocloud",
            "configdrive2"
          ],
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "ciuser": {
          "aliases": [],
          "description": "cloud-init: username of default user to create.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "clone": {
          "aliases": [],
          "description": "Name of VM to be cloned. If C(vmid) is setted, C(clone) can take arbitrary value but required for initiating the clone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cores": {
          "aliases": [],
          "description": "Specify number of cores per socket.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(1).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu": {
          "aliases": [],
          "description": "Specify emulated CPU type.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(kvm64).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpulimit": {
          "aliases": [],
          "description": "Specify if CPU usage will be limited. Value 0 indicates no CPU limit.\nIf the computer has 2 CPUs, it has total of '2' CPU time",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpuunits": {
          "aliases": [],
          "description": "Specify CPU weight for a VM.\nYou can disable fair-scheduler configuration by setting this to 0\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(1000).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "delete": {
          "aliases": [],
          "description": "Specify a list of settings you want to delete.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Specify the description for the VM. Only used on the configuration web interface.\nThis is saved as comment inside the configuration file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "digest": {
          "aliases": [],
          "description": "Specify if to prevent changes if current configuration file has different SHA1 digest.\nThis can be used to prevent concurrent modifications.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Allow to force stop VM.\nCan be used with states C(stopped), C(restarted) and C(absent).\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(no).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "Target drive's backing file's data format.\nUsed only with clone\nUse I(format=unspecified) and I(full=false) for a linked clone.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(qcow2). If I(proxmox_default_behavior) is set to C(no_defaults), not specifying this option is equivalent to setting it to C(unspecified).",
          "type": "str",
          "required": false,
          "choices": [
            "cloop",
            "cow",
            "qcow",
            "qcow2",
            "qed",
            "raw",
            "vmdk",
            "unspecified"
          ],
          "suboptions": {}
        },
        "freeze": {
          "aliases": [],
          "description": "Specify if PVE should freeze CPU at startup (use 'c' monitor command to start execution).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "full": {
          "aliases": [],
          "description": "Create a full copy of all disk. This is always done when you clone a normal VM.\nFor VM templates, we try to create a linked clone by default.\nUsed only with clone",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostpci": {
          "aliases": [],
          "description": "Specify a hash/dictionary of map host pci devices into guest. C(hostpci='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - C(hostpci[n]) where 0 ≤ n ≤ N.\nValues allowed are -  C(\"host=\"HOSTPCIID[;HOSTPCIID2...]\",pcie=\"1|0\",rombar=\"1|0\",x-vga=\"1|0\"\").\nThe C(host) parameter is Host PCI device pass through. HOSTPCIID syntax is C(bus:dev.func) (hexadecimal numbers).\nC(pcie=boolean) I(default=0) Choose the PCI-express bus (needs the q35 machine model).\nC(rombar=boolean) I(default=1) Specify whether or not the device's ROM will be visible in the guest's memory map.\nC(x-vga=boolean) I(default=0) Enable vfio-vga device support.\n/!\\ This option allows direct access to host hardware. So it is no longer possible to migrate such machines - use with special care.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "hotplug": {
          "aliases": [],
          "description": "Selectively enable hotplug features.\nThis is a comma separated list of hotplug features C('network', 'disk', 'cpu', 'memory' and 'usb').\nValue 0 disables hotplug completely and value 1 is an alias for the default C('network,disk,usb').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hugepages": {
          "aliases": [],
          "description": "Enable/disable hugepages memory.",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "2",
            "1024"
          ],
          "suboptions": {}
        },
        "ide": {
          "aliases": [],
          "description": "A hash/dictionary of volume used as IDE hard disk or CD-ROM. C(ide='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - C(ide[n]) where 0 ≤ n ≤ 3.\nValues allowed are - C(\"storage:size,format=value\").\nC(storage) is the storage identifier where to create the disk.\nC(size) is the size of the disk in GB.\nC(format) is the drive's backing file's data format. C(qcow2|raw|subvol).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipconfig": {
          "aliases": [],
          "description": "cloud-init: Set the IP configuration.\nA hash/dictionary of network ip configurations. C(ipconfig='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - C(ipconfig[n]) where 0 ≤ n ≤ network interfaces.\nValues allowed are -  C(\"[gw=<GatewayIPv4>] [,gw6=<GatewayIPv6>] [,ip=<IPv4Format/CIDR>] [,ip6=<IPv6Format/CIDR>]\").\ncloud-init: Specify IP addresses and gateways for the corresponding interface.\nIP addresses use CIDR notation, gateways are optional but they should be in the same subnet of specified IP address.\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit gateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration.\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using dhcp on IPv4.",
          "type": "dict",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "keyboard": {
          "aliases": [],
          "description": "Sets the keyboard layout for VNC server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kvm": {
          "aliases": [],
          "description": "Enable/disable KVM hardware virtualization.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "localtime": {
          "aliases": [],
          "description": "Sets the real time clock to local time.\nThis is enabled by default if ostype indicates a Microsoft OS.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lock": {
          "aliases": [],
          "description": "Lock/unlock the VM.",
          "type": "str",
          "required": false,
          "choices": [
            "migrate",
            "backup",
            "snapshot",
            "rollback"
          ],
          "suboptions": {}
        },
        "machine": {
          "aliases": [],
          "description": "Specifies the Qemu machine type.\ntype => C((pc|pc(-i440fx)?-\\d+\\.\\d+(\\.pxe)?|q35|pc-q35-\\d+\\.\\d+(\\.pxe)?))",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "Memory size in MB for instance.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(512).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "migrate_downtime": {
          "aliases": [],
          "description": "Sets maximum tolerated downtime (in seconds) for migrations.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "migrate_speed": {
          "aliases": [],
          "description": "Sets maximum speed (in MB/s) for migrations.\nA value of 0 is no limit.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the VM name. Only used on the configuration web interface.\nRequired only for C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nameservers": {
          "aliases": [],
          "description": "cloud-init: DNS server IP address(es).\nIf unset, PVE host settings are used.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "net": {
          "aliases": [],
          "description": "A hash/dictionary of network interfaces for the VM. C(net='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - C(net[n]) where 0 ≤ n ≤ N.\nValues allowed are - C(\"model=\"XX:XX:XX:XX:XX:XX\",bridge=\"value\",rate=\"value\",tag=\"value\",firewall=\"1|0\",trunks=\"vlanid\"\").\nModel is one of C(e1000 e1000-82540em e1000-82544gc e1000-82545em i82551 i82557b i82559er ne2k_isa ne2k_pci pcnet rtl8139 virtio vmxnet3).\nC(XX:XX:XX:XX:XX:XX) should be an unique MAC address. This is automatically generated if not specified.\nThe C(bridge) parameter can be used to automatically add the interface to a bridge device. The Proxmox VE standard bridge is called 'vmbr0'.\nOption C(rate) is used to limit traffic bandwidth from and to this interface. It is specified as floating point number, unit is 'Megabytes per second'.\nIf you specify no bridge, we create a kvm 'user' (NATed) network device, which provides DHCP and DNS services.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "newid": {
          "aliases": [],
          "description": "VMID for the clone. Used only with clone.\nIf newid is not set, the next available VM ID will be fetched from ProxmoxAPI.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "Proxmox VE node on which to operate.\nOnly required for I(state=present).\nFor every other states it will be autodiscovered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "numa": {
          "aliases": [],
          "description": "A hash/dictionaries of NUMA topology. C(numa='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - C(numa[n]) where 0 ≤ n ≤ N.\nValues allowed are - C(\"cpu=\"<id[-id];...>\",hostnodes=\"<id[-id];...>\",memory=\"number\",policy=\"(bind|interleave|preferred)\"\").\nC(cpus) CPUs accessing this NUMA node.\nC(hostnodes) Host NUMA nodes to use.\nC(memory) Amount of memory this NUMA node provides.\nC(policy) NUMA allocation policy.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "numa_enabled": {
          "aliases": [],
          "description": "Enables NUMA.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "onboot": {
          "aliases": [],
          "description": "Specifies whether a VM will be started during system bootup.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ostype": {
          "aliases": [],
          "description": "Specifies guest operating system. This is used to enable special optimization/features for specific operating systems.\nThe l26 is Linux 2.6/3.X Kernel.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(l26).",
          "type": "str",
          "required": false,
          "choices": [
            "other",
            "wxp",
            "w2k",
            "w2k3",
            "w2k8",
            "wvista",
            "win7",
            "win8",
            "win10",
            "l24",
            "l26",
            "solaris"
          ],
          "suboptions": {}
        },
        "parallel": {
          "aliases": [],
          "description": "A hash/dictionary of map host parallel devices. C(parallel='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - (parallel[n]) where 0 ≤ n ≤ 2.\nValues allowed are - C(\"/dev/parport\\d+|/dev/usb/lp\\d+\").",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "Add the new VM to the specified pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protection": {
          "aliases": [],
          "description": "Enable/disable the protection flag of the VM. This will enable/disable the remove VM and remove disk operations.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "proxmox_default_behavior": {
          "aliases": [],
          "description": "As of community.general 4.0.0, various options no longer have default values. These default values caused problems when users expected different behavior from Proxmox by default or filled options which caused problems when set. - The value C(compatibility) (default before community.general 4.0.0) will ensure that the default values are used when the values are not explicitly specified by the user. The new default is C(no_defaults), which makes sure these options have no defaults. - This affects the I(acpi), I(autostart), I(balloon), I(boot), I(cores), I(cpu), I(cpuunits), I(force), I(format), I(kvm), I(memory), I(onboot), I(ostype), I(sockets), I(tablet), I(template), I(vga), options.",
          "default": "no_defaults",
          "type": "str",
          "required": false,
          "choices": [
            "compatibility",
            "no_defaults"
          ],
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "reboot": {
          "aliases": [],
          "description": "Allow reboot. If set to C(yes), the VM exit on reboot.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "revert": {
          "aliases": [],
          "description": "Revert a pending change.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sata": {
          "aliases": [],
          "description": "A hash/dictionary of volume used as sata hard disk or CD-ROM. C(sata='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - C(sata[n]) where 0 ≤ n ≤ 5.\nValues allowed are -  C(\"storage:size,format=value\").\nC(storage) is the storage identifier where to create the disk.\nC(size) is the size of the disk in GB.\nC(format) is the drive's backing file's data format. C(qcow2|raw|subvol).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "scsi": {
          "aliases": [],
          "description": "A hash/dictionary of volume used as SCSI hard disk or CD-ROM. C(scsi='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - C(sata[n]) where 0 ≤ n ≤ 13.\nValues allowed are -  C(\"storage:size,format=value\").\nC(storage) is the storage identifier where to create the disk.\nC(size) is the size of the disk in GB.\nC(format) is the drive's backing file's data format. C(qcow2|raw|subvol).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "scsihw": {
          "aliases": [],
          "description": "Specifies the SCSI controller model.",
          "type": "str",
          "required": false,
          "choices": [
            "lsi",
            "lsi53c810",
            "virtio-scsi-pci",
            "virtio-scsi-single",
            "megasas",
            "pvscsi"
          ],
          "suboptions": {}
        },
        "searchdomains": {
          "aliases": [],
          "description": "cloud-init: Sets DNS search domain(s).\nIf unset, PVE host settings are used.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "serial": {
          "aliases": [],
          "description": "A hash/dictionary of serial device to create inside the VM. C('{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - serial[n](str; required) where 0 ≤ n ≤ 3.\nValues allowed are - C((/dev/.+|socket)).\n/!\\ If you pass through a host serial device, it is no longer possible to migrate such machines - use with special care.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "shares": {
          "aliases": [],
          "description": "Rets amount of memory shares for auto-ballooning. (0 - 50000).\nThe larger the number is, the more memory this VM gets.\nThe number is relative to weights of all other running VMs.\nUsing 0 disables auto-ballooning, this means no limit.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "skiplock": {
          "aliases": [],
          "description": "Ignore locks\nOnly root is allowed to use this option.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "smbios": {
          "aliases": [],
          "description": "Specifies SMBIOS type 1 fields.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapname": {
          "aliases": [],
          "description": "The name of the snapshot. Used only with clone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sockets": {
          "aliases": [],
          "description": "Sets the number of CPU sockets. (1 - N).\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(1).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sshkeys": {
          "aliases": [],
          "description": "cloud-init: SSH key to assign to the default user. NOT TESTED with multiple keys but a multi-line value should work.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "startdate": {
          "aliases": [],
          "description": "Sets the initial date of the real time clock.\nValid format for date are C('now') or C('2016-09-25T16:01:21') or C('2016-09-25').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "startup": {
          "aliases": [],
          "description": "Startup and shutdown behavior. C([[order=]\\d+] [,up=\\d+] [,down=\\d+]).\nOrder is a non-negative number defining the general startup order.\nShutdown in done with reverse ordering.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the instance.\nIf C(current), the current state of the VM will be fetched. You can access it with C(results.status)",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "started",
            "absent",
            "stopped",
            "restarted",
            "current"
          ],
          "suboptions": {}
        },
        "storage": {
          "aliases": [],
          "description": "Target storage for full clone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tablet": {
          "aliases": [],
          "description": "Enables/disables the USB tablet device.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(no).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tags to apply to the VM instance.\nTags must start with C([a-z0-9_]) followed by zero or more of the following characters C([a-z0-9_-+.]).\nTags are only available in Proxmox 6+.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "Target node. Only allowed if the original VM is on shared storage.\nUsed only with clone",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tdf": {
          "aliases": [],
          "description": "Enables/disables time drift fix.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Enables/disables the template.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(no).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout for operations.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update": {
          "aliases": [],
          "description": "If C(yes), the VM will be updated with new value.\nCause of the operations of the API and security reasons, I have disabled the update of the following parameters\nC(net, virtio, ide, sata, scsi). Per example updating C(net) update the MAC address and C(virtio) create always new disk...\nUpdate of C(pool) is disabled. It needs an additional API endpoint not covered by this module.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vcpus": {
          "aliases": [],
          "description": "Sets number of hotplugged vcpus.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vga": {
          "aliases": [],
          "description": "Select VGA type. If you want to use high resolution modes (>= 1280x1024x16) then you should use option 'std' or 'vmware'.\nThis option has no default unless I(proxmox_default_behavior) is set to C(compatiblity); then the default is C(std).",
          "type": "str",
          "required": false,
          "choices": [
            "std",
            "cirrus",
            "vmware",
            "qxl",
            "serial0",
            "serial1",
            "serial2",
            "serial3",
            "qxl2",
            "qxl3",
            "qxl4"
          ],
          "suboptions": {}
        },
        "virtio": {
          "aliases": [],
          "description": "A hash/dictionary of volume used as VIRTIO hard disk. C(virtio='{\"key\":\"value\", \"key\":\"value\"}').\nKeys allowed are - C(virto[n]) where 0 ≤ n ≤ 15.\nValues allowed are -  C(\"storage:size,format=value\").\nC(storage) is the storage identifier where to create the disk.\nC(size) is the size of the disk in GB.\nC(format) is the drive's backing file's data format. C(qcow2|raw|subvol).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "vmid": {
          "aliases": [],
          "description": "Specifies the instance ID.\nIf not set the next available ID will be fetched from ProxmoxAPI.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "watchdog": {
          "aliases": [],
          "description": "Creates a virtual hardware watchdog device.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "Management of Qemu(KVM) Virtual Machines in Proxmox VE cluster."
    },
    "examples": "\n- name: Create new VM with minimal options\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n\n- name: Create new VM with minimal options and given vmid\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    vmid: 100\n\n- name: Create new VM with two network interface options\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    net:\n      net0: 'virtio,bridge=vmbr1,rate=200'\n      net1: 'e1000,bridge=vmbr2'\n\n- name: Create new VM with one network interface, three virto hard disk, 4 cores, and 2 vcpus\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    net:\n      net0: 'virtio,bridge=vmbr1,rate=200'\n    virtio:\n      virtio0: 'VMs_LVM:10'\n      virtio1: 'VMs:2,format=qcow2'\n      virtio2: 'VMs:5,format=raw'\n    cores: 4\n    vcpus: 2\n\n- name: >\n    Clone VM with only source VM name.\n    The VM source is spynal.\n    The target VM name is zavala\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    clone: spynal\n    name: zavala\n    node: sabrewulf\n    storage: VMs\n    format: qcow2\n    timeout: 500\n\n- name: >\n    Create linked clone VM with only source VM name.\n    The VM source is spynal.\n    The target VM name is zavala\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    clone: spynal\n    name: zavala\n    node: sabrewulf\n    storage: VMs\n    full: no\n    format: unspecified\n    timeout: 500\n\n- name: Clone VM with source vmid and target newid and raw format\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    clone: arbitrary_name\n    vmid: 108\n    newid: 152\n    name: zavala\n    node: sabrewulf\n    storage: LVM_STO\n    format: raw\n    timeout: 300\n\n- name: Create new VM and lock it for snapshot\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    lock: snapshot\n\n- name: Create new VM and set protection to disable the remove VM and remove disk operations\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    protection: yes\n\n- name: Create new VM using cloud-init with a username and password\n  community.general.proxmox_kvm:\n    node: sabrewulf\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    ide:\n      ide2: 'local:cloudinit,format=qcow2'\n    ciuser: mylinuxuser\n    cipassword: supersecret\n    searchdomains: 'mydomain.internal'\n    nameservers: 1.1.1.1\n    net:\n      net0: 'virtio,bridge=vmbr1,tag=77'\n    ipconfig:\n      ipconfig0: 'ip=192.168.1.1/24,gw=192.168.1.1'\n\n- name: Create new VM using Cloud-Init with an ssh key\n  community.general.proxmox_kvm:\n    node: sabrewulf\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    ide:\n      ide2: 'local:cloudinit,format=qcow2'\n    sshkeys: 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILJkVm98B71lD5XHfihwcYHE9TVpsJmK1vR1JcaU82L+'\n    searchdomains: 'mydomain.internal'\n    nameservers:\n      - '1.1.1.1'\n      - '8.8.8.8'\n    net:\n      net0: 'virtio,bridge=vmbr1,tag=77'\n    ipconfig:\n      ipconfig0: 'ip=192.168.1.1/24'\n\n- name: Start VM\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    state: started\n\n- name: Stop VM\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    state: stopped\n\n- name: Stop VM with force\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    state: stopped\n    force: yes\n\n- name: Restart VM\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    state: restarted\n\n- name: Remove VM\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    state: absent\n\n- name: Get VM current state\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    state: current\n\n- name: Update VM configuration\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    cores: 8\n    memory: 16384\n    update: yes\n\n- name: Delete QEMU parameters\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    delete: 'args,template,cpulimit'\n\n- name: Revert a pending change\n  community.general.proxmox_kvm:\n    api_user: root@pam\n    api_password: secret\n    api_host: helldorado\n    name: spynal\n    node: sabrewulf\n    revert: 'template,cpulimit'\n"
  },
  "community.general.proxmox_nic": {
    "doc": {
      "description": "Allows you to create/update/delete a NIC on Qemu(KVM) Virtual Machines in a Proxmox VE cluster.",
      "has_action": false,
      "options": {
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "bridge": {
          "aliases": [],
          "description": "Add this interface to the specified bridge device. The Proxmox VE default bridge is called C(vmbr0).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "firewall": {
          "aliases": [],
          "description": "Whether this interface should be protected by the firewall.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Name of the interface, should be C(net[n]) where C(1 ≤ n ≤ 31).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "link_down": {
          "aliases": [],
          "description": "Whether this interface should be disconnected (like pulling the plug).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "C(XX:XX:XX:XX:XX:XX) should be a unique MAC address. This is automatically generated if not specified.\nWhen not specified this module will keep the MAC address the same when changing an existing interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "model": {
          "aliases": [],
          "description": "The NIC emulator model.",
          "default": "virtio",
          "type": "str",
          "required": false,
          "choices": [
            "e1000",
            "e1000-82540em",
            "e1000-82544gc",
            "e1000-82545em",
            "i82551",
            "i82557b",
            "i82559er",
            "ne2k_isa",
            "ne2k_pci",
            "pcnet",
            "rtl8139",
            "virtio",
            "vmxnet3"
          ],
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "Force MTU, for C(virtio) model only, setting will be ignored otherwise.\nSet to C(1) to use the bridge MTU.\nValue should be C(1 ≤ n ≤ 65520).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the VM name. Only used on the configuration web interface.\nRequired only for I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "queues": {
          "aliases": [],
          "description": "Number of packet queues to be used on the device.\nValue should be C(0 ≤ n ≤ 16).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rate": {
          "aliases": [],
          "description": "Rate limit in MBps (MegaBytes per second) as floating point number.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the NIC.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "VLAN tag to apply to packets on this interface.\nValue should be C(1 ≤ n ≤ 4094).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "trunks": {
          "aliases": [],
          "description": "List of VLAN trunks to pass through this interface.",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmid": {
          "aliases": [],
          "description": "Specifies the instance ID.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "Management of a NIC of a Qemu(KVM) VM in a Proxmox VE cluster.",
      "version_added": "3.1.0"
    },
    "examples": "\n- name: Create NIC net0 targeting the vm by name\n  community.general.proxmox_nic:\n    api_user: root@pam\n    api_password: secret\n    api_host: proxmoxhost\n    name: my_vm\n    interface: net0\n    bridge: vmbr0\n    tag: 3\n\n- name: Create NIC net0 targeting the vm by id\n  community.general.proxmox_nic:\n    api_user: root@pam\n    api_password: secret\n    api_host: proxmoxhost\n    vmid: 103\n    interface: net0\n    bridge: vmbr0\n    mac: \"12:34:56:C0:FF:EE\"\n    firewall: true\n\n- name: Delete NIC net0 targeting the vm by name\n  community.general.proxmox_nic:\n    api_user: root@pam\n    api_password: secret\n    api_host: proxmoxhost\n    name: my_vm\n    interface: net0\n    state: absent\n"
  },
  "community.general.proxmox_snap": {
    "doc": {
      "description": "Allows you to create/delete snapshots from instances in Proxmox VE cluster.\nSupports both KVM and LXC, OpenVZ has not been tested, as it is no longer supported on Proxmox VE.",
      "has_action": false,
      "notes": "Requires proxmoxer and requests modules on host. These modules can be installed with pip.\nSupports C(check_mode).",
      "options": {
        "api_host": {
          "aliases": [],
          "description": "The host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "The password to authenticate with.\nYou can use PROXMOX_PASSWORD environment variable.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "The user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Specify the description for the snapshot. Only used on the configuration web interface.\nThis is saved as a comment inside the configuration file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "For removal from config file, even if removing disk snapshot fails.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The instance name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapname": {
          "aliases": [],
          "description": "Name of the snapshot that has to be created.",
          "default": "ansible_snap",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the instance snapshot.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout for operations.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Enable / disable https certificate verification.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmid": {
          "aliases": [],
          "description": "The instance id.\nIf not set, will be fetched from PromoxAPI based on the hostname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vmstate": {
          "aliases": [],
          "description": "Snapshot includes RAM.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "python >= 2.7",
        "requests"
      ],
      "short_description": "Snapshot management of instances in Proxmox VE cluster",
      "version_added": "2.0.0"
    },
    "examples": "\n- name: Create new container snapshot\n  community.general.proxmox_snap:\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    vmid: 100\n    state: present\n    snapname: pre-updates\n\n- name: Remove container snapshot\n  community.general.proxmox_snap:\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    vmid: 100\n    state: absent\n    snapname: pre-updates\n"
  },
  "community.general.proxmox_storage_info": {
    "doc": {
      "description": "Retrieve information about one or more Proxmox VE storages.",
      "has_action": false,
      "notes": "Storage specific options can be returned by this module, please look at the documentation at U(https://pve.proxmox.com/wiki/Storage).",
      "options": {
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "storage": {
          "aliases": [
            "name"
          ],
          "description": "Only return informations on a specific storage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Filter on a specifc storage type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "Retrieve information about one or more Proxmox VE storages",
      "version_added": "2.2.0"
    },
    "examples": "\n- name: List existing storages\n  community.general.proxmox_storage_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n  register: proxmox_storages\n\n- name: List NFS storages only\n  community.general.proxmox_storage_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n    type: nfs\n  register: proxmox_storages_nfs\n\n- name: Retrieve information about the lvm2 storage\n  community.general.proxmox_storage_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n    storage: lvm2\n  register: proxmox_storage_lvm\n"
  },
  "community.general.proxmox_tasks_info": {
    "doc": {
      "description": "Retrieve information about one or more Proxmox VE tasks.",
      "has_action": false,
      "options": {
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "Node where to get tasks.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "task": {
          "aliases": [
            "upid",
            "name"
          ],
          "description": "Return specific task.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "Retrieve information about one or more Proxmox VE tasks",
      "version_added": "3.8.0"
    },
    "examples": "\n- name: List tasks on node01\n  community.general.proxmox_task_info:\n    api_host: proxmoxhost\n    api_user: root@pam\n    api_password: '{{ password | default(omit) }}'\n    api_token_id: '{{ token_id | default(omit) }}'\n    api_token_secret: '{{ token_secret | default(omit) }}'\n    node: node01\n  register: result\n\n- name: Retrieve information about specific tasks on node01\n  community.general.proxmox_task_info:\n    api_host: proxmoxhost\n    api_user: root@pam\n    api_password: '{{ password | default(omit) }}'\n    api_token_id: '{{ token_id | default(omit) }}'\n    api_token_secret: '{{ token_secret | default(omit) }}'\n    task: 'UPID:node01:00003263:16167ACE:621EE230:srvreload:networking:root@pam:'\n    node: node01\n  register: proxmox_tasks\n"
  },
  "community.general.proxmox_template": {
    "doc": {
      "description": "allows you to upload/delete templates in Proxmox VE cluster",
      "has_action": false,
      "notes": "Requires proxmoxer and requests modules on host. This modules can be installed with pip.",
      "options": {
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "content_type": {
          "aliases": [],
          "description": "content type\nrequired only for C(state=present)",
          "default": "vztmpl",
          "type": "str",
          "required": false,
          "choices": [
            "vztmpl",
            "iso"
          ],
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "can be used only with C(state=present), exists template will be overwritten",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "Proxmox VE node on which to operate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "path to uploaded file\nrequired only for C(state=present)",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the template",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage": {
          "aliases": [],
          "description": "target storage",
          "default": "local",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "the template name\nRequired for state C(absent) to delete a template.\nRequired for state C(present) to download an appliance container template (pveam).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "timeout for operations",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "management of OS templates in Proxmox VE cluster"
    },
    "examples": "\n- name: Upload new openvz template with minimal options\n  community.general.proxmox_template:\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    src: ~/ubuntu-14.04-x86_64.tar.gz\n\n- name: >\n    Upload new openvz template with minimal options use environment\n    PROXMOX_PASSWORD variable(you should export it before)\n  community.general.proxmox_template:\n    node: uk-mc02\n    api_user: root@pam\n    api_host: node1\n    src: ~/ubuntu-14.04-x86_64.tar.gz\n\n- name: Upload new openvz template with all options and force overwrite\n  community.general.proxmox_template:\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    storage: local\n    content_type: vztmpl\n    src: ~/ubuntu-14.04-x86_64.tar.gz\n    force: yes\n\n- name: Delete template with minimal options\n  community.general.proxmox_template:\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    template: ubuntu-14.04-x86_64.tar.gz\n    state: absent\n\n- name: Download proxmox appliance container template\n  community.general.proxmox_template:\n    node: uk-mc02\n    api_user: root@pam\n    api_password: 1q2w3e\n    api_host: node1\n    storage: local\n    content_type: vztmpl\n    template: ubuntu-20.04-standard_20.04-1_amd64.tar.gz\n"
  },
  "community.general.proxmox_user_info": {
    "doc": {
      "description": "Retrieve information about one or more Proxmox VE users",
      "has_action": false,
      "options": {
        "api_host": {
          "aliases": [],
          "description": "Specify the target host of the Proxmox VE cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nYou can use C(PROXMOX_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_token_id": {
          "aliases": [],
          "description": "Specify the token ID.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_token_secret": {
          "aliases": [],
          "description": "Specify the token secret.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "api_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [
            "realm"
          ],
          "description": "Restrict results to a specific authentication realm.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [
            "name"
          ],
          "description": "Restrict results to a specific user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "userid": {
          "aliases": [],
          "description": "Restrict results to a specific user ID, which is a concatenation of a user and domain parts.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "proxmoxer",
        "requests"
      ],
      "short_description": "Retrieve information about one or more Proxmox VE users",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: List existing users\n  community.general.proxmox_user_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n  register: proxmox_users\n\n- name: List existing users in the pve authentication realm\n  community.general.proxmox_user_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n    domain: pve\n  register: proxmox_users_pve\n\n- name: Retrieve information about admin@pve\n  community.general.proxmox_user_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n    userid: admin@pve\n  register: proxmox_user_admin\n\n- name: Alternative way to retrieve information about admin@pve\n  community.general.proxmox_user_info:\n    api_host: helldorado\n    api_user: root@pam\n    api_password: \"{{ password | default(omit) }}\"\n    api_token_id: \"{{ token_id | default(omit) }}\"\n    api_token_secret: \"{{ token_secret | default(omit) }}\"\n    user: admin\n    domain: pve\n  register: proxmox_user_admin\n"
  },
  "community.general.pubnub_blocks": {
    "doc": {
      "description": "This module allows Ansible to interface with the PubNub BLOCKS infrastructure by providing the following operations: create / remove, start / stop and rename for blocks and create / modify / remove for event handlers",
      "has_action": false,
      "options": {
        "account": {
          "aliases": [],
          "description": "Name of PubNub account for from which C(application) will be used to manage blocks.\nUser's account will be used if value not set or empty.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "application": {
          "aliases": [],
          "description": "Name of target PubNub application for which blocks configuration on specific C(keyset) will be done.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "cache": {
          "aliases": [],
          "description": "In case if single play use blocks management module few times it is preferred to enabled 'caching' by making previous module to share gathered artifacts and pass them to this parameter.\n",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "changes": {
          "aliases": [],
          "description": "List of fields which should be changed by block itself (doesn't affect any event handlers).\nPossible options for change is: C(name).",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Short block description which will be later visible on admin.pubnub.com. Used only if block doesn't exists and won't change description for existing block.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email from account for which new session should be started.\nNot required if C(cache) contains result of previous module call (in same play).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "event_handlers": {
          "aliases": [],
          "description": "List of event handlers which should be updated for specified block C(name).\nEach entry for new event handler should contain: C(name), C(src), C(channels), C(event). C(name) used as event handler name which can be used later to make changes to it.\nC(src) is full path to file with event handler code.\nC(channels) is name of channel from which event handler is waiting for events.\nC(event) is type of event which is able to trigger event handler: I(js-before-publish), I(js-after-publish), I(js-after-presence).\nEach entry for existing handlers should contain C(name) (so target handler can be identified). Rest parameters (C(src), C(channels) and C(event)) can be added if changes required for them.\nIt is possible to rename event handler by adding C(changes) key to event handler payload and pass dictionary, which will contain single key C(name), where new name should be passed.\nTo remove particular event handler it is possible to set C(state) for it to C(absent) and it will be removed.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "keyset": {
          "aliases": [],
          "description": "Name of application's keys set which is bound to managed blocks.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of managed block which will be later visible on admin.pubnub.com.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password which match to account to which specified C(email) belong.\nNot required if C(cache) contains result of previous module call (in same play).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Intended block state after event handlers creation / update process will be completed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "started",
            "stopped",
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "This key allow to try skip certificates check when performing REST API calls. Sometimes host may have issues with certificates on it and this will cause problems to call PubNub REST API.\nIf check should be ignored C(False) should be passed to this parameter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "pubnub_blocks_client >= 1.0"
      ],
      "short_description": "PubNub blocks management module."
    },
    "examples": "\n# Event handler create example.\n- name: Create single event handler\n  community.general.pubnub_blocks:\n    email: '{{ email }}'\n    password: '{{ password }}'\n    application: '{{ app_name }}'\n    keyset: '{{ keyset_name }}'\n    name: '{{ block_name }}'\n    event_handlers:\n      -\n        src: '{{ path_to_handler_source }}'\n        name: '{{ handler_name }}'\n        event: 'js-before-publish'\n        channels: '{{ handler_channel }}'\n\n# Change event handler trigger event type.\n- name: Change event handler 'event'\n  community.general.pubnub_blocks:\n    email: '{{ email }}'\n    password: '{{ password }}'\n    application: '{{ app_name }}'\n    keyset: '{{ keyset_name }}'\n    name: '{{ block_name }}'\n    event_handlers:\n      -\n        name: '{{ handler_name }}'\n        event: 'js-after-publish'\n\n# Stop block and event handlers.\n- name: Stopping block\n  community.general.pubnub_blocks:\n    email: '{{ email }}'\n    password: '{{ password }}'\n    application: '{{ app_name }}'\n    keyset: '{{ keyset_name }}'\n    name: '{{ block_name }}'\n    state: stop\n\n# Multiple module calls with cached result passing\n- name: Create '{{ block_name }}' block\n  register: module_cache\n  community.general.pubnub_blocks:\n    email: '{{ email }}'\n    password: '{{ password }}'\n    application: '{{ app_name }}'\n    keyset: '{{ keyset_name }}'\n    name: '{{ block_name }}'\n    state: present\n- name: Add '{{ event_handler_1_name }}' handler to '{{ block_name }}'\n  register: module_cache\n  community.general.pubnub_blocks:\n    cache: '{{ module_cache }}'\n    application: '{{ app_name }}'\n    keyset: '{{ keyset_name }}'\n    name: '{{ block_name }}'\n    state: present\n    event_handlers:\n      -\n        src: '{{ path_to_handler_1_source }}'\n        name: '{{ event_handler_1_name }}'\n        channels: '{{ event_handler_1_channel }}'\n        event: 'js-before-publish'\n- name: Add '{{ event_handler_2_name }}' handler to '{{ block_name }}'\n  register: module_cache\n  community.general.pubnub_blocks:\n    cache: '{{ module_cache }}'\n    application: '{{ app_name }}'\n    keyset: '{{ keyset_name }}'\n    name: '{{ block_name }}'\n    state: present\n    event_handlers:\n      -\n        src: '{{ path_to_handler_2_source }}'\n        name: '{{ event_handler_2_name }}'\n        channels: '{{ event_handler_2_channel }}'\n        event: 'js-before-publish'\n- name: Start '{{ block_name }}' block\n  register: module_cache\n  community.general.pubnub_blocks:\n    cache: '{{ module_cache }}'\n    application: '{{ app_name }}'\n    keyset: '{{ keyset_name }}'\n    name: '{{ block_name }}'\n    state: started\n"
  },
  "community.general.pulp_repo": {
    "doc": {
      "description": "Add or remove Pulp repos from a remote host.\nNote, this is for Pulp 2 only.",
      "has_action": false,
      "notes": "This module can currently only create distributors and importers on rpm repositories. Contributions to support other repo types are welcome.",
      "options": {
        "add_export_distributor": {
          "aliases": [],
          "description": "Whether or not to add the export distributor to new C(rpm) repositories.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "feed": {
          "aliases": [],
          "description": "Upstream feed URL to receive updates from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "feed_ca_cert": {
          "aliases": [
            "importer_ssl_ca_cert"
          ],
          "description": "CA certificate string used to validate the feed source SSL certificate. This can be the file content or the path to the file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "feed_client_cert": {
          "aliases": [
            "importer_ssl_client_cert"
          ],
          "description": "Certificate used as the client certificate when synchronizing the repository. This is used to communicate authentication information to the feed source. The value to this option must be the full path to the certificate. The specified file may be the certificate itself or a single file containing both the certificate and private key. This can be the file content or the path to the file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "feed_client_key": {
          "aliases": [
            "importer_ssl_client_key"
          ],
          "description": "Private key to the certificate specified in I(importer_ssl_client_cert), assuming it is not included in the certificate file itself. This can be the file content or the path to the file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "httplib2, the library used by the M(ansible.builtin.uri) module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "generate_sqlite": {
          "aliases": [],
          "description": "Boolean flag to indicate whether sqlite files should be generated during a repository publish.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "repo"
          ],
          "description": "Name of the repo to add or remove. This correlates to repo-id in Pulp.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Proxy url setting for the pulp repository importer. This is in the format scheme://host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_password": {
          "aliases": [],
          "description": "Proxy password for the pulp repository importer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Proxy port setting for the pulp repository importer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_username": {
          "aliases": [],
          "description": "Proxy username for the pulp repository importer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "publish_distributor": {
          "aliases": [],
          "description": "Distributor to use when state is C(publish). The default is to publish all distributors.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pulp_host": {
          "aliases": [],
          "description": "URL of the pulp server to connect to.",
          "default": "https://127.0.0.1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "relative_url": {
          "aliases": [],
          "description": "Relative URL for the local repository. It's required when state=present.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repo_type": {
          "aliases": [],
          "description": "Repo plugin type to use (i.e. C(rpm), C(docker)).",
          "default": "rpm",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repoview": {
          "aliases": [],
          "description": "Whether to generate repoview files for a published repository. Setting this to \"yes\" automatically activates `generate_sqlite`.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "serve_http": {
          "aliases": [],
          "description": "Make the repo available over HTTP.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "serve_https": {
          "aliases": [],
          "description": "Make the repo available over HTTPS.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The repo state. A state of C(sync) will queue a sync of the repo. This is asynchronous but not delayed like a scheduled sync. A state of C(publish) will use the repository's distributor to publish the content.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "sync",
            "publish"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication to the pulp API. If the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication to the pulp API.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_for_completion": {
          "aliases": [],
          "description": "Wait for asynchronous tasks to complete before returning.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Add or remove Pulp repos from a remote host."
    },
    "examples": "\n- name: Create a new repo with name 'my_repo'\n  community.general.pulp_repo:\n    name: my_repo\n    relative_url: my/repo\n    state: present\n\n- name: Create a repo with a feed and a relative URL\n  community.general.pulp_repo:\n    name: my_centos_updates\n    repo_type: rpm\n    feed: http://mirror.centos.org/centos/6/updates/x86_64/\n    relative_url: centos/6/updates\n    url_username: admin\n    url_password: admin\n    force_basic_auth: yes\n    state: present\n\n- name: Remove a repo from the pulp server\n  community.general.pulp_repo:\n    name: my_old_repo\n    repo_type: rpm\n    state: absent\n"
  },
  "community.general.puppet": {
    "doc": {
      "description": "Runs I(puppet) agent or apply in a reliable manner.",
      "has_action": false,
      "options": {
        "certname": {
          "aliases": [],
          "description": "The name to use when handling certificates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Enable full debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "environment": {
          "aliases": [],
          "description": "Puppet environment to be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "execute": {
          "aliases": [],
          "description": "Execute a specific piece of Puppet code.\nIt has no effect with a puppetmaster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "facter_basename": {
          "aliases": [],
          "description": "Basename of the facter output file.",
          "default": "ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "facts": {
          "aliases": [],
          "description": "A dict of values to pass in as persistent external facter facts.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "logdest": {
          "aliases": [],
          "description": "Where the puppet logs should go, if puppet apply is being used.\nC(all) will go to both C(console) and C(syslog).\nC(stdout) will be deprecated and replaced by C(console).",
          "default": "stdout",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "stdout",
            "syslog"
          ],
          "suboptions": {}
        },
        "manifest": {
          "aliases": [],
          "description": "Path to the manifest file to run puppet apply on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "modulepath": {
          "aliases": [],
          "description": "Path to an alternate location for puppet modules.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "noop": {
          "aliases": [],
          "description": "Override puppet.conf noop mode.\nWhen C(yes), run Puppet agent with C(--noop) switch set.\nWhen C(no), run Puppet agent with C(--no-noop) switch set.\nWhen unset (default), use default or puppet.conf value if defined.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "puppetmaster": {
          "aliases": [],
          "description": "The hostname of the puppetmaster to contact.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "show_diff": {
          "aliases": [
            "show-diff"
          ],
          "description": "Whether to print file changes details\nAlias C(show-diff) has been deprecated and will be removed in community.general 7.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "summarize": {
          "aliases": [],
          "description": "Whether to print a transaction summary.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "A list of puppet tags to be used.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long to wait for I(puppet) to finish.",
          "default": "30m",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_srv_records": {
          "aliases": [],
          "description": "Toggles use_srv_records flag",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbose": {
          "aliases": [],
          "description": "Print extra information.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "puppet"
      ],
      "short_description": "Runs puppet"
    },
    "examples": "\n- name: Run puppet agent and fail if anything goes wrong\n  community.general.puppet:\n\n- name: Run puppet and timeout in 5 minutes\n  community.general.puppet:\n    timeout: 5m\n\n- name: Run puppet using a different environment\n  community.general.puppet:\n    environment: testing\n\n- name: Run puppet using a specific certname\n  community.general.puppet:\n    certname: agent01.example.com\n\n- name: Run puppet using a specific piece of Puppet code. Has no effect with a puppetmaster\n  community.general.puppet:\n    execute: include ::mymodule\n\n- name: Run puppet using a specific tags\n  community.general.puppet:\n    tags:\n    - update\n    - nginx\n\n- name: Run puppet agent in noop mode\n  community.general.puppet:\n    noop: yes\n\n- name: Run a manifest with debug, log to both syslog and console, specify module path\n  community.general.puppet:\n    modulepath: /etc/puppet/modules:/opt/stack/puppet-modules:/usr/share/openstack-puppet/modules\n    logdest: all\n    manifest: /var/lib/example/puppet_step_config.pp\n"
  },
  "community.general.pushbullet": {
    "doc": {
      "description": "This module sends push notifications via Pushbullet to channels or devices.",
      "has_action": false,
      "notes": "Requires pushbullet.py Python package on the remote host. You can install it via pip with ($ pip install pushbullet.py). See U(https://github.com/randomchars/pushbullet.py)",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Push bullet API token",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "body": {
          "aliases": [],
          "description": "Body of the notification, e.g. Details of the fault you're alerting.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "channel": {
          "aliases": [],
          "description": "The channel TAG you wish to broadcast a push notification, as seen on the \"My Channels\" > \"Edit your channel\" at Pushbullet page.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "The device NAME you wish to send a push notification, as seen on the Pushbullet main page.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "push_type": {
          "aliases": [],
          "description": "Thing you wish to push.",
          "default": "note",
          "type": "str",
          "required": false,
          "choices": [
            "note",
            "link"
          ],
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "Title of the notification.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL field, used when I(push_type) is C(link).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pushbullet.py"
      ],
      "short_description": "Sends notifications to Pushbullet"
    },
    "examples": "\n- name: Sends a push notification to a device\n  community.general.pushbullet:\n    api_key: \"ABC123abc123ABC123abc123ABC123ab\"\n    device: \"Chrome\"\n    title: \"You may see this on Google Chrome\"\n\n- name: Sends a link to a device\n  community.general.pushbullet:\n    api_key: ABC123abc123ABC123abc123ABC123ab\n    device: Chrome\n    push_type: link\n    title: Ansible Documentation\n    body: https://docs.ansible.com/\n\n- name: Sends a push notification to a channel\n  community.general.pushbullet:\n    api_key: ABC123abc123ABC123abc123ABC123ab\n    channel: my-awesome-channel\n    title: Broadcasting a message to the #my-awesome-channel folks\n\n- name: Sends a push notification with title and body to a channel\n  community.general.pushbullet:\n    api_key: ABC123abc123ABC123abc123ABC123ab\n    channel: my-awesome-channel\n    title: ALERT! Signup service is down\n    body: Error rate on signup service is over 90% for more than 2 minutes\n"
  },
  "community.general.pushover": {
    "doc": {
      "description": "Send notifications via pushover, to subscriber list of devices, and email addresses. Requires pushover app on devices.",
      "has_action": false,
      "notes": "You will require a pushover.net account to use this module. But no account is required to receive messages.",
      "options": {
        "app_token": {
          "aliases": [],
          "description": "Pushover issued token identifying your pushover app.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "A device the message should be sent to. Multiple devices can be specified, separated by a comma.",
          "type": "str",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "What message you wish to send.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pri": {
          "aliases": [],
          "description": "Message priority (see U(https://pushover.net) for details).",
          "default": "0",
          "type": "str",
          "required": false,
          "choices": [
            "-2",
            "-1",
            "0",
            "1",
            "2"
          ],
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "Message title.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_key": {
          "aliases": [],
          "description": "Pushover issued authentication key for your user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Send notifications via U(https://pushover.net)"
    },
    "examples": "\n- name: Send notifications via pushover.net\n  community.general.pushover:\n    msg: '{{ inventory_hostname }} is acting strange ...'\n    app_token: wxfdksl\n    user_key: baa5fe97f2c5ab3ca8f0bb59\n  delegate_to: localhost\n\n- name: Send notifications via pushover.net\n  community.general.pushover:\n    title: 'Alert!'\n    msg: '{{ inventory_hostname }} has exploded in flames, It is now time to panic'\n    pri: 1\n    app_token: wxfdksl\n    user_key: baa5fe97f2c5ab3ca8f0bb59\n  delegate_to: localhost\n\n- name: Send notifications via pushover.net to a specific device\n  community.general.pushover:\n    msg: '{{ inventory_hostname }} has been lost somewhere'\n    app_token: wxfdksl\n    user_key: baa5fe97f2c5ab3ca8f0bb59\n    device: admins-iPhone\n  delegate_to: localhost\n"
  },
  "community.general.python_requirements_info": {
    "doc": {
      "description": "Get info about available Python requirements on the target host, including listing required libraries and gathering versions.\nThis module was called C(python_requirements_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "options": {
        "dependencies": {
          "aliases": [],
          "description": "A list of version-likes or module names to check for installation. Supported operators: <, >, <=, >=, or ==. The bare module name like I(ansible), the module with a specific version like I(boto3==1.6.1), or a partial version like I(requests>2) are all valid specifications.\n",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Show python path and assert dependency versions"
    },
    "examples": "\n- name: Show python lib/site paths\n  community.general.python_requirements_info:\n\n- name: Check for modern boto3 and botocore versions\n  community.general.python_requirements_info:\n    dependencies:\n      - boto3>1.6\n      - botocore<2\n"
  },
  "community.general.rax": {
    "doc": {
      "description": "creates / deletes a Rackspace Public Cloud instance and optionally waits for it to be 'running'.",
      "has_action": false,
      "notes": "I(exact_count) can be \"destructive\" if the number of running servers in the I(group) is larger than that specified in I(count). In such a case, the I(state) is effectively set to C(absent) and the extra servers are deleted. In the case of deletion, the returned data structure will have C(action) set to C(delete), and the oldest servers in the group will be deleted.\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_increment": {
          "aliases": [],
          "description": "Whether or not to increment a single number with the name of the created servers. Only applicable when used with the I(group) attribute or meta key.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "boot_from_volume": {
          "aliases": [],
          "description": "Whether or not to boot the instance from a Cloud Block Storage volume. If C(yes) and I(image) is specified a new volume will be created at boot time. I(boot_volume_size) is required with I(image) to create a new volume at boot time.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "boot_volume": {
          "aliases": [],
          "description": "Cloud Block Storage ID or Name to use as the boot volume of the instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "boot_volume_size": {
          "aliases": [],
          "description": "Size of the volume to create in Gigabytes. This is only required with I(image) and I(boot_from_volume).",
          "default": "100",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "boot_volume_terminate": {
          "aliases": [],
          "description": "Whether the I(boot_volume) or newly created volume from I(image) will be terminated when the server is terminated",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "config_drive": {
          "aliases": [],
          "description": "Attach read-only configuration drive to server as label config-2",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "number of instances to launch",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "count_offset": {
          "aliases": [],
          "description": "number count to start at",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "disk_config": {
          "aliases": [],
          "description": "Disk partitioning strategy\nIf not specified it will assume the value C(auto).",
          "type": "str",
          "required": false,
          "choices": [
            "auto",
            "manual"
          ],
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "exact_count": {
          "aliases": [],
          "description": "Explicitly ensure an exact count of instances, used with state=active/present. If specified as C(yes) and I(count) is less than the servers matched, servers will be deleted to match the count. If the number of matched servers is fewer than specified in I(count) additional servers will be added.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_client_args": {
          "aliases": [],
          "description": "A hash of key/value pairs to be used when creating the cloudservers client. This is considered an advanced option, use it wisely and with caution.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "extra_create_args": {
          "aliases": [],
          "description": "A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, use it wisely and with caution.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "files": {
          "aliases": [],
          "description": "Files to insert into the instance. remotefilename:localcontent",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "flavor to use for the instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "host group to assign to server, is also used for idempotent operations to ensure a specific number of instances",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "image to use for the instance. Can be an C(id), C(human_id) or C(name). With I(boot_from_volume), a Cloud Block Storage volume will be created with this image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_ids": {
          "aliases": [],
          "description": "list of instance ids, currently only used when state='absent' to remove instances",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "key_name": {
          "aliases": [
            "keypair"
          ],
          "description": "key pair to use on the instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A hash of metadata to associate with the instance",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to give the instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "The network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be C(id) or C(label).",
          "default": "['public', 'private']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_data": {
          "aliases": [],
          "description": "Data to be uploaded to the servers config drive. This option implies I(config_drive). Can be a file path or a string",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state 'running' before returning",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "create / delete an instance in Rackspace Public Cloud"
    },
    "examples": "\n- name: Build a Cloud Server\n  gather_facts: False\n  tasks:\n    - name: Server build request\n      local_action:\n        module: rax\n        credentials: ~/.raxpub\n        name: rax-test1\n        flavor: 5\n        image: b11d9567-e412-4255-96b9-bd63ab23bcfe\n        key_name: my_rackspace_key\n        files:\n          /root/test.txt: /home/localuser/test.txt\n        wait: yes\n        state: present\n        networks:\n          - private\n          - public\n      register: rax\n\n- name: Build an exact count of cloud servers with incremented names\n  hosts: local\n  gather_facts: False\n  tasks:\n    - name: Server build requests\n      local_action:\n        module: rax\n        credentials: ~/.raxpub\n        name: test%03d.example.org\n        flavor: performance1-1\n        image: ubuntu-1204-lts-precise-pangolin\n        state: present\n        count: 10\n        count_offset: 10\n        exact_count: yes\n        group: test\n        wait: yes\n      register: rax\n"
  },
  "community.general.rax_cbs": {
    "doc": {
      "description": "Manipulate Rackspace Cloud Block Storage Volumes",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description to give the volume being created",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "image to use for bootable volumes. Can be an C(id), C(human_id) or C(name). This option requires C(pyrax>=1.9.3)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A hash of metadata to associate with the volume",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to give the volume being created",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of the volume to create in Gigabytes",
          "default": "100",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshot_id": {
          "aliases": [],
          "description": "The id of the snapshot to create the volume from",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_type": {
          "aliases": [],
          "description": "Type of the volume being created",
          "default": "SATA",
          "type": "str",
          "required": false,
          "choices": [
            "SATA",
            "SSD"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the volume to be in state 'available' before returning",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Manipulate Rackspace Cloud Block Storage Volumes"
    },
    "examples": "\n- name: Build a Block Storage Volume\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n    - name: Storage volume create request\n      local_action:\n        module: rax_cbs\n        credentials: ~/.raxpub\n        name: my-volume\n        description: My Volume\n        volume_type: SSD\n        size: 150\n        region: DFW\n        wait: yes\n        state: present\n        meta:\n          app: my-cool-app\n      register: my_volume\n"
  },
  "community.general.rax_cbs_attachments": {
    "doc": {
      "description": "Manipulate Rackspace Cloud Block Storage Volume Attachments",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "The device path to attach the volume to, e.g. /dev/xvde.\nBefore 2.4 this was a required field. Now it can be left to null to auto assign the device name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Name or id of the server to attach/detach",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Name or id of the volume to attach/detach",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the volume to be in 'in-use'/'available' state before returning",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Manipulate Rackspace Cloud Block Storage Volume Attachments"
    },
    "examples": "\n- name: Attach a Block Storage Volume\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n    - name: Storage volume attach request\n      local_action:\n        module: rax_cbs_attachments\n        credentials: ~/.raxpub\n        volume: my-volume\n        server: my-server\n        device: /dev/xvdd\n        region: DFW\n        wait: yes\n        state: present\n      register: my_volume\n"
  },
  "community.general.rax_cdb": {
    "doc": {
      "description": "creates / deletes or resize a Rackspace Cloud Databases instance and optionally waits for it to be 'running'. The name option needs to be unique since it's used to identify the instance.",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cdb_type": {
          "aliases": [
            "type"
          ],
          "description": "type of instance (i.e. MySQL, MariaDB, Percona)",
          "default": "MySQL",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cdb_version": {
          "aliases": [
            "version"
          ],
          "description": "version of database (MySQL supports 5.1 and 5.6, MariaDB supports 10, Percona supports 5.6)\nThe available choices are: C(5.1), C(5.6) and  C(10).",
          "default": "5.6",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "flavor to use for the instance 1 to 6 (i.e. 512MB to 16GB)",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the databases server instance",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Volume size of the database 1-150GB",
          "default": "2",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the instance to be in state 'running' before returning",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "create/delete or resize a Rackspace Cloud Databases instance"
    },
    "examples": "\n- name: Build a Cloud Databases\n  gather_facts: False\n  tasks:\n    - name: Server build request\n      local_action:\n        module: rax_cdb\n        credentials: ~/.raxpub\n        region: IAD\n        name: db-server1\n        flavor: 1\n        volume: 2\n        cdb_type: MySQL\n        cdb_version: 5.6\n        wait: yes\n        state: present\n      register: rax_db_server\n"
  },
  "community.general.rax_cdb_database": {
    "doc": {
      "description": "create / delete a database in the Cloud Databases.",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cdb_id": {
          "aliases": [],
          "description": "The databases server UUID",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "character_set": {
          "aliases": [],
          "description": "Set of symbols and encodings",
          "default": "utf8",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "collate": {
          "aliases": [],
          "description": "Set of rules for comparing characters in a character set",
          "default": "utf8_general_ci",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to give to the database",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "create / delete a database in the Cloud Databases"
    },
    "examples": "\n- name: Build a database in Cloud Databases\n  tasks:\n    - name: Database build request\n      local_action:\n        module: rax_cdb_database\n        credentials: ~/.raxpub\n        region: IAD\n        cdb_id: 323e7ce0-9cb0-11e3-a5e2-0800200c9a66\n        name: db1\n        state: present\n      register: rax_db_database\n"
  },
  "community.general.rax_cdb_user": {
    "doc": {
      "description": "create / delete a database in the Cloud Databases.",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cdb_id": {
          "aliases": [],
          "description": "The databases server UUID",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "databases": {
          "aliases": [],
          "description": "Name of the databases that the user can access",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "db_password": {
          "aliases": [],
          "description": "Database user password",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "db_username": {
          "aliases": [],
          "description": "Name of the database user",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Specifies the host from which a user is allowed to connect to the database. Possible values are a string containing an IPv4 address or \"%\" to allow connecting from any host",
          "default": "%",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "create / delete a Rackspace Cloud Database"
    },
    "examples": "\n- name: Build a user in Cloud Databases\n  tasks:\n    - name: User build request\n      local_action:\n        module: rax_cdb_user\n        credentials: ~/.raxpub\n        region: IAD\n        cdb_id: 323e7ce0-9cb0-11e3-a5e2-0800200c9a66\n        db_username: user1\n        db_password: user1\n        databases: ['db1']\n        state: present\n      register: rax_db_user\n"
  },
  "community.general.rax_clb": {
    "doc": {
      "description": "creates / deletes a Rackspace Public Cloud load balancer.",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "algorithm": {
          "aliases": [],
          "description": "algorithm for the balancer being created",
          "default": "LEAST_CONNECTIONS",
          "type": "str",
          "required": false,
          "choices": [
            "RANDOM",
            "LEAST_CONNECTIONS",
            "ROUND_ROBIN",
            "WEIGHTED_LEAST_CONNECTIONS",
            "WEIGHTED_ROUND_ROBIN"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A hash of metadata to associate with the instance",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to give the load balancer",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port for the balancer being created",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Protocol for the balancer being created",
          "default": "HTTP",
          "type": "str",
          "required": false,
          "choices": [
            "DNS_TCP",
            "DNS_UDP",
            "FTP",
            "HTTP",
            "HTTPS",
            "IMAPS",
            "IMAPv4",
            "LDAP",
            "LDAPS",
            "MYSQL",
            "POP3",
            "POP3S",
            "SMTP",
            "TCP",
            "TCP_CLIENT_FIRST",
            "UDP",
            "UDP_STREAM",
            "SFTP"
          ],
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "timeout for communication between the balancer and the node",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "type of interface for the balancer being created",
          "default": "PUBLIC",
          "type": "str",
          "required": false,
          "choices": [
            "PUBLIC",
            "SERVICENET"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vip_id": {
          "aliases": [],
          "description": "Virtual IP ID to use when creating the load balancer for purposes of sharing an IP with another load balancer of another protocol",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the balancer to be in state 'running' before returning",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "create / delete a load balancer in Rackspace Public Cloud"
    },
    "examples": "\n- name: Build a Load Balancer\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n    - name: Load Balancer create request\n      local_action:\n        module: rax_clb\n        credentials: ~/.raxpub\n        name: my-lb\n        port: 8080\n        protocol: HTTP\n        type: SERVICENET\n        timeout: 30\n        region: DFW\n        wait: yes\n        state: present\n        meta:\n          app: my-cool-app\n      register: my_lb\n"
  },
  "community.general.rax_clb_nodes": {
    "doc": {
      "description": "Adds, modifies and removes nodes from a Rackspace Cloud Load Balancer",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "address": {
          "aliases": [],
          "description": "IP address or domain name of the node",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "condition": {
          "aliases": [],
          "description": "Condition for the node, which determines its role within the load balancer",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled",
            "draining"
          ],
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "load_balancer_id": {
          "aliases": [],
          "description": "Load balancer id",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "node_id": {
          "aliases": [],
          "description": "Node id",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port number of the load balanced service on the node",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the node",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of node",
          "type": "str",
          "required": false,
          "choices": [
            "primary",
            "secondary"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "virtualenv": {
          "aliases": [],
          "description": "Virtualenv to execute this module in",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the load balancer to become active before returning",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "How long to wait before giving up and returning an error",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "Weight of node",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "add, modify and remove nodes from a Rackspace Cloud Load Balancer"
    },
    "examples": "\n- name: Add a new node to the load balancer\n  local_action:\n    module: rax_clb_nodes\n    load_balancer_id: 71\n    address: 10.2.2.3\n    port: 80\n    condition: enabled\n    type: primary\n    wait: yes\n    credentials: /path/to/credentials\n\n- name: Drain connections from a node\n  local_action:\n    module: rax_clb_nodes\n    load_balancer_id: 71\n    node_id: 410\n    condition: draining\n    wait: yes\n    credentials: /path/to/credentials\n\n- name: Remove a node from the load balancer\n  local_action:\n    module: rax_clb_nodes\n    load_balancer_id: 71\n    node_id: 410\n    state: absent\n    wait: yes\n    credentials: /path/to/credentials\n"
  },
  "community.general.rax_clb_ssl": {
    "doc": {
      "description": "Set up, reconfigure, or remove SSL termination for an existing load balancer.",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "certificate": {
          "aliases": [],
          "description": "The public SSL certificates as a string in PEM format.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "If set to \"false\", temporarily disable SSL termination without discarding\nexisting credentials.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "https_redirect": {
          "aliases": [],
          "description": "If \"true\", the load balancer will redirect HTTP traffic to HTTPS.\nRequires \"secure_traffic_only\" to be true. Incurs an implicit wait if SSL\ntermination is also applied or removed.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "intermediate_certificate": {
          "aliases": [],
          "description": "One or more intermediate certificate authorities as a string in PEM\nformat, concatenated into a single string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "loadbalancer": {
          "aliases": [],
          "description": "Name or ID of the load balancer on which to manage SSL termination.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "private_key": {
          "aliases": [],
          "description": "The private SSL key as a string in PEM format.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secure_port": {
          "aliases": [],
          "description": "The port to listen for secure traffic.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "secure_traffic_only": {
          "aliases": [],
          "description": "If \"true\", the load balancer will *only* accept secure traffic.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to \"present\", SSL termination will be added to this load balancer.\nIf \"absent\", SSL termination will be removed instead.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the balancer to be in state \"running\" before turning.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "How long before \"wait\" gives up, in seconds.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "Manage SSL termination for a Rackspace Cloud Load Balancer."
    },
    "examples": "\n- name: Enable SSL termination on a load balancer\n  community.general.rax_clb_ssl:\n    loadbalancer: the_loadbalancer\n    state: present\n    private_key: \"{{ lookup('file', 'credentials/server.key' ) }}\"\n    certificate: \"{{ lookup('file', 'credentials/server.crt' ) }}\"\n    intermediate_certificate: \"{{ lookup('file', 'credentials/trust-chain.crt') }}\"\n    secure_traffic_only: true\n    wait: true\n\n- name: Disable SSL termination\n  community.general.rax_clb_ssl:\n    loadbalancer: \"{{ registered_lb.balancer.id }}\"\n    state: absent\n    wait: true\n"
  },
  "community.general.rax_dns": {
    "doc": {
      "description": "Manage domains on Rackspace Cloud DNS",
      "has_action": false,
      "notes": "It is recommended that plays utilizing this module be run with C(serial: 1) to avoid exceeding the API request limit imposed by the Rackspace CloudDNS API\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Brief description of the domain. Maximum length of 160 characters",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email address of the domain administrator",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Domain name to create",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Time to live of domain in seconds",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "Manage domains on Rackspace Cloud DNS"
    },
    "examples": "\n- name: Create domain\n  hosts: all\n  gather_facts: False\n  tasks:\n    - name: Domain create request\n      local_action:\n        module: rax_dns\n        credentials: ~/.raxpub\n        name: example.org\n        email: admin@example.org\n      register: rax_dns\n"
  },
  "community.general.rax_dns_record": {
    "doc": {
      "description": "Manage DNS records on Rackspace Cloud DNS",
      "has_action": false,
      "notes": "It is recommended that plays utilizing this module be run with C(serial: 1) to avoid exceeding the API request limit imposed by the Rackspace CloudDNS API\nTo manipulate a C(PTR) record either C(loadbalancer) or C(server) must be supplied\nAs of version 1.7, the C(type) field is required and no longer defaults to an C(A) record.\nC(PTR) record support was added in version 1.7\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Brief description of the domain. Maximum length of 160 characters",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "IP address for A/AAAA record, FQDN for CNAME/MX/NS, or text data for SRV/TXT",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain name to create the record in. This is an invalid option when type=PTR",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "loadbalancer": {
          "aliases": [],
          "description": "Load Balancer ID to create a PTR record for. Only used with type=PTR",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "FQDN record name to create",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "overwrite": {
          "aliases": [],
          "description": "Add new records if data doesn't match, instead of updating existing record with matching name. If there are already multiple records with matching name and overwrite=true, this module will fail.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Required for MX and SRV records, but forbidden for other record types. If specified, must be an integer from 0 to 65535.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Server ID to create a PTR record for. Only used with type=PTR",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Time to live of record in seconds",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "DNS record type",
          "type": "str",
          "required": true,
          "choices": [
            "A",
            "AAAA",
            "CNAME",
            "MX",
            "NS",
            "SRV",
            "TXT",
            "PTR"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "Manage DNS records on Rackspace Cloud DNS"
    },
    "examples": "\n- name: Create DNS Records\n  hosts: all\n  gather_facts: False\n  tasks:\n    - name: Create A record\n      local_action:\n        module: rax_dns_record\n        credentials: ~/.raxpub\n        domain: example.org\n        name: www.example.org\n        data: \"{{ rax_accessipv4 }}\"\n        type: A\n      register: a_record\n\n    - name: Create PTR record\n      local_action:\n        module: rax_dns_record\n        credentials: ~/.raxpub\n        server: \"{{ rax_id }}\"\n        name: \"{{ inventory_hostname }}\"\n        region: DFW\n      register: ptr_record\n"
  },
  "community.general.rax_facts": {
    "doc": {
      "description": "Gather facts for Rackspace Cloud Servers.",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "address": {
          "aliases": [],
          "description": "Server IP address to retrieve facts for, will match any IP assigned to the server",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Server ID to retrieve facts for",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Server name to retrieve facts for",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Gather facts for Rackspace Cloud Servers"
    },
    "examples": "\n- name: Gather info about servers\n  hosts: all\n  gather_facts: False\n  tasks:\n    - name: Get facts about servers\n      local_action:\n        module: rax_facts\n        credentials: ~/.raxpub\n        name: \"{{ inventory_hostname }}\"\n        region: DFW\n    - name: Map some facts\n      ansible.builtin.set_fact:\n        ansible_ssh_host: \"{{ rax_accessipv4 }}\"\n"
  },
  "community.general.rax_files": {
    "doc": {
      "description": "Manipulate Rackspace Cloud Files Containers",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clear_meta": {
          "aliases": [],
          "description": "Optionally clear existing metadata when applying metadata to existing containers. Selecting this option is only appropriate when setting type=meta",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "The container to use for container or metadata operations.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A hash of items to set as metadata values on a container",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "private": {
          "aliases": [],
          "description": "Used to set a container as private, removing it from the CDN.  B(Warning!) Private containers, if previously made public, can have live objects available until the TTL on cached objects expires",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "public": {
          "aliases": [],
          "description": "Used to set a container as public, available via the Cloud Files CDN",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "list"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "In seconds, set a container-wide TTL for all objects cached on CDN edge nodes. Setting a TTL is only appropriate for containers that are public",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of object to do work on, i.e. metadata object or a container object",
          "default": "container",
          "type": "str",
          "required": false,
          "choices": [
            "container",
            "meta"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "web_error": {
          "aliases": [],
          "description": "Sets an object to be presented as the HTTP error page when accessed by the CDN URL",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "web_index": {
          "aliases": [],
          "description": "Sets an object to be presented as the HTTP index page when accessed by the CDN URL",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "Manipulate Rackspace Cloud Files Containers"
    },
    "examples": "\n- name: \"Test Cloud Files Containers\"\n  hosts: local\n  gather_facts: no\n  tasks:\n    - name: \"List all containers\"\n      community.general.rax_files:\n        state: list\n\n    - name: \"Create container called 'mycontainer'\"\n      community.general.rax_files:\n        container: mycontainer\n\n    - name: \"Create container 'mycontainer2' with metadata\"\n      community.general.rax_files:\n        container: mycontainer2\n        meta:\n          key: value\n          file_for: someuser@example.com\n\n    - name: \"Set a container's web index page\"\n      community.general.rax_files:\n        container: mycontainer\n        web_index: index.html\n\n    - name: \"Set a container's web error page\"\n      community.general.rax_files:\n        container: mycontainer\n        web_error: error.html\n\n    - name: \"Make container public\"\n      community.general.rax_files:\n        container: mycontainer\n        public: yes\n\n    - name: \"Make container public with a 24 hour TTL\"\n      community.general.rax_files:\n        container: mycontainer\n        public: yes\n        ttl: 86400\n\n    - name: \"Make container private\"\n      community.general.rax_files:\n        container: mycontainer\n        private: yes\n\n- name: \"Test Cloud Files Containers Metadata Storage\"\n  hosts: local\n  gather_facts: no\n  tasks:\n    - name: \"Get mycontainer2 metadata\"\n      community.general.rax_files:\n        container: mycontainer2\n        type: meta\n\n    - name: \"Set mycontainer2 metadata\"\n      community.general.rax_files:\n        container: mycontainer2\n        type: meta\n        meta:\n          uploaded_by: someuser@example.com\n\n    - name: \"Remove mycontainer2 metadata\"\n      community.general.rax_files:\n        container: \"mycontainer2\"\n        type: meta\n        state: absent\n        meta:\n          key: \"\"\n          file_for: \"\"\n"
  },
  "community.general.rax_files_objects": {
    "doc": {
      "description": "Upload, download, and delete objects in Rackspace Cloud Files",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clear_meta": {
          "aliases": [],
          "description": "Optionally clear existing metadata when applying metadata to existing objects. Selecting this option is only appropriate when setting type=meta",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "The container to use for file object operations.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "The destination of a \"get\" operation; i.e. a local directory, \"/home/user/myfolder\". Used to specify the destination of an operation on a remote object; i.e. a file name, \"file1\", or a comma-separated list of remote objects, \"file1,file2,file17\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expires": {
          "aliases": [],
          "description": "Used to set an expiration on a file or folder uploaded to Cloud Files. Requires an integer, specifying expiration in seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A hash of items to set as metadata values on an uploaded file or folder",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "method": {
          "aliases": [],
          "description": "The method of operation to be performed.  For example, put to upload files to Cloud Files, get to download files from Cloud Files or delete to delete remote objects in Cloud Files",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "put",
            "delete"
          ],
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Source from which to upload files.  Used to specify a remote object as a source for an operation, i.e. a file name, \"file1\", or a comma-separated list of remote objects, \"file1,file2,file17\".  src and dest are mutually exclusive on remote-only object operations",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "structure": {
          "aliases": [],
          "description": "Used to specify whether to maintain nested directory structure when downloading objects from Cloud Files.  Setting to false downloads the contents of a container to a single, flat directory",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of object to do work on\nMetadata object or a file object",
          "default": "file",
          "type": "str",
          "required": false,
          "choices": [
            "file",
            "meta"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "Upload, download, and delete objects in Rackspace Cloud Files"
    },
    "examples": "\n- name: \"Test Cloud Files Objects\"\n  hosts: local\n  gather_facts: False\n  tasks:\n    - name: \"Get objects from test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        dest: ~/Downloads/testcont\n\n    - name: \"Get single object from test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        src: file1\n        dest: ~/Downloads/testcont\n\n    - name: \"Get several objects from test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        src: file1,file2,file3\n        dest: ~/Downloads/testcont\n\n    - name: \"Delete one object in test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: delete\n        dest: file1\n\n    - name: \"Delete several objects in test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: delete\n        dest: file2,file3,file4\n\n    - name: \"Delete all objects in test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: delete\n\n    - name: \"Upload all files to test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: put\n        src: ~/Downloads/onehundred\n\n    - name: \"Upload one file to test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: put\n        src: ~/Downloads/testcont/file1\n\n    - name: \"Upload one file to test container with metadata\"\n      community.general.rax_files_objects:\n        container: testcont\n        src: ~/Downloads/testcont/file2\n        method: put\n        meta:\n          testkey: testdata\n          who_uploaded_this: someuser@example.com\n\n    - name: \"Upload one file to test container with TTL of 60 seconds\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: put\n        src: ~/Downloads/testcont/file3\n        expires: 60\n\n    - name: \"Attempt to get remote object that does not exist\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: get\n        src: FileThatDoesNotExist.jpg\n        dest: ~/Downloads/testcont\n      ignore_errors: yes\n\n    - name: \"Attempt to delete remote object that does not exist\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: delete\n        dest: FileThatDoesNotExist.jpg\n      ignore_errors: yes\n\n- name: \"Test Cloud Files Objects Metadata\"\n  hosts: local\n  gather_facts: false\n  tasks:\n    - name: \"Get metadata on one object\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        dest: file2\n\n    - name: \"Get metadata on several objects\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        src: file2,file1\n\n    - name: \"Set metadata on an object\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        dest: file17\n        method: put\n        meta:\n          key1: value1\n          key2: value2\n        clear_meta: true\n\n    - name: \"Verify metadata is set\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        src: file17\n\n    - name: \"Delete metadata\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        dest: file17\n        method: delete\n        meta:\n          key1: ''\n          key2: ''\n\n    - name: \"Get metadata on all objects\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n"
  },
  "community.general.rax_identity": {
    "doc": {
      "description": "Verifies Rackspace Cloud credentials and returns identity information",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Load Rackspace Cloud Identity"
    },
    "examples": "\n- name: Load Rackspace Cloud Identity\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n    - name: Load Identity\n      local_action:\n        module: rax_identity\n        credentials: ~/.raxpub\n        region: DFW\n      register: rackspace_identity\n"
  },
  "community.general.rax_keypair": {
    "doc": {
      "description": "Create a keypair for use with Rackspace Cloud Servers",
      "has_action": false,
      "notes": "Keypairs cannot be manipulated, only created and deleted. To \"update\" a keypair you must first delete and then recreate.\nThe ability to specify a file path for the public key was added in 1.7\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of keypair",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "public_key": {
          "aliases": [],
          "description": "Public Key string to upload. Can be a file path or string",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Create a keypair for use with Rackspace Cloud Servers"
    },
    "examples": "\n- name: Create a keypair\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Keypair request\n      local_action:\n        module: rax_keypair\n        credentials: ~/.raxpub\n        name: my_keypair\n        region: DFW\n      register: keypair\n    - name: Create local public key\n      local_action:\n        module: copy\n        content: \"{{ keypair.keypair.public_key }}\"\n        dest: \"{{ inventory_dir }}/{{ keypair.keypair.name }}.pub\"\n    - name: Create local private key\n      local_action:\n        module: copy\n        content: \"{{ keypair.keypair.private_key }}\"\n        dest: \"{{ inventory_dir }}/{{ keypair.keypair.name }}\"\n\n- name: Create a keypair\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Keypair request\n      local_action:\n        module: rax_keypair\n        credentials: ~/.raxpub\n        name: my_keypair\n        public_key: \"{{ lookup('file', 'authorized_keys/id_rsa.pub') }}\"\n        region: DFW\n      register: keypair\n"
  },
  "community.general.rax_meta": {
    "doc": {
      "description": "Manipulate metadata for Rackspace Cloud Servers",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "address": {
          "aliases": [],
          "description": "Server IP address to modify metadata for, will match any IP assigned to the server",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Server ID to modify metadata for",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A hash of metadata to associate with the instance",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Server name to modify metadata for",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Manipulate metadata for Rackspace Cloud Servers"
    },
    "examples": "\n- name: Set metadata for a server\n  hosts: all\n  gather_facts: False\n  tasks:\n    - name: Set metadata\n      local_action:\n        module: rax_meta\n        credentials: ~/.raxpub\n        name: \"{{ inventory_hostname }}\"\n        region: DFW\n        meta:\n          group: primary_group\n          groups:\n            - group_two\n            - group_three\n          app: my_app\n\n    - name: Clear metadata\n      local_action:\n        module: rax_meta\n        credentials: ~/.raxpub\n        name: \"{{ inventory_hostname }}\"\n        region: DFW\n"
  },
  "community.general.rax_mon_alarm": {
    "doc": {
      "description": "Create or delete a Rackspace Cloud Monitoring alarm that associates an existing rax_mon_entity, rax_mon_check, and rax_mon_notification_plan with criteria that specify what conditions will trigger which levels of notifications. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> *rax_mon_alarm*",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "check_id": {
          "aliases": [],
          "description": "ID of the check that should be alerted on. May be acquired by registering the value of a rax_mon_check task.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "criteria": {
          "aliases": [],
          "description": "Alarm DSL that describes alerting conditions and their output states. Must be between 1 and 16384 characters long. See http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/alerts-language.html for a reference on the alerting language.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "If yes, create this alarm, but leave it in an inactive state. Defaults to no.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "entity_id": {
          "aliases": [],
          "description": "ID of the entity this alarm is attached to. May be acquired by registering the value of a rax_mon_entity task.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Friendly name for this alarm, used to achieve idempotence. Must be a String between 1 and 255 characters long.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Arbitrary key/value pairs to accompany the alarm. Must be a hash of String keys and values between 1 and 255 characters long.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "notification_plan_id": {
          "aliases": [],
          "description": "ID of the notification plan to trigger if this alarm fires. May be acquired by registering the value of a rax_mon_notification_plan task.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Ensure that the alarm with this C(label) exists or does not exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Create or delete a Rackspace Cloud Monitoring alarm."
    },
    "examples": "\n- name: Alarm example\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Ensure that a specific alarm exists.\n    community.general.rax_mon_alarm:\n      credentials: ~/.rax_pub\n      state: present\n      label: uhoh\n      entity_id: \"{{ the_entity['entity']['id'] }}\"\n      check_id: \"{{ the_check['check']['id'] }}\"\n      notification_plan_id: \"{{ defcon1['notification_plan']['id'] }}\"\n      criteria: >\n        if (rate(metric['average']) > 10) {\n          return new AlarmStatus(WARNING);\n        }\n        return new AlarmStatus(OK);\n    register: the_alarm\n"
  },
  "community.general.rax_mon_check": {
    "doc": {
      "description": "Create or delete a Rackspace Cloud Monitoring check associated with an existing rax_mon_entity. A check is a specific test or measurement that is performed, possibly from different monitoring zones, on the systems you monitor. Rackspace monitoring module flow | rax_mon_entity -> *rax_mon_check* -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "check_type": {
          "aliases": [],
          "description": "The type of check to create. C(remote.) checks may be created on any rax_mon_entity. C(agent.) checks may only be created on rax_mon_entities that have a non-null C(agent_id).\nChoices for this option are:\n- C(remote.dns)\n- C(remote.ftp-banner)\n- C(remote.http)\n- C(remote.imap-banner)\n- C(remote.mssql-banner)\n- C(remote.mysql-banner)\n- C(remote.ping)\n- C(remote.pop3-banner)\n- C(remote.postgresql-banner)\n- C(remote.smtp-banner)\n- C(remote.smtp)\n- C(remote.ssh)\n- C(remote.tcp)\n- C(remote.telnet-banner)\n- C(agent.filesystem)\n- C(agent.memory)\n- C(agent.load_average)\n- C(agent.cpu)\n- C(agent.disk)\n- C(agent.network)\n- C(agent.plugin)\n",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "details": {
          "aliases": [],
          "description": "Additional details specific to the check type. Must be a hash of strings between 1 and 255 characters long, or an array or object containing 0 to 256 items.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "If \"yes\", ensure the check is created, but don't actually use it yet.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "entity_id": {
          "aliases": [],
          "description": "ID of the rax_mon_entity to target with this check.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Defines a label for this check, between 1 and 64 characters long.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Hash of arbitrary key-value pairs to accompany this check if it fires. Keys and values must be strings between 1 and 255 characters long.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "monitoring_zones_poll": {
          "aliases": [],
          "description": "Comma-separated list of the names of the monitoring zones the check should run from. Available monitoring zones include mzdfw, mzhkg, mziad, mzlon, mzord and mzsyd. Required for remote.* checks; prohibited for agent.* checks.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "period": {
          "aliases": [],
          "description": "The number of seconds between each time the check is performed. Must be greater than the minimum period set on your account.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Ensure that a check with this C(label) exists or does not exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target_alias": {
          "aliases": [],
          "description": "One of `target_alias` and `target_hostname` is required for remote.* checks, but prohibited for agent.* checks. Use the corresponding key in the entity's `ip_addresses` hash to resolve an IP address to target.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "target_hostname": {
          "aliases": [],
          "description": "One of `target_hostname` and `target_alias` is required for remote.* checks, but prohibited for agent.* checks. The hostname this check should target. Must be a valid IPv4, IPv6, or FQDN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The number of seconds this check will wait when attempting to collect results. Must be less than the period.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Create or delete a Rackspace Cloud Monitoring check for an existing entity."
    },
    "examples": "\n- name: Create a monitoring check\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Associate a check with an existing entity.\n    community.general.rax_mon_check:\n      credentials: ~/.rax_pub\n      state: present\n      entity_id: \"{{ the_entity['entity']['id'] }}\"\n      label: the_check\n      check_type: remote.ping\n      monitoring_zones_poll: mziad,mzord,mzdfw\n      details:\n        count: 10\n      meta:\n        hurf: durf\n    register: the_check\n"
  },
  "community.general.rax_mon_entity": {
    "doc": {
      "description": "Create or delete a Rackspace Cloud Monitoring entity, which represents a device to monitor. Entities associate checks and alarms with a target system and provide a convenient, centralized place to store IP addresses. Rackspace monitoring module flow | *rax_mon_entity* -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "agent_id": {
          "aliases": [],
          "description": "Rackspace monitoring agent on the target device to which this entity is bound. Necessary to collect C(agent.) rax_mon_checks against this entity.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Defines a name for this entity. Must be a non-empty string between 1 and 255 characters long.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Hash of arbitrary C(name), C(value) pairs that are passed to associated rax_mon_alarms. Names and values must all be between 1 and 255 characters long.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "named_ip_addresses": {
          "aliases": [],
          "description": "Hash of IP addresses that may be referenced by name by rax_mon_checks added to this entity. Must be a dictionary of with keys that are names between 1 and 64 characters long, and values that are valid IPv4 or IPv6 addresses.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Ensure that an entity with this C(name) exists or does not exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Create or delete a Rackspace Cloud Monitoring entity"
    },
    "examples": "\n- name: Entity example\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Ensure an entity exists\n    community.general.rax_mon_entity:\n      credentials: ~/.rax_pub\n      state: present\n      label: my_entity\n      named_ip_addresses:\n        web_box: 192.0.2.4\n        db_box: 192.0.2.5\n      meta:\n        hurf: durf\n    register: the_entity\n"
  },
  "community.general.rax_mon_notification": {
    "doc": {
      "description": "Create or delete a Rackspace Cloud Monitoring notification that specifies a channel that can be used to communicate alarms, such as email, webhooks, or PagerDuty. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> *rax_mon_notification* -> rax_mon_notification_plan -> rax_mon_alarm",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "details": {
          "aliases": [],
          "description": "Dictionary of key-value pairs used to initialize the notification. Required keys and meanings vary with notification type. See http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/ service-notification-types-crud.html for details.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Defines a friendly name for this notification. String between 1 and 255 characters long.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "notification_type": {
          "aliases": [],
          "description": "A supported notification type.",
          "type": "str",
          "required": true,
          "choices": [
            "webhook",
            "email",
            "pagerduty"
          ],
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Ensure that the notification with this C(label) exists or does not exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Create or delete a Rackspace Cloud Monitoring notification."
    },
    "examples": "\n- name: Monitoring notification example\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Email me when something goes wrong.\n    rax_mon_entity:\n      credentials: ~/.rax_pub\n      label: omg\n      type: email\n      details:\n        address: me@mailhost.com\n    register: the_notification\n"
  },
  "community.general.rax_mon_notification_plan": {
    "doc": {
      "description": "Create or delete a Rackspace Cloud Monitoring notification plan by associating existing rax_mon_notifications with severity levels. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> *rax_mon_notification_plan* -> rax_mon_alarm",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "critical_state": {
          "aliases": [],
          "description": "Notification list to use when the alarm state is CRITICAL. Must be an array of valid rax_mon_notification ids.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Defines a friendly name for this notification plan. String between 1 and 255 characters long.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ok_state": {
          "aliases": [],
          "description": "Notification list to use when the alarm state is OK. Must be an array of valid rax_mon_notification ids.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Ensure that the notification plan with this C(label) exists or does not exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "warning_state": {
          "aliases": [],
          "description": "Notification list to use when the alarm state is WARNING. Must be an array of valid rax_mon_notification ids.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "Create or delete a Rackspace Cloud Monitoring notification plan."
    },
    "examples": "\n- name: Example notification plan\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Establish who gets called when.\n    community.general.rax_mon_notification_plan:\n      credentials: ~/.rax_pub\n      state: present\n      label: defcon1\n      critical_state:\n      - \"{{ everyone['notification']['id'] }}\"\n      warning_state:\n      - \"{{ opsfloor['notification']['id'] }}\"\n    register: defcon1\n"
  },
  "community.general.rax_network": {
    "doc": {
      "description": "creates / deletes a Rackspace Public Cloud isolated network.",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr": {
          "aliases": [],
          "description": "cidr of the network being created",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Label (name) to give the network",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyrax"
      ],
      "short_description": "create / delete an isolated network in Rackspace Public Cloud"
    },
    "examples": "\n- name: Build an Isolated Network\n  gather_facts: False\n\n  tasks:\n    - name: Network create request\n      local_action:\n        module: rax_network\n        credentials: ~/.raxpub\n        label: my-net\n        cidr: 192.168.3.0/24\n        state: present\n"
  },
  "community.general.rax_queue": {
    "doc": {
      "description": "creates / deletes a Rackspace Public Cloud queue.",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to give the queue",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "create / delete a queue in Rackspace Public Cloud"
    },
    "examples": "\n- name: Build a Queue\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n    - name: Queue create request\n      local_action:\n        module: rax_queue\n        credentials: ~/.raxpub\n        name: my-queue\n        region: DFW\n        state: present\n      register: my_queue\n"
  },
  "community.general.rax_scaling_group": {
    "doc": {
      "description": "Manipulate Rackspace Cloud Autoscale Groups",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "config_drive": {
          "aliases": [],
          "description": "Attach read-only configuration drive to server as label config-2",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cooldown": {
          "aliases": [],
          "description": "The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "disk_config": {
          "aliases": [],
          "description": "Disk partitioning strategy\nIf not specified, it will fallback to C(auto).",
          "type": "str",
          "required": false,
          "choices": [
            "auto",
            "manual"
          ],
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "files": {
          "aliases": [],
          "description": "Files to insert into the instance. Hash of C(remotepath: localpath)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "flavor to use for the instance",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "image to use for the instance. Can be an C(id), C(human_id) or C(name)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "key_name": {
          "aliases": [],
          "description": "key pair to use on the instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "loadbalancers": {
          "aliases": [],
          "description": "List of load balancer C(id) and C(port) hashes",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "max_entities": {
          "aliases": [],
          "description": "The maximum number of entities that are allowed in the scaling group. Must be an integer between 0 and 1000.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A hash of metadata to associate with the instance",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "min_entities": {
          "aliases": [],
          "description": "The minimum number of entities that are allowed in the scaling group. Must be an integer between 0 and 1000.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to give the scaling group",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "The network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be C(id) or C(label).",
          "default": "['public', 'private']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_name": {
          "aliases": [],
          "description": "The base name for servers created by Autoscale",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_data": {
          "aliases": [],
          "description": "Data to be uploaded to the servers config drive. This option implies I(config_drive). Can be a file path or a string",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "wait for the scaling group to finish provisioning the minimum amount of servers",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "how long before wait gives up, in seconds",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "Manipulate Rackspace Cloud Autoscale Groups"
    },
    "examples": "\n---\n- hosts: localhost\n  gather_facts: false\n  connection: local\n  tasks:\n    - community.general.rax_scaling_group:\n        credentials: ~/.raxpub\n        region: ORD\n        cooldown: 300\n        flavor: performance1-1\n        image: bb02b1a3-bc77-4d17-ab5b-421d89850fca\n        min_entities: 5\n        max_entities: 10\n        name: ASG Test\n        server_name: asgtest\n        loadbalancers:\n            - id: 228385\n              port: 80\n      register: asg\n"
  },
  "community.general.rax_scaling_policy": {
    "doc": {
      "description": "Manipulate Rackspace Cloud Autoscale Scaling Policy",
      "has_action": false,
      "notes": "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)\nThe following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).\nC(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)\nC(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file\nC(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
      "options": {
        "api_key": {
          "aliases": [
            "password"
          ],
          "description": "Rackspace API key, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "at": {
          "aliases": [],
          "description": "The UTC time when this policy will be executed. The time must be formatted according to C(yyyy-MM-dd'T'HH:mm:ss.SSS) such as C(2013-05-19T08:07:08Z)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_endpoint": {
          "aliases": [],
          "description": "The URI of the authentication service.\nIf not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "change": {
          "aliases": [],
          "description": "The change, either as a number of servers or as a percentage, to make in the scaling group. If this is a percentage, you must set I(is_percent) to C(true) also.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cooldown": {
          "aliases": [],
          "description": "The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "creds_file"
          ],
          "description": "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "cron": {
          "aliases": [],
          "description": "The time when the policy will be executed, as a cron entry. For example, if this is parameter is set to C(1 0 * * *)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "desired_capacity": {
          "aliases": [],
          "description": "The desired server capacity of the scaling the group; that is, how many servers should be in the scaling group.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_type": {
          "aliases": [],
          "description": "Authentication mechanism to use, such as rackspace or keystone.",
          "default": "rackspace",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_percent": {
          "aliases": [],
          "description": "Whether the value in I(change) is a percent value",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to give the policy",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "policy_type": {
          "aliases": [],
          "description": "The type of policy that will be executed for the current release.",
          "type": "str",
          "required": true,
          "choices": [
            "webhook",
            "schedule"
          ],
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region to create an instance in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scaling_group": {
          "aliases": [],
          "description": "Name of the scaling group that this policy will be added to",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_id": {
          "aliases": [],
          "description": "The tenant ID used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [],
          "description": "The tenant name used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Rackspace username, overrides I(credentials).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to require SSL validation of API endpoints.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrax",
        "python >= 2.6"
      ],
      "short_description": "Manipulate Rackspace Cloud Autoscale Scaling Policy"
    },
    "examples": "\n---\n- hosts: localhost\n  gather_facts: false\n  connection: local\n  tasks:\n    - community.general.rax_scaling_policy:\n        credentials: ~/.raxpub\n        region: ORD\n        at: '2013-05-19T08:07:08Z'\n        change: 25\n        cooldown: 300\n        is_percent: true\n        name: ASG Test Policy - at\n        policy_type: schedule\n        scaling_group: ASG Test\n      register: asps_at\n\n    - community.general.rax_scaling_policy:\n        credentials: ~/.raxpub\n        region: ORD\n        cron: '1 0 * * *'\n        change: 25\n        cooldown: 300\n        is_percent: true\n        name: ASG Test Policy - cron\n        policy_type: schedule\n        scaling_group: ASG Test\n      register: asp_cron\n\n    - community.general.rax_scaling_policy:\n        credentials: ~/.raxpub\n        region: ORD\n        cooldown: 300\n        desired_capacity: 5\n        name: ASG Test Policy - webhook\n        policy_type: webhook\n        scaling_group: ASG Test\n      register: asp_webhook\n"
  },
  "community.general.read_csv": {
    "doc": {
      "description": "Read a CSV file and return a list or a dictionary, containing one dictionary per row.",
      "has_action": false,
      "notes": "Ansible also ships with the C(csvfile) lookup plugin, which can be used to do selective lookups in CSV files from Jinja.",
      "options": {
        "delimiter": {
          "aliases": [],
          "description": "A one-character string used to separate fields.\nWhen using this parameter, you change the default value used by C(dialect).\nThe default value depends on the dialect used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dialect": {
          "aliases": [],
          "description": "The CSV dialect to use when parsing the CSV file.\nPossible values include C(excel), C(excel-tab) or C(unix).",
          "default": "excel",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fieldnames": {
          "aliases": [],
          "description": "A list of field names for every column.\nThis is needed if the CSV does not have a header.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "The column name used as a key for the resulting dictionary.\nIf C(key) is unset, the module returns a list of dictionaries, where each dictionary is a row in the CSV file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "filename"
          ],
          "description": "The CSV filename to read data from.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "skipinitialspace": {
          "aliases": [],
          "description": "Whether to ignore any whitespaces immediately following the delimiter.\nWhen using this parameter, you change the default value used by C(dialect).\nThe default value depends on the dialect used.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "strict": {
          "aliases": [],
          "description": "Whether to raise an exception on bad CSV input.\nWhen using this parameter, you change the default value used by C(dialect).\nThe default value depends on the dialect used.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "unique": {
          "aliases": [],
          "description": "Whether the C(key) used is expected to be unique.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Read a CSV file"
    },
    "examples": "\n# Example CSV file with header\n#\n#   name,uid,gid\n#   dag,500,500\n#   jeroen,501,500\n\n# Read a CSV file and access user 'dag'\n- name: Read users from CSV file and return a dictionary\n  community.general.read_csv:\n    path: users.csv\n    key: name\n  register: users\n  delegate_to: localhost\n\n- ansible.builtin.debug:\n    msg: 'User {{ users.dict.dag.name }} has UID {{ users.dict.dag.uid }} and GID {{ users.dict.dag.gid }}'\n\n# Read a CSV file and access the first item\n- name: Read users from CSV file and return a list\n  community.general.read_csv:\n    path: users.csv\n  register: users\n  delegate_to: localhost\n\n- ansible.builtin.debug:\n    msg: 'User {{ users.list.1.name }} has UID {{ users.list.1.uid }} and GID {{ users.list.1.gid }}'\n\n# Example CSV file without header and semi-colon delimiter\n#\n#   dag;500;500\n#   jeroen;501;500\n\n# Read a CSV file without headers\n- name: Read users from CSV file and return a list\n  community.general.read_csv:\n    path: users.csv\n    fieldnames: name,uid,gid\n    delimiter: ';'\n  register: users\n  delegate_to: localhost\n"
  },
  "community.general.redfish_command": {
    "doc": {
      "description": "Builds Redfish URIs locally and sends them to remote OOB controllers to perform an action.\nManages OOB controller ex. reboot, log management.\nManages OOB controller users ex. add, remove, update.\nManages system power ex. on, off, graceful and forced reboot.",
      "has_action": false,
      "options": {
        "account_properties": {
          "aliases": [],
          "description": "properties of account service to update",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with OOB controller",
          "type": "str",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of OOB controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "boot_next": {
          "aliases": [],
          "description": "BootNext target when bootdevice is \"UefiBootNext\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "boot_override_mode": {
          "aliases": [],
          "description": "Boot mode when using an override.",
          "type": "str",
          "required": false,
          "choices": [
            "Legacy",
            "UEFI"
          ],
          "version_added": "3.5.0",
          "suboptions": {}
        },
        "bootdevice": {
          "aliases": [],
          "description": "bootdevice when setting boot configuration",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Category to execute on OOB controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on OOB controller",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "id": {
          "aliases": [
            "account_id"
          ],
          "description": "ID of account to delete/modify.\nCan also be used in account creation to work around vendor issues where the ID of the new user is required in the POST request.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_password": {
          "aliases": [
            "account_password"
          ],
          "description": "New password of account to add/modify",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_username": {
          "aliases": [
            "account_username"
          ],
          "description": "Username of account to add/delete/modify",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_id": {
          "aliases": [],
          "description": "The ID of the System, Manager or Chassis to modify",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "roleid": {
          "aliases": [
            "account_roleid"
          ],
          "description": "Role of account to add/modify",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_uri": {
          "aliases": [],
          "description": "URI of the session resource",
          "type": "str",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "strip_etag_quotes": {
          "aliases": [],
          "description": "Removes surrounding quotes of etag used in C(If-Match) header of C(PATCH) requests.\nOnly use this option to resolve bad vendor implementation where C(If-Match) only matches the unquoted etag string.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to OOB controller",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uefi_target": {
          "aliases": [],
          "description": "UEFI target when bootdevice is \"UefiTarget\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "update_creds": {
          "aliases": [],
          "description": "The credentials for retrieving the update image",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {
            "password": {
              "aliases": [],
              "description": "The password for retrieving the update image",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username for retrieving the update image",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "update_image_uri": {
          "aliases": [],
          "description": "The URI of the image for the update",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "update_protocol": {
          "aliases": [],
          "description": "The protocol for the update",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "update_targets": {
          "aliases": [],
          "description": "The list of target resource URIs to apply the update to",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "update_username": {
          "aliases": [
            "account_updatename"
          ],
          "description": "new update user name for account_username",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "virtual_media": {
          "aliases": [],
          "description": "The options for VirtualMedia commands",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {
            "image_url": {
              "aliases": [],
              "description": "The URL od the image the insert or eject",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "inserted": {
              "aliases": [],
              "description": "Indicates if the image is treated as inserted on command completion",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "media_types": {
              "aliases": [],
              "description": "The list of media types appropriate for the image",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password for accessing the image URL",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "transfer_method": {
              "aliases": [],
              "description": "The transfer method to use with the image",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "transfer_protocol_type": {
              "aliases": [],
              "description": "The network protocol to use with the image",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username for accessing the image URL",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "write_protected": {
              "aliases": [],
              "description": "Indicates if the media is treated as write-protected",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Manages Out-Of-Band controllers using Redfish APIs"
    },
    "examples": "\n  - name: Restart system power gracefully\n    community.general.redfish_command:\n      category: Systems\n      command: PowerGracefulRestart\n      resource_id: 437XR1138R2\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Turn system power off\n    community.general.redfish_command:\n      category: Systems\n      command: PowerForceOff\n      resource_id: 437XR1138R2\n\n  - name: Restart system power forcefully\n    community.general.redfish_command:\n      category: Systems\n      command: PowerForceRestart\n      resource_id: 437XR1138R2\n\n  - name: Shutdown system power gracefully\n    community.general.redfish_command:\n      category: Systems\n      command: PowerGracefulShutdown\n      resource_id: 437XR1138R2\n\n  - name: Turn system power on\n    community.general.redfish_command:\n      category: Systems\n      command: PowerOn\n      resource_id: 437XR1138R2\n\n  - name: Reboot system power\n    community.general.redfish_command:\n      category: Systems\n      command: PowerReboot\n      resource_id: 437XR1138R2\n\n  - name: Set one-time boot device to {{ bootdevice }}\n    community.general.redfish_command:\n      category: Systems\n      command: SetOneTimeBoot\n      resource_id: 437XR1138R2\n      bootdevice: \"{{ bootdevice }}\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set one-time boot device to UefiTarget of \"/0x31/0x33/0x01/0x01\"\n    community.general.redfish_command:\n      category: Systems\n      command: SetOneTimeBoot\n      resource_id: 437XR1138R2\n      bootdevice: \"UefiTarget\"\n      uefi_target: \"/0x31/0x33/0x01/0x01\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set one-time boot device to BootNext target of \"Boot0001\"\n    community.general.redfish_command:\n      category: Systems\n      command: SetOneTimeBoot\n      resource_id: 437XR1138R2\n      bootdevice: \"UefiBootNext\"\n      boot_next: \"Boot0001\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set persistent boot device override\n    community.general.redfish_command:\n      category: Systems\n      command: EnableContinuousBootOverride\n      resource_id: 437XR1138R2\n      bootdevice: \"{{ bootdevice }}\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set one-time boot to BiosSetup\n    community.general.redfish_command:\n      category: Systems\n      command: SetOneTimeBoot\n      boot_next: BiosSetup\n      boot_override_mode: Legacy\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Disable persistent boot device override\n    community.general.redfish_command:\n      category: Systems\n      command: DisableBootOverride\n\n  - name: Add user\n    community.general.redfish_command:\n      category: Accounts\n      command: AddUser\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      new_username: \"{{ new_username }}\"\n      new_password: \"{{ new_password }}\"\n      roleid: \"{{ roleid }}\"\n\n  - name: Add user using new option aliases\n    community.general.redfish_command:\n      category: Accounts\n      command: AddUser\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_username: \"{{ account_username }}\"\n      account_password: \"{{ account_password }}\"\n      account_roleid: \"{{ account_roleid }}\"\n\n  - name: Delete user\n    community.general.redfish_command:\n      category: Accounts\n      command: DeleteUser\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_username: \"{{ account_username }}\"\n\n  - name: Disable user\n    community.general.redfish_command:\n      category: Accounts\n      command: DisableUser\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_username: \"{{ account_username }}\"\n\n  - name: Enable user\n    community.general.redfish_command:\n      category: Accounts\n      command: EnableUser\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_username: \"{{ account_username }}\"\n\n  - name: Add and enable user\n    community.general.redfish_command:\n      category: Accounts\n      command: AddUser,EnableUser\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      new_username: \"{{ new_username }}\"\n      new_password: \"{{ new_password }}\"\n      roleid: \"{{ roleid }}\"\n\n  - name: Update user password\n    community.general.redfish_command:\n      category: Accounts\n      command: UpdateUserPassword\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_username: \"{{ account_username }}\"\n      account_password: \"{{ account_password }}\"\n\n  - name: Update user role\n    community.general.redfish_command:\n      category: Accounts\n      command: UpdateUserRole\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_username: \"{{ account_username }}\"\n      roleid: \"{{ roleid }}\"\n\n  - name: Update user name\n    community.general.redfish_command:\n      category: Accounts\n      command: UpdateUserName\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_username: \"{{ account_username }}\"\n      account_updatename: \"{{ account_updatename }}\"\n\n  - name: Update user name\n    community.general.redfish_command:\n      category: Accounts\n      command: UpdateUserName\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_username: \"{{ account_username }}\"\n      update_username: \"{{ update_username }}\"\n\n  - name: Update AccountService properties\n    community.general.redfish_command:\n      category: Accounts\n      command: UpdateAccountServiceProperties\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      account_properties:\n        AccountLockoutThreshold: 5\n        AccountLockoutDuration: 600\n\n  - name: Clear Manager Logs with a timeout of 20 seconds\n    community.general.redfish_command:\n      category: Manager\n      command: ClearLogs\n      resource_id: BMC\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      timeout: 20\n\n  - name: Create session\n    community.general.redfish_command:\n      category: Sessions\n      command: CreateSession\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n\n  - name: Set chassis indicator LED to blink using security token for auth\n    community.general.redfish_command:\n      category: Chassis\n      command: IndicatorLedBlink\n      resource_id: 1U\n      baseuri: \"{{ baseuri }}\"\n      auth_token: \"{{ result.session.token }}\"\n\n  - name: Delete session using security token created by CreateSesssion above\n    community.general.redfish_command:\n      category: Sessions\n      command: DeleteSession\n      baseuri: \"{{ baseuri }}\"\n      auth_token: \"{{ result.session.token }}\"\n      session_uri: \"{{ result.session.uri }}\"\n\n  - name: Clear Sessions\n    community.general.redfish_command:\n      category: Sessions\n      command: ClearSessions\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Simple update\n    community.general.redfish_command:\n      category: Update\n      command: SimpleUpdate\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      update_image_uri: https://example.com/myupdate.img\n\n  - name: Simple update with additional options\n    community.general.redfish_command:\n      category: Update\n      command: SimpleUpdate\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      update_image_uri: //example.com/myupdate.img\n      update_protocol: FTP\n      update_targets:\n        - /redfish/v1/UpdateService/FirmwareInventory/BMC\n      update_creds:\n        username: operator\n        password: supersecretpwd\n\n  - name: Insert Virtual Media\n    community.general.redfish_command:\n      category: Manager\n      command: VirtualMediaInsert\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      virtual_media:\n        image_url: 'http://example.com/images/SomeLinux-current.iso'\n        media_types:\n          - CD\n          - DVD\n      resource_id: BMC\n\n  - name: Eject Virtual Media\n    community.general.redfish_command:\n      category: Manager\n      command: VirtualMediaEject\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      virtual_media:\n        image_url: 'http://example.com/images/SomeLinux-current.iso'\n      resource_id: BMC\n\n  - name: Restart manager power gracefully\n    community.general.redfish_command:\n      category: Manager\n      command: GracefulRestart\n      resource_id: BMC\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Restart manager power gracefully\n    community.general.redfish_command:\n      category: Manager\n      command: PowerGracefulRestart\n      resource_id: BMC\n\n  - name: Turn manager power off\n    community.general.redfish_command:\n      category: Manager\n      command: PowerForceOff\n      resource_id: BMC\n\n  - name: Restart manager power forcefully\n    community.general.redfish_command:\n      category: Manager\n      command: PowerForceRestart\n      resource_id: BMC\n\n  - name: Shutdown manager power gracefully\n    community.general.redfish_command:\n      category: Manager\n      command: PowerGracefulShutdown\n      resource_id: BMC\n\n  - name: Turn manager power on\n    community.general.redfish_command:\n      category: Manager\n      command: PowerOn\n      resource_id: BMC\n\n  - name: Reboot manager power\n    community.general.redfish_command:\n      category: Manager\n      command: PowerReboot\n      resource_id: BMC\n"
  },
  "community.general.redfish_config": {
    "doc": {
      "description": "Builds Redfish URIs locally and sends them to remote OOB controllers to set or update a configuration attribute.\nManages BIOS configuration settings.\nManages OOB controller configuration settings.",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with OOB controller",
          "type": "str",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of OOB controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "bios_attributes": {
          "aliases": [],
          "description": "dictionary of BIOS attributes to update",
          "default": "{}",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "boot_order": {
          "aliases": [],
          "description": "list of BootOptionReference strings specifying the BootOrder",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Category to execute on OOB controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on OOB controller",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "hostinterface_config": {
          "aliases": [],
          "description": "Setting dict of HostInterface on OOB controller.",
          "type": "dict",
          "required": false,
          "version_added": "4.1.0",
          "suboptions": {}
        },
        "hostinterface_id": {
          "aliases": [],
          "description": "Redfish HostInterface instance ID if multiple HostInterfaces are present.",
          "type": "str",
          "required": false,
          "version_added": "4.1.0",
          "suboptions": {}
        },
        "network_protocols": {
          "aliases": [],
          "description": "setting dict of manager services to update",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "nic_addr": {
          "aliases": [],
          "description": "EthernetInterface Address string on OOB controller",
          "default": "null",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "nic_config": {
          "aliases": [],
          "description": "setting dict of EthernetInterface on OOB controller",
          "type": "dict",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_id": {
          "aliases": [],
          "description": "The ID of the System, Manager or Chassis to modify",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "strip_etag_quotes": {
          "aliases": [],
          "description": "Removes surrounding quotes of etag used in C(If-Match) header of C(PATCH) requests.\nOnly use this option to resolve bad vendor implementation where C(If-Match) only matches the unquoted etag string.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to OOB controller",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "User for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Out-Of-Band controllers using Redfish APIs"
    },
    "examples": "\n  - name: Set BootMode to UEFI\n    community.general.redfish_config:\n      category: Systems\n      command: SetBiosAttributes\n      resource_id: 437XR1138R2\n      bios_attributes:\n        BootMode: \"Uefi\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set multiple BootMode attributes\n    community.general.redfish_config:\n      category: Systems\n      command: SetBiosAttributes\n      resource_id: 437XR1138R2\n      bios_attributes:\n        BootMode: \"Bios\"\n        OneTimeBootMode: \"Enabled\"\n        BootSeqRetry: \"Enabled\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Enable PXE Boot for NIC1\n    community.general.redfish_config:\n      category: Systems\n      command: SetBiosAttributes\n      resource_id: 437XR1138R2\n      bios_attributes:\n        PxeDev1EnDis: Enabled\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set BIOS default settings with a timeout of 20 seconds\n    community.general.redfish_config:\n      category: Systems\n      command: SetBiosDefaultSettings\n      resource_id: 437XR1138R2\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      timeout: 20\n\n  - name: Set boot order\n    community.general.redfish_config:\n      category: Systems\n      command: SetBootOrder\n      boot_order:\n        - Boot0002\n        - Boot0001\n        - Boot0000\n        - Boot0003\n        - Boot0004\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set boot order to the default\n    community.general.redfish_config:\n      category: Systems\n      command: SetDefaultBootOrder\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set Manager Network Protocols\n    community.general.redfish_config:\n      category: Manager\n      command: SetNetworkProtocols\n      network_protocols:\n        SNMP:\n          ProtocolEnabled: True\n          Port: 161\n        HTTP:\n          ProtocolEnabled: False\n          Port: 8080\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Set Manager NIC\n    community.general.redfish_config:\n      category: Manager\n      command: SetManagerNic\n      nic_config:\n        DHCPv4:\n          DHCPEnabled: False\n        IPv4StaticAddresses:\n          Address: 192.168.1.3\n          Gateway: 192.168.1.1\n          SubnetMask: 255.255.255.0\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Disable Host Interface\n    community.general.redfish_config:\n      category: Manager\n      command: SetHostInterface\n      hostinterface_config:\n        InterfaceEnabled: false\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Enable Host Interface for HostInterface resource ID '2'\n    community.general.redfish_config:\n      category: Manager\n      command: SetHostInterface\n      hostinterface_config:\n        InterfaceEnabled: true\n      hostinterface_id: \"2\"\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n"
  },
  "community.general.redfish_info": {
    "doc": {
      "description": "Builds Redfish URIs locally and sends them to remote OOB controllers to get information back.\nInformation retrieved is placed in a location specified by the user.\nThis module was called C(redfish_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.redfish_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with OOB controller",
          "type": "str",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of OOB controller",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "List of categories to execute on OOB controller",
          "default": "['Systems']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on OOB controller",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to OOB controller",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "User for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Out-Of-Band controllers using Redfish APIs"
    },
    "examples": "\n  - name: Get CPU inventory\n    community.general.redfish_info:\n      category: Systems\n      command: GetCpuInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n\n  - name: Print fetched information\n    ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.cpu.entries | to_nice_json }}\"\n\n  - name: Get CPU model\n    community.general.redfish_info:\n      category: Systems\n      command: GetCpuInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n\n  - name: Print fetched information\n    ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.cpu.entries.0.Model }}\"\n\n  - name: Get memory inventory\n    community.general.redfish_info:\n      category: Systems\n      command: GetMemoryInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n\n  - name: Get fan inventory with a timeout of 20 seconds\n    community.general.redfish_info:\n      category: Chassis\n      command: GetFanInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      timeout: 20\n    register: result\n\n  - name: Get Virtual Media information\n    community.general.redfish_info:\n      category: Manager\n      command: GetVirtualMedia\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n\n  - name: Print fetched information\n    ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.virtual_media.entries | to_nice_json }}\"\n\n  - name: Get Volume Inventory\n    community.general.redfish_info:\n      category: Systems\n      command: GetVolumeInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n  - name: Print fetched information\n    ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.volume.entries | to_nice_json }}\"\n\n  - name: Get Session information\n    community.general.redfish_info:\n      category: Sessions\n      command: GetSessions\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n\n  - name: Print fetched information\n    ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.session.entries | to_nice_json }}\"\n\n  - name: Get default inventory information\n    community.general.redfish_info:\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n  - name: Print fetched information\n    ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts | to_nice_json }}\"\n\n  - name: Get several inventories\n    community.general.redfish_info:\n      category: Systems\n      command: GetNicInventory,GetBiosAttributes\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get default system inventory and user information\n    community.general.redfish_info:\n      category: Systems,Accounts\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get default system, user and firmware information\n    community.general.redfish_info:\n      category: [\"Systems\", \"Accounts\", \"Update\"]\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get Manager NIC inventory information\n    community.general.redfish_info:\n      category: Manager\n      command: GetManagerNicInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get boot override information\n    community.general.redfish_info:\n      category: Systems\n      command: GetBootOverride\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get chassis inventory\n    community.general.redfish_info:\n      category: Chassis\n      command: GetChassisInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get all information available in the Manager category\n    community.general.redfish_info:\n      category: Manager\n      command: all\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get firmware update capability information\n    community.general.redfish_info:\n      category: Update\n      command: GetFirmwareUpdateCapabilities\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get firmware inventory\n    community.general.redfish_info:\n      category: Update\n      command: GetFirmwareInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get software inventory\n    community.general.redfish_info:\n      category: Update\n      command: GetSoftwareInventory\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get Manager Services\n    community.general.redfish_info:\n      category: Manager\n      command: GetNetworkProtocols\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get all information available in all categories\n    community.general.redfish_info:\n      category: all\n      command: all\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get system health report\n    community.general.redfish_info:\n      category: Systems\n      command: GetHealthReport\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get chassis health report\n    community.general.redfish_info:\n      category: Chassis\n      command: GetHealthReport\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get manager health report\n    community.general.redfish_info:\n      category: Manager\n      command: GetHealthReport\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n\n  - name: Get manager Redfish Host Interface inventory\n    community.general.redfish_info:\n      category: Manager\n      command: GetHostInterfaces\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n"
  },
  "community.general.redhat_subscription": {
    "doc": {
      "description": "Manage registration and subscription to the Red Hat Subscription Management entitlement platform using the C(subscription-manager) command",
      "has_action": false,
      "notes": "In order to register a system, subscription-manager requires either a username and password, or an activationkey and an Organization ID.\nSince 2.5 values for I(server_hostname), I(server_insecure), I(rhsm_baseurl), I(server_proxy_hostname), I(server_proxy_port), I(server_proxy_user) and I(server_proxy_password) are no longer taken from the C(/etc/rhsm/rhsm.conf) config file and default to None.",
      "options": {
        "activationkey": {
          "aliases": [],
          "description": "supply an activation key for use with registration",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_attach": {
          "aliases": [
            "autosubscribe"
          ],
          "description": "Upon successful registration, auto-consume available subscriptions\nAdded in favor of deprecated autosubscribe in 2.5.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "consumer_id": {
          "aliases": [],
          "description": "References an existing consumer ID to resume using a previous registration\nfor this system. If the  system's identity certificate is lost or corrupted,\nthis option allows it to resume using its previous identity and subscriptions.\nThe default is to not specify a consumer ID so a new ID is created.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "consumer_name": {
          "aliases": [],
          "description": "Name of the system to register, defaults to the hostname",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "consumer_type": {
          "aliases": [],
          "description": "The type of unit to register, defaults to system",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "environment": {
          "aliases": [],
          "description": "Register with a specific environment in the destination org. Used with Red Hat Satellite 6.x or Katello",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_register": {
          "aliases": [],
          "description": "Register the system even if it is already registered",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "Organization ID to use in conjunction with activationkey",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "access.redhat.com or Sat6 password",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "Specify a subscription pool name to consume.  Regular expressions accepted. Use I(pool_ids) instead if\npossible, as it is much faster. Mutually exclusive with I(pool_ids).\n",
          "default": "^$",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pool_ids": {
          "aliases": [],
          "description": "Specify subscription pool IDs to consume. Prefer over I(pool) when possible as it is much faster.\nA pool ID may be specified as a C(string) - just the pool ID (ex. C(0123456789abcdef0123456789abcdef)),\nor as a C(dict) with the pool ID as the key, and a quantity as the value (ex.\nC(0123456789abcdef0123456789abcdef: 2). If the quantity is provided, it is used to consume multiple\nentitlements from a pool (the pool must support this). Mutually exclusive with I(pool).\n",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "release": {
          "aliases": [],
          "description": "Set a release version",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rhsm_baseurl": {
          "aliases": [],
          "description": "Specify CDN baseurl",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rhsm_repo_ca_cert": {
          "aliases": [],
          "description": "Specify an alternative location for a CA certificate for CDN",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_hostname": {
          "aliases": [],
          "description": "Specify an alternative Red Hat Subscription Management or Sat6 server",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_insecure": {
          "aliases": [],
          "description": "Enable or disable https server certificate verification when connecting to C(server_hostname)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_port": {
          "aliases": [],
          "description": "Specify the port when registering to the Red Hat Subscription Management or Sat6 server.",
          "type": "str",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "server_prefix": {
          "aliases": [],
          "description": "Specify the prefix when registering to the Red Hat Subscription Management or Sat6 server.",
          "type": "str",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "server_proxy_hostname": {
          "aliases": [],
          "description": "Specify an HTTP proxy hostname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_proxy_password": {
          "aliases": [],
          "description": "Specify a password for HTTP proxy with basic authentication",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_proxy_port": {
          "aliases": [],
          "description": "Specify an HTTP proxy port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_proxy_user": {
          "aliases": [],
          "description": "Specify a user for HTTP proxy with basic authentication",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "whether to register and subscribe (C(present)), or unregister (C(absent)) a system",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "syspurpose": {
          "aliases": [],
          "description": "Set syspurpose attributes in file C(/etc/rhsm/syspurpose/syspurpose.json) and synchronize these attributes with RHSM server. Syspurpose attributes help attach the most appropriate subscriptions to the system automatically. When C(syspurpose.json) file already contains some attributes, then new attributes overwrite existing attributes. When some attribute is not listed in the new list of attributes, the existing attribute will be removed from C(syspurpose.json) file. Unknown attributes are ignored.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "addons": {
              "aliases": [],
              "description": "Syspurpose attribute addons",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "role": {
              "aliases": [],
              "description": "Syspurpose attribute role",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "service_level_agreement": {
              "aliases": [],
              "description": "Syspurpose attribute service_level_agreement",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "sync": {
              "aliases": [],
              "description": "When this option is true, then syspurpose attributes are synchronized with RHSM server immediately. When this option is false, then syspurpose attributes will be synchronized with RHSM server by rhsmcertd daemon.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "usage": {
              "aliases": [],
              "description": "Syspurpose attribute usage",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "access.redhat.com or Sat6 username",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "subscription-manager"
      ],
      "short_description": "Manage registration and subscriptions to RHSM using the C(subscription-manager) command"
    },
    "examples": "\n- name: Register as user (joe_user) with password (somepass) and auto-subscribe to available content.\n  community.general.redhat_subscription:\n    state: present\n    username: joe_user\n    password: somepass\n    auto_attach: true\n\n- name: Same as above but subscribe to a specific pool by ID.\n  community.general.redhat_subscription:\n    state: present\n    username: joe_user\n    password: somepass\n    pool_ids: 0123456789abcdef0123456789abcdef\n\n- name: Register and subscribe to multiple pools.\n  community.general.redhat_subscription:\n    state: present\n    username: joe_user\n    password: somepass\n    pool_ids:\n      - 0123456789abcdef0123456789abcdef\n      - 1123456789abcdef0123456789abcdef\n\n- name: Same as above but consume multiple entitlements.\n  community.general.redhat_subscription:\n    state: present\n    username: joe_user\n    password: somepass\n    pool_ids:\n      - 0123456789abcdef0123456789abcdef: 2\n      - 1123456789abcdef0123456789abcdef: 4\n\n- name: Register and pull existing system data.\n  community.general.redhat_subscription:\n    state: present\n    username: joe_user\n    password: somepass\n    consumer_id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n\n- name: Register with activationkey and consume subscriptions matching Red Hat Enterprise Server or Red Hat Virtualization\n  community.general.redhat_subscription:\n    state: present\n    activationkey: 1-222333444\n    org_id: 222333444\n    pool: '^(Red Hat Enterprise Server|Red Hat Virtualization)$'\n\n- name: Update the consumed subscriptions from the previous example (remove Red Hat Virtualization subscription)\n  community.general.redhat_subscription:\n    state: present\n    activationkey: 1-222333444\n    org_id: 222333444\n    pool: '^Red Hat Enterprise Server$'\n\n- name: Register as user credentials into given environment (against Red Hat Satellite 6.x), and auto-subscribe.\n  community.general.redhat_subscription:\n    state: present\n    username: joe_user\n    password: somepass\n    environment: Library\n    auto_attach: true\n\n- name: Register as user (joe_user) with password (somepass) and a specific release\n  community.general.redhat_subscription:\n    state: present\n    username: joe_user\n    password: somepass\n    release: 7.4\n\n- name: Register as user (joe_user) with password (somepass), set syspurpose attributes and synchronize them with server\n  community.general.redhat_subscription:\n    state: present\n    username: joe_user\n    password: somepass\n    auto_attach: true\n    syspurpose:\n      usage: \"Production\"\n      role: \"Red Hat Enterprise Server\"\n      service_level_agreement: \"Premium\"\n      addons:\n        - addon1\n        - addon2\n      sync: true\n"
  },
  "community.general.redis": {
    "doc": {
      "description": "Unified utility to interact with redis instances.",
      "has_action": false,
      "notes": "Requires the redis-py Python package on the remote host. You can install it with pip (pip install redis) or with a package manager. https://github.com/andymccurdy/redis-py\nIf the redis master instance we are making replica of is password protected this needs to be in the redis.conf in the masterauth variable",
      "options": {
        "command": {
          "aliases": [],
          "description": "The selected redis command\nC(config) ensures a configuration setting on an instance.\nC(flush) flushes all the instance or a specified db.\nC(replica) sets a redis instance in replica or master mode. (C(slave) is an alias for C(replica).)",
          "type": "str",
          "required": false,
          "choices": [
            "config",
            "flush",
            "replica",
            "slave"
          ],
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "The database to flush (used in db mode) [flush command]",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "flush_mode": {
          "aliases": [],
          "description": "Type of flush (all the dbs in a redis instance or a specific one) [flush command]",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "db"
          ],
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running the database",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with (usually not used)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The port to connect to",
          "default": "6379",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "master_host": {
          "aliases": [],
          "description": "The host of the master instance [replica command]",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "master_port": {
          "aliases": [],
          "description": "The port of the master instance [replica command]",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A redis config key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "replica_mode": {
          "aliases": [
            "slave_mode"
          ],
          "description": "The mode of the redis instance [replica command]\nC(slave) is an alias for C(replica).",
          "default": "replica",
          "type": "str",
          "required": false,
          "choices": [
            "master",
            "replica",
            "slave"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "A redis config value. When memory size is needed, it is possible to specify it in the usal form of 1KB, 2M, 400MB where the base is 1024. Units are case insensitive i.e. 1m = 1mb = 1M = 1MB.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "redis"
      ],
      "short_description": "Various redis commands, replica and flush"
    },
    "examples": "\n- name: Set local redis instance to be a replica of melee.island on port 6377\n  community.general.redis:\n    command: replica\n    master_host: melee.island\n    master_port: 6377\n\n- name: Deactivate replica mode\n  community.general.redis:\n    command: replica\n    replica_mode: master\n\n- name: Flush all the redis db\n  community.general.redis:\n    command: flush\n    flush_mode: all\n\n- name: Flush only one db in a redis instance\n  community.general.redis:\n    command: flush\n    db: 1\n    flush_mode: db\n\n- name: Configure local redis to have 10000 max clients\n  community.general.redis:\n    command: config\n    name: maxclients\n    value: 10000\n\n- name: Configure local redis maxmemory to 4GB\n  community.general.redis:\n    command: config\n    name: maxmemory\n    value: 4GB\n\n- name: Configure local redis to have lua time limit of 100 ms\n  community.general.redis:\n    command: config\n    name: lua-time-limit\n    value: 100\n"
  },
  "community.general.redis_data": {
    "doc": {
      "description": "Set key value pairs in Redis database.",
      "has_action": false,
      "notes": "Requires the C(redis) Python package on the remote host. You can install it with pip (C(pip install redis)) or with a package manager. Information on the library can be found at U(https://github.com/andymccurdy/redis-py).",
      "options": {
        "ca_certs": {
          "aliases": [],
          "description": "Path to root certificates file. If not set and I(tls) is set to C(true), certifi ca-certificates will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "existing": {
          "aliases": [],
          "description": "Only set key if it already exists.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "expiration": {
          "aliases": [],
          "description": "Expiration time in milliseconds. Setting this flag will always result in a change in the database.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "keep_ttl": {
          "aliases": [],
          "description": "Retain the time to live associated with the key.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Database key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Specify the target host running the database.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nUsually not used when target is localhost.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "Specify the port to connect to.",
          "default": "6379",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.\nRequires L(redis,https://pypi.org/project/redis) >= 3.4.0.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "non_existing": {
          "aliases": [],
          "description": "Only set key if it does not already exist.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the key.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Specify whether or not to use TLS for the connection.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Specify whether or not to validate TLS certificates.\nThis should only be turned off for personally controlled sites or with C(localhost) as target.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Value that key should be set to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "redis",
        "certifi"
      ],
      "short_description": "Set key value pairs in Redis",
      "version_added": "3.7.0"
    },
    "examples": "\n- name: Set key foo=bar on localhost with no username\n  community.general.redis_data:\n    login_host: localhost\n    login_password: supersecret\n    key: foo\n    value: bar\n    state: present\n\n- name: Set key foo=bar if non existing with expiration of 30s\n  community.general.redis_data:\n    login_host: localhost\n    login_password: supersecret\n    key: foo\n    value: bar\n    non_existing: true\n    expiration: 30000\n    state: present\n\n- name: Set key foo=bar if existing and keep current TTL\n  community.general.redis_data:\n    login_host: localhost\n    login_password: supersecret\n    key: foo\n    value: bar\n    existing: true\n    keep_ttl: true\n\n- name: Set key foo=bar on redishost with custom ca-cert file\n  community.general.redis_data:\n    login_host: redishost\n    login_password: supersecret\n    login_user: someuser\n    validate_certs: true\n    ssl_ca_certs: /path/to/ca/certs\n    key: foo\n    value: bar\n\n- name: Delete key foo on localhost with no username\n  community.general.redis_data:\n    login_host: localhost\n    login_password: supersecret\n    key: foo\n    state: absent\n"
  },
  "community.general.redis_data_incr": {
    "doc": {
      "description": "Increment integers or float keys in Redis database and get new value.\nDefault increment for all keys is 1. For specific increments use the I(increment_int) and I(increment_float) options.\nWhen using I(check_mode) the module will try to calculate the value that Redis would return. If the key is not present, 0.0 is used as value.",
      "has_action": false,
      "notes": "For C(check_mode) to work, the specified I(redis_user) needs permission to run the C(GET) command on the key, otherwise the module will fail.\nRequires the C(redis) Python package on the remote host. You can install it with pip (C(pip install redis)) or with a package manager. Information on the library can be found at U(https://github.com/andymccurdy/redis-py).",
      "options": {
        "ca_certs": {
          "aliases": [],
          "description": "Path to root certificates file. If not set and I(tls) is set to C(true), certifi ca-certificates will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "increment_float": {
          "aliases": [],
          "description": "Float amount to increment the key by.\nThis only works with keys that contain float values in their string representation.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "increment_int": {
          "aliases": [],
          "description": "Integer amount to increment the key by.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Database key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Specify the target host running the database.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nUsually not used when target is localhost.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "Specify the port to connect to.",
          "default": "6379",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.\nRequires L(redis,https://pypi.org/project/redis) >= 3.4.0.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Specify whether or not to use TLS for the connection.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Specify whether or not to validate TLS certificates.\nThis should only be turned off for personally controlled sites or with C(localhost) as target.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "redis",
        "certifi"
      ],
      "short_description": "Increment keys in Redis",
      "version_added": "4.0.0"
    },
    "examples": "\n- name: Increment integer key foo on localhost with no username and print new value\n  community.general.redis_data_incr:\n    login_host: localhost\n    login_password: supersecret\n    key: foo\n    increment_int: 1\n  register: result\n- name: Print new value\n  debug:\n    var: result.value\n\n- name: Increment float key foo by 20.4\n  community.general.redis_data_incr:\n    login_host: redishost\n    login_user: redisuser\n    login_password: somepass\n    key: foo\n    increment_float: '20.4'\n"
  },
  "community.general.redis_data_info": {
    "doc": {
      "description": "Get value of keys in Redis database.",
      "has_action": false,
      "notes": "Requires the C(redis) Python package on the remote host. You can install it with pip (C(pip install redis)) or with a package manager. Information on the library can be found at U(https://github.com/andymccurdy/redis-py).",
      "options": {
        "ca_certs": {
          "aliases": [],
          "description": "Path to root certificates file. If not set and I(tls) is set to C(true), certifi ca-certificates will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Database key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Specify the target host running the database.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "Specify the password to authenticate with.\nUsually not used when target is localhost.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "Specify the port to connect to.",
          "default": "6379",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "Specify the user to authenticate with.\nRequires L(redis,https://pypi.org/project/redis) >= 3.4.0.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Specify whether or not to use TLS for the connection.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Specify whether or not to validate TLS certificates.\nThis should only be turned off for personally controlled sites or with C(localhost) as target.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "redis",
        "certifi"
      ],
      "short_description": "Get value of key in Redis database",
      "version_added": "3.7.0"
    },
    "examples": "\n- name: Get key foo=bar from loalhost with no username\n  community.general.redis_data_info:\n    login_host: localhost\n    login_password: supersecret\n    key: foo\n\n- name: Get key foo=bar on redishost with custom ca-cert file\n  community.general.redis_data_info:\n    login_host: redishost\n    login_password: supersecret\n    login_user: somuser\n    validate_certs: true\n    ssl_ca_certs: /path/to/ca/certs\n    key: foo\n"
  },
  "community.general.redis_info": {
    "doc": {
      "description": "Gathers information and statistics about Redis servers.",
      "has_action": false,
      "notes": "Requires the redis-py Python package on the remote host. You can install it with pip (C(pip install redis)) or with a package manager. U(https://github.com/andymccurdy/redis-py)",
      "options": {
        "login_host": {
          "aliases": [],
          "description": "The host running the database.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with, when authentication is enabled for the Redis server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The port to connect to.",
          "default": "6379",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "redis"
      ],
      "short_description": "Gather information about Redis servers",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Get server information\n  community.general.redis_info:\n  register: result\n\n- name: Print server information\n  ansible.builtin.debug:\n    var: result.info\n"
  },
  "community.general.rhevm": {
    "doc": {
      "description": "This module only supports oVirt/RHEV version 3.\nA newer module M(ovirt.ovirt.ovirt_vm) supports oVirt/RHV version 4.\nAllows you to create/remove/update or powermanage virtual machines on a RHEV/oVirt platform.",
      "has_action": false,
      "options": {
        "boot_order": {
          "aliases": [],
          "description": "This option uses complex arguments and is a list of items that specify the bootorder.",
          "default": "['hd', 'network']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "cd_drive": {
          "aliases": [],
          "description": "The CD you wish to have mounted on the VM when I(state = 'CD').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster": {
          "aliases": [],
          "description": "The RHEV/oVirt cluster in which you want you VM to start.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_share": {
          "aliases": [],
          "description": "This parameter is used to configure the CPU share.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The RHEV/oVirt datacenter in which you want you VM to start.",
          "default": "Default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "del_prot": {
          "aliases": [],
          "description": "This option sets the delete protection checkbox.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disks": {
          "aliases": [],
          "description": "This option uses complex arguments and is a list of disks with the options name, size and domain.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ifaces": {
          "aliases": [
            "interfaces",
            "nics"
          ],
          "description": "This option uses complex arguments and is a list of interfaces with the options name and vlan.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The template to use for the VM.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "insecure_api": {
          "aliases": [],
          "description": "A boolean switch to make a secure or insecure connection to the server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mempol": {
          "aliases": [],
          "description": "The minimum amount of memory you wish to reserve for this system.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the VM.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "osver": {
          "aliases": [],
          "description": "The operating system option in RHEV/oVirt.",
          "default": "rhel_6x64",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password for user authentication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on which the API is reachable.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "The name/IP of your RHEV-m/oVirt instance.",
          "default": "127.0.0.1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "This serves to create/remove/update or powermanage your VM.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "cd",
            "down",
            "info",
            "ping",
            "present",
            "restarted",
            "up"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The timeout you wish to define for power actions.\nWhen I(state = 'up').\nWhen I(state = 'down').\nWhen I(state = 'restarted').",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "To define if the VM is a server or desktop.",
          "default": "server",
          "type": "str",
          "required": false,
          "choices": [
            "desktop",
            "host",
            "server"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The user to authenticate with.",
          "default": "admin@internal",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_ha": {
          "aliases": [],
          "description": "To make your VM High Available.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmcpu": {
          "aliases": [],
          "description": "The number of CPUs you want in your VM.",
          "default": "2",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vmhost": {
          "aliases": [],
          "description": "The host you wish your VM to run on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vmmem": {
          "aliases": [],
          "description": "The amount of memory you want your VM to use (in GB).",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ovirtsdk"
      ],
      "short_description": "RHEV/oVirt automation"
    },
    "examples": "\n- name: Basic get info from VM\n  community.general.rhevm:\n    server: rhevm01\n    user: '{{ rhev.admin.name }}'\n    password: '{{ rhev.admin.pass }}'\n    name: demo\n    state: info\n\n- name: Basic create example from image\n  community.general.rhevm:\n    server: rhevm01\n    user: '{{ rhev.admin.name }}'\n    password: '{{ rhev.admin.pass }}'\n    name: demo\n    cluster: centos\n    image: centos7_x64\n    state: present\n\n- name: Power management\n  community.general.rhevm:\n    server: rhevm01\n    user: '{{ rhev.admin.name }}'\n    password: '{{ rhev.admin.pass }}'\n    cluster: RH\n    name: uptime_server\n    image: centos7_x64\n    state: down\n\n- name: Multi disk, multi nic create example\n  community.general.rhevm:\n    server: rhevm01\n    user: '{{ rhev.admin.name }}'\n    password: '{{ rhev.admin.pass }}'\n    cluster: RH\n    name: server007\n    type: server\n    vmcpu: 4\n    vmmem: 2\n    ifaces:\n    - name: eth0\n      vlan: vlan2202\n    - name: eth1\n      vlan: vlan36\n    - name: eth2\n      vlan: vlan38\n    - name: eth3\n      vlan: vlan2202\n    disks:\n    - name: root\n      size: 10\n      domain: ssd-san\n    - name: swap\n      size: 10\n      domain: 15kiscsi-san\n    - name: opt\n      size: 10\n      domain: 15kiscsi-san\n    - name: var\n      size: 10\n      domain: 10kiscsi-san\n    - name: home\n      size: 10\n      domain: sata-san\n    boot_order:\n    - network\n    - hd\n    state: present\n\n- name: Add a CD to the disk cd_drive\n  community.general.rhevm:\n    user: '{{ rhev.admin.name }}'\n    password: '{{ rhev.admin.pass }}'\n    name: server007\n    cd_drive: rhev-tools-setup.iso\n    state: cd\n\n- name: New host deployment + host network configuration\n  community.general.rhevm:\n    password: '{{ rhevm.admin.pass }}'\n    name: ovirt_node007\n    type: host\n    cluster: rhevm01\n    ifaces:\n    - name: em1\n    - name: em2\n    - name: p3p1\n      ip: 172.31.224.200\n      netmask: 255.255.254.0\n    - name: p3p2\n      ip: 172.31.225.200\n      netmask: 255.255.254.0\n    - name: bond0\n      bond:\n      - em1\n      - em2\n      network: rhevm\n      ip: 172.31.222.200\n      netmask: 255.255.255.0\n      management: yes\n    - name: bond0.36\n      network: vlan36\n      ip: 10.2.36.200\n      netmask: 255.255.254.0\n      gateway: 10.2.36.254\n    - name: bond0.2202\n      network: vlan2202\n    - name: bond0.38\n      network: vlan38\n    state: present\n"
  },
  "community.general.rhn_channel": {
    "doc": {
      "description": "Adds or removes Red Hat software channels.",
      "has_action": false,
      "notes": "This module fetches the system id from RHN.\nThis module doesn't support I(check_mode).",
      "options": {
        "name": {
          "aliases": [],
          "description": "Name of the software channel.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pwd"
          ],
          "description": "RHN/Satellite password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the channel should be present or not, taking action if the state is different from what is stated.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "sysname": {
          "aliases": [],
          "description": "Name of the system as it is known in RHN/Satellite.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "The full URL to the RHN/Satellite API.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "RHN/Satellite login.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(False), SSL certificates will not be validated.\nThis should only set to C(False) when used on self controlled sites using self-signed certificates, and you are absolutely sure that nobody can modify traffic between the module and the site.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "short_description": "Adds or removes Red Hat software channels"
    },
    "examples": "\n- name: Add a Red Hat software channel\n  community.general.rhn_channel:\n    name: rhel-x86_64-server-v2vwin-6\n    sysname: server01\n    url: https://rhn.redhat.com/rpc/api\n    user: rhnuser\n    password: guessme\n  delegate_to: localhost\n"
  },
  "community.general.rhn_register": {
    "doc": {
      "description": "Manage registration to the Red Hat Network.",
      "has_action": false,
      "notes": "This is for older Red Hat products. You probably want the M(community.general.redhat_subscription) module instead.\nIn order to register a system, C(rhnreg_ks) requires either a username and password, or an activationkey.",
      "options": {
        "activationkey": {
          "aliases": [],
          "description": "Supply an activation key for use with registration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "sslcacert"
          ],
          "description": "Supply a custom ssl CA certificate file for use with registration.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "channels": {
          "aliases": [],
          "description": "Optionally specify a list of channels to subscribe to upon successful registration.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "enable_eus": {
          "aliases": [],
          "description": "If C(no), extended update support will be requested.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force registration, even if system is already registered.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "nopackages": {
          "aliases": [],
          "description": "If C(yes), the registered node will not upload its installed packages information to Satellite server.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Red Hat Network password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profilename": {
          "aliases": [],
          "description": "Supply an profilename for use with registration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_url": {
          "aliases": [],
          "description": "Specify an alternative Red Hat Network server URL.\nThe default is the current value of I(serverURL) from C(/etc/sysconfig/rhn/up2date).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to register (C(present)), or unregister (C(absent)) a system.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "systemorgid": {
          "aliases": [],
          "description": "Supply an organizational id for use with registration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Red Hat Network username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "rhnreg_ks",
        "either libxml2 or lxml"
      ],
      "short_description": "Manage Red Hat Network registration using the C(rhnreg_ks) command"
    },
    "examples": "\n- name: Unregister system from RHN\n  community.general.rhn_register:\n    state: absent\n    username: joe_user\n    password: somepass\n\n- name: Register as user with password and auto-subscribe to available content\n  community.general.rhn_register:\n    state: present\n    username: joe_user\n    password: somepass\n\n- name: Register with activationkey and enable extended update support\n  community.general.rhn_register:\n    state: present\n    activationkey: 1-222333444\n    enable_eus: yes\n\n- name: Register with activationkey and set a profilename which may differ from the hostname\n  community.general.rhn_register:\n    state: present\n    activationkey: 1-222333444\n    profilename: host.example.com.custom\n\n- name: Register as user with password against a satellite server\n  community.general.rhn_register:\n    state: present\n    username: joe_user\n    password: somepass\n    server_url: https://xmlrpc.my.satellite/XMLRPC\n\n- name: Register as user with password and enable channels\n  community.general.rhn_register:\n    state: present\n    username: joe_user\n    password: somepass\n    channels: rhel-x86_64-server-6-foo-1,rhel-x86_64-server-6-bar-1\n\n- name: Force-register as user with password to ensure registration is current on server\n  community.general.rhn_register:\n    state: present\n    username: joe_user\n    password: somepass\n    server_url: https://xmlrpc.my.satellite/XMLRPC\n    force: yes\n"
  },
  "community.general.rhsm_release": {
    "doc": {
      "description": "Sets or unsets the release version used by RHSM repositories.",
      "has_action": false,
      "notes": "This module will fail on an unregistered system. Use the C(redhat_subscription) module to register a system prior to setting the RHSM release.",
      "options": {
        "release": {
          "aliases": [],
          "description": "RHSM release version to use (use null to unset)",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "Red Hat Enterprise Linux 6+ with subscription-manager installed"
      ],
      "short_description": "Set or Unset RHSM Release version"
    },
    "examples": "\n# Set release version to 7.1\n- name: Set RHSM release version\n  community.general.rhsm_release:\n      release: \"7.1\"\n\n# Set release version to 6Server\n- name: Set RHSM release version\n  community.general.rhsm_release:\n      release: \"6Server\"\n\n# Unset release version\n- name: Unset RHSM release release\n  community.general.rhsm_release:\n      release: null\n"
  },
  "community.general.rhsm_repository": {
    "doc": {
      "description": "Manage (Enable/Disable) RHSM repositories to the Red Hat Subscription Management entitlement platform using the C(subscription-manager) command.",
      "has_action": false,
      "notes": "In order to manage RHSM repositories the system must be already registered to RHSM manually or using the Ansible C(redhat_subscription) module.",
      "options": {
        "name": {
          "aliases": [],
          "description": "The ID of repositories to enable.\nTo operate on several repositories this can accept a comma separated list or a YAML list.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Disable all currently enabled repositories that are not not specified in C(name). Only set this to C(True) if passing in a list of repositories to the C(name) field. Using this with C(loop) will most likely not have the desired result.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If state is equal to present or disabled, indicates the desired repository state.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "enabled",
            "absent",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "subscription-manager"
      ],
      "short_description": "Manage RHSM repositories using the subscription-manager command"
    },
    "examples": "\n- name: Enable a RHSM repository\n  community.general.rhsm_repository:\n    name: rhel-7-server-rpms\n\n- name: Disable all RHSM repositories\n  community.general.rhsm_repository:\n    name: '*'\n    state: disabled\n\n- name: Enable all repositories starting with rhel-6-server\n  community.general.rhsm_repository:\n    name: rhel-6-server*\n    state: enabled\n\n- name: Disable all repositories except rhel-7-server-rpms\n  community.general.rhsm_repository:\n    name: rhel-7-server-rpms\n    purge: True\n"
  },
  "community.general.riak": {
    "doc": {
      "description": "This module can be used to join nodes to a cluster, check the status of the cluster.",
      "has_action": false,
      "options": {
        "command": {
          "aliases": [],
          "description": "The command you would like to perform against the cluster.",
          "type": "str",
          "required": false,
          "choices": [
            "ping",
            "kv_test",
            "join",
            "plan",
            "commit"
          ],
          "suboptions": {}
        },
        "config_dir": {
          "aliases": [],
          "description": "The path to the riak configuration directory",
          "default": "/etc/riak",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "http_conn": {
          "aliases": [],
          "description": "The ip address and port that is listening for Riak HTTP queries",
          "default": "127.0.0.1:8098",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "target_node": {
          "aliases": [],
          "description": "The target node for certain operations (join, ping)",
          "default": "riak@127.0.0.1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_for_handoffs": {
          "aliases": [],
          "description": "Number of seconds to wait for handoffs to complete.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_for_ring": {
          "aliases": [],
          "description": "Number of seconds to wait for all nodes to agree on the ring.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_for_service": {
          "aliases": [],
          "description": "Waits for a riak service to come online before continuing.",
          "type": "str",
          "required": false,
          "choices": [
            "kv"
          ],
          "suboptions": {}
        }
      },
      "short_description": "This module handles some common Riak operations"
    },
    "examples": "\n- name: \"Join's a Riak node to another node\"\n  community.general.riak:\n    command: join\n    target_node: riak@10.1.1.1\n\n- name: Wait for handoffs to finish. Use with async and poll.\n  community.general.riak:\n    wait_for_handoffs: yes\n\n- name: Wait for riak_kv service to startup\n  community.general.riak:\n    wait_for_service: kv\n"
  },
  "community.general.rocketchat": {
    "doc": {
      "description": "The C(rocketchat) module sends notifications to Rocket Chat via the Incoming WebHook integration",
      "has_action": false,
      "options": {
        "attachments": {
          "aliases": [],
          "description": "Define a list of attachments.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "channel": {
          "aliases": [],
          "description": "Channel to send the message to. If absent, the message goes to the channel selected for the I(token) specified during the creation of webhook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "color": {
          "aliases": [],
          "description": "Allow text to use default colors - use the default of 'normal' to not send a custom color bar at the start of the message",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "normal",
            "good",
            "warning",
            "danger"
          ],
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The domain for your environment without protocol. (i.e. C(example.com) or C(chat.example.com))",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "icon_emoji": {
          "aliases": [],
          "description": "Emoji for the message sender. The representation for the available emojis can be got from Rocket Chat. (for example :thumbsup:) (if I(icon_emoji) is set, I(icon_url) will not be used)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "icon_url": {
          "aliases": [],
          "description": "URL for the message sender's icon.",
          "default": "https://www.ansible.com/favicon.ico",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "link_names": {
          "aliases": [],
          "description": "Automatically create links for channels and usernames in I(msg).",
          "default": "1",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "0"
          ],
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "Message to be sent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Specify the protocol used to send notification messages before the webhook url. (i.e. http or https)",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Rocket Chat Incoming Webhook integration token.  This provides authentication to Rocket Chat's Incoming webhook for posting messages.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "This is the sender of the message.",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send notifications to Rocket Chat"
    },
    "examples": "\n- name: Send notification message via Rocket Chat\n  community.general.rocketchat:\n    token: thetoken/generatedby/rocketchat\n    domain: chat.example.com\n    msg: '{{ inventory_hostname }} completed'\n  delegate_to: localhost\n\n- name: Send notification message via Rocket Chat all options\n  community.general.rocketchat:\n    domain: chat.example.com\n    token: thetoken/generatedby/rocketchat\n    msg: '{{ inventory_hostname }} completed'\n    channel: #ansible\n    username: 'Ansible on {{ inventory_hostname }}'\n    icon_url: http://www.example.com/some-image-file.png\n    link_names: 0\n  delegate_to: localhost\n\n- name: Insert a color bar in front of the message for visibility purposes and use the default webhook icon and name configured in rocketchat\n  community.general.rocketchat:\n    token: thetoken/generatedby/rocketchat\n    domain: chat.example.com\n    msg: '{{ inventory_hostname }} is alive!'\n    color: good\n    username: ''\n    icon_url: ''\n  delegate_to: localhost\n\n- name: Use the attachments API\n  community.general.rocketchat:\n    token: thetoken/generatedby/rocketchat\n    domain: chat.example.com\n    attachments:\n      - text: Display my system load on host A and B\n        color: #ff00dd\n        title: System load\n        fields:\n          - title: System A\n            value: 'load average: 0,74, 0,66, 0,63'\n            short: True\n          - title: System B\n            value: 'load average: 5,16, 4,64, 2,43'\n            short: True\n  delegate_to: localhost\n"
  },
  "community.general.rollbar_deployment": {
    "doc": {
      "description": "Notify Rollbar about app deployments (see https://rollbar.com/docs/deploys_other/)",
      "has_action": false,
      "options": {
        "comment": {
          "aliases": [],
          "description": "Deploy comment (e.g. what is being deployed).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "environment": {
          "aliases": [],
          "description": "Name of the environment being deployed, e.g. 'production'.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "revision": {
          "aliases": [],
          "description": "Revision number/sha being deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "rollbar_user": {
          "aliases": [],
          "description": "Rollbar username of the user who deployed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Your project access token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Optional URL to submit the notification to.",
          "default": "https://api.rollbar.com/api/1/deploy/",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User who deployed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Notify Rollbar about app deployments"
    },
    "examples": "\n  - name: Rollbar deployment notification\n    community.general.rollbar_deployment:\n    token: AAAAAA\n    environment: staging\n    user: ansible\n    revision: '4.2'\n    rollbar_user: admin\n    comment: Test Deploy\n\n  - name: Notify rollbar about current git revision deployment by current user\n    community.general.rollbar_deployment:\n    token: \"{{ rollbar_access_token }}\"\n    environment: production\n    revision: \"{{ lookup('pipe', 'git rev-parse HEAD') }}\"\n    user: \"{{ lookup('env', 'USER') }}\"\n"
  },
  "community.general.rpm_ostree_pkg": {
    "doc": {
      "description": "Install or uninstall overlay additional packages using C(rpm-ostree) command.",
      "has_action": false,
      "notes": "Does not support C(check_mode).",
      "options": {
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "Name of overlay package to install or remove.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the overlay package.\nC(present) simply ensures that a desired package is installed.\nC(absent) removes the specified package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Install or uninstall overlay additional packages",
      "version_added": "2.0.0"
    },
    "examples": "\n- name: Install overlay package\n  community.general.rpm_ostree_pkg:\n    name: nfs-utils\n    state: present\n\n- name: Remove overlay package\n  community.general.rpm_ostree_pkg:\n    name: nfs-utils\n    state: absent\n"
  },
  "community.general.rundeck_acl_policy": {
    "doc": {
      "description": "Create, update and remove Rundeck ACL policies through HTTP API.",
      "has_action": false,
      "options": {
        "api_version": {
          "aliases": [],
          "description": "Sets the API version used by module.\nAPI version must be at least 14.",
          "default": "14",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sets the project name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "policy": {
          "aliases": [],
          "description": "Sets the ACL policy content.\nACL policy content is a YAML object as described in http://rundeck.org/docs/man5/aclpolicy.html.\nIt can be a YAML string or a pure Ansible inventory YAML object.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Sets the project which receive the ACL policy.\nIf unset, it's a system ACL policy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or remove Rundeck project.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Sets the token to authenticate against Rundeck API.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Sets the rundeck instance URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "short_description": "Manage Rundeck ACL policies."
    },
    "examples": "\n- name: Create or update a rundeck ACL policy in project Ansible\n  community.general.rundeck_acl_policy:\n    name: \"Project_01\"\n    api_version: 18\n    url: \"https://rundeck.example.org\"\n    token: \"mytoken\"\n    state: present\n    project: \"Ansible\"\n    policy:\n      description: \"my policy\"\n      context:\n        application: rundeck\n      for:\n        project:\n          - allow: read\n      by:\n        group: \"build\"\n\n- name: Remove a rundeck system policy\n  community.general.rundeck_acl_policy:\n    name: \"Project_02\"\n    url: \"https://rundeck.example.org\"\n    token: \"mytoken\"\n    state: absent\n"
  },
  "community.general.rundeck_job_executions_info": {
    "doc": {
      "description": "This module gets the list of executions for a specified Rundeck job.",
      "has_action": false,
      "options": {
        "api_token": {
          "aliases": [],
          "description": "Rundeck User API Token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Rundeck API version to be used.\nAPI version must be at least 14.",
          "default": "39",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "The job unique ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "max": {
          "aliases": [],
          "description": "Max results to return.",
          "default": "20",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "offset": {
          "aliases": [],
          "description": "The start point to return the results.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "The job status to filter.",
          "type": "str",
          "required": false,
          "choices": [
            "succeeded",
            "failed",
            "aborted",
            "running"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Rundeck instance URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Query executions for a Rundeck job",
      "version_added": "3.8.0"
    },
    "examples": "\n- name: Get Rundeck job executions info\n  community.general.rundeck_job_executions_info:\n    url: \"https://rundeck.example.org\"\n    api_version: 39\n    api_token: \"mytoken\"\n    job_id: \"xxxxxxxxxxxxxxxxx\"\n  register: rundeck_job_executions_info\n\n- name: Show Rundeck job executions info\n  ansible.builtin.debug:\n    var: rundeck_job_executions_info.executions\n"
  },
  "community.general.rundeck_job_run": {
    "doc": {
      "description": "This module runs a Rundeck job specified by ID.",
      "has_action": false,
      "options": {
        "abort_on_timeout": {
          "aliases": [],
          "description": "Send a job abort request if exceeded the I(wait_execution_timeout) specified.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [],
          "description": "Rundeck User API Token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [],
          "description": "Rundeck API version to be used.\nAPI version must be at least 14.",
          "default": "39",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "filter_nodes": {
          "aliases": [],
          "description": "Filter the nodes where the jobs must run.\nSee U(https://docs.rundeck.com/docs/manual/11-node-filters.html#node-filter-syntax).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "The job unique ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_options": {
          "aliases": [],
          "description": "The job options for the steps.\nNumeric values must be quoted.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "loglevel": {
          "aliases": [],
          "description": "Log level configuration.",
          "default": "info",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "verbose",
            "info",
            "warn",
            "error"
          ],
          "suboptions": {}
        },
        "run_at_time": {
          "aliases": [],
          "description": "Schedule the job execution to run at specific date and time.\nISO-8601 date and time format like C(2021-10-05T15:45:00-03:00).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Rundeck instance URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_execution": {
          "aliases": [],
          "description": "Wait until the job finished the execution.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_execution_delay": {
          "aliases": [],
          "description": "Delay, in seconds, between job execution status check requests.",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_execution_timeout": {
          "aliases": [],
          "description": "Job execution wait timeout in seconds.\nIf the timeout is reached, the job will be aborted.\nKeep in mind that there is a sleep based on I(wait_execution_delay) after each job status check.",
          "default": "120",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run a Rundeck job",
      "version_added": "3.8.0"
    },
    "examples": "\n- name: Run a Rundeck job\n  community.general.rundeck_job_run:\n    url: \"https://rundeck.example.org\"\n    api_version: 39\n    api_token: \"mytoken\"\n    job_id: \"xxxxxxxxxxxxxxxxx\"\n  register: rundeck_job_run\n\n- name: Show execution info\n  ansible.builtin.debug:\n    var: rundeck_job_run.execution_info\n\n- name: Run a Rundeck job with options\n  community.general.rundeck_job_run:\n    url: \"https://rundeck.example.org\"\n    api_version: 39\n    api_token: \"mytoken\"\n    job_id: \"xxxxxxxxxxxxxxxxx\"\n    job_options:\n        option_1: \"value_1\"\n        option_2: \"value_3\"\n        option_3: \"value_3\"\n  register: rundeck_job_run\n\n- name: Run a Rundeck job with timeout, delay between status check and abort on timeout\n  community.general.rundeck_job_run:\n    url: \"https://rundeck.example.org\"\n    api_version: 39\n    api_token: \"mytoken\"\n    job_id: \"xxxxxxxxxxxxxxxxx\"\n    wait_execution_timeout: 30\n    wait_execution_delay: 10\n    abort_on_timeout: true\n  register: rundeck_job_run\n\n- name: Schedule a Rundeck job\n  community.general.rundeck_job_run:\n    url: \"https://rundeck.example.org\"\n    api_version: 39\n    api_token: \"mytoken\"\n    job_id: \"xxxxxxxxxxxxxxxxx\"\n    run_at_time: \"2021-10-05T15:45:00-03:00\"\n  register: rundeck_job_schedule\n\n- name: Fire-and-forget a Rundeck job\n  community.general.rundeck_job_run:\n    url: \"https://rundeck.example.org\"\n    api_version: 39\n    api_token: \"mytoken\"\n    job_id: \"xxxxxxxxxxxxxxxxx\"\n    wait_execution: false\n  register: rundeck_job_run\n"
  },
  "community.general.rundeck_project": {
    "doc": {
      "description": "Create and remove Rundeck projects through HTTP API.",
      "has_action": false,
      "options": {
        "api_version": {
          "aliases": [],
          "description": "Sets the API version used by module.\nAPI version must be at least 14.",
          "default": "14",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "PEM formatted certificate chain file to be used for SSL client authentication.\nThis file can also include the key as well, and if the key is included, C(client_key) is not required.",
          "type": "path",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "PEM formatted file that contains your private key to be used for SSL client authentication.\nIf C(client_cert) contains both the certificate and key, this option is not required.",
          "type": "path",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "force": {
          "aliases": [
            "thirsty"
          ],
          "description": "If C(yes) do not get a cached copy.\nAlias C(thirsty) has been deprecated and will be removed in 2.13.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "force_basic_auth": {
          "aliases": [],
          "description": "Credentials specified with I(url_username) and I(url_password) should be passed in HTTP Header.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "http_agent": {
          "aliases": [],
          "description": "Header to identify as, generally appears in web server logs.",
          "default": "ansible-httpget",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sets the project name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or remove Rundeck project.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Sets the token to authenticate against Rundeck API.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Sets the rundeck instance URL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [],
          "description": "The password for use in HTTP basic authentication.\nIf the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "url_username": {
          "aliases": [],
          "description": "The username for use in HTTP basic authentication.\nThis parameter can be used without I(url_password) for sites that allow empty passwords",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "use_gssapi": {
          "aliases": [],
          "description": "Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.\nRequires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\nCredentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.\nNTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.11",
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "short_description": "Manage Rundeck projects."
    },
    "examples": "\n- name: Create a rundeck project\n  community.general.rundeck_project:\n    name: \"Project_01\"\n    api_version: 18\n    url: \"https://rundeck.example.org\"\n    token: \"mytoken\"\n    state: present\n\n- name: Remove a rundeck project\n  community.general.rundeck_project:\n    name: \"Project_02\"\n    url: \"https://rundeck.example.org\"\n    token: \"mytoken\"\n    state: absent\n"
  },
  "community.general.runit": {
    "doc": {
      "description": "Controls runit services on remote hosts using the sv utility.",
      "has_action": false,
      "options": {
        "enabled": {
          "aliases": [],
          "description": "Whether the service is enabled or not, if disabled it also implies stopped.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the service to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "service_dir": {
          "aliases": [],
          "description": "directory runsv watches for services",
          "default": "/var/service",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_src": {
          "aliases": [],
          "description": "directory where services are defined, the source of symlinks to service_dir.",
          "default": "/etc/sv",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the service (sv restart) and C(killed) will always bounce the service (sv force-stop). C(reloaded) will send a HUP (sv reload). C(once) will run a normally downed sv once (sv once), not really an idempotent operation.",
          "type": "str",
          "required": false,
          "choices": [
            "killed",
            "once",
            "reloaded",
            "restarted",
            "started",
            "stopped"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage runit services"
    },
    "examples": "\n- name: Start sv dnscache, if not running\n  community.general.runit:\n    name: dnscache\n    state: started\n\n- name: Stop sv dnscache, if running\n  community.general.runit:\n    name: dnscache\n    state: stopped\n\n- name: Kill sv dnscache, in all cases\n  community.general.runit:\n    name: dnscache\n    state: killed\n\n- name: Restart sv dnscache, in all cases\n  community.general.runit:\n    name: dnscache\n    state: restarted\n\n- name: Reload sv dnscache, in all cases\n  community.general.runit:\n    name: dnscache\n    state: reloaded\n\n- name: Use alternative sv directory location\n  community.general.runit:\n    name: dnscache\n    state: reloaded\n    service_dir: /run/service\n"
  },
  "community.general.sap_task_list_execute": {
    "doc": {
      "description": "The C(sap_task_list_execute) module depends on C(pyrfc) Python library (version 2.4.0 and upwards). Depending on distribution you are using, you may need to install additional packages to have these available.\nTasks in the task list which requires manual activities will be confirmed automatically.\nThis module will use the RFC package C(STC_TM_API).",
      "has_action": false,
      "notes": "Does not support C(check_mode).",
      "options": {
        "client": {
          "aliases": [],
          "description": "The client number to connect to.\nYou must quote the value to ensure retaining the leading zeros.",
          "default": "000",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "conn_password": {
          "aliases": [],
          "description": "The required password for the SAP system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "conn_username": {
          "aliases": [],
          "description": "The required username for the SAP system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The required host for the SAP system. Can be either an FQDN or IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "sysnr": {
          "aliases": [],
          "description": "The system number of the SAP system.\nYou must quote the value to ensure retaining the leading zeros.",
          "default": "00",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "task_parameters": {
          "aliases": [],
          "description": "The tasks and the parameters for execution.\nIf the task list do not need any parameters. This could be empty.\nIf only specific tasks from the task list should be executed. The tasks even when no parameter is needed must be provided. Alongside with the module parameter I(task_skip=true).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "FIELDNAME": {
              "aliases": [],
              "description": "The name of the field of the task.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "TASKNAME": {
              "aliases": [],
              "description": "The name of the task in the task list.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "VALUE": {
              "aliases": [],
              "description": "The value which have to be set.",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "task_settings": {
          "aliases": [],
          "description": "Setting for the execution of the task list. This can be the following as in TCODE SE80 described. Check Mode C(CHECKRUN), Background Processing Active C(BATCH) (this is the default value), Asynchronous Execution C(ASYNC), Trace Mode C(TRACE), Server Name C(BATCH_TARGET).",
          "default": "['BATCH']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "task_skip": {
          "aliases": [],
          "description": "If this parameter is C(true) not defined tasks in I(task_parameters) are skipped.\nThis could be the case when only certain tasks should run from the task list.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "task_to_execute": {
          "aliases": [],
          "description": "The task list which will be executed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyrfc >= 2.4.0",
        "xmltodict"
      ],
      "short_description": "Perform SAP Task list execution",
      "version_added": "3.5.0"
    },
    "examples": "\n# Pass in a message\n- name: Test task execution\n  community.general.sap_task_list_execute:\n    conn_username: DDIC\n    conn_password: Passwd1234\n    host: 10.1.8.10\n    sysnr: '01'\n    client: '000'\n    task_to_execute: SAP_BASIS_SSL_CHECK\n    task_settings: batch\n\n- name: Pass in input parameters\n  community.general.sap_task_list_execute:\n    conn_username: DDIC\n    conn_password: Passwd1234\n    host: 10.1.8.10\n    sysnr: '00'\n    client: '000'\n    task_to_execute: SAP_BASIS_SSL_CHECK\n    task_parameters :\n      - { 'TASKNAME': 'CL_STCT_CHECK_SEC_CRYPTO', 'FIELDNAME': 'P_OPT2', 'VALUE': 'X' }\n      - TASKNAME: CL_STCT_CHECK_SEC_CRYPTO\n        FIELDNAME: P_OPT3\n        VALUE: X\n    task_settings: batch\n\n# Exported environement variables.\n- name: Hint if module will fail with error message like ImportError libsapnwrfc.so...\n  community.general.sap_task_list_execute:\n    conn_username: DDIC\n    conn_password: Passwd1234\n    host: 10.1.8.10\n    sysnr: '00'\n    client: '000'\n    task_to_execute: SAP_BASIS_SSL_CHECK\n    task_settings: batch\n  environment:\n    SAPNWRFC_HOME: /usr/local/sap/nwrfcsdk\n    LD_LIBRARY_PATH: /usr/local/sap/nwrfcsdk/lib\n"
  },
  "community.general.sapcar_extract": {
    "doc": {
      "description": "Provides support for unpacking C(sar)/C(car) files with the SAPCAR binary from SAP and pulling information back into Ansible.",
      "has_action": false,
      "notes": "Always returns C(changed=true) in C(check_mode).",
      "options": {
        "binary_path": {
          "aliases": [],
          "description": "The path to the SAPCAR binary, for example, C(/home/dummy/sapcar) or C(https://myserver/SAPCAR). If this parameter is not provided the module will look in C(PATH).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "The destination where SAPCAR extracts the SAR file. Missing folders will be created. If this parameter is not provided it will unpack in the same folder as the SAR file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "manifest": {
          "aliases": [],
          "description": "The name of the manifest.",
          "default": "SIGNATURE.SMF",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path to the SAR/CAR file.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "remove": {
          "aliases": [],
          "description": "If C(true) the SAR/CAR file will be removed. B(This should be used with caution!)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "security_library": {
          "aliases": [],
          "description": "The path to the security library, for example, C(/usr/sap/hostctrl/exe/libsapcrytp.so), for signature operations.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "signature": {
          "aliases": [],
          "description": "If C(true) the signature will be extracted.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages SAP SAPCAR archives",
      "version_added": "3.2.0"
    },
    "examples": "\n- name: Extract SAR file\n  community.general.sapcar_extract:\n    path: \"~/source/hana.sar\"\n\n- name: Extract SAR file with destination\n  community.general.sapcar_extract:\n    path: \"~/source/hana.sar\"\n    dest: \"~/test/\"\n\n- name: Extract SAR file with destination and download from webserver can be a fileshare as well\n  community.general.sapcar_extract:\n    path: \"~/source/hana.sar\"\n    dest: \"~/dest/\"\n    binary_path: \"https://myserver/SAPCAR\"\n\n- name: Extract SAR file and delete SAR after extract\n  community.general.sapcar_extract:\n    path: \"~/source/hana.sar\"\n    remove: true\n\n- name: Extract SAR file with manifest\n  community.general.sapcar_extract:\n    path: \"~/source/hana.sar\"\n    signature: true\n\n- name: Extract SAR file with manifest and rename it\n  community.general.sapcar_extract:\n    path: \"~/source/hana.sar\"\n    manifest: \"MyNewSignature.SMF\"\n    signature: true\n"
  },
  "community.general.say": {
    "doc": {
      "description": "makes a computer speak! Amuse your friends, annoy your coworkers!",
      "has_action": false,
      "notes": "In 2.5, this module has been renamed from C(osx_say) to M(community.general.say).\nIf you like this module, you may also be interested in the osx_say callback plugin.\nA list of available voices, with language, can be found by running C(say -v ?) on a OSX host and C(espeak --voices) on a Linux host.",
      "options": {
        "msg": {
          "aliases": [],
          "description": "What to say",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "voice": {
          "aliases": [],
          "description": "What voice to use",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "say or espeak or espeak-ng"
      ],
      "short_description": "Makes a computer to speak."
    },
    "examples": "\n- name: Makes a computer to speak\n  community.general.say:\n    msg: '{{ inventory_hostname }} is all done'\n    voice: Zarvox\n  delegate_to: localhost\n"
  },
  "community.general.scaleway_compute": {
    "doc": {
      "description": "This module manages compute instances on Scaleway.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "commercial_type": {
          "aliases": [],
          "description": "Commercial name of the compute node",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enable_ipv6": {
          "aliases": [],
          "description": "Enable public IPv6 connectivity on the instance",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Image identifier used to start the instance with",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization identifier.\nExactly one of I(project) and I(organization) must be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project identifier.\nExactly one of I(project) and I(organization) must be specified.",
          "type": "str",
          "required": false,
          "version_added": "4.3.0",
          "suboptions": {}
        },
        "public_ip": {
          "aliases": [],
          "description": "Manage public IP on a Scaleway server\nCould be Scaleway IP address UUID\nC(dynamic) Means that IP is destroyed at the same time the host is destroyed\nC(absent) Means no public IP at all",
          "default": "absent",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway compute zone",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "security_group": {
          "aliases": [],
          "description": "Security group unique identifier\nIf no value provided, the default security group or current security group will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the instance.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "running",
            "restarted",
            "stopped"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tags to apply to the instance (5 max)",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the instance to reach its desired state before returning.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_sleep_time": {
          "aliases": [],
          "description": "Time to wait before every attempt to check the state of the server",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "Time to wait for the server to reach the expected state",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Scaleway compute management module"
    },
    "examples": "\n- name: Create a server\n  community.general.scaleway_compute:\n    name: foobar\n    state: present\n    image: 89ee4018-f8c3-4dc4-a6b5-bca14f985ebe\n    project: 951df375-e094-4d26-97c1-ba548eeb9c42\n    region: ams1\n    commercial_type: VC1S\n    tags:\n      - test\n      - www\n\n- name: Create a server attached to a security group\n  community.general.scaleway_compute:\n    name: foobar\n    state: present\n    image: 89ee4018-f8c3-4dc4-a6b5-bca14f985ebe\n    project: 951df375-e094-4d26-97c1-ba548eeb9c42\n    region: ams1\n    commercial_type: VC1S\n    security_group: 4a31b633-118e-4900-bd52-facf1085fc8d\n    tags:\n      - test\n      - www\n\n- name: Destroy it right after\n  community.general.scaleway_compute:\n    name: foobar\n    state: absent\n    image: 89ee4018-f8c3-4dc4-a6b5-bca14f985ebe\n    project: 951df375-e094-4d26-97c1-ba548eeb9c42\n    region: ams1\n    commercial_type: VC1S\n"
  },
  "community.general.scaleway_database_backup": {
    "doc": {
      "description": "This module manages database backups on Scaleway account U(https://developer.scaleway.com).",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "database_name": {
          "aliases": [],
          "description": "Name used to identify the database.\nRequired for C(present) and C(restored) states.\nIgnored when C(state=absent) or C(state=exported).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expires_at": {
          "aliases": [],
          "description": "Expiration datetime of the database backup (ISO 8601 format).\nIgnored when C(state=absent), C(state=exported) or C(state=restored).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "UUID used to identify the database backup.\nRequired for C(absent), C(exported) and C(restored) states.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "UUID of the instance associated to the database backup.\nRequired for C(present) and C(restored) states.\nIgnored when C(state=absent) or C(state=exported).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name used to identify the database backup.\nRequired for C(present) state.\nIgnored when C(state=absent), C(state=exported) or C(state=restored).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example C(fr-par)).",
          "type": "str",
          "required": true,
          "choices": [
            "fr-par",
            "nl-ams",
            "pl-waw"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the database backup.\nC(present) creates a backup.\nC(absent) deletes the backup.\nC(exported) creates a download link for the backup.\nC(restored) restores the backup to a new database.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "exported",
            "restored"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the instance to reach its desired state before returning.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_sleep_time": {
          "aliases": [],
          "description": "Time to wait before every attempt to check the state of the backup.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "Time to wait for the backup to reach the expected state.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Scaleway database backups management module",
      "version_added": "1.2.0"
    },
    "examples": "\n  - name: Create a backup\n    community.general.scaleway_database_backup:\n        name: 'my_backup'\n        state: present\n        region: 'fr-par'\n        database_name: 'my-database'\n        instance_id: '50968a80-2909-4e5c-b1af-a2e19860dddb'\n\n  - name: Export a backup\n    community.general.scaleway_database_backup:\n        id: '6ef1125a-037e-494f-a911-6d9c49a51691'\n        state: exported\n        region: 'fr-par'\n\n  - name: Restore a backup\n    community.general.scaleway_database_backup:\n        id: '6ef1125a-037e-494f-a911-6d9c49a51691'\n        state: restored\n        region: 'fr-par'\n        database_name: 'my-new-database'\n        instance_id: '50968a80-2909-4e5c-b1af-a2e19860dddb'\n\n  - name: Remove a backup\n    community.general.scaleway_database_backup:\n        id: '6ef1125a-037e-494f-a911-6d9c49a51691'\n        state: absent\n        region: 'fr-par'\n"
  },
  "community.general.scaleway_image_info": {
    "doc": {
      "description": "Gather information about the Scaleway images available.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway compute zone",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about the Scaleway images available."
    },
    "examples": "\n- name: Gather Scaleway images information\n  community.general.scaleway_image_info:\n    region: par1\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.scaleway_image_info }}\"\n"
  },
  "community.general.scaleway_ip": {
    "doc": {
      "description": "This module manages IP on Scaleway account U(https://developer.scaleway.com)",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "id of the Scaleway IP (UUID)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Scaleway organization identifier",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example par1).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "reverse": {
          "aliases": [],
          "description": "Reverse to assign to the IP",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "id of the server you want to attach an IP to.\nTo unattach an IP don't specify this option",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the IP.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Scaleway IP management module"
    },
    "examples": "\n- name: Create an IP\n  community.general.scaleway_ip:\n    organization: '{{ scw_org }}'\n    state: present\n    region: par1\n  register: ip_creation_task\n\n- name: Make sure IP deleted\n  community.general.scaleway_ip:\n    id: '{{ ip_creation_task.scaleway_ip.id }}'\n    state: absent\n    region: par1\n"
  },
  "community.general.scaleway_ip_info": {
    "doc": {
      "description": "Gather information about the Scaleway ips available.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example C(par1)).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about the Scaleway ips available."
    },
    "examples": "\n- name: Gather Scaleway ips information\n  community.general.scaleway_ip_info:\n    region: par1\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.scaleway_ip_info }}\"\n"
  },
  "community.general.scaleway_lb": {
    "doc": {
      "description": "This module manages load-balancers on Scaleway.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the load-balancer",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the load-balancer",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization_id": {
          "aliases": [],
          "description": "Organization identifier",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway zone",
          "type": "str",
          "required": true,
          "choices": [
            "nl-ams",
            "fr-par",
            "pl-waw"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the instance.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tags to apply to the load-balancer",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the load-balancer to reach its desired state before returning.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_sleep_time": {
          "aliases": [],
          "description": "Time to wait before every attempt to check the state of the load-balancer",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "Time to wait for the load-balancer to reach the expected state",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Scaleway load-balancer management module"
    },
    "examples": "\n- name: Create a load-balancer\n  community.general.scaleway_lb:\n    name: foobar\n    state: present\n    organization_id: 951df375-e094-4d26-97c1-ba548eeb9c42\n    region: fr-par\n    tags:\n      - hello\n\n- name: Delete a load-balancer\n  community.general.scaleway_lb:\n    name: foobar\n    state: absent\n    organization_id: 951df375-e094-4d26-97c1-ba548eeb9c42\n    region: fr-par\n"
  },
  "community.general.scaleway_organization_info": {
    "doc": {
      "description": "Gather information about the Scaleway organizations available.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL",
          "default": "https://account.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about the Scaleway organizations available."
    },
    "examples": "\n- name: Gather Scaleway organizations information\n  community.general.scaleway_organization_info:\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.scaleway_organization_info }}\"\n"
  },
  "community.general.scaleway_security_group": {
    "doc": {
      "description": "This module manages Security Group on Scaleway account U(https://developer.scaleway.com).",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the Security Group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inbound_default_policy": {
          "aliases": [],
          "description": "Default policy for incoming traffic.",
          "type": "str",
          "required": false,
          "choices": [
            "accept",
            "drop"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Security Group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization_default": {
          "aliases": [],
          "description": "Create security group to be the default one.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "outbound_default_policy": {
          "aliases": [],
          "description": "Default policy for outcoming traffic.",
          "type": "str",
          "required": false,
          "choices": [
            "accept",
            "drop"
          ],
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example C(par1)).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the Security Group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "stateful": {
          "aliases": [],
          "description": "Create a stateful security group which allows established connections in and out.",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Scaleway Security Group management module"
    },
    "examples": "\n- name: Create a Security Group\n  community.general.scaleway_security_group:\n    state: present\n    region: par1\n    name: security_group\n    description: \"my security group description\"\n    organization: \"43a3b6c8-916f-477b-b7ec-ff1898f5fdd9\"\n    stateful: false\n    inbound_default_policy: accept\n    outbound_default_policy: accept\n    organization_default: false\n  register: security_group_creation_task\n"
  },
  "community.general.scaleway_security_group_info": {
    "doc": {
      "description": "Gather information about the Scaleway security groups available.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example C(par1)).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about the Scaleway security groups available."
    },
    "examples": "\n- name: Gather Scaleway security groups information\n  community.general.scaleway_security_group_info:\n    region: par1\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.scaleway_security_group_info }}\"\n"
  },
  "community.general.scaleway_security_group_rule": {
    "doc": {
      "description": "This module manages Security Group Rule on Scaleway account U(https://developer.scaleway.com)",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "action": {
          "aliases": [],
          "description": "Rule action",
          "type": "str",
          "required": true,
          "choices": [
            "accept",
            "drop"
          ],
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "direction": {
          "aliases": [],
          "description": "Rule direction",
          "type": "str",
          "required": true,
          "choices": [
            "inbound",
            "outbound"
          ],
          "suboptions": {}
        },
        "ip_range": {
          "aliases": [],
          "description": "IPV4 CIDR notation to apply to the rule",
          "default": "0.0.0.0/0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port related to the rule, null value for all the ports",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Network protocol to use",
          "type": "str",
          "required": true,
          "choices": [
            "TCP",
            "UDP",
            "ICMP"
          ],
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example C(par1)).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "security_group": {
          "aliases": [],
          "description": "Security Group unique identifier",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the Security Group Rule.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ipaddress"
      ],
      "short_description": "Scaleway Security Group Rule management module"
    },
    "examples": "\n  - name: Create a Security Group Rule\n    community.general.scaleway_security_group_rule:\n      state: present\n      region: par1\n      protocol: TCP\n      port: 80\n      ip_range: 0.0.0.0/0\n      direction: inbound\n      action: accept\n      security_group: b57210ee-1281-4820-a6db-329f78596ecb\n    register: security_group_rule_creation_task\n"
  },
  "community.general.scaleway_server_info": {
    "doc": {
      "description": "Gather information about the Scaleway servers available.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example C(par1)).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about the Scaleway servers available."
    },
    "examples": "\n- name: Gather Scaleway servers information\n  community.general.scaleway_server_info:\n    region: par1\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.scaleway_server_info }}\"\n"
  },
  "community.general.scaleway_snapshot_info": {
    "doc": {
      "description": "Gather information about the Scaleway snapshot available.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example C(par1)).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about the Scaleway snapshots available."
    },
    "examples": "\n- name: Gather Scaleway snapshots information\n  community.general.scaleway_snapshot_info:\n    region: par1\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.scaleway_snapshot_info }}\"\n"
  },
  "community.general.scaleway_sshkey": {
    "doc": {
      "description": "This module manages SSH keys on Scaleway account U(https://developer.scaleway.com)",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL",
          "default": "https://account.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ssh_pub_key": {
          "aliases": [],
          "description": "The public SSH key as a string to add.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the SSH key.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Scaleway SSH keys management module"
    },
    "examples": "\n- name: \"Add SSH key\"\n  community.general.scaleway_sshkey:\n    ssh_pub_key: \"ssh-rsa AAAA...\"\n    state: \"present\"\n\n- name: \"Delete SSH key\"\n  community.general.scaleway_sshkey:\n    ssh_pub_key: \"ssh-rsa AAAA...\"\n    state: \"absent\"\n\n- name: \"Add SSH key with explicit token\"\n  community.general.scaleway_sshkey:\n    ssh_pub_key: \"ssh-rsa AAAA...\"\n    state: \"present\"\n    oauth_token: \"6ecd2c9b-6f4f-44d4-a187-61a92078d08c\"\n"
  },
  "community.general.scaleway_user_data": {
    "doc": {
      "description": "This module manages user_data on compute instances on Scaleway.\nIt can be used to configure cloud-init for instance",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway compute zone",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "server_id": {
          "aliases": [],
          "description": "Scaleway Compute instance ID of the server",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user_data": {
          "aliases": [],
          "description": "User defined data. Typically used with `cloud-init`.\nPass your cloud-init script here as a string",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Scaleway user_data management module"
    },
    "examples": "\n- name: Update the cloud-init\n  community.general.scaleway_user_data:\n    server_id: '5a33b4ab-57dd-4eb6-8b0a-d95eb63492ce'\n    region: ams1\n    user_data:\n      cloud-init: 'final_message: \"Hello World!\"'\n"
  },
  "community.general.scaleway_volume": {
    "doc": {
      "description": "This module manages volumes on Scaleway account U(https://developer.scaleway.com)",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name used to identify the volume.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "ScaleWay organization ID to which volume belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Scaleway project ID to which volume belongs.",
          "type": "str",
          "required": false,
          "version_added": "4.3.0",
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example par1).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of the volume in bytes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the volume.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_type": {
          "aliases": [],
          "description": "Type of the volume (for example 'l_ssd').",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Scaleway volumes management module"
    },
    "examples": "\n- name: Create 10GB volume\n  community.general.scaleway_volume:\n    name: my-volume\n    state: present\n    region: par1\n    project: \"{{ scw_org }}\"\n    \"size\": 10000000000\n    volume_type: l_ssd\n  register: server_creation_check_task\n\n- name: Make sure volume deleted\n  community.general.scaleway_volume:\n    name: my-volume\n    state: absent\n    region: par1\n"
  },
  "community.general.scaleway_volume_info": {
    "doc": {
      "description": "Gather information about the Scaleway volumes available.",
      "has_action": false,
      "notes": "Also see the API documentation on U(https://developer.scaleway.com/)\nIf C(api_token) is not set within the module, the following environment variables can be used in decreasing order of precedence C(SCW_TOKEN), C(SCW_API_KEY), C(SCW_OAUTH_TOKEN) or C(SCW_API_TOKEN).\nIf one wants to use a different C(api_url) one can also set the C(SCW_API_URL) environment variable.",
      "options": {
        "api_timeout": {
          "aliases": [
            "timeout"
          ],
          "description": "HTTP timeout to Scaleway API in seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_token": {
          "aliases": [
            "oauth_token"
          ],
          "description": "Scaleway OAuth token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [
            "base_url"
          ],
          "description": "Scaleway API URL.",
          "default": "https://api.scaleway.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_parameters": {
          "aliases": [],
          "description": "List of parameters passed to the query string.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Scaleway region to use (for example C(par1)).",
          "type": "str",
          "required": true,
          "choices": [
            "ams1",
            "EMEA-NL-EVS",
            "par1",
            "EMEA-FR-PAR1",
            "par2",
            "EMEA-FR-PAR2",
            "waw1",
            "EMEA-PL-WAW1"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certs of the Scaleway API.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about the Scaleway volumes available."
    },
    "examples": "\n- name: Gather Scaleway volumes information\n  community.general.scaleway_volume_info:\n    region: par1\n  register: result\n\n- ansible.builtin.debug:\n    msg: \"{{ result.scaleway_volume_info }}\"\n"
  },
  "community.general.sefcontext": {
    "doc": {
      "description": "Manages SELinux file context mapping definitions.\nSimilar to the C(semanage fcontext) command.",
      "has_action": false,
      "notes": "The changes are persistent across reboots.\nThe M(community.general.sefcontext) module does not modify existing files to the new SELinux context(s), so it is advisable to first create the SELinux file contexts before creating files, or run C(restorecon) manually for the existing files that require the new SELinux file contexts.\nNot applying SELinux fcontexts to existing files is a deliberate decision as it would be unclear what reported changes would entail to, and there's no guarantee that applying SELinux fcontext does not pick up other unrelated prior changes.",
      "options": {
        "ftype": {
          "aliases": [],
          "description": "The file type that should have SELinux contexts applied.\nThe following file type options are available:\nC(a) for all files,\nC(b) for block devices,\nC(c) for character devices,\nC(d) for directories,\nC(f) for regular files,\nC(l) for symbolic links,\nC(p) for named pipes,\nC(s) for socket files.",
          "default": "a",
          "type": "str",
          "required": false,
          "choices": [
            "a",
            "b",
            "c",
            "d",
            "f",
            "l",
            "p",
            "s"
          ],
          "suboptions": {}
        },
        "ignore_selinux_state": {
          "aliases": [],
          "description": "Useful for scenarios (chrooted environment) that you can't get the real SELinux state.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "reload": {
          "aliases": [],
          "description": "Reload SELinux policy after commit.\nNote that this does not apply SELinux file contexts to existing files.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [
            "serange"
          ],
          "description": "SELinux range for the specified target.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "SELinux type for the specified target.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "SELinux user for the specified target.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the SELinux file context must be C(absent) or C(present).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "target": {
          "aliases": [
            "path"
          ],
          "description": "Target path (expression).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "libselinux-python",
        "policycoreutils-python"
      ],
      "short_description": "Manages SELinux file context mapping definitions"
    },
    "examples": "\n- name: Allow apache to modify files in /srv/git_repos\n  community.general.sefcontext:\n    target: '/srv/git_repos(/.*)?'\n    setype: httpd_git_rw_content_t\n    state: present\n\n- name: Apply new SELinux file context to filesystem\n  ansible.builtin.command: restorecon -irv /srv/git_repos\n"
  },
  "community.general.selinux_permissive": {
    "doc": {
      "description": "Add and remove a domain from the list of permissive domains.",
      "has_action": false,
      "notes": "Requires a recent version of SELinux and C(policycoreutils-python) (EL 6 or newer).",
      "options": {
        "domain": {
          "aliases": [
            "name"
          ],
          "description": "The domain that will be added or removed from the list of permissive domains.",
          "default": "",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "no_reload": {
          "aliases": [],
          "description": "Disable reloading of the SELinux policy after making change to a domain's permissive setting.\nThe default is C(no), which causes policy to be reloaded when a domain changes state.\nReloading the policy does not work on older versions of the C(policycoreutils-python) library, for example in EL 6.\"",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "permissive": {
          "aliases": [],
          "description": "Indicate if the domain should or should not be set as permissive.",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "store": {
          "aliases": [],
          "description": "Name of the SELinux policy store to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "policycoreutils-python"
      ],
      "short_description": "Change permissive domain in SELinux policy"
    },
    "examples": "\n- name: Change the httpd_t domain to permissive\n  community.general.selinux_permissive:\n    name: httpd_t\n    permissive: true\n"
  },
  "community.general.selogin": {
    "doc": {
      "description": "Manages linux user to SELinux user mapping",
      "has_action": false,
      "notes": "The changes are persistent across reboots\nNot tested on any debian based system",
      "options": {
        "ignore_selinux_state": {
          "aliases": [],
          "description": "Run independent of selinux runtime state",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login": {
          "aliases": [],
          "description": "a Linux user",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "reload": {
          "aliases": [],
          "description": "Reload SELinux policy after commit.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [
            "serange"
          ],
          "description": "MLS/MCS Security Range (MLS/MCS Systems only) SELinux Range for SELinux login mapping defaults to the SELinux user record range.",
          "default": "s0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "SELinux user name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired mapping value.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "libselinux",
        "policycoreutils"
      ],
      "short_description": "Manages linux user to SELinux user mapping"
    },
    "examples": "\n- name: Modify the default user on the system to the guest_u user\n  community.general.selogin:\n    login: __default__\n    seuser: guest_u\n    state: present\n\n- name: Assign gijoe user on an MLS machine a range and to the staff_u user\n  community.general.selogin:\n    login: gijoe\n    seuser: staff_u\n    serange: SystemLow-Secret\n    state: present\n\n- name: Assign all users in the engineering group to the staff_u user\n  community.general.selogin:\n    login: '%engineering'\n    seuser: staff_u\n    state: present\n"
  },
  "community.general.sendgrid": {
    "doc": {
      "description": "Sends an email with a SendGrid account through their API, not through the SMTP service.",
      "has_action": false,
      "notes": "This module is non-idempotent because it sends an email through the external API. It is idempotent only in the case that the module fails.\nLike the other notification modules, this one requires an external dependency to work. In this case, you'll need an active SendGrid account.\nIn order to use api_key, cc, bcc, attachments, from_name, html_body, headers you must pip install sendgrid\nsince 2.2 I(username) and I(password) are not required if you supply an I(api_key)",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Sendgrid API key to use instead of username/password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attachments": {
          "aliases": [],
          "description": "A list of relative or explicit paths of files you want to attach (7MB limit as per SendGrid docs).",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "bcc": {
          "aliases": [],
          "description": "A list of email addresses to bcc.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "body": {
          "aliases": [],
          "description": "The e-mail body content.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "cc": {
          "aliases": [],
          "description": "A list of email addresses to cc.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "from_address": {
          "aliases": [],
          "description": "The address in the \"from\" field for the email.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "from_name": {
          "aliases": [],
          "description": "The name you want to appear in the from field, i.e 'John Doe'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dict to pass on as headers.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "html_body": {
          "aliases": [],
          "description": "Whether the body is html content that should be rendered.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password that corresponds to the username.\nSince 2.2 it is only required if I(api_key) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subject": {
          "aliases": [],
          "description": "The desired subject for the email.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "to_addresses": {
          "aliases": [],
          "description": "A list with one or more recipient email addresses.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for logging into the SendGrid account.\nSince 2.2 it is only required if I(api_key) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "sendgrid Python library 1.6.22 or lower (Sendgrid API V2 supported)"
      ],
      "short_description": "Sends an email with the SendGrid API"
    },
    "examples": "\n- name: Send an email to a single recipient that the deployment was successful\n  community.general.sendgrid:\n    username: \"{{ sendgrid_username }}\"\n    password: \"{{ sendgrid_password }}\"\n    from_address: \"ansible@mycompany.com\"\n    to_addresses:\n      - \"ops@mycompany.com\"\n    subject: \"Deployment success.\"\n    body: \"The most recent Ansible deployment was successful.\"\n  delegate_to: localhost\n\n- name: Send an email to more than one recipient that the build failed\n  community.general.sendgrid:\n      username: \"{{ sendgrid_username }}\"\n      password: \"{{ sendgrid_password }}\"\n      from_address: \"build@mycompany.com\"\n      to_addresses:\n        - \"ops@mycompany.com\"\n        - \"devteam@mycompany.com\"\n      subject: \"Build failure!.\"\n      body: \"Unable to pull source repository from Git server.\"\n  delegate_to: localhost\n"
  },
  "community.general.sensu_check": {
    "doc": {
      "description": "Manage the checks that should be run on a machine by I(Sensu).\nMost options do not have a default and will not be added to the check definition unless specified.\nAll defaults except I(path), I(state), I(backup) and I(metric) are not managed by this module,\nthey are simply specified for your convenience.",
      "has_action": false,
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "Classifies the check as an aggregate check,\nmaking it available via the aggregate API\nDefault is C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "Create a backup file (if yes), including the timestamp information so\nyou can get the original file back if you somehow clobbered it incorrectly.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "Path to the sensu check to run (not required when I(state=absent))",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom": {
          "aliases": [],
          "description": "A hash/dictionary of custom parameters for mixing to the configuration.\nYou can't rewrite others module parameters using this",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "dependencies": {
          "aliases": [],
          "description": "Other checks this check depends on, if dependencies fail handling of this check will be disabled",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "handle": {
          "aliases": [],
          "description": "Whether the check should be handled or not\nDefault is C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "handlers": {
          "aliases": [],
          "description": "List of handlers to notify when the check fails",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "high_flap_threshold": {
          "aliases": [],
          "description": "The high threshold for flap detection",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Check interval in seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "low_flap_threshold": {
          "aliases": [],
          "description": "The low threshold for flap detection",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "metric": {
          "aliases": [],
          "description": "Whether the check is a metric",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the check\nThis is the key that is used to determine whether a check exists",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "occurrences": {
          "aliases": [],
          "description": "Number of event occurrences before the handler should take action\nIf not specified, defaults to 1.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path to the json file of the check to be added/removed.\nWill be created if it does not exist (unless I(state=absent)).\nThe parent folders need to exist when I(state=present), otherwise an error will be thrown",
          "default": "/etc/sensu/conf.d/checks.json",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "publish": {
          "aliases": [],
          "description": "Whether the check should be scheduled at all.\nYou can still issue it via the sensu api\nDefault is C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "refresh": {
          "aliases": [],
          "description": "Number of seconds handlers should wait before taking second action",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The check source, used to create a JIT Sensu client for an external resource (e.g. a network switch).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "standalone": {
          "aliases": [],
          "description": "Whether the check should be scheduled by the sensu client or server\nThis option obviates the need for specifying the I(subscribers) option\nDefault is C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the check should be present or not",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subdue_begin": {
          "aliases": [],
          "description": "When to disable handling of check failures",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subdue_end": {
          "aliases": [],
          "description": "When to enable handling of check failures",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscribers": {
          "aliases": [],
          "description": "List of subscribers/channels this check should run for\nSee sensu_subscribers to subscribe a machine to a channel",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout for the check\nIf not specified, it defaults to 10.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Time to live in seconds until the check is considered stale",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Sensu checks"
    },
    "examples": "\n# Fetch metrics about the CPU load every 60 seconds,\n# the sensu server has a handler called 'relay' which forwards stats to graphite\n- name: Get cpu metrics\n  community.general.sensu_check:\n    name: cpu_load\n    command: /etc/sensu/plugins/system/cpu-mpstat-metrics.rb\n    metric: yes\n    handlers: relay\n    subscribers: common\n    interval: 60\n\n# Check whether nginx is running\n- name: Check nginx process\n  community.general.sensu_check:\n    name: nginx_running\n    command: /etc/sensu/plugins/processes/check-procs.rb -f /var/run/nginx.pid\n    handlers: default\n    subscribers: nginx\n    interval: 60\n\n# Stop monitoring the disk capacity.\n# Note that the check will still show up in the sensu dashboard,\n# to remove it completely you need to issue a DELETE request to the sensu api.\n- name: Check disk\n  community.general.sensu_check:\n    name: check_disk_capacity\n    state: absent\n"
  },
  "community.general.sensu_client": {
    "doc": {
      "description": "Manages Sensu client configuration.\nFor more information, refer to the Sensu documentation: U(https://sensuapp.org/docs/latest/reference/clients.html)",
      "has_action": false,
      "notes": "Check mode is supported",
      "options": {
        "address": {
          "aliases": [],
          "description": "An address to help identify and reach the client. This is only informational, usually an IP address or hostname.\nIf not specified it defaults to non-loopback IPv4 address as determined by Ruby Socket.ip_address_list (provided by Sensu).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "chef": {
          "aliases": [],
          "description": "The chef definition scope, used to configure the Sensu Enterprise Chef integration (Sensu Enterprise users only).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "deregister": {
          "aliases": [],
          "description": "If a deregistration event should be created upon Sensu client process stop.\nDefault is C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "deregistration": {
          "aliases": [],
          "description": "The deregistration definition scope, used to configure automated Sensu client de-registration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ec2": {
          "aliases": [],
          "description": "The ec2 definition scope, used to configure the Sensu Enterprise AWS EC2 integration (Sensu Enterprise users only).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "keepalive": {
          "aliases": [],
          "description": "The keepalive definition scope, used to configure Sensu client keepalives behavior (e.g. keepalive thresholds, etc).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "keepalives": {
          "aliases": [],
          "description": "If Sensu should monitor keepalives for this client.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A unique name for the client. The name cannot contain special characters or spaces.\nIf not specified, it defaults to the system hostname as determined by Ruby Socket.gethostname (provided by Sensu).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "puppet": {
          "aliases": [],
          "description": "The puppet definition scope, used to configure the Sensu Enterprise Puppet integration (Sensu Enterprise users only).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "redact": {
          "aliases": [],
          "description": "Client definition attributes to redact (values) when logging and sending client keepalives.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "registration": {
          "aliases": [],
          "description": "The registration definition scope, used to configure Sensu registration event handlers.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "safe_mode": {
          "aliases": [],
          "description": "If safe mode is enabled for the client. Safe mode requires local check definitions in order to accept a check request and execute the check.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "servicenow": {
          "aliases": [],
          "description": "The servicenow definition scope, used to configure the Sensu Enterprise ServiceNow integration (Sensu Enterprise users only).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "socket": {
          "aliases": [],
          "description": "The socket definition scope, used to configure the Sensu client socket.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the client should be present or not",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subscriptions": {
          "aliases": [],
          "description": "An array of client subscriptions, a list of roles and/or responsibilities assigned to the system (e.g. webserver).\nThese subscriptions determine which monitoring checks are executed by the client, as check requests are sent to subscriptions.\nThe subscriptions array items must be strings.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Manages Sensu client configuration"
    },
    "examples": "\n# Minimum possible configuration\n- name: Configure Sensu client\n  community.general.sensu_client:\n    subscriptions:\n      - default\n\n# With customization\n- name: Configure Sensu client\n  community.general.sensu_client:\n    name: \"{{ ansible_fqdn }}\"\n    address: \"{{ ansible_default_ipv4['address'] }}\"\n    subscriptions:\n      - default\n      - webserver\n    redact:\n      - password\n    socket:\n      bind: 127.0.0.1\n      port: 3030\n    keepalive:\n      thresholds:\n        warning: 180\n        critical: 300\n      handlers:\n        - email\n      custom:\n        - broadcast: irc\n      occurrences: 3\n  register: client\n  notify:\n    - Restart sensu-client\n\n- name: Secure Sensu client configuration file\n  ansible.builtin.file:\n    path: \"{{ client['file'] }}\"\n    owner: \"sensu\"\n    group: \"sensu\"\n    mode: \"0600\"\n\n- name: Delete the Sensu client configuration\n  community.general.sensu_client:\n    state: \"absent\"\n"
  },
  "community.general.sensu_handler": {
    "doc": {
      "description": "Manages Sensu handler configuration\nFor more information, refer to the Sensu documentation: U(https://sensuapp.org/docs/latest/reference/handlers.html)",
      "has_action": false,
      "notes": "Check mode is supported",
      "options": {
        "command": {
          "aliases": [],
          "description": "The handler command to be executed.\nThe event data is passed to the process via STDIN.\nNOTE: the command attribute is only required for Pipe handlers (i.e. handlers configured with \"type\": \"pipe\").",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "The Sensu event filter (name) to use when filtering events for the handler.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "An array of Sensu event filters (names) to use when filtering events for the handler.\nEach array item must be a string.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "handle_flapping": {
          "aliases": [],
          "description": "If events in the flapping state should be handled.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "handle_silenced": {
          "aliases": [],
          "description": "If events matching one or more silence entries should be handled.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "handlers": {
          "aliases": [],
          "description": "An array of Sensu event handlers (names) to use for events using the handler set.\nNOTE: the handlers attribute is only required for handler sets (i.e. handlers configured with \"type\": \"set\").",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "mutator": {
          "aliases": [],
          "description": "The Sensu event mutator (name) to use to mutate event data for the handler.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A unique name for the handler. The name cannot contain special characters or spaces.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pipe": {
          "aliases": [],
          "description": "The pipe definition scope, used to configure the Sensu transport pipe.\nNOTE: the pipe attribute is only required for Transport handlers (i.e. handlers configured with \"type\": \"transport\").",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "severities": {
          "aliases": [],
          "description": "An array of check result severities the handler will handle.\nNOTE: event resolution bypasses this filtering.\nExample: [ 'warning', 'critical', 'unknown' ].",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "socket": {
          "aliases": [],
          "description": "The socket definition scope, used to configure the TCP/UDP handler socket.\nNOTE: the socket attribute is only required for TCP/UDP handlers (i.e. handlers configured with \"type\": \"tcp\" or \"type\": \"udp\").",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the handler should be present or not",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The handler execution duration timeout in seconds (hard stop).\nOnly used by pipe and tcp handler types.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The handler type",
          "type": "str",
          "required": false,
          "choices": [
            "pipe",
            "tcp",
            "udp",
            "transport",
            "set"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages Sensu handler configuration"
    },
    "examples": "\n# Configure a handler that sends event data as STDIN (pipe)\n- name: Configure IRC Sensu handler\n  community.general.sensu_handler:\n    name: \"irc_handler\"\n    type: \"pipe\"\n    command: \"/usr/local/bin/notify-irc.sh\"\n    severities:\n      - \"ok\"\n      - \"critical\"\n      - \"warning\"\n      - \"unknown\"\n    timeout: 15\n  notify:\n    - Restart sensu-client\n    - Restart sensu-server\n\n# Delete a handler\n- name: Delete IRC Sensu handler\n  community.general.sensu_handler:\n    name: \"irc_handler\"\n    state: \"absent\"\n\n# Example of a TCP handler\n- name: Configure TCP Sensu handler\n  community.general.sensu_handler:\n    name: \"tcp_handler\"\n    type: \"tcp\"\n    timeout: 30\n    socket:\n      host: \"10.0.1.99\"\n      port: 4444\n  register: handler\n  notify:\n    - Restart sensu-client\n    - Restart sensu-server\n\n- name: Secure Sensu handler configuration file\n  ansible.builtin.file:\n    path: \"{{ handler['file'] }}\"\n    owner: \"sensu\"\n    group: \"sensu\"\n    mode: \"0600\"\n"
  },
  "community.general.sensu_silence": {
    "doc": {
      "description": "Create and clear (delete) a silence entries via the Sensu API for subscriptions and checks.",
      "has_action": false,
      "options": {
        "check": {
          "aliases": [],
          "description": "Specifies the check which the silence entry applies to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "creator": {
          "aliases": [],
          "description": "Specifies the entity responsible for this entry.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expire": {
          "aliases": [],
          "description": "If specified, the silence entry will be automatically cleared after this number of seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "expire_on_resolve": {
          "aliases": [],
          "description": "If specified as true, the silence entry will be automatically cleared once the condition it is silencing is resolved.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "reason": {
          "aliases": [],
          "description": "If specified, this free-form string is used to provide context or rationale for the reason this silence entry was created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies to create or clear (delete) a silence entry via the Sensu API",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subscription": {
          "aliases": [],
          "description": "Specifies the subscription which the silence entry applies to.\nTo create a silence entry for a client prepend C(client:) to client name. Example - C(client:server1.example.dev)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Specifies the URL of the Sensu monitoring host server.",
          "default": "http://127.0.01:4567",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Sensu silence entries"
    },
    "examples": "\n# Silence ALL checks for a given client\n- name: Silence server1.example.dev\n  community.general.sensu_silence:\n    subscription: client:server1.example.dev\n    creator: \"{{ ansible_user_id }}\"\n    reason: Performing maintenance\n\n# Silence specific check for a client\n- name: Silence CPU_Usage check for server1.example.dev\n  community.general.sensu_silence:\n    subscription: client:server1.example.dev\n    check: CPU_Usage\n    creator: \"{{ ansible_user_id }}\"\n    reason: Investigation alert issue\n\n# Silence multiple clients from a dict\n  silence:\n    server1.example.dev:\n      reason: 'Deployment in progress'\n    server2.example.dev:\n      reason: 'Deployment in progress'\n\n- name: Silence several clients from a dict\n  community.general.sensu_silence:\n    subscription: \"client:{{ item.key }}\"\n    reason: \"{{ item.value.reason }}\"\n    creator: \"{{ ansible_user_id }}\"\n  with_dict: \"{{ silence }}\"\n"
  },
  "community.general.sensu_subscription": {
    "doc": {
      "description": "Manage which I(sensu channels) a machine should subscribe to",
      "has_action": false,
      "options": {
        "backup": {
          "aliases": [],
          "description": "Create a backup file (if yes), including the timestamp information so you\ncan get the original file back if you somehow clobbered it incorrectly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the channel",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path to the subscriptions json file",
          "default": "/etc/sensu/conf.d/subscriptions.json",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the machine should subscribe or unsubscribe from the channel",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [],
      "short_description": "Manage Sensu subscriptions"
    },
    "examples": "\n# Subscribe to the nginx channel\n- name: Subscribe to nginx checks\n  community.general.sensu_subscription: name=nginx\n\n# Unsubscribe from the common checks channel\n- name: Unsubscribe from common checks\n  community.general.sensu_subscription: name=common state=absent\n"
  },
  "community.general.seport": {
    "doc": {
      "description": "Manages SELinux network port type definitions.",
      "has_action": false,
      "notes": "The changes are persistent across reboots.\nNot tested on any debian based system.",
      "options": {
        "ignore_selinux_state": {
          "aliases": [],
          "description": "Run independent of selinux runtime state",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ports": {
          "aliases": [],
          "description": "Ports or port ranges.\nCan be a list (since 2.6) or comma separated string.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "proto": {
          "aliases": [],
          "description": "Protocol for the specified port.",
          "type": "str",
          "required": true,
          "choices": [
            "tcp",
            "udp"
          ],
          "suboptions": {}
        },
        "reload": {
          "aliases": [],
          "description": "Reload SELinux policy after commit.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "SELinux type for the specified port.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired boolean value.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "libselinux-python",
        "policycoreutils-python"
      ],
      "short_description": "Manages SELinux network port type definitions"
    },
    "examples": "\n- name: Allow Apache to listen on tcp port 8888\n  community.general.seport:\n    ports: 8888\n    proto: tcp\n    setype: http_port_t\n    state: present\n\n- name: Allow sshd to listen on tcp port 8991\n  community.general.seport:\n    ports: 8991\n    proto: tcp\n    setype: ssh_port_t\n    state: present\n\n- name: Allow memcached to listen on tcp ports 10000-10100 and 10112\n  community.general.seport:\n    ports: 10000-10100,10112\n    proto: tcp\n    setype: memcache_port_t\n    state: present\n\n- name: Allow memcached to listen on tcp ports 10000-10100 and 10112\n  community.general.seport:\n    ports:\n      - 10000-10100\n      - 10112\n    proto: tcp\n    setype: memcache_port_t\n    state: present\n"
  },
  "community.general.serverless": {
    "doc": {
      "description": "Provides support for managing Serverless Framework (https://serverless.com/) project deployments and stacks.",
      "has_action": false,
      "notes": "Currently, the C(serverless) command must be in the path of the node executing the task. In the future this may be a flag.",
      "options": {
        "deploy": {
          "aliases": [],
          "description": "Whether or not to deploy artifacts after building them.\nWhen this option is C(false) all the functions will be built, but no stack update will be run to send them out.\nThis is mostly useful for generating artifacts to be stored/deployed elsewhere.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Whether or not to force full deployment, equivalent to serverless C(--force) option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "functions": {
          "aliases": [],
          "description": "A list of specific functions to deploy.\nIf this is not provided, all functions in the service will be deployed.\nDeprecated parameter, it will be removed in community.general 5.0.0.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "AWS region to deploy the service to.\nThis parameter defaults to C(us-east-1).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serverless_bin_path": {
          "aliases": [],
          "description": "The path of a serverless framework binary relative to the 'service_path' eg. node_module/.bin/serverless",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "service_path": {
          "aliases": [],
          "description": "The path to the root of the Serverless Service to be operated on.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "stage": {
          "aliases": [],
          "description": "The name of the serverless framework project stage to deploy to.\nThis uses the serverless framework default \"dev\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Goal state of given stage/project.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "verbose": {
          "aliases": [],
          "description": "Shows all stack events during deployment, and display any Stack Output.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "serverless",
        "yaml"
      ],
      "short_description": "Manages a Serverless Framework project"
    },
    "examples": "\n- name: Basic deploy of a service\n  community.general.serverless:\n    service_path: '{{ project_dir }}'\n    state: present\n\n- name: Deploy a project, then pull its resource list back into Ansible\n  community.general.serverless:\n    stage: dev\n    region: us-east-1\n    service_path: '{{ project_dir }}'\n  register: sls\n\n# The cloudformation stack is always named the same as the full service, so the\n# cloudformation_info module can get a full list of the stack resources, as\n# well as stack events and outputs\n- cloudformation_info:\n    region: us-east-1\n    stack_name: '{{ sls.service_name }}'\n    stack_resources: true\n\n- name: Deploy a project using a locally installed serverless binary\n  community.general.serverless:\n    stage: dev\n    region: us-east-1\n    service_path: '{{ project_dir }}'\n    serverless_bin_path: node_modules/.bin/serverless\n"
  },
  "community.general.shutdown": {
    "doc": {
      "description": "Shut downs a machine.",
      "has_action": true,
      "notes": "C(PATH) is ignored on the remote node when searching for the C(shutdown) command. Use I(search_paths) to specify locations to search if the default paths do not work.",
      "options": {
        "delay": {
          "aliases": [],
          "description": "Seconds to wait before shutdown. Passed as a parameter to the shutdown command.\nOn Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.\nOn Solaris and FreeBSD, this will be seconds.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "Message to display to users before shutdown.",
          "default": "Shut down initiated by Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "search_paths": {
          "aliases": [],
          "description": "Paths to search on the remote machine for the C(shutdown) command.\nI(Only) these paths will be searched for the C(shutdown) command. C(PATH) is ignored in the remote node when searching for the C(shutdown) command.",
          "default": "['/sbin', '/usr/sbin', '/usr/local/sbin']",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        }
      },
      "short_description": "Shut down a machine",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Unconditionally shut down the machine with all defaults\n  community.general.shutdown:\n\n- name: Delay shutting down the remote node\n  community.general.shutdown:\n    delay: 60\n\n- name: Shut down a machine with shutdown command in unusual place\n  community.general.shutdown:\n    search_paths:\n     - '/lib/molly-guard'\n"
  },
  "community.general.sl_vm": {
    "doc": {
      "description": "Creates or cancels SoftLayer instances.\nWhen created, optionally waits for it to be 'running'.",
      "has_action": false,
      "options": {
        "cpus": {
          "aliases": [],
          "description": "Count of cpus to be assigned to new virtual instance.",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "2",
            "4",
            "8",
            "16",
            "32",
            "56"
          ],
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Datacenter for the virtual instance to be deployed.",
          "type": "str",
          "required": false,
          "choices": [
            "ams01",
            "ams03",
            "che01",
            "dal01",
            "dal05",
            "dal06",
            "dal09",
            "dal10",
            "dal12",
            "dal13",
            "fra02",
            "fra04",
            "fra05",
            "hkg02",
            "hou02",
            "lon02",
            "lon04",
            "lon06",
            "mel01",
            "mex01",
            "mil01",
            "mon01",
            "osl01",
            "par01",
            "sao01",
            "sea01",
            "seo01",
            "sjc01",
            "sjc03",
            "sjc04",
            "sng01",
            "syd01",
            "syd04",
            "tok02",
            "tor01",
            "wdc01",
            "wdc04",
            "wdc06",
            "wdc07"
          ],
          "suboptions": {}
        },
        "dedicated": {
          "aliases": [],
          "description": "Flag to determine if the instance should be deployed in dedicated space.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disks": {
          "aliases": [],
          "description": "List of disk sizes to be assigned to new virtual instance.",
          "default": "[25]",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain name to be provided to a virtual instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "Specify which SoftLayer flavor template to use instead of cpus and memory.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Hostname to be provided to a virtual instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hourly": {
          "aliases": [],
          "description": "Flag to determine if the instance should be hourly billed.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "image_id": {
          "aliases": [],
          "description": "Image Template to be used for new virtual instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "Instance Id of the virtual instance to perform action option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_disk": {
          "aliases": [],
          "description": "Flag to determine if local disk should be used for the new instance.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "Amount of memory to be assigned to new virtual instance.",
          "type": "int",
          "required": false,
          "choices": [
            "1024",
            "2048",
            "4096",
            "6144",
            "8192",
            "12288",
            "16384",
            "32768",
            "49152",
            "65536",
            "131072",
            "247808"
          ],
          "suboptions": {}
        },
        "nic_speed": {
          "aliases": [],
          "description": "NIC Speed to be assigned to new virtual instance.",
          "type": "int",
          "required": false,
          "choices": [
            "10",
            "100",
            "1000"
          ],
          "suboptions": {}
        },
        "os_code": {
          "aliases": [],
          "description": "OS Code to be used for new virtual instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "post_uri": {
          "aliases": [],
          "description": "URL of a post provisioning script to be loaded and executed on virtual instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "private": {
          "aliases": [],
          "description": "Flag to determine if the instance should be private only.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "private_vlan": {
          "aliases": [],
          "description": "VLAN by its Id to be assigned to the private NIC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_vlan": {
          "aliases": [],
          "description": "VLAN by its Id to be assigned to the public NIC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssh_keys": {
          "aliases": [],
          "description": "List of ssh keys by their Id to be assigned to a virtual instance.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create, or cancel a virtual instance.\nSpecify C(present) for create, C(absent) to cancel.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Tag or list of tags to be provided to a virtual instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Flag used to wait for active status before returning.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_time": {
          "aliases": [],
          "description": "Time in seconds before wait returns.",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "softlayer >= 4.1.1"
      ],
      "short_description": "create or cancel a virtual instance in SoftLayer"
    },
    "examples": "\n- name: Build instance\n  hosts: localhost\n  gather_facts: no\n  tasks:\n  - name: Build instance request\n    community.general.sl_vm:\n      hostname: instance-1\n      domain: anydomain.com\n      datacenter: dal09\n      tags: ansible-module-test\n      hourly: yes\n      private: no\n      dedicated: no\n      local_disk: yes\n      cpus: 1\n      memory: 1024\n      disks: [25]\n      os_code: UBUNTU_LATEST\n      wait: no\n\n- name: Build additional instances\n  hosts: localhost\n  gather_facts: no\n  tasks:\n  - name: Build instances request\n    community.general.sl_vm:\n      hostname: \"{{ item.hostname }}\"\n      domain: \"{{ item.domain }}\"\n      datacenter: \"{{ item.datacenter }}\"\n      tags: \"{{ item.tags }}\"\n      hourly: \"{{ item.hourly }}\"\n      private: \"{{ item.private }}\"\n      dedicated: \"{{ item.dedicated }}\"\n      local_disk: \"{{ item.local_disk }}\"\n      cpus: \"{{ item.cpus }}\"\n      memory: \"{{ item.memory }}\"\n      disks: \"{{ item.disks }}\"\n      os_code: \"{{ item.os_code }}\"\n      ssh_keys: \"{{ item.ssh_keys }}\"\n      wait: \"{{ item.wait }}\"\n    with_items:\n      - hostname: instance-2\n        domain: anydomain.com\n        datacenter: dal09\n        tags:\n          - ansible-module-test\n          - ansible-module-test-replicas\n        hourly: yes\n        private: no\n        dedicated: no\n        local_disk: yes\n        cpus: 1\n        memory: 1024\n        disks:\n          - 25\n          - 100\n        os_code: UBUNTU_LATEST\n        ssh_keys: []\n        wait: True\n      - hostname: instance-3\n        domain: anydomain.com\n        datacenter: dal09\n        tags:\n          - ansible-module-test\n          - ansible-module-test-replicas\n        hourly: yes\n        private: no\n        dedicated: no\n        local_disk: yes\n        cpus: 1\n        memory: 1024\n        disks:\n          - 25\n          - 100\n        os_code: UBUNTU_LATEST\n        ssh_keys: []\n        wait: yes\n\n- name: Cancel instances\n  hosts: localhost\n  gather_facts: no\n  tasks:\n  - name: Cancel by tag\n    community.general.sl_vm:\n      state: absent\n      tags: ansible-module-test\n"
  },
  "community.general.slack": {
    "doc": {
      "description": "The C(slack) module sends notifications to U(http://slack.com) via the Incoming WebHook integration",
      "has_action": false,
      "options": {
        "attachments": {
          "aliases": [],
          "description": "Define a list of attachments. This list mirrors the Slack JSON API.\nFor more information, see U(https://api.slack.com/docs/attachments).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "blocks": {
          "aliases": [],
          "description": "Define a list of blocks. This list mirrors the Slack JSON API.\nFor more information, see U(https://api.slack.com/block-kit).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "channel": {
          "aliases": [],
          "description": "Channel to send the message to. If absent, the message goes to the channel selected for the I(token).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "color": {
          "aliases": [],
          "description": "Allow text to use default colors - use the default of 'normal' to not send a custom color bar at the start of the message.\nAllowed values for color can be one of 'normal', 'good', 'warning', 'danger', any valid 3 digit or 6 digit hex color value.\nSpecifying value in hex is supported since Ansible 2.8.",
          "default": "normal",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Slack (sub)domain for your environment without protocol. (i.e. C(example.slack.com)) In 1.8 and beyond, this is deprecated and may be ignored.  See token documentation for information.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "icon_emoji": {
          "aliases": [],
          "description": "Emoji for the message sender. See Slack documentation for options. (if I(icon_emoji) is set, I(icon_url) will not be used)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "icon_url": {
          "aliases": [],
          "description": "Url for the message sender's icon (default C(https://www.ansible.com/favicon.ico))",
          "default": "https://www.ansible.com/favicon.ico",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "link_names": {
          "aliases": [],
          "description": "Automatically create links for channels and usernames in I(msg).",
          "default": "1",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "0"
          ],
          "suboptions": {}
        },
        "message_id": {
          "aliases": [],
          "description": "Optional. Message ID to edit, instead of posting a new message. Corresponds to C(ts) in the Slack API (U(https://api.slack.com/messaging/modifying)).",
          "type": "str",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "Message to send. Note that the module does not handle escaping characters. Plain-text angle brackets and ampersands should be converted to HTML entities (e.g. & to &amp;) before sending. See Slack's documentation (U(https://api.slack.com/docs/message-formatting)) for more.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parse": {
          "aliases": [],
          "description": "Setting for the message parser at Slack",
          "type": "str",
          "required": false,
          "choices": [
            "full",
            "none"
          ],
          "suboptions": {}
        },
        "thread_id": {
          "aliases": [],
          "description": "Optional. Timestamp of parent message to thread this message. https://api.slack.com/docs/message-threading",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Slack integration token. This authenticates you to the slack service. Make sure to use the correct type of token, depending on what method you use.\nWebhook token: Prior to 1.8, a token looked like C(3Ffe373sfhRE6y42Fg3rvf4GlK).  In 1.8 and above, ansible adapts to the new slack API where tokens look like C(G922VJP24/D921DW937/3Ffe373sfhRE6y42Fg3rvf4GlK).  If tokens are in the new format then slack will ignore any value of domain.  If the token is in the old format the domain is required.  Ansible has no control of when slack will get rid of the old API.  When slack does that the old format will stop working.  ** Please keep in mind the tokens are not the API tokens but are the webhook tokens.  In slack these are found in the webhook URL which are obtained under the apps and integrations. The incoming webhooks can be added in that area.  In some cases this may be locked by your Slack admin and you must request access.  It is there that the incoming webhooks can be added.  The key is on the end of the URL given to you in that section.\nWebAPI token: Slack WebAPI requires a personal, bot or work application token. These tokens start with C(xoxp-), C(xoxb-) or C(xoxa-), eg. C(xoxb-1234-56789abcdefghijklmnop). WebAPI token is required if you intend to receive thread_id. See Slack's documentation (U(https://api.slack.com/docs/token-types)) for more information.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "This is the sender of the message.",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send Slack notifications"
    },
    "examples": "\n- name: Send notification message via Slack\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    msg: '{{ inventory_hostname }} completed'\n  delegate_to: localhost\n\n- name: Send notification message via Slack all options\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    msg: '{{ inventory_hostname }} completed'\n    channel: '#ansible'\n    thread_id: '1539917263.000100'\n    username: 'Ansible on {{ inventory_hostname }}'\n    icon_url: http://www.example.com/some-image-file.png\n    link_names: 0\n    parse: 'none'\n  delegate_to: localhost\n\n- name: Insert a color bar in front of the message for visibility purposes and use the default webhook icon and name configured in Slack\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    msg: '{{ inventory_hostname }} is alive!'\n    color: good\n    username: ''\n    icon_url: ''\n\n- name: Insert a color bar in front of the message with valid hex color value\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    msg: 'This message uses color in hex value'\n    color: '#00aacc'\n    username: ''\n    icon_url: ''\n\n- name: Use the attachments API\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    attachments:\n      - text: Display my system load on host A and B\n        color: '#ff00dd'\n        title: System load\n        fields:\n          - title: System A\n            value: \"load average: 0,74, 0,66, 0,63\"\n            short: True\n          - title: System B\n            value: 'load average: 5,16, 4,64, 2,43'\n            short: True\n\n- name: Use the blocks API\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    blocks:\n      - type: section\n        text:\n          type: mrkdwn\n          text: |-\n            *System load*\n            Display my system load on host A and B\n      - type: context\n        elements:\n        - type: mrkdwn\n          text: |-\n            *System A*\n            load average: 0,74, 0,66, 0,63\n        - type: mrkdwn\n          text: |-\n            *System B*\n            load average: 5,16, 4,64, 2,43\n\n- name: Send a message with a link using Slack markup\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    msg: We sent this message using <https://www.ansible.com|Ansible>!\n\n- name: Send a message with angle brackets and ampersands\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    msg: This message has &lt;brackets&gt; &amp; ampersands in plain text.\n\n- name: Initial Threaded Slack message\n  community.general.slack:\n    channel: '#ansible'\n    token: xoxb-1234-56789abcdefghijklmnop\n    msg: 'Starting a thread with my initial post.'\n  register: slack_response\n- name: Add more info to thread\n  community.general.slack:\n    channel: '#ansible'\n    token: xoxb-1234-56789abcdefghijklmnop\n    thread_id: \"{{ slack_response['ts'] }}\"\n    color: good\n    msg: 'And this is my threaded response!'\n\n- name: Send a message to be edited later on\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    channel: '#ansible'\n    msg: Deploying something...\n  register: slack_response\n- name: Edit message\n  community.general.slack:\n    token: thetoken/generatedby/slack\n    channel: \"{{ slack_response.channel }}\"\n    msg: Deployment complete!\n    message_id: \"{{ slack_response.ts }}\"\n"
  },
  "community.general.slackpkg": {
    "doc": {
      "description": "Manage binary packages for Slackware using 'slackpkg' which is available in versions after 12.2.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "name of package to install/remove",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "state of the package, you can use \"installed\" as an alias for C(present) and removed as one for C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest",
            "installed",
            "removed"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [
            "update-cache"
          ],
          "description": "update the package database first\nAlias C(update-cache) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Slackware >= 12.2"
      ],
      "short_description": "Package manager for Slackware >= 12.2"
    },
    "examples": "\n- name: Install package foo\n  community.general.slackpkg:\n    name: foo\n    state: present\n\n- name: Remove packages foo and bar\n  community.general.slackpkg:\n    name: foo,bar\n    state: absent\n\n- name: Make sure that it is the most updated package\n  community.general.slackpkg:\n    name: foo\n    state: latest\n"
  },
  "community.general.smartos_image_info": {
    "doc": {
      "description": "Retrieve information about all installed images on SmartOS.\nThis module was called C(smartos_image_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.smartos_image_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "options": {
        "filters": {
          "aliases": [],
          "description": "Criteria for selecting image. Can be any value from image manifest and 'published_date', 'published', 'source', 'clones', and 'size'. More information can be found at U(https://smartos.org/man/1m/imgadm) under 'imgadm list'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Get SmartOS image details."
    },
    "examples": "\n- name: Return information about all installed images\n  community.general.smartos_image_info:\n  register: result\n\n- name: Return all private active Linux images\n  community.general.smartos_image_info:\n    filters: \"os=linux state=active public=false\"\n  register: result\n\n- name: Show, how many clones does every image have\n  community.general.smartos_image_info:\n  register: result\n\n- name: Print information\n  ansible.builtin.debug:\n    msg: \"{{ result.smartos_images[item]['name'] }}-{{ result.smartos_images[item]['version'] }}\n         has {{ result.smartos_images[item]['clones'] }} VM(s)\"\n  with_items: \"{{ result.smartos_images.keys() | list }}\"\n\n- name: Print information\n  ansible.builtin.debug:\n    msg: \"{{ smartos_images[item]['name'] }}-{{ smartos_images[item]['version'] }}\n         has {{ smartos_images[item]['clones'] }} VM(s)\"\n  with_items: \"{{ smartos_images.keys() | list }}\"\n"
  },
  "community.general.snap": {
    "doc": {
      "description": "Manages snaps packages.",
      "has_action": false,
      "options": {
        "channel": {
          "aliases": [],
          "description": "Define which release of a snap is installed and tracked for updates. This option can only be specified if there is a single snap in the task.",
          "default": "stable",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "classic": {
          "aliases": [],
          "description": "Confinement policy. The classic confinement allows a snap to have the same level of access to the system as \"classic\" packages, like those managed by APT. This option corresponds to the --classic argument. This option can only be specified if there is a single snap in the task.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the snaps.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "Set options with pattern C(key=value) or C(snap:key=value). If a snap name is given, the option will be applied to that snap only. If the snap name is omitted, the options will be applied to all snaps listed in I(name). Options will only be applied to active snaps.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "4.4.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages snaps"
    },
    "examples": "\n# Install \"foo\" and \"bar\" snap\n- name: Install foo\n  community.general.snap:\n    name:\n      - foo\n      - bar\n\n# Install \"foo\" snap with options par1=A and par2=B\n- name: Install \"foo\" with options\n  community.general.snap:\n    name:\n      - foo\n    options:\n      - par1=A\n      - par2=B\n\n# Install \"foo\" and \"bar\" snaps with common option com=A and specific options fooPar=X and barPar=Y\n- name: Install \"foo\" and \"bar\" with options\n  community.general.snap:\n    name:\n      - foo\n      - bar\n    options:\n      - com=A\n      - foo:fooPar=X\n      - bar:barPar=Y\n\n# Remove \"foo\" snap\n- name: Remove foo\n  community.general.snap:\n    name: foo\n    state: absent\n\n# Install a snap with classic confinement\n- name: Install \"foo\" with option --classic\n  community.general.snap:\n    name: foo\n    classic: yes\n\n# Install a snap with from a specific channel\n- name: Install \"foo\" with option --channel=latest/edge\n  community.general.snap:\n    name: foo\n    channel: latest/edge\n"
  },
  "community.general.snap_alias": {
    "doc": {
      "description": "Manages snaps aliases.",
      "has_action": false,
      "options": {
        "alias": {
          "aliases": [
            "aliases"
          ],
          "description": "Aliases to be created or removed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the snap.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the alias.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages snap aliases",
      "version_added": "4.0.0"
    },
    "examples": "\n# Install \"foo\" and \"bar\" snap\n- name: Create snap alias\n  community.general.snap_alias:\n    name: hello-world\n    alias: hw\n\n- name: Create multiple aliases\n  community.general.snap_alias:\n    name: hello-world\n    aliases:\n      - hw\n      - hw2\n      - hw3\n    state: present   # optional\n\n- name: Remove one specific aliases\n  community.general.snap_alias:\n    name: hw\n    state: absent\n\n- name: Remove all aliases for snap\n  community.general.snap_alias:\n    name: hello-world\n    state: absent\n"
  },
  "community.general.snmp_facts": {
    "doc": {
      "description": "Retrieve facts for a device using SNMP, the facts will be inserted to the ansible_facts key.",
      "has_action": false,
      "options": {
        "authkey": {
          "aliases": [],
          "description": "Authentication key.\nRequired I(version) is C(v3).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "community": {
          "aliases": [],
          "description": "The SNMP community string, required if I(version) is C(v2) or C(v2c).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Set to target SNMP server (normally C({{ inventory_hostname }})).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "integrity": {
          "aliases": [],
          "description": "Hashing algorithm.\nRequired if I(version) is C(v3).",
          "type": "str",
          "required": false,
          "choices": [
            "md5",
            "sha"
          ],
          "suboptions": {}
        },
        "level": {
          "aliases": [],
          "description": "Authentication level.\nRequired if I(version) is C(v3).",
          "type": "str",
          "required": false,
          "choices": [
            "authNoPriv",
            "authPriv"
          ],
          "suboptions": {}
        },
        "privacy": {
          "aliases": [],
          "description": "Encryption algorithm.\nRequired if I(level) is C(authPriv).",
          "type": "str",
          "required": false,
          "choices": [
            "aes",
            "des"
          ],
          "suboptions": {}
        },
        "privkey": {
          "aliases": [],
          "description": "Encryption key.\nRequired if I(level) is C(authPriv).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Maximum number of request retries, 0 retries means just a single request.",
          "type": "int",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Response timeout in seconds.",
          "type": "int",
          "required": false,
          "version_added": "2.3.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for SNMPv3.\nRequired if I(version) is C(v3).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "SNMP Version to use, C(v2), C(v2c) or C(v3).",
          "type": "str",
          "required": true,
          "choices": [
            "v2",
            "v2c",
            "v3"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pysnmp"
      ],
      "short_description": "Retrieve facts for a device using SNMP"
    },
    "examples": "\n- name: Gather facts with SNMP version 2\n  community.general.snmp_facts:\n    host: '{{ inventory_hostname }}'\n    version: v2c\n    community: public\n  delegate_to: local\n\n- name: Gather facts using SNMP version 3\n  community.general.snmp_facts:\n    host: '{{ inventory_hostname }}'\n    version: v3\n    level: authPriv\n    integrity: sha\n    privacy: aes\n    username: snmp-user\n    authkey: abc12345\n    privkey: def6789\n  delegate_to: localhost\n"
  },
  "community.general.solaris_zone": {
    "doc": {
      "description": "Create, start, stop and delete Solaris zones.\nThis module does not currently allow changing of options for a zone that is already been created.",
      "has_action": false,
      "options": {
        "attach_options": {
          "aliases": [],
          "description": "Extra options to the zoneadm attach command. For example, this can be used to specify whether a minimum or full update of packages is required and if any packages need to be deleted. For valid values, see zoneadm(1M)",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "config": {
          "aliases": [],
          "description": "The zonecfg configuration commands for this zone. See zonecfg(1M) for the valid options and syntax. Typically this is a list of options separated by semi-colons or new lines, e.g. \"set auto-boot=true;add net;set physical=bge0;set address=10.1.1.1;end\"",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "create_options": {
          "aliases": [],
          "description": "Extra options to the zonecfg(1M) create command.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "install_options": {
          "aliases": [],
          "description": "Extra options to the zoneadm(1M) install command. To automate Solaris 11 zone creation, use this to specify the profile XML file, e.g. install_options=\"-c sc_profile.xml\"",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Zone name.\nA zone name must be unique name.\nA zone name must begin with an alpha-numeric character.\nThe name can contain alpha-numeric characters, underbars I(_), hyphens I(-), and periods I(.).\nThe name cannot be longer than 64 characters.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path where the zone will be created. This is required when the zone is created, but not used otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "root_password": {
          "aliases": [],
          "description": "The password hash for the root account. If not specified, the zone's root account will not have a password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sparse": {
          "aliases": [],
          "description": "Whether to create a sparse (C(true)) or whole root (C(false)) zone.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present), configure and install the zone.\nC(installed), synonym for C(present).\nC(running), if the zone already exists, boot it, otherwise, configure and install the zone first, then boot it.\nC(started), synonym for C(running).\nC(stopped), shutdown a zone.\nC(absent), destroy the zone.\nC(configured), configure the ready so that it's to be attached.\nC(attached), attach a zone, but do not boot it.\nC(detached), shutdown and detach a zone",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "attached",
            "configured",
            "detached",
            "installed",
            "present",
            "running",
            "started",
            "stopped"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout, in seconds, for zone to boot.",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Solaris 10 or 11"
      ],
      "short_description": "Manage Solaris zones"
    },
    "examples": "\n- name: Create and install a zone, but don't boot it\n  community.general.solaris_zone:\n    name: zone1\n    state: present\n    path: /zones/zone1\n    sparse: True\n    root_password: Be9oX7OSwWoU.\n    config: 'set autoboot=true; add net; set physical=bge0; set address=10.1.1.1; end'\n\n- name: Create and install a zone and boot it\n  community.general.solaris_zone:\n    name: zone1\n    state: running\n    path: /zones/zone1\n    root_password: Be9oX7OSwWoU.\n    config: 'set autoboot=true; add net; set physical=bge0; set address=10.1.1.1; end'\n\n- name: Boot an already installed zone\n  community.general.solaris_zone:\n    name: zone1\n    state: running\n\n- name: Stop a zone\n  community.general.solaris_zone:\n    name: zone1\n    state: stopped\n\n- name: Destroy a zone\n  community.general.solaris_zone:\n    name: zone1\n    state: absent\n\n- name: Detach a zone\n  community.general.solaris_zone:\n    name: zone1\n    state: detached\n\n- name: Configure a zone, ready to be attached\n  community.general.solaris_zone:\n    name: zone1\n    state: configured\n    path: /zones/zone1\n    root_password: Be9oX7OSwWoU.\n    config: 'set autoboot=true; add net; set physical=bge0; set address=10.1.1.1; end'\n\n- name: Attach zone1\n  community.general.solaris_zone:\n    name: zone1\n    state: attached\n    attach_options: -u\n"
  },
  "community.general.sorcery": {
    "doc": {
      "description": "Manages \"spells\" on Source Mage GNU/Linux using I(sorcery) toolchain",
      "has_action": false,
      "notes": "When all three components are selected, the update goes by the sequence -- Sorcery -> Grimoire(s) -> Spell(s); you cannot override it.\ngrimoire handling (i.e. add/remove, including SCM/rsync versions) is not yet supported.",
      "options": {
        "cache_valid_time": {
          "aliases": [],
          "description": "Time in seconds to invalidate grimoire collection on update\nespecially useful for SCM and rsync grimoires\nmakes sense only in pair with C(update_cache)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "depends": {
          "aliases": [],
          "description": "Comma-separated list of _optional_ dependencies to build a spell (or make sure it is built) with; use +/- in front of dependency to turn it on/off ('+' is optional though)\nthis option is ignored if C(name) parameter is equal to '*' or contains more than one spell\nproviders must be supplied in the form recognized by Sorcery, e.g. 'openssl(SSL)'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "spell"
          ],
          "description": "Name of the spell\nmultiple names can be given, separated by commas\nspecial value '*' in conjunction with states C(latest) or C(rebuild) will update or rebuild the whole system respectively",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to cast, dispel or rebuild a package\nstate C(cast) is an equivalent of C(present), not C(latest)\nstate C(latest) always triggers C(update_cache=yes)\nstate C(rebuild) implies cast of all specified spells, not only those existed before",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "latest",
            "absent",
            "cast",
            "dispelled",
            "rebuild"
          ],
          "suboptions": {}
        },
        "update": {
          "aliases": [],
          "description": "Whether or not to update sorcery scripts at the very first stage",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [
            "update_codex"
          ],
          "description": "Whether or not to update grimoire collection before casting spells",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "bash"
      ],
      "short_description": "Package manager for Source Mage GNU/Linux"
    },
    "examples": "\n- name: Make sure spell foo is installed\n  community.general.sorcery:\n    spell: foo\n    state: present\n\n- name: Make sure spells foo, bar and baz are removed\n  community.general.sorcery:\n    spell: foo,bar,baz\n    state: absent\n\n- name: Make sure spell foo with dependencies bar and baz is installed\n  community.general.sorcery:\n    spell: foo\n    depends: bar,baz\n    state: present\n\n- name: Make sure spell foo with bar and without baz dependencies is installed\n  community.general.sorcery:\n    spell: foo\n    depends: +bar,-baz\n    state: present\n\n- name: Make sure spell foo with libressl (providing SSL) dependency is installed\n  community.general.sorcery:\n    spell: foo\n    depends: libressl(SSL)\n    state: present\n\n- name: Make sure spells with/without required dependencies (if any) are installed\n  community.general.sorcery:\n    name: \"{{ item.spell }}\"\n    depends: \"{{ item.depends | default(None) }}\"\n    state: present\n  loop:\n    - { spell: 'vifm', depends: '+file,-gtk+2' }\n    - { spell: 'fwknop', depends: 'gpgme' }\n    - { spell: 'pv,tnftp,tor' }\n\n- name: Install the latest version of spell foo using regular glossary\n  community.general.sorcery:\n    name: foo\n    state: latest\n\n- name: Rebuild spell foo\n  community.general.sorcery:\n    spell: foo\n    state: rebuild\n\n- name: Rebuild the whole system, but update Sorcery and Codex first\n  community.general.sorcery:\n    spell: '*'\n    state: rebuild\n    update: yes\n    update_cache: yes\n\n- name: Refresh the grimoire collection if it is 1 day old using native sorcerous alias\n  community.general.sorcery:\n    update_codex: yes\n    cache_valid_time: 86400\n\n- name: Update only Sorcery itself\n  community.general.sorcery:\n    update: yes\n"
  },
  "community.general.spectrum_device": {
    "doc": {
      "description": "This module allows you to create and delete devices in CA Spectrum U(https://www.ca.com/us/products/ca-spectrum.html).\nTested on CA Spectrum 9.4.2, 10.1.1 and 10.2.1",
      "has_action": false,
      "notes": "The devices will be created inside the I(Universe) container of the specified landscape.\nAll the operations will be performed only on the specified landscape.",
      "options": {
        "agentport": {
          "aliases": [],
          "description": "UDP port used for SNMP discovery.",
          "default": "161",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "community": {
          "aliases": [],
          "description": "SNMP community used for device discovery.\nRequired when C(state=present).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "device": {
          "aliases": [
            "host",
            "name"
          ],
          "description": "IP address of the device.\nIf a hostname is given, it will be resolved to the IP address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "landscape": {
          "aliases": [],
          "description": "Landscape handle of the SpectroServer to which add or remove the device.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "On C(present) creates the device when it does not exist.\nOn C(absent) removes the device when it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [
            "oneclick_url"
          ],
          "description": "HTTP, HTTPS URL of the Oneclick server in the form (http|https)://host.domain[:port]",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [
            "oneclick_password"
          ],
          "description": "Oneclick user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [
            "oneclick_user"
          ],
          "description": "Oneclick user name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "if C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Creates/deletes devices in CA Spectrum."
    },
    "examples": "\n- name: Add device to CA Spectrum\n  local_action:\n    module: spectrum_device\n    device: '{{ ansible_host }}'\n    community: secret\n    landscape: '0x100000'\n    oneclick_url: http://oneclick.example.com:8080\n    oneclick_user: username\n    oneclick_password: password\n    state: present\n\n\n- name: Remove device from CA Spectrum\n  local_action:\n    module: spectrum_device\n    device: '{{ ansible_host }}'\n    landscape: '{{ landscape_handle }}'\n    oneclick_url: http://oneclick.example.com:8080\n    oneclick_user: username\n    oneclick_password: password\n    use_proxy: no\n    state: absent\n"
  },
  "community.general.spectrum_model_attrs": {
    "doc": {
      "description": "This module can be used to enforce a model's attributes in CA Spectrum.",
      "has_action": false,
      "notes": "Tested on CA Spectrum version 10.4.2.0.189.\nModel creation and deletion are not possible with this module. For that use M(community.general.spectrum_device) instead.",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A list of attribute names and values to enforce.\nAll values and parameters are case sensitive and must be provided as strings only.",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Attribute name OR hex ID.\nCurrently defined names are:\n                 C(App_Manufacturer) (C(0x230683))\n                 C(CollectionsModelNameString) (C(0x12adb))\n                 C(Condition) (C(0x1000a))\n                 C(Criticality) (C(0x1290c))\n                 C(DeviceType) (C(0x23000e))\n                 C(isManaged) (C(0x1295d))\n                 C(Model_Class) (C(0x11ee8))\n                 C(Model_Handle) (C(0x129fa))\n                 C(Model_Name) (C(0x1006e))\n                 C(Modeltype_Handle) (C(0x10001))\n                 C(Modeltype_Name) (C(0x10000))\n                 C(Network_Address) (C(0x12d7f))\n                 C(Notes) (C(0x11564))\n                 C(ServiceDesk_Asset_ID) (C(0x12db9))\n                 C(TopologyModelNameString) (C(0x129e7))\n                 C(sysDescr) (C(0x10052))\n                 C(sysName) (C(0x10b5b))\n                 C(Vendor_Name) (C(0x11570))\n                 C(Description) (C(0x230017))\nHex IDs are the direct identifiers in Spectrum and will always work.\nTo lookup hex IDs go to the UI: Locator -> Devices -> By Model Name -> <enter any model> -> Attributes tab.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Attribute value. Empty strings should be C(\"\") or C(null).",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Model name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Model type.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL of OneClick server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url_password": {
          "aliases": [
            "password"
          ],
          "description": "OneClick password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "url_username": {
          "aliases": [
            "username"
          ],
          "description": "OneClick username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "if C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Validate SSL certificates. Only change this to C(false) if you can guarantee that you are talking to the correct endpoint and there is no man-in-the-middle attack happening.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Enforce a model's attributes in CA Spectrum.",
      "version_added": "2.5.0"
    },
    "examples": "\n- name: Enforce maintenance mode for modelxyz01 with a note about why\n  community.general.spectrum_model_attrs:\n    url: \"http://oneclick.url.com\"\n    username: \"{{ oneclick_username }}\"\n    password: \"{{ oneclick_password }}\"\n    name: \"modelxyz01\"\n    type: \"Host_Device\"\n    validate_certs: true\n    attributes:\n      - name: \"isManaged\"\n        value: \"false\"\n      - name: \"Notes\"\n        value: \"MM set on {{ ansible_date_time.iso8601 }} via CO {{ CO }} by {{ tower_user_name | default(ansible_user_id) }}\"\n  delegate_to: localhost\n  register: spectrum_model_attrs_status\n"
  },
  "community.general.spotinst_aws_elastigroup": {
    "doc": {
      "description": "Can create, update, or delete Spotinst AWS Elastigroups Launch configuration is part of the elastigroup configuration, so no additional modules are necessary for handling the launch configuration. You will have to have a credentials file in this location - <home>/.spotinst/credentials The credentials file must contain a row that looks like this token = <YOUR TOKEN> Full documentation available at https://help.spotinst.com/hc/en-us/articles/115003530285-Ansible-",
      "has_action": false,
      "options": {
        "account_id": {
          "aliases": [],
          "description": "Optional parameter that allows to set an account-id inside the module configuration. By default this is retrieved from the credentials path.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_vs_cost": {
          "aliases": [],
          "description": "The strategy orientation.\nThe choices available are: C(availabilityOriented), C(costOriented), C(balanced).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "availability_zones": {
          "aliases": [],
          "description": "A list of hash/dictionaries of Availability Zones that are configured in the elastigroup; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are name (String), subnet_id (String), placement_group_name (String),",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {}
        },
        "block_device_mappings": {
          "aliases": [],
          "description": "A list of hash/dictionaries of Block Device Mappings for elastigroup instances; You can specify virtual devices and EBS volumes.; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are device_name (List of Strings), virtual_name (String), no_device (String), ebs (Object, expects the following keys- delete_on_termination(Boolean), encrypted(Boolean), iops (Integer), snapshot_id(Integer), volume_type(String), volume_size(Integer))",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "chef": {
          "aliases": [],
          "description": "The Chef integration configuration.; Expects the following keys - chef_server (String), organization (String), user (String), pem_key (String), chef_version (String)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "credentials_path": {
          "aliases": [],
          "description": "Optional parameter that allows to set a non-default credentials path.",
          "default": "~/.spotinst/credentials",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "down_scaling_policies": {
          "aliases": [],
          "description": "A list of hash/dictionaries of scaling policies to configure in the elastigroup; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are - policy_name (String, required), namespace (String, required), metric_name (String, required), dimensions ((List of Objects), Keys allowed are name (String, required) and value (String)), statistic (String, required), evaluation_periods (String, required), period (String, required), threshold (String, required), cooldown (String, required), unit (String, required), operator (String, required), action_type (String, required), adjustment (String), max_target_capacity (String), target (String), maximum (String), minimum (String)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "draining_timeout": {
          "aliases": [],
          "description": "Time for instance to be drained from incoming requests and deregistered from ELB before termination.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ebs_optimized": {
          "aliases": [],
          "description": "Enable EBS optimization for supported instances which are not enabled by default.; Note - additional charges will be applied.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ebs_volume_pool": {
          "aliases": [],
          "description": "A list of hash/dictionaries of EBS devices to reattach to the elastigroup when available; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are - volume_ids (List of Strings), device_name (String)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "ecs": {
          "aliases": [],
          "description": "The ECS integration configuration.; Expects the following key - cluster_name (String)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "elastic_ips": {
          "aliases": [],
          "description": "List of ElasticIps Allocation Ids (Example C(eipalloc-9d4e16f8)) to associate to the group instances",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "fallback_to_od": {
          "aliases": [],
          "description": "In case of no spots available, Elastigroup will launch an On-demand instance instead",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "health_check_grace_period": {
          "aliases": [],
          "description": "The amount of time, in seconds, after the instance has launched to start and check its health.\nIf not specified, it defaults to C(300).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "health_check_type": {
          "aliases": [],
          "description": "The service to use for the health check.\nThe choices available are: C(ELB), C(HCS), C(TARGET_GROUP), C(MLB), C(EC2).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "health_check_unhealthy_duration_before_replacement": {
          "aliases": [],
          "description": "Minimal mount of time instance should be unhealthy for us to consider it unhealthy.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "iam_role_arn": {
          "aliases": [],
          "description": "The instance profile iamRole arn\nOnly use iam_role_arn, or iam_role_name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "iam_role_name": {
          "aliases": [],
          "description": "The instance profile iamRole name\nOnly use iam_role_arn, or iam_role_name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The group id if it already exists and you want to update, or delete it. This will not work unless the uniqueness_by field is set to id. When this is set, and the uniqueness_by field is set, the group will either be updated or deleted, but not created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_id": {
          "aliases": [],
          "description": "The image Id used to launch the instance.; In case of conflict between Instance type and image type, an error will be returned",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "key_pair": {
          "aliases": [],
          "description": "Specify a Key Pair to attach to the instances",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kubernetes": {
          "aliases": [],
          "description": "The Kubernetes integration configuration. Expects the following keys - api_server (String), token (String)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "lifetime_period": {
          "aliases": [],
          "description": "Lifetime period",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "load_balancers": {
          "aliases": [],
          "description": "List of classic ELB names",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "max_size": {
          "aliases": [],
          "description": "The upper limit number of instances that you can scale up to",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "mesosphere": {
          "aliases": [],
          "description": "The Mesosphere integration configuration. Expects the following key - api_server (String)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "min_size": {
          "aliases": [],
          "description": "The lower limit number of instances that you can scale down to",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "monitoring": {
          "aliases": [],
          "description": "Describes whether instance Enhanced Monitoring is enabled",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Unique name for elastigroup to be created, updated or deleted",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_interfaces": {
          "aliases": [],
          "description": "A list of hash/dictionaries of network interfaces to add to the elastigroup; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are - description (String), device_index (Integer), secondary_private_ip_address_count (Integer), associate_public_ip_address (Boolean), delete_on_termination (Boolean), groups (List of Strings), network_interface_id (String), private_ip_address (String), subnet_id (String), associate_ipv6_address (Boolean), private_ip_addresses (List of Objects, Keys are privateIpAddress (String, required) and primary (Boolean))",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "on_demand_count": {
          "aliases": [],
          "description": "Required if risk is not set\nNumber of on demand instances to launch. All other instances will be spot instances.; Either set this parameter or the risk parameter",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "on_demand_instance_type": {
          "aliases": [],
          "description": "On-demand instance type that will be provisioned",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "opsworks": {
          "aliases": [],
          "description": "The elastigroup OpsWorks integration configration.; Expects the following key - layer_id (String)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "persistence": {
          "aliases": [],
          "description": "The Stateful elastigroup configration.; Accepts the following keys - should_persist_root_device (Boolean), should_persist_block_devices (Boolean), should_persist_private_ip (Boolean)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "product": {
          "aliases": [],
          "description": "Operation system type.\nAvailable choices are: C(Linux/UNIX), C(SUSE Linux), C(Windows), C(Linux/UNIX (Amazon VPC)), C(SUSE Linux (Amazon VPC)).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "rancher": {
          "aliases": [],
          "description": "The Rancher integration configuration.; Expects the following keys - version (String), access_key (String), secret_key (String), master_host (String)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "right_scale": {
          "aliases": [],
          "description": "The Rightscale integration configuration.; Expects the following keys - account_id (String), refresh_token (String)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "risk": {
          "aliases": [],
          "description": "Required if on demand is not set. The percentage of Spot instances to launch (0 - 100).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "roll_config": {
          "aliases": [],
          "description": "Roll configuration.; If you would like the group to roll after updating, please use this feature. Accepts the following keys - batch_size_percentage(Integer, Required), grace_period - (Integer, Required), health_check_type(String, Optional)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "scheduled_tasks": {
          "aliases": [],
          "description": "A list of hash/dictionaries of scheduled tasks to configure in the elastigroup; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are - adjustment (Integer), scale_target_capacity (Integer), scale_min_capacity (Integer), scale_max_capacity (Integer), adjustment_percentage (Integer), batch_size_percentage (Integer), cron_expression (String), frequency (String), grace_period (Integer), task_type (String, required), is_enabled (Boolean)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "security_group_ids": {
          "aliases": [],
          "description": "One or more security group IDs. ; In case of update it will override the existing Security Group with the new given array",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "shutdown_script": {
          "aliases": [],
          "description": "The Base64-encoded shutdown script that executes prior to instance termination. Encode before setting.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "signals": {
          "aliases": [],
          "description": "A list of hash/dictionaries of signals to configure in the elastigroup; keys allowed are - name (String, required), timeout (Integer)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "spin_up_time": {
          "aliases": [],
          "description": "Spin up time, in seconds, for the instance",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "spot_instance_types": {
          "aliases": [],
          "description": "Spot instance type that will be provisioned.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete the elastigroup",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "A list of tags to configure in the elastigroup. Please specify list of keys and values (key colon value);",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "The number of instances to launch",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "target_group_arns": {
          "aliases": [],
          "description": "List of target group arns instances should be registered to",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "target_tracking_policies": {
          "aliases": [],
          "description": "A list of hash/dictionaries of target tracking policies to configure in the elastigroup; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are - policy_name (String, required), namespace (String, required), source (String, required), metric_name (String, required), statistic (String, required), unit (String, required), cooldown (String, required), target (String, required)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "tenancy": {
          "aliases": [],
          "description": "Dedicated vs shared tenancy.\nThe available choices are: C(default), C(dedicated).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "terminate_at_end_of_billing_hour": {
          "aliases": [],
          "description": "Terminate at the end of billing hour",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "uniqueness_by": {
          "aliases": [],
          "description": "If your group names are not unique, you may use this feature to update or delete a specific group. Whenever this property is set, you must set a group_id in order to update or delete a group, otherwise a group will be created.",
          "default": "name",
          "type": "str",
          "required": false,
          "choices": [
            "id",
            "name"
          ],
          "suboptions": {}
        },
        "unit": {
          "aliases": [],
          "description": "The capacity unit to launch instances by.\nThe available choices are: C(instance), C(weight).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "up_scaling_policies": {
          "aliases": [],
          "description": "A list of hash/dictionaries of scaling policies to configure in the elastigroup; '[{\"key\":\"value\", \"key\":\"value\"}]'; keys allowed are - policy_name (String, required), namespace (String, required), metric_name (String, required), dimensions (List of Objects, Keys allowed are name (String, required) and value (String)), statistic (String, required) evaluation_periods (String, required), period (String, required), threshold (String, required), cooldown (String, required), unit (String, required), operator (String, required), action_type (String, required), adjustment (String), min_target_capacity (String), target (String), maximum (String), minimum (String)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "user_data": {
          "aliases": [],
          "description": "Base64-encoded MIME user data. Encode before setting the value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "utilize_reserved_instances": {
          "aliases": [],
          "description": "In case of any available Reserved Instances, Elastigroup will utilize your reservations before purchasing Spot instances.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_for_instances": {
          "aliases": [],
          "description": "Whether or not the elastigroup creation / update actions should wait for the instances to spin",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "How long the module should wait for instances before failing the action.; Only works if wait_for_instances is True.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "spotinst_sdk >= 1.0.38"
      ],
      "short_description": "Create, update or delete Spotinst AWS Elastigroups"
    },
    "examples": "\n# Basic configuration YAML example\n\n- hosts: localhost\n  tasks:\n    - name: Create elastigroup\n      community.general.spotinst_aws_elastigroup:\n          state: present\n          risk: 100\n          availability_vs_cost: balanced\n          availability_zones:\n            - name: us-west-2a\n              subnet_id: subnet-2b68a15c\n          image_id: ami-f173cc91\n          key_pair: spotinst-oregon\n          max_size: 15\n          min_size: 0\n          target: 0\n          unit: instance\n          monitoring: True\n          name: ansible-group\n          on_demand_instance_type: c3.large\n          product: Linux/UNIX\n          load_balancers:\n            - test-lb-1\n          security_group_ids:\n            - sg-8f4b8fe9\n          spot_instance_types:\n            - c3.large\n          do_not_update:\n            - image_id\n            - target\n      register: result\n    - ansible.builtin.debug: var=result\n\n# In this example, we create an elastigroup and wait 600 seconds to retrieve the instances, and use their private ips\n\n- hosts: localhost\n  tasks:\n    - name: Create elastigroup\n      community.general.spotinst_aws_elastigroup:\n          state: present\n          account_id: act-1a9dd2b\n          risk: 100\n          availability_vs_cost: balanced\n          availability_zones:\n            - name: us-west-2a\n              subnet_id: subnet-2b68a15c\n          tags:\n            - Environment: someEnvValue\n            - OtherTagKey: otherValue\n          image_id: ami-f173cc91\n          key_pair: spotinst-oregon\n          max_size: 5\n          min_size: 0\n          target: 0\n          unit: instance\n          monitoring: True\n          name: ansible-group-tal\n          on_demand_instance_type: c3.large\n          product: Linux/UNIX\n          security_group_ids:\n            - sg-8f4b8fe9\n          block_device_mappings:\n            - device_name: '/dev/sda1'\n              ebs:\n                volume_size: 100\n                volume_type: gp2\n          spot_instance_types:\n            - c3.large\n          do_not_update:\n            - image_id\n          wait_for_instances: True\n          wait_timeout: 600\n      register: result\n\n    - name: Store private ips to file\n      ansible.builtin.shell: echo {{ item.private_ip }}\\n >> list-of-private-ips\n      with_items: \"{{ result.instances }}\"\n    - ansible.builtin.debug: var=result\n\n# In this example, we create an elastigroup with multiple block device mappings, tags, and also an account id\n# In organizations with more than one account, it is required to specify an account_id\n\n- hosts: localhost\n  tasks:\n    - name: Create elastigroup\n      community.general.spotinst_aws_elastigroup:\n          state: present\n          account_id: act-1a9dd2b\n          risk: 100\n          availability_vs_cost: balanced\n          availability_zones:\n            - name: us-west-2a\n              subnet_id: subnet-2b68a15c\n          tags:\n            - Environment: someEnvValue\n            - OtherTagKey: otherValue\n          image_id: ami-f173cc91\n          key_pair: spotinst-oregon\n          max_size: 5\n          min_size: 0\n          target: 0\n          unit: instance\n          monitoring: True\n          name: ansible-group-tal\n          on_demand_instance_type: c3.large\n          product: Linux/UNIX\n          security_group_ids:\n            - sg-8f4b8fe9\n          block_device_mappings:\n            - device_name: '/dev/xvda'\n              ebs:\n                volume_size: 60\n                volume_type: gp2\n            - device_name: '/dev/xvdb'\n              ebs:\n                volume_size: 120\n                volume_type: gp2\n          spot_instance_types:\n            - c3.large\n          do_not_update:\n            - image_id\n          wait_for_instances: True\n          wait_timeout: 600\n      register: result\n\n    - name: Store private ips to file\n      ansible.builtin.shell: echo {{ item.private_ip }}\\n >> list-of-private-ips\n      with_items: \"{{ result.instances }}\"\n    - ansible.builtin.debug: var=result\n\n# In this example we have set up block device mapping with ephemeral devices\n\n- hosts: localhost\n  tasks:\n    - name: Create elastigroup\n      community.general.spotinst_aws_elastigroup:\n          state: present\n          risk: 100\n          availability_vs_cost: balanced\n          availability_zones:\n            - name: us-west-2a\n              subnet_id: subnet-2b68a15c\n          image_id: ami-f173cc91\n          key_pair: spotinst-oregon\n          max_size: 15\n          min_size: 0\n          target: 0\n          unit: instance\n          block_device_mappings:\n            - device_name: '/dev/xvda'\n              virtual_name: ephemeral0\n            - device_name: '/dev/xvdb/'\n              virtual_name: ephemeral1\n          monitoring: True\n          name: ansible-group\n          on_demand_instance_type: c3.large\n          product: Linux/UNIX\n          load_balancers:\n            - test-lb-1\n          security_group_ids:\n            - sg-8f4b8fe9\n          spot_instance_types:\n            - c3.large\n          do_not_update:\n            - image_id\n            - target\n      register: result\n    - ansible.builtin.debug: var=result\n\n# In this example we create a basic group configuration with a network interface defined.\n# Each network interface must have a device index\n\n- hosts: localhost\n  tasks:\n    - name: Create elastigroup\n      community.general.spotinst_aws_elastigroup:\n          state: present\n          risk: 100\n          availability_vs_cost: balanced\n          network_interfaces:\n            - associate_public_ip_address: true\n              device_index: 0\n          availability_zones:\n            - name: us-west-2a\n              subnet_id: subnet-2b68a15c\n          image_id: ami-f173cc91\n          key_pair: spotinst-oregon\n          max_size: 15\n          min_size: 0\n          target: 0\n          unit: instance\n          monitoring: True\n          name: ansible-group\n          on_demand_instance_type: c3.large\n          product: Linux/UNIX\n          load_balancers:\n            - test-lb-1\n          security_group_ids:\n            - sg-8f4b8fe9\n          spot_instance_types:\n            - c3.large\n          do_not_update:\n            - image_id\n            - target\n      register: result\n    - ansible.builtin.debug: var=result\n\n\n# In this example we create a basic group configuration with a target tracking scaling policy defined\n\n- hosts: localhost\n  tasks:\n    - name: Create elastigroup\n      community.general.spotinst_aws_elastigroup:\n          account_id: act-92d45673\n          state: present\n          risk: 100\n          availability_vs_cost: balanced\n          availability_zones:\n            - name: us-west-2a\n              subnet_id: subnet-79da021e\n          image_id: ami-f173cc91\n          fallback_to_od: true\n          tags:\n            - Creator: ValueOfCreatorTag\n            - Environment: ValueOfEnvironmentTag\n          key_pair: spotinst-labs-oregon\n          max_size: 10\n          min_size: 0\n          target: 2\n          unit: instance\n          monitoring: True\n          name: ansible-group-1\n          on_demand_instance_type: c3.large\n          product: Linux/UNIX\n          security_group_ids:\n            - sg-46cdc13d\n          spot_instance_types:\n            - c3.large\n          target_tracking_policies:\n            - policy_name: target-tracking-1\n              namespace: AWS/EC2\n              metric_name: CPUUtilization\n              statistic: average\n              unit: percent\n              target: 50\n              cooldown: 120\n          do_not_update:\n            - image_id\n      register: result\n    - ansible.builtin.debug: var=result\n"
  },
  "community.general.ss_3par_cpg": {
    "doc": {
      "description": "Create and delete CPG on HPE 3PAR.",
      "has_action": false,
      "notes": "check_mode not supported",
      "options": {
        "cpg_name": {
          "aliases": [],
          "description": "Name of the CPG.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "disk_type": {
          "aliases": [],
          "description": "Specifies that physical disks must have the specified device type.",
          "type": "str",
          "required": false,
          "choices": [
            "FC",
            "NL",
            "SSD"
          ],
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Specifies the name of the domain in which the object will reside.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "growth_increment": {
          "aliases": [],
          "description": "Specifies the growth increment(in MiB, GiB or TiB) the amount of logical disk storage created on each auto-grow operation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "growth_limit": {
          "aliases": [],
          "description": "Specifies that the autogrow operation is limited to the specified storage amount that sets the growth limit(in MiB, GiB or TiB).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "growth_warning": {
          "aliases": [],
          "description": "Specifies that the threshold(in MiB, GiB or TiB) of used logical disk space when exceeded results in a warning alert.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "high_availability": {
          "aliases": [],
          "description": "Specifies that the layout must support the failure of one port pair, one cage, or one magazine.",
          "type": "str",
          "required": false,
          "choices": [
            "PORT",
            "CAGE",
            "MAG"
          ],
          "suboptions": {}
        },
        "raid_type": {
          "aliases": [],
          "description": "Specifies the RAID type for the logical disk.",
          "type": "str",
          "required": false,
          "choices": [
            "R0",
            "R1",
            "R5",
            "R6"
          ],
          "suboptions": {}
        },
        "secure": {
          "aliases": [],
          "description": "Specifies whether the certificate needs to be validated while communicating.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "set_size": {
          "aliases": [],
          "description": "Specifies the set size in the number of chunklets.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the specified CPG should exist or not.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_system_ip": {
          "aliases": [],
          "description": "The storage system IP address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "storage_system_password": {
          "aliases": [],
          "description": "The storage system password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "storage_system_username": {
          "aliases": [],
          "description": "The storage system user name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "hpe3par_sdk >= 1.0.2. Install using 'pip install hpe3par_sdk'",
        "WSAPI service should be enabled on the 3PAR storage array."
      ],
      "short_description": "Manage HPE StoreServ 3PAR CPG"
    },
    "examples": "\n- name: Create CPG sample_cpg\n  community.general.ss_3par_cpg:\n    storage_system_ip: 10.10.10.1\n    storage_system_username: username\n    storage_system_password: password\n    state: present\n    cpg_name: sample_cpg\n    domain: sample_domain\n    growth_increment: 32000 MiB\n    growth_limit: 64000 MiB\n    growth_warning: 48000 MiB\n    raid_type: R6\n    set_size: 8\n    high_availability: MAG\n    disk_type: FC\n    secure: no\n\n- name: Delete CPG sample_cpg\n  community.general.ss_3par_cpg:\n    storage_system_ip: 10.10.10.1\n    storage_system_username: username\n    storage_system_password: password\n    state: absent\n    cpg_name: sample_cpg\n    secure: no\n"
  },
  "community.general.ssh_config": {
    "doc": {
      "description": "Configures SSH hosts with special C(IdentityFile)s and hostnames.",
      "has_action": false,
      "notes": "Supports check mode.",
      "options": {
        "forward_agent": {
          "aliases": [],
          "description": "Sets the C(ForwardAgent) option.",
          "type": "bool",
          "required": false,
          "version_added": "4.0.0",
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Which group this configuration file belongs to.\nIf none given, I(user) is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The endpoint this configuration is valid for.\nCan be an actual address on the internet or an alias that will connect to the value of I(hostname).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The actual host to connect to when connecting to the host defined.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity_file": {
          "aliases": [],
          "description": "The path to an identity file (SSH private key) that will be used when connecting to this host.\nFile need to exist and have mode C(0600) to be valid.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The actual port to connect to when connecting to the host defined.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxycommand": {
          "aliases": [],
          "description": "Sets the C(ProxyCommand) option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_user": {
          "aliases": [],
          "description": "Specifies the user to log in as.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssh_config_file": {
          "aliases": [],
          "description": "SSH config file.\nIf I(user) and this option are not specified, C(/etc/ssh/ssh_config) is used.\nMutually exclusive with I(user).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether a host entry should exist or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "strict_host_key_checking": {
          "aliases": [],
          "description": "Whether to strictly check the host key when doing connections to the remote host.",
          "type": "str",
          "required": false,
          "choices": [
            "yes",
            "no",
            "ask"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Which user account this configuration file belongs to.\nIf none given and I(ssh_config_file) is not specified, C(/etc/ssh/ssh_config) is used.\nIf a user is given, C(~/.ssh/config) is used.\nMutually exclusive with I(ssh_config_file).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_known_hosts_file": {
          "aliases": [],
          "description": "Sets the user known hosts file option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "StormSSH"
      ],
      "short_description": "Manage SSH config for user",
      "version_added": "2.0.0"
    },
    "examples": "\n- name: Add a host in the configuration\n  community.general.ssh_config:\n    user: akasurde\n    host: \"example.com\"\n    hostname: \"github.com\"\n    identity_file: \"/home/akasurde/.ssh/id_rsa\"\n    port: '2223'\n    state: present\n\n- name: Delete a host from the configuration\n  community.general.ssh_config:\n    ssh_config_file: \"{{ ssh_config_test }}\"\n    host: \"example.com\"\n    state: absent\n"
  },
  "community.general.stackdriver": {
    "doc": {
      "description": "Send code deploy and annotation events to Stackdriver",
      "has_action": false,
      "options": {
        "annotated_by": {
          "aliases": [],
          "description": "The person or robot who the annotation should be attributed to.",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "deployed_by": {
          "aliases": [],
          "description": "The person or robot responsible for deploying the code",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "deployed_to": {
          "aliases": [],
          "description": "The environment code was deployed to. (ie: development, staging, production)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "event": {
          "aliases": [],
          "description": "The type of event to send, either annotation or deploy",
          "type": "str",
          "required": true,
          "choices": [
            "annotation",
            "deploy"
          ],
          "suboptions": {}
        },
        "event_epoch": {
          "aliases": [],
          "description": "Unix timestamp of where the event should appear in the timeline, defaults to now. Be careful with this.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "id of an EC2 instance that this event should be attached to, which will limit the contexts where this event is shown",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "API key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "level": {
          "aliases": [],
          "description": "one of INFO/WARN/ERROR, defaults to INFO if not supplied. May affect display.",
          "default": "INFO",
          "type": "str",
          "required": false,
          "choices": [
            "INFO",
            "WARN",
            "ERROR"
          ],
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The contents of the annotation message, in plain text. Limited to 256 characters. Required for annotation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "The repository (or project) deployed",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "revision_id": {
          "aliases": [],
          "description": "The revision of the code that was deployed. Required for deploy events",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send code deploy and annotation events to stackdriver"
    },
    "examples": "\n- name: Send a code deploy event to stackdriver\n  community.general.stackdriver:\n    key: AAAAAA\n    event: deploy\n    deployed_to: production\n    deployed_by: leeroyjenkins\n    repository: MyWebApp\n    revision_id: abcd123\n\n- name: Send an annotation event to stackdriver\n  community.general.stackdriver:\n    key: AAAAAA\n    event: annotation\n    msg: Greetings from Ansible\n    annotated_by: leeroyjenkins\n    level: WARN\n    instance_id: i-abcd1234\n"
  },
  "community.general.stacki_host": {
    "doc": {
      "description": "Use this module to add or remove hosts to a stacki front-end via API.\nInformation on stacki can be found at U(https://github.com/StackIQ/stacki).",
      "has_action": false,
      "options": {
        "appliance": {
          "aliases": [],
          "description": "Applicance to be used in host creation.\nRequired if I(state) is C(present) and host does not yet exist.",
          "default": "backend",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_install": {
          "aliases": [],
          "description": "Set value to C(true) to force node into install state if it already exists in stacki.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the host to be added to Stacki.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Network to be configured in the host.\nCurrently not used by the module.",
          "default": "private",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prim_intf": {
          "aliases": [],
          "description": "Name of the primary network interface.\nCurrently not used by the module.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prim_intf_ip": {
          "aliases": [],
          "description": "IP Address for the primary network interface.\nCurrently not used by the module.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prim_intf_mac": {
          "aliases": [],
          "description": "MAC Address for the primary PXE boot network interface.\nCurrently not used by the module.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rack": {
          "aliases": [],
          "description": "Rack to be used in host creation.\nRequired if I(state) is C(present) and host does not yet exist.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rank": {
          "aliases": [],
          "description": "Rank to be used in host creation.\nIn Stacki terminology, the rank is the position of the machine in a rack.\nRequired if I(state) is C(present) and host does not yet exist.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "stacki_endpoint": {
          "aliases": [],
          "description": "URL for the Stacki API Endpoint.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "stacki_password": {
          "aliases": [],
          "description": "Password for authenticating with Stacki API, but if not specified, the environment variable C(stacki_password) is used instead.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "stacki_user": {
          "aliases": [],
          "description": "Username for authenticating with Stacki API, but if not specified, the environment variable C(stacki_user) is used instead.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set value to the desired state for the specified host.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Add or remove host to stacki front-end"
    },
    "examples": "\n- name: Add a host named test-1\n  community.general.stacki_host:\n    name: test-1\n    stacki_user: usr\n    stacki_password: pwd\n    stacki_endpoint: url\n    prim_intf_mac: mac_addr\n    prim_intf_ip: x.x.x.x\n    prim_intf: eth0\n\n- name: Remove a host named test-1\n  community.general.stacki_host:\n    name: test-1\n    stacki_user: usr\n    stacki_password: pwd\n    stacki_endpoint: url\n    state: absent\n"
  },
  "community.general.statsd": {
    "doc": {
      "description": "The C(statsd) module sends metrics to StatsD.\nFor more information, see U(https://statsd-metrics.readthedocs.io/en/latest/).\nSupported metric types are C(counter) and C(gauge). Currently unupported metric types are C(timer), C(set), and C(gaugedelta).",
      "has_action": false,
      "options": {
        "delta": {
          "aliases": [],
          "description": "If the metric is of type C(gauge), change the value by C(delta).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "StatsD host (hostname or IP) to send metrics to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "metric": {
          "aliases": [],
          "description": "The name of the metric.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "metric_prefix": {
          "aliases": [],
          "description": "The prefix to add to the metric.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "metric_type": {
          "aliases": [],
          "description": "The type of metric.",
          "type": "str",
          "required": true,
          "choices": [
            "counter",
            "gauge"
          ],
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port on C(host) which StatsD is listening on.",
          "default": "8125",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The transport protocol to send metrics over.",
          "default": "udp",
          "type": "str",
          "required": false,
          "choices": [
            "udp",
            "tcp"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the check, only C(present) makes sense.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Sender timeout, only applicable if C(protocol) is C(tcp).",
          "default": "1.0",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value of the metric.",
          "type": "int",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "statsd"
      ],
      "short_description": "Send metrics to StatsD",
      "version_added": "2.1.0"
    },
    "examples": "\n- name: Increment the metric my_counter by 1\n  community.general.statsd:\n    host: localhost\n    port: 9125\n    protocol: tcp\n    metric: my_counter\n    metric_type: counter\n    value: 1\n\n- name: Set the gauge my_gauge to 7\n  community.general.statsd:\n    host: localhost\n    port: 9125\n    protocol: tcp\n    metric: my_gauge\n    metric_type: gauge\n    value: 7\n"
  },
  "community.general.statusio_maintenance": {
    "doc": {
      "description": "Creates a maintenance window for status.io\nDeletes a maintenance window for status.io",
      "has_action": false,
      "notes": "You can use the apiary API url (http://docs.statusio.apiary.io/) to capture API traffic\nUse start_date and start_time with minutes to set future maintenance window",
      "options": {
        "all_infrastructure_affected": {
          "aliases": [],
          "description": "If it affects all components and containers",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_id": {
          "aliases": [],
          "description": "Your unique API ID from status.io",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "Your unique API Key from status.io",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "automation": {
          "aliases": [],
          "description": "Automatically start and end the maintenance window",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "components": {
          "aliases": [
            "component"
          ],
          "description": "The given name of your component (server name)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "containers": {
          "aliases": [
            "container"
          ],
          "description": "The given name of your container (data center)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "desc": {
          "aliases": [],
          "description": "Message describing the maintenance window",
          "default": "Created by Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintenance_id": {
          "aliases": [],
          "description": "The maintenance id number when deleting a maintenance window",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintenance_notify_1_hr": {
          "aliases": [],
          "description": "Notify subscribers 1 hour before maintenance start time",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maintenance_notify_24_hr": {
          "aliases": [],
          "description": "Notify subscribers 24 hours before maintenance start time",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maintenance_notify_72_hr": {
          "aliases": [],
          "description": "Notify subscribers 72 hours before maintenance start time",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maintenance_notify_now": {
          "aliases": [],
          "description": "Notify subscribers now",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "minutes": {
          "aliases": [],
          "description": "The length of time in UTC that the maintenance will run (starting from playbook runtime)",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "start_date": {
          "aliases": [],
          "description": "Date maintenance is expected to start (Month/Day/Year) (UTC)\nEnd Date is worked out from start_date + minutes",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_time": {
          "aliases": [],
          "description": "Time maintenance is expected to start (Hour:Minutes) (UTC)\nEnd Time is worked out from start_time + minutes",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "statuspage": {
          "aliases": [],
          "description": "Your unique StatusPage ID from status.io",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "A descriptive title for the maintenance window",
          "default": "A new maintenance window",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Status.io API URL. A private apiary can be used instead.",
          "default": "https://api.status.io",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create maintenance windows for your status.io dashboard"
    },
    "examples": "\n- name: Create a maintenance window for 10 minutes on server1, with automation to stop the maintenance\n  community.general.statusio_maintenance:\n    title: Router Upgrade from ansible\n    desc: Performing a Router Upgrade\n    components: server1.example.com\n    api_id: api_id\n    api_key: api_key\n    statuspage: statuspage_id\n    maintenance_notify_1_hr: True\n    automation: True\n\n- name: Create a maintenance window for 60 minutes on server1 and server2\n  community.general.statusio_maintenance:\n    title: Routine maintenance\n    desc: Some security updates\n    components:\n      - server1.example.com\n      - server2.example.com\n    minutes: 60\n    api_id: api_id\n    api_key: api_key\n    statuspage: statuspage_id\n    maintenance_notify_1_hr: True\n    automation: True\n  delegate_to: localhost\n\n- name: Create a future maintenance window for 24 hours to all hosts inside the Primary Data Center\n  community.general.statusio_maintenance:\n    title: Data center downtime\n    desc: Performing a Upgrade to our data center\n    components: Primary Data Center\n    api_id: api_id\n    api_key: api_key\n    statuspage: statuspage_id\n    start_date: 01/01/2016\n    start_time: 12:00\n    minutes: 1440\n\n- name: Delete a maintenance window\n  community.general.statusio_maintenance:\n    title: Remove a maintenance window\n    maintenance_id: 561f90faf74bc94a4700087b\n    statuspage: statuspage_id\n    api_id: api_id\n    api_key: api_key\n    state: absent\n\n"
  },
  "community.general.sudoers": {
    "doc": {
      "description": "This module allows for the manipulation of sudoers files.",
      "has_action": false,
      "options": {
        "commands": {
          "aliases": [],
          "description": "The commands allowed by the sudoers rule.\nMultiple can be added by passing a list of commands.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "The name of the group for the sudoers rule.\nThis option cannot be used in conjunction with I(user).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the sudoers rule.\nThis will be used for the filename for the sudoers file managed by this rule.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nopassword": {
          "aliases": [],
          "description": "Whether a password will be required to run the sudo'd command.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the rule should exist or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "sudoers_path": {
          "aliases": [],
          "description": "The path which sudoers config files will be managed in.",
          "default": "/etc/sudoers.d",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The name of the user for the sudoers rule.\nThis option cannot be used in conjunction with I(group).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage sudoers files",
      "version_added": "4.3.0"
    },
    "examples": "\n- name: Allow the backup user to sudo /usr/local/bin/backup\n  community.general.sudoers:\n    name: allow-backup\n    state: present\n    user: backup\n    commands: /usr/local/bin/backup\n\n- name: >-\n    Allow the monitoring group to run sudo /usr/local/bin/gather-app-metrics\n    without requiring a password\n  community.general.sudoers:\n    name: monitor-app\n    group: monitoring\n    commands: /usr/local/bin/gather-app-metrics\n\n- name: >-\n    Allow the alice user to run sudo /bin/systemctl restart my-service or\n    sudo /bin/systemctl reload my-service, but a password is required\n  community.general.sudoers:\n    name: alice-service\n    user: alice\n    commands:\n      - /bin/systemctl restart my-service\n      - /bin/systemctl reload my-service\n    nopassword: false\n\n- name: Revoke the previous sudo grants given to the alice user\n  community.general.sudoers:\n    name: alice-service\n    state: absent\n"
  },
  "community.general.supervisorctl": {
    "doc": {
      "description": "Manage the state of a program or group of programs running via supervisord",
      "has_action": false,
      "notes": "When C(state) = I(present), the module will call C(supervisorctl reread) then C(supervisorctl add) if the program/group does not exist.\nWhen C(state) = I(restarted), the module will call C(supervisorctl update) then call C(supervisorctl restart).\nWhen C(state) = I(absent), the module will call C(supervisorctl reread) then C(supervisorctl remove) to remove the target program/group.",
      "options": {
        "config": {
          "aliases": [],
          "description": "The supervisor configuration file path",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the supervisord program or group to manage.\nThe name will be taken as group name when it ends with a colon I(:)\nGroup support is only available in Ansible version 1.6 or later.\nIf I(name=all), all programs and program groups will be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "password to use for authentication",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_url": {
          "aliases": [],
          "description": "URL on which supervisord server is listening",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "signal": {
          "aliases": [],
          "description": "The signal to send to the program/group, when combined with the 'signalled' state. Required when l(state=signalled).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of program/group.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "started",
            "stopped",
            "restarted",
            "absent",
            "signalled"
          ],
          "suboptions": {}
        },
        "supervisorctl_path": {
          "aliases": [],
          "description": "path to supervisorctl executable",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "username to use for authentication",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "supervisorctl"
      ],
      "short_description": "Manage the state of a program or group of programs running via supervisord"
    },
    "examples": "\n- name: Manage the state of program to be in started state\n  community.general.supervisorctl:\n    name: my_app\n    state: started\n\n- name: Manage the state of program group to be in started state\n  community.general.supervisorctl:\n    name: 'my_apps:'\n    state: started\n\n- name: Restart my_app, reading supervisorctl configuration from a specified file\n  community.general.supervisorctl:\n    name: my_app\n    state: restarted\n    config: /var/opt/my_project/supervisord.conf\n\n- name: Restart my_app, connecting to supervisord with credentials and server URL\n  community.general.supervisorctl:\n    name: my_app\n    state: restarted\n    username: test\n    password: testpass\n    server_url: http://localhost:9001\n\n- name: Send a signal to my_app via supervisorctl\n  community.general.supervisorctl:\n    name: my_app\n    state: signalled\n    signal: USR1\n\n- name: Restart all programs and program groups\n  community.general.supervisorctl:\n    name: all\n    state: restarted\n"
  },
  "community.general.svc": {
    "doc": {
      "description": "Controls daemontools services on remote hosts using the svc utility.",
      "has_action": false,
      "options": {
        "downed": {
          "aliases": [],
          "description": "Should a 'down' file exist or not, if it exists it disables auto startup. Defaults to no. Downed does not imply stopped.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Whether the service is enabled or not, if disabled it also implies stopped. Take note that a service can be enabled and downed (no auto restart).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the service to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "service_dir": {
          "aliases": [],
          "description": "Directory svscan watches for services",
          "default": "/service",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_src": {
          "aliases": [],
          "description": "Directory where services are defined, the source of symlinks to service_dir.",
          "default": "/etc/service",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(Started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the svc (svc -t) and C(killed) will always bounce the svc (svc -k). C(reloaded) will send a sigusr1 (svc -1). C(once) will run a normally downed svc once (svc -o), not really an idempotent operation.",
          "type": "str",
          "required": false,
          "choices": [
            "killed",
            "once",
            "reloaded",
            "restarted",
            "started",
            "stopped"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage daemontools services"
    },
    "examples": "\n- name: Start svc dnscache, if not running\n  community.general.svc:\n    name: dnscache\n    state: started\n\n- name: Stop svc dnscache, if running\n  community.general.svc:\n    name: dnscache\n    state: stopped\n\n- name: Kill svc dnscache, in all cases\n  community.general.svc:\n    name: dnscache\n    state: killed\n\n- name: Restart svc dnscache, in all cases\n  community.general.svc:\n    name: dnscache\n    state: restarted\n\n- name: Reload svc dnscache, in all cases\n  community.general.svc:\n    name: dnscache\n    state: reloaded\n\n- name: Using alternative svc directory location\n  community.general.svc:\n    name: dnscache\n    state: reloaded\n    service_dir: /var/service\n"
  },
  "community.general.svr4pkg": {
    "doc": {
      "description": "Manages SVR4 packages on Solaris 10 and 11.\nThese were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.\nNote that this is a very basic packaging system. It will not enforce dependencies on install or remove.",
      "has_action": false,
      "options": {
        "category": {
          "aliases": [],
          "description": "Install/Remove category instead of a single package.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Package name, e.g. C(SUNWcsr)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "HTTP[s] proxy to be used if C(src) is a URL.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "response_file": {
          "aliases": [],
          "description": "Specifies the location of a response file to be used if package expects input on install. (added in Ansible 1.4)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Specifies the location to install the package from. Required when C(state=present).\nCan be any path acceptable to the C(pkgadd) command's C(-d) option. e.g.: C(somefile.pkg), C(/dir/with/pkgs), C(http:/server/mypkgs.pkg).\nIf using a file or directory, they must already be accessible by the host. See the M(ansible.builtin.copy) module for a way to get them there.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to install (C(present)), or remove (C(absent)) a package.\nIf the package is to be installed, then I(src) is required.\nThe SVR4 package system doesn't provide an upgrade operation. You need to uninstall the old, then install the new package.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Whether to install the package only in the current zone, or install it into all zones.\nThe installation into all zones works only if you are working with the global zone.",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "current",
            "all"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage Solaris SVR4 packages"
    },
    "examples": "\n- name: Install a package from an already copied file\n  community.general.svr4pkg:\n    name: CSWcommon\n    src: /tmp/cswpkgs.pkg\n    state: present\n\n- name: Install a package directly from an http site\n  community.general.svr4pkg:\n    name: CSWpkgutil\n    src: 'http://get.opencsw.org/now'\n    state: present\n    zone: current\n\n- name: Install a package with a response file\n  community.general.svr4pkg:\n    name: CSWggrep\n    src: /tmp/third-party.pkg\n    response_file: /tmp/ggrep.response\n    state: present\n\n- name: Ensure that a package is not installed\n  community.general.svr4pkg:\n    name: SUNWgnome-sound-recorder\n    state: absent\n\n- name: Ensure that a category is not installed\n  community.general.svr4pkg:\n    name: FIREFOX\n    state: absent\n    category: true\n"
  },
  "community.general.swdepot": {
    "doc": {
      "description": "Will install, upgrade and remove packages with swdepot package manager (HP-UX)",
      "has_action": false,
      "notes": "",
      "options": {
        "depot": {
          "aliases": [],
          "description": "The source repository from which install or upgrade a package.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "package name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "whether to install (C(present), C(latest)), or remove (C(absent)) a package.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "latest",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage packages with swdepot package manager (HP-UX)"
    },
    "examples": "\n- name: Install a package\n  community.general.swdepot:\n    name: unzip-6.0\n    state: present\n    depot: 'repository:/path'\n\n- name: Install the latest version of a package\n  community.general.swdepot:\n    name: unzip\n    state: latest\n    depot: 'repository:/path'\n\n- name: Remove a package\n  community.general.swdepot:\n    name: unzip\n    state: absent\n"
  },
  "community.general.swupd": {
    "doc": {
      "description": "Manages updates and bundles with the swupd bundle manager, which is used by the Clear Linux Project for Intel Architecture.",
      "has_action": false,
      "options": {
        "contenturl": {
          "aliases": [],
          "description": "URL pointing to the contents of available bundles. If not specified, the contents are retrieved from clearlinux.org.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "The format suffix for version file downloads. For example [1,2,3,staging,etc]. If not specified, the default format is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "manifest": {
          "aliases": [
            "release",
            "version"
          ],
          "description": "The manifest contains information about the bundles at certain version of the OS. Specify a Manifest version to verify against that version or leave unspecified to verify against the current version.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "bundle"
          ],
          "description": "Name of the (I)bundle to install or remove.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired (I)bundle state. C(present) ensures the bundle is installed while C(absent) ensures the (I)bundle is not installed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "update": {
          "aliases": [],
          "description": "Updates the OS to the latest version.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Overrides both I(contenturl) and I(versionurl).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "verify": {
          "aliases": [],
          "description": "Verify content for OS version.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "versionurl": {
          "aliases": [],
          "description": "URL for version string download.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages updates and bundles in ClearLinux systems."
    },
    "examples": "\n- name: Update the OS to the latest version\n  community.general.swupd:\n    update: yes\n\n- name: Installs the \"foo\" bundle\n  community.general.swupd:\n    name: foo\n    state: present\n\n- name: Removes the \"foo\" bundle\n  community.general.swupd:\n    name: foo\n    state: absent\n\n- name: Check integrity of filesystem\n  community.general.swupd:\n    verify: yes\n\n- name: Downgrade OS to release 12920\n  community.general.swupd:\n    verify: yes\n    manifest: 12920\n"
  },
  "community.general.syslogger": {
    "doc": {
      "description": "Uses syslog to add log entries to the host.",
      "has_action": false,
      "options": {
        "facility": {
          "aliases": [],
          "description": "Set the log facility.",
          "default": "daemon",
          "type": "str",
          "required": false,
          "choices": [
            "kern",
            "user",
            "mail",
            "daemon",
            "auth",
            "lpr",
            "news",
            "uucp",
            "cron",
            "syslog",
            "local0",
            "local1",
            "local2",
            "local3",
            "local4",
            "local5",
            "local6",
            "local7"
          ],
          "suboptions": {}
        },
        "ident": {
          "aliases": [],
          "description": "Specify the name of application name which is sending the log to syslog.",
          "default": "ansible_syslogger",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "log_pid": {
          "aliases": [],
          "description": "Log the PID in brackets.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "This is the message to place in syslog.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Set the log priority.",
          "default": "info",
          "type": "str",
          "required": false,
          "choices": [
            "emerg",
            "alert",
            "crit",
            "err",
            "warning",
            "notice",
            "info",
            "debug"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Log messages in the syslog"
    },
    "examples": "\n- name: Simple Usage\n  community.general.syslogger:\n    msg: \"I will end up as daemon.info\"\n\n- name: Send a log message with err priority and user facility with log_pid\n  community.general.syslogger:\n    msg: \"Hello from Ansible\"\n    priority: \"err\"\n    facility: \"user\"\n    log_pid: true\n\n- name: Specify the name of application which is sending log message\n  community.general.syslogger:\n    ident: \"MyApp\"\n    msg: \"I want to believe\"\n    priority: \"alert\"\n"
  },
  "community.general.syspatch": {
    "doc": {
      "description": "Manage OpenBSD system patches using syspatch.",
      "has_action": false,
      "options": {
        "revert": {
          "aliases": [],
          "description": "Revert system patches.",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "one"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage OpenBSD system patches"
    },
    "examples": "\n- name: Apply all available system patches\n  community.general.syspatch:\n\n- name: Revert last patch\n  community.general.syspatch:\n    revert: one\n\n- name: Revert all patches\n  community.general.syspatch:\n    revert: all\n\n# NOTE: You can reboot automatically if a patch requires it:\n- name: Apply all patches and store result\n  community.general.syspatch:\n  register: syspatch\n\n- name: Reboot if patch requires it\n  ansible.builtin.reboot:\n  when: syspatch.reboot_needed\n"
  },
  "community.general.sysrc": {
    "doc": {
      "description": "Manages C(/etc/rc.conf) for FreeBSD.",
      "has_action": false,
      "notes": "The C(name) cannot contain periods as sysrc does not support OID style names.",
      "options": {
        "delim": {
          "aliases": [],
          "description": "Delimiter to be used instead of C( ).\nOnly used when I(state=value_present) or I(state=value_absent).",
          "default": " ",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "jail": {
          "aliases": [],
          "description": "Name or ID of the jail to operate on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of variable in C(/etc/rc.conf) to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path to file to use instead of C(/etc/rc.conf).",
          "default": "/etc/rc.conf",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Use I(present) to add the variable.\nUse I(absent) to remove the variable.\nUse I(value_present) to add the value to the existing variable.\nUse I(value_absent) to remove the value from the existing variable.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "value_present",
            "value_absent"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value to set when I(state=present).\nThe value to add when I(state=value_present).\nThe value to remove when I(state=value_absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage FreeBSD using sysrc",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n# enable mysql in the /etc/rc.conf\n- name: Configure mysql pid file\n  community.general.sysrc:\n    name: mysql_pidfile\n    value: \"/var/run/mysqld/mysqld.pid\"\n\n# enable accf_http kld in the boot loader\n- name: Enable accf_http kld\n  community.general.sysrc:\n    name: accf_http_load\n    state: present\n    value: \"YES\"\n    path: /boot/loader.conf\n\n# add gif0 to cloned_interfaces\n- name: Add gif0 interface\n  community.general.sysrc:\n    name: cloned_interfaces\n    state: value_present\n    value: \"gif0\"\n\n# enable nginx on a jail\n- name: Enable nginx in test jail\n  community.general.sysrc:\n    name: nginx_enable\n    value: \"YES\"\n    jail: testjail\n"
  },
  "community.general.sysupgrade": {
    "doc": {
      "description": "Manage OpenBSD system upgrades using sysupgrade.",
      "has_action": false,
      "options": {
        "fetch_only": {
          "aliases": [],
          "description": "Fetch and verify files and create /bsd.upgrade but do not reboot.\nSet to C(false) if you want sysupgrade to reboot. This will cause Ansible to error, as it expects the module to exit gracefully. See the examples.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force upgrade (for snapshots only).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "installurl": {
          "aliases": [],
          "description": "OpenBSD mirror top-level URL for fetching an upgrade.\nBy default, the mirror URL is pulled from /etc/installurl.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keep_files": {
          "aliases": [],
          "description": "Keep the files under /home/_sysupgrade.\nBy default, the files will be deleted after the upgrade.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "snapshot": {
          "aliases": [],
          "description": "Apply the latest snapshot.\nOtherwise release will be applied.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage OpenBSD system upgrades",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Upgrade to latest release\n  community.general.sysupgrade:\n  register: sysupgrade\n\n- name: Upgrade to latest snapshot\n  community.general.sysupgrade:\n    snapshot: yes\n    installurl: https://cloudflare.cdn.openbsd.org/pub/OpenBSD\n  register: sysupgrade\n\n- name: Reboot to apply upgrade if needed\n  ansible.builtin.reboot:\n  when: sysupgrade.changed\n\n# Note: Ansible will error when running this way due to how\n#   the reboot is forcefully handled by sysupgrade:\n\n- name: Have sysupgrade automatically reboot\n  community.general.sysupgrade:\n    fetch_only: no\n  ignore_errors: yes\n"
  },
  "community.general.taiga_issue": {
    "doc": {
      "description": "Creates/deletes an issue in a Taiga Project Management Platform (U(https://taiga.io)).\nAn issue is identified by the combination of project, issue subject and issue type.\nThis module implements the creation or deletion of issues (not the update).",
      "has_action": false,
      "notes": "The authentication is achieved either by the environment variable TAIGA_TOKEN or by the pair of environment variables TAIGA_USERNAME and TAIGA_PASSWORD",
      "options": {
        "attachment": {
          "aliases": [],
          "description": "Path to a file to be attached to the issue.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "attachment_description": {
          "aliases": [],
          "description": "A string describing the file to be attached to the issue.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The issue description.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "issue_type": {
          "aliases": [],
          "description": "The issue type. Must exist previously.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "The issue priority. Must exist previously.",
          "default": "Normal",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project containing the issue. Must exist previously.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "severity": {
          "aliases": [],
          "description": "The issue severity. Must exist previously.",
          "default": "Normal",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the issue should be present or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "The issue status. Must exist previously.",
          "default": "New",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subject": {
          "aliases": [],
          "description": "The issue subject.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "A lists of tags to be assigned to the issue.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "taiga_host": {
          "aliases": [],
          "description": "The hostname of the Taiga instance.",
          "default": "https://api.taiga.io",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python-taiga"
      ],
      "short_description": "Creates/deletes an issue in a Taiga Project Management Platform"
    },
    "examples": "\n- name: Create an issue in the my hosted Taiga environment and attach an error log\n  community.general.taiga_issue:\n    taiga_host: https://mytaigahost.example.com\n    project: myproject\n    subject: An error has been found\n    issue_type: Bug\n    priority: High\n    status: New\n    severity: Important\n    description: An error has been found. Please check the attached error log for details.\n    attachment: /path/to/error.log\n    attachment_description: Error log file\n    tags:\n      - Error\n      - Needs manual check\n    state: present\n\n- name: Deletes the previously created issue\n  community.general.taiga_issue:\n    taiga_host: https://mytaigahost.example.com\n    project: myproject\n    subject: An error has been found\n    issue_type: Bug\n    state: absent\n"
  },
  "community.general.telegram": {
    "doc": {
      "description": "Send notifications via telegram bot, to a verified group or user.\nAlso, the user may try to use any other telegram bot API method, if you specify I(api_method) argument.",
      "has_action": false,
      "notes": "You will require a telegram account and create telegram bot to use this module.",
      "options": {
        "api_args": {
          "aliases": [],
          "description": "Any parameters for the method.\nFor reference to default method, C(SendMessage), see U(https://core.telegram.org/bots/api#sendmessage).",
          "type": "dict",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "api_method": {
          "aliases": [],
          "description": "Bot API method.\nFor reference, see U(https://core.telegram.org/bots/api).",
          "default": "SendMessage",
          "type": "str",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Token identifying your telegram bot.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "module for sending notifications via telegram"
    },
    "examples": "\n\n- name: Send notify to Telegram\n  community.general.telegram:\n    token: '9999999:XXXXXXXXXXXXXXXXXXXXXXX'\n    api_args:\n      chat_id: 000000\n      parse_mode: \"markdown\"\n      text: \"Your precious application has been deployed: https://example.com\"\n      disable_web_page_preview: True\n      disable_notification: True\n\n- name: Forward message to someone\n  community.general.telegram:\n    token: '9999999:XXXXXXXXXXXXXXXXXXXXXXX'\n    api_method: forwardMessage\n    api_args:\n      chat_id: 000000\n      from_chat_id: 111111\n      disable_notification: True\n      message_id: '{{ saved_msg_id }}'\n"
  },
  "community.general.terraform": {
    "doc": {
      "description": "Provides support for deploying resources with Terraform and pulling resource information back into Ansible.",
      "has_action": false,
      "notes": "To just run a `terraform plan`, use check mode.",
      "options": {
        "backend_config": {
          "aliases": [],
          "description": "A group of key-values to provide at init stage to the -backend-config parameter.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "backend_config_files": {
          "aliases": [],
          "description": "The path to a configuration file to provide at init state to the -backend-config parameter. This can accept a list of paths to multiple configuration files.",
          "type": "list",
          "required": false,
          "elements": "path",
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "binary_path": {
          "aliases": [],
          "description": "The path of a terraform binary to use, relative to the 'service_path' unless you supply an absolute path.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "check_destroy": {
          "aliases": [],
          "description": "Apply only when no resources are destroyed. Note that this only prevents \"destroy\" actions, but not \"destroy and re-create\" actions. This option is ignored when I(state=absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "3.3.0",
          "suboptions": {}
        },
        "force_init": {
          "aliases": [],
          "description": "To avoid duplicating infra, if a state file can't be found this will force a `terraform init`. Generally, this should be turned off unless you intend to provision an entirely new Terraform deployment.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "init_reconfigure": {
          "aliases": [],
          "description": "Forces backend reconfiguration during init.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "lock": {
          "aliases": [],
          "description": "Enable statefile locking, if you use a service that accepts locks (such as S3+DynamoDB) to store your statefile.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lock_timeout": {
          "aliases": [],
          "description": "How long to maintain the lock on the statefile, if you use a service that accepts locks (such as S3+DynamoDB).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "overwrite_init": {
          "aliases": [],
          "description": "Run init even if C(.terraform/terraform.tfstate) already exists in I(project_path).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "3.2.0",
          "suboptions": {}
        },
        "parallelism": {
          "aliases": [],
          "description": "Restrict concurrent operations when Terraform applies the plan.",
          "type": "int",
          "required": false,
          "version_added": "3.8.0",
          "suboptions": {}
        },
        "plan_file": {
          "aliases": [],
          "description": "The path to an existing Terraform plan file to apply. If this is not specified, Ansible will build a new TF plan and execute it. Note that this option is required if 'state' has the 'planned' value.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "plugin_paths": {
          "aliases": [],
          "description": "List of paths containing Terraform plugin executable files.\nPlugin executables can be downloaded from U(https://releases.hashicorp.com/).\nWhen set, the plugin discovery and auto-download behavior of Terraform is disabled.\nThe directory structure in the plugin path can be tricky. The Terraform docs U(https://learn.hashicorp.com/tutorials/terraform/automate-terraform#pre-installed-plugins) show a simple directory of files, but actually, the directory structure has to follow the same structure you would see if Terraform auto-downloaded the plugins. See the examples below for a tree output of an example plugin directory.",
          "type": "list",
          "required": false,
          "elements": "path",
          "version_added": "3.0.0",
          "suboptions": {}
        },
        "project_path": {
          "aliases": [],
          "description": "The path to the root of the Terraform directory with the vars.tf/main.tf/etc to use.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "purge_workspace": {
          "aliases": [],
          "description": "Only works with state = absent\nIf true, the workspace will be deleted after the \"terraform destroy\" action.\nThe 'default' workspace will not be deleted.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Goal state of given stage/project",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "planned",
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "state_file": {
          "aliases": [],
          "description": "The path to an existing Terraform state file to use when building plan. If this is not specified, the default `terraform.tfstate` will be used.\nThis option is ignored when plan is specified.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "targets": {
          "aliases": [],
          "description": "A list of specific resources to target in this plan/application. The resources selected here will also auto-include any dependencies.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "A group of key-values to override template variables or those in variables files.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "variables_files": {
          "aliases": [
            "variables_file"
          ],
          "description": "The path to a variables file for Terraform to fill into the TF configurations. This can accept a list of paths to multiple variables files.\nUp until Ansible 2.9, this option was usable as I(variables_file).",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "workspace": {
          "aliases": [],
          "description": "The terraform workspace to work with.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "terraform"
      ],
      "short_description": "Manages a Terraform deployment (and plans)"
    },
    "examples": "\n- name: Basic deploy of a service\n  community.general.terraform:\n    project_path: '{{ project_dir }}'\n    state: present\n\n- name: Define the backend configuration at init\n  community.general.terraform:\n    project_path: 'project/'\n    state: \"{{ state }}\"\n    force_init: true\n    backend_config:\n      region: \"eu-west-1\"\n      bucket: \"some-bucket\"\n      key: \"random.tfstate\"\n\n- name: Define the backend configuration with one or more files at init\n  community.general.terraform:\n    project_path: 'project/'\n    state: \"{{ state }}\"\n    force_init: true\n    backend_config_files:\n      - /path/to/backend_config_file_1\n      - /path/to/backend_config_file_2\n\n- name: Disable plugin discovery and auto-download by setting plugin_paths\n  community.general.terraform:\n    project_path: 'project/'\n    state: \"{{ state }}\"\n    force_init: true\n    plugin_paths:\n      - /path/to/plugins_dir_1\n      - /path/to/plugins_dir_2\n\n### Example directory structure for plugin_paths example\n# $ tree /path/to/plugins_dir_1\n# /path/to/plugins_dir_1/\n# └── registry.terraform.io\n#     └── hashicorp\n#         └── vsphere\n#             ├── 1.24.0\n#             │   └── linux_amd64\n#             │       └── terraform-provider-vsphere_v1.24.0_x4\n#             └── 1.26.0\n#                 └── linux_amd64\n#                     └── terraform-provider-vsphere_v1.26.0_x4\n"
  },
  "community.general.timezone": {
    "doc": {
      "description": "This module configures the timezone setting, both of the system clock and of the hardware clock. If you want to set up the NTP, use M(ansible.builtin.service) module.\nIt is recommended to restart C(crond) after changing the timezone, otherwise the jobs may run at the wrong time.\nSeveral different tools are used depending on the OS/Distribution involved. For Linux it can use C(timedatectl) or edit C(/etc/sysconfig/clock) or C(/etc/timezone) and C(hwclock). On SmartOS, C(sm-set-timezone), for macOS, C(systemsetup), for BSD, C(/etc/localtime) is modified. On AIX, C(chtz) is used.\nMake sure that the zoneinfo files are installed with the appropriate OS package, like C(tzdata) (usually always installed, when not using a minimal installation like Alpine Linux).\nAs of Ansible 2.3 support was added for SmartOS and BSDs.\nAs of Ansible 2.4 support was added for macOS.\nAs of Ansible 2.9 support was added for AIX 6.1+\nWindows and HPUX are not supported, please let us know if you find any other OS/distro in which this fails.",
      "has_action": false,
      "notes": "On SmartOS the C(sm-set-timezone) utility (part of the smtools package) is required to set the zone timezone\nOn AIX only Olson/tz database timezones are useable (POSIX is not supported). - An OS reboot is also required on AIX for the new timezone setting to take effect.",
      "options": {
        "hwclock": {
          "aliases": [
            "rtc"
          ],
          "description": "Whether the hardware clock is in UTC or in local timezone.\nDefault is to keep current setting.\nNote that this option is recommended not to change and may fail to configure, especially on virtual environments such as AWS.\nB(At least one of name and hwclock are required.)\nI(Only used on Linux.)",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "UTC"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the timezone for the system clock.\nDefault is to keep current setting.\nB(At least one of name and hwclock are required.)",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Configure timezone setting"
    },
    "examples": "\n- name: Set timezone to Asia/Tokyo\n  community.general.timezone:\n    name: Asia/Tokyo\n"
  },
  "community.general.twilio": {
    "doc": {
      "description": "Sends a text message to a phone number through the Twilio messaging API.",
      "has_action": false,
      "notes": "This module is non-idempotent because it sends an email through the external API. It is idempotent only in the case that the module fails.\nLike the other notification modules, this one requires an external dependency to work. In this case, you'll need a Twilio account with a purchased or verified phone number to send the text message.",
      "options": {
        "account_sid": {
          "aliases": [],
          "description": "user's Twilio account token found on the account page",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_token": {
          "aliases": [],
          "description": "user's Twilio authentication token",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "from_number": {
          "aliases": [],
          "description": "the Twilio number to send the text message from, format +15551112222",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "media_url": {
          "aliases": [],
          "description": "a URL with a picture, video or sound clip to send with an MMS (multimedia message) instead of a plain SMS",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "the body of the text message",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "to_numbers": {
          "aliases": [
            "to_number"
          ],
          "description": "one or more phone numbers to send the text message to, format +15551112222",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Sends a text message to a mobile phone through Twilio."
    },
    "examples": "\n# send an SMS about the build status to (555) 303 5681\n# note: replace account_sid and auth_token values with your credentials\n# and you have to have the 'from_number' on your Twilio account\n- name: Send a text message to a mobile phone through Twilio\n  community.general.twilio:\n    msg: All servers with webserver role are now configured.\n    account_sid: ACXXXXXXXXXXXXXXXXX\n    auth_token: ACXXXXXXXXXXXXXXXXX\n    from_number: +15552014545\n    to_number: +15553035681\n  delegate_to: localhost\n\n# send an SMS to multiple phone numbers about the deployment\n# note: replace account_sid and auth_token values with your credentials\n# and you have to have the 'from_number' on your Twilio account\n- name: Send a text message to a mobile phone through Twilio\n  community.general.twilio:\n    msg: This server configuration is now complete.\n    account_sid: ACXXXXXXXXXXXXXXXXX\n    auth_token: ACXXXXXXXXXXXXXXXXX\n    from_number: +15553258899\n    to_numbers:\n      - +15551113232\n      - +12025551235\n      - +19735559010\n  delegate_to: localhost\n\n# send an MMS to a single recipient with an update on the deployment\n# and an image of the results\n# note: replace account_sid and auth_token values with your credentials\n# and you have to have the 'from_number' on your Twilio account\n- name: Send a text message to a mobile phone through Twilio\n  community.general.twilio:\n    msg: Deployment complete!\n    account_sid: ACXXXXXXXXXXXXXXXXX\n    auth_token: ACXXXXXXXXXXXXXXXXX\n    from_number: +15552014545\n    to_number: +15553035681\n    media_url: https://demo.twilio.com/logo.png\n  delegate_to: localhost\n"
  },
  "community.general.typetalk": {
    "doc": {
      "description": "Send a message to typetalk using typetalk API",
      "has_action": false,
      "options": {
        "client_id": {
          "aliases": [],
          "description": "OAuth2 client ID",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "client_secret": {
          "aliases": [],
          "description": "OAuth2 client secret",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "message body",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "topic": {
          "aliases": [],
          "description": "topic id to post message",
          "type": "int",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "json"
      ],
      "short_description": "Send a message to typetalk"
    },
    "examples": "\n- name: Send a message to typetalk\n  community.general.typetalk:\n    client_id: 12345\n    client_secret: 12345\n    topic: 1\n    msg: install completed\n"
  },
  "community.general.udm_dns_record": {
    "doc": {
      "description": "This module allows to manage dns records on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.",
      "has_action": false,
      "options": {
        "data": {
          "aliases": [],
          "description": "Additional data for this record, e.g. ['a': '192.0.2.1']. Required if C(state=present).",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the record, this is also the DNS record. E.g. www for www.example.com.\nFor PTR records this has to be the IP address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the dns record is present or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Define the record type. C(host_record) is a A or AAAA record, C(alias) is a CNAME, C(ptr_record) is a PTR record, C(srv_record) is a SRV record and C(txt_record) is a TXT record.\nThe available choices are: C(host_record), C(alias), C(ptr_record), C(srv_record), C(txt_record).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Corresponding DNS zone for this record, e.g. example.com.\nFor PTR records this has to be the full reverse zone (for example C(1.1.192.in-addr.arpa)).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "Python >= 2.6",
        "Univention",
        "ipaddress (for I(type=ptr_record))"
      ],
      "short_description": "Manage dns entries on a univention corporate server"
    },
    "examples": "\n- name: Create a DNS record on a UCS\n  community.general.udm_dns_record:\n    name: www\n    zone: example.com\n    type: host_record\n    data:\n      a:\n         - 192.0.2.1\n         - 2001:0db8::42\n\n- name: Create a DNS v4 PTR record on a UCS\n  community.general.udm_dns_record:\n    name: 192.0.2.1\n    zone: 2.0.192.in-addr.arpa\n    type: ptr_record\n    data:\n      ptr_record: \"www.example.com.\"\n\n- name: Create a DNS v6 PTR record on a UCS\n  community.general.udm_dns_record:\n    name: 2001:db8:0:0:0:ff00:42:8329\n    zone: 2.4.0.0.0.0.f.f.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa\n    type: ptr_record\n    data:\n      ptr_record: \"www.example.com.\"\n"
  },
  "community.general.udm_dns_zone": {
    "doc": {
      "description": "This module allows to manage dns zones on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.",
      "has_action": false,
      "options": {
        "contact": {
          "aliases": [],
          "description": "Contact person in the SOA record.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expire": {
          "aliases": [],
          "description": "Specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.",
          "default": "604800",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of interface IP addresses, on which the server should response this zone. Required if C(state=present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "mx": {
          "aliases": [],
          "description": "List of MX servers. (Must declared as A or AAAA records).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "nameserver": {
          "aliases": [],
          "description": "List of appropriate name servers. Required if C(state=present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "refresh": {
          "aliases": [],
          "description": "Interval before the zone should be refreshed.",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "retry": {
          "aliases": [],
          "description": "Interval that should elapse before a failed refresh should be retried.",
          "default": "1800",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the dns zone is present or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Minimum TTL field that should be exported with any RR from this zone.",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Define if the zone is a forward or reverse DNS zone.\nThe available choices are: C(forward_zone), C(reverse_zone).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [
            "name"
          ],
          "description": "DNS zone name, e.g. C(example.com).",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "Python >= 2.6"
      ],
      "short_description": "Manage dns zones on a univention corporate server"
    },
    "examples": "\n- name: Create a DNS zone on a UCS\n  community.general.udm_dns_zone:\n    zone: example.com\n    type: forward_zone\n    nameserver:\n      - ucs.example.com\n    interfaces:\n      - 192.0.2.1\n"
  },
  "community.general.udm_group": {
    "doc": {
      "description": "This module allows to manage user groups on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "Group description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the posix group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ou": {
          "aliases": [],
          "description": "LDAP OU, e.g. school for LDAP OU C(ou=school,dc=example,dc=com).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "position": {
          "aliases": [],
          "description": "define the whole ldap position of the group, e.g. C(cn=g123m-1A,cn=classes,cn=schueler,cn=groups,ou=schule,dc=example,dc=com).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the group is present or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subpath": {
          "aliases": [],
          "description": "Subpath inside the OU, e.g. C(cn=classes,cn=students,cn=groups).",
          "default": "cn=groups",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Python >= 2.6"
      ],
      "short_description": "Manage of the posix group"
    },
    "examples": "\n- name: Create a POSIX group\n  community.general.udm_group:\n    name: g123m-1A\n\n# Create a POSIX group with the exact DN\n# C(cn=g123m-1A,cn=classes,cn=students,cn=groups,ou=school,dc=school,dc=example,dc=com)\n- name: Create a POSIX group with a DN\n  community.general.udm_group:\n    name: g123m-1A\n    subpath: 'cn=classes,cn=students,cn=groups'\n    ou: school\n\n# or\n- name: Create a POSIX group with a DN\n  community.general.udm_group:\n    name: g123m-1A\n    position: 'cn=classes,cn=students,cn=groups,ou=school,dc=school,dc=example,dc=com'\n"
  },
  "community.general.udm_share": {
    "doc": {
      "description": "This module allows to manage samba shares on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.",
      "has_action": false,
      "options": {
        "directorymode": {
          "aliases": [],
          "description": "Permissions for the share's root directory.",
          "default": "00755",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Directory owner group of the share's root directory.",
          "default": "0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Host FQDN (server which provides the share), e.g. C({{ ansible_fqdn }}). Required if C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nfsCustomSettings": {
          "aliases": [
            "nfs_custom_settings"
          ],
          "description": "Option name in exports file.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "nfs_hosts": {
          "aliases": [],
          "description": "Only allow access for this host, IP address or network.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "ou": {
          "aliases": [],
          "description": "Organisational unit, inside the LDAP Base DN.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Directory owner of the share's root directory.",
          "default": "0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Directory on the providing server, e.g. C(/home). Required if C(state=present).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "root_squash": {
          "aliases": [],
          "description": "Modify user ID for root user (root squashing).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaBlockSize": {
          "aliases": [
            "samba_block_size"
          ],
          "description": "Blocking size.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaBlockingLocks": {
          "aliases": [
            "samba_blocking_locks"
          ],
          "description": "Blocking locks.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaBrowseable": {
          "aliases": [
            "samba_browsable"
          ],
          "description": "Show in Windows network environment.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaCreateMode": {
          "aliases": [
            "samba_create_mode"
          ],
          "description": "File mode.",
          "default": "0744",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaCscPolicy": {
          "aliases": [
            "samba_csc_policy"
          ],
          "description": "Client-side caching policy.",
          "default": "manual",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaCustomSettings": {
          "aliases": [
            "samba_custom_settings"
          ],
          "description": "Option name in smb.conf and its value.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "sambaDirectoryMode": {
          "aliases": [
            "samba_directory_mode"
          ],
          "description": "Directory mode.",
          "default": "0755",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaDirectorySecurityMode": {
          "aliases": [
            "samba_directory_security_mode"
          ],
          "description": "Directory security mode.",
          "default": "0777",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaDosFilemode": {
          "aliases": [
            "samba_dos_filemode"
          ],
          "description": "Users with write access may modify permissions.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaFakeOplocks": {
          "aliases": [
            "samba_fake_oplocks"
          ],
          "description": "Fake oplocks.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaForceCreateMode": {
          "aliases": [
            "samba_force_create_mode"
          ],
          "description": "Force file mode.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaForceDirectoryMode": {
          "aliases": [
            "samba_force_directory_mode"
          ],
          "description": "Force directory mode.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaForceDirectorySecurityMode": {
          "aliases": [
            "samba_force_directory_security_mode"
          ],
          "description": "Force directory security mode.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaForceGroup": {
          "aliases": [
            "samba_force_group"
          ],
          "description": "Force group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaForceSecurityMode": {
          "aliases": [
            "samba_force_security_mode"
          ],
          "description": "Force security mode.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaForceUser": {
          "aliases": [
            "samba_force_user"
          ],
          "description": "Force user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaHideFiles": {
          "aliases": [
            "samba_hide_files"
          ],
          "description": "Hide files.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaHideUnreadable": {
          "aliases": [
            "samba_hide_unreadable"
          ],
          "description": "Hide unreadable files/directories.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaHostsAllow": {
          "aliases": [
            "samba_hosts_allow"
          ],
          "description": "Allowed host/network.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "sambaHostsDeny": {
          "aliases": [
            "samba_hosts_deny"
          ],
          "description": "Denied host/network.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "sambaInheritAcls": {
          "aliases": [
            "samba_inherit_acls"
          ],
          "description": "Inherit ACLs.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaInheritOwner": {
          "aliases": [
            "samba_inherit_owner"
          ],
          "description": "Create files/directories with the owner of the parent directory.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaInheritPermissions": {
          "aliases": [
            "samba_inherit_permissions"
          ],
          "description": "Create files/directories with permissions of the parent directory.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaInvalidUsers": {
          "aliases": [
            "samba_invalid_users"
          ],
          "description": "Invalid users or groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaLevel2Oplocks": {
          "aliases": [
            "samba_level_2_oplocks"
          ],
          "description": "Level 2 oplocks.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaLocking": {
          "aliases": [
            "samba_locking"
          ],
          "description": "Locking.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaMSDFSRoot": {
          "aliases": [
            "samba_msdfs_root"
          ],
          "description": "MSDFS root.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaName": {
          "aliases": [
            "samba_name"
          ],
          "description": "Windows name. Required if C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaNtAclSupport": {
          "aliases": [
            "samba_nt_acl_support"
          ],
          "description": "NT ACL support.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaOplocks": {
          "aliases": [
            "samba_oplocks"
          ],
          "description": "Oplocks.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaPostexec": {
          "aliases": [
            "samba_postexec"
          ],
          "description": "Postexec script.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaPreexec": {
          "aliases": [
            "samba_preexec"
          ],
          "description": "Preexec script.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaPublic": {
          "aliases": [
            "samba_public"
          ],
          "description": "Allow anonymous read-only access with a guest user.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sambaSecurityMode": {
          "aliases": [
            "samba_security_mode"
          ],
          "description": "Security mode.",
          "default": "0777",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaStrictLocking": {
          "aliases": [
            "samba_strict_locking"
          ],
          "description": "Strict locking.",
          "default": "Auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaVFSObjects": {
          "aliases": [
            "samba_vfs_objects"
          ],
          "description": "VFS objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaValidUsers": {
          "aliases": [
            "samba_valid_users"
          ],
          "description": "Valid users or groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaWriteList": {
          "aliases": [
            "samba_write_list"
          ],
          "description": "Restrict write access to these users/groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sambaWriteable": {
          "aliases": [
            "samba_writeable"
          ],
          "description": "Samba write access.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the share is present or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subtree_checking": {
          "aliases": [],
          "description": "Subtree checking.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sync": {
          "aliases": [],
          "description": "NFS synchronisation.",
          "default": "sync",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "writeable": {
          "aliases": [],
          "description": "NFS write access.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Python >= 2.6"
      ],
      "short_description": "Manage samba shares on a univention corporate server"
    },
    "examples": "\n- name: Create a share named home on the server ucs.example.com with the path /home\n  community.general.udm_share:\n    name: home\n    path: /home\n    host: ucs.example.com\n    sambaName: Home\n"
  },
  "community.general.udm_user": {
    "doc": {
      "description": "This module allows to manage posix users on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.",
      "has_action": false,
      "options": {
        "birthday": {
          "aliases": [],
          "description": "Birthday",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "city": {
          "aliases": [],
          "description": "City of users business address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "country": {
          "aliases": [],
          "description": "Country of users business address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "department_number": {
          "aliases": [
            "departmentNumber"
          ],
          "description": "Department number of users business address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description (not gecos)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [
            "displayName"
          ],
          "description": "Display name (not gecos)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "A list of e-mail addresses.",
          "default": "['']",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "employee_number": {
          "aliases": [
            "employeeNumber"
          ],
          "description": "Employee number",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "employee_type": {
          "aliases": [
            "employeeType"
          ],
          "description": "Employee type",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "firstname": {
          "aliases": [],
          "description": "First name. Required if C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gecos": {
          "aliases": [],
          "description": "GECOS",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "POSIX groups, the LDAP DNs of the groups will be found with the LDAP filter for each group as $GROUP: C((&(objectClass=posixGroup)(cn=$GROUP))).",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "home_share": {
          "aliases": [
            "homeShare"
          ],
          "description": "Home NFS share. Must be a LDAP DN, e.g. C(cn=home,cn=shares,ou=school,dc=example,dc=com).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "home_share_path": {
          "aliases": [
            "homeSharePath"
          ],
          "description": "Path to home NFS share, inside the homeShare.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "home_telephone_number": {
          "aliases": [
            "homeTelephoneNumber"
          ],
          "description": "List of private telephone numbers.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "homedrive": {
          "aliases": [],
          "description": "Windows home drive, e.g. C(\"H:\").",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lastname": {
          "aliases": [],
          "description": "Last name. Required if C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mail_alternative_address": {
          "aliases": [
            "mailAlternativeAddress"
          ],
          "description": "List of alternative e-mail addresses.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "mail_home_server": {
          "aliases": [
            "mailHomeServer"
          ],
          "description": "FQDN of mail server",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mail_primary_address": {
          "aliases": [
            "mailPrimaryAddress"
          ],
          "description": "Primary e-mail address",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mobile_telephone_number": {
          "aliases": [
            "mobileTelephoneNumber"
          ],
          "description": "Mobile phone number",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "organisation": {
          "aliases": [
            "organization"
          ],
          "description": "Organisation",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ou": {
          "aliases": [],
          "description": "Organizational Unit inside the LDAP Base DN, e.g. C(school) for LDAP OU C(ou=school,dc=example,dc=com).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "overridePWHistory": {
          "aliases": [
            "override_pw_history"
          ],
          "description": "Override password history",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "overridePWLength": {
          "aliases": [
            "override_pw_length"
          ],
          "description": "Override password check",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pager_telephonenumber": {
          "aliases": [
            "pagerTelephonenumber"
          ],
          "description": "List of pager telephone numbers.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password. Required if C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "phone": {
          "aliases": [],
          "description": "List of telephone numbers.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "position": {
          "aliases": [],
          "description": "Define the whole position of users object inside the LDAP tree, e.g. C(cn=employee,cn=users,ou=school,dc=example,dc=com).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "postcode": {
          "aliases": [],
          "description": "Postal code of users business address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "primary_group": {
          "aliases": [
            "primaryGroup"
          ],
          "description": "Primary group. This must be the group LDAP DN.\nIf not specified, it defaults to C(cn=Domain Users,cn=groups,$LDAP_BASE_DN).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profilepath": {
          "aliases": [],
          "description": "Windows profile directory",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pwd_change_next_login": {
          "aliases": [
            "pwdChangeNextLogin"
          ],
          "description": "Change password on next login.",
          "type": "str",
          "required": false,
          "choices": [
            "0",
            "1"
          ],
          "suboptions": {}
        },
        "room_number": {
          "aliases": [
            "roomNumber"
          ],
          "description": "Room number of users business address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "samba_privileges": {
          "aliases": [
            "sambaPrivileges"
          ],
          "description": "Samba privilege, like allow printer administration, do domain join.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "samba_user_workstations": {
          "aliases": [
            "sambaUserWorkstations"
          ],
          "description": "Allow the authentication only on this Microsoft Windows host.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "sambahome": {
          "aliases": [],
          "description": "Windows home path, e.g. C('\\\\$FQDN\\$USERNAME').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scriptpath": {
          "aliases": [],
          "description": "Windows logon script.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secretary": {
          "aliases": [],
          "description": "A list of superiors as LDAP DNs.",
          "default": "[]",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "serviceprovider": {
          "aliases": [],
          "description": "Enable user for the following service providers.",
          "default": "['']",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "shell": {
          "aliases": [],
          "description": "Login shell",
          "default": "/bin/bash",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the user is present or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "street": {
          "aliases": [],
          "description": "Street of users business address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subpath": {
          "aliases": [],
          "description": "LDAP subpath inside the organizational unit, e.g. C(cn=teachers,cn=users) for LDAP container C(cn=teachers,cn=users,dc=example,dc=com).",
          "default": "cn=users",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "Title, e.g. C(Prof.).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unixhome": {
          "aliases": [],
          "description": "Unix home directory\nIf not specified, it defaults to C(/home/$USERNAME).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "C(always) will update passwords if they differ. C(on_create) will only set the password for newly created users.",
          "default": "always",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "on_create"
          ],
          "suboptions": {}
        },
        "userexpiry": {
          "aliases": [],
          "description": "Account expiry date, e.g. C(1999-12-31).\nIf not specified, it defaults to the current day plus one year.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "name"
          ],
          "description": "User name",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "Python >= 2.6"
      ],
      "short_description": "Manage posix users on a univention corporate server"
    },
    "examples": "\n- name: Create a user on a UCS\n  community.general.udm_user:\n    name: FooBar\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n\n- name: Create a user with the DN C(uid=foo,cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com)\n  community.general.udm_user:\n    name: foo\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n    ou: school\n    subpath: 'cn=teachers,cn=users'\n\n# or define the position\n- name: Create a user with the DN C(uid=foo,cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com)\n  community.general.udm_user:\n    name: foo\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n    position: 'cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com'\n"
  },
  "community.general.ufw": {
    "doc": {
      "description": "Manage firewall with UFW.",
      "has_action": false,
      "notes": "See C(man ufw) for more examples.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Add a comment to the rule. Requires UFW version >=0.35.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default": {
          "aliases": [
            "policy"
          ],
          "description": "Change the default policy for incoming or outgoing traffic.",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "deny",
            "reject"
          ],
          "suboptions": {}
        },
        "delete": {
          "aliases": [],
          "description": "Delete rule.\nIf I(delete=true) and a value is provided for I(insert), then I(insert) is ignored.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "direction": {
          "aliases": [],
          "description": "Select direction for a rule or default policy command.  Mutually exclusive with I(interface_in) and I(interface_out).",
          "type": "str",
          "required": false,
          "choices": [
            "in",
            "incoming",
            "out",
            "outgoing",
            "routed"
          ],
          "suboptions": {}
        },
        "from_ip": {
          "aliases": [
            "from",
            "src"
          ],
          "description": "Source IP address.",
          "default": "any",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "from_port": {
          "aliases": [],
          "description": "Source port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "insert": {
          "aliases": [],
          "description": "Insert the corresponding rule as rule number NUM.\nNote that ufw numbers rules starting with 1.\nIf I(delete=true) and a value is provided for I(insert), then I(insert) is ignored.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "insert_relative_to": {
          "aliases": [],
          "description": "Allows to interpret the index in I(insert) relative to a position.\nC(zero) interprets the rule number as an absolute index (i.e. 1 is the first rule).\nC(first-ipv4) interprets the rule number relative to the index of the first IPv4 rule, or relative to the position where the first IPv4 rule would be if there is currently none.\nC(last-ipv4) interprets the rule number relative to the index of the last IPv4 rule, or relative to the position where the last IPv4 rule would be if there is currently none.\nC(first-ipv6) interprets the rule number relative to the index of the first IPv6 rule, or relative to the position where the first IPv6 rule would be if there is currently none.\nC(last-ipv6) interprets the rule number relative to the index of the last IPv6 rule, or relative to the position where the last IPv6 rule would be if there is currently none.",
          "default": "zero",
          "type": "str",
          "required": false,
          "choices": [
            "first-ipv4",
            "first-ipv6",
            "last-ipv4",
            "last-ipv6",
            "zero"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "if"
          ],
          "description": "Specify interface for the rule.  The direction (in or out) used for the interface depends on the value of I(direction).  See I(interface_in) and I(interface_out) for routed rules that needs to supply both an input and output interface.  Mutually exclusive with I(interface_in) and I(interface_out).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface_in": {
          "aliases": [
            "if_in"
          ],
          "description": "Specify input interface for the rule.  This is mutually exclusive with I(direction) and I(interface).  However, it is compatible with I(interface_out) for routed rules.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "interface_out": {
          "aliases": [
            "if_out"
          ],
          "description": "Specify output interface for the rule.  This is mutually exclusive with I(direction) and I(interface).  However, it is compatible with I(interface_in) for routed rules.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "log": {
          "aliases": [],
          "description": "Log new connections matched to this rule",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "logging": {
          "aliases": [],
          "description": "Toggles logging. Logged packets use the LOG_KERN syslog facility.",
          "type": "str",
          "required": false,
          "choices": [
            "on",
            "off",
            "low",
            "medium",
            "high",
            "full"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "app"
          ],
          "description": "Use profile located in C(/etc/ufw/applications.d).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proto": {
          "aliases": [
            "protocol"
          ],
          "description": "TCP/IP protocol.",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "tcp",
            "udp",
            "ipv6",
            "esp",
            "ah",
            "gre",
            "igmp"
          ],
          "suboptions": {}
        },
        "route": {
          "aliases": [],
          "description": "Apply the rule to routed/forwarded packets.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Add firewall rule",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "deny",
            "limit",
            "reject"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(enabled) reloads firewall and enables firewall on boot.\nC(disabled) unloads firewall and disables firewall on boot.\nC(reloaded) reloads firewall.\nC(reset) disables and resets firewall to installation defaults.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled",
            "reloaded",
            "reset"
          ],
          "suboptions": {}
        },
        "to_ip": {
          "aliases": [
            "dest",
            "to"
          ],
          "description": "Destination IP address.",
          "default": "any",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "to_port": {
          "aliases": [
            "port"
          ],
          "description": "Destination port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "C(ufw) package"
      ],
      "short_description": "Manage firewall with UFW"
    },
    "examples": "\n- name: Allow everything and enable UFW\n  community.general.ufw:\n    state: enabled\n    policy: allow\n\n- name: Set logging\n  community.general.ufw:\n    logging: 'on'\n\n# Sometimes it is desirable to let the sender know when traffic is\n# being denied, rather than simply ignoring it. In these cases, use\n# reject instead of deny. In addition, log rejected connections:\n- community.general.ufw:\n    rule: reject\n    port: auth\n    log: yes\n\n# ufw supports connection rate limiting, which is useful for protecting\n# against brute-force login attacks. ufw will deny connections if an IP\n# address has attempted to initiate 6 or more connections in the last\n# 30 seconds. See  http://www.debian-administration.org/articles/187\n# for details. Typical usage is:\n- community.general.ufw:\n    rule: limit\n    port: ssh\n    proto: tcp\n\n# Allow OpenSSH. (Note that as ufw manages its own state, simply removing\n# a rule=allow task can leave those ports exposed. Either use delete=yes\n# or a separate state=reset task)\n- community.general.ufw:\n    rule: allow\n    name: OpenSSH\n\n- name: Delete OpenSSH rule\n  community.general.ufw:\n    rule: allow\n    name: OpenSSH\n    delete: yes\n\n- name: Deny all access to port 53\n  community.general.ufw:\n    rule: deny\n    port: '53'\n\n- name: Allow port range 60000-61000\n  community.general.ufw:\n    rule: allow\n    port: 60000:61000\n    proto: tcp\n\n- name: Allow all access to tcp port 80\n  community.general.ufw:\n    rule: allow\n    port: '80'\n    proto: tcp\n\n- name: Allow all access from RFC1918 networks to this host\n  community.general.ufw:\n    rule: allow\n    src: '{{ item }}'\n  loop:\n    - 10.0.0.0/8\n    - 172.16.0.0/12\n    - 192.168.0.0/16\n\n- name: Deny access to udp port 514 from host 1.2.3.4 and include a comment\n  community.general.ufw:\n    rule: deny\n    proto: udp\n    src: 1.2.3.4\n    port: '514'\n    comment: Block syslog\n\n- name: Allow incoming access to eth0 from 1.2.3.5 port 5469 to 1.2.3.4 port 5469\n  community.general.ufw:\n    rule: allow\n    interface: eth0\n    direction: in\n    proto: udp\n    src: 1.2.3.5\n    from_port: '5469'\n    dest: 1.2.3.4\n    to_port: '5469'\n\n# Note that IPv6 must be enabled in /etc/default/ufw for IPv6 firewalling to work.\n- name: Deny all traffic from the IPv6 2001:db8::/32 to tcp port 25 on this host\n  community.general.ufw:\n    rule: deny\n    proto: tcp\n    src: 2001:db8::/32\n    port: '25'\n\n- name: Deny all IPv6 traffic to tcp port 20 on this host\n  # this should be the first IPv6 rule\n  community.general.ufw:\n    rule: deny\n    proto: tcp\n    port: '20'\n    to_ip: \"::\"\n    insert: 0\n    insert_relative_to: first-ipv6\n\n- name: Deny all IPv4 traffic to tcp port 20 on this host\n  # This should be the third to last IPv4 rule\n  # (insert: -1 addresses the second to last IPv4 rule;\n  #  so the new rule will be inserted before the second\n  #  to last IPv4 rule, and will be come the third to last\n  #  IPv4 rule.)\n  community.general.ufw:\n    rule: deny\n    proto: tcp\n    port: '20'\n    to_ip: \"::\"\n    insert: -1\n    insert_relative_to: last-ipv4\n\n# Can be used to further restrict a global FORWARD policy set to allow\n- name: Deny forwarded/routed traffic from subnet 1.2.3.0/24 to subnet 4.5.6.0/24\n  community.general.ufw:\n    rule: deny\n    route: yes\n    src: 1.2.3.0/24\n    dest: 4.5.6.0/24\n"
  },
  "community.general.uptimerobot": {
    "doc": {
      "description": "This module will let you start and pause Uptime Robot Monitoring",
      "has_action": false,
      "notes": "Support for adding and removing monitors and alert contacts has not yet been implemented.",
      "options": {
        "apikey": {
          "aliases": [],
          "description": "Uptime Robot API key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "monitorid": {
          "aliases": [],
          "description": "ID of the monitor to check.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Define whether or not the monitor should be running or paused.",
          "type": "str",
          "required": true,
          "choices": [
            "started",
            "paused"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "Valid Uptime Robot API Key"
      ],
      "short_description": "Pause and start Uptime Robot monitoring"
    },
    "examples": "\n- name: Pause the monitor with an ID of 12345\n  community.general.uptimerobot:\n    monitorid: 12345\n    apikey: 12345-1234512345\n    state: paused\n\n- name: Start the monitor with an ID of 12345\n  community.general.uptimerobot:\n    monitorid: 12345\n    apikey: 12345-1234512345\n    state: started\n"
  },
  "community.general.urpmi": {
    "doc": {
      "description": "Manages packages with I(urpmi) (such as for Mageia or Mandriva)",
      "has_action": false,
      "options": {
        "force": {
          "aliases": [],
          "description": "Assume \"yes\" is the answer to any question urpmi has to ask. Corresponds to the C(--force) option for I(urpmi).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "package",
            "pkg"
          ],
          "description": "A list of package names to install, upgrade or remove.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "no_recommends": {
          "aliases": [
            "no-recommends"
          ],
          "description": "Corresponds to the C(--no-recommends) option for I(urpmi).\nAlias C(no-recommends) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "root": {
          "aliases": [
            "installroot"
          ],
          "description": "Specifies an alternative install root, relative to which all packages will be installed. Corresponds to the C(--root) option for I(urpmi).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates the desired package state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "installed",
            "removed"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [
            "update-cache"
          ],
          "description": "Update the package database first C(urpmi.update -a).\nAlias C(update-cache) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Urpmi manager"
    },
    "examples": "\n- name: Install package foo\n  community.general.urpmi:\n    pkg: foo\n    state: present\n\n- name: Remove package foo\n  community.general.urpmi:\n    pkg: foo\n    state: absent\n\n- name: Remove packages foo and bar\n  community.general.urpmi:\n    pkg: foo,bar\n    state: absent\n\n- name: Update the package database (urpmi.update -a -q) and install bar (bar will be the updated if a newer version exists)\n- community.general.urpmi:\n    name: bar\n    state: present\n    update_cache: yes\n"
  },
  "community.general.utm_aaa_group": {
    "doc": {
      "description": "Create, update or destroy an aaa group object in Sophos UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "adirectory_groups": {
          "aliases": [],
          "description": "List of adirectory group strings.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "adirectory_groups_sids": {
          "aliases": [],
          "description": "Dictionary of group sids.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "backend_match": {
          "aliases": [],
          "description": "The backend for the group.",
          "default": "none",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "adirectory",
            "edirectory",
            "radius",
            "tacacs",
            "ldap"
          ],
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Comment that describes the AAA group.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dynamic": {
          "aliases": [],
          "description": "Group type. Is static if none is selected.",
          "default": "none",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "ipsec_dn",
            "directory_groups"
          ],
          "suboptions": {}
        },
        "edirectory_groups": {
          "aliases": [],
          "description": "List of edirectory group strings.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipsec_dn": {
          "aliases": [],
          "description": "The ipsec dn string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ldap_attribute": {
          "aliases": [],
          "description": "The ldap attribute to check against.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ldap_attribute_value": {
          "aliases": [],
          "description": "The ldap attribute value to check against.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "A list of user ref names (aaa/user).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "The network reference name. The objects contains the known ip addresses for the authentication object (network/aaa).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "radius_groups": {
          "aliases": [],
          "description": "A list of radius group strings.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tacacs_groups": {
          "aliases": [],
          "description": "A list of tacacs group strings.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create, update or destroy an aaa group object in Sophos UTM."
    },
    "examples": "\n- name: Create UTM aaa_group\n  community.general.utm_aaa_group:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestAAAGroupEntry\n    backend_match: ldap\n    dynamic: directory_groups\n    ldap_attributes: memberof\n    ldap_attributes_value: \"cn=groupname,ou=Groups,dc=mydomain,dc=com\"\n    network: REF_OBJECT_STRING\n    state: present\n\n- name: Remove UTM aaa_group\n  community.general.utm_aaa_group:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestAAAGroupEntry\n    state: absent\n"
  },
  "community.general.utm_aaa_group_info": {
    "doc": {
      "description": "get info for a reverse_proxy frontend entry in SOPHOS UTM.",
      "has_action": false,
      "options": {
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "get info for reverse_proxy frontend entry in Sophos UTM"
    },
    "examples": "\n- name: Remove UTM aaa_group\n  community.general.utm_aaa_group_info:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestAAAGroupEntry\n"
  },
  "community.general.utm_ca_host_key_cert": {
    "doc": {
      "description": "Create, update or destroy a ca host_key_cert entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "ca": {
          "aliases": [],
          "description": "A reference to an existing utm_ca_signing_ca or utm_ca_verification_ca object.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "certificate": {
          "aliases": [],
          "description": "The certificate in PEM format.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Optional comment string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "encrypted": {
          "aliases": [],
          "description": "Optionally enable encryption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Optional private key in PEM format.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A reference to an existing utm_ca_meta_x509 object.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update or destroy ca host_key_cert entry in Sophos UTM"
    },
    "examples": "\n- name: Create a ca_host_key_cert entry\n  community.general.utm_ca_host_key_cert:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestHostKeyCertEntry\n    ca: REF_ca/signing_ca_OBJECT_STRING\n    meta: REF_ca/meta_x509_OBJECT_STRING\n    certificate: |\n      --- BEGIN CERTIFICATE ---\n      . . .\n       . . .\n      . . .\n      --- END CERTIFICATE ---\n    state: present\n\n- name: Remove a ca_host_key_cert entry\n  community.general.utm_ca_host_key_cert:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestHostKeyCertEntry\n    state: absent\n\n- name: Read a ca_host_key_cert entry\n  community.general.utm_ca_host_key_cert:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestHostKeyCertEntry\n    state: info\n\n"
  },
  "community.general.utm_ca_host_key_cert_info": {
    "doc": {
      "description": "Get info for a ca host_key_cert entry in SOPHOS UTM.",
      "has_action": false,
      "options": {
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Get info for a ca host_key_cert entry in Sophos UTM"
    },
    "examples": "\n- name: Get info for a ca host_key_cert entry\n  community.general.utm_ca_host_key_cert_info:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestHostKeyCertEntry\n"
  },
  "community.general.utm_dns_host": {
    "doc": {
      "description": "Create, update or destroy a dns entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "address": {
          "aliases": [],
          "description": "The IPV4 Address of the entry. Can be left empty for automatic resolving.",
          "default": "0.0.0.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "address6": {
          "aliases": [],
          "description": "The IPV6 Address of the entry. Can be left empty for automatic resolving.",
          "default": "::",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "An optional comment to add to the dns host object",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname for the dns host object",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "The reference name of the interface to use. If not provided the default interface will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "resolved": {
          "aliases": [],
          "description": "whether the hostname's ipv4 address is already resolved or not",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "resolved6": {
          "aliases": [],
          "description": "whether the hostname's ipv6 address is already resolved or not",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "the timeout for the utm to resolve the ip address for the hostname again",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update or destroy dns entry in Sophos UTM"
    },
    "examples": "\n- name: Create UTM dns host entry\n  community.general.utm_dns_host:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestDNSEntry\n    hostname: testentry.some.tld\n    state: present\n\n- name: Remove UTM dns host entry\n  community.general.utm_dns_host:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestDNSEntry\n    state: absent\n"
  },
  "community.general.utm_network_interface_address": {
    "doc": {
      "description": "Create, update or destroy a network/interface_address object in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "address": {
          "aliases": [],
          "description": "The ip4 address of the network/interface_address object.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "address6": {
          "aliases": [],
          "description": "The ip6 address of the network/interface_address object.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "An optional comment to add to the object",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "resolved": {
          "aliases": [],
          "description": "Whether or not the object is resolved",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "resolved6": {
          "aliases": [],
          "description": "Whether or not the object is resolved",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create, update or destroy network/interface_address object"
    },
    "examples": "\n- name: Create a network interface address\n  utm_proxy_backend:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestNetworkInterfaceAddress\n    address: 0.0.0.0\n    state: present\n\n- name: Remove a network interface address\n  network_interface_address:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestNetworkInterfaceAddress\n    address: 0.0.0.0\n    state: absent\n"
  },
  "community.general.utm_network_interface_address_info": {
    "doc": {
      "description": "Get info for a network/interface_address object in SOPHOS UTM.",
      "has_action": false,
      "options": {
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Get info for a network/interface_address object"
    },
    "examples": "\n- name: Get network interface address info\n  utm_proxy_interface_address_info:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestNetworkInterfaceAddress\n"
  },
  "community.general.utm_proxy_auth_profile": {
    "doc": {
      "description": "Create, update or destroy a reverse_proxy auth_profile entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "aaa": {
          "aliases": [],
          "description": "List of references to utm_aaa objects (allowed users or groups)",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "backend_mode": {
          "aliases": [],
          "description": "Specifies if the backend server needs authentication ([Basic|None])",
          "default": "None",
          "type": "str",
          "required": false,
          "choices": [
            "Basic",
            "None"
          ],
          "suboptions": {}
        },
        "backend_strip_basic_auth": {
          "aliases": [],
          "description": "Should the login data be stripped when proxying the request to the backend host",
          "default": "True",
          "type": "bool",
          "required": false,
          "choices": [
            "True",
            "False"
          ],
          "suboptions": {}
        },
        "backend_user_prefix": {
          "aliases": [],
          "description": "Prefix string to prepend to the username for backend authentication",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "backend_user_suffix": {
          "aliases": [],
          "description": "Suffix string to append to the username for backend authentication",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "basic_prompt": {
          "aliases": [],
          "description": "The message in the basic authentication prompt",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Optional comment string",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frontend_cookie": {
          "aliases": [],
          "description": "Frontend cookie name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frontend_cookie_secret": {
          "aliases": [],
          "description": "Frontend cookie secret",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frontend_form": {
          "aliases": [],
          "description": "Frontend authentication form name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frontend_form_template": {
          "aliases": [],
          "description": "Frontend authentication form template",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frontend_login": {
          "aliases": [],
          "description": "Frontend login name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frontend_logout": {
          "aliases": [],
          "description": "Frontend logout name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frontend_mode": {
          "aliases": [],
          "description": "Frontend authentication mode (Form|Basic)",
          "default": "Basic",
          "type": "str",
          "required": false,
          "choices": [
            "Basic",
            "Form"
          ],
          "suboptions": {}
        },
        "frontend_realm": {
          "aliases": [],
          "description": "Frontend authentication realm",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frontend_session_allow_persistency": {
          "aliases": [],
          "description": "Allow session persistency",
          "default": "False",
          "type": "bool",
          "required": false,
          "choices": [
            "True",
            "False"
          ],
          "suboptions": {}
        },
        "frontend_session_lifetime": {
          "aliases": [],
          "description": "session lifetime",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "frontend_session_lifetime_limited": {
          "aliases": [],
          "description": "Specifies if limitation of session lifetime is active",
          "default": "True",
          "type": "bool",
          "required": false,
          "choices": [
            "True",
            "False"
          ],
          "suboptions": {}
        },
        "frontend_session_lifetime_scope": {
          "aliases": [],
          "description": "scope for frontend_session_lifetime (days|hours|minutes)",
          "default": "hours",
          "type": "str",
          "required": false,
          "choices": [
            "days",
            "hours",
            "minutes"
          ],
          "suboptions": {}
        },
        "frontend_session_timeout": {
          "aliases": [],
          "description": "session timeout",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "frontend_session_timeout_enabled": {
          "aliases": [],
          "description": "Specifies if session timeout is active",
          "default": "True",
          "type": "bool",
          "required": false,
          "choices": [
            "True",
            "False"
          ],
          "suboptions": {}
        },
        "frontend_session_timeout_scope": {
          "aliases": [],
          "description": "scope for frontend_session_timeout (days|hours|minutes)",
          "default": "minutes",
          "type": "str",
          "required": false,
          "choices": [
            "days",
            "hours",
            "minutes"
          ],
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "logout_delegation_urls": {
          "aliases": [],
          "description": "List of logout URLs that logouts are delegated to",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "logout_mode": {
          "aliases": [],
          "description": "Mode of logout (None|Delegation)",
          "default": "None",
          "type": "str",
          "required": false,
          "choices": [
            "None",
            "Delegation"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "redirect_to_requested_url": {
          "aliases": [],
          "description": "Should a redirect to the requested URL be made",
          "default": "False",
          "type": "bool",
          "required": false,
          "choices": [
            "True",
            "False"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update or destroy reverse_proxy auth_profile entry in Sophos UTM"
    },
    "examples": "\n- name: Create UTM proxy_auth_profile\n  community.general.utm_proxy_auth_profile:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestAuthProfileEntry\n    aaa: [REF_OBJECT_STRING,REF_ANOTHEROBJECT_STRING]\n    basic_prompt: \"Authentication required: Please login\"\n    frontend_session_lifetime: 1\n    frontend_session_timeout: 1\n    state: present\n\n- name: Remove UTM proxy_auth_profile\n  community.general.utm_proxy_auth_profile:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestAuthProfileEntry\n    state: absent\n\n- name: Read UTM proxy_auth_profile\n  community.general.utm_proxy_auth_profile:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestAuthProfileEntry\n    state: info\n\n"
  },
  "community.general.utm_proxy_exception": {
    "doc": {
      "description": "Create, update or destroy a reverse_proxy exception entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "op": {
          "aliases": [],
          "description": "The operand to be used with the entries of the path parameter",
          "default": "AND",
          "type": "str",
          "required": false,
          "choices": [
            "AND",
            "OR"
          ],
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The paths the exception in the reverse proxy is defined for",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "skip_custom_threats_filters": {
          "aliases": [],
          "description": "A list of threats to be skipped",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "skip_threats_filter_categories": {
          "aliases": [],
          "description": "Define which categories of threats are skipped",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "skipav": {
          "aliases": [],
          "description": "Skip the Antivirus Scanning",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "skipbadclients": {
          "aliases": [],
          "description": "Block clients with bad reputation",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "skipcookie": {
          "aliases": [],
          "description": "Skip the Cookie Signing check",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "skipform": {
          "aliases": [],
          "description": "Enable form hardening",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "skipform_missingtoken": {
          "aliases": [],
          "description": "Enable form hardening with missing tokens",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "skiphtmlrewrite": {
          "aliases": [],
          "description": "Protection against SQL",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "skiptft": {
          "aliases": [],
          "description": "Enable true file type control",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "skipurl": {
          "aliases": [],
          "description": "Enable static URL hardening",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "Define which categories of threats are skipped",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Status of the exception rule set",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create, update or destroy reverse_proxy exception entry in Sophos UTM"
    },
    "examples": "\n- name: Create UTM proxy_exception\n  community.general.utm_proxy_exception:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestExceptionEntry\n    backend: REF_OBJECT_STRING\n    state: present\n\n- name: Remove UTM proxy_exception\n  community.general.utm_proxy_exception:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestExceptionEntry\n    state: absent\n"
  },
  "community.general.utm_proxy_frontend": {
    "doc": {
      "description": "Create, update or destroy a reverse_proxy frontend entry in Sophos UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "add_content_type_header": {
          "aliases": [],
          "description": "Whether to add the content type header or not",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "address": {
          "aliases": [],
          "description": "The reference name of the network/interface_address object.",
          "default": "REF_DefaultInternalAddress",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "allowed_networks": {
          "aliases": [],
          "description": "A list of reference names for the allowed networks.",
          "default": "['REF_NetworkAny']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "certificate": {
          "aliases": [],
          "description": "The reference name of the ca/host_key_cert object.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "An optional comment to add to the object",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disable_compression": {
          "aliases": [],
          "description": "Whether to enable the compression",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "A list of domain names for the frontend object",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "exceptions": {
          "aliases": [],
          "description": "A list of exception ref names (reverse_proxy/exception)",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "htmlrewrite": {
          "aliases": [],
          "description": "Whether to enable html rewrite or not",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "htmlrewrite_cookies": {
          "aliases": [],
          "description": "Whether to enable html rewrite cookie or not",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "implicitredirect": {
          "aliases": [],
          "description": "Whether to enable implicit redirection or not",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lbmethod": {
          "aliases": [],
          "description": "Which loadbalancer method should be used",
          "default": "bybusyness",
          "type": "str",
          "required": false,
          "choices": [
            "bybusyness",
            "bytraffic",
            "byrequests"
          ],
          "suboptions": {}
        },
        "locations": {
          "aliases": [],
          "description": "A list of location ref names (reverse_proxy/location)",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The frontend http port",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "preservehost": {
          "aliases": [],
          "description": "Whether to preserve host header",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "The reference string of the reverse_proxy/profile",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Whether to activate the frontend entry or not",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Which protocol should be used",
          "default": "http",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "xheaders": {
          "aliases": [],
          "description": "Whether to pass the host header or not",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update or destroy reverse_proxy frontend entry in Sophos UTM"
    },
    "examples": "\n- name: Create utm proxy_frontend\n  community.general.utm_proxy_frontend:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestFrontendEntry\n    host: REF_OBJECT_STRING\n    state: present\n\n- name: Remove utm proxy_frontend\n  community.general.utm_proxy_frontend:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestFrontendEntry\n    state: absent\n"
  },
  "community.general.utm_proxy_frontend_info": {
    "doc": {
      "description": "Create, update or destroy a reverse_proxy frontend entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update or destroy reverse_proxy frontend entry in Sophos UTM"
    },
    "examples": "\n- name: Get utm proxy_frontend\n  community.general.utm_proxy_frontend_info:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestBackendEntry\n    host: REF_OBJECT_STRING\n"
  },
  "community.general.utm_proxy_location": {
    "doc": {
      "description": "Create, update or destroy a reverse_proxy location entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "access_control": {
          "aliases": [],
          "description": "whether to activate the access control for the location",
          "default": "0",
          "type": "str",
          "required": false,
          "choices": [
            "0",
            "1"
          ],
          "suboptions": {}
        },
        "allowed_networks": {
          "aliases": [],
          "description": "A list of allowed networks",
          "default": "REF_NetworkAny",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auth_profile": {
          "aliases": [],
          "description": "The reference name of the auth profile",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "backend": {
          "aliases": [],
          "description": "A list of backends that are connected with this location declaration",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "be_path": {
          "aliases": [],
          "description": "The path of the backend",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "The optional comment string",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "denied_networks": {
          "aliases": [],
          "description": "A list of denied network references",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "hot_standby": {
          "aliases": [],
          "description": "Activate hot standby mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path of the location",
          "default": "/",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Whether the location is active or not",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "stickysession_id": {
          "aliases": [],
          "description": "The stickysession id",
          "default": "ROUTEID",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "stickysession_status": {
          "aliases": [],
          "description": "Enable the stickysession",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "websocket_passthrough": {
          "aliases": [],
          "description": "Enable the websocket passthrough",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update or destroy reverse_proxy location entry in Sophos UTM"
    },
    "examples": "\n- name: Create UTM proxy_location\n  utm_proxy_backend:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestLocationEntry\n    backend: REF_OBJECT_STRING\n    state: present\n\n- name: Remove UTM proxy_location\n  utm_proxy_backend:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestLocationEntry\n    state: absent\n"
  },
  "community.general.utm_proxy_location_info": {
    "doc": {
      "description": "Create, update or destroy a reverse_proxy location entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.",
      "has_action": false,
      "options": {
        "headers": {
          "aliases": [],
          "description": "A dictionary of additional headers to be sent to POST and PUT requests.\nIs needed for some modules",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the object. Will be used to identify the entry",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the object.\nC(present) will create or update an object\nC(absent) will delete an object if it was present",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "utm_host": {
          "aliases": [],
          "description": "The REST Endpoint of the Sophos UTM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "utm_port": {
          "aliases": [],
          "description": "The port of the REST interface.",
          "default": "4444",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "utm_protocol": {
          "aliases": [],
          "description": "The protocol of the REST Endpoint.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "utm_token": {
          "aliases": [],
          "description": "The token used to identify at the REST-API. See U(https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en), Chapter 2.4.2.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether the REST interface's ssl certificate should be verified or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update or destroy reverse_proxy location entry in Sophos UTM"
    },
    "examples": "\n- name: Remove UTM proxy_location\n  community.general.utm_proxy_location_info:\n    utm_host: sophos.host.name\n    utm_token: abcdefghijklmno1234\n    name: TestLocationEntry\n"
  },
  "community.general.vdo": {
    "doc": {
      "description": "This module controls the VDO dedupe and compression device.\nVDO, or Virtual Data Optimizer, is a device-mapper target that provides inline block-level deduplication, compression, and thin provisioning capabilities to primary storage.",
      "has_action": false,
      "notes": "In general, the default thread configuration should be used.",
      "options": {
        "ackthreads": {
          "aliases": [],
          "description": "Specifies the number of threads to use for acknowledging completion of requested VDO I/O operations. Valid values are integer values from 1 to 100 (lower numbers are preferable due to overhead).  The default is 1.  Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "activated": {
          "aliases": [],
          "description": "The \"activate\" status for a VDO volume.  If this is set to \"no\", the VDO volume cannot be started, and it will not start on system startup.  However, on initial creation, a VDO volume with \"activated\" set to \"off\" will be running, until stopped.  This is the default behavior of the \"vdo create\" command; it provides the user an opportunity to write a base amount of metadata (filesystem, LVM headers, etc.) to the VDO volume prior to stopping the volume, and leaving it deactivated until ready to use.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "biothreads": {
          "aliases": [],
          "description": "Specifies the number of threads to use for submitting I/O operations to the storage device.  Valid values are integer values from 1 to 100 (lower numbers are preferable due to overhead).  The default is 4. Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "blockmapcachesize": {
          "aliases": [],
          "description": "The amount of memory allocated for caching block map pages, in megabytes (or may be issued with an LVM-style suffix of K, M, G, or T).  The default (and minimum) value is 128M.  The value specifies the size of the cache; there is a 15% memory usage overhead. Each 1.25G of block map covers 1T of logical blocks, therefore a small amount of block map cache memory can cache a significantly large amount of block map data.  Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "compression": {
          "aliases": [],
          "description": "Configures whether compression is enabled.  The default for a created volume is 'enabled'.  Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        },
        "cputhreads": {
          "aliases": [],
          "description": "Specifies the number of threads to use for CPU-intensive work such as hashing or compression.  Valid values are integer values from 1 to 100 (lower numbers are preferable due to overhead).  The default is 2. Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "deduplication": {
          "aliases": [],
          "description": "Configures whether deduplication is enabled.  The default for a created volume is 'enabled'.  Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "The full path of the device to use for VDO storage.\nThis is required if \"state\" is \"present\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "emulate512": {
          "aliases": [],
          "description": "Enables 512-byte emulation mode, allowing drivers or filesystems to access the VDO volume at 512-byte granularity, instead of the default 4096-byte granularity. Default is 'disabled'; only recommended when a driver or filesystem requires 512-byte sector level access to a device.  This option is only available when creating a new volume, and cannot be changed for an existing volume.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "When creating a volume, ignores any existing file system or VDO signature already present in the storage device. When stopping or removing a VDO volume, first unmounts the file system stored on the device if mounted.\nB(Warning:) Since this parameter removes all safety checks it is important to make sure that all parameters provided are accurate and intentional.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.4.0",
          "suboptions": {}
        },
        "growphysical": {
          "aliases": [],
          "description": "Specifies whether to attempt to execute a growphysical operation, if there is enough unused space on the device.  A growphysical operation will be executed if there is at least 64 GB of free space, relative to the previous physical size of the affected VDO volume.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "indexmem": {
          "aliases": [],
          "description": "Specifies the amount of index memory in gigabytes.  The default is 0.25.  The special decimal values 0.25, 0.5, and 0.75 can be used, as can any positive integer. This option is only available when creating a new volume, and cannot be changed for an existing volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "indexmode": {
          "aliases": [],
          "description": "Specifies the index mode of the Albireo index.  The default is 'dense', which has a deduplication window of 1 GB of index memory per 1 TB of incoming data, requiring 10 GB of index data on persistent storage. The 'sparse' mode has a deduplication window of 1 GB of index memory per 10 TB of incoming data, but requires 100 GB of index data on persistent storage.  This option is only available when creating a new volume, and cannot be changed for an existing volume.",
          "type": "str",
          "required": false,
          "choices": [
            "dense",
            "sparse"
          ],
          "suboptions": {}
        },
        "logicalsize": {
          "aliases": [],
          "description": "The logical size of the VDO volume (in megabytes, or LVM suffix format).  If not specified for a new volume, this defaults to the same size as the underlying storage device, which is specified in the 'device' parameter. Existing volumes will maintain their size if the logicalsize parameter is not specified, or is smaller than or identical to the current size.  If the specified size is larger than the current size, a growlogical operation will be performed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "logicalthreads": {
          "aliases": [],
          "description": "Specifies the number of threads across which to subdivide parts of the VDO processing based on logical block addresses.  Valid values are integer values from 1 to 100 (lower numbers are preferable due to overhead). The default is 1.  Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the VDO volume.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "physicalthreads": {
          "aliases": [],
          "description": "Specifies the number of threads across which to subdivide parts of the VDO processing based on physical block addresses.  Valid values are integer values from 1 to 16 (lower numbers are preferable due to overhead). The physical space used by the VDO volume must be larger than (slabsize * physicalthreads).  The default is 1.  Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "readcache": {
          "aliases": [],
          "description": "Enables or disables the read cache.  The default is 'disabled'.  Choosing 'enabled' enables a read cache which may improve performance for workloads of high deduplication, read workloads with a high level of compression, or on hard disk storage.  Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.\nThe read cache feature is available in VDO 6.1 and older.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        },
        "readcachesize": {
          "aliases": [],
          "description": "Specifies the extra VDO device read cache size in megabytes.  This is in addition to a system-defined minimum.  Using a value with a suffix of K, M, G, or T is optional.  The default value is 0.  1.125 MB of memory per bio thread will be used per 1 MB of read cache specified (for example, a VDO volume configured with 4 bio threads will have a read cache memory usage overhead of 4.5 MB per 1 MB of read cache specified). Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.\nThe read cache feature is available in VDO 6.1 and older.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "running": {
          "aliases": [],
          "description": "Whether this VDO volume is running.\nA VDO volume must be activated in order to be started.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "slabsize": {
          "aliases": [],
          "description": "The size of the increment by which the physical size of a VDO volume is grown, in megabytes (or may be issued with an LVM-style suffix of K, M, G, or T).  Must be a power of two between 128M and 32G.  The default is 2G, which supports volumes having a physical size up to 16T. The maximum, 32G, supports a physical size of up to 256T. This option is only available when creating a new volume, and cannot be changed for an existing volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether this VDO volume should be \"present\" or \"absent\". If a \"present\" VDO volume does not exist, it will be created.  If a \"present\" VDO volume already exists, it will be modified, by updating the configuration, which will take effect when the VDO volume is restarted. Not all parameters of an existing VDO volume can be modified; the \"statusparamkeys\" list contains the parameters that can be modified after creation. If an \"absent\" VDO volume does not exist, it will not be removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "writepolicy": {
          "aliases": [],
          "description": "Specifies the write policy of the VDO volume.  The 'sync' mode acknowledges writes only after data is on stable storage.  The 'async' mode acknowledges writes when data has been cached for writing to stable storage.  The default (and highly recommended) 'auto' mode checks the storage device to determine whether it supports flushes.  Devices that support flushes will result in a VDO volume in 'async' mode, while devices that do not support flushes will run in sync mode. Existing volumes will maintain their previously configured setting unless a different value is specified in the playbook.",
          "type": "str",
          "required": false,
          "choices": [
            "async",
            "auto",
            "sync"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "PyYAML",
        "kmod-kvdo",
        "vdo"
      ],
      "short_description": "Module to control VDO"
    },
    "examples": "\n- name: Create 2 TB VDO volume vdo1 on device /dev/md0\n  community.general.vdo:\n    name: vdo1\n    state: present\n    device: /dev/md0\n    logicalsize: 2T\n\n- name: Remove VDO volume vdo1\n  community.general.vdo:\n    name: vdo1\n    state: absent\n"
  },
  "community.general.vertica_configuration": {
    "doc": {
      "description": "Updates Vertica configuration parameters.",
      "has_action": false,
      "notes": "The default authentication assumes that you are either logging in as or sudo'ing to the C(dbadmin) account on the host.\nThis module uses C(pyodbc), a Python ODBC database adapter. You must ensure that C(unixODBC) and C(pyodbc) is installed on the host and properly configured.\nConfiguring C(unixODBC) for Vertica requires C(Driver = /opt/vertica/lib64/libverticaodbc.so) to be added to the C(Vertica) section of either C(/etc/odbcinst.ini) or C($HOME/.odbcinst.ini) and both C(ErrorMessagesPath = /opt/vertica/lib64) and C(DriverManagerEncoding = UTF-16) to be added to the C(Driver) section of either C(/etc/vertica.ini) or C($HOME/.vertica.ini).",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Name of the Vertica cluster.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "Name of the Vertica database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username used to authenticate with.",
          "default": "dbadmin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parameter": {
          "aliases": [
            "name"
          ],
          "description": "Name of the parameter to update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Vertica cluster port to connect to.",
          "default": "5433",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Value of the parameter to be set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "unixODBC",
        "pyodbc"
      ],
      "short_description": "Updates Vertica configuration parameters."
    },
    "examples": "\n- name: Updating load_balance_policy\n  community.general.vertica_configuration: name=failovertostandbyafter value='8 hours'\n"
  },
  "community.general.vertica_info": {
    "doc": {
      "description": "Gathers Vertica database information.\nThis module was called C(vertica_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.vertica_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The default authentication assumes that you are either logging in as or sudo'ing to the C(dbadmin) account on the host.\nThis module uses C(pyodbc), a Python ODBC database adapter. You must ensure that C(unixODBC) and C(pyodbc) are installed on the host and properly configured.\nConfiguring C(unixODBC) for Vertica requires C(Driver = /opt/vertica/lib64/libverticaodbc.so) to be added to the C(Vertica) section of either C(/etc/odbcinst.ini) or C($HOME/.odbcinst.ini) and both C(ErrorMessagesPath = /opt/vertica/lib64) and C(DriverManagerEncoding = UTF-16) to be added to the C(Driver) section of either C(/etc/vertica.ini) or C($HOME/.vertica.ini).",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster running the schema.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "Name of the database running the schema.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username used to authenticate with.",
          "default": "dbadmin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Database port to connect to.",
          "default": "5433",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "unixODBC",
        "pyodbc"
      ],
      "short_description": "Gathers Vertica database facts."
    },
    "examples": "\n- name: Gathering vertica facts\n  community.general.vertica_info: db=db_name\n  register: result\n\n- name: Print schemas\n  ansible.builtin.debug:\n    msg: \"{{ result.vertica_schemas }}\"\n"
  },
  "community.general.vertica_role": {
    "doc": {
      "description": "Adds or removes Vertica database role and, optionally, assign other roles.",
      "has_action": false,
      "notes": "The default authentication assumes that you are either logging in as or sudo'ing to the C(dbadmin) account on the host.\nThis module uses C(pyodbc), a Python ODBC database adapter. You must ensure that C(unixODBC) and C(pyodbc) is installed on the host and properly configured.\nConfiguring C(unixODBC) for Vertica requires C(Driver = /opt/vertica/lib64/libverticaodbc.so) to be added to the C(Vertica) section of either C(/etc/odbcinst.ini) or C($HOME/.odbcinst.ini) and both C(ErrorMessagesPath = /opt/vertica/lib64) and C(DriverManagerEncoding = UTF-16) to be added to the C(Driver) section of either C(/etc/vertica.ini) or C($HOME/.vertica.ini).",
      "options": {
        "assigned_roles": {
          "aliases": [
            "assigned_role"
          ],
          "description": "Comma separated list of roles to assign to the role.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the Vertica cluster.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "Name of the Vertica database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username used to authenticate with.",
          "default": "dbadmin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Vertica cluster port to connect to.",
          "default": "5433",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [
            "name"
          ],
          "description": "Name of the role to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create C(present), drop C(absent) or lock C(locked) a role.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "unixODBC",
        "pyodbc"
      ],
      "short_description": "Adds or removes Vertica database roles and assigns roles to them."
    },
    "examples": "\n- name: Creating a new vertica role\n  community.general.vertica_role: name=role_name db=db_name state=present\n\n- name: Creating a new vertica role with other role assigned\n  community.general.vertica_role: name=role_name assigned_role=other_role_name state=present\n"
  },
  "community.general.vertica_schema": {
    "doc": {
      "description": "Adds or removes Vertica database schema and, optionally, roles with schema access privileges.\nA schema will not be removed until all the objects have been dropped.\nIn such a situation, if the module tries to remove the schema it will fail and only remove roles created for the schema if they have no dependencies.",
      "has_action": false,
      "notes": "The default authentication assumes that you are either logging in as or sudo'ing to the C(dbadmin) account on the host.\nThis module uses C(pyodbc), a Python ODBC database adapter. You must ensure that C(unixODBC) and C(pyodbc) is installed on the host and properly configured.\nConfiguring C(unixODBC) for Vertica requires C(Driver = /opt/vertica/lib64/libverticaodbc.so) to be added to the C(Vertica) section of either C(/etc/odbcinst.ini) or C($HOME/.odbcinst.ini) and both C(ErrorMessagesPath = /opt/vertica/lib64) and C(DriverManagerEncoding = UTF-16) to be added to the C(Driver) section of either C(/etc/vertica.ini) or C($HOME/.vertica.ini).",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Name of the Vertica cluster.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "create_roles": {
          "aliases": [
            "create_role"
          ],
          "description": "Comma separated list of roles to create and grant usage and create access to the schema.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "Name of the Vertica database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username used to authenticate with.",
          "default": "dbadmin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user to set as owner of the schema.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Vertica cluster port to connect to.",
          "default": "5433",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [
            "name"
          ],
          "description": "Name of the schema to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create C(present), or drop C(absent) a schema.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "usage_roles": {
          "aliases": [
            "usage_role"
          ],
          "description": "Comma separated list of roles to create and grant usage access to the schema.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "unixODBC",
        "pyodbc"
      ],
      "short_description": "Adds or removes Vertica database schema and roles."
    },
    "examples": "\n- name: Creating a new vertica schema\n  community.general.vertica_schema: name=schema_name db=db_name state=present\n\n- name: Creating a new schema with specific schema owner\n  community.general.vertica_schema: name=schema_name owner=dbowner db=db_name state=present\n\n- name: Creating a new schema with roles\n  community.general.vertica_schema:\n    name=schema_name\n    create_roles=schema_name_all\n    usage_roles=schema_name_ro,schema_name_rw\n    db=db_name\n    state=present\n"
  },
  "community.general.vertica_user": {
    "doc": {
      "description": "Adds or removes Vertica database user and, optionally, assigns roles.\nA user will not be removed until all the dependencies have been dropped.\nIn such a situation, if the module tries to remove the user it will fail and only remove roles granted to the user.",
      "has_action": false,
      "notes": "The default authentication assumes that you are either logging in as or sudo'ing to the C(dbadmin) account on the host.\nThis module uses C(pyodbc), a Python ODBC database adapter. You must ensure that C(unixODBC) and C(pyodbc) is installed on the host and properly configured.\nConfiguring C(unixODBC) for Vertica requires C(Driver = /opt/vertica/lib64/libverticaodbc.so) to be added to the C(Vertica) section of either C(/etc/odbcinst.ini) or C($HOME/.odbcinst.ini) and both C(ErrorMessagesPath = /opt/vertica/lib64) and C(DriverManagerEncoding = UTF-16) to be added to the C(Driver) section of either C(/etc/vertica.ini) or C($HOME/.vertica.ini).",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Name of the Vertica cluster.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "Name of the Vertica database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expired": {
          "aliases": [],
          "description": "Sets the user's password expiration.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ldap": {
          "aliases": [],
          "description": "Set to true if users are authenticated via LDAP.\nThe user will be created with password expired and set to I($ldap$).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username used to authenticate with.",
          "default": "dbadmin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The user's password encrypted by the MD5 algorithm.\nThe password must be generated with the format C(\"md5\" + md5[password + username]), resulting in a total of 35 characters. An easy way to do this is by querying the Vertica database with select 'md5'||md5('<user_password><user_name>').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Vertica cluster port to connect to.",
          "default": "5433",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "Sets the user's profile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_pool": {
          "aliases": [],
          "description": "Sets the user's resource pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "roles": {
          "aliases": [
            "role"
          ],
          "description": "Comma separated list of roles to assign to the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create C(present), drop C(absent) or lock C(locked) a user.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "locked"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [
            "name"
          ],
          "description": "Name of the user to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "unixODBC",
        "pyodbc"
      ],
      "short_description": "Adds or removes Vertica database users and assigns roles."
    },
    "examples": "\n- name: Creating a new vertica user with password\n  community.general.vertica_user: name=user_name password=md5<encrypted_password> db=db_name state=present\n\n- name: Creating a new vertica user authenticated via ldap with roles assigned\n  community.general.vertica_user:\n    name=user_name\n    ldap=true\n    db=db_name\n    roles=schema_name_ro\n    state=present\n"
  },
  "community.general.vexata_eg": {
    "doc": {
      "description": "Create or delete export groups on a Vexata VX100 array.\nAn export group is a tuple of a volume group, initiator group and port group that allows a set of volumes to be exposed to one or more hosts through specific array ports.",
      "has_action": false,
      "options": {
        "array": {
          "aliases": [],
          "description": "Vexata VX100 array hostname or IPv4 Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ig": {
          "aliases": [],
          "description": "Initiator group name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Export group name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Vexata API user password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pg": {
          "aliases": [],
          "description": "Port group name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Creates export group when present or delete when absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Vexata API user with administrative privileges.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vg": {
          "aliases": [],
          "description": "Volume group name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Vexata VX100 storage array with VXOS >= v3.5.0 on storage array",
        "vexatapi >= 0.0.1",
        "python >= 2.7",
        "VEXATA_USER and VEXATA_PASSWORD environment variables must be set if user and password arguments are not passed to the module directly."
      ],
      "short_description": "Manage export groups on Vexata VX100 storage arrays"
    },
    "examples": "\n- name: Create export group named db_export.\n  community.general.vexata_eg:\n    name: db_export\n    vg: dbvols\n    ig: dbhosts\n    pg: pg1\n    state: present\n    array: vx100_ultra.test.com\n    user: admin\n    password: secret\n\n- name: Delete export group named db_export\n  community.general.vexata_eg:\n    name: db_export\n    state: absent\n    array: vx100_ultra.test.com\n    user: admin\n    password: secret\n"
  },
  "community.general.vexata_volume": {
    "doc": {
      "description": "Create, deletes or extend volumes on a Vexata VX100 array.",
      "has_action": false,
      "options": {
        "array": {
          "aliases": [],
          "description": "Vexata VX100 array hostname or IPv4 Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Volume name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Vexata API user password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Volume size in M, G, T units. M=2^20, G=2^30, T=2^40 bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Creates/Modifies volume when present or removes when absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Vexata API user with administrative privileges.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Vexata VX100 storage array with VXOS >= v3.5.0 on storage array",
        "vexatapi >= 0.0.1",
        "python >= 2.7",
        "VEXATA_USER and VEXATA_PASSWORD environment variables must be set if user and password arguments are not passed to the module directly."
      ],
      "short_description": "Manage volumes on Vexata VX100 storage arrays"
    },
    "examples": "\n- name: Create new 2 TiB volume named foo\n  community.general.vexata_volume:\n    name: foo\n    size: 2T\n    state: present\n    array: vx100_ultra.test.com\n    user: admin\n    password: secret\n\n- name: Expand volume named foo to 4 TiB\n  community.general.vexata_volume:\n    name: foo\n    size: 4T\n    state: present\n    array: vx100_ultra.test.com\n    user: admin\n    password: secret\n\n- name: Delete volume named foo\n  community.general.vexata_volume:\n    name: foo\n    state: absent\n    array: vx100_ultra.test.com\n    user: admin\n    password: secret\n"
  },
  "community.general.vmadm": {
    "doc": {
      "description": "Manage SmartOS virtual machines through vmadm(1M).",
      "has_action": false,
      "options": {
        "archive_on_delete": {
          "aliases": [],
          "description": "When enabled, the zone dataset will be mounted on C(/zones/archive) upon removal.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "autoboot": {
          "aliases": [],
          "description": "Whether or not a VM is booted when the system is rebooted.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "boot": {
          "aliases": [],
          "description": "Set the boot order for KVM VMs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "brand": {
          "aliases": [],
          "description": "Type of virtual machine. The C(bhyve) option was added in community.general 0.2.0.",
          "default": "joyent",
          "type": "str",
          "required": false,
          "choices": [
            "joyent",
            "joyent-minimal",
            "lx",
            "kvm",
            "bhyve"
          ],
          "suboptions": {}
        },
        "cpu_cap": {
          "aliases": [],
          "description": "Sets a limit on the amount of CPU time that can be used by a VM. Use C(0) for no cap.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_shares": {
          "aliases": [],
          "description": "Sets a limit on the number of fair share scheduler (FSS) CPU shares for a VM. This limit is relative to all other VMs on the system.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_type": {
          "aliases": [],
          "description": "Control the type of virtual CPU exposed to KVM VMs.",
          "default": "qemu64",
          "type": "str",
          "required": false,
          "choices": [
            "qemu64",
            "host"
          ],
          "suboptions": {}
        },
        "customer_metadata": {
          "aliases": [],
          "description": "Metadata to be set and associated with this VM, this contain customer modifiable keys.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "delegate_dataset": {
          "aliases": [],
          "description": "Whether to delegate a ZFS dataset to an OS VM.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disk_driver": {
          "aliases": [],
          "description": "Default value for a virtual disk model for KVM guests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disks": {
          "aliases": [],
          "description": "A list of disks to add, valid properties are documented in vmadm(1M).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "dns_domain": {
          "aliases": [],
          "description": "Domain value for C(/etc/hosts).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "docker": {
          "aliases": [],
          "description": "Docker images need this flag enabled along with the I(brand) set to C(lx).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "filesystems": {
          "aliases": [],
          "description": "Mount additional filesystems into an OS VM.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "firewall_enabled": {
          "aliases": [],
          "description": "Enables the firewall, allowing fwadm(1M) rules to be applied.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force a particular action (i.e. stop or delete a VM).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fs_allowed": {
          "aliases": [],
          "description": "Comma separated list of filesystem types this zone is allowed to mount.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Zone/VM hostname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_uuid": {
          "aliases": [],
          "description": "Image UUID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "indestructible_delegated": {
          "aliases": [],
          "description": "Adds an C(@indestructible) snapshot to delegated datasets.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "indestructible_zoneroot": {
          "aliases": [],
          "description": "Adds an C(@indestructible) snapshot to zoneroot.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "internal_metadata": {
          "aliases": [],
          "description": "Metadata to be set and associated with this VM, this contains operator generated keys.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "internal_metadata_namespace": {
          "aliases": [],
          "description": "List of namespaces to be set as I(internal_metadata-only); these namespaces will come from I(internal_metadata) rather than I(customer_metadata).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kernel_version": {
          "aliases": [],
          "description": "Kernel version to emulate for LX VMs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "limit_priv": {
          "aliases": [],
          "description": "Set (comma separated) list of privileges the zone is allowed to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintain_resolvers": {
          "aliases": [],
          "description": "Resolvers in C(/etc/resolv.conf) will be updated when updating the I(resolvers) property.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "max_locked_memory": {
          "aliases": [],
          "description": "Total amount of memory (in MiBs) on the host that can be locked by this VM.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "max_lwps": {
          "aliases": [],
          "description": "Maximum number of lightweight processes this VM is allowed to have running.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "max_physical_memory": {
          "aliases": [],
          "description": "Maximum amount of memory (in MiBs) on the host that the VM is allowed to use.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "max_swap": {
          "aliases": [],
          "description": "Maximum amount of virtual memory (in MiBs) the VM is allowed to use.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mdata_exec_timeout": {
          "aliases": [],
          "description": "Timeout in seconds (or 0 to disable) for the C(svc:/smartdc/mdata:execute) service that runs user-scripts in the zone.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "alias"
          ],
          "description": "Name of the VM. vmadm(1M) uses this as an optional name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nic_driver": {
          "aliases": [],
          "description": "Default value for a virtual NIC model for KVM guests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "A list of nics to add, valid properties are documented in vmadm(1M).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "nowait": {
          "aliases": [],
          "description": "Consider the provisioning complete when the VM first starts, rather than when the VM has rebooted.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "qemu_extra_opts": {
          "aliases": [],
          "description": "Additional qemu cmdline arguments for KVM guests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "qemu_opts": {
          "aliases": [],
          "description": "Additional qemu arguments for KVM guests. This overwrites the default arguments provided by vmadm(1M) and should only be used for debugging.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "quota": {
          "aliases": [],
          "description": "Quota on zone filesystems (in MiBs).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "Amount of virtual RAM for a KVM guest (in MiBs).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resolvers": {
          "aliases": [],
          "description": "List of resolvers to be put into C(/etc/resolv.conf).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "routes": {
          "aliases": [],
          "description": "Dictionary that maps destinations to gateways, these will be set as static routes in the VM.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "spice_opts": {
          "aliases": [],
          "description": "Addition options for SPICE-enabled KVM VMs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "spice_password": {
          "aliases": [],
          "description": "Password required to connect to SPICE. By default no password is set. Please note this can be read from the Global Zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "States for the VM to be in. Please note that C(present), C(stopped) and C(restarted) operate on a VM that is currently provisioned. C(present) means that the VM will be created if it was absent, and that it will be in a running state. C(absent) will shutdown the zone before removing it. C(stopped) means the zone will be created if it doesn't exist already, before shutting it down.",
          "default": "running",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "running",
            "absent",
            "deleted",
            "stopped",
            "created",
            "restarted",
            "rebooted"
          ],
          "suboptions": {}
        },
        "tmpfs": {
          "aliases": [],
          "description": "Amount of memory (in MiBs) that will be available in the VM for the C(/tmp) filesystem.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the VM. Can either be a full UUID or C(*) for all VMs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vcpus": {
          "aliases": [],
          "description": "Number of virtual CPUs for a KVM guest.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vga": {
          "aliases": [],
          "description": "Specify VGA emulation used by KVM VMs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "virtio_txburst": {
          "aliases": [],
          "description": "Number of packets that can be sent in a single flush of the tx queue of virtio NICs.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "virtio_txtimer": {
          "aliases": [],
          "description": "Timeout (in nanoseconds) for the TX timer of virtio NICs.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vnc_password": {
          "aliases": [],
          "description": "Password required to connect to VNC. By default no password is set. Please note this can be read from the Global Zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vnc_port": {
          "aliases": [],
          "description": "TCP port to listen of the VNC server. Or set C(0) for random, or C(-1) to disable.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "zfs_data_compression": {
          "aliases": [],
          "description": "Specifies compression algorithm used for this VMs data dataset. This option only has effect on delegated datasets.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zfs_data_recsize": {
          "aliases": [],
          "description": "Suggested block size (power of 2) for files in the delegated dataset's filesystem.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "zfs_filesystem_limit": {
          "aliases": [],
          "description": "Maximum number of filesystems the VM can have.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "zfs_io_priority": {
          "aliases": [],
          "description": "IO throttle priority value relative to other VMs.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "zfs_root_compression": {
          "aliases": [],
          "description": "Specifies compression algorithm used for this VMs root dataset. This option only has effect on the zoneroot dataset.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zfs_root_recsize": {
          "aliases": [],
          "description": "Suggested block size (power of 2) for files in the zoneroot dataset's filesystem.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "zfs_snapshot_limit": {
          "aliases": [],
          "description": "Number of snapshots the VM can have.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "zpool": {
          "aliases": [],
          "description": "ZFS pool the VM's zone dataset will be created in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6"
      ],
      "short_description": "Manage SmartOS virtual machines and zones."
    },
    "examples": "\n- name: Create SmartOS zone\n  community.general.vmadm:\n    brand: joyent\n    state: present\n    alias: fw_zone\n    image_uuid: 95f265b8-96b2-11e6-9597-972f3af4b6d5\n    firewall_enabled: yes\n    indestructible_zoneroot: yes\n    nics:\n      - nic_tag: admin\n        ip: dhcp\n        primary: true\n    internal_metadata:\n      root_pw: 'secret'\n    quota: 1\n\n- name: Delete a zone\n  community.general.vmadm:\n    alias: test_zone\n    state: deleted\n\n- name: Stop all zones\n  community.general.vmadm:\n    uuid: '*'\n    state: stopped\n"
  },
  "community.general.wakeonlan": {
    "doc": {
      "description": "The C(wakeonlan) module sends magic Wake-on-LAN (WoL) broadcast packets.",
      "has_action": false,
      "notes": "This module sends a magic packet, without knowing whether it worked\nOnly works if the target system was properly configured for Wake-on-LAN (in the BIOS and/or the OS)\nSome BIOSes have a different (configurable) Wake-on-LAN boot order (i.e. PXE first).",
      "options": {
        "broadcast": {
          "aliases": [],
          "description": "Network broadcast address to use for broadcasting magic Wake-on-LAN packet.",
          "default": "255.255.255.255",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "MAC address to send Wake-on-LAN broadcast packet for.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "UDP port to use for magic Wake-on-LAN packet.",
          "default": "7",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send a magic Wake-on-LAN (WoL) broadcast packet"
    },
    "examples": "\n- name: Send a magic Wake-on-LAN packet to 00:00:5E:00:53:66\n  community.general.wakeonlan:\n    mac: '00:00:5E:00:53:66'\n    broadcast: 192.0.2.23\n  delegate_to: localhost\n\n- community.general.wakeonlan:\n    mac: 00:00:5E:00:53:66\n    port: 9\n  delegate_to: localhost\n"
  },
  "community.general.webfaction_app": {
    "doc": {
      "description": "Add or remove applications on a Webfaction host. Further documentation at U(https://github.com/quentinsf/ansible-webfaction).",
      "has_action": false,
      "notes": "You can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API. The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as your host, you may want to add C(serial: 1) to the plays.\n\nSee `the webfaction API <https://docs.webfaction.com/xmlrpc-api/>`_ for more info.",
      "options": {
        "autostart": {
          "aliases": [],
          "description": "Whether the app should restart with an C(autostart.cgi) script",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_info": {
          "aliases": [],
          "description": "Any extra parameters required by the app",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_name": {
          "aliases": [],
          "description": "The webfaction account to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The webfaction password to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "machine": {
          "aliases": [],
          "description": "The machine name to use (optional for accounts with only one machine)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the application",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port_open": {
          "aliases": [],
          "description": "IF the port should be opened",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the application should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of application to create. See the Webfaction docs at U(https://docs.webfaction.com/xmlrpc-api/apps.html) for a list.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Add or remove applications on a Webfaction host"
    },
    "examples": "\n  - name: Create a test app\n    community.general.webfaction_app:\n      name: \"my_wsgi_app1\"\n      state: present\n      type: mod_wsgi35-python27\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n      machine: \"{{webfaction_machine}}\"\n"
  },
  "community.general.webfaction_db": {
    "doc": {
      "description": "Add or remove a database on a Webfaction host. Further documentation at https://github.com/quentinsf/ansible-webfaction.",
      "has_action": false,
      "notes": "You can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API. The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as your host, you may want to add C(serial: 1) to the plays.\n\nSee `the webfaction API <https://docs.webfaction.com/xmlrpc-api/>`_ for more info.",
      "options": {
        "login_name": {
          "aliases": [],
          "description": "The webfaction account to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The webfaction password to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "machine": {
          "aliases": [],
          "description": "The machine name to use (optional for accounts with only one machine)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the database",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password for the new database user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the database should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of database to create.",
          "type": "str",
          "required": true,
          "choices": [
            "mysql",
            "postgresql"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Add or remove a database on Webfaction"
    },
    "examples": "\n  # This will also create a default DB user with the same\n  # name as the database, and the specified password.\n\n  - name: Create a database\n    community.general.webfaction_db:\n      name: \"{{webfaction_user}}_db1\"\n      password: mytestsql\n      type: mysql\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n      machine: \"{{webfaction_machine}}\"\n\n  # Note that, for symmetry's sake, deleting a database using\n  # 'state: absent' will also delete the matching user.\n\n"
  },
  "community.general.webfaction_domain": {
    "doc": {
      "description": "Add or remove domains or subdomains on a Webfaction host. Further documentation at https://github.com/quentinsf/ansible-webfaction.",
      "has_action": false,
      "notes": "If you are I(deleting) domains by using C(state=absent), then note that if you specify subdomains, just those particular subdomains will be deleted. If you don't specify subdomains, the domain will be deleted.\nYou can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API. The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as your host, you may want to add C(serial: 1) to the plays.\n\nSee `the webfaction API <https://docs.webfaction.com/xmlrpc-api/>`_ for more info.",
      "options": {
        "login_name": {
          "aliases": [],
          "description": "The webfaction account to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The webfaction password to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the domain",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the domain should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subdomains": {
          "aliases": [],
          "description": "Any subdomains to create.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Add or remove domains and subdomains on Webfaction"
    },
    "examples": "\n  - name: Create a test domain\n    community.general.webfaction_domain:\n      name: mydomain.com\n      state: present\n      subdomains:\n       - www\n       - blog\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n\n  - name: Delete test domain and any subdomains\n    community.general.webfaction_domain:\n      name: mydomain.com\n      state: absent\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n\n"
  },
  "community.general.webfaction_mailbox": {
    "doc": {
      "description": "Add or remove mailboxes on a Webfaction account. Further documentation at https://github.com/quentinsf/ansible-webfaction.",
      "has_action": false,
      "notes": "You can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API. The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as your host, you may want to add C(serial: 1) to the plays.\n\nSee `the webfaction API <https://docs.webfaction.com/xmlrpc-api/>`_ for more info.",
      "options": {
        "login_name": {
          "aliases": [],
          "description": "The webfaction account to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The webfaction password to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "mailbox_name": {
          "aliases": [],
          "description": "The name of the mailbox",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "mailbox_password": {
          "aliases": [],
          "description": "The password for the mailbox",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the mailbox should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Add or remove mailboxes on Webfaction"
    },
    "examples": "\n  - name: Create a mailbox\n    community.general.webfaction_mailbox:\n      mailbox_name=\"mybox\"\n      mailbox_password=\"myboxpw\"\n      state=present\n      login_name={{webfaction_user}}\n      login_password={{webfaction_passwd}}\n"
  },
  "community.general.webfaction_site": {
    "doc": {
      "description": "Add or remove a website on a Webfaction host.  Further documentation at https://github.com/quentinsf/ansible-webfaction.",
      "has_action": false,
      "notes": "Sadly, you I(do) need to know your webfaction hostname for the C(host) parameter.  But at least, unlike the API, you don't need to know the IP address. You can use a DNS name.\nIf a site of the same name exists in the account but on a different host, the operation will exit.\nYou can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API. The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as your host, you may want to add C(serial: 1) to the plays.\n\nSee `the webfaction API <https://docs.webfaction.com/xmlrpc-api/>`_ for more info.",
      "options": {
        "host": {
          "aliases": [],
          "description": "The webfaction host on which the site should be created.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "https": {
          "aliases": [],
          "description": "Whether or not to use HTTPS",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login_name": {
          "aliases": [],
          "description": "The webfaction account to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The webfaction password to use",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the website",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "site_apps": {
          "aliases": [],
          "description": "A mapping of URLs to apps",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "list",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the website should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subdomains": {
          "aliases": [],
          "description": "A list of subdomains associated with this site.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Add or remove a website on a Webfaction host"
    },
    "examples": "\n  - name: Create website\n    community.general.webfaction_site:\n      name: testsite1\n      state: present\n      host: myhost.webfaction.com\n      subdomains:\n        - 'testsite1.my_domain.org'\n      site_apps:\n        - ['testapp1', '/']\n      https: no\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n"
  },
  "community.general.xattr": {
    "doc": {
      "description": "Manages filesystem user defined extended attributes.\nRequires that extended attributes are enabled on the target filesystem and that the setfattr/getfattr utilities are present.",
      "has_action": false,
      "notes": "As of Ansible 2.3, the I(name) option has been changed to I(path) as default, but I(name) still works as well.",
      "options": {
        "follow": {
          "aliases": [],
          "description": "If C(true), dereferences symlinks and sets/gets attributes on symlink target, otherwise acts on symlink itself.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "The name of a specific Extended attribute key to set/retrieve.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace of the named name/key.",
          "default": "user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "name"
          ],
          "description": "The full path of the file/object to get the facts of.\nBefore 2.3 this option was only usable as I(name).",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "defines which state you want to do. C(read) retrieves the current value for a I(key) (default) C(present) sets I(path) to C(value), default if value is set C(all) dumps all data C(keys) retrieves all keys C(absent) deletes the key",
          "default": "read",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "all",
            "keys",
            "present",
            "read"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value to set the named name/key to, it automatically sets the I(state) to C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage user defined extended attributes"
    },
    "examples": "\n- name: Obtain the extended attributes  of /etc/foo.conf\n  community.general.xattr:\n    path: /etc/foo.conf\n\n- name: Set the key 'user.foo' to value 'bar'\n  community.general.xattr:\n    path: /etc/foo.conf\n    key: foo\n    value: bar\n\n- name: Set the key 'trusted.glusterfs.volume-id' to value '0x817b94343f164f199e5b573b4ea1f914'\n  community.general.xattr:\n    path: /mnt/bricks/brick1\n    namespace: trusted\n    key: glusterfs.volume-id\n    value: \"0x817b94343f164f199e5b573b4ea1f914\"\n\n- name: Remove the key 'user.foo'\n  community.general.xattr:\n    path: /etc/foo.conf\n    key: foo\n    state: absent\n\n- name: Remove the key 'trusted.glusterfs.volume-id'\n  community.general.xattr:\n    path: /mnt/bricks/brick1\n    namespace: trusted\n    key: glusterfs.volume-id\n    state: absent\n"
  },
  "community.general.xbps": {
    "doc": {
      "description": "Manage packages with the XBPS package manager.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [
            "pkg",
            "package"
          ],
          "description": "Name of the package to install, upgrade, or remove.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "recurse": {
          "aliases": [],
          "description": "When removing a package, also remove its dependencies, provided that they are not required by other packages and were not explicitly installed by a user.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the package.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest",
            "installed",
            "removed"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [
            "update-cache"
          ],
          "description": "Whether or not to refresh the master package lists. This can be run as part of a package installation or as a separate step.\nAlias C(update-cache) has been deprecated and will be removed in community.general 5.0.0.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upgrade": {
          "aliases": [],
          "description": "Whether or not to upgrade whole system",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "upgrade_xbps": {
          "aliases": [],
          "description": "Whether or not to upgrade the xbps package when necessary. Before installing new packages, xbps requires the user to update the xbps package itself. Thus when this option is set to C(no), upgrades and installations will fail when xbps is not up to date.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "short_description": "Manage packages with XBPS"
    },
    "examples": "\n- name: Install package foo (automatically updating the xbps package if needed)\n  community.general.xbps: name=foo state=present\n\n- name: Upgrade package foo\n  community.general.xbps: name=foo state=latest update_cache=yes\n\n- name: Remove packages foo and bar\n  community.general.xbps: name=foo,bar state=absent\n\n- name: Recursively remove package foo\n  community.general.xbps: name=foo state=absent recurse=yes\n\n- name: Update package cache\n  community.general.xbps: update_cache=yes\n\n- name: Upgrade packages\n  community.general.xbps: upgrade=yes\n\n- name: Install a package, failing if the xbps package is out of date\n  community.general.xbps:\n    name: foo\n    state: present\n    upgrade_xbps: no\n"
  },
  "community.general.xcc_redfish_command": {
    "doc": {
      "description": "Builds Redfish URIs locally and sends them to remote OOB controllers to perform an action or get information back or update a configuration attribute.\nManages virtual media.\nSupports getting information back via GET method.\nSupports updating a configuration attribute via PATCH method.\nSupports performing an action via POST method.",
      "has_action": false,
      "options": {
        "auth_token": {
          "aliases": [],
          "description": "Security token for authentication with OOB controller",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "baseuri": {
          "aliases": [],
          "description": "Base URI of OOB controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Category to execute on OOB controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "List of commands to execute on OOB controller.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for authentication with OOB controller.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "request_body": {
          "aliases": [],
          "description": "The request body to patch or post.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "resource_id": {
          "aliases": [],
          "description": "The ID of the System, Manager or Chassis to modify.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_uri": {
          "aliases": [],
          "description": "The resource uri to get or patch or post.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for URL requests to OOB controller.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for authentication with OOB controller.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "virtual_media": {
          "aliases": [],
          "description": "The options for VirtualMedia commands.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "image_url": {
              "aliases": [],
              "description": "The URL of the image to insert or eject.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "inserted": {
              "aliases": [],
              "description": "Indicates if the image is treated as inserted on command completion.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "media_types": {
              "aliases": [],
              "description": "The list of media types appropriate for the image.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password for accessing the image URL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "transfer_method": {
              "aliases": [],
              "description": "The transfer method to use with the image.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "transfer_protocol_type": {
              "aliases": [],
              "description": "The network protocol to use with the image.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username for accessing the image URL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "write_protected": {
              "aliases": [],
              "description": "Indicates if the media is treated as write-protected.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Manages Lenovo Out-Of-Band controllers using Redfish APIs",
      "version_added": "2.4.0"
    },
    "examples": "\n  - name: Insert Virtual Media\n    community.general.xcc_redfish_command:\n      category: Manager\n      command: VirtualMediaInsert\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      virtual_media:\n        image_url: \"http://example.com/images/SomeLinux-current.iso\"\n        media_types:\n          - CD\n          - DVD\n      resource_id: \"1\"\n\n  - name: Eject Virtual Media\n    community.general.xcc_redfish_command:\n      category: Manager\n      command: VirtualMediaEject\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      virtual_media:\n        image_url: \"http://example.com/images/SomeLinux-current.iso\"\n      resource_id: \"1\"\n\n  - name: Eject all Virtual Media\n    community.general.xcc_redfish_command:\n      category: Manager\n      command: VirtualMediaEject\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_id: \"1\"\n\n  - name: Get ComputeSystem Oem property SystemStatus via GetResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: GetResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Systems/1\"\n    register: result\n  - ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.data.Oem.Lenovo.SystemStatus }}\"\n\n  - name: Get Oem DNS setting via GetResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: GetResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Managers/1/NetworkProtocol/Oem/Lenovo/DNS\"\n    register: result\n\n  - name: Print fetched information\n    ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.data }}\"\n\n  - name: Get Lenovo FoD key collection resource via GetCollectionResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: GetCollectionResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Managers/1/Oem/Lenovo/FoD/Keys\"\n    register: result\n\n  - name: Print fetched information\n    ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.data_list }}\"\n\n  - name: Update ComputeSystem property AssetTag via PatchResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: PatchResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Systems/1\"\n      request_body:\n        AssetTag: \"new_asset_tag\"\n\n  - name: Perform BootToBIOSSetup action via PostResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: PostResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Systems/1/Actions/Oem/LenovoComputerSystem.BootToBIOSSetup\"\n      request_body: {}\n\n  - name: Perform SecureBoot.ResetKeys action via PostResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: PostResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Systems/1/SecureBoot/Actions/SecureBoot.ResetKeys\"\n      request_body:\n        ResetKeysType: DeleteAllKeys\n\n  - name: Create session\n    community.general.redfish_command:\n      category: Sessions\n      command: CreateSession\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n\n  - name: Update Manager DateTimeLocalOffset property using security token for auth\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: PatchResource\n      baseuri: \"{{ baseuri }}\"\n      auth_token: \"{{ result.session.token }}\"\n      resource_uri: \"/redfish/v1/Managers/1\"\n      request_body:\n        DateTimeLocalOffset: \"+08:00\"\n\n  - name: Delete session using security token created by CreateSesssion above\n    community.general.redfish_command:\n      category: Sessions\n      command: DeleteSession\n      baseuri: \"{{ baseuri }}\"\n      auth_token: \"{{ result.session.token }}\"\n      session_uri: \"{{ result.session.uri }}\"\n"
  },
  "community.general.xenserver_facts": {
    "doc": {
      "description": "Reads data out of XenAPI, can be used instead of multiple xe commands.",
      "has_action": false,
      "options": {},
      "short_description": "get facts reported on xenserver"
    },
    "examples": "\n- name: Gather facts from xenserver\n  community.general.xenserver_facts:\n\n- name: Print running VMs\n  ansible.builtin.debug:\n    msg: \"{{ item }}\"\n  with_items: \"{{ xs_vms.keys() }}\"\n  when: xs_vms[item]['power_state'] == \"Running\"\n\n# Which will print:\n#\n# TASK: [Print running VMs] ***********************************************************\n# skipping: [10.13.0.22] => (item=CentOS 4.7 (32-bit))\n# ok: [10.13.0.22] => (item=Control domain on host: 10.0.13.22) => {\n#     \"item\": \"Control domain on host: 10.0.13.22\",\n#     \"msg\": \"Control domain on host: 10.0.13.22\"\n# }\n"
  },
  "community.general.xenserver_guest": {
    "doc": {
      "description": "This module can be used to create new virtual machines from templates or other virtual machines, modify various virtual machine components like network and disk, rename a virtual machine and remove a virtual machine with associated components.\n",
      "has_action": false,
      "notes": "Minimal supported version of XenServer is 5.6.\nModule was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.\nTo acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub: U(https://raw.githubusercontent.com/xapi-project/xen-api/master/scripts/examples/python/XenAPI/XenAPI.py)\nIf no scheme is specified in I(hostname), module defaults to C(http://) because C(https://) is problematic in most setups. Make sure you are accessing XenServer host in trusted environment or use C(https://) scheme explicitly.\nTo use C(https://) scheme for I(hostname) you have to either import host certificate to your OS certificate store or use I(validate_certs): C(no) which requires XenAPI library from XenServer 7.2 SDK or newer and Python 2.7.9 or newer.\nNetwork configuration inside a guest OS, by using I(networks.type), I(networks.ip), I(networks.gateway) etc. parameters, is supported on XenServer 7.0 or newer for Windows guests by using official XenServer Guest agent support for network configuration. The module will try to detect if such support is available and utilize it, else it will use a custom method of configuration via xenstore. Since XenServer Guest agent only support None and Static types of network configuration, where None means DHCP configured interface, I(networks.type) and I(networks.type6) values C(none) and C(dhcp) have same effect. More info here: U(https://www.citrix.com/community/citrix-developer/citrix-hypervisor-developer/citrix-hypervisor-developing-products/citrix-hypervisor-staticip.html)\nOn platforms without official support for network configuration inside a guest OS, network parameters will be written to xenstore C(vm-data/networks/<vif_device>) key. Parameters can be inspected by using C(xenstore ls) and C(xenstore read) tools on \\*nix guests or trough WMI interface on Windows guests. They can also be found in VM facts C(instance.xenstore_data) key as returned by the module. It is up to the user to implement a boot time scripts or custom agent that will read the parameters from xenstore and configure network with given parameters. Take note that for xenstore data to become available inside a guest, a VM restart is needed hence module will require VM restart if any parameter is changed. This is a limitation of XenAPI and xenstore. Considering these limitations, network configuration trough xenstore is most useful for bootstraping newly deployed VMs, much less for reconfiguring existing ones. More info here: U(https://support.citrix.com/article/CTX226713)",
      "options": {
        "cdrom": {
          "aliases": [],
          "description": "A CD-ROM configuration for the VM.\nAll parameters are case sensitive.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "iso_name": {
              "aliases": [],
              "description": "The file name of an ISO image from one of the XenServer ISO Libraries (implies I(type): C(iso)).\nRequired if I(type) is set to C(iso).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of CD-ROM. With C(none) the CD-ROM device will be present but empty.",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "iso"
              ],
              "suboptions": {}
            }
          }
        },
        "custom_params": {
          "aliases": [],
          "description": "Define a list of custom VM params to set on VM.\nUseful for advanced users familiar with managing VM params trough xe CLI.\nA custom value object takes two fields I(key) and I(value) (see example below).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "key": {
              "aliases": [],
              "description": "VM param name.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "VM param value.",
              "type": "raw",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "disks": {
          "aliases": [
            "disk"
          ],
          "description": "A list of disks to add to VM.\nAll parameters are case sensitive.\nRemoving or detaching existing disks of VM is not supported.\nNew disks are required to have either a I(size) or one of I(size_[tb,gb,mb,kb,b]) parameters specified.\nVM needs to be shut down to reconfigure disk size.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [
                "name_label"
              ],
              "description": "Disk name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name_desc": {
              "aliases": [],
              "description": "Disk description.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size": {
              "aliases": [],
              "description": "Disk size with unit. Unit must be: C(b), C(kb), C(mb), C(gb), C(tb). VM needs to be shut down to reconfigure this parameter.\nIf no unit is specified, size is assumed to be in bytes.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size_b": {
              "aliases": [],
              "description": "Disk size in bytes.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size_gb": {
              "aliases": [],
              "description": "Disk size in gigabytes.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size_kb": {
              "aliases": [],
              "description": "Disk size in kilobytes.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size_mb": {
              "aliases": [],
              "description": "Disk size in megabytes.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size_tb": {
              "aliases": [],
              "description": "Disk size in terabytes.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "sr": {
              "aliases": [],
              "description": "Storage Repository to create disk on. If not specified, will use default SR. Cannot be used for moving disk to other SR.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "sr_uuid": {
              "aliases": [],
              "description": "UUID of a SR to create disk on. Use if SR name is not unique.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder for VM.\nThis parameter is case sensitive.\nExample:\n  folder: /folder1/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Ignore warnings and complete the actions.\nThis parameter is useful for removing VM in running state or reconfiguring VM params that require VM to be shut down.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hardware": {
          "aliases": [],
          "description": "Manage VM's hardware parameters. VM needs to be shut down to reconfigure these parameters.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "memory_mb": {
              "aliases": [],
              "description": "Amount of memory in MB.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "num_cpu_cores_per_socket": {
              "aliases": [],
              "description": "Number of Cores Per Socket. I(num_cpus) has to be a multiple of I(num_cpu_cores_per_socket).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "num_cpus": {
              "aliases": [],
              "description": "Number of CPUs.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "home_server": {
          "aliases": [],
          "description": "Name of a XenServer host that will be a Home Server for the VM.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [
            "host",
            "pool"
          ],
          "description": "The hostname or IP address of the XenServer host or XenServer pool master.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_HOST) will be used instead.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_template": {
          "aliases": [],
          "description": "Convert VM to template.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "linked_clone": {
          "aliases": [],
          "description": "Whether to create a Linked Clone from the template, existing VM or snapshot. If no, will create a full copy.\nThis is equivalent to C(Use storage-level fast disk clone) option in XenCenter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "name_label"
          ],
          "description": "Name of the VM to work with.\nVMs running on XenServer do not necessarily have unique names. The module will fail if multiple VMs with same name are found.\nIn case of multiple VMs with same name, use I(uuid) to uniquely specify VM to manage.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_desc": {
          "aliases": [],
          "description": "VM description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [
            "network"
          ],
          "description": "A list of networks (in the order of the NICs).\nAll parameters are case sensitive.\nName is required for new NICs. Other parameters are optional in all cases.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "gateway": {
              "aliases": [],
              "description": "Static IPv4 gateway.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "gateway6": {
              "aliases": [],
              "description": "Static IPv6 gateway.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ip": {
              "aliases": [],
              "description": "Static IPv4 address (implies I(type): C(static)). Can include prefix in format C(<IPv4 address>/<prefix>) instead of using C(netmask).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ip6": {
              "aliases": [],
              "description": "Static IPv6 address (implies I(type6): C(static)) with prefix in format C(<IPv6 address>/<prefix>).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac": {
              "aliases": [],
              "description": "Customize MAC address of the interface.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [
                "name_label"
              ],
              "description": "Name of a XenServer network to attach the network interface to.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "netmask": {
              "aliases": [],
              "description": "Static IPv4 netmask required for I(ip) if prefix is not specified.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Type of IPv4 assignment. Value C(none) means whatever is default for OS.\nOn some operating systems it could be DHCP configured (e.g. Windows) or unconfigured interface (e.g. Linux).",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "dhcp",
                "static"
              ],
              "suboptions": {}
            },
            "type6": {
              "aliases": [],
              "description": "Type of IPv6 assignment. Value C(none) means whatever is default for OS.",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "dhcp",
                "static"
              ],
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password to use for connecting to XenServer.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify the state VM should be in.\nIf I(state) is set to C(present) and VM exists, ensure the VM configuration conforms to given parameters.\nIf I(state) is set to C(present) and VM does not exist, then VM is deployed with given parameters.\nIf I(state) is set to C(absent) and VM exists, then VM is removed with its associated components.\nIf I(state) is set to C(poweredon) and VM does not exist, then VM is deployed with given parameters and powered on automatically.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "poweredon"
          ],
          "suboptions": {}
        },
        "state_change_timeout": {
          "aliases": [],
          "description": "By default, module will wait indefinitely for VM to accquire an IP address if I(wait_for_ip_address): C(yes).\nIf this parameter is set to positive value, the module will instead wait specified number of seconds for the state change.\nIn case of timeout, module will generate an error message.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [
            "template_src"
          ],
          "description": "Name of a template, an existing VM (must be shut down) or a snapshot that should be used to create VM.\nTemplates/VMs/snapshots on XenServer do not necessarily have unique names. The module will fail if multiple templates with same name are found.\nIn case of multiple templates/VMs/snapshots with same name, use I(template_uuid) to uniquely specify source template.\nIf VM already exists, this setting will be ignored.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template_uuid": {
          "aliases": [],
          "description": "UUID of a template, an existing VM or a snapshot that should be used to create VM.\nIt is required if template name is not unique.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username to use for connecting to XenServer.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_USER) will be used instead.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the VM to manage if known. This is XenServer's unique identifier.\nIt is required if name is not unique.\nPlease note that a supplied UUID will be ignored on VM creation, as XenServer creates the UUID internally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_for_ip_address": {
          "aliases": [],
          "description": "Wait until XenServer detects an IP address for the VM. If I(state) is set to C(absent), this parameter is ignored.\nThis requires XenServer Tools to be preinstalled on the VM to work properly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "XenAPI"
      ],
      "short_description": "Manages virtual machines running on Citrix Hypervisor/XenServer host or pool"
    },
    "examples": "\n- name: Create a VM from a template\n  community.general.xenserver_guest:\n    hostname: \"{{ xenserver_hostname }}\"\n    username: \"{{ xenserver_username }}\"\n    password: \"{{ xenserver_password }}\"\n    validate_certs: no\n    folder: /testvms\n    name: testvm_2\n    state: poweredon\n    template: CentOS 7\n    disks:\n    - size_gb: 10\n      sr: my_sr\n    hardware:\n      num_cpus: 6\n      num_cpu_cores_per_socket: 3\n      memory_mb: 512\n    cdrom:\n      type: iso\n      iso_name: guest-tools.iso\n    networks:\n    - name: VM Network\n      mac: aa:bb:dd:aa:00:14\n    wait_for_ip_address: yes\n  delegate_to: localhost\n  register: deploy\n\n- name: Create a VM template\n  community.general.xenserver_guest:\n    hostname: \"{{ xenserver_hostname }}\"\n    username: \"{{ xenserver_username }}\"\n    password: \"{{ xenserver_password }}\"\n    validate_certs: no\n    folder: /testvms\n    name: testvm_6\n    is_template: yes\n    disk:\n    - size_gb: 10\n      sr: my_sr\n    hardware:\n      memory_mb: 512\n      num_cpus: 1\n  delegate_to: localhost\n  register: deploy\n\n- name: Rename a VM (requires the VM's UUID)\n  community.general.xenserver_guest:\n    hostname: \"{{ xenserver_hostname }}\"\n    username: \"{{ xenserver_username }}\"\n    password: \"{{ xenserver_password }}\"\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n    name: new_name\n    state: present\n  delegate_to: localhost\n\n- name: Remove a VM by UUID\n  community.general.xenserver_guest:\n    hostname: \"{{ xenserver_hostname }}\"\n    username: \"{{ xenserver_username }}\"\n    password: \"{{ xenserver_password }}\"\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n    state: absent\n  delegate_to: localhost\n\n- name: Modify custom params (boot order)\n  community.general.xenserver_guest:\n    hostname: \"{{ xenserver_hostname }}\"\n    username: \"{{ xenserver_username }}\"\n    password: \"{{ xenserver_password }}\"\n    name: testvm_8\n    state: present\n    custom_params:\n    - key: HVM_boot_params\n      value: { \"order\": \"ndc\" }\n  delegate_to: localhost\n\n- name: Customize network parameters\n  community.general.xenserver_guest:\n    hostname: \"{{ xenserver_hostname }}\"\n    username: \"{{ xenserver_username }}\"\n    password: \"{{ xenserver_password }}\"\n    name: testvm_10\n    networks:\n    - name: VM Network\n      ip: 192.168.1.100/24\n      gateway: 192.168.1.1\n    - type: dhcp\n  delegate_to: localhost\n"
  },
  "community.general.xenserver_guest_info": {
    "doc": {
      "description": "This module can be used to gather essential VM facts.\n",
      "has_action": false,
      "notes": "Minimal supported version of XenServer is 5.6.\nModule was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.\nTo acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub: U(https://raw.githubusercontent.com/xapi-project/xen-api/master/scripts/examples/python/XenAPI/XenAPI.py)\nIf no scheme is specified in C(hostname), module defaults to C(http://) because C(https://) is problematic in most setups. Make sure you are accessing XenServer host in trusted environment or use C(https://) scheme explicitly.\nTo use C(https://) scheme for C(hostname) you have to either import host certificate to your OS certificate store or use C(validate_certs: no) which requires XenAPI library from XenServer 7.2 SDK or newer and Python 2.7.9 or newer.\nThis module was called C(xenserver_guest_facts) before Ansible 2.9. The usage did not change.",
      "options": {
        "hostname": {
          "aliases": [
            "host",
            "pool"
          ],
          "description": "The hostname or IP address of the XenServer host or XenServer pool master.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_HOST) will be used instead.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "name_label"
          ],
          "description": "Name of the VM to gather facts from.\nVMs running on XenServer do not necessarily have unique names. The module will fail if multiple VMs with same name are found.\nIn case of multiple VMs with same name, use C(uuid) to uniquely specify VM to manage.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password to use for connecting to XenServer.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username to use for connecting to XenServer.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_USER) will be used instead.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the VM to gather fact of. This is XenServer's unique identifier.\nIt is required if name is not unique.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "XenAPI"
      ],
      "short_description": "Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool"
    },
    "examples": "\n- name: Gather facts\n  community.general.xenserver_guest_info:\n    hostname: \"{{ xenserver_hostname }}\"\n    username: \"{{ xenserver_username }}\"\n    password: \"{{ xenserver_password }}\"\n    name: testvm_11\n  delegate_to: localhost\n  register: facts\n"
  },
  "community.general.xenserver_guest_powerstate": {
    "doc": {
      "description": "This module can be used to power on, power off, restart or suspend virtual machine and gracefully reboot or shutdown guest OS of virtual machine.\n",
      "has_action": false,
      "notes": "Minimal supported version of XenServer is 5.6.\nModule was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.\nTo acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub: U(https://raw.githubusercontent.com/xapi-project/xen-api/master/scripts/examples/python/XenAPI/XenAPI.py)\nIf no scheme is specified in C(hostname), module defaults to C(http://) because C(https://) is problematic in most setups. Make sure you are accessing XenServer host in trusted environment or use C(https://) scheme explicitly.\nTo use C(https://) scheme for C(hostname) you have to either import host certificate to your OS certificate store or use C(validate_certs: no) which requires XenAPI library from XenServer 7.2 SDK or newer and Python 2.7.9 or newer.",
      "options": {
        "hostname": {
          "aliases": [
            "host",
            "pool"
          ],
          "description": "The hostname or IP address of the XenServer host or XenServer pool master.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_HOST) will be used instead.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "name_label"
          ],
          "description": "Name of the VM to manage.\nVMs running on XenServer do not necessarily have unique names. The module will fail if multiple VMs with same name are found.\nIn case of multiple VMs with same name, use C(uuid) to uniquely specify VM to manage.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password to use for connecting to XenServer.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify the state VM should be in.\nIf C(state) is set to value other than C(present), then VM is transitioned into required state and facts are returned.\nIf C(state) is set to C(present), then VM is just checked for existence and facts are returned.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "powered-on",
            "powered-off",
            "restarted",
            "shutdown-guest",
            "reboot-guest",
            "suspended",
            "present"
          ],
          "suboptions": {}
        },
        "state_change_timeout": {
          "aliases": [],
          "description": "By default, module will wait indefinitely for VM to change state or acquire an IP address if C(wait_for_ip_address: yes).\nIf this parameter is set to positive value, the module will instead wait specified number of seconds for the state change.\nIn case of timeout, module will generate an error message.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username to use for connecting to XenServer.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_USER) will be used instead.",
          "default": "root",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the VM to manage if known. This is XenServer's unique identifier.\nIt is required if name is not unique.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(XENSERVER_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_for_ip_address": {
          "aliases": [],
          "description": "Wait until XenServer detects an IP address for the VM.\nThis requires XenServer Tools to be preinstalled on the VM to work properly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "XenAPI"
      ],
      "short_description": "Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool"
    },
    "examples": "\n- name: Power on VM\n  community.general.xenserver_guest_powerstate:\n    hostname: \"{{ xenserver_hostname }}\"\n    username: \"{{ xenserver_username }}\"\n    password: \"{{ xenserver_password }}\"\n    name: testvm_11\n    state: powered-on\n  delegate_to: localhost\n  register: facts\n"
  },
  "community.general.xfconf": {
    "doc": {
      "description": "This module allows for the manipulation of Xfce 4 Configuration with the help of xfconf-query.  Please see the xfconf-query(1) man pages for more details.",
      "has_action": false,
      "options": {
        "channel": {
          "aliases": [],
          "description": "A Xfconf preference channel is a top-level tree key, inside of the Xfconf repository that corresponds to the location for which all application properties/keys are stored. See man xfconf-query(1)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "disable_facts": {
          "aliases": [],
          "description": "The value C(false) is no longer allowed since community.general 4.0.0.\nThis option will be deprecated in a future version, and eventually be removed.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "2.1.0",
          "suboptions": {}
        },
        "force_array": {
          "aliases": [
            "array"
          ],
          "description": "Force array even if only one element",
          "default": "no",
          "type": "bool",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "property": {
          "aliases": [],
          "description": "A Xfce preference key is an element in the Xfconf repository that corresponds to an application preference. See man xfconf-query(1)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The action to take upon the property/value.\nState C(get) is deprecated and will be removed in community.general 5.0.0. Please use the module M(community.general.xfconf_info) instead.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Preference properties typically have simple values such as strings, integers, or lists of strings and integers. This is ignored if the state is \"get\". For array mode, use a list of values. See man xfconf-query(1)",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "value_type": {
          "aliases": [],
          "description": "The type of value being set. This is ignored if the state is \"get\". For array mode, use a list of types.",
          "type": "list",
          "required": false,
          "choices": [
            "int",
            "uint",
            "bool",
            "float",
            "double",
            "string"
          ],
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Edit XFCE4 Configurations"
    },
    "examples": "\n- name: Change the DPI to \"192\"\n  xfconf:\n    channel: \"xsettings\"\n    property: \"/Xft/DPI\"\n    value_type: \"int\"\n    value: \"192\"\n\n- name: Set workspace names (4)\n  xfconf:\n    channel: xfwm4\n    property: /general/workspace_names\n    value_type: string\n    value: ['Main', 'Work1', 'Work2', 'Tmp']\n\n- name: Set workspace names (1)\n  xfconf:\n    channel: xfwm4\n    property: /general/workspace_names\n    value_type: string\n    value: ['Main']\n    force_array: yes\n"
  },
  "community.general.xfconf_info": {
    "doc": {
      "description": "This module allows retrieving Xfce 4 configurations with the help of C(xfconf-query).",
      "has_action": false,
      "notes": "See man xfconf-query(1) for more details.",
      "options": {
        "channel": {
          "aliases": [],
          "description": "A Xfconf preference channel is a top-level tree key, inside of the Xfconf repository that corresponds to the location for which all application properties/keys are stored.\n\nIf not provided, the module will list all available channels.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "property": {
          "aliases": [],
          "description": "A Xfce preference key is an element in the Xfconf repository that corresponds to an application preference.\n\nIf provided, then I(channel) is required.\nIf not provided and a I(channel) is provided, then the module will list all available properties in that I(channel).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Retrieve XFCE4 configurations",
      "version_added": "3.5.0"
    },
    "examples": "\n- name: Get list of all available channels\n  community.general.xfconf_info: {}\n  register: result\n\n- name: Get list of all properties in a specific channel\n  community.general.xfconf_info:\n    channel: xsettings\n  register: result\n\n- name: Retrieve the DPI value\n  community.general.xfconf_info:\n    channel: xsettings\n    property: /Xft/DPI\n  register: result\n\n- name: Get workspace names (4)\n  community.general.xfconf_info:\n    channel: xfwm4\n    property: /general/workspace_names\n  register: result\n"
  },
  "community.general.xfs_quota": {
    "doc": {
      "description": "Configure quotas on XFS filesystems.\nBefore using this module /etc/projects and /etc/projid need to be configured.",
      "has_action": false,
      "options": {
        "bhard": {
          "aliases": [],
          "description": "Hard blocks quota limit.\nThis argument supports human readable sizes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bsoft": {
          "aliases": [],
          "description": "Soft blocks quota limit.\nThis argument supports human readable sizes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ihard": {
          "aliases": [],
          "description": "Hard inodes quota limit.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "isoft": {
          "aliases": [],
          "description": "Soft inodes quota limit.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mountpoint": {
          "aliases": [],
          "description": "The mount point on which to apply the quotas.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the user, group or project to apply the quota to, if other than default.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rtbhard": {
          "aliases": [],
          "description": "Hard realtime blocks quota limit.\nThis argument supports human readable sizes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rtbsoft": {
          "aliases": [],
          "description": "Soft realtime blocks quota limit.\nThis argument supports human readable sizes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to apply the limits or remove them.\nWhen removing limit, they are set to 0, and not quite removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The XFS quota type.",
          "type": "str",
          "required": true,
          "choices": [
            "user",
            "group",
            "project"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "xfsprogs"
      ],
      "short_description": "Manage quotas on XFS filesystems"
    },
    "examples": "\n- name: Set default project soft and hard limit on /opt of 1g\n  community.general.xfs_quota:\n    type: project\n    mountpoint: /opt\n    bsoft: 1g\n    bhard: 1g\n    state: present\n\n- name: Remove the default limits on /opt\n  community.general.xfs_quota:\n    type: project\n    mountpoint: /opt\n    state: absent\n\n- name: Set default soft user inode limits on /home of 1024 inodes and hard of 2048\n  community.general.xfs_quota:\n    type: user\n    mountpoint: /home\n    isoft: 1024\n    ihard: 2048\n\n"
  },
  "community.general.xml": {
    "doc": {
      "description": "A CRUD-like interface to managing bits of XML files.",
      "has_action": false,
      "notes": "Use the C(--check) and C(--diff) options when testing your expressions.\nThe diff output is automatically pretty-printed, so may not reflect the actual file content, only the file structure.\nThis module does not handle complicated xpath expressions, so limit xpath selectors to simple expressions.\nBeware that in case your XML elements are namespaced, you need to use the C(namespaces) parameter, see the examples.\nNamespaces prefix should be used for all children of an element where namespace is defined, unless another namespace is defined for them.",
      "options": {
        "add_children": {
          "aliases": [],
          "description": "Add additional child-element(s) to a selected element for a given C(xpath).\nChild elements must be given in a list and each item may be either a string (eg. C(children=ansible) to add an empty C(<ansible/>) child element), or a hash where the key is an element name and the value is the element value.\nThis parameter requires C(xpath) to be set.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "attribute": {
          "aliases": [],
          "description": "The attribute to select when using parameter C(value).\nThis is a string, not prepended with C(@).",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "content": {
          "aliases": [],
          "description": "Search for a given C(xpath) and get content.\nThis parameter requires C(xpath) to be set.",
          "type": "str",
          "required": false,
          "choices": [
            "attribute",
            "text"
          ],
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "Search for a given C(xpath) and provide the count of any matches.\nThis parameter requires C(xpath) to be set.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "input_type": {
          "aliases": [],
          "description": "Type of input for C(add_children) and C(set_children).",
          "default": "yaml",
          "type": "str",
          "required": false,
          "choices": [
            "xml",
            "yaml"
          ],
          "suboptions": {}
        },
        "insertafter": {
          "aliases": [],
          "description": "Add additional child-element(s) after the last selected element for a given C(xpath).\nChild elements must be given in a list and each item may be either a string (eg. C(children=ansible) to add an empty C(<ansible/>) child element), or a hash where the key is an element name and the value is the element value.\nThis parameter requires C(xpath) to be set.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "insertbefore": {
          "aliases": [],
          "description": "Add additional child-element(s) before the first selected element for a given C(xpath).\nChild elements must be given in a list and each item may be either a string (eg. C(children=ansible) to add an empty C(<ansible/>) child element), or a hash where the key is an element name and the value is the element value.\nThis parameter requires C(xpath) to be set.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "namespaces": {
          "aliases": [],
          "description": "The namespace C(prefix:uri) mapping for the XPath expression.\nNeeds to be a C(dict), not a C(list) of items.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest",
            "file"
          ],
          "description": "Path to the file to operate on.\nThis file must exist ahead of time.\nThis parameter is required, unless C(xmlstring) is given.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "pretty_print": {
          "aliases": [],
          "description": "Pretty print XML output.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "print_match": {
          "aliases": [],
          "description": "Search for a given C(xpath) and print out any matches.\nThis parameter requires C(xpath) to be set.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "set_children": {
          "aliases": [],
          "description": "Set the child-element(s) of a selected element for a given C(xpath).\nRemoves any existing children.\nChild elements must be specified as in C(add_children).\nThis parameter requires C(xpath) to be set.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "state": {
          "aliases": [
            "ensure"
          ],
          "description": "Set or remove an xpath selection (node(s), attribute(s)).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "strip_cdata_tags": {
          "aliases": [],
          "description": "Remove CDATA tags surrounding text values.\nNote that this might break your XML file if text values contain characters that could be interpreted as XML.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Desired state of the selected attribute.\nEither a string, or to unset a value, the Python C(None) keyword (YAML Equivalent, C(null)).\nElements default to no value (but present).\nAttributes default to an empty string.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "xmlstring": {
          "aliases": [],
          "description": "A string containing XML on which to operate.\nThis parameter is required, unless C(path) is given.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "xpath": {
          "aliases": [],
          "description": "A valid XPath expression describing the item(s) you want to manipulate.\nOperates on the document root, C(/), by default.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "lxml >= 2.3.0"
      ],
      "short_description": "Manage bits and pieces of XML files or strings"
    },
    "examples": "\n# Consider the following XML file:\n#\n# <business type=\"bar\">\n#   <name>Tasty Beverage Co.</name>\n#     <beers>\n#       <beer>Rochefort 10</beer>\n#       <beer>St. Bernardus Abbot 12</beer>\n#       <beer>Schlitz</beer>\n#    </beers>\n#   <rating subjective=\"true\">10</rating>\n#   <website>\n#     <mobilefriendly/>\n#     <address>http://tastybeverageco.com</address>\n#   </website>\n# </business>\n\n- name: Remove the 'subjective' attribute of the 'rating' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/rating/@subjective\n    state: absent\n\n- name: Set the rating to '11'\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/rating\n    value: 11\n\n# Retrieve and display the number of nodes\n- name: Get count of 'beers' nodes\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/beers/beer\n    count: yes\n  register: hits\n\n- ansible.builtin.debug:\n    var: hits.count\n\n# Example where parent XML nodes are created automatically\n- name: Add a 'phonenumber' element to the 'business' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/phonenumber\n    value: 555-555-1234\n\n- name: Add several more beers to the 'beers' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/beers\n    add_children:\n    - beer: Old Rasputin\n    - beer: Old Motor Oil\n    - beer: Old Curmudgeon\n\n- name: Add several more beers to the 'beers' element and add them before the 'Rochefort 10' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: '/business/beers/beer[text()=\"Rochefort 10\"]'\n    insertbefore: yes\n    add_children:\n    - beer: Old Rasputin\n    - beer: Old Motor Oil\n    - beer: Old Curmudgeon\n\n# NOTE: The 'state' defaults to 'present' and 'value' defaults to 'null' for elements\n- name: Add a 'validxhtml' element to the 'website' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/validxhtml\n\n- name: Add an empty 'validatedon' attribute to the 'validxhtml' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/validxhtml/@validatedon\n\n- name: Add or modify an attribute, add element if needed\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/validxhtml\n    attribute: validatedon\n    value: 1976-08-05\n\n# How to read an attribute value and access it in Ansible\n- name: Read an element's attribute values\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/validxhtml\n    content: attribute\n  register: xmlresp\n\n- name: Show an attribute value\n  ansible.builtin.debug:\n    var: xmlresp.matches[0].validxhtml.validatedon\n\n- name: Remove all children from the 'website' element (option 1)\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/*\n    state: absent\n\n- name: Remove all children from the 'website' element (option 2)\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website\n    children: []\n\n# In case of namespaces, like in below XML, they have to be explicitly stated.\n#\n# <foo xmlns=\"http://x.test\" xmlns:attr=\"http://z.test\">\n#   <bar>\n#     <baz xmlns=\"http://y.test\" attr:my_namespaced_attribute=\"true\" />\n#   </bar>\n# </foo>\n\n# NOTE: There is the prefix 'x' in front of the 'bar' element, too.\n- name: Set namespaced '/x:foo/x:bar/y:baz/@z:my_namespaced_attribute' to 'false'\n  community.general.xml:\n    path: foo.xml\n    xpath: /x:foo/x:bar/y:baz\n    namespaces:\n      x: http://x.test\n      y: http://y.test\n      z: http://z.test\n    attribute: z:my_namespaced_attribute\n    value: 'false'\n\n- name: Adding building nodes with floor subnodes from a YAML variable\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business\n    add_children:\n      - building:\n          # Attributes\n          name: Scumm bar\n          location: Monkey island\n          # Subnodes\n          _:\n            - floor: Pirate hall\n            - floor: Grog storage\n            - construction_date: \"1990\"  # Only strings are valid\n      - building: Grog factory\n\n# Consider this XML for following example -\n#\n# <config>\n#   <element name=\"test1\">\n#     <text>part to remove</text>\n#   </element>\n#   <element name=\"test2\">\n#     <text>part to keep</text>\n#   </element>\n# </config>\n\n- name: Delete element node based upon attribute\n  community.general.xml:\n    path: bar.xml\n    xpath: /config/element[@name='test1']\n    state: absent\n"
  },
  "community.general.yarn": {
    "doc": {
      "description": "Manage node.js packages with the Yarn package manager (https://yarnpkg.com/)",
      "has_action": false,
      "options": {
        "executable": {
          "aliases": [],
          "description": "The executable location for yarn.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "global": {
          "aliases": [],
          "description": "Install the node.js library globally",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ignore_scripts": {
          "aliases": [],
          "description": "Use the --ignore-scripts flag when installing.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of a node.js library to install\nIf omitted all packages in package.json are installed.\nTo globally install from local node.js library. Prepend \"file:\" to the path of the node.js library.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The base path where Node.js libraries will be installed.\nThis is where the node_modules folder lives.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "production": {
          "aliases": [],
          "description": "Install dependencies in production mode.\nYarn will ignore any dependencies under devDependencies in package.json",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "registry": {
          "aliases": [],
          "description": "The registry to install modules from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Installation state of the named node.js library\nIf absent is selected, a name option must be provided",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The version of the library to be installed.\nMust be in semver format. If \"latest\" is desired, use \"state\" arg instead",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Yarn installed in bin path (typically /usr/local/bin)"
      ],
      "short_description": "Manage node.js packages with Yarn"
    },
    "examples": "\n- name: Install \"imagemin\" node.js package.\n  community.general.yarn:\n    name: imagemin\n    path: /app/location\n\n- name: Install \"imagemin\" node.js package on version 5.3.1\n  community.general.yarn:\n    name: imagemin\n    version: '5.3.1'\n    path: /app/location\n\n- name: Install \"imagemin\" node.js package globally.\n  community.general.yarn:\n    name: imagemin\n    global: yes\n\n- name: Remove the globally-installed package \"imagemin\".\n  community.general.yarn:\n    name: imagemin\n    global: yes\n    state: absent\n\n- name: Install \"imagemin\" node.js package from custom registry.\n  community.general.yarn:\n    name: imagemin\n    registry: 'http://registry.mysite.com'\n\n- name: Install packages based on package.json.\n  community.general.yarn:\n    path: /app/location\n\n- name: Update all packages in package.json to their latest version.\n  community.general.yarn:\n    path: /app/location\n    state: latest\n"
  },
  "community.general.yum_versionlock": {
    "doc": {
      "description": "This module adds installed packages to yum versionlock to prevent the package(s) from being updated.",
      "has_action": false,
      "notes": "Requires yum-plugin-versionlock package on the remote node.\nSupports C(check_mode).",
      "options": {
        "name": {
          "aliases": [],
          "description": "Package name or a list of packages.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If state is C(present), package(s) will be added to yum versionlock list.\nIf state is C(absent), package(s) will be removed from yum versionlock list.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "yum",
        "yum-versionlock"
      ],
      "short_description": "Locks / unlocks a installed package(s) from being updated by yum package manager",
      "version_added": "2.0.0"
    },
    "examples": "\n- name: Prevent Apache / httpd from being updated\n  community.general.yum_versionlock:\n    state: present\n    name: httpd\n\n- name: Prevent multiple packages from being updated\n  community.general.yum_versionlock:\n    state: present\n    name:\n    - httpd\n    - nginx\n    - haproxy\n    - curl\n\n- name: Remove lock from Apache / httpd to be updated again\n  community.general.yum_versionlock:\n    state: absent\n    package: httpd\n"
  },
  "community.general.zfs": {
    "doc": {
      "description": "Manages ZFS file systems, volumes, clones and snapshots",
      "has_action": false,
      "notes": "C(check_mode) is supported, but in certain situations it may report a task as changed that will not be reported as changed when C(check_mode) is disabled. For example, this might occur when the zpool C(altroot) option is set or when a size is written using human-readable notation, such as C(1M) or C(1024K), instead of as an unqualified byte count, such as C(1048576).",
      "options": {
        "extra_zfs_properties": {
          "aliases": [],
          "description": "A dictionary of zfs properties to be set.\nSee the zfs(8) man page for more information.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "File system, snapshot or volume name e.g. C(rpool/myfs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "origin": {
          "aliases": [],
          "description": "Snapshot from which to create a clone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to create (C(present)), or remove (C(absent)) a file system, snapshot or volume. All parents/children will be created/destroyed as needed to reach the desired state.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage zfs"
    },
    "examples": "\n- name: Create a new file system called myfs in pool rpool with the setuid property turned off\n  community.general.zfs:\n    name: rpool/myfs\n    state: present\n    extra_zfs_properties:\n      setuid: off\n\n- name: Create a new volume called myvol in pool rpool.\n  community.general.zfs:\n    name: rpool/myvol\n    state: present\n    extra_zfs_properties:\n      volsize: 10M\n\n- name: Create a snapshot of rpool/myfs file system.\n  community.general.zfs:\n    name: rpool/myfs@mysnapshot\n    state: present\n\n- name: Create a new file system called myfs2 with snapdir enabled\n  community.general.zfs:\n    name: rpool/myfs2\n    state: present\n    extra_zfs_properties:\n      snapdir: enabled\n\n- name: Create a new file system by cloning a snapshot\n  community.general.zfs:\n    name: rpool/cloned_fs\n    state: present\n    origin: rpool/myfs@mysnapshot\n\n- name: Destroy a filesystem\n  community.general.zfs:\n    name: rpool/myfs\n    state: absent\n"
  },
  "community.general.zfs_delegate_admin": {
    "doc": {
      "description": "Manages ZFS file system delegated administration permissions, which allow unprivileged users to perform ZFS operations normally restricted to the superuser.\nSee the C(zfs allow) section of C(zfs(1M)) for detailed explanations of options.\nThis module attempts to adhere to the behavior of the command line tool as much as possible.",
      "has_action": false,
      "options": {
        "descendents": {
          "aliases": [],
          "description": "Apply permissions to C(name)'s descendents (C(zfs allow -d)).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "everyone": {
          "aliases": [],
          "description": "Apply permissions to everyone.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "List of groups to whom permission(s) should be granted.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "local": {
          "aliases": [],
          "description": "Apply permissions to C(name) locally (C(zfs allow -l)).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "File system or volume name e.g. C(rpool/myfs).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "permissions": {
          "aliases": [],
          "description": "The list of permission(s) to delegate (required if C(state) is C(present)).\nSupported permissions depend on the ZFS version in use. See for example U(https://openzfs.github.io/openzfs-docs/man/8/zfs-allow.8.html) for OpenZFS.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "recursive": {
          "aliases": [],
          "description": "Unallow permissions recursively (ignored when C(state) is C(present)).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to allow (C(present)), or unallow (C(absent)) a permission.\nWhen set to C(present), at least one \"entity\" param of I(users), I(groups), or I(everyone) are required.\nWhen set to C(absent), removes permissions from the specified entities, or removes all permissions if no entity params are specified.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "users": {
          "aliases": [],
          "description": "List of users to whom permission(s) should be granted.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "A ZFS/OpenZFS implementation that supports delegation with `zfs allow`, including: Solaris >= 10, illumos (all versions), FreeBSD >= 8.0R, ZFS on Linux >= 0.7.0."
      ],
      "short_description": "Manage ZFS delegated administration (user admin privileges)"
    },
    "examples": "\n- name: Grant `zfs allow` and `unallow` permission to the `adm` user with the default local+descendents scope\n  community.general.zfs_delegate_admin:\n    name: rpool/myfs\n    users: adm\n    permissions: allow,unallow\n\n- name: Grant `zfs send` to everyone, plus the group `backup`\n  community.general.zfs_delegate_admin:\n    name: rpool/myvol\n    groups: backup\n    everyone: yes\n    permissions: send\n\n- name: Grant `zfs send,receive` to users `foo` and `bar` with local scope only\n  community.general.zfs_delegate_admin:\n    name: rpool/myfs\n    users: foo,bar\n    permissions: send,receive\n    local: yes\n\n- name: Revoke all permissions from everyone (permissions specifically assigned to users and groups remain)\n  community.general.zfs_delegate_admin:\n    name: rpool/myfs\n    everyone: yes\n    state: absent\n"
  },
  "community.general.zfs_facts": {
    "doc": {
      "description": "Gather facts from ZFS dataset properties.",
      "has_action": false,
      "options": {
        "depth": {
          "aliases": [],
          "description": "Specifies recursion depth.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "ds",
            "dataset"
          ],
          "description": "ZFS dataset name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parsable": {
          "aliases": [],
          "description": "Specifies if property values should be displayed in machine friendly format.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specifies which dataset properties should be queried in comma-separated format. For more information about dataset properties, check zfs(1M) man page.",
          "default": "all",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "recurse": {
          "aliases": [],
          "description": "Specifies if properties for any children should be recursively displayed.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Specifies which datasets types to display. Multiple values have to be provided in comma-separated form.",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "filesystem",
            "volume",
            "snapshot",
            "bookmark"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Gather facts about ZFS datasets."
    },
    "examples": "\n- name: Gather facts about ZFS dataset rpool/export/home\n  community.general.zfs_facts:\n    dataset: rpool/export/home\n\n- name: Report space usage on ZFS filesystems under data/home\n  community.general.zfs_facts:\n    name: data/home\n    recurse: yes\n    type: filesystem\n\n- ansible.builtin.debug:\n    msg: 'ZFS dataset {{ item.name }} consumes {{ item.used }} of disk space.'\n  with_items: '{{ ansible_zfs_datasets }}'\n"
  },
  "community.general.znode": {
    "doc": {
      "description": "Create, delete, retrieve, and update znodes using ZooKeeper.",
      "has_action": false,
      "options": {
        "hosts": {
          "aliases": [],
          "description": "A list of ZooKeeper servers (format '[server]:[port]').",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The path of the znode.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "op": {
          "aliases": [],
          "description": "An operation to perform. Mutually exclusive with state.",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "wait",
            "list"
          ],
          "suboptions": {}
        },
        "recursive": {
          "aliases": [],
          "description": "Recursively delete node and all its children.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state to enforce. Mutually exclusive with op.",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time to wait for a node to appear.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value assigned to the znode.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "kazoo >= 2.1",
        "python >= 2.6"
      ],
      "short_description": "Create, delete, retrieve, and update znodes using ZooKeeper"
    },
    "examples": "\n- name: Creating or updating a znode with a given value\n  community.general.znode:\n    hosts: 'localhost:2181'\n    name: /mypath\n    value: myvalue\n    state: present\n\n- name: Getting the value and stat structure for a znode\n  community.general.znode:\n    hosts: 'localhost:2181'\n    name: /mypath\n    op: get\n\n- name: Listing a particular znode's children\n  community.general.znode:\n    hosts: 'localhost:2181'\n    name: /zookeeper\n    op: list\n\n- name: Waiting 20 seconds for a znode to appear at path /mypath\n  community.general.znode:\n    hosts: 'localhost:2181'\n    name: /mypath\n    op: wait\n    timeout: 20\n\n- name: Deleting a znode at path /mypath\n  community.general.znode:\n    hosts: 'localhost:2181'\n    name: /mypath\n    state: absent\n\n- name: Creating or updating a znode with a given value on a remote Zookeeper\n  community.general.znode:\n    hosts: 'my-zookeeper-node:2181'\n    name: /mypath\n    value: myvalue\n    state: present\n  delegate_to: 127.0.0.1\n"
  },
  "community.general.zpool_facts": {
    "doc": {
      "description": "Gather facts from ZFS pool properties.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [
            "pool",
            "zpool"
          ],
          "description": "ZFS pool name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parsable": {
          "aliases": [],
          "description": "Specifies if property values should be displayed in machine friendly format.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specifies which dataset properties should be queried in comma-separated format. For more information about dataset properties, check zpool(1M) man page.",
          "default": "all",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather facts about ZFS pools."
    },
    "examples": "\n- name: Gather facts about ZFS pool rpool\n  community.general.zpool_facts: pool=rpool\n\n- name: Gather space usage about all imported ZFS pools\n  community.general.zpool_facts: properties='free,size'\n\n- name: Print gathered information\n  ansible.builtin.debug:\n    msg: 'ZFS pool {{ item.name }} has {{ item.free }} free space out of {{ item.size }}.'\n  with_items: '{{ ansible_zfs_pools }}'\n"
  },
  "community.general.zypper": {
    "doc": {
      "description": "Manage packages on SUSE and openSUSE using the zypper and rpm tools.\nAlso supports transactional updates, by running zypper inside C(/sbin/transactional-update --continue --drop-if-no-change --quiet run).",
      "has_action": false,
      "notes": "When used with a `loop:` each package will be processed individually, it is much more efficient to pass the list directly to the `name` option.",
      "options": {
        "allow_vendor_change": {
          "aliases": [],
          "description": "Adds C(--allow_vendor_change) option to I(zypper) dist-upgrade command.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "disable_gpg_check": {
          "aliases": [],
          "description": "Whether to disable to GPG signature checking of the package signature being installed. Has an effect only if state is I(present) or I(latest).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_recommends": {
          "aliases": [],
          "description": "Corresponds to the C(--no-recommends) option for I(zypper). Default behavior (C(yes)) modifies zypper's default behavior; C(no) does install recommended packages.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_args": {
          "aliases": [],
          "description": "Add additional options to C(zypper) command.\nOptions should be supplied in a single line as if given in the command line.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_args_precommand": {
          "aliases": [],
          "description": "Add additional global target options to C(zypper).\nOptions should be supplied in a single line as if given in the command line.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Adds C(--force) option to I(zypper). Allows to downgrade packages and change vendor or architecture.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_resolution": {
          "aliases": [],
          "description": "Adds C(--force-resolution) option to I(zypper). Allows to (un)install packages with conflicting requirements (resolver will choose a solution).",
          "default": "no",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "pkg"
          ],
          "description": "Package name C(name) or package specifier or a list of either.\nCan include a version like C(name=1.0), C(name>3.4) or C(name<=2.7). If a version is given, C(oldpackage) is implied and zypper is allowed to update the package within the version range given.\nYou can also pass a url or a local path to a rpm file.\nWhen using state=latest, this can be '*', which updates all installed packages.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "oldpackage": {
          "aliases": [],
          "description": "Adds C(--oldpackage) option to I(zypper). Allows to downgrade packages with less side-effects than force. This is implied as soon as a version is specified as part of the package name.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "replacefiles": {
          "aliases": [],
          "description": "Adds C(--replacefiles) option to I(zypper) install/update command.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) will make sure the package is installed. C(latest)  will make sure the latest version of the package is installed. C(absent)  will make sure the specified package is not installed. C(dist-upgrade) will make sure the latest version of all installed packages from all enabled repositories is installed.\nWhen using C(dist-upgrade), I(name) should be C('*').",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "latest",
            "absent",
            "dist-upgrade",
            "installed",
            "removed"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of package to be operated on.",
          "default": "package",
          "type": "str",
          "required": false,
          "choices": [
            "package",
            "patch",
            "pattern",
            "product",
            "srcpackage",
            "application"
          ],
          "suboptions": {}
        },
        "update_cache": {
          "aliases": [
            "refresh"
          ],
          "description": "Run the equivalent of C(zypper refresh) before the operation. Disabled in check mode.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "zypper >= 1.0  # included in openSUSE >= 11.1 or SUSE Linux Enterprise Server/Desktop >= 11.0",
        "python-xml",
        "rpm"
      ],
      "short_description": "Manage packages on SUSE and openSUSE"
    },
    "examples": "\n- name: Install nmap\n  community.general.zypper:\n    name: nmap\n    state: present\n\n- name: Install apache2 with recommended packages\n  community.general.zypper:\n    name: apache2\n    state: present\n    disable_recommends: no\n\n- name: Apply a given patch\n  community.general.zypper:\n    name: openSUSE-2016-128\n    state: present\n    type: patch\n\n- name: Remove the nmap package\n  community.general.zypper:\n    name: nmap\n    state: absent\n\n- name: Install the nginx rpm from a remote repo\n  community.general.zypper:\n    name: 'http://nginx.org/packages/sles/12/x86_64/RPMS/nginx-1.8.0-1.sles12.ngx.x86_64.rpm'\n    state: present\n\n- name: Install local rpm file\n  community.general.zypper:\n    name: /tmp/fancy-software.rpm\n    state: present\n\n- name: Update all packages\n  community.general.zypper:\n    name: '*'\n    state: latest\n\n- name: Apply all available patches\n  community.general.zypper:\n    name: '*'\n    state: latest\n    type: patch\n\n- name: Perform a dist-upgrade with additional arguments\n  community.general.zypper:\n    name: '*'\n    state: dist-upgrade\n    allow_vendor_change: true\n    extra_args: '--allow-arch-change'\n\n- name: Perform a installaion of nmap with the install option replacefiles\n  community.general.zypper:\n    name: 'nmap'\n    state: latest\n    replacefiles: true\n\n- name: Refresh repositories and update package openssl\n  community.general.zypper:\n    name: openssl\n    state: present\n    update_cache: yes\n\n- name: \"Install specific version (possible comparisons: <, >, <=, >=, =)\"\n  community.general.zypper:\n    name: 'docker>=1.10'\n    state: present\n\n- name: Wait 20 seconds to acquire the lock before failing\n  community.general.zypper:\n    name: mosh\n    state: present\n  environment:\n    ZYPP_LOCK_TIMEOUT: 20\n"
  },
  "community.general.zypper_repository": {
    "doc": {
      "description": "Add or remove Zypper repositories on SUSE and openSUSE",
      "has_action": false,
      "options": {
        "auto_import_keys": {
          "aliases": [],
          "description": "Automatically import the gpg signing key of the new or changed repository.\nHas an effect only if state is I(present). Has no effect on existing (unchanged) repositories or in combination with I(absent).\nImplies runrefresh.\nOnly works with C(.repo) files if `name` is given explicitly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "autorefresh": {
          "aliases": [
            "refresh"
          ],
          "description": "Enable autorefresh of the repository.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A description of the repository",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disable_gpg_check": {
          "aliases": [],
          "description": "Whether to disable GPG signature checking of all packages. Has an effect only if state is I(present).\nNeeds zypper version >= 1.6.2.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Set repository to enabled (or disabled).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A name for the repository. Not required when adding repofiles.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "overwrite_multiple": {
          "aliases": [],
          "description": "Overwrite multiple repository entries, if repositories with both name and URL already exist.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Set priority of repository. Packages will always be installed from the repository with the smallest priority number.\nNeeds zypper version >= 1.12.25.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "URI of the repository or .repo file. Required when state=present.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "runrefresh": {
          "aliases": [],
          "description": "Refresh the package list of the given repository.\nCan be used with repo=* to refresh all repositories.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "A source string state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "zypper >= 1.0  # included in openSUSE >= 11.1 or SUSE Linux Enterprise Server/Desktop >= 11.0",
        "python-xml"
      ],
      "short_description": "Add and remove Zypper repositories"
    },
    "examples": "\n- name: Add NVIDIA repository for graphics drivers\n  community.general.zypper_repository:\n    name: nvidia-repo\n    repo: 'ftp://download.nvidia.com/opensuse/12.2'\n    state: present\n\n- name: Remove NVIDIA repository\n  community.general.zypper_repository:\n    name: nvidia-repo\n    repo: 'ftp://download.nvidia.com/opensuse/12.2'\n    state: absent\n\n- name: Add python development repository\n  community.general.zypper_repository:\n    repo: 'http://download.opensuse.org/repositories/devel:/languages:/python/SLE_11_SP3/devel:languages:python.repo'\n\n- name: Refresh all repos\n  community.general.zypper_repository:\n    repo: '*'\n    runrefresh: yes\n\n- name: Add a repo and add its gpg key\n  community.general.zypper_repository:\n    repo: 'http://download.opensuse.org/repositories/systemsmanagement/openSUSE_Leap_42.1/'\n    auto_import_keys: yes\n\n- name: Force refresh of a repository\n  community.general.zypper_repository:\n    repo: 'http://my_internal_ci_repo/repo'\n    name: my_ci_repo\n    state: present\n    runrefresh: yes\n"
  }
}