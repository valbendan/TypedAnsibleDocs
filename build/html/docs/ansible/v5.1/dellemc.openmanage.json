{
  "dellemc.openmanage.dellemc_configure_idrac_eventing": {
    "doc": {
      "description": "This module allows to configure the iDRAC eventing related attributes.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "address": {
          "aliases": [],
          "description": "Email address for SNMP Trap.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "alert_number": {
          "aliases": [],
          "description": "Alert number for Email configuration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "authentication": {
          "aliases": [],
          "description": "Simple Mail Transfer Protocol Authentication.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "custom_message": {
          "aliases": [],
          "description": "Custom message for SNMP Trap reference.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destination": {
          "aliases": [],
          "description": "Destination for SNMP Trap.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destination_number": {
          "aliases": [],
          "description": "Destination number for SNMP Trap.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "email_alert_state": {
          "aliases": [],
          "description": "Whether to Enable or Disable Email alert.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "enable_alerts": {
          "aliases": [],
          "description": "Whether to Enable or Disable iDRAC alerts.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for SMTP authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user. This option is mandatory for Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or a local path.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user in the format 'user@domain' or 'domain\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "smtp_ip_address": {
          "aliases": [],
          "description": "SMTP IP address for communication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "smtp_port": {
          "aliases": [],
          "description": "SMTP Port number for access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snmp_trap_state": {
          "aliases": [],
          "description": "Whether to Enable or Disable SNMP alert.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "snmp_v3_username": {
          "aliases": [],
          "description": "SNMP v3 username for SNMP Trap.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for SMTP authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Configures the iDRAC eventing related attributes",
      "version_added": "1.0.0"
    },
    "examples": "\n---\n- name: Configure the iDRAC eventing attributes\n  dellemc.openmanage.dellemc_configure_idrac_eventing:\n       idrac_ip:   \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password:  \"user_password\"\n       share_name: \"192.168.0.1:/share\"\n       share_password:  \"share_user\"\n       share_user: \"share_password\"\n       share_mnt: \"/mnt/share\"\n       destination_number: \"2\"\n       destination: \"1.1.1.1\"\n       snmp_v3_username: \"None\"\n       snmp_trap_state: \"Enabled\"\n       email_alert_state: \"Disabled\"\n       alert_number: \"1\"\n       address: \"alert_email@company.com\"\n       custom_message: \"Custom Message\"\n       enable_alerts: \"Disabled\"\n       authentication: \"Enabled\"\n       smtp_ip_address: \"192.168.0.1\"\n       smtp_port: \"25\"\n       username: \"username\"\n       password: \"password\"\n"
  },
  "dellemc.openmanage.dellemc_configure_idrac_services": {
    "doc": {
      "description": "This module allows to configure the iDRAC services related attributes.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "alert_port": {
          "aliases": [],
          "description": "The iDRAC port number that must be used for SNMP traps. The default value is 162, and the acceptable range is between 1 to 65535.",
          "default": "162",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "community_name": {
          "aliases": [],
          "description": "SNMP community name for iDRAC. It is used by iDRAC to validate SNMP queries received from remote systems requesting SNMP data access.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "discovery_port": {
          "aliases": [],
          "description": "The SNMP agent port on the iDRAC. The default value is 161, and the acceptable range is between 1 to 65535.",
          "default": "161",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "enable_web_server": {
          "aliases": [],
          "description": "Whether to Enable or Disable webserver configuration for iDRAC.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "http_port": {
          "aliases": [],
          "description": "HTTP access port.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "https_port": {
          "aliases": [],
          "description": "HTTPS access port.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ipmi_lan": {
          "aliases": [],
          "description": "Community name set on iDRAC for SNMP settings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "community_name": {
              "aliases": [],
              "description": "This option is used by iDRAC when it sends out SNMP and IPMI traps. The community name is checked by the remote system to which the traps are sent.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user. This option is mandatory for Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or a local path.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user in the format 'user@domain' or 'domain\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snmp_enable": {
          "aliases": [],
          "description": "Whether to Enable or Disable SNMP protocol for iDRAC.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "snmp_protocol": {
          "aliases": [],
          "description": "Type of the SNMP protocol.",
          "type": "str",
          "required": false,
          "choices": [
            "All",
            "SNMPv3"
          ],
          "suboptions": {}
        },
        "ssl_encryption": {
          "aliases": [],
          "description": "Secure Socket Layer encryption for webserver.",
          "type": "str",
          "required": false,
          "choices": [
            "Auto_Negotiate",
            "T_128_Bit_or_higher",
            "T_168_Bit_or_higher",
            "T_256_Bit_or_higher"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tls_protocol": {
          "aliases": [],
          "description": "Transport Layer Security for webserver.",
          "type": "str",
          "required": false,
          "choices": [
            "TLS_1_0_and_Higher",
            "TLS_1_1_and_Higher",
            "TLS_1_2_Only"
          ],
          "suboptions": {}
        },
        "trap_format": {
          "aliases": [],
          "description": "SNMP trap format for iDRAC.",
          "type": "str",
          "required": false,
          "choices": [
            "SNMPv1",
            "SNMPv2",
            "SNMPv3"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Configures the iDRAC services related attributes",
      "version_added": "1.0.0"
    },
    "examples": "\n---\n- name: Configure the iDRAC services attributes\n  dellemc.openmanage.dellemc_configure_idrac_services:\n       idrac_ip:   \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password:  \"user_password\"\n       share_name: \"192.168.0.1:/share\"\n       share_mnt: \"/mnt/share\"\n       enable_web_server: \"Enabled\"\n       http_port: 80\n       https_port: 443\n       ssl_encryption: \"Auto_Negotiate\"\n       tls_protocol: \"TLS_1_2_Only\"\n       timeout: \"1800\"\n       snmp_enable: \"Enabled\"\n       snmp_protocol: \"SNMPv3\"\n       community_name: \"public\"\n       alert_port: 162\n       discovery_port: 161\n       trap_format: \"SNMPv3\"\n       ipmi_lan:\n         community_name: \"public\"\n"
  },
  "dellemc.openmanage.dellemc_get_firmware_inventory": {
    "doc": {
      "description": "Get Firmware Inventory.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Get Firmware Inventory",
      "version_added": "1.0.0"
    },
    "examples": "\n---\n- name: Get Installed Firmware Inventory\n  dellemc.openmanage.dellemc_get_firmware_inventory:\n      idrac_ip:   \"192.168.0.1\"\n      idrac_user: \"user_name\"\n      idrac_password:  \"user_password\"\n"
  },
  "dellemc.openmanage.dellemc_get_system_inventory": {
    "doc": {
      "description": "Get the PowerEdge Server System Inventory.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Get the PowerEdge Server System Inventory",
      "version_added": "1.0.0"
    },
    "examples": "\n---\n- name: Get System Inventory\n  dellemc.openmanage.dellemc_get_system_inventory:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n"
  },
  "dellemc.openmanage.dellemc_idrac_lc_attributes": {
    "doc": {
      "description": "This module is responsible for enabling or disabling of Collect System Inventory on Restart (CSIOR) property for all iDRAC/LC jobs.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "csior": {
          "aliases": [],
          "description": "Whether to Enable or Disable Collect System Inventory on Restart (CSIOR) property for all iDRAC/LC jobs.",
          "default": "Enabled",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user. This option is mandatory for Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or a local path.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user in the format 'user@domain' or 'domain\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Enable or disable Collect System Inventory on Restart (CSIOR) property for all iDRAC/LC jobs",
      "version_added": "1.0.0"
    },
    "examples": "\n---\n- name: Set up iDRAC LC Attributes\n  dellemc.openmanage.dellemc_idrac_lc_attributes:\n       idrac_ip:   \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password:  \"user_password\"\n       share_name: \"192.168.0.1:/share\"\n       share_mnt: \"/mnt/share\"\n       csior: \"Enabled\"\n"
  },
  "dellemc.openmanage.dellemc_idrac_storage_volume": {
    "doc": {
      "description": "This module is responsible for configuring the RAID attributes.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "capacity": {
          "aliases": [],
          "description": "Virtual disk size in GB.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "controller_id": {
          "aliases": [],
          "description": "Fully Qualified Device Descriptor (FQDD) of the storage controller, for example 'RAID.Integrated.1-1'. Controller FQDD is required for C(create) RAID configuration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_cache_policy": {
          "aliases": [],
          "description": "Disk Cache Policy.",
          "default": "Default",
          "type": "str",
          "required": false,
          "choices": [
            "Default",
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "media_type": {
          "aliases": [],
          "description": "Media type.",
          "type": "str",
          "required": false,
          "choices": [
            "HDD",
            "SSD"
          ],
          "suboptions": {}
        },
        "number_dedicated_hot_spare": {
          "aliases": [],
          "description": "Number of Dedicated Hot Spare.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Bus protocol.",
          "type": "str",
          "required": false,
          "choices": [
            "SAS",
            "SATA"
          ],
          "suboptions": {}
        },
        "raid_init_operation": {
          "aliases": [],
          "description": "This option represents initialization configuration operation to be performed on the virtual disk.",
          "type": "str",
          "required": false,
          "choices": [
            "None",
            "Fast"
          ],
          "suboptions": {}
        },
        "raid_reset_config": {
          "aliases": [],
          "description": "This option represents whether a reset config operation needs to be performed on the RAID controller. Reset Config operation deletes all the virtual disks present on the RAID controller.",
          "default": "False",
          "type": "str",
          "required": false,
          "choices": [
            "True",
            "False"
          ],
          "suboptions": {}
        },
        "read_cache_policy": {
          "aliases": [],
          "description": "Read cache policy.",
          "default": "NoReadAhead",
          "type": "str",
          "required": false,
          "choices": [
            "NoReadAhead",
            "ReadAhead",
            "AdaptiveReadAhead"
          ],
          "suboptions": {}
        },
        "span_depth": {
          "aliases": [],
          "description": "Number of spans in the RAID configuration.\nI(span_depth) is required for C(create) and its value depends on I(volume_type).",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "span_length": {
          "aliases": [],
          "description": "Number of disks in a span.\nI(span_length) is required for C(create) and its value depends on I(volume_type).",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(create), performs create volume operation.\nC(delete), performs remove volume operation.\nC(view), returns storage view.",
          "default": "view",
          "type": "str",
          "required": false,
          "choices": [
            "create",
            "delete",
            "view"
          ],
          "suboptions": {}
        },
        "stripe_size": {
          "aliases": [],
          "description": "Stripe size value to be provided in multiples of 64 * 1024.",
          "default": "65536",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "volume_id": {
          "aliases": [],
          "description": "Fully Qualified Device Descriptor (FQDD) of the virtual disk, for example 'Disk.virtual.0:RAID.Slot.1-1'. This option is used to get the virtual disk information.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume_type": {
          "aliases": [],
          "description": "Provide the the required RAID level.",
          "default": "RAID 0",
          "type": "str",
          "required": false,
          "choices": [
            "RAID 0",
            "RAID 1",
            "RAID 5",
            "RAID 6",
            "RAID 10",
            "RAID 50",
            "RAID 60"
          ],
          "suboptions": {}
        },
        "volumes": {
          "aliases": [],
          "description": "A list of virtual disk specific iDRAC attributes. This is applicable for C(create) and C(delete) operations.\nFor C(create) operation, name and drives are applicable options, other volume options can also be specified.\nThe drives is a required option for C(create) operation and accepts either location (list of drive slot) or id (list of drive fqdd).\nFor C(delete) operation, only name option is applicable.\nSee the examples for more details.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "write_cache_policy": {
          "aliases": [],
          "description": "Write cache policy.",
          "default": "WriteThrough",
          "type": "str",
          "required": false,
          "choices": [
            "WriteThrough",
            "WriteBack",
            "WriteBackForce"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Configures the RAID configuration attributes",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Create single volume\n  dellemc.openmanage.dellemc_idrac_storage_volume:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"username\"\n    idrac_password: \"password\"\n    state: \"create\"\n    controller_id: \"RAID.Slot.1-1\"\n    volumes:\n      - drives:\n        location: [5]\n\n- name: Create multiple volume\n  dellemc.openmanage.dellemc_idrac_storage_volume:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"username\"\n    idrac_password: \"password\"\n    raid_reset_config: \"True\"\n    state: \"create\"\n    controller_id: \"RAID.Slot.1-1\"\n    volume_type: \"RAID 1\"\n    span_depth: 1\n    span_length: 2\n    number_dedicated_hot_spare: 1\n    disk_cache_policy: \"Enabled\"\n    write_cache_policy: \"WriteBackForce\"\n    read_cache_policy: \"ReadAhead\"\n    stripe_size: 65536\n    capacity: 100\n    raid_init_operation: \"Fast\"\n    volumes:\n      - name: \"volume_1\"\n        drives:\n          id: [\"Disk.Bay.1:Enclosure.Internal.0-1:RAID.Slot.1-1\", \"Disk.Bay.2:Enclosure.Internal.0-1:RAID.Slot.1-1\"]\n      - name: \"volume_2\"\n        volume_type: \"RAID 5\"\n        span_length: 3\n        span_depth: 1\n        drives:\n           location: [7,3,5]\n        disk_cache_policy: \"Disabled\"\n        write_cache_policy: \"WriteBack\"\n        read_cache_policy: \"NoReadAhead\"\n        stripe_size: 131072\n        capacity: \"200\"\n        raid_init_operation: \"None\"\n\n- name: View all volume details\n  dellemc.openmanage.dellemc_idrac_storage_volume:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"username\"\n    idrac_password: \"password\"\n    state: \"view\"\n\n- name: View specific volume details\n  dellemc.openmanage.dellemc_idrac_storage_volume:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"username\"\n    idrac_password: \"password\"\n    state: \"view\"\n    controller_id: \"RAID.Slot.1-1\"\n    volume_id: \"Disk.Virtual.0:RAID.Slot.1-1\"\n\n- name: Delete single volume\n  dellemc.openmanage.dellemc_idrac_storage_volume:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"username\"\n    idrac_password: \"password\"\n    state: \"delete\"\n    volumes:\n      - name: \"volume_1\"\n\n- name: Delete multiple volume\n  dellemc.openmanage.dellemc_idrac_storage_volume:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"username\"\n    idrac_password: \"password\"\n    state: \"delete\"\n    volumes:\n      - name: \"volume_1\"\n      - name: \"volume_2\"\n"
  },
  "dellemc.openmanage.dellemc_system_lockdown_mode": {
    "doc": {
      "description": "This module is allows to Enable or Disable System lockdown Mode.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module does not support C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "lockdown_mode": {
          "aliases": [],
          "description": "Whether to Enable or Disable system lockdown mode.",
          "type": "str",
          "required": true,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user. This option is mandatory for Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or a local path.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user in the format 'user@domain' or 'domain\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Configures system lockdown mode for iDRAC",
      "version_added": "1.0.0"
    },
    "examples": "\n---\n- name: Check System  Lockdown Mode\n  dellemc.openmanage.dellemc_system_lockdown_mode:\n       idrac_ip:   \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password:  \"user_password\"\n       share_name: \"192.168.0.1:/share\"\n       share_mnt: \"/mnt/share\"\n       lockdown_mode: \"Disabled\"\n"
  },
  "dellemc.openmanage.idrac_bios": {
    "doc": {
      "description": "This module allows to configure the BIOS attributes.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "Dictionary of BIOS attributes and value pair. Attributes should be part of the Redfish Dell BIOS Attribute Registry. Use U(https://I(idrac_ip)/redfish/v1/Systems/System.Embedded.1/Bios) to view the Redfish URI.\nIf deprecated options are provided and the same is repeated in I(attributes) then values in I(attributes) will take precedence.\nI(attributes) is mutually exclusive with I(boot_sources).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "boot_mode": {
          "aliases": [],
          "description": "(deprecated)Sets boot mode to BIOS or UEFI.\nThis option is deprecated, and will be removed in later version. Use I(attributes) for configuring the BIOS attributes.\nI(boot_mode) is mutually exclusive with I(boot_sources).",
          "type": "str",
          "required": false,
          "choices": [
            "Bios",
            "Uefi"
          ],
          "suboptions": {}
        },
        "boot_sequence": {
          "aliases": [],
          "description": "(deprecated)Allows to set the boot sequence in  BIOS boot mode or Secure UEFI boot mode by rearranging the boot entries in Fully Qualified Device Descriptor (FQDD).\nTThis option is deprecated, and will be removed in later version. Use I(attributes) for configuring the BIOS attributes.\nI(boot_sequence) is mutually exclusive with I(boot_sources).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "boot_sources": {
          "aliases": [],
          "description": "List of boot devices to set the boot sources settings.\nI(boot_sources) is mutually exclusive with I(attributes), I(boot_sequence), I(onetime_boot_mode), I(secure_boot_mode), I(nvme_mode), I(boot_mode).",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nvme_mode": {
          "aliases": [],
          "description": "(deprecated)Configures the NVME mode in the iDRAC 9 based PowerEdge Servers.\nThis option is deprecated, and will be removed in later version. Use I(attributes) for configuring the BIOS attributes.\nI(nvme_mode) is mutually exclusive with I(boot_sources).",
          "type": "str",
          "required": false,
          "choices": [
            "NonRaid",
            "Raid"
          ],
          "suboptions": {}
        },
        "onetime_boot_mode": {
          "aliases": [],
          "description": "(deprecated)Configures the one time boot mode setting.\nThis option is deprecated, and will be removed in later version. Use I(attributes) for configuring the BIOS attributes.\nI(onetime_boot_mode) is mutually exclusive with I(boot_sources).",
          "type": "str",
          "required": false,
          "choices": [
            "Disabled",
            "OneTimeBootSeq",
            "OneTimeCustomBootSeqStr",
            "OneTimeCustomHddSeqStr",
            "OneTimeCustomUefiBootSeqStr",
            "OneTimeHddSeq",
            "OneTimeUefiBootSeq"
          ],
          "suboptions": {}
        },
        "secure_boot_mode": {
          "aliases": [],
          "description": "(deprecated)Configures how the BIOS uses the Secure Boot Policy Objects in iDRAC 9 based PowerEdge Servers.\nThis option is deprecated, and will be removed in later version. Use I(attributes) for configuring the BIOS attributes.\nI(secure_boot_mode) is mutually exclusive with I(boot_sources).",
          "type": "str",
          "required": false,
          "choices": [
            "AuditMode",
            "DeployedMode",
            "SetupMode",
            "UserMode"
          ],
          "suboptions": {}
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user. This option is mandatory for network shares.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or a local path.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user name. Use the format 'user@domain' or 'domain\\user' if user is part of a domain. This option is mandatory for CIFS share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Configure the BIOS attributes",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Configure generic attributes of the BIOS\n  dellemc.openmanage.idrac_bios:\n    idrac_ip:   \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password:  \"user_password\"\n    attributes:\n      BootMode : \"Bios\"\n      OneTimeBootMode: \"Enabled\"\n      BootSeqRetry: \"Enabled\"\n\n- name: Configure PXE generic attributes\n  dellemc.openmanage.idrac_bios:\n    idrac_ip:   \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password:  \"user_password\"\n    attributes:\n      PxeDev1EnDis: \"Enabled\"\n      PxeDev1Protocol: \"IPV4\"\n      PxeDev1VlanEnDis: \"Enabled\"\n      PxeDev1VlanId: 1\n      PxeDev1Interface: \"NIC.Embedded.1-1-1\"\n      PxeDev1VlanPriority: 2\n\n- name: Configure boot sources\n  dellemc.openmanage.idrac_bios:\n    idrac_ip:   \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password:  \"user_password\"\n    boot_sources:\n      - Name : \"NIC.Integrated.1-2-3\"\n        Enabled : true\n        Index : 0\n\n- name: Configure multiple boot sources\n  dellemc.openmanage.idrac_bios:\n    idrac_ip:   \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password:  \"user_password\"\n    boot_sources:\n      - Name : \"NIC.Integrated.1-1-1\"\n        Enabled : true\n        Index : 0\n      - Name : \"NIC.Integrated.2-2-2\"\n        Enabled : true\n        Index : 1\n      - Name : \"NIC.Integrated.3-3-3\"\n        Enabled : true\n        Index : 2\n\n- name: Configure boot sources - Enabling\n  dellemc.openmanage.idrac_bios:\n    idrac_ip:   \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password:  \"user_password\"\n    boot_sources:\n      - Name : \"NIC.Integrated.1-1-1\"\n        Enabled : true\n\n- name: Configure boot sources - Index\n  dellemc.openmanage.idrac_bios:\n    idrac_ip:   \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password:  \"user_password\"\n    boot_sources:\n      - Name : \"NIC.Integrated.1-1-1\"\n        Index : 0\n"
  },
  "dellemc.openmanage.idrac_firmware": {
    "doc": {
      "description": "Update the Firmware by connecting to a network share (CIFS, NFS, HTTP, HTTPS, FTP) that contains a catalog of available updates.\nNetwork share should contain a valid repository of Update Packages (DUPs) and a catalog file describing the DUPs.\nAll applicable updates contained in the repository are applied to the system.\nThis feature is available only with iDRAC Enterprise License.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nModule will report success based on the iDRAC firmware update parent job status if there are no individual component jobs present.\nFor server with iDRAC firmware 5.00.00.00 and later, if the repository contains unsupported packages, then the module will return success with a proper message.\nThis module supports C(check_mode).",
      "options": {
        "apply_update": {
          "aliases": [],
          "description": "If I(apply_update) is set to C(True), then the packages are applied.\nIf I(apply_update) is set to C(False), no updates are applied, and a catalog report of packages is generated and returned.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "catalog_file_name": {
          "aliases": [],
          "description": "Catalog file name relative to the I(share_name).",
          "default": "Catalog.xml",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ignore_cert_warning": {
          "aliases": [],
          "description": "Specifies if certificate warnings are ignored when HTTPS share is used. If C(True) option is set, then the certificate warnings are ignored.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_wait": {
          "aliases": [],
          "description": "Whether to wait for job completion or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "reboot": {
          "aliases": [],
          "description": "Provides the option to apply the update packages immediately or in the next reboot.\nIf I(reboot) is set to C(True),  then the packages  are applied immediately.\nIf I(reboot) is set to C(False), then the packages are staged and applied in the next reboot.\nPackages that do not require a reboot are applied immediately irrespective of I (reboot).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user.\nThis option is not applicable for HTTP, HTTPS, and FTP shares.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share path of update repository. CIFS, NFS, HTTP, HTTPS and FTP share types are supported.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user in the format 'user@domain' or 'domain\\\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Firmware update from a repository on a network share (CIFS, NFS, HTTP, HTTPS, FTP)",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Update firmware from repository on a NFS Share\n  dellemc.openmanage.idrac_firmware:\n       idrac_ip: \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password: \"user_password\"\n       share_name: \"192.168.0.0:/share\"\n       reboot: True\n       job_wait: True\n       apply_update: True\n       catalog_file_name: \"Catalog.xml\"\n\n- name: Update firmware from repository on a CIFS Share\n  dellemc.openmanage.idrac_firmware:\n       idrac_ip: \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password: \"user_password\"\n       share_name: \"full_cifs_path\"\n       share_user: \"share_user\"\n       share_password: \"share_password\"\n       reboot: True\n       job_wait: True\n       apply_update: True\n       catalog_file_name: \"Catalog.xml\"\n\n- name: Update firmware from repository on a HTTP\n  dellemc.openmanage.idrac_firmware:\n       idrac_ip: \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password: \"user_password\"\n       share_name: \"http://downloads.dell.com\"\n       reboot: True\n       job_wait: True\n       apply_update: True\n\n- name: Update firmware from repository on a HTTPS\n  dellemc.openmanage.idrac_firmware:\n       idrac_ip: \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password: \"user_password\"\n       share_name: \"https://downloads.dell.com\"\n       reboot: True\n       job_wait: True\n       apply_update: True\n\n- name: Update firmware from repository on a FTP\n  dellemc.openmanage.idrac_firmware:\n       idrac_ip: \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password: \"user_password\"\n       share_name: \"ftp://ftp.dell.com\"\n       reboot: True\n       job_wait: True\n       apply_update: True\n"
  },
  "dellemc.openmanage.idrac_firmware_info": {
    "doc": {
      "description": "Get Firmware Inventory.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Get Firmware Inventory",
      "version_added": "3.0.0"
    },
    "examples": "\n---\n- name: Get Installed Firmware Inventory\n  dellemc.openmanage.idrac_firmware_info:\n      idrac_ip:   \"192.168.0.1\"\n      idrac_user: \"user_name\"\n      idrac_password:  \"user_password\"\n"
  },
  "dellemc.openmanage.idrac_lifecycle_controller_job_status_info": {
    "doc": {
      "description": "This module shows the status of a specific Lifecycle Controller job using its job ID.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "JOB ID in the format \"JID_123456789012\".",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Get the status of a Lifecycle Controller job",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Show status of a Lifecycle Control job\n  dellemc.openmanage.idrac_lifecycle_controller_job_status_info:\n       idrac_ip:  \"192.168.0.1\"\n       idrac_user:  \"user_name\"\n       idrac_password:  \"user_password\"\n       job_id:  \"JID_1234567890\"\n"
  },
  "dellemc.openmanage.idrac_lifecycle_controller_jobs": {
    "doc": {
      "description": "Delete a Lifecycle Controller job using its job ID or delete all jobs.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module does not support C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "Job ID of the specific job to be deleted.\nAll the jobs in the job queue are deleted if this option is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Delete the Lifecycle Controller Jobs",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Delete Lifecycle Controller job queue\n  dellemc.openmanage.idrac_lifecycle_controller_jobs:\n       idrac_ip: \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password: \"user_password\"\n       idrac_port: 443\n\n- name: Delete Lifecycle Controller job using a job ID\n  dellemc.openmanage.idrac_lifecycle_controller_jobs:\n       idrac_ip: \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password: \"user_password\"\n       idrac_port: 443\n       job_id: \"JID_801841929470\"\n"
  },
  "dellemc.openmanage.idrac_lifecycle_controller_logs": {
    "doc": {
      "description": "Export Lifecycle Controller logs to a given network share or local path.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nExporting data to a local share is supported only on iDRAC9-based PowerEdge Servers and later.\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module does not support C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_wait": {
          "aliases": [],
          "description": "Whether to wait for the running job completion or not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or local path.\nCIFS, NFS network share types are supported.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user in the format 'user@domain' or 'domain\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Export Lifecycle Controller logs to a network share or local path.",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Export lifecycle controller logs to NFS share.\n  dellemc.openmanage.idrac_lifecycle_controller_logs:\n    idrac_ip: \"190.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"192.168.0.0:/nfsfileshare\"\n\n- name: Export lifecycle controller logs to CIFS share.\n  dellemc.openmanage.idrac_lifecycle_controller_logs:\n    idrac_ip: \"190.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"\\\\\\\\192.168.0.2\\\\share\"\n    share_user: \"share_user_name\"\n    share_password: \"share_user_pwd\"\n\n- name: Export lifecycle controller logs to LOCAL path.\n  dellemc.openmanage.idrac_lifecycle_controller_logs:\n    idrac_ip: \"190.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"/example/export_lc\"\n"
  },
  "dellemc.openmanage.idrac_lifecycle_controller_status_info": {
    "doc": {
      "description": "This module shows the status of the Lifecycle Controller on a Dell EMC PowerEdge server.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Get the status of the Lifecycle Controller",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Show status of the Lifecycle Controller\n  dellemc.openmanage.idrac_lifecycle_controller_status_info:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n"
  },
  "dellemc.openmanage.idrac_network": {
    "doc": {
      "description": "This module allows to configure iDRAC network settings.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "auto_config": {
          "aliases": [],
          "description": "Allows to enable or disable auto-provisioning to automatically acquire domain name from DHCP.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "auto_detect": {
          "aliases": [],
          "description": "Allows to auto detect the available NIC types used by iDRAC.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "auto_negotiation": {
          "aliases": [],
          "description": "Allows iDRAC to automatically set the duplex mode and network speed.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "dns_from_dhcp": {
          "aliases": [],
          "description": "Allows to enable DHCP to obtain DNS server address.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "dns_idrac_name": {
          "aliases": [],
          "description": "Name of the DNS to register iDRAC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "duplex_mode": {
          "aliases": [],
          "description": "Select the type of data transmission for the NIC.",
          "type": "str",
          "required": false,
          "choices": [
            "Full",
            "Half"
          ],
          "suboptions": {}
        },
        "enable_dhcp": {
          "aliases": [],
          "description": "Allows to enable or disable Dynamic Host Configuration Protocol (DHCP) in iDRAC.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "enable_ipv4": {
          "aliases": [],
          "description": "Allows to enable or disable IPv4 configuration.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "enable_nic": {
          "aliases": [],
          "description": "Allows to enable or disable the Network Interface Controller (NIC) used by iDRAC.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "failover_network": {
          "aliases": [],
          "description": "Select one of the remaining LOMs. If a network fails, the traffic is routed through the failover network.",
          "type": "str",
          "required": false,
          "choices": [
            "ALL",
            "LOM1",
            "LOM2",
            "LOM3",
            "LOM4",
            "T_None"
          ],
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Enter a valid iDRAC static IPv4 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_speed": {
          "aliases": [],
          "description": "Select the network speed for the selected NIC.",
          "type": "str",
          "required": false,
          "choices": [
            "T_10",
            "T_100",
            "T_1000"
          ],
          "suboptions": {}
        },
        "nic_mtu": {
          "aliases": [],
          "description": "Maximum Transmission Unit of the NIC.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nic_selection": {
          "aliases": [],
          "description": "Select one of the available NICs.",
          "type": "str",
          "required": false,
          "choices": [
            "Dedicated",
            "LOM1",
            "LOM2",
            "LOM3",
            "LOM4"
          ],
          "suboptions": {}
        },
        "register_idrac_on_dns": {
          "aliases": [],
          "description": "Registers iDRAC on a Domain Name System (DNS).",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "setup_idrac_nic_vlan": {
          "aliases": [],
          "description": "Allows to configure VLAN on iDRAC.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user. This option is mandatory for network shares.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or a local path.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user name. Use the format 'user@domain' or 'domain\\\\user' if user is part of a domain. This option is mandatory for CIFS share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "static_dns": {
          "aliases": [],
          "description": "Enter the static DNS domain name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "static_dns_1": {
          "aliases": [],
          "description": "Enter the preferred static DNS server IPv4 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "static_dns_2": {
          "aliases": [],
          "description": "Enter the preferred static DNS server IPv4 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "static_gateway": {
          "aliases": [],
          "description": "Enter the static IPv4 gateway address to iDRAC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "static_net_mask": {
          "aliases": [],
          "description": "Enter the static IP subnet mask to iDRAC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "Enter the VLAN ID.  The VLAN ID must be a number from 1 through 4094.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vlan_priority": {
          "aliases": [],
          "description": "Enter the priority for the VLAN ID. The priority value must be a number from 0 through 7.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Configures the iDRAC network attributes",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Configure iDRAC network settings\n  dellemc.openmanage.idrac_network:\n       idrac_ip:   \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password:  \"user_password\"\n       share_name: \"192.168.0.1:/share\"\n       share_password:  \"share_pwd\"\n       share_user: \"share_user\"\n       share_mnt: \"/mnt/share\"\n       register_idrac_on_dns: Enabled\n       dns_idrac_name: None\n       auto_config: None\n       static_dns: None\n       setup_idrac_nic_vlan: Enabled\n       vlan_id: 0\n       vlan_priority: 1\n       enable_nic: Enabled\n       nic_selection: Dedicated\n       failover_network: T_None\n       auto_detect: Disabled\n       auto_negotiation: Enabled\n       network_speed: T_1000\n       duplex_mode: Full\n       nic_mtu: 1500\n       ip_address: \"192.168.0.1\"\n       enable_dhcp: Enabled\n       enable_ipv4: Enabled\n       static_dns_1: \"192.168.0.1\"\n       static_dns_2: \"192.168.0.1\"\n       dns_from_dhcp: Enabled\n       static_gateway: None\n       static_net_mask: None\n"
  },
  "dellemc.openmanage.idrac_os_deployment": {
    "doc": {
      "description": "Boot to a network ISO image.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module does not support C(check_mode).",
      "options": {
        "expose_duration": {
          "aliases": [],
          "description": "It is the time taken in minutes for the ISO image file to be exposed as a local CD-ROM device to the host server. When the time expires, the ISO image gets automatically detached.",
          "default": "1080",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "iso_image": {
          "aliases": [],
          "description": "Network ISO name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "CIFS or NFS Network share.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user in the format 'user@domain' or 'domain\\\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Boot to a network ISO image",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Boot to Network ISO\n  dellemc.openmanage.idrac_os_deployment:\n      idrac_ip: \"192.168.0.1\"\n      idrac_user: \"user_name\"\n      idrac_password: \"user_password\"\n      share_name: \"192.168.0.0:/nfsfileshare\"\n      iso_image:  \"unattended_os_image.iso\"\n      expose_duration: 180\n"
  },
  "dellemc.openmanage.idrac_redfish_storage_controller": {
    "doc": {
      "description": "This module configures the settings of the storage controller using Redfish.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module does not support C(check_mode).",
      "options": {
        "baseuri": {
          "aliases": [],
          "description": "IP address of the target out-of-band controller. For example- <ipaddress>:<port>.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "These actions may require a system reset, depending on the controller's capabilities.\nC(ResetConfig) - Deletes all the virtual disks and unassigns all hot spares on physical disks.\nC(AssignSpare) - Assigns a physical disk as a dedicated or global hot spare for a virtual disk.\nC(SetControllerKey) - Sets the key on controllers, which is used to encrypt the drives in Local key Management(LKM).\nC(RemoveControllerKey) - Erases the encryption key on the controller.\nC(ReKey) - Resets the key on the controller.",
          "default": "AssignSpare",
          "type": "str",
          "required": false,
          "choices": [
            "ResetConfig",
            "AssignSpare",
            "SetControllerKey",
            "RemoveControllerKey",
            "ReKey"
          ],
          "suboptions": {}
        },
        "controller_id": {
          "aliases": [],
          "description": "FQDD of the storage controller. For example- 'RAID.Slot.1-1'.\nThis option is mandatory when I(command) is C(ResetConfig), C(SetControllerKey), C(RemoveControllerKey) and C(ReKey).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "A new security key passphrase that the encryption-capable controller uses to create the encryption key. The controller uses the encryption key to lock or unlock access to the Self Encryption Disk(SED). Only one encryption key can be created for each controller.\nThis is mandatory when I(command) is C(SetControllerKey) or C(ReKey), and when I(mode) is C(LKM).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key_id": {
          "aliases": [],
          "description": "This is a user supplied text label associated with the passphrase.\nThis is mandatory when I(command) is C(SetControllerKey) or C(ReKey), and when I(mode) is C(LKM).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Encryption mode of the encryption-capable controller: 1 - Local Key Management (LKM), 2 - Security Enterprise Key Manager(SEKM).\nThis option is applicable only when I(command) is C(ReKey).\nC(SEKM) requires secure enterprise key manager license on the iDRAC.",
          "default": "LKM",
          "type": "str",
          "required": false,
          "choices": [
            "LKM",
            "SEKM"
          ],
          "suboptions": {}
        },
        "old_key": {
          "aliases": [],
          "description": "Security key passphrase used by the encryption-capable controller..\nThis option is mandatory when I(command) is C(ReKey) and I(mode) is C(LKM).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "Fully Qualified Device Descriptor (FQDD) of the target physical drive that is assigned as a spare.\nThis is mandatory when I(command) is C(AssignSpare).\nIf I(volume_id) is not specified or empty, this physical drive will be assigned as a global hot spare.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "volume_id": {
          "aliases": [],
          "description": "FQDD of the volumes to which a hot spare is assigned.\nApplicable if I(command) is C(AssignSpare).\nTo know the number of volumes to which a hot spare can be assigned, refer iDRAC Redfish API guide.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Configures the storage controller settings",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Assign dedicated hot spare\n  dellemc.openmanage.idrac_redfish_storage_controller:\n    baseuri: \"192.168.0.1:443\"\n    username: \"user_name\"\n    password: \"user_password\"\n    volume_id:\n      - \"Disk.Virtual.0:RAID.Slot.1-1\"\n    target: \"Disk.Bay.0:Enclosure.Internal.0-1:RAID.Slot.1-1\"\n  tags:\n    - assign_dedicated_hot_spare\n\n- name: Assign global hot spare\n  dellemc.openmanage.idrac_redfish_storage_controller:\n    baseuri: \"192.168.0.1:443\"\n    username: \"user_name\"\n    password: \"user_password\"\n    target: \"Disk.Bay.0:Enclosure.Internal.0-1:RAID.Slot.1-1\"\n  tags:\n    - assign_global_hot_spare\n\n- name: Set controller encryption key\n  dellemc.openmanage.idrac_redfish_storage_controller:\n    baseuri: \"192.168.0.1:443\"\n    username: \"user_name\"\n    password: \"user_password\"\n    command: \"SetControllerKey\"\n    controller_id: \"RAID.Slot.1-1\"\n    key: \"PassPhrase@123\"\n    key_id: \"mykeyid123\"\n  tags:\n    - set_controller_key\n\n- name: Rekey in LKM mode\n  dellemc.openmanage.idrac_redfish_storage_controller:\n    baseuri: \"192.168.0.1:443\"\n    username: \"user_name\"\n    password: \"user_password\"\n    command: \"ReKey\"\n    controller_id: \"RAID.Slot.1-1\"\n    key: \"NewPassPhrase@123\"\n    key_id: \"newkeyid123\"\n    old_key: \"OldPassPhrase@123\"\n  tags:\n    - rekey_lkm\n\n- name: Rekey in SEKM mode\n  dellemc.openmanage.idrac_redfish_storage_controller:\n    baseuri: \"192.168.0.1:443\"\n    username: \"user_name\"\n    password: \"user_password\"\n    command: \"ReKey\"\n    controller_id: \"RAID.Slot.1-1\"\n    mode: \"SEKM\"\n  tags:\n    - rekey_sekm\n\n- name: Remove controller key\n  dellemc.openmanage.idrac_redfish_storage_controller:\n    baseuri: \"192.168.0.1:443\"\n    username: \"user_name\"\n    password: \"user_password\"\n    command: \"RemoveControllerKey\"\n    controller_id: \"RAID.Slot.1-1\"\n  tags:\n    - remove_controller_key\n\n- name: Reset controller configuration\n  dellemc.openmanage.idrac_redfish_storage_controller:\n    baseuri: \"192.168.0.1:443\"\n    username: \"user_name\"\n    password: \"user_password\"\n    command: \"ResetConfig\"\n    controller_id: \"RAID.Slot.1-1\"\n  tags:\n    - reset_config\n"
  },
  "dellemc.openmanage.idrac_reset": {
    "doc": {
      "description": "This module resets iDRAC.\niDRAC is not accessible for some time after running this module. It is recommended to wait for some time, before trying to connect to iDRAC.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Reset iDRAC",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Reset iDRAC\n  dellemc.openmanage.idrac_reset:\n       idrac_ip: \"192.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password: \"user_password\"\n       idrac_port: 443\n"
  },
  "dellemc.openmanage.idrac_server_config_profile": {
    "doc": {
      "description": "Export the Server Configuration Profile (SCP) from the iDRAC or import from a network share (CIFS, NFS, HTTP, HTTPS) or a local file.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module does not support C(check_mode).",
      "options": {
        "command": {
          "aliases": [],
          "description": "If C(import), will perform SCP import operations.\nIf C(export), will perform SCP export operations.",
          "default": "export",
          "type": "str",
          "required": false,
          "choices": [
            "import",
            "export"
          ],
          "suboptions": {}
        },
        "end_host_power_state": {
          "aliases": [],
          "description": "This option is applicable for C(import) command.\nIf C(On), End host power state is on.\nIf C(Off), End host power state is off.",
          "default": "On",
          "type": "str",
          "required": false,
          "choices": [
            "On",
            "Off"
          ],
          "suboptions": {}
        },
        "export_format": {
          "aliases": [],
          "description": "Specify the output file format. This option is applicable for C(export) command.",
          "default": "XML",
          "type": "str",
          "required": false,
          "choices": [
            "JSON",
            "XML"
          ],
          "suboptions": {}
        },
        "export_use": {
          "aliases": [],
          "description": "Specify the type of server configuration profile (SCP) to be exported. This option is applicable for C(export) command.",
          "default": "Default",
          "type": "str",
          "required": false,
          "choices": [
            "Default",
            "Clone",
            "Replace"
          ],
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_wait": {
          "aliases": [],
          "description": "Whether to wait for job completion or not.",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "scp_components": {
          "aliases": [],
          "description": "If C(ALL), this module exports or imports all components configurations from SCP file.\nIf C(IDRAC), this module exports or imports iDRAC configuration from SCP file.\nIf C(BIOS), this module exports or imports BIOS configuration from SCP file.\nIf C(NIC), this module exports or imports NIC configuration from SCP file.\nIf C(RAID), this module exports or imports RAID configuration from SCP file.",
          "default": "ALL",
          "type": "str",
          "required": false,
          "choices": [
            "ALL",
            "IDRAC",
            "BIOS",
            "NIC",
            "RAID"
          ],
          "suboptions": {}
        },
        "scp_file": {
          "aliases": [],
          "description": "Name of the server configuration profile (SCP) file.\nThis option is mandatory if I(command) is C(import).\nThe default format <idrac_ip>_YYmmdd_HHMMSS_scp is used if this option is not specified for C(import).\nI(export_format) is used if the valid extension file is not provided for C(import).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or local path.\nCIFS, NFS, HTTP, and HTTPS network share types are supported.\nOMSDK is not required if HTTP or HTTPS location is used for I(share_name).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user in the format 'user@domain' or 'domain\\\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network Share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shutdown_type": {
          "aliases": [],
          "description": "This option is applicable for C(import) command.\nIf C(Graceful), it gracefully shuts down the server.\nIf C(Forced),  it forcefully shuts down the server.\nIf C(NoReboot), it does not reboot the server.",
          "default": "Graceful",
          "type": "str",
          "required": false,
          "choices": [
            "Graceful",
            "Forced",
            "NoReboot"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Export or Import iDRAC Server Configuration Profile (SCP)",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Export SCP with IDRAC components in JSON format to a local path\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"/scp_folder\"\n    scp_components: IDRAC\n    scp_file: example_file\n    export_format: JSON\n    export_use: Clone\n    job_wait: True\n\n- name: Import SCP with IDRAC components in JSON format from a local path\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"/scp_folder\"\n    command: import\n    scp_components: \"IDRAC\"\n    scp_file: example_file.json\n    shutdown_type: Graceful\n    end_host_power_state: \"On\"\n    job_wait: False\n\n- name: Export SCP with BIOS components in XML format to a NFS share path with auto-generated file name\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"192.168.0.2:/share\"\n    scp_components: \"BIOS\"\n    export_format: XML\n    export_use: Default\n    job_wait: True\n\n- name: Import SCP with BIOS components in XML format from a NFS share path\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"192.168.0.2:/share\"\n    command: import\n    scp_components: \"BIOS\"\n    scp_file: 192.168.0.1_20210618_162856.xml\n    shutdown_type: NoReboot\n    end_host_power_state: \"Off\"\n    job_wait: False\n\n- name: Export SCP with RAID components in XML format to a CIFS share path with share user domain name\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"\\\\\\\\192.168.0.2\\\\share\"\n    share_user: share_username@domain\n    share_password: share_password\n    share_mnt: /mnt/cifs\n    scp_file: example_file.xml\n    scp_components: \"RAID\"\n    export_format: XML\n    export_use: Default\n    job_wait: True\n\n- name: Import SCP with RAID components in XML format from a CIFS share path\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"\\\\\\\\192.168.0.2\\\\share\"\n    share_user: share_username\n    share_password: share_password\n    share_mnt: /mnt/cifs\n    command: import\n    scp_components: \"RAID\"\n    scp_file: example_file.xml\n    shutdown_type: Forced\n    end_host_power_state: \"On\"\n    job_wait: True\n\n- name: Export SCP with ALL components in JSON format to a HTTP share path\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"http://192.168.0.3/share\"\n    share_user: share_username\n    share_password: share_password\n    scp_file: example_file.json\n    scp_components: ALL\n    export_format: JSON\n    job_wait: False\n\n- name: Import SCP with ALL components in JSON format from a HTTP share path\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    command: import\n    share_name: \"http://192.168.0.3/share\"\n    share_user: share_username\n    share_password: share_password\n    scp_file: example_file.json\n    shutdown_type: Graceful\n    end_host_power_state: \"On\"\n    job_wait: True\n\n- name: Export SCP with ALL components in XML format to a HTTPS share path without SCP file name\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    share_name: \"https://192.168.0.4/share\"\n    share_user: share_username\n    share_password: share_password\n    scp_components: ALL\n    export_format: XML\n    export_use: Replace\n    job_wait: True\n\n- name: Import SCP with ALL components in XML format from a HTTPS share path\n  dellemc.openmanage.idrac_server_config_profile:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n    command: import\n    share_name: \"https://192.168.0.4/share\"\n    share_user: share_username\n    share_password: share_password\n    scp_file: 192.168.0.1_20160618_164647.xml\n    shutdown_type: Graceful\n    end_host_power_state: \"On\"\n    job_wait: False\n"
  },
  "dellemc.openmanage.idrac_syslog": {
    "doc": {
      "description": "This module allows to enable or disable the iDRAC syslog.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user. This option is mandatory for network shares.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or a local path.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user name. Use the format 'user@domain' or 'domain\\\\user' if user is part of a domain. This option is mandatory for CIFS share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "syslog": {
          "aliases": [],
          "description": "Enables or disables an iDRAC syslog.",
          "default": "Enabled",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Enable or disable the syslog on iDRAC",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Enable iDRAC syslog\n  dellemc.openmanage.idrac_syslog:\n       idrac_ip:  \"192.168.0.1\"\n       idrac_user:  \"user_name\"\n       idrac_password:  \"user_password\"\n       share_name:  \"192.168.0.2:/share\"\n       share_password:  \"share_user_pwd\"\n       share_user:  \"share_user_name\"\n       share_mnt:  \"/mnt/share\"\n       syslog:  \"Enabled\"\n\n- name: Disable iDRAC syslog\n  dellemc.openmanage.idrac_syslog:\n       idrac_ip:  \"192.168.0.1\"\n       idrac_user:  \"user_name\"\n       idrac_password:  \"user_password\"\n       share_name:  \"192.168.0.2:/share\"\n       share_password:  \"share_user_pwd\"\n       share_user:  \"share_user_name\"\n       share_mnt:  \"/mnt/share\"\n       syslog:  \"Disabled\"\n"
  },
  "dellemc.openmanage.idrac_system_info": {
    "doc": {
      "description": "Get the PowerEdge Server System Inventory.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Get the PowerEdge Server System Inventory",
      "version_added": "3.0.0"
    },
    "examples": "\n---\n- name: Get System Inventory\n  dellemc.openmanage.idrac_system_info:\n    idrac_ip: \"192.168.0.1\"\n    idrac_user: \"user_name\"\n    idrac_password: \"user_password\"\n"
  },
  "dellemc.openmanage.idrac_timezone_ntp": {
    "doc": {
      "description": "This module allows to configure time zone and NTP on iDRAC.",
      "has_action": false,
      "notes": "This module requires 'Administrator' privilege for I(idrac_user).\nRun this module from a system that has direct access to Dell EMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "enable_ntp": {
          "aliases": [],
          "description": "Allows to enable or disable NTP on iDRAC.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ntp_server_1": {
          "aliases": [],
          "description": "The IP address of the NTP server 1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ntp_server_2": {
          "aliases": [],
          "description": "The IP address of the NTP server 2.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ntp_server_3": {
          "aliases": [],
          "description": "The IP address of the NTP server 3.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setup_idrac_timezone": {
          "aliases": [],
          "description": "Allows to configure time zone on iDRAC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_mnt": {
          "aliases": [],
          "description": "Local mount path of the network share with read-write permission for ansible user. This option is mandatory for network shares.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share or a local path.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [
            "share_pwd"
          ],
          "description": "Network share user password. This option is mandatory for CIFS share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share user name. Use the format 'user@domain' or 'domain\\\\user' if user is part of a domain. This option is mandatory for CIFS share.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "omsdk",
        "python >= 2.7.5"
      ],
      "short_description": "Configures time zone and NTP on iDRAC",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Configure time zone and NTP on iDRAC\n  dellemc.openmanage.idrac_timezone_ntp:\n       idrac_ip:   \"190.168.0.1\"\n       idrac_user: \"user_name\"\n       idrac_password:  \"user_password\"\n       share_name: \"user_name:/share\"\n       share_password:  \"share_password\"\n       share_user: \"user_name\"\n       share_mnt: \"/mnt/share\"\n       setup_idrac_timezone: \"UTC\"\n       enable_ntp: Enabled\n       ntp_server_1: \"190.168.0.1\"\n       ntp_server_2: \"190.168.0.2\"\n       ntp_server_3: \"190.168.0.3\"\n"
  },
  "dellemc.openmanage.idrac_user": {
    "doc": {
      "description": "This module allows to perform the following,\nAdd a new user account.\nEdit a user account.\nEnable or Disable a user account.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC iDRAC.\nThis module supports C(check_mode).",
      "options": {
        "authentication_protocol": {
          "aliases": [],
          "description": "This option allows to configure one of the following authentication protocol types to authenticate the iDRAC user.\nSecure Hash Algorithm C(SHA).\nMessage Digest 5 C(MD5).\nAn authentication protocol is not configured if C(None) is selected.",
          "type": "str",
          "required": false,
          "choices": [
            "None",
            "SHA",
            "MD5"
          ],
          "suboptions": {}
        },
        "enable": {
          "aliases": [],
          "description": "Provide the option to enable or disable a user from logging in to iDRAC.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "idrac_ip": {
          "aliases": [],
          "description": "iDRAC IP Address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_password": {
          "aliases": [
            "idrac_pwd"
          ],
          "description": "iDRAC user password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idrac_port": {
          "aliases": [],
          "description": "iDRAC port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "idrac_user": {
          "aliases": [],
          "description": "iDRAC username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ipmi_lan_privilege": {
          "aliases": [],
          "description": "The Intelligent Platform Management Interface LAN privilege level assigned to the user.",
          "type": "str",
          "required": false,
          "choices": [
            "Administrator",
            "Operator",
            "User",
            "No Access"
          ],
          "suboptions": {}
        },
        "ipmi_serial_privilege": {
          "aliases": [],
          "description": "The Intelligent Platform Management Interface Serial Port privilege level assigned to the user.\nThis option is only applicable for rack and tower servers.",
          "type": "str",
          "required": false,
          "choices": [
            "Administrator",
            "Operator",
            "User",
            "No Access"
          ],
          "suboptions": {}
        },
        "new_user_name": {
          "aliases": [],
          "description": "Provide the I(user_name) for the account to be modified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "privacy_protocol": {
          "aliases": [],
          "description": "This option allows to configure one of the following privacy encryption protocols for the iDRAC user.\nData Encryption Standard C(DES).\nAdvanced Encryption Standard C(AES).\nA privacy protocol is not configured if C(None) is selected.",
          "type": "str",
          "required": false,
          "choices": [
            "None",
            "DES",
            "AES"
          ],
          "suboptions": {}
        },
        "privilege": {
          "aliases": [],
          "description": "Following are the role-based privileges.\nA user with C(Administrator) privilege can log in to iDRAC, and then configure iDRAC, configure users, clear logs, control and configure system, access virtual console, access virtual media, test alerts, and execute debug commands.\nA user with C(Operator) privilege can log in to iDRAC, and then configure iDRAC, control and configure system, access virtual console, access virtual media, and execute debug commands.\nA user with C(ReadOnly) privilege can only log in to iDRAC.\nA user with C(None), no privileges assigned.",
          "type": "str",
          "required": false,
          "choices": [
            "Administrator",
            "ReadOnly",
            "Operator",
            "None"
          ],
          "suboptions": {}
        },
        "protocol_enable": {
          "aliases": [],
          "description": "Enables protocol for the iDRAC user.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sol_enable": {
          "aliases": [],
          "description": "Enables Serial Over Lan (SOL) for an iDRAC user.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Select C(present) to create or modify a user account.\nSelect C(absent) to remove a user account.\nEnsure Lifecycle Controller is available because the user operation uses the capabilities of Lifecycle Controller.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user_name": {
          "aliases": [],
          "description": "Provide the I(user_name) of the account to be created, deleted or modified.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "user_password": {
          "aliases": [],
          "description": "Provide the password for the user account. The password can be changed when the user account is modified.\nTo ensure security, the I(user_password) must be at least eight characters long and must contain lowercase and upper-case characters, numbers, and special characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Configure settings for user accounts",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Configure a new iDRAC user\n  dellemc.openmanage.idrac_user:\n    idrac_ip: 198.162.0.1\n    idrac_user: idrac_user\n    idrac_password: idrac_password\n    state: present\n    user_name: user_name\n    user_password: user_password\n    privilege: Administrator\n    ipmi_lan_privilege: Administrator\n    ipmi_serial_privilege: Administrator\n    enable: true\n    sol_enable: true\n    protocol_enable: true\n    authentication_protocol: SHA\n    privacy_protocol: AES\n\n- name: Modify existing iDRAC user username and password\n  dellemc.openmanage.idrac_user:\n    idrac_ip: 198.162.0.1\n    idrac_user: idrac_user\n    idrac_password: idrac_password\n    state: present\n    user_name: user_name\n    new_user_name: new_user_name\n    user_password: user_password\n\n- name: Delete existing iDRAC user account\n  dellemc.openmanage.idrac_user:\n    idrac_ip: 198.162.0.1\n    idrac_user: idrac_user\n    idrac_password: idrac_password\n    state: absent\n    user_name: user_name\n"
  },
  "dellemc.openmanage.ome_application_alerts_smtp": {
    "doc": {
      "description": "This module allows to configure SMTP or email configurations on OpenManage Enterprise and OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "The module will always report change when I(enable_authentication) is C(True).\nRun this module from a system that has direct access to Dell EMC OpenManage Enterprise or OpenManage Enterprise Modular.\nThis module support C(check_mode).",
      "options": {
        "credentials": {
          "aliases": [],
          "description": "The credentials for the SMTP server",
          "type": "dict",
          "required": false,
          "suboptions": {
            "password": {
              "aliases": [],
              "description": "The password to access the SMTP server.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username to access the SMTP server.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "destination_address": {
          "aliases": [],
          "description": "The IP address or FQDN of the SMTP destination server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enable_authentication": {
          "aliases": [],
          "description": "Enable or disable authentication to access the SMTP server.\nThe I(credentials) are mandatory if I(enable_authentication) is C(True).\nThe module will always report change when this is C(True).",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port_number": {
          "aliases": [],
          "description": "The port number of the SMTP destination server.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_ssl": {
          "aliases": [],
          "description": "Use SSL to connect with the SMTP server.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "This module allows to configure SMTP or email configurations",
      "version_added": "4.3.0"
    },
    "examples": "\n---\n- name: Update SMTP destination server configuration with authentication\n  dellemc.openmanage.ome_application_alerts_smtp:\n    hostname: \"192.168.0.1\"\n    username: \"user_name\"\n    password: \"user_password\"\n    destination_address: \"localhost\"\n    port_number: 25\n    use_ssl: true\n    enable_authentication: true\n    credentials:\n      username: \"username\"\n      password: \"password\"\n- name: Update SMTP destination server configuration without authentication\n  dellemc.openmanage.ome_application_alerts_smtp:\n    hostname: \"192.168.0.1\"\n    username: \"user_name\"\n    password: \"user_password\"\n    destination_address: \"localhost\"\n    port_number: 25\n    use_ssl: false\n    enable_authentication: false\n"
  },
  "dellemc.openmanage.ome_application_alerts_syslog": {
    "doc": {
      "description": "This module allows to configure syslog forwarding settings on OpenManage Enterprise and OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Dell EMC OpenManage Enterprise or Dell EMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "syslog_servers": {
          "aliases": [],
          "description": "List of servers to forward syslog.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "destination_address": {
              "aliases": [],
              "description": "The IP address, FQDN or hostname of the syslog server.\nThis is required if I(enabled) is C(True).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Enable or disable syslog forwarding.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The ID of the syslog server.",
              "type": "int",
              "required": true,
              "choices": [
                "1",
                "2",
                "3",
                "4"
              ],
              "suboptions": {}
            },
            "port_number": {
              "aliases": [],
              "description": "The UDP port number of the syslog server.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Configure syslog forwarding settings on OpenManage Enterprise and OpenManage Enterprise Modular",
      "version_added": "4.3.0"
    },
    "examples": "\n---\n- name: Configure single server to forward syslog\n  dellemc.openmanage.ome_application_alerts_syslog:\n    hostname: 192.168.0.1\n    username: \"username\"\n    password: \"password\"\n    syslog_servers:\n      - id: 1\n        enabled: true\n        destination_address: 192.168.0.2\n        port_number: 514\n\n- name: Configure multiple server to forward syslog\n  dellemc.openmanage.ome_application_alerts_syslog:\n    hostname: 192.168.0.1\n    username: \"username\"\n    password: \"password\"\n    syslog_servers:\n      - id: 1\n        port_number: 523\n      - id: 2\n        enabled: true\n        destination_address: sysloghost1.lab.com\n      - id: 3\n        enabled: false\n      - id: 4\n        enabled: true\n        destination_address: 192.168.0.4\n        port_number: 514\n"
  },
  "dellemc.openmanage.ome_application_certificate": {
    "doc": {
      "description": "This module allows the generation a new certificate signing request (CSR) and to upload the certificate on OpenManage Enterprise.",
      "has_action": false,
      "notes": "If a certificate is uploaded, which is identical to an already existing certificate, it is accepted by the module.\nThis module does not support C(check_mode).",
      "options": {
        "business_name": {
          "aliases": [],
          "description": "Name of the business that issued the certificate. This option is applicable for C(generate_csr).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "C(generate_csr) allows the generation of a CSR and C(upload) uploads the certificate.",
          "default": "generate_csr",
          "type": "str",
          "required": false,
          "choices": [
            "generate_csr",
            "upload"
          ],
          "suboptions": {}
        },
        "country": {
          "aliases": [],
          "description": "Country in which the issuer resides. This option is applicable for C(generate_csr).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "country_state": {
          "aliases": [],
          "description": "State in which the issuer resides. This option is applicable for C(generate_csr).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "department_name": {
          "aliases": [],
          "description": "Name of the department that issued the certificate. This option is applicable for C(generate_csr).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "distinguished_name": {
          "aliases": [],
          "description": "Name of the certificate issuer. This option is applicable for C(generate_csr).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email associated with the issuer. This option is applicable for C(generate_csr).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "locality": {
          "aliases": [],
          "description": "Local address of the issuer of the certificate. This option is applicable for C(generate_csr).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "upload_file": {
          "aliases": [],
          "description": "Local path of the certificate file to be uploaded. This option is applicable for C(upload). Once the certificate is uploaded, OpenManage Enterprise cannot be accessed for a few seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "This module allows to generate a CSR and upload the certificate",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Generate a certificate signing request\n  dellemc.openmanage.ome_application_certificate:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"generate_csr\"\n    distinguished_name: \"hostname.com\"\n    department_name: \"Remote Access Group\"\n    business_name: \"Dell Inc.\"\n    locality: \"Round Rock\"\n    country_state: \"Texas\"\n    country: \"US\"\n    email: \"support@dell.com\"\n\n- name: Upload the certificate\n  dellemc.openmanage.ome_application_certificate:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"upload\"\n    upload_file: \"/path/certificate.cer\"\n"
  },
  "dellemc.openmanage.ome_application_network_address": {
    "doc": {
      "description": "This module allows the configuration of a DNS and an IPV4 or IPV6 network on OpenManage Enterprise.",
      "has_action": false,
      "notes": "The configuration changes can only be applied to one interface at a time.\nThe system management consoles might be unreachable for some time after the configuration changes are applied.\nThis module does not support C(check_mode).",
      "options": {
        "dns_configuration": {
          "aliases": [],
          "description": "Domain Name System(DNS) settings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dns_domain_name": {
              "aliases": [],
              "description": "Static DNS domain name\nThis is applicable when I(use_dhcp_for_dns_domain_name) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dns_name": {
              "aliases": [],
              "description": "DNS name for I(hostname)\nThis is applicable when I(register_with_dns) is true.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "register_with_dns": {
              "aliases": [],
              "description": "Register/Unregister I(dns_name) on the DNS Server.\nThis option cannot be updated if vLAN configuration changes.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_dhcp_for_dns_domain_name": {
              "aliases": [],
              "description": "Get the I(dns_domain_name) using a DHCP server.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "enable_nic": {
          "aliases": [],
          "description": "Enable or disable Network Interface Card (NIC) configuration.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface_name": {
          "aliases": [],
          "description": "If there are multiple interfaces, network configuration changes can be applied to a single interface using the interface name of the NIC.\nIf this option is not specified, Primary interface is chosen by default.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipv4_configuration": {
          "aliases": [],
          "description": "IPv4 network configuration.\nI(Warning) Ensure that you have an alternate interface to access OpenManage Enterprise as these options can change the current IPv4 address for I(hostname).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enable": {
              "aliases": [],
              "description": "Enable or disable access to the network using IPv4.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "enable_dhcp": {
              "aliases": [],
              "description": "Enable or disable the automatic request to get an IPv4 address from the IPv4 Dynamic Host Configuration Protocol (DHCP) server\nIf I(enable_dhcp) option is true, OpenManage Enterprise retrieves the IP configuration—IPv4 address, subnet mask, and gateway from a DHCP server on the existing network.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "static_alternate_dns_server": {
              "aliases": [],
              "description": "Static IPv4 DNS alternate server\nThis option is applicable when I(use_dhcp_for_dns_server_names) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_gateway": {
              "aliases": [],
              "description": "Static IPv4 gateway address\nThis option is applicable when I(enable_dhcp) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_ip_address": {
              "aliases": [],
              "description": "Static IPv4 address\nThis option is applicable when I(enable_dhcp) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_preferred_dns_server": {
              "aliases": [],
              "description": "Static IPv4 DNS preferred server\nThis option is applicable when I(use_dhcp_for_dns_server_names) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_subnet_mask": {
              "aliases": [],
              "description": "Static IPv4 subnet mask address\nThis option is applicable when I(enable_dhcp) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "use_dhcp_for_dns_server_names": {
              "aliases": [],
              "description": "This option allows to automatically request and obtain a DNS server IPv4 address from the DHCP server.\nThis option is applicable when I(enable_dhcp) is true.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ipv6_configuration": {
          "aliases": [],
          "description": "IPv6 network configuration.\nI(Warning) Ensure that you have an alternate interface to access OpenManage Enterprise as these options can change the current IPv6 address for I(hostname).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enable": {
              "aliases": [],
              "description": "Enable or disable access to the network using the IPv6.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "enable_auto_configuration": {
              "aliases": [],
              "description": "Enable or disable the automatic request to get an IPv6 address from the IPv6 DHCP server or router advertisements(RA)\nIf I(enable_auto_configuration) is true, OME retrieves IP configuration-IPv6 address, prefix, and gateway, from a DHCPv6 server on the existing network",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "static_alternate_dns_server": {
              "aliases": [],
              "description": "Static IPv6 DNS alternate server\nThis option is applicable when I(use_dhcp_for_dns_server_names) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_gateway": {
              "aliases": [],
              "description": "Static IPv6 gateway address\nThis option is applicable when I(enable_auto_configuration) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_ip_address": {
              "aliases": [],
              "description": "Static IPv6 address\nThis option is applicable when I(enable_auto_configuration) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_preferred_dns_server": {
              "aliases": [],
              "description": "Static IPv6 DNS preferred server\nThis option is applicable when I(use_dhcp_for_dns_server_names) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_prefix_length": {
              "aliases": [],
              "description": "Static IPv6 prefix length\nThis option is applicable when I(enable_auto_configuration) is false.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "use_dhcp_for_dns_server_names": {
              "aliases": [],
              "description": "This option allows to automatically request and obtain a DNS server IPv6 address from the DHCP server.\nThis option is applicable when I(enable_auto_configuration) is true",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "management_vlan": {
          "aliases": [],
          "description": "vLAN configuration.\nThese settings are applicable for OpenManage Enterprise Modular.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enable_vlan": {
              "aliases": [],
              "description": "Enable or disable vLAN for management.\nThe vLAN configuration cannot be updated if the I(register_with_dns) field under I(dns_configuration) is true.\nI(WARNING) Ensure that the network cable is plugged to the correct port after the vLAN configuration changes have been made. If not, the configuration change may not be effective.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "vlan_id": {
              "aliases": [],
              "description": "vLAN ID.\nThis option is applicable when I(enable_vlan) is true.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reboot_delay": {
          "aliases": [],
          "description": "The time in seconds, after which settings are applied.\nThis option is not mandatory.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Updates the network configuration on OpenManage Enterprise",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: IPv4 network configuration for primary interface\n  dellemc.openmanage.ome_application_network_address:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    enable_nic: true\n    ipv4_configuration:\n      enable: true\n      enable_dhcp: false\n      static_ip_address: 192.168.0.2\n      static_subnet_mask: 255.255.254.0\n      static_gateway: 192.168.0.3\n      use_dhcp_for_dns_server_names: false\n      static_preferred_dns_server: 192.168.0.4\n      static_alternate_dns_server: 192.168.0.5\n    reboot_delay: 5\n\n- name: IPv6 network configuration for primary interface\n  dellemc.openmanage.ome_application_network_address:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    ipv6_configuration:\n      enable: true\n      enable_auto_configuration: true\n      static_ip_address: 2626:f2f2:f081:9:1c1c:f1f1:4747:1\n      static_prefix_length: 10\n      static_gateway: 2626:f2f2:f081:9:1c1c:f1f1:4747:2\n      use_dhcp_for_dns_server_names: true\n      static_preferred_dns_server: 2626:f2f2:f081:9:1c1c:f1f1:4747:3\n      static_alternate_dns_server: 2626:f2f2:f081:9:1c1c:f1f1:4747:4\n\n- name: Management vLAN configuration for primary interface\n  dellemc.openmanage.ome_application_network_address:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    management_vlan:\n      enable_vlan: true\n      vlan_id: 3344\n    dns_configuration:\n      register_with_dns: false\n    reboot_delay: 1\n\n- name: DNS settings\n  dellemc.openmanage.ome_application_network_address:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    ipv4_configuration:\n      enable: true\n      use_dhcp_for_dns_server_names: false\n      static_preferred_dns_server: 192.168.0.4\n      static_alternate_dns_server: 192.168.0.5\n    dns_configuration:\n      register_with_dns: true\n      use_dhcp_for_dns_domain_name: false\n      dns_name: \"MX-SVCTAG\"\n      dns_domain_name: \"dnslocaldomain\"\n\n- name: Disbale nic interface eth1\n  dellemc.openmanage.ome_application_network_address:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    enable_nic: false\n    interface_name: eth1\n\n- name: Complete network settings for interface eth1\n  dellemc.openmanage.ome_application_network_address:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    enable_nic: true\n    interface_name: eth1\n    ipv4_configuration:\n      enable: true\n      enable_dhcp: false\n      static_ip_address: 192.168.0.2\n      static_subnet_mask: 255.255.254.0\n      static_gateway: 192.168.0.3\n      use_dhcp_for_dns_server_names: false\n      static_preferred_dns_server: 192.168.0.4\n      static_alternate_dns_server: 192.168.0.5\n    ipv6_configuration:\n      enable: true\n      enable_auto_configuration: true\n      static_ip_address: 2626:f2f2:f081:9:1c1c:f1f1:4747:1\n      static_prefix_length: 10\n      static_gateway: ffff::2607:f2b1:f081:9\n      use_dhcp_for_dns_server_names: true\n      static_preferred_dns_server: 2626:f2f2:f081:9:1c1c:f1f1:4747:3\n      static_alternate_dns_server: 2626:f2f2:f081:9:1c1c:f1f1:4747:4\n    dns_configuration:\n      register_with_dns: true\n      use_dhcp_for_dns_domain_name: false\n      dns_name: \"MX-SVCTAG\"\n      dns_domain_name: \"dnslocaldomain\"\n    reboot_delay: 5\n"
  },
  "dellemc.openmanage.ome_application_network_proxy": {
    "doc": {
      "description": "This module allows to configure a network proxy on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module does not support C(check_mode).",
      "options": {
        "enable_authentication": {
          "aliases": [],
          "description": "Enable or disable proxy authentication.\nIf I(enable_authentication) is true, I(proxy_username) and I(proxy_password) must be provided.\nIf I(enable_authentication) is false, the proxy username and password are set to its default values.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_proxy": {
          "aliases": [],
          "description": "Enables or disables the HTTP proxy configuration.\nIf I(enable proxy) is false, then the HTTP proxy configuration is set to its default value.",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Proxy server address.\nThis option is mandatory when I(enable_proxy) is true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_password": {
          "aliases": [],
          "description": "Proxy server password.\nThis option is mandatory when I(enable_authentication) is true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Proxy server's port number.\nThis option is mandatory when I(enable_proxy) is true.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_username": {
          "aliases": [],
          "description": "Proxy server username.\nThis option is mandatory when I(enable_authentication) is true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Updates the proxy configuration on OpenManage Enterprise",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Update proxy configuration and enable authentication\n  dellemc.openmanage.ome_application_network_proxy:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    enable_proxy: true\n    ip_address: \"192.168.0.2\"\n    proxy_port: 444\n    enable_authentication: true\n    proxy_username: \"proxy_username\"\n    proxy_password: \"proxy_password\"\n\n- name: Reset proxy authentication\n  dellemc.openmanage.ome_application_network_proxy:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    enable_proxy: true\n    ip_address: \"192.168.0.2\"\n    proxy_port: 444\n    enable_authentication: false\n\n- name: Reset proxy configuration\n  dellemc.openmanage.ome_application_network_proxy:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    enable_proxy: false\n"
  },
  "dellemc.openmanage.ome_application_network_time": {
    "doc": {
      "description": "This module allows the configuration of network time on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "enable_ntp": {
          "aliases": [],
          "description": "Enables or disables Network Time Protocol(NTP).\nIf I(enable_ntp) is false, then the NTP addresses reset to their default values.",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "primary_ntp_address": {
          "aliases": [],
          "description": "The primary NTP address.\nThis option is applicable when I(enable_ntp) is true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secondary_ntp_address1": {
          "aliases": [],
          "description": "The first secondary NTP address.\nThis option is applicable when I(enable_ntp) is true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secondary_ntp_address2": {
          "aliases": [],
          "description": "The second secondary NTP address.\nThis option is applicable when I(enable_ntp) is true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "system_time": {
          "aliases": [],
          "description": "Time in the current system.\nThis option is only applicable when I(enable_ntp) is false.\nThis option must be provided in following format 'yyyy-mm-dd hh:mm:ss'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "time_zone": {
          "aliases": [],
          "description": "The valid timezone ID to be used.\nThis option is applicable for both system time and NTP time synchronization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Updates the network time on OpenManage Enterprise",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Configure system time\n  dellemc.openmanage.ome_application_network_time:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    enable_ntp: false\n    system_time: \"2020-03-31 21:35:18\"\n    time_zone: \"TZ_ID_11\"\n\n- name: Configure NTP server for time synchronization\n  dellemc.openmanage.ome_application_network_time:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    enable_ntp: true\n    time_zone: \"TZ_ID_66\"\n    primary_ntp_address: \"192.168.0.2\"\n    secondary_ntp_address1: \"192.168.0.2\"\n    secondary_ntp_address2: \"192.168.0.4\"\n"
  },
  "dellemc.openmanage.ome_application_network_webserver": {
    "doc": {
      "description": "This module allows to configure a network web server on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "webserver_port": {
          "aliases": [],
          "description": "Port number used by OpenManage Enterprise to establish a secure server connection.\nI(WARNING) A change in port number results in a loss of connectivity in the current session for more than a minute.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "webserver_timeout": {
          "aliases": [],
          "description": "The duration in minutes after which a web user interface session is automatically disconnected.\nIf a change is made to the session timeout, it will only take effect after the next log in.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Updates the Web server configuration on OpenManage Enterprise",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Update web server port and session time out\n  dellemc.openmanage.ome_application_network_webserver:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    webserver_port: 9443\n    webserver_timeout: 20\n\n- name: Update session time out\n  dellemc.openmanage.ome_application_network_webserver:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    webserver_timeout: 30\n\n- name: Update web server port\n  dellemc.openmanage.ome_application_network_webserver:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    webserver_port: 8443\n"
  },
  "dellemc.openmanage.ome_chassis_slots": {
    "doc": {
      "description": "This module allows to rename sled slots on OpenManage Enterprise Modular either using device id or device service tag or using chassis service tag and slot number.",
      "has_action": false,
      "notes": "This module initiates the refresh inventory task. It may take a minute for new names to be reflected. If the task exceeds 300 seconds to refresh, the task times out.\nRun this module from a system that has direct access to Dell EMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "device_options": {
          "aliases": [],
          "description": "The ID or service tag of the sled in the slot and the new name for the slot.\nI(device_options) is mutually exclusive with I(slot_options).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "device_id": {
              "aliases": [],
              "description": "Device ID of the sled in the slot.\nThis is mutually exclusive with I(device_service_tag).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "device_service_tag": {
              "aliases": [],
              "description": "Service tag of the sled in the slot.\nThis is mutually exclusive with I(device_id).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "slot_name": {
              "aliases": [],
              "description": "Provide name for the slot.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "slot_options": {
          "aliases": [],
          "description": "The service tag of the chassis, slot number of the slot to be renamed, and the new name for the slot.\nI(slot_options) is mutually exclusive with I(device_options).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "chassis_service_tag": {
              "aliases": [],
              "description": "Service tag of the chassis.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slots": {
              "aliases": [],
              "description": "The slot number and the new name for the slot.",
              "type": "list",
              "required": true,
              "elements": "dict",
              "suboptions": {
                "slot_name": {
                  "aliases": [],
                  "description": "Provide name for the slot.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "slot_number": {
                  "aliases": [],
                  "description": "The slot number of the slot to be renamed.",
                  "type": "int",
                  "required": true,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Rename sled slots on OpenManage Enterprise Modular",
      "version_added": "3.6.0"
    },
    "examples": "\n---\n- name: Rename the slots in multiple chassis using slot number and chassis service tag\n  dellemc.openmanage.ome_chassis_slots:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    slot_options:\n      - chassis_service_tag: ABC1234\n        slots:\n          - slot_number: 1\n            slot_name: sled_name_1\n          - slot_number: 2\n            slot_name: sled_name_2\n      - chassis_service_tag: ABC1235\n        slots:\n          - slot_number: 1\n            slot_name: sled_name_1\n          - slot_number: 2\n            slot_name: sled_name_2\n\n- name: Rename single slot name of the sled using sled ID\n  dellemc.openmanage.ome_chassis_slots:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_options:\n      - device_id: 10054\n        slot_name: slot_device_name_1\n\n- name: Rename single slot name of the sled using sled service tag\n  dellemc.openmanage.ome_chassis_slots:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_options:\n      - device_service_tag: ABC1234\n        slot_name: service_tag_slot\n\n- name: Rename multiple slot names of the devices\n  dellemc.openmanage.ome_chassis_slots:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_options:\n      - device_id: 10054\n        slot_name: sled_name_1\n      - device_service_tag: ABC1234\n        slot_name: sled_name_2\n      - device_id: 10055\n        slot_name: sled_name_3\n      - device_service_tag: PQR1234\n        slot_name: sled_name_4\n"
  },
  "dellemc.openmanage.ome_configuration_compliance_baseline": {
    "doc": {
      "description": "This module allows to create, modify, and delete a configuration compliance baseline on OpenManage Enterprise. This module also allows to remediate devices that are non-compliant with the baseline by changing the attributes of devices to match with the associated baseline attributes.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nEnsure that the devices have the required licenses to perform the baseline compliance operations.",
      "options": {
        "command": {
          "aliases": [],
          "description": "C(create) creates a configuration baseline from an existing compliance template.C(create) supports C(check_mode) or idempotency checking for only I(names).\nC(modify) modifies an existing baseline.Only I(names), I(description), I(device_ids), I(device_service_tags), and I(device_group_names) can be modified\nI(WARNING) When a baseline is modified, the provided I(device_ids), I(device_group_names), and I(device_service_tags) replaces the devices previously present in the baseline.\nC(delete) deletes the list of configuration compliance baselines based on the baseline name. Invalid baseline names are ignored.\nC(remediate) remediates devices that are non-compliant with the baseline by changing the attributes of devices to match with the associated baseline attributes.\nC(remediate) is performed on all the non-compliant devices if either I(device_ids), or I(device_service_tags) is not provided.",
          "default": "create",
          "type": "str",
          "required": false,
          "choices": [
            "create",
            "modify",
            "delete",
            "remediate"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the compliance baseline.\nThis option is applicable when I(command) is C(create), or C(modify).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_group_names": {
          "aliases": [],
          "description": "Name of the target device group.\nThis option is applicable when I(command) is C(create), or C(modify) and is mutually exclusive with I(device_ids) and I(device_service_tag).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "device_ids": {
          "aliases": [],
          "description": "IDs of the target devices.\nThis option is applicable when I(command) is C(create), C(modify), or C(remediate), and is mutually exclusive with I(device_service_tag) and I(device_group_names).",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "device_service_tags": {
          "aliases": [],
          "description": "Service tag of the target device.\nThis option is applicable when I(command) is C(create), C(modify), or C(remediate) and is mutually exclusive with I(device_ids) and I(device_group_names).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_wait": {
          "aliases": [],
          "description": "Provides the option to wait for job completion.\nThis option is applicable when I(command) is C(create), C(modify), or C(remediate).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_wait_timeout": {
          "aliases": [],
          "description": "The maximum wait time of I(job_wait) in seconds.The job will only be tracked for this duration.\nThis option is applicable when I(job_wait) is C(True).",
          "default": "10800",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "names": {
          "aliases": [],
          "description": "Name(s) of the configuration compliance baseline.\nThis option is applicable when I(command) is C(create), C(modify), or C(delete).\nProvide the list of configuration compliance baselines names that are supported when I(command) is C(delete).",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "New name of the compliance baseline to be modified.\nThis option is applicable when I(command) is C(modify).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_id": {
          "aliases": [],
          "description": "ID of the deployment template to be used for creating a compliance baseline.\nThis option is applicable when I(command) is C(create) and is mutually exclusive with I(template_name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_name": {
          "aliases": [],
          "description": "Name of the compliance template for creating the compliance baseline(s).\nName of the deployment template to be used for creating a compliance baseline.\nThis option is applicable when I(command) is C(create) and is mutually exclusive with I(template_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Create, modify, and delete a configuration compliance baseline and remediate non-compliant devices on OpenManage Enterprise",
      "version_added": "3.2.0"
    },
    "examples": "\n---\n- name: Create a configuration compliance baseline using device IDs\n  dellemc.openmanage.ome_configuration_compliance_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    names: \"baseline1\"\n    template_name: \"template1\"\n    description: \"description of baseline\"\n    device_ids:\n      - 1111\n      - 2222\n\n- name: Create a configuration compliance baseline using device service tags\n  dellemc.openmanage.ome_configuration_compliance_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    names: \"baseline1\"\n    template_id: 1234\n    description: \"description of baseline\"\n    device_service_tags:\n      - \"SVCTAG1\"\n      - \"SVCTAG2\"\n\n- name: Create a configuration compliance baseline using group names\n  dellemc.openmanage.ome_configuration_compliance_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    names: \"baseline2\"\n    template_id: 2\n    job_wait_timeout: 1000\n    description: \"description of baseline\"\n    device_group_names:\n      - \"Group1\"\n      - \"Group2\"\n\n- name: Delete the configuration compliance baselines\n  dellemc.openmanage.ome_configuration_compliance_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: delete\n    names:\n      - baseline1\n      - baseline2\n\n- name: Modify a configuration compliance baseline using group names\n  dellemc.openmanage.ome_configuration_compliance_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: modify\n    names: \"baseline1\"\n    new_name: \"baseline_update\"\n    template_name: \"template2\"\n    description: \"new description of baseline\"\n    job_wait_timeout: 1000\n    device_group_names:\n      - Group1\n\n- name: Remediate specific non-compliant devices to a configuration compliance baseline using device IDs\n  dellemc.openmanage.ome_configuration_compliance_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"remediate\"\n    names: \"baseline1\"\n    device_ids:\n      - 1111\n\n- name: Remediate specific non-compliant devices to a configuration compliance baseline using device service tags\n  dellemc.openmanage.ome_configuration_compliance_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"remediate\"\n    names: \"baseline1\"\n    device_service_tags:\n      - \"SVCTAG1\"\n      - \"SVCTAG2\"\n\n- name: Remediate all the non-compliant devices to a configuration compliance baseline\n  dellemc.openmanage.ome_configuration_compliance_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"remediate\"\n    names: \"baseline1\"\n"
  },
  "dellemc.openmanage.ome_configuration_compliance_info": {
    "doc": {
      "description": "This module allows the generation of a compliance report of a specific or all of devices in a configuration compliance baseline.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "baseline": {
          "aliases": [],
          "description": "The name of the created baseline.\nA compliance report is generated even when the template is not associated with the baseline.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "The ID of the target device which is associated with the I(baseline).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "The device service tag of the target device associated with the I(baseline).\nI(device_service_tag) is mutually exclusive with I(device_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Device compliance report for devices managed in OpenManage Enterprise",
      "version_added": "3.2.0"
    },
    "examples": "\n---\n- name: Retrieve the compliance report of all of the devices in the specified configuration compliance baseline.\n  dellemc.openmanage.ome_configuration_compliance_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline: baseline_name\n\n- name: Retrieve the compliance report for a specific device associated with the baseline using the device ID.\n  dellemc.openmanage.ome_configuration_compliance_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline: baseline_name\n    device_id: 10001\n\n- name: Retrieve the compliance report for a specific device associated with the baseline using the device service tag.\n  dellemc.openmanage.ome_configuration_compliance_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline: baseline_name\n    device_service_tag: 2HFGH3\n"
  },
  "dellemc.openmanage.ome_device_group": {
    "doc": {
      "description": "This module allows to add devices to a static device group on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Dell EMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "device_ids": {
          "aliases": [],
          "description": "List of ID(s) of the device(s) to be added to the device group.\nI(device_ids) is mutually exclusive with I(device_service_tags) and I(ip_addresses).",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "device_service_tags": {
          "aliases": [],
          "description": "List of service tag(s) of the device(s) to be added to the device group.\nI(device_service_tags) is mutually exclusive with I(device_ids) and I(ip_addresses).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "group_id": {
          "aliases": [],
          "description": "ID of the static device group to which device(s) need to be added.\nI(group_id) is mutually exclusive with I(name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ip_addresses": {
          "aliases": [],
          "description": "List of IPs of the device(s) to be added to the device group.\nI(ip_addresses) is mutually exclusive with I(device_ids) and I(device_service_tags).\nSupported  IP address range formats:\n    - 192.35.0.1\n    - 10.36.0.0-192.36.0.255\n    - 192.37.0.0/24\n    - fe80::ffff:ffff:ffff:ffff\n    - fe80::ffff:192.0.2.0/125\n    - fe80::ffff:ffff:ffff:1111-fe80::ffff:ffff:ffff:ffff\nC(NOTE) Hostname is not supported.\nC(NOTE) I(ip_addresses) requires python's netaddr packages to work on IP Addresses.\nC(NOTE) This module reports success even if one of the IP addresses provided in the I(ip_addresses) list is available in OpenManage Enterprise.The module reports failure only if none of the IP addresses provided in the list are available in OpenManage Enterprise.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the static group to which device(s) need to be added.\nI(name) is mutually exclusive with I(group_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) allows to add the device(s) to a static device group.\nC(absent) currently, this feature is not supported.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5",
        "netaddr >= 0.7.19"
      ],
      "short_description": "Add devices to a static device group on OpenManage Enterprise",
      "version_added": "3.3.0"
    },
    "examples": "\n---\n- name: Add devices to a static device group by using the group name and device IDs\n  dellemc.openmanage.ome_device_group:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    name: \"Storage Services\"\n    device_ids:\n      - 11111\n      - 11112\n      - 11113\n\n- name: Add devices to a static device group by using the group name and device service tags\n  dellemc.openmanage.ome_device_group:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    name: \"Storage Services\"\n    device_service_tags:\n      - GHRT2RL\n      - KJHDF3S\n      - LKIJNG6\n\n- name: Add devices to a static device group by using the group ID and device service tags\n  dellemc.openmanage.ome_device_group:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    group_id: 12345\n    device_service_tags:\n      - GHRT2RL\n      - KJHDF3S\n\n- name: Add devices to a static device group by using the group name and IPv4 addresses\n  dellemc.openmanage.ome_device_group:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    name: \"Storage Services\"\n    ip_addresses:\n      - 192.35.0.1\n      - 192.35.0.5\n\n- name: Add devices to a static device group by using the group ID and IPv6 addresses\n  dellemc.openmanage.ome_device_group:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    group_id: 12345\n    ip_addresses:\n      - fe80::ffff:ffff:ffff:ffff\n      - fe80::ffff:ffff:ffff:2222\n\n- name: Add devices to a static device group by using the group ID and supported IPv4 and IPv6 address formats.\n  dellemc.openmanage.ome_device_group:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    group_id: 12345\n    ip_addresses:\n      - 192.35.0.1\n      - 10.36.0.0-192.36.0.255\n      - 192.37.0.0/24\n      - fe80::ffff:ffff:ffff:ffff\n      - ::ffff:192.0.2.0/125\n      - fe80::ffff:ffff:ffff:1111-fe80::ffff:ffff:ffff:ffff\n"
  },
  "dellemc.openmanage.ome_device_info": {
    "doc": {
      "description": "This module retrieves the list of devices in the inventory of OpenManage Enterprise along with the details of each device.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "fact_subset": {
          "aliases": [],
          "description": "C(basic_inventory) returns the list of the devices.\nC(detailed_inventory) returns the inventory details of specified devices.\nC(subsystem_health) returns the health status of specified devices.",
          "default": "basic_inventory",
          "type": "str",
          "required": false,
          "choices": [
            "basic_inventory",
            "detailed_inventory",
            "subsystem_health"
          ],
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "system_query_options": {
          "aliases": [],
          "description": "I(system_query_options) applicable for the choices of the fact_subset. Either I(device_id) or I(device_service_tag) is mandatory for C(detailed_inventory) and C(subsystem_health) or both can be applicable.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "device_id": {
              "aliases": [],
              "description": "A list of unique identifier is applicable for C(detailed_inventory) and C(subsystem_health).",
              "type": "list",
              "required": false,
              "elements": "int",
              "suboptions": {}
            },
            "device_service_tag": {
              "aliases": [],
              "description": "A list of service tags are applicable for C(detailed_inventory) and C(subsystem_health).",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "filter": {
              "aliases": [],
              "description": "For C(basic_inventory), it filters the collection of devices. I(filter) query format should be aligned with OData standards.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "inventory_type": {
              "aliases": [],
              "description": "For C(detailed_inventory), it returns details of the specified inventory type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Retrieves the information of devices inventoried by OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Retrieve basic inventory of all devices\n  dellemc.openmanage.ome_device_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n\n- name: Retrieve basic inventory for devices identified by IDs 33333 or 11111 using filtering\n  dellemc.openmanage.ome_device_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    fact_subset: \"basic_inventory\"\n    system_query_options:\n      filter: \"Id eq 33333 or Id eq 11111\"\n\n- name: Retrieve inventory details of specified devices identified by IDs 11111 and 22222\n  dellemc.openmanage.ome_device_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    fact_subset: \"detailed_inventory\"\n    system_query_options:\n      device_id:\n        - 11111\n        - 22222\n\n- name: Retrieve inventory details of specified devices identified by service tags MXL1234 and MXL4567\n  dellemc.openmanage.ome_device_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    fact_subset: \"detailed_inventory\"\n    system_query_options:\n      device_service_tag:\n        - MXL1234\n        - MXL4567\n\n- name: Retrieve details of specified inventory type of specified devices identified by ID and service tags\n  dellemc.openmanage.ome_device_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    fact_subset: \"detailed_inventory\"\n    system_query_options:\n      device_id:\n        - 11111\n      device_service_tag:\n        - MXL1234\n        - MXL4567\n      inventory_type: \"serverDeviceCards\"\n\n- name: Retrieve subsystem health of specified devices identified by service tags\n  dellemc.openmanage.ome_device_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    fact_subset: \"subsystem_health\"\n    system_query_options:\n      device_service_tag:\n        - MXL1234\n        - MXL4567\n\n"
  },
  "dellemc.openmanage.ome_device_location": {
    "doc": {
      "description": "This module allows to configure the device location settings of the chassis on OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Dell EMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "aisle": {
          "aliases": [],
          "description": "The aisle of the chassis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data_center": {
          "aliases": [],
          "description": "The data center name of the chassis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "The ID of the chassis for which the settings need to be updated.\nIf the device ID is not specified, this module updates the location settings for the I(hostname).\nI(device_id) is mutually exclusive with I(device_service_tag).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "The service tag of the chassis for which the settings need to be updated.\nIf the device service tag is not specified, this module updates the location settings for the I(hostname).\nI(device_service_tag) is mutually exclusive with I(device_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The physical location of the chassis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rack": {
          "aliases": [],
          "description": "The rack name of the chassis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rack_slot": {
          "aliases": [],
          "description": "The rack slot number of the chassis.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "room": {
          "aliases": [],
          "description": "The room of the chassis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Configure device location settings on OpenManage Enterprise Modular",
      "version_added": "4.2.0"
    },
    "examples": "\n---\n- name: Update device location settings of a chassis using the device ID.\n  dellemc.openmanage.ome_device_location:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id: 25011\n    data_center: data center 1\n    room: room 1\n    aisle: aisle 1\n    rack: rack 1\n    rack_slot: 2\n    location: location 1\n\n- name: Update device location settings of a chassis using the device service tag.\n  dellemc.openmanage.ome_device_location:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_service_tag: GHRT2RL\n    data_center: data center 2\n    room: room 7\n    aisle: aisle 4\n    rack: rack 6\n    rack_slot: 22\n    location: location 5\n\n- name: Update device location settings of the host chassis.\n  dellemc.openmanage.ome_device_location:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    data_center: data center 3\n    room: room 3\n    aisle: aisle 1\n    rack: rack 7\n    rack_slot: 10\n    location: location 9\n"
  },
  "dellemc.openmanage.ome_device_mgmt_network": {
    "doc": {
      "description": "This module allows to configure network settings on Chassis, Servers, and I/O Modules on OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Dell EMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "delay": {
          "aliases": [],
          "description": "The time in seconds, after which settings are applied.\nThis option is applicable only for Chassis.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "ID of the device.\nThis option is mutually exclusive with I(device_service_tag).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "Service tag of the device.\nThis option is mutually exclusive with I(device_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_configuration": {
          "aliases": [],
          "description": "Domain Name System(DNS) settings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auto_negotiation": {
              "aliases": [],
              "description": "Enables or disables the auto negation of the network speed.\nC(NOTE): Setting I(auto_negotiation) to false and choosing a network port speed may result in the chassis loosing link to the top of rack network switch, or to the neighboring chassis in case of MCM mode. It is recommended that the I(auto_negotiation) is set to C(true) for most use cases.\nThis is applicable when I(use_dhcp_for_dns_domain_name) is false.\nThis is applicable only for Chassis.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "dns_domain_name": {
              "aliases": [],
              "description": "Static DNS domain name\nThis is applicable when I(use_dhcp_for_dns_domain_name) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dns_name": {
              "aliases": [],
              "description": "DNS name for I(hostname)\nThis is applicable when I(register_with_dns) is true.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "network_speed": {
              "aliases": [],
              "description": "The speed of the network port.\nThis is applicable when I(auto_negotiation) is false.\nC(10_MB) to select network speed of 10 MB.\nC(100_MB) to select network speed of 100 MB.\nThis is applicable only for Chassis.",
              "type": "str",
              "required": false,
              "choices": [
                "10_MB",
                "100_MB"
              ],
              "suboptions": {}
            },
            "register_with_dns": {
              "aliases": [],
              "description": "Register/Unregister I(dns_name) on the DNS Server.\nC(WARNING) This option cannot be updated if VLAN configuration changes.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_dhcp_for_dns_domain_name": {
              "aliases": [],
              "description": "Get the I(dns_domain_name) using a DHCP server.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "dns_server_settings": {
          "aliases": [],
          "description": "DNS server settings.\nThis is applicable only for I/O Module.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "alternate_dns_server1": {
              "aliases": [],
              "description": "Enter the IP address of the first alternate DNS server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "alternate_dns_server2": {
              "aliases": [],
              "description": "Enter the IP address of the second alternate DNS server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "preferred_dns_server": {
              "aliases": [],
              "description": "Enter the IP address of the preferred DNS server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "enable_nic": {
          "aliases": [],
          "description": "Enable or disable Network Interface Card (NIC) configuration of the device.\nThis option is not applicable to I/O Module.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ipv4_configuration": {
          "aliases": [],
          "description": "IPv4 network configuration.\nC(WARNING) Ensure that you have an alternate interface to access OpenManage Enterprise Modular because these options can change the current IPv4 address for I(hostname).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enable_dhcp": {
              "aliases": [],
              "description": "Enable or disable the automatic request to obtain an IPv4 address from the IPv4 Dynamic Host Configuration Protocol (DHCP) server.\nC(NOTE) If this option is C(True), the values provided for I(static_ip_address), I(static_subnet_mask), and I(static_gateway) are not applied for these fields. However, the module may report changes.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enable_ipv4": {
              "aliases": [],
              "description": "Enable or disable access to the network using IPv4.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "static_alternate_dns_server": {
              "aliases": [],
              "description": "Static IPv4 DNS alternate server\nThis option is applicable when I(use_dhcp_for_dns_server_names) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_gateway": {
              "aliases": [],
              "description": "Static IPv4 gateway address\nThis option is applicable when I(enable_dhcp) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_ip_address": {
              "aliases": [],
              "description": "Static IPv4 address\nThis option is applicable when I(enable_dhcp) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_preferred_dns_server": {
              "aliases": [],
              "description": "Static IPv4 DNS preferred server\nThis option is applicable when I(use_dhcp_for_dns_server_names) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_subnet_mask": {
              "aliases": [],
              "description": "Static IPv4 subnet mask address\nThis option is applicable when I(enable_dhcp) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "use_dhcp_to_obtain_dns_server_address": {
              "aliases": [],
              "description": "This option allows to automatically request and obtain IPv4 address for the DNS Server from the DHCP server.\nThis option is applicable when I(enable_dhcp) is true.\nC(NOTE) If this option is C(True), the values provided for I(static_preferred_dns_server) and I(static_alternate_dns_server) are not applied for these fields. However, the module may report changes.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ipv6_configuration": {
          "aliases": [],
          "description": "IPv6 network configuration.\nC(WARNING) Ensure that you have an alternate interface to access OpenManage Enterprise Modular because these options can change the current IPv6 address for I(hostname).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enable_auto_configuration": {
              "aliases": [],
              "description": "Enable or disable the automatic request to obtain an IPv6 address from the IPv6 DHCP server or router advertisements(RA)\nIf I(enable_auto_configuration) is C(true), OpenManage Enterprise Modular retrieves IP configuration (IPv6 address, prefix, and gateway address) from a DHCPv6 server on the existing network.\nC(NOTE) If this option is C(True), the values provided for I(static_ip_address), I(static_prefix_length), and I(static_gateway) are not applied for these fields. However, the module may report changes.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enable_ipv6": {
              "aliases": [],
              "description": "Enable or disable access to the network using the IPv6.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "static_alternate_dns_server": {
              "aliases": [],
              "description": "Static IPv6 DNS alternate server\nThis option is applicable when I(use_dhcp_for_dns_server_names) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_gateway": {
              "aliases": [],
              "description": "Static IPv6 gateway address\nThis option is applicable when I(enable_auto_configuration) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_ip_address": {
              "aliases": [],
              "description": "Static IPv6 address\nThis option is applicable when I(enable_auto_configuration) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_preferred_dns_server": {
              "aliases": [],
              "description": "Static IPv6 DNS preferred server\nThis option is applicable when I(use_dhcp_for_dns_server_names) is false.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_prefix_length": {
              "aliases": [],
              "description": "Static IPv6 prefix length\nThis option is applicable when I(enable_auto_configuration) is false.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "use_dhcpv6_to_obtain_dns_server_address": {
              "aliases": [],
              "description": "This option allows to automatically request and obtain a IPv6 address for the DNS server from the DHCP server.\nThis option is applicable when I(enable_auto_configuration) is true\nC(NOTE) If this option is C(True), the values provided for I(static_preferred_dns_server) and I(static_alternate_dns_server) are not applied for these fields. However, the module may report changes.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "management_vlan": {
          "aliases": [],
          "description": "VLAN configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enable_vlan": {
              "aliases": [],
              "description": "Enable or disable VLAN for management.\nThe VLAN configuration cannot be updated if the I(register_with_dns) field under I(dns_configuration) is true.\nC(WARNING) Ensure that the network cable is connected to the correct port after the VLAN configuration is changed. If not, the VLAN configuration changes may not be applied.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "vlan_id": {
              "aliases": [],
              "description": "VLAN ID.\nThe valid VLAN IDs are: 1 to 4000, and 4021 to 4094.\nThis option is applicable when I(enable_vlan) is true.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Configure network settings of devices on OpenManage Enterprise Modular",
      "version_added": "4.2.0"
    },
    "examples": "\n---\n- name: Network settings for chassis\n  dellemc.openmanage.ome_device_mgmt_network:\n    hostname: 192.168.0.1\n    username: \"username\"\n    password: \"password\"\n    device_service_tag: CHAS123\n    ipv4_configuration:\n      enable_ipv4: true\n      enable_dhcp: false\n      static_ip_address: 192.168.0.2\n      static_subnet_mask: 255.255.254.0\n      static_gateway: 192.168.0.3\n      use_dhcp_to_obtain_dns_server_address: false\n      static_preferred_dns_server: 192.168.0.4\n      static_alternate_dns_server: 192.168.0.5\n    ipv6_configuration:\n      enable_ipv6: true\n      enable_auto_configuration: false\n      static_ip_address: 2626:f2f2:f081:9:1c1c:f1f1:4747:1\n      static_prefix_length: 10\n      static_gateway: ffff::2607:f2b1:f081:9\n      use_dhcpv6_to_obtain_dns_server_address: false\n      static_preferred_dns_server: 2626:f2f2:f081:9:1c1c:f1f1:4747:3\n      static_alternate_dns_server: 2626:f2f2:f081:9:1c1c:f1f1:4747:4\n    dns_configuration:\n      register_with_dns: true\n      use_dhcp_for_dns_domain_name: false\n      dns_name: \"MX-SVCTAG\"\n      dns_domain_name: \"dnslocaldomain\"\n      auto_negotiation: no\n      network_speed: 100_MB\n\n- name: Network settings for server\n  dellemc.openmanage.ome_device_mgmt_network:\n    hostname: 192.168.0.1\n    username: \"username\"\n    password: \"password\"\n    device_service_tag: SRVR123\n    ipv4_configuration:\n      enable_ipv4: true\n      enable_dhcp: false\n      static_ip_address: 192.168.0.2\n      static_subnet_mask: 255.255.254.0\n      static_gateway: 192.168.0.3\n      use_dhcp_to_obtain_dns_server_address: false\n      static_preferred_dns_server: 192.168.0.4\n      static_alternate_dns_server: 192.168.0.5\n    ipv6_configuration:\n      enable_ipv6: true\n      enable_auto_configuration: false\n      static_ip_address: 2626:f2f2:f081:9:1c1c:f1f1:4747:1\n      static_prefix_length: 10\n      static_gateway: ffff::2607:f2b1:f081:9\n      use_dhcpv6_to_obtain_dns_server_address: false\n      static_preferred_dns_server: 2626:f2f2:f081:9:1c1c:f1f1:4747:3\n      static_alternate_dns_server: 2626:f2f2:f081:9:1c1c:f1f1:4747:4\n\n- name: Network settings for I/O module\n  dellemc.openmanage.ome_device_mgmt_network:\n    hostname: 192.168.0.1\n    username: \"username\"\n    password: \"password\"\n    device_service_tag: IOM1234\n    ipv4_configuration:\n      enable_ipv4: true\n      enable_dhcp: false\n      static_ip_address: 192.168.0.2\n      static_subnet_mask: 255.255.254.0\n      static_gateway: 192.168.0.3\n    ipv6_configuration:\n      enable_ipv6: true\n      enable_auto_configuration: false\n      static_ip_address: 2626:f2f2:f081:9:1c1c:f1f1:4747:1\n      static_prefix_length: 10\n      static_gateway: ffff::2607:f2b1:f081:9\n    dns_server_settings:\n      preferred_dns_server: 192.168.0.4\n      alternate_dns_server1: 192.168.0.5\n\n- name: Management VLAN configuration of chassis using device id\n  dellemc.openmanage.ome_device_mgmt_network:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id : 12345\n    management_vlan:\n      enable_vlan: true\n      vlan_id: 2345\n    dns_configuration:\n      register_with_dns: false\n"
  },
  "dellemc.openmanage.ome_device_network_services": {
    "doc": {
      "description": "This module allows to configure the network services on OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Dell EMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "device_id": {
          "aliases": [],
          "description": "The ID of the chassis for which the settings need to be updated.\nIf the device ID is not specified, this module updates the network services settings for the I(hostname).\nI(device_id) is mutually exclusive with I(device_service_tag).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "The service tag of the chassis for which the setting needs to be updated.\nIf the device service tag is not specified, this module updates the network services settings for the I(hostname).\nI(device_service_tag) is mutually exclusive with I(device_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "remote_racadm_settings": {
          "aliases": [],
          "description": "The settings for remote RACADM configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Enables or disables the remote RACADM settings.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "snmp_settings": {
          "aliases": [],
          "description": "The settings for SNMP configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "community_name": {
              "aliases": [],
              "description": "The SNMP community string.\nRequired when I(enabled) is C(true).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Enables or disables the SNMP settings.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "port_number": {
              "aliases": [],
              "description": "The SNMP port number.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ssh_settings": {
          "aliases": [],
          "description": "The settings for SSH configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Enables or disables the SSH settings.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "idle_timeout": {
              "aliases": [],
              "description": "SSH idle timeout in minutes.",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "max_auth_retries": {
              "aliases": [],
              "description": "The number of retries when the SSH session fails.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_sessions": {
              "aliases": [],
              "description": "Number of SSH sessions.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "port_number": {
              "aliases": [],
              "description": "The port number for SSH service.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Configure chassis network services settings on OpenManage Enterprise Modular",
      "version_added": "4.3.0"
    },
    "examples": "\n---\n- name: Update network services settings of a chassis using the device ID\n  dellemc.openmanage.ome_device_network_services:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id: 25011\n    snmp_settings:\n      enabled: true\n      port_number: 161\n      community_name: public\n    ssh_settings:\n      enabled: false\n    remote_racadm_settings:\n      enabled: false\n\n- name: Update network services settings of a chassis using the device service tag.\n  dellemc.openmanage.ome_device_network_services:\n    hostname: \"192.168.0.2\"\n    username: \"username\"\n    password: \"password\"\n    device_service_tag: GHRT2RL\n    snmp_settings:\n      enabled: false\n    ssh_settings:\n      enabled: true\n      port_number: 22\n      max_sessions: 1\n      max_auth_retries: 3\n      idle_timeout: 1\n    remote_racadm_settings:\n      enabled: false\n\n- name: Update network services settings of the host chassis.\n  dellemc.openmanage.ome_device_network_services:\n    hostname: \"192.168.0.3\"\n    username: \"username\"\n    password: \"password\"\n    snmp_settings:\n      enabled: false\n    ssh_settings:\n      enabled: false\n    remote_racadm_settings:\n      enabled: true\n"
  },
  "dellemc.openmanage.ome_device_power_settings": {
    "doc": {
      "description": "This module allows to configure the chassis power settings on OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Dell EMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "device_id": {
          "aliases": [],
          "description": "The ID of the chassis for which the settings need to be updated.\nIf the device ID is not specified, this module updates the power settings for the I(hostname).\nI(device_id) is mutually exclusive with I(device_service_tag).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "The service tag of the chassis for which the setting needs to be updated.\nIf the device service tag is not specified, this module updates the power settings for the I(hostname).\nI(device_service_tag) is mutually exclusive with I(device_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hot_spare_configuration": {
          "aliases": [],
          "description": "The settings for Hot Spare configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enable_hot_spare": {
              "aliases": [],
              "description": "Enables or disables Hot Spare configuration to facilitate voltage regulation when power utilized by the Power Supply Unit (PSU) is low.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "primary_grid": {
              "aliases": [],
              "description": "The choices for PSU grid.\nC(GRID_1) Hot Spare on Grid 1.\nC(GRID_2) Hot Spare on Grid 2.",
              "default": "GRID_1",
              "type": "str",
              "required": false,
              "choices": [
                "GRID_1",
                "GRID_2"
              ],
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "power_configuration": {
          "aliases": [],
          "description": "The settings for Power configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enable_power_cap": {
              "aliases": [],
              "description": "Enables or disables the Power Cap Settings.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "power_cap": {
              "aliases": [],
              "description": "The maximum power consumption limit of the device. Specify the consumption limit in Watts.\nThis is required if I(enable_power_cap) is set to true.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "redundancy_configuration": {
          "aliases": [],
          "description": "The settings for Redundancy configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "redundancy_policy": {
              "aliases": [],
              "description": "The choices to configure the redundancy policy.\nC(NO_REDUNDANCY) no redundancy policy is used.\nC(GRID_REDUNDANCY) to distributes power by dividing the PSUs into two grids.\nC(PSU_REDUNDANCY) to distribute power between all the PSUs.",
              "default": "NO_REDUNDANCY",
              "type": "str",
              "required": false,
              "choices": [
                "NO_REDUNDANCY",
                "GRID_REDUNDANCY",
                "PSU_REDUNDANCY"
              ],
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Configure chassis power settings on OpenManage Enterprise Modular",
      "version_added": "4.2.0"
    },
    "examples": "\n---\n- name: Update power configuration settings of a chassis using the device ID.\n  dellemc.openmanage.ome_device_power_settings:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id: 25011\n    power_configuration:\n      enable_power_cap: true\n      power_cap: 3424\n\n- name: Update redundancy configuration settings of a chassis using the device service tag.\n  dellemc.openmanage.ome_device_power_settings:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_service_tag: GHRT2RL\n    redundancy_configuration:\n      redundancy_policy: GRID_REDUNDANCY\n\n- name: Update hot spare configuration settings of a chassis using device ID.\n  dellemc.openmanage.ome_device_power_settings:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id: 25012\n    hot_spare_configuration:\n      enable_hot_spare: true\n      primary_grid: GRID_1\n"
  },
  "dellemc.openmanage.ome_diagnostics": {
    "doc": {
      "description": "This module allows to export SupportAssist collection logs from OpenManage Enterprise and OpenManage Enterprise Modular and application logs from OpenManage Enterprise Modular to a CIFS or NFS share.",
      "has_action": false,
      "options": {
        "device_group_name": {
          "aliases": [],
          "description": "Name of the device group to export C(support_assist_collection) logs of all devices within the group.\nThis is applicable for C(support_assist_collection) logs.\nThis option is not applicable for OpenManage Enterprise Modular.\nThis option is mutually exclusive with I(device_ids) and I(device_service_tags).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_ids": {
          "aliases": [],
          "description": "List of target device IDs.\nThis is applicable for C(support_assist_collection) logs.\nThis option is mutually exclusive with I(device_service_tags) and I(device_group_name).",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "device_service_tags": {
          "aliases": [],
          "description": "List of target identifier.\nThis is applicable for C(support_assist_collection) logs.\nThis option is mutually exclusive with I(device_ids) and I(device_group_name).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_wait": {
          "aliases": [],
          "description": "Whether to wait for the Job completion or not.\nThe maximum wait time is I(job_wait_timeout).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_wait_timeout": {
          "aliases": [],
          "description": "The maximum wait time of I(job_wait) in minutes.\nThis option is applicable I(job_wait) is true.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "log_selectors": {
          "aliases": [],
          "description": "By default, the SupportAssist logs contains only hardware logs. To collect additional logs such as OS logs or RAID logs, specify these option in the choices list.\nIf not provided the default hardware log will be exported.\nC(OS_LOGS) to collect OS Logs.\nC(RAID_LOGS) to collect RAID controller logs.\nThis option is applicable only for C(support_assist_collection) of I(log_type).",
          "type": "list",
          "required": false,
          "choices": [
            "OS_LOGS",
            "RAID_LOGS"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "log_type": {
          "aliases": [],
          "description": "C(application) is applicable for OpenManage Enterprise Modular to export the application log bundle.\nC(support_assist_collection) is applicable for one or more devices to export SupportAssist logs.\nC(support_assist_collection) supports both OpenManage Enterprise and OpenManage Enterprise Modular.\nC(support_assist_collection) does not support export of C(OS_LOGS) from OpenManage Enterprise. If tried to export, the tasks will complete with errors, and the module fails.",
          "default": "support_assist_collection",
          "type": "str",
          "required": false,
          "choices": [
            "application",
            "support_assist_collection"
          ],
          "suboptions": {}
        },
        "mask_sensitive_info": {
          "aliases": [],
          "description": "Select this option to mask the personal identification information such as IPAddress, DNS, alert destination, email, gateway, inet6, MacAddress, netmask etc.\nThis option is applicable for C(application) of I(log_type).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "share_address": {
          "aliases": [],
          "description": "Network share IP address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_domain": {
          "aliases": [],
          "description": "Network share domain name.\nThis option is applicable for C(CIFS) if I(share_type).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_name": {
          "aliases": [],
          "description": "Network share path.\nFilename is auto generated and should not be provided as part of I(share_name).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "share_password": {
          "aliases": [],
          "description": "Network share password\nThis option is applicable for C(CIFS) of I(share_type).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "share_type": {
          "aliases": [],
          "description": "Network share type",
          "type": "str",
          "required": true,
          "choices": [
            "NFS",
            "CIFS"
          ],
          "suboptions": {}
        },
        "share_user": {
          "aliases": [],
          "description": "Network share username.\nThis option is applicable for C(CIFS) of I(share_type).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "test_connection": {
          "aliases": [],
          "description": "Test the availability of the network share location.\nI(job_wait) and I(job_wait_timeout) options are not applicable for I(test_connection).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Export technical support logs(TSR) to network share location",
      "version_added": "3.6.0"
    },
    "examples": "\n---\n- name: Export application log using CIFS share location\n  dellemc.openmanage.ome_diagnostics:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    share_type: CIFS\n    share_address: \"192.168.0.2\"\n    share_user: share_username\n    share_password: share_password\n    share_name: cifs_share\n    log_type: application\n    mask_sensitive_info: false\n    test_connection: true\n\n- name: Export application log using NFS share location\n  dellemc.openmanage.ome_diagnostics:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    share_address: \"192.168.0.3\"\n    share_type: NFS\n    share_name: nfs_share\n    log_type: application\n    mask_sensitive_info: true\n    test_connection: true\n\n- name: Export SupportAssist log using CIFS share location\n  dellemc.openmanage.ome_diagnostics:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    share_address: \"192.168.0.3\"\n    share_user: share_username\n    share_password: share_password\n    share_name: cifs_share\n    share_type: CIFS\n    log_type: support_assist_collection\n    device_ids: [10011, 10022]\n    log_selectors: [OS_LOGS]\n    test_connection: true\n\n- name: Export SupportAssist log using NFS share location\n  dellemc.openmanage.ome_diagnostics:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    share_address: \"192.168.0.3\"\n    share_type: NFS\n    share_name: nfs_share\n    log_type: support_assist_collection\n    device_group_name: group_name\n    test_connection: true\n"
  },
  "dellemc.openmanage.ome_discovery": {
    "doc": {
      "description": "This module allows to create, modify, or delete a discovery job.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Dell EMC OpenManage Enterprise.\nThis module does not support C(check_mode).\nIf I(state) is C(present), then Idempotency is not supported.",
      "options": {
        "community_string": {
          "aliases": [],
          "description": "Enable the use of SNMP community strings to receive SNMP traps using Application Settings in OpenManage Enterprise. This option is available only for the discovered iDRAC servers and MX7000 chassis.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cron": {
          "aliases": [],
          "description": "Provide a cron expression based on Quartz cron format.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "discovery_config_targets": {
          "aliases": [],
          "description": "Provide the list of discovery targets.\nEach discovery target is a set of I(network_address_detail), I(device_types), and one or more protocol credentials.\nThis is mandatory when I(state) is C(present).\nC(WARNING) Modification of this field is not supported, this field is overwritten every time. Ensure to provide all the required details for this field.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "device_types": {
              "aliases": [],
              "description": "Provide the type of devices to be discovered.\nThe accepted types are SERVER, CHASSIS, NETWORK SWITCH, and STORAGE.\nA combination or all of the above can be provided.\nSupported protocols for each device type are:\nSERVER - I(wsman), I(redfish), I(snmp), I(ipmi), I(ssh), and I(vmware).\nCHASSIS - I(wsman), and I(redfish).\nNETWORK SWITCH - I(snmp).\nSTORAGE - I(storage), and I(snmp).",
              "type": "list",
              "required": true,
              "elements": "str",
              "suboptions": {}
            },
            "ipmi": {
              "aliases": [],
              "description": "Intelligent Platform Management Interface (IPMI)",
              "type": "dict",
              "required": false,
              "suboptions": {
                "kgkey": {
                  "aliases": [],
                  "description": "KgKey for the IPMI protocol.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "password": {
                  "aliases": [],
                  "description": "Provide a password for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "retries": {
                  "aliases": [],
                  "description": "Enter the number of repeated attempts required to discover a device.",
                  "default": "3",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "timeout": {
                  "aliases": [],
                  "description": "Enter the time in seconds after which a job must stop running.",
                  "default": "60",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "username": {
                  "aliases": [],
                  "description": "Provide a username for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "network_address_detail": {
              "aliases": [],
              "description": "Provide the list of IP addresses, host names, or the range of IP addresses of the devices to be discovered or included.\nSample Valid IP Range Formats\n   192.35.0.0\n   192.36.0.0-10.36.0.255\n   192.37.0.0/24\n   2345:f2b1:f083:135::5500/118\n   2345:f2b1:f083:135::a500-2607:f2b1:f083:135::a600\n   hostname.domain.tld\n   hostname\n   2345:f2b1:f083:139::22a\nSample Invalid IP Range Formats\n   192.35.0.*\n   192.36.0.0-255\n   192.35.0.0/255.255.255.0\nC(NOTE) The range size for the number of IP addresses is limited to 16,385 (0x4001).\nC(NOTE) Both IPv6 and IPv6 CIDR formats are supported.",
              "type": "list",
              "required": true,
              "elements": "str",
              "suboptions": {}
            },
            "redfish": {
              "aliases": [],
              "description": "REDFISH protocol.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "ca_check": {
                  "aliases": [],
                  "description": "Enable the Certificate Authority (CA) check.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "certificate_data": {
                  "aliases": [],
                  "description": "Provide certificate data for the CA check.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "cn_check": {
                  "aliases": [],
                  "description": "Enable the Common Name (CN) check.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "domain": {
                  "aliases": [],
                  "description": "Provide a domain for the protocol.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "password": {
                  "aliases": [],
                  "description": "Provide a password for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Enter the port number that the job must use to discover the devices.",
                  "default": "443",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "retries": {
                  "aliases": [],
                  "description": "Enter the number of repeated attempts required to discover a device.",
                  "default": "3",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "timeout": {
                  "aliases": [],
                  "description": "Enter the time in seconds after which a job must stop running.",
                  "default": "60",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "username": {
                  "aliases": [],
                  "description": "Provide a username for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "snmp": {
              "aliases": [],
              "description": "Simple Network Management Protocol (SNMP).",
              "type": "dict",
              "required": false,
              "suboptions": {
                "community": {
                  "aliases": [],
                  "description": "Community string for the SNMP protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Enter the port number that the job must use to discover the devices.",
                  "default": "161",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "retries": {
                  "aliases": [],
                  "description": "Enter the number of repeated attempts required to discover a device.",
                  "default": "3",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "timeout": {
                  "aliases": [],
                  "description": "Enter the time in seconds after which a job must stop running.",
                  "default": "3",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "ssh": {
              "aliases": [],
              "description": "Secure Shell (SSH).",
              "type": "dict",
              "required": false,
              "suboptions": {
                "check_known_hosts": {
                  "aliases": [],
                  "description": "Verify the known host key.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "is_sudo_user": {
                  "aliases": [],
                  "description": "Use the SUDO option.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "password": {
                  "aliases": [],
                  "description": "Provide a password for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Enter the port number that the job must use to discover the devices.",
                  "default": "22",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "retries": {
                  "aliases": [],
                  "description": "Enter the number of repeated attempts required to discover a device.",
                  "default": "3",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "timeout": {
                  "aliases": [],
                  "description": "Enter the time in seconds after which a job must stop running.",
                  "default": "60",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "username": {
                  "aliases": [],
                  "description": "Provide a username for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "storage": {
              "aliases": [],
              "description": "HTTPS Storage protocol.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "ca_check": {
                  "aliases": [],
                  "description": "Enable the Certificate Authority (CA) check.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "certificate_data": {
                  "aliases": [],
                  "description": "Provide certificate data for the CA check.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "cn_check": {
                  "aliases": [],
                  "description": "Enable the Common Name (CN) check.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "domain": {
                  "aliases": [],
                  "description": "Provide a domain for the protocol.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "password": {
                  "aliases": [],
                  "description": "Provide a password for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Enter the port number that the job must use to discover the devices.",
                  "default": "443",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "retries": {
                  "aliases": [],
                  "description": "Enter the number of repeated attempts required to discover a device.",
                  "default": "3",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "timeout": {
                  "aliases": [],
                  "description": "Enter the time in seconds after which a job must stop running.",
                  "default": "60",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "username": {
                  "aliases": [],
                  "description": "Provide a username for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "vmware": {
              "aliases": [],
              "description": "VMWARE protocol.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "ca_check": {
                  "aliases": [],
                  "description": "Enable the Certificate Authority (CA) check.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "certificate_data": {
                  "aliases": [],
                  "description": "Provide certificate data for the CA check.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "cn_check": {
                  "aliases": [],
                  "description": "Enable the Common Name (CN) check.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "domain": {
                  "aliases": [],
                  "description": "Provide a domain for the protocol.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "password": {
                  "aliases": [],
                  "description": "Provide a password for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Enter the port number that the job must use to discover the devices.",
                  "default": "443",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "retries": {
                  "aliases": [],
                  "description": "Enter the number of repeated attempts required to discover a device.",
                  "default": "3",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "timeout": {
                  "aliases": [],
                  "description": "Enter the time in seconds after which a job must stop running.",
                  "default": "60",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "username": {
                  "aliases": [],
                  "description": "Provide a username for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "wsman": {
              "aliases": [],
              "description": "Web Services-Management (WS-Man).",
              "type": "dict",
              "required": false,
              "suboptions": {
                "ca_check": {
                  "aliases": [],
                  "description": "Enable the Certificate Authority (CA) check.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "certificate_data": {
                  "aliases": [],
                  "description": "Provide certificate data for the CA check.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "cn_check": {
                  "aliases": [],
                  "description": "Enable the Common Name (CN) check.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "domain": {
                  "aliases": [],
                  "description": "Provide a domain for the protocol.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "password": {
                  "aliases": [],
                  "description": "Provide a password for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Enter the port number that the job must use to discover the devices.",
                  "default": "443",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "retries": {
                  "aliases": [],
                  "description": "Enter the number of repeated attempts required to discover a device.",
                  "default": "3",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "timeout": {
                  "aliases": [],
                  "description": "Enter the time in seconds after which a job must stop running.",
                  "default": "60",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "username": {
                  "aliases": [],
                  "description": "Provide a username for the protocol.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "discovery_id": {
          "aliases": [],
          "description": "ID of the discovery configuration group.\nThis value is DiscoveryConfigGroupId in the return values under discovery_status.\nIt is mutually exclusive with I(discovery_job_name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "discovery_job_name": {
          "aliases": [],
          "description": "Name of the discovery configuration job.\nIt is mutually exclusive with I(discovery_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email_recipient": {
          "aliases": [],
          "description": "Enter the email address to which notifications are to be sent about the discovery job status. Configure the SMTP settings to allow sending notifications to an email address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ignore_partial_failure": {
          "aliases": [],
          "description": "Provides the option to ignore partial failures. Partial failures occur when there is a combination of both discovered and undiscovered IPs.\nIf C(False), then the partial failure is not ignored, and the module will error out.\nIf C(True), then the partial failure is ignored.\nThis option is only applicable if I(job_wait) is C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_wait": {
          "aliases": [],
          "description": "Provides the option to wait for job completion.\nThis option is applicable when I(state) is C(present).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_wait_timeout": {
          "aliases": [],
          "description": "The maximum wait time of I(job_wait) in seconds. The job is tracked only for this duration.\nThis option is applicable when I(job_wait) is C(True).",
          "default": "10800",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "New name of the discovery configuration job.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schedule": {
          "aliases": [],
          "description": "Provides the option to schedule the discovery job.\nIf C(RunLater) is selected, then I(cron) must be specified.",
          "default": "RunNow",
          "type": "str",
          "required": false,
          "choices": [
            "RunNow",
            "RunLater"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) creates a discovery job or modifies an existing discovery job.\nI(discovery_job_name) is mandatory for the creation of a new discovery job.\nIf multiple discoveries of the same I(discovery_job_name) exist, then the new discovery job will not be created.\nC(absent) deletes an existing discovery job(s) with the specified I(discovery_job_name).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "trap_destination": {
          "aliases": [],
          "description": "Enable OpenManage Enterprise to receive the incoming SNMP traps from the discovered devices.\nThis is effective only for servers discovered by using their iDRAC interface.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Create, modify, or delete a discovery job on OpenManage Enterprise",
      "version_added": "3.3.0"
    },
    "examples": "\n---\n- name: Discover servers in a range\n  dellemc.openmanage.ome_discovery:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    discovery_job_name: \"Discovery_server_1\"\n    discovery_config_targets:\n      - network_address_detail:\n          - 192.96.24.1-192.96.24.255\n        device_types:\n          - SERVER\n        wsman:\n          username: user\n          password: password\n\n- name: Discover chassis in a range\n  dellemc.openmanage.ome_discovery:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    discovery_job_name: \"Discovery_chassis_1\"\n    discovery_config_targets:\n      - network_address_detail:\n          - 192.96.24.1-192.96.24.255\n        device_types:\n          - CHASSIS\n        wsman:\n          username: user\n          password: password\n\n- name: Discover switches in a range\n  dellemc.openmanage.ome_discovery:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    discovery_job_name: \"Discover_switch_1\"\n    discovery_config_targets:\n      - network_address_detail:\n          - 192.96.24.1-192.96.24.255\n        device_types:\n          - NETWORK SWITCH\n        snmp:\n          community: snmp_creds\n\n- name: Discover storage in a range\n  dellemc.openmanage.ome_discovery:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    discovery_job_name: \"Discover_storage_1\"\n    discovery_config_targets:\n      - network_address_detail:\n          - 192.96.24.1-192.96.24.255\n        device_types:\n          - STORAGE\n        storage:\n          username: user\n          password: password\n        snmp:\n          community: snmp_creds\n\n- name: Delete a discovery job\n  dellemc.openmanage.ome_discovery:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"absent\"\n    discovery_job_name: \"Discovery-123\"\n\n- name: Schedule the discovery of multiple devices ignoring partial failure and enable trap to receive alerts\n  dellemc.openmanage.ome_discovery:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    discovery_job_name: \"Discovery-123\"\n    discovery_config_targets:\n      - network_address_detail:\n          - 192.96.24.1-192.96.24.255\n          - 192.96.0.0/24\n          - 192.96.26.108\n        device_types:\n          - SERVER\n          - CHASSIS\n          - STORAGE\n          - NETWORK SWITCH\n        wsman:\n          username: wsman_user\n          password: wsman_pwd\n        redfish:\n          username: redfish_user\n          password: redfish_pwd\n        snmp:\n          community: snmp_community\n      - network_address_detail:\n          - 192.96.25.1-192.96.25.255\n          - ipmihost\n          - esxiserver\n          - sshserver\n        device_types:\n          - SERVER\n        ssh:\n          username: ssh_user\n          password: ssh_pwd\n        vmware:\n          username: vm_user\n          password: vmware_pwd\n        ipmi:\n          username: ipmi_user\n          password: ipmi_pwd\n    schedule: RunLater\n    cron: \"0 0 9 ? * MON,WED,FRI *\"\n    ignore_partial_failure: True\n    trap_destination: True\n    community_string: True\n    email_recipient: test_email@company.com\n\n- name: Discover servers with ca check enabled\n  dellemc.openmanage.ome_discovery:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    discovery_job_name: \"Discovery_server_ca1\"\n    discovery_config_targets:\n      - network_address_detail:\n          - 192.96.24.108\n        device_types:\n          - SERVER\n        wsman:\n          username: user\n          password: password\n          ca_check: True\n          certificate_data: \"{{ lookup('ansible.builtin.file', '/path/to/certificate_data_file') }}\"\n\n- name: Discover chassis with ca check enabled data\n  dellemc.openmanage.ome_discovery:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    discovery_job_name: \"Discovery_chassis_ca1\"\n    discovery_config_targets:\n      - network_address_detail:\n          - 192.96.24.108\n        device_types:\n          - CHASSIS\n        redfish:\n          username: user\n          password: password\n          ca_check: True\n          certificate_data: \"-----BEGIN CERTIFICATE-----\\r\\n\n          ABCDEFGHIJKLMNOPQRSTUVWXYZaqwertyuiopasdfghjklzxcvbnmasdasagasvv\\r\\n\n          ABCDEFGHIJKLMNOPQRSTUVWXYZaqwertyuiopasdfghjklzxcvbnmasdasagasvv\\r\\n\n          ABCDEFGHIJKLMNOPQRSTUVWXYZaqwertyuiopasdfghjklzxcvbnmasdasagasvv\\r\\n\n          aqwertyuiopasdfghjklzxcvbnmasdasagasvv=\\r\\n\n          -----END CERTIFICATE-----\"\n"
  },
  "dellemc.openmanage.ome_domain_user_groups": {
    "doc": {
      "description": "This module allows to create, modify, or delete an Active Directory user group on OpenManage Enterprise and OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "This module supports C(check_mode) and idempotency.\nRun this module from a system that has direct access to OpenManage Enterprise or OpenManage Enterprise Modular.",
      "options": {
        "directory_id": {
          "aliases": [],
          "description": "The ID of the Active Directory.\nI(directory_id) is mutually exclusive with I(directory_name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "directory_name": {
          "aliases": [],
          "description": "The directory name set while adding the Active Directory.\nI(directory_name) is mutually exclusive with I(directory_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_password": {
          "aliases": [],
          "description": "Active directory domain password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_username": {
          "aliases": [],
          "description": "Active directory domain username.\nExample: username@domain or domain\\username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group_name": {
          "aliases": [],
          "description": "The desired Active Directory user group name to be imported or removed.\nExamples for user group name: Administrator or Account Operators or Access Control Assistance Operator.\nI(group_name) value is case insensitive.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "The desired roles and privilege for the imported Active Directory user group.\nOpenManage Enterprise Modular Roles: CHASSIS ADMINISTRATOR, COMPUTE MANAGER, STORAGE MANAGER, FABRIC MANAGER, VIEWER.\nOpenManage Enterprise Roles: ADMINISTRATOR, DEVICE MANAGER, VIEWER.\nI(role) value is case insensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) imports or modifies the Active Directory user group.\nC(absent) deletes an existing Active Directory user group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Create, modify, or delete an Active Directory user group on OpenManage Enterprise and OpenManage Enterprise Modular",
      "version_added": "4.0.0"
    },
    "examples": "\n---\n- name: Create Active Directory user group\n  dellemc.openmanage.ome_domain_user_groups:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: present\n    group_name: account operators\n    directory_name: directory_name\n    role: administrator\n    domain_username: username@domain\n    domain_password: domain_password\n\n- name: Update Active Directory user group\n  dellemc.openmanage.ome_domain_user_groups:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: present\n    group_name: account operators\n    role: viewer\n\n- name: Delete active directory user group\n  dellemc.openmanage.ome_domain_user_groups:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: absent\n    group_name: administrators\n"
  },
  "dellemc.openmanage.ome_firmware": {
    "doc": {
      "description": "This module updates the firmware of PowerEdge devices and all its components through OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module does not support C(check_mode).",
      "options": {
        "baseline_name": {
          "aliases": [],
          "description": "Enter the baseline name to update the firmware of all devices or list of devices that are not complaint.\nThis option is mutually exclusive with I(dup_file) and I(device_group_names).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "components": {
          "aliases": [],
          "description": "List of components to be updated.\nIf not provided, all components applicable are considered.\nThis option is case sensitive.\nThis is applicable to I(device_service_tag), I(device_id), and I(baseline_name).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "device_group_names": {
          "aliases": [],
          "description": "Enter the name of the device group that contains the devices on which firmware needs to be updated.\nThis option is mutually exclusive with I(device_id) and I(device_service_tag).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "List of ids of the targeted device.\nEither I(device_id) or I(device_service_tag) can be used individually or together.\nThis option is mutually exclusive with I(device_group_names) and I(devices).",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "List of service tags of the targeted devices.\nEither I(device_id) or I(device_service_tag) can be used individually or together.\nThis option is mutually exclusive with I(device_group_names) and I(devices).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "devices": {
          "aliases": [],
          "description": "This option allows to select components on each device for firmware update.\nThis option is mutually exclusive with I(dup_file), I(device_group_names), I(device_id), and I(device_service_tag).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "components": {
              "aliases": [],
              "description": "The target components to be updated. If not specified, all applicable device components are considered.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The id of the target device to be updated.\nThis option is mutually exclusive with I(service_tag).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "service_tag": {
              "aliases": [],
              "description": "The service tag of the target device to be updated.\nThis option is mutually exclusive with I(id).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "dup_file": {
          "aliases": [],
          "description": "The path of the Dell Update Package (DUP) file that contains the firmware or drivers required to update the target system device or individual device components.\nThis is mutually exclusive with I(baseline_name), I(components), and I(devices).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schedule": {
          "aliases": [],
          "description": "Select the schedule for the firmware update.\nif C(StageForNextReboot) is chosen, the firmware will be staged and updated during the next reboot of the target device.\nif C(RebootNow) will apply the firmware updates immediately.",
          "default": "RebootNow",
          "type": "str",
          "required": false,
          "choices": [
            "RebootNow",
            "StageForNextReboot"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Update firmware on PowerEdge devices and its components through OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Update firmware from DUP file using device ids\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id:\n      - 11111\n      - 22222\n    dup_file: \"/path/Chassis-System-Management_Firmware_6N9WN_WN64_1.00.01_A00.EXE\"\n\n- name: Update firmware from a DUP file using a device service tags\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_service_tag:\n      - KLBR111\n      - KLBR222\n    dup_file: \"/path/Network_Firmware_NTRW0_WN64_14.07.07_A00-00_01.EXE\"\n\n- name: Update firmware from a DUP file using a device group names\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_group_names:\n      - servers\n    dup_file: \"/path/BIOS_87V69_WN64_2.4.7.EXE\"\n\n- name: Update firmware using baseline name\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: baseline_devices\n\n- name: Stage firmware for the next reboot using baseline name\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: baseline_devices\n    schedule: StageForNextReboot\n\n- name: \"Update firmware using baseline name and components.\"\n  dellemc.openmanage.ome_firmwar:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: baseline_devices\n    components:\n      - BIOS\n\n- name: Update firmware of device components from a DUP file using a device ids in a baseline\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: baseline_devices\n    device_id:\n      - 11111\n      - 22222\n    components:\n      - iDRAC with Lifecycle Controller\n\n- name: Update firmware of device components from a baseline using a device service tags under a baseline\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: baseline_devices\n    device_service_tag:\n      - KLBR111\n      - KLBR222\n    components:\n      - IOM-SAS\n\n- name: Update firmware using baseline name with a device id and required components\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: baseline_devices\n    devices:\n      - id: 12345\n        components:\n         - Lifecycle Controller\n      - id: 12346\n        components:\n          - Enterprise UEFI Diagnostics\n          - BIOS\n\n- name: \"Update firmware using baseline name with a device service tag and required components.\"\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: baseline_devices\n    devices:\n      - service_tag: ABCDE12\n        components:\n          - PERC H740P Adapter\n          - BIOS\n      - service_tag: GHIJK34\n        components:\n          - OS Drivers Pack\n\n- name: \"Update firmware using baseline name with a device service tag or device id and required components.\"\n  dellemc.openmanage.ome_firmware:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: baseline_devices\n    devices:\n      - service_tag: ABCDE12\n        components:\n          - BOSS-S1 Adapter\n          - PowerEdge Server BIOS\n      - id: 12345\n        components:\n          - iDRAC with Lifecycle Controller\n"
  },
  "dellemc.openmanage.ome_firmware_baseline": {
    "doc": {
      "description": "This module allows to create, modify, or delete a firmware baseline on OpenManage Enterprise or OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise or OpenManage Enterprise Modular.\nI(device_group_names) option is not applicable for OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "baseline_description": {
          "aliases": [],
          "description": "Description for the baseline being created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "baseline_id": {
          "aliases": [],
          "description": "ID of the existing baseline.\nThis option is mutually exclusive with I(baseline_name).",
          "type": "int",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "baseline_name": {
          "aliases": [],
          "description": "Name of the the baseline.\nThis option is mutually exclusive with I(baseline_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "catalog_name": {
          "aliases": [],
          "description": "Name of the catalog to be associated with the baseline.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_group_names": {
          "aliases": [],
          "description": "List of group names.\nThis option is mutually exclusive with I(device_ids) and I(device_service_tags).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "device_ids": {
          "aliases": [],
          "description": "List of device IDs.\nThis option is mutually exclusive with I(device_service_tags) and I(device_group_names).",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "device_service_tags": {
          "aliases": [],
          "description": "List of device service tags.\nThis option is mutually exclusive with I(device_ids) and I(device_group_names).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "downgrade_enabled": {
          "aliases": [],
          "description": "Indicates whether firmware downgrade is allowed for the devices in the baseline.\nThis value will be set to C(True) by default, if not provided during baseline creation.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "is_64_bit": {
          "aliases": [],
          "description": "Indicates if the repository contains 64-bit DUPs.\nThis value will be set to C(True) by default, if not provided during baseline creation.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_wait": {
          "aliases": [],
          "description": "Provides the option to wait for job completion.\nThis option is applicable when I(state) is C(present).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "job_wait_timeout": {
          "aliases": [],
          "description": "The maximum wait time of I(job_wait) in seconds. The job is tracked only for this duration.\nThis option is applicable when I(job_wait) is C(True).",
          "default": "600",
          "type": "int",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "new_baseline_name": {
          "aliases": [],
          "description": "New name of the baseline.",
          "type": "str",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) creates or modifies a baseline.\nC(absent) deletes an existing baseline.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Create, modify, or delete a firmware baseline on OpenManage Enterprise or OpenManage Enterprise Modular",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Create baseline for device IDs\n  dellemc.openmanage.ome_firmware_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: \"baseline_name\"\n    baseline_description: \"baseline_description\"\n    catalog_name: \"catalog_name\"\n    device_ids:\n      - 1010\n      - 2020\n\n- name: Create baseline for servicetags\n  dellemc.openmanage.ome_firmware_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: \"baseline_name\"\n    baseline_description: \"baseline_description\"\n    catalog_name: \"catalog_name\"\n    device_service_tags:\n      - \"SVCTAG1\"\n      - \"SVCTAG2\"\n\n- name: Create baseline for device groups without job tracking\n  dellemc.openmanage.ome_firmware_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: \"baseline_name\"\n    baseline_description: \"baseline_description\"\n    catalog_name: \"catalog_name\"\n    device_group_names:\n      - \"Group1\"\n      - \"Group2\"\n    job_wait: no\n\n- name: Modify an existing baseline\n  dellemc.openmanage.ome_firmware_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: \"existing_baseline_name\"\n    new_baseline_name: \"new_baseline_name\"\n    baseline_description: \"new baseline_description\"\n    catalog_name: \"catalog_other\"\n    device_group_names:\n      - \"Group3\"\n      - \"Group4\"\n      - \"Group5\"\n    downgrade_enabled: no\n    is_64_bit: yes\n\n- name: Delete a baseline\n  dellemc.openmanage.ome_firmware_baseline:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: absent\n    baseline_name: \"baseline_name\"\n"
  },
  "dellemc.openmanage.ome_firmware_baseline_compliance_info": {
    "doc": {
      "description": "This module allows to retrieve firmware compliance for a list of devices, or against a specified baseline on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "baseline_name": {
          "aliases": [],
          "description": "Name of the baseline, for which the device compliance report is generated.\nThis option is mandatory for generating baseline based device compliance report.\nI(baseline_name) is mutually exclusive with I(device_ids), I(device_service_tags) and I(device_group_names).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_group_names": {
          "aliases": [],
          "description": "A list of group names for device based compliance report.\nEither I(device_ids), I(device_service_tags) or I(device_group_names) is required to generate device based compliance report.\nI(device_group_names) is mutually exclusive with I(device_ids), I(device_service_tags) and I(baseline_name).\nDevices without reports are ignored.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "device_ids": {
          "aliases": [],
          "description": "A list of unique identifier for device based compliance report.\nEither I(device_ids), I(device_service_tags) or I(device_group_names) is required to generate device based compliance report.\nI(device_ids) is mutually exclusive with I(device_service_tags), I(device_group_names) and I(baseline_name).\nDevices without reports are ignored.",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "device_service_tags": {
          "aliases": [],
          "description": "A list of service tags for device based compliance report.\nEither I(device_ids), I(device_service_tags) or I(device_group_names) is required to generate device based compliance report.\nI(device_service_tags) is mutually exclusive with I(device_ids), I(device_group_names) and I(baseline_name).\nDevices without reports are ignored.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Retrieves baseline compliance details on OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Retrieves device based compliance report for specified device IDs\n  dellemc.openmanage.ome_firmware_baseline_compliance_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_ids:\n        - 11111\n        - 22222\n\n- name: Retrieves device based compliance report for specified service Tags\n  dellemc.openmanage.ome_firmware_baseline_compliance_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_service_tags:\n        - MXL1234\n        - MXL4567\n\n- name: Retrieves device based compliance report for specified group names\n  dellemc.openmanage.ome_firmware_baseline_compliance_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_group_names:\n        - \"group1\"\n        - \"group2\"\n\n- name: Retrieves device compliance report for a specified baseline\n  dellemc.openmanage.ome_firmware_baseline_compliance_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: \"baseline_name\"\n"
  },
  "dellemc.openmanage.ome_firmware_baseline_info": {
    "doc": {
      "description": "This module retrieves the list and details of all the baselines on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "baseline_name": {
          "aliases": [],
          "description": "Name of the baseline.If I(baseline_name) is not provided, all the available firmware baselines are returned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Retrieves baseline details from OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Retrieve details of all the available firmware baselines\n  dellemc.openmanage.ome_firmware_baseline_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n\n- name: Retrieve details of a specific firmware baseline identified by its baseline name\n  dellemc.openmanage.ome_firmware_baseline_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    baseline_name: \"baseline_name\"\n"
  },
  "dellemc.openmanage.ome_firmware_catalog": {
    "doc": {
      "description": "This module allows to create, modify, or delete a firmware catalog on OpenManage Enterprise or OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "If I(repository_password) is provided, then the module always reports the changed status.\nRun this module from a system that has direct access to DellEMC OpenManage Enterprise or OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "catalog_description": {
          "aliases": [],
          "description": "Description for the catalog.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "catalog_id": {
          "aliases": [],
          "description": "ID of the catalog.\nThis option is mutually exclusive with I(catalog_name).\nProvide the list of firmware catalog IDs that are supported when I(state) is C(absent).",
          "type": "list",
          "required": false,
          "elements": "int",
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "catalog_name": {
          "aliases": [],
          "description": "Name of the firmware catalog to be created.\nThis option is mutually exclusive with I(catalog_id).\nProvide the list of firmware catalog names that are supported when I(state) is C(absent).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "check_certificate": {
          "aliases": [],
          "description": "The certificate warnings are ignored when I(repository_type) is HTTPS. If C(True). If not, certificate warnings are not ignored.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "file_name": {
          "aliases": [],
          "description": "Catalog file name associated with the I(source_path).\nThis option is ignored when I(repository_type) is C(DELL_ONLINE).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_wait": {
          "aliases": [],
          "description": "Provides the option to wait for job completion.\nThis option is applicable when I(state) is C(present).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "job_wait_timeout": {
          "aliases": [],
          "description": "The maximum wait time of I(job_wait) in seconds. The job is tracked only for this duration.\nThis option is applicable when I(job_wait) is C(True).",
          "default": "600",
          "type": "int",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "new_catalog_name": {
          "aliases": [],
          "description": "New name of the firmware catalog.",
          "type": "str",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "repository_domain": {
          "aliases": [],
          "description": "Domain name of the repository.\nThis option is ignored when I(repository_type) is C(DELL_ONLINE).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository_password": {
          "aliases": [],
          "description": "Password to access the repository.\nThis option is mandatory when I(repository_type) is CIFS.\nThis option is ignored when I(repository_type) is C(DELL_ONLINE).\nC(NOTE) The module always reports the changed status, when this is provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository_type": {
          "aliases": [],
          "description": "Type of repository. The supported types are NFS, CIFS, HTTP, HTTPS,and DELL_ONLINE.",
          "type": "str",
          "required": false,
          "choices": [
            "NFS",
            "CIFS",
            "HTTP",
            "HTTPS",
            "DELL_ONLINE"
          ],
          "suboptions": {}
        },
        "repository_username": {
          "aliases": [],
          "description": "User name of the repository where the catalog is stored.\nThis option is mandatory when I(repository_type) is CIFS.\nThis option is ignored when I(repository_type) is C(DELL_ONLINE).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The IP address of the system where the firmware catalog is stored on the local network.\nBy default, this option is set to downloads.dell.com when I(repository_type) is C(DELL_ONLINE).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_path": {
          "aliases": [],
          "description": "Specify the complete path of the catalog file location without the file name.\nThis is option ignored when I(repository_type) is C(DELL_ONLINE).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) creates or modifies a catalog.\nC(absent) deletes an existing catalog.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Create, modify, or delete a firmware catalog on OpenManage Enterprise or OpenManage Enterprise Modular",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Create a catalog from HTTPS repository\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    catalog_name: \"catalog_name\"\n    catalog_description: \"catalog_description\"\n    repository_type: \"HTTPS\"\n    source: \"downloads.dell.com\"\n    source_path: \"catalog\"\n    file_name: \"catalog.gz\"\n    check_certificate: True\n\n- name: Create a catalog from HTTP repository\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    catalog_name: \"catalog_name\"\n    catalog_description: \"catalog_description\"\n    repository_type: \"HTTP\"\n    source: \"downloads.dell.com\"\n    source_path: \"catalog\"\n    file_name: \"catalog.gz\"\n\n- name: Create a catalog using CIFS share\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    catalog_name: \"catalog_name\"\n    catalog_description: \"catalog_description\"\n    repository_type: \"CIFS\"\n    source: \"192.167.0.1\"\n    source_path: \"cifs/R940\"\n    file_name: \"catalog.gz\"\n    repository_username: \"repository_username\"\n    repository_password: \"repository_password\"\n    repository_domain: \"repository_domain\"\n\n- name: Create a catalog using NFS share\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    catalog_name: \"catalog_name\"\n    catalog_description: \"catalog_description\"\n    repository_type: \"NFS\"\n    source: \"192.166.0.2\"\n    source_path: \"/nfs/R940\"\n    file_name: \"catalog.xml\"\n\n- name: Create a catalog using repository from Dell.com\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    catalog_name: \"catalog_name\"\n    catalog_description: \"catalog_description\"\n    repository_type: \"DELL_ONLINE\"\n    check_certificate: True\n\n- name: Modify a catalog using a repository from CIFS share\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    catalog_name: \"catalog_name\"\n    catalog_description: \"new catalog_description\"\n    repository_type: \"CIFS\"\n    source: \"192.167.0.2\"\n    source_path: \"cifs/R941\"\n    file_name: \"catalog1.gz\"\n    repository_username: \"repository_username\"\n    repository_password: \"repository_password\"\n    repository_domain: \"repository_domain\"\n\n- name: Modify a catalog using a repository from Dell.com\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    catalog_id: 10\n    new_catalog_name: \"new_catalog_name\"\n    repository_type: \"DELL_ONLINE\"\n    catalog_description: \"catalog_description\"\n\n- name: Delete catalog using catalog name\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: absent\n    catalog_name: [\"catalog_name1\", \"catalog_name2\"]\n\n- name: Delete catalog using catalog id\n  dellemc.openmanage.ome_firmware_catalog:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: absent\n    catalog_id: [11, 34]\n"
  },
  "dellemc.openmanage.ome_groups": {
    "doc": {
      "description": "This module allows to create, modify, and delete static device groups on OpenManage Enterprise.",
      "has_action": false,
      "notes": "This module manages only static device groups on Dell EMC OpenManage Enterprise.\nIf a device group with the name I(parent_group_name) does not exist, a new device group with the same name is created.\nMake sure the entered parent group is not the descendant of the provided group.\nRun this module from a system that has direct access to Dell EMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "description": {
          "aliases": [],
          "description": "Description for the device group.\nThis is applicable only when I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group_id": {
          "aliases": [],
          "description": "ID of the device group to be created, modified, or deleted.\nIf I(state) is absent, multiple IDs can be provided.\nThis option is mutually exclusive with I(name).",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the device group to be created, modified, or deleted.\nIf I(state) is absent, multiple names can be provided.\nThis option is case insensitive.\nThis option is mutually exclusive with I(group_id).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "New name for the existing device group.\nThis is applicable only when I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parent_group_id": {
          "aliases": [],
          "description": "ID of the parent device group under which the device group to be created or modified.\nThis is applicable only when I(state) is C(present).\nThis option is mutually exclusive with I(parent_group_name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "parent_group_name": {
          "aliases": [],
          "description": "Name of the parent device group under which the device group to be created or modified.\nThis is applicable only when I(state) is C(present).\nC(NOTE) If device group with such a name does not exist, device group with I(parent_group_name) is created.\nThis option is case insensitive.\nThis option is mutually exclusive with I(parent_group_id).",
          "default": "Static Groups",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) allows to create or modify a device group.\nC(absent) allows to delete a device group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Manages static device groups on OpenManage Enterprise",
      "version_added": "3.5.0"
    },
    "examples": "\n---\n- name: Create a new device group\n  dellemc.openmanage.ome_groups:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    name: \"group 1\"\n    description: \"Group 1 description\"\n    parent_group_name: \"group parent 1\"\n\n- name: Modify a device group using the group ID\n  dellemc.openmanage.ome_groups:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    group_id: 1234\n    description: \"Group description updated\"\n    parent_group_name: \"group parent 2\"\n\n- name: Delete a device group using the device group name\n  dellemc.openmanage.ome_groups:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: absent\n    name: \"group 1\"\n\n- name: Delete multiple device groups using the group IDs\n  dellemc.openmanage.ome_groups:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: absent\n    group_id:\n      - 1234\n      - 5678\n"
  },
  "dellemc.openmanage.ome_identity_pool": {
    "doc": {
      "description": "This module allows to create, modify, or delete a single identity pool on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module does not support C(check_mode).",
      "options": {
        "ethernet_settings": {
          "aliases": [],
          "description": "Applicable for creating and modifying an identity pool using Ethernet settings.\nI(starting_mac_address) and I(identity_count) are required to create an identity pool.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "identity_count": {
              "aliases": [],
              "description": "Number of MAC addresses.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "starting_mac_address": {
              "aliases": [],
              "description": "Starting MAC address of the ethernet setting.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fc_settings": {
          "aliases": [],
          "description": "Applicable for creating and modifying an identity pool using fibre channel(FC) settings.\nThis option allows OpenManage Enterprise to generate a Worldwide port name (WWPN) and Worldwide node name (WWNN) address.\nThe value 0x2001 is beginning to the starting address for the generation of a WWPN, and 0x2000 for a WWNN.\nI(starting_address) and I(identity_count) are required to create an identity pool.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "identity_count": {
              "aliases": [],
              "description": "Number of MAC addresses.I(identity_count) is required to option to create FC settings.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "starting_address": {
              "aliases": [],
              "description": "Starting MAC Address of FC setting.I(starting_address) is required to option to create FC settings.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fcoe_settings": {
          "aliases": [],
          "description": "Applicable for creating and modifying an identity pool using FCoE settings.\nI(starting_mac_address) and I(identity_count) are required to create an identity pool.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "identity_count": {
              "aliases": [],
              "description": "Number of MAC addresses.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "starting_mac_address": {
              "aliases": [],
              "description": "Starting MAC Address of the FCoE setting.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "iscsi_settings": {
          "aliases": [],
          "description": "Applicable for creating and modifying an identity pool using ISCSI settings.\nI(starting_mac_address), I(identity_count), I(iqn_prefix), I(ip_range) and I(subnet_mask) are required to create an identity pool.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "identity_count": {
              "aliases": [],
              "description": "Number of MAC addresses.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "initiator_config": {
              "aliases": [],
              "description": "Applicable for creating and modifying an identity pool using iSCSI Initiator settings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "iqn_prefix": {
                  "aliases": [],
                  "description": "IQN prefix addresses.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "initiator_ip_pool_settings": {
              "aliases": [],
              "description": "Applicable for creating and modifying an identity pool using ISCSI Initiator IP pool settings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "gateway": {
                  "aliases": [],
                  "description": "IP address of gateway.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "ip_range": {
                  "aliases": [],
                  "description": "Range of non-multicast IP addresses.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "primary_dns_server": {
                  "aliases": [],
                  "description": "IP address of the primary DNS server.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "secondary_dns_server": {
                  "aliases": [],
                  "description": "IP address of the secondary DNS server.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "subnet_mask": {
                  "aliases": [],
                  "description": "Subnet mask for I(ip_range).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "starting_mac_address": {
              "aliases": [],
              "description": "Starting MAC address of the iSCSI setting.This is required option for iSCSI setting.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "new_pool_name": {
          "aliases": [],
          "description": "After creating an identity pool, I(pool_name) can be changed to I(new_pool_name).\nThis option is ignored when creating an identity pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pool_description": {
          "aliases": [],
          "description": "Description of the identity pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pool_name": {
          "aliases": [],
          "description": "This option is mandatory for I(state) when creating, modifying and deleting an identity pool.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) modifies an existing identity pool. If the provided I (pool_name) does not exist, it creates an identity pool. - C(absent) deletes an existing identity pool.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Manages identity pool settings on OpenManage Enterprise",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Create an identity pool using ethernet, FCoE, iSCSI and FC settings\n  dellemc.openmanage.ome_identity_pool:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: present\n    pool_name: \"pool1\"\n    pool_description: \"Identity pool with Ethernet, FCoE, iSCSI and FC settings\"\n    ethernet_settings:\n        starting_mac_address: \"50:50:50:50:50:00\"\n        identity_count: 60\n    fcoe_settings:\n        starting_mac_address: \"70:70:70:70:70:00\"\n        identity_count: 75\n    iscsi_settings:\n        starting_mac_address: \"60:60:60:60:60:00\"\n        identity_count: 30\n        initiator_config:\n            iqn_prefix: \"iqn.myprefix.\"\n        initiator_ip_pool_settings:\n            ip_range: \"10.33.0.1-10.33.0.255\"\n            subnet_mask: \"255.255.255.0\"\n            gateway: \"192.168.4.1\"\n            primary_dns_server : \"10.8.8.8\"\n            secondary_dns_server : \"8.8.8.8\"\n    fc_settings:\n        starting_address: \"30:30:30:30:30:00\"\n        identity_count: 45\n\n- name: Create an identity pool using only ethernet settings\n  dellemc.openmanage.ome_identity_pool:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    pool_name: \"pool2\"\n    pool_description: \"create identity pool with ethernet\"\n    ethernet_settings:\n        starting_mac_address: \"aa-bb-cc-dd-ee-aa\"\n        identity_count: 80\n\n- name: Modify an identity pool\n  dellemc.openmanage.ome_identity_pool:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    pool_name: \"pool2\"\n    new_pool_name: \"pool3\"\n    pool_description: \"modifying identity pool with ethernet and fcoe settings\"\n    ethernet_settings:\n        starting_mac_address: \"90-90-90-90-90-90\"\n        identity_count: 61\n    fcoe_settings:\n        starting_mac_address: \"aabb.ccdd.5050\"\n        identity_count: 77\n\n- name: Modify an identity pool using iSCSI and FC settings\n  dellemc.openmanage.ome_identity_pool:\n    hostname: \"{{hostname}}\"\n    username: \"{{username}}\"\n    password: \"{{password}}\"\n    pool_name: \"pool_new\"\n    new_pool_name: \"pool_new2\"\n    pool_description: \"modifying identity pool with iscsi and fc settings\"\n    iscsi_settings:\n      identity_count: 99\n      initiator_config:\n        iqn_prefix: \"iqn1.myprefix2.\"\n      initiator_ip_pool_settings:\n        gateway: \"192.168.4.5\"\n    fc_settings:\n      starting_address: \"10:10:10:10:10:10\"\n      identity_count: 98\n\n- name: Delete an identity pool\n  dellemc.openmanage.ome_identity_pool:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"absent\"\n    pool_name: \"pool2\"\n"
  },
  "dellemc.openmanage.ome_job_info": {
    "doc": {
      "description": "This module retrieves job details for a given job ID or an entire job queue on OpenMange Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "Unique ID of the job.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "system_query_options": {
          "aliases": [],
          "description": "Options for pagination of the output.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "filter": {
              "aliases": [],
              "description": "Filter records by the values supported.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "skip": {
              "aliases": [],
              "description": "Number of records to skip. Default value is 0.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "top": {
              "aliases": [],
              "description": "Number of records to return. Default value is 100.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Get job details for a given job ID or an entire job queue on OpenMange Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Get all jobs details\n  dellemc.openmanage.ome_job_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n\n- name: Get job details for id\n  dellemc.openmanage.ome_job_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    job_id: 12345\n\n- name: Get filtered job details\n  dellemc.openmanage.ome_job_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    system_query_options:\n      top: 2\n      skip: 1\n      filter: \"JobType/Id eq 8\"\n\n"
  },
  "dellemc.openmanage.ome_network_port_breakout": {
    "doc": {
      "description": "This module allows to automate breaking out of IOMs in fabric mode into logical sub ports.\nThe port breakout operation is only supported in OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "breakout_type": {
          "aliases": [],
          "description": "The preferred breakout type. For example, 4X10GE.\nTo revoke the default breakout configuration, enter 'HardwareDefault'.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "target_port": {
          "aliases": [],
          "description": "The ID of the port in the switch to breakout. Enter the port ID in the format: service tag:port. For example, 2HB7NX2:ethernet1/1/13.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "This module allows to automate the port portioning or port breakout to logical sub ports",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Port breakout configuration\n  dellemc.openmanage.ome_network_port_breakout:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    target_port: \"2HB7NX2:phy-port1/1/11\"\n    breakout_type: \"1X40GE\"\n\n- name: Revoke the default breakout configuration\n  dellemc.openmanage.ome_network_port_breakout:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    target_port: \"2HB7NX2:phy-port1/1/11\"\n    breakout_type: \"HardwareDefault\"\n"
  },
  "dellemc.openmanage.ome_network_vlan": {
    "doc": {
      "description": "This module allows to,\nCreate a VLAN on OpenManage Enterprise.\nModify or delete an existing VLAN on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "description": {
          "aliases": [],
          "description": "Short description of the VLAN to be created or modified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Provide the I(name) of the VLAN to be created, deleted or modified.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Provide the I(name) of the VLAN to be modified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) creates a new VLAN or modifies an existing VLAN.\nC(absent) deletes an existing VLAN.\nI(WARNING) Deleting a VLAN can impact the network infrastructure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Types of supported VLAN networks.\nFor the description of each network type, use API U(https://I(hostname)/api/NetworkConfigurationService/NetworkTypes).",
          "type": "str",
          "required": false,
          "choices": [
            "General Purpose (Bronze)",
            "General Purpose (Silver)",
            "General Purpose (Gold)",
            "General Purpose (Platinum)",
            "Cluster Interconnect",
            "Hypervisor Management",
            "Storage - iSCSI",
            "Storage - FCoE",
            "Storage - Data Replication",
            "VM Migration",
            "VMWare FT Logging"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vlan_maximum": {
          "aliases": [],
          "description": "The maximum VLAN value of the range.\nA single value VLAN is created if the vlan_maximum and vlan_minmum values are the same.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vlan_minimum": {
          "aliases": [],
          "description": "The minimum VLAN value of the range.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Create, modify & delete a VLAN",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Create a VLAN range\n  dellemc.openmanage.ome_network_vlan:\n    hostname: \"{{hostname}}\"\n    username: \"{{username}}\"\n    password: \"{{password}}\"\n    state: present\n    name: \"vlan1\"\n    description: \"VLAN desc\"\n    type: \"General Purpose (Bronze)\"\n    vlan_minimum: 35\n    vlan_maximum: 40\n  tags: create_vlan_range\n\n- name: Create a VLAN with a single value\n  dellemc.openmanage.ome_network_vlan:\n    hostname: \"{{hostname}}\"\n    username: \"{{username}}\"\n    password: \"{{password}}\"\n    state: present\n    name: \"vlan2\"\n    description: \"VLAN desc\"\n    type: \"General Purpose (Bronze)\"\n    vlan_minimum: 127\n    vlan_maximum: 127\n  tags: create_vlan_single\n\n- name: Modify a VLAN\n  dellemc.openmanage.ome_network_vlan:\n    hostname: \"{{hostname}}\"\n    username: \"{{username}}\"\n    password: \"{{password}}\"\n    state: present\n    name: \"vlan1\"\n    new_name: \"vlan_gold1\"\n    description: \"new description\"\n    type: \"General Purpose (Gold)\"\n    vlan_minimum: 45\n    vlan_maximum: 50\n  tags: modify_vlan\n\n- name: Delete a VLAN\n  dellemc.openmanage.ome_network_vlan:\n    hostname: \"{{hostname}}\"\n    username: \"{{username}}\"\n    password: \"{{password}}\"\n    state: \"absent\"\n    name: \"vlan1\"\n  tags: delete_vlan\n"
  },
  "dellemc.openmanage.ome_network_vlan_info": {
    "doc": {
      "description": "This module allows to retrieve the following. - A list of all the network VLANs with their detailed information. - Information about a specific network VLAN using VLAN I(id) or VLAN I(name).",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "A unique identifier of the network VLAN available in the device.\nI(id) and I(name) are mutually exclusive.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A unique name of the network VLAN available in the device.\nI(name) and I(id) are mutually exclusive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Retrieves the information about networks VLAN(s) present in OpenManage Enterprise",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Retrieve information about all network VLANs(s) available in the device\n  dellemc.openmanage.ome_network_vlan_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n\n- name: Retrieve information about a network VLAN using the VLAN ID\n  dellemc.openmanage.ome_network_vlan_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    id: 12345\n\n- name: Retrieve information about a network VLAN using the VLAN name\n  dellemc.openmanage.ome_network_vlan_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    name: \"Network VLAN - 1\"\n"
  },
  "dellemc.openmanage.ome_powerstate": {
    "doc": {
      "description": "This module performs the supported power management operations on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "device_id": {
          "aliases": [],
          "description": "Targeted device id.\nI(device_id) is mutually exclusive with I(device_service_tag).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "Targeted device service tag.\nI(device_service_tag) is mutually exclusive with I(device_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "power_state": {
          "aliases": [],
          "description": "Desired end power state.",
          "type": "str",
          "required": true,
          "choices": [
            "on",
            "off",
            "coldboot",
            "warmboot",
            "shutdown"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Performs the power management operations on OpenManage Enterprise",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Power state operation based on device id\n  dellemc.openmanage.ome_powerstate:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id: 11111\n    power_state: \"off\"\n\n- name: Power state operation based on device service tag\n  dellemc.openmanage.ome_powerstate:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_service_tag: \"KLBR111\"\n    power_state: \"on\"\n\n- name: Power state operation based on list of device ids\n  dellemc.openmanage.ome_powerstate:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id: \"{{ item.device_id }}\"\n    power_state: \"{{ item.state }}\"\n  with_items:\n    - { \"device_id\": 11111, \"state\": \"on\" }\n    - { \"device_id\": 22222, \"state\": \"off\" }\n\n- name: Power state operation based on list of device service tags\n  dellemc.openmanage.ome_powerstate:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_service_tag: \"{{ item.service_tag }}\"\n    power_state: \"{{ item.state }}\"\n  with_items:\n    - { \"service_tag\": \"KLBR111\", \"state\": \"on\" }\n    - { \"service_tag\": \"KLBR222\", \"state\": \"off\" }\n"
  },
  "dellemc.openmanage.ome_profile": {
    "doc": {
      "description": "This module allows to create, modify, delete, assign, unassign, and migrate a profile on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module does not support C(check_mode).\nC(assign) operation on a already assigned profile will not redeploy.",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "Attributes for C(modify) and C(assign).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "Attributes": {
              "aliases": [],
              "description": "List of attributes to be modified, when I(command) is C(modify).\nList of attributes to be overridden when I(command) is C(assign).",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {}
            },
            "Options": {
              "aliases": [],
              "description": "Provides the different shut down options.\nThis is applicable when I(command) is C(assign).",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "Schedule": {
              "aliases": [],
              "description": "Schedule for profile deployment.\nThis is applicable when I(command) is C(assign).",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "boot_to_network_iso": {
          "aliases": [],
          "description": "Details of the Share iso.\nApplicable when I(command) is C(create), C(assign), and C(modify).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "boot_to_network": {
              "aliases": [],
              "description": "Enable or disable a network share.",
              "type": "bool",
              "required": true,
              "suboptions": {}
            },
            "iso_path": {
              "aliases": [],
              "description": "Specify the full ISO path including the share name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "iso_timeout": {
              "aliases": [],
              "description": "Set the number of hours that the network ISO file will remain mapped to the target device(s).",
              "default": "4",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "4",
                "8",
                "16"
              ],
              "suboptions": {}
            },
            "share_ip": {
              "aliases": [],
              "description": "IP address of the network share.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "share_password": {
              "aliases": [],
              "description": "User password when I(share_type) is C(CIFS).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "share_type": {
              "aliases": [],
              "description": "Type of network share.",
              "type": "str",
              "required": false,
              "choices": [
                "NFS",
                "CIFS"
              ],
              "suboptions": {}
            },
            "share_user": {
              "aliases": [],
              "description": "User name when I(share_type) is C(CIFS).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "workgroup": {
              "aliases": [],
              "description": "User workgroup when I(share_type) is C(CIFS).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "command": {
          "aliases": [],
          "description": "C(create) creates new profiles.\nC(modify) modifies an existing profile. Only I(name), I(description), I(boot_to_network_iso), and I(attributes) can be modified.\nC(delete) deletes an existing profile.\nC(assign) Deploys an existing profile on a target device and returns a task ID.\nC(unassign) unassigns a profile from a specified target and returns a task ID.\nC(migrate) migrates an existing profile and returns a task ID.",
          "default": "create",
          "type": "str",
          "required": false,
          "choices": [
            "create",
            "modify",
            "delete",
            "assign",
            "unassign",
            "migrate"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the profile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "ID of the target device.\nThis is applicable when I(command) is C(assign) and C(migrate).\nThis option is mutually exclusive with I(device_service_tag).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "Identifier of the target device.\nThis is typically 7 to 8 characters in length.\nApplicable when I(command) is C(assign), and C(migrate).\nThis option is mutually exclusive with I(device_id).\nIf the device does not exist when I(command) is C(assign) then the profile is auto-deployed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "Filters the profiles based on selected criteria.\nThis is applicable when I(command) is C(delete) or C(unassign).\nThis supports suboption I(ProfileIds) which takes a list of profile IDs.\nThis also supports OData filter expressions with the suboption I(Filters).\nSee OpenManage Enterprise REST API guide for the filtering options available.\nI(WARNING) When this option is used in case of C(unassign), task ID is not returned for any of the profiles affected.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Provides the option to force the migration of a profile even if the source device cannot be contacted.\nThis option is applicable when I(command) is C(migrate).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the profile.\nThis is applicable for modify, delete, assign, unassign, and migrate operations.\nThis option is mutually exclusive with I(name_prefix) and I(number_of_profiles).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_prefix": {
          "aliases": [],
          "description": "The name provided when creating a profile is used a prefix followed by the number assigned to it by OpenManage Enterprise.\nThis is applicable only for a create operation.\nThis option is mutually exclusive with I(name).",
          "default": "Profile",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "New name of the profile.\nApplicable when I(command) is C(modify).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number_of_profiles": {
          "aliases": [],
          "description": "Provide the number of profiles to be created.\nThis is applicable when I(name_prefix) is used with C(create).\nThis option is mutually exclusive with I(name).\nOpenmanage Enterprise can create a maximum of 100 profiles.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_id": {
          "aliases": [],
          "description": "ID of the template.\nThis is applicable when I(command) is C(create).\nThis option is mutually exclusive with I(template_name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_name": {
          "aliases": [],
          "description": "Name of the template for creating the profile(s).\nThis is applicable when I(command) is C(create).\nThis option is mutually exclusive with I(template_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Create, modify, delete, assign, unassign and migrate a profile on OpenManage Enterprise",
      "version_added": "3.1.0"
    },
    "examples": "\n---\n- name: Create two profiles from a template\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    template_name: \"template 1\"\n    name_prefix: \"omam_profile\"\n    number_of_profiles: 2\n\n- name: Create profile with NFS share\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: create\n    template_name: \"template 1\"\n    name_prefix: \"omam_profile\"\n    number_of_profiles: 1\n    boot_to_network_iso:\n      boot_to_network: True\n      share_type: NFS\n      share_ip: \"192.168.0.1\"\n      iso_path: \"path/to/my_iso.iso\"\n      iso_timeout: 8\n\n- name: Create profile with CIFS share\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: create\n    template_name: \"template 1\"\n    name_prefix: \"omam_profile\"\n    number_of_profiles: 1\n    boot_to_network_iso:\n      boot_to_network: True\n      share_type: CIFS\n      share_ip: \"192.168.0.2\"\n      share_user: \"username\"\n      share_password: \"password\"\n      workgroup: \"workgroup\"\n      iso_path: \"\\\\path\\\\to\\\\my_iso.iso\"\n      iso_timeout: 8\n\n- name: Modify profile name with NFS share and attributes\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: modify\n    name: \"Profile 00001\"\n    new_name: \"modified profile\"\n    description: \"new description\"\n    boot_to_network_iso:\n      boot_to_network: True\n      share_type: NFS\n      share_ip: \"192.168.0.3\"\n      iso_path: \"path/to/my_iso.iso\"\n      iso_timeout: 8\n    attributes:\n      Attributes:\n        - Id: 4506\n          Value: \"server attr 1\"\n          IsIgnored: true\n        - Id: 4507\n          Value: \"server attr 2\"\n          IsIgnored: true\n\n- name: Delete a profile using profile name\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"delete\"\n    name: \"Profile 00001\"\n\n- name: Delete profiles using filters\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"delete\"\n    filters:\n      SelectAll: True\n      Filters: =contains(ProfileName,'Profile 00002')\n\n- name: Delete profiles using profile list filter\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"delete\"\n    filters:\n      ProfileIds:\n        - 17123\n        - 16124\n\n- name: Assign a profile to target along with network share\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: assign\n    name: \"Profile 00001\"\n    device_id: 12456\n    boot_to_network_iso:\n      boot_to_network: True\n      share_type: NFS\n      share_ip: \"192.168.0.1\"\n      iso_path: \"path/to/my_iso.iso\"\n      iso_timeout: 8\n    attributes:\n      Attributes:\n        - Id: 4506\n          Value: \"server attr 1\"\n          IsIgnored: true\n      Options:\n        ShutdownType: 0\n        TimeToWaitBeforeShutdown: 300\n        EndHostPowerState: 1\n        StrictCheckingVlan: True\n      Schedule:\n        RunNow: True\n        RunLater: False\n\n- name: Unassign a profile using profile name\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"unassign\"\n    name: \"Profile 00003\"\n\n- name: Unassign profiles using filters\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"unassign\"\n    filters:\n      SelectAll: True\n      Filters: =contains(ProfileName,'Profile 00003')\n\n- name: Unassign profiles using profile list filter\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"unassign\"\n    filters:\n      ProfileIds:\n        - 17123\n        - 16123\n\n- name: Migrate a profile\n  dellemc.openmanage.ome_profile:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"migrate\"\n    name: \"Profile 00001\"\n    device_id: 12456\n"
  },
  "dellemc.openmanage.ome_smart_fabric": {
    "doc": {
      "description": "This module allows to create a fabric, and modify or delete an existing fabric on OpenManage Enterprise Modular.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "description": {
          "aliases": [],
          "description": "Provide a short description of the fabric to be created or modified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fabric_design": {
          "aliases": [],
          "description": "Specify the fabric topology.See the use API U(https://www.dell.com/support/manuals/en-in/poweredge-mx7000/omem_1_20_10_ug/smartfabric-network-topologies) to know why its topology.\nI(fabric_design) is mandatory for fabric creation.",
          "type": "str",
          "required": false,
          "choices": [
            "2xMX5108n_Ethernet_Switches_in_same_chassis",
            "2xMX9116n_Fabric_Switching_Engines_in_same_chassis",
            "2xMX9116n_Fabric_Switching_Engines_in_different_chassis"
          ],
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Provide the I(name) of the fabric to be created, deleted or modified.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Provide the I(name) of the fabric to be modified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "override_LLDP_configuration": {
          "aliases": [],
          "description": "Enable this configuration to allow Fabric Management Address to be included in LLDP messages.\nNotes: OpenManage Enterprise Modular 1.0 does not support this option. Some software networking solutions require a single management address to be transmitted by all Ethernet switches to represent the entire fabric. Enable this feature only when connecting to such a solution.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "primary_switch_service_tag": {
          "aliases": [],
          "description": "Service tag of the first switch.\nI(primary_switch_service_tag) is mandatory for fabric creation.\nI(primary_switch_service_tag) must belong to the model selected in I(fabric_design).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secondary_switch_service_tag": {
          "aliases": [],
          "description": "Service tag of the second switch.\nI(secondary_switch_service_tag) is mandatory for fabric creation.\nI(secondary_switch_service_tag) must belong to the model selected in I(fabric_design).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) creates a new fabric or modifies an existing fabric.\nC(absent) deletes an existing fabric.\nNotes: The create, modify, or delete fabric operation takes around 15-20 minutes to complete. It is recommended not to start an another operation until the current operation is completed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Create, modify or delete a fabric on OpenManage Enterprise Modular",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Create a fabric\n  dellemc.openmanage.ome_smart_fabric:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: present\n    name: \"fabric1\"\n    description: \"fabric desc\"\n    fabric_design: \"2xMX9116n_Fabric_Switching_Engines_in_different_chassis\"\n    primary_switch_service_tag: \"SVTG123\"\n    secondary_switch_service_tag: \"PXYT456\"\n    override_LLDP_configuration: \"Enabled\"\n\n- name: Modify a fabric\n  dellemc.openmanage.ome_smart_fabric:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: present\n    name: \"fabric1\"\n    new_name: \"fabric_gold1\"\n    description: \"new description\"\n\n- name: Delete a fabric\n  dellemc.openmanage.ome_smart_fabric:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"absent\"\n    name: \"fabric1\"\n"
  },
  "dellemc.openmanage.ome_smart_fabric_uplink": {
    "doc": {
      "description": "This module allows to create, modify or delete an uplink for a fabric.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise Modular.\nThis module supports C(check_mode).",
      "options": {
        "description": {
          "aliases": [],
          "description": "Provide a short description for the uplink to be created or modified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fabric_name": {
          "aliases": [],
          "description": "Provide the I(fabric_name) of the fabric for which the uplink is to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Provide the I(name) of the uplink to be created, modified or deleted.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Provide the new I(new_name) for the uplink.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "primary_switch_ports": {
          "aliases": [],
          "description": "The IOM slots to be connected to the primary switch.\nI(primary_switch_service_tag) is mandatory for this option.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "primary_switch_service_tag": {
          "aliases": [],
          "description": "Service tag of the primary switch.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secondary_switch_ports": {
          "aliases": [],
          "description": "The IOM slots to be connected to the secondary switch.\nI(secondary_switch_service_tag) is mandatory for this option.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "secondary_switch_service_tag": {
          "aliases": [],
          "description": "Service tag of the secondary switch.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) - Creates a new uplink with the provided I(name). - Modifies an existing uplink with the provided I(name).\nC(absent) – Deletes the uplink with the provided I(name).\nI(WARNING) Delete operation can impact the network infrastructure.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tagged_networks": {
          "aliases": [],
          "description": "VLANs to be associated with the uplink I(name).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ufd_enable": {
          "aliases": [],
          "description": "Add or Remove the uplink to the Uplink Failure Detection (UFD) group. The UFD group identifies the loss of connectivity to the upstream switch and notifies the servers that are connected to the switch. During an uplink failure, the switch disables the corresponding downstream server ports. The downstream servers can then select alternate connectivity routes, if available.\nI(WARNING) The firmware version of the I/O Module running the Fabric Manager must support this configuration feature. If not, uplink creation will be successful with an appropriate error message in response.",
          "type": "str",
          "required": false,
          "choices": [
            "Enabled",
            "Disabled"
          ],
          "suboptions": {}
        },
        "untagged_network": {
          "aliases": [],
          "description": "Specify the name of the VLAN to be added as untagged to the uplink.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uplink_type": {
          "aliases": [],
          "description": "Specify the uplink type.\nI(NOTE) The uplink type cannot be changed for an existing uplink.",
          "type": "str",
          "required": false,
          "choices": [
            "Ethernet",
            "FCoE",
            "FC Gateway",
            "FC Direct Attach",
            "Ethernet - No Spanning Tree"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.17"
      ],
      "short_description": "Create, modify or delete a uplink for a fabric on OpenManage Enterprise Modular",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Create an Uplink\n  dellemc.openmanage.ome_smart_fabric_uplink:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    fabric_name: \"fabric1\"\n    name: \"uplink1\"\n    description: \"CREATED from OMAM\"\n    uplink_type: \"Ethernet\"\n    ufd_enable: \"Enabled\"\n    primary_switch_service_tag: \"ABC1234\"\n    primary_switch_ports:\n      - ethernet1/1/13\n      - ethernet1/1/14\n    secondary_switch_service_tag: \"XYZ1234\"\n    secondary_switch_ports:\n      - ethernet1/1/13\n      - ethernet1/1/14\n    tagged_networks:\n      - vlan1\n      - vlan3\n    untagged_network: vlan2\n  tags: create_uplink\n\n- name: Modify an existing uplink\n  dellemc.openmanage.ome_smart_fabric_uplink:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    fabric_name: \"fabric1\"\n    name: \"uplink1\"\n    new_name: \"uplink2\"\n    description: \"Modified from OMAM\"\n    uplink_type: \"Ethernet\"\n    ufd_enable: \"Disabled\"\n    primary_switch_service_tag: \"DEF1234\"\n    primary_switch_ports:\n      - ethernet1/2/13\n      - ethernet1/2/14\n    secondary_switch_service_tag: \"TUV1234\"\n    secondary_switch_ports:\n      - ethernet1/2/13\n      - ethernet1/2/14\n    tagged_networks:\n      - vlan11\n      - vlan33\n    untagged_network: vlan22\n  tags: modify_uplink\n\n- name: Delete an Uplink\n  dellemc.openmanage.ome_smart_fabric_uplink:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"absent\"\n    fabric_name: \"fabric1\"\n    name: \"uplink1\"\n  tags: delete_uplink\n\n- name: Modify an Uplink name\n  dellemc.openmanage.ome_smart_fabric_uplink:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    fabric_name: \"fabric1\"\n    name: \"uplink1\"\n    new_name: \"uplink2\"\n  tags: modify_uplink_name\n\n- name: Modify Uplink ports\n  dellemc.openmanage.ome_smart_fabric_uplink:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    fabric_name: \"fabric1\"\n    name: \"uplink1\"\n    description: \"uplink ports modified\"\n    primary_switch_service_tag: \"ABC1234\"\n    primary_switch_ports:\n      - ethernet1/1/6\n      - ethernet1/1/7\n    secondary_switch_service_tag: \"XYZ1234\"\n    secondary_switch_ports:\n      - ethernet1/1/9\n      - ethernet1/1/10\n  tags: modify_ports\n\n- name: Modify Uplink networks\n  dellemc.openmanage.ome_smart_fabric_uplink:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    fabric_name: \"fabric1\"\n    name: \"create1\"\n    description: \"uplink networks modified\"\n    tagged_networks:\n      - vlan4\n  tags: modify_networks\n"
  },
  "dellemc.openmanage.ome_template": {
    "doc": {
      "description": "This module creates, modifies, deploys, deletes, exports, imports and clones a template on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module does not support C(check_mode).",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "Payload data for the template operations. All the variables in this option are added as payload for C(create), C(modify), C(deploy), C(import), and C(clone) operations. It takes the following attributes.\nAttributes: List of dictionaries of attributes (if any) to be modified in the deployment template. This is applicable when I(command) is C(deploy) and C(modify).\nName: Name of the template. This is mandatory when I(command) is C(create), C(import), C(clone), and optional when I(command) is C(modify).\nDescription: Description for the template. This is applicable when I(command) is C(create) or C(modify).\nFqdds: This allows to create a template using components from a specified reference server. One or more, of the following values must be specified in a comma-separated string: iDRAC, System, BIOS, NIC, LifeCycleController, RAID, and EventFilters. If none of the values are specified, the default value 'All' is selected. This is applicable when I (command) is C(create).\nOptions: Options to control device shutdown or end power state post template deployment. This is applicable for C(deploy) operation.\nSchedule: Provides options to schedule the deployment task immediately, or at a specified time. This is applicable when I(command) is C(deploy).\nNetworkBootIsoModel: Payload to specify the ISO deployment details. This is applicable when I(command) is C(deploy).\nContent: The XML content of template. This is applicable when I(command) is C(import).\nType: Template type ID, indicating the type of device for which configuration is supported, such as chassis and servers. This is applicable when I(command) is C(import).\nTypeId: Template type ID, indicating the type of device for which configuration is supported, such as chassis and servers. This is applicable when I(command) is C(create).\nRefer OpenManage Enterprise API Reference Guide for more details.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [
            "state"
          ],
          "description": "C(create) creates a new template.\nC(modify) modifies an existing template.\nC(deploy) creates a template-deployment job.\nC(delete) deletes an existing template.\nC(export) exports an existing template.\nC(import) creates a template from a specified configuration text in SCP XML format.\nC(clone) creates a clone of a existing template.",
          "default": "create",
          "type": "str",
          "required": false,
          "choices": [
            "create",
            "modify",
            "deploy",
            "delete",
            "export",
            "import",
            "clone"
          ],
          "suboptions": {}
        },
        "device_group_names": {
          "aliases": [],
          "description": "Specify the list of groups when I (command) is C(deploy).\nProvide at least one of the mandatory options I(device_id), I(device_service_tag), or I(device_group_names).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "Specify the list of targeted device ID(s) when I(command) is C(deploy). When I (command) is C(create), specify the ID of a single device.\nEither I(device_id) or I(device_service_tag) is mandatory or both can be applicable.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "int",
          "suboptions": {}
        },
        "device_service_tag": {
          "aliases": [],
          "description": "Specify the list of targeted device service tags when I (command) is C(deploy). When I(command) is C(create), specify the service tag of a single device.\nEither I(device_id) or I(device_service_tag) is mandatory or both can be applicable.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_id": {
          "aliases": [],
          "description": "ID of the existing template.\nThis option is applicable when I(command) is C(modify), C(deploy), C(delete) and C(export).\nThis option is mutually exclusive with I(template_name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_name": {
          "aliases": [],
          "description": "Name of the existing template.\nThis option is applicable when I(command) is C(modify), C(deploy), C(delete) and C(export).\nThis option is mutually exclusive with I(template_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template_view_type": {
          "aliases": [],
          "description": "Select the type of view of the OME template.\nThis is applicable when I(command) is C(create),C(clone) and C(import).",
          "default": "Deployment",
          "type": "str",
          "required": false,
          "choices": [
            "Deployment",
            "Compliance",
            "Inventory",
            "Sample",
            "None"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Create, modify, deploy, delete, export, import and clone a template on OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Create a template from a reference device\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    device_id: 25123\n    attributes:\n      Name: \"New Template\"\n      Description: \"New Template description\"\n\n- name: Modify template name, description, and attribute value\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"modify\"\n    template_id: 12\n    attributes:\n      Name: \"New Custom Template\"\n      Description: \"Custom Template Description\"\n      # Attributes to be modified in the template.\n      # For information on any attribute id, use API /TemplateService/Templates(Id)/Views(Id)/AttributeViewDetails\n      # This section is optional\n      Attributes:\n        - Id: 1234\n          Value: \"Test Attribute\"\n          IsIgnored: false\n\n- name: Deploy template on multiple devices\n  dellemc.openmanage.ome_template:\n    hostname:  \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"deploy\"\n    template_id: 12\n    device_id:\n      - 12765\n      - 10173\n    device_service_tag:\n      - 'SVTG123'\n      - 'SVTG456'\n\n- name: Deploy template on groups\n  dellemc.openmanage.ome_template:\n    hostname:  \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"deploy\"\n    template_id: 12\n    device_group_names:\n      - server_group_1\n      - server_group_2\n\n- name: Deploy template on multiple devices along with the attributes values to be modified on the target devices\n  dellemc.openmanage.ome_template:\n    hostname:  \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"deploy\"\n    template_id: 12\n    device_id:\n      - 12765\n      - 10173\n    device_service_tag:\n      - 'SVTG123'\n    attributes:\n      # Device specific attributes to be modified during deployment.\n      # For information on any attribute id, use API /TemplateService/Templates(Id)/Views(Id)/AttributeViewDetails\n      # This section is optional\n      Attributes:\n        # specific device where attribute to be modified at deployment run-time.\n        # The DeviceId should be mentioned above in the 'device_id' section.\n        # Service tags not allowed.\n        - DeviceId: 12765\n          Attributes:\n            - Id : 15645\n              Value : \"0.0.0.0\"\n              IsIgnored : false\n        - DeviceId: 10173\n          Attributes:\n            - Id : 18968,\n              Value : \"hostname-1\"\n              IsIgnored : false\n\n- name: Deploy template and Operating System (OS) on multiple devices\n  dellemc.openmanage.ome_template:\n    hostname:  \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"deploy\"\n    template_id: 12\n    device_id:\n      - 12765\n    device_service_tag:\n      - 'SVTG123'\n    attributes:\n      # Include this to install OS on the devices.\n      # This section is optional\n      NetworkBootIsoModel:\n        BootToNetwork: true\n        ShareType: \"NFS\"\n        IsoTimeout: 1 # allowable values(1,2,4,8,16) in hours\n        IsoPath: \"/home/iso_path/filename.iso\"\n        ShareDetail:\n          IpAddress: \"192.168.0.2\"\n          ShareName: \"sharename\"\n          User: \"share_user\"\n          Password: \"share_password\"\n      Options:\n        EndHostPowerState: 1\n        ShutdownType: 0\n        TimeToWaitBeforeShutdown: 300\n      Schedule:\n        RunLater: true\n        RunNow: false\n\n- name: \"Deploy template on multiple devices and changes the device-level attributes. After the template is deployed,\ninstall OS using its image\"\n  dellemc.openmanage.ome_template:\n    hostname:  \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"deploy\"\n    template_id: 12\n    device_id:\n      - 12765\n      - 10173\n    device_service_tag:\n      - 'SVTG123'\n      - 'SVTG456'\n    attributes:\n      Attributes:\n        - DeviceId: 12765\n          Attributes:\n            - Id : 15645\n              Value : \"0.0.0.0\"\n              IsIgnored : false\n        - DeviceId: 10173\n          Attributes:\n            - Id : 18968,\n              Value : \"hostname-1\"\n              IsIgnored : false\n      NetworkBootIsoModel:\n        BootToNetwork: true\n        ShareType: \"NFS\"\n        IsoTimeout: 1 # allowable values(1,2,4,8,16) in hours\n        IsoPath: \"/home/iso_path/filename.iso\"\n        ShareDetail:\n          IpAddress: \"192.168.0.2\"\n          ShareName: \"sharename\"\n          User: \"share_user\"\n          Password: \"share_password\"\n      Options:\n        EndHostPowerState: 1\n        ShutdownType: 0\n        TimeToWaitBeforeShutdown: 300\n      Schedule:\n        RunLater: true\n        RunNow: false\n\n- name: Delete template\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"delete\"\n    template_id: 12\n\n- name: Export a template\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"export\"\n    template_id: 12\n\n# Start of example to export template to a local xml file\n- name: Export template to a local xml file\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"export\"\n    template_name: \"my_template\"\n  register: result\n- name: Save template into a file\n  ansible.builtin.copy:\n    content: \"{{ result.Content}}\"\n    dest: \"/path/to/exported_template.xml\"\n# End of example to export template to a local xml file\n\n- name: Clone a template\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"clone\"\n    template_id: 12\n    attributes:\n      Name: \"New Cloned Template Name\"\n\n- name: Import template from XML content\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"import\"\n    attributes:\n      Name: \"Imported Template Name\"\n      # Template Type from TemplateService/TemplateTypes\n      Type: 2\n      # xml string content\n      Content: \"<SystemConfiguration Model=\\\"PowerEdge R940\\\" ServiceTag=\\\"SVCTAG1\\\"\n      TimeStamp=\\\"Tue Sep 24 09:20:57.872551 2019\\\">\\n<Component FQDD=\\\"AHCI.Slot.6-1\\\">\\n<Attribute\n      Name=\\\"RAIDresetConfig\\\">True</Attribute>\\n<Attribute Name=\\\"RAIDforeignConfig\\\">Clear</Attribute>\\n\n      </Component>\\n<Component FQDD=\\\"Disk.Direct.0-0:AHCI.Slot.6-1\\\">\\n<Attribute Name=\\\"RAIDPDState\\\">Ready\n      </Attribute>\\n<Attribute Name=\\\"RAIDHotSpareStatus\\\">No</Attribute>\\n</Component>\\n\n      <Component FQDD=\\\"Disk.Direct.1-1:AHCI.Slot.6-1\\\">\\n<Attribute Name=\\\"RAIDPDState\\\">Ready</Attribute>\\n\n      <Attribute Name=\\\"RAIDHotSpareStatus\\\">No</Attribute>\\n</Component>\\n</SystemConfiguration>\\n\"\n\n- name: Import template from local XML file\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"import\"\n    attributes:\n      Name: \"Imported Template Name\"\n      Type: 2\n      Content: \"{{ lookup('ansible.builtin.file.', '/path/to/xmlfile') }}\"\n\n- name: \"Deploy template and Operating System (OS) on multiple devices.\"\n  dellemc.openmanage.ome_template:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"{{password}}\"\n    command: \"deploy\"\n    template_id: 12\n    device_id:\n      - 12765\n    device_service_tag:\n      - 'SVTG123'\n    attributes:\n      # Include this to install OS on the devices.\n      # This section is optional\n      NetworkBootIsoModel:\n        BootToNetwork: true\n        ShareType: \"CIFS\"\n        IsoTimeout: 1 # allowable values(1,2,4,8,16) in hours\n        IsoPath: \"/home/iso_path/filename.iso\"\n        ShareDetail:\n          IpAddress: \"192.168.0.2\"\n          ShareName: \"sharename\"\n          User: \"share_user\"\n          Password: \"share_password\"\n      Options:\n        EndHostPowerState: 1\n        ShutdownType: 0\n        TimeToWaitBeforeShutdown: 300\n      Schedule:\n        RunLater: true\n        RunNow: false\n"
  },
  "dellemc.openmanage.ome_template_identity_pool": {
    "doc": {
      "description": "This module allows to- - Attach an identity pool to a requested template on OpenManage Enterprise. - Detach an identity pool from a requested template on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module does not support C(check_mode).",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "identity_pool_name": {
          "aliases": [],
          "description": "Name of the identity pool. - To attach an identity pool to a template, provide the name of the identity pool. - This option is not applicable when detaching an identity pool from a template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_name": {
          "aliases": [],
          "description": "Name of the template to which an identity pool is attached or detached.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Attach or detach an identity pool to a requested template on OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Attach an identity pool to a template\n  dellemc.openmanage.ome_template_identity_pool:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    template_name: template_name\n    identity_pool_name: identity_pool_name\n\n- name: Detach an identity pool from a template\n  dellemc.openmanage.ome_template_identity_pool:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    template_name: template_name\n"
  },
  "dellemc.openmanage.ome_template_info": {
    "doc": {
      "description": "This module retrieves the list and details of all the templates on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "system_query_options": {
          "aliases": [],
          "description": "Options for pagination of the output.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "filter": {
              "aliases": [],
              "description": "Filter records by the supported values.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "template_id": {
          "aliases": [],
          "description": "Unique Id of the template.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Retrieves template details from OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Retrieve basic details of all templates\n  dellemc.openmanage.ome_template_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n\n- name: Retrieve details of a specific template identified by its template ID\n  dellemc.openmanage.ome_template_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    template_id: 1\n\n- name: Get filtered template info based on name\n  dellemc.openmanage.ome_template_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    system_query_options:\n      filter: \"Name eq 'new template'\"\n"
  },
  "dellemc.openmanage.ome_template_network_vlan": {
    "doc": {
      "description": "This module allows to set tagged and untagged vlans to native network card supported by a template on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nic_identifier": {
          "aliases": [],
          "description": "Display name of NIC port in the template for VLAN configuration.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "propagate_vlan": {
          "aliases": [],
          "description": "To deploy the modified VLAN settings immediately without rebooting the server.\nThis option will be applied only when there are changes to the VLAN configuration.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "3.4.0",
          "suboptions": {}
        },
        "tagged_networks": {
          "aliases": [],
          "description": "List of tagged VLANs and their corresponding NIC ports.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "port": {
              "aliases": [],
              "description": "NIC port number of the tagged VLAN",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "tagged_network_ids": {
              "aliases": [],
              "description": "List of IDs of the tagged VLANs\nEnter [] to remove the tagged VLAN from a port.\nList of I(tagged_network_ids) is combined with list of I(tagged_network_names) when adding tagged VLANs to a port.\nTo get the VLAN network ID use the API U( https://I(hostname)/api/NetworkConfigurationService/Networks)",
              "type": "list",
              "required": false,
              "elements": "int",
              "suboptions": {}
            },
            "tagged_network_names": {
              "aliases": [],
              "description": "List of names of tagged VLANs\nEnter [] to remove the tagged VLAN from a port.\nList of I(tagged_network_names) is combined with list of I(tagged_network_ids) when adding tagged VLANs to a port.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "template_id": {
          "aliases": [],
          "description": "Id of the template.\nIt is mutually exclusive with I(template_name).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template_name": {
          "aliases": [],
          "description": "Name of the template.\nIt is mutually exclusive with I(template_id).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "untagged_networks": {
          "aliases": [],
          "description": "List of untagged networks and their corresponding NIC ports.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "port": {
              "aliases": [],
              "description": "NIC port number of the untagged VLAN.",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "untagged_network_id": {
              "aliases": [],
              "description": "ID of the untagged VLAN\nEnter 0 to clear the untagged VLAN from the port.\nThis option is mutually exclusive with I(untagged_network_name)\nTo get the VLAN network ID use the API U( https://I(hostname)/api/NetworkConfigurationService/Networks)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "untagged_network_name": {
              "aliases": [],
              "description": "name of the vlan for untagging\nprovide 0 for clearing the untagging for this I(port)\nThis parameter is mutually exclusive with I(untagged_network_id)",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Set tagged and untagged vlans to native network card supported by a template on OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Add tagged or untagged VLANs to a template using VLAN ID and name\n  dellemc.openmanage.ome_template_network_vlan:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    template_id: 78\n    nic_identifier: NIC Slot 4\n    untagged_networks:\n      - port: 1\n        untagged_network_id: 127656\n      - port: 2\n        untagged_network_name: vlan2\n    tagged_networks:\n      - port: 1\n        tagged_network_ids:\n          - 12767\n          - 12768\n      - port: 4\n        tagged_network_ids:\n          - 12767\n          - 12768\n        tagged_network_names:\n          - vlan3\n      - port: 2\n        tagged_network_names:\n          - vlan4\n          - vlan1\n\n- name: Clear the tagged and untagged VLANs from a template\n  dellemc.openmanage.ome_template_network_vlan:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    template_id: 78\n    nic_identifier: NIC Slot 4\n    untagged_networks:\n      # For removing the untagged VLANs for the port 1 and 2\n      - port: 1\n        untagged_network_id: 0\n      - port: 2\n        untagged_network_name: 0\n    tagged_networks:\n      # For removing the tagged VLANs for port 1, 4 and 2\n      - port: 1\n        tagged_network_ids: []\n      - port: 4\n        tagged_network_ids: []\n        tagged_network_names: []\n      - port: 2\n        tagged_network_names: []\n"
  },
  "dellemc.openmanage.ome_user": {
    "doc": {
      "description": "This module creates, modifies or deletes a user on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module does not support C(check_mode).",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "Payload data for the user operations. It can take the following attributes for C(present).\nUserTypeId, DirectoryServiceId, Description, Name, Password, UserName, RoleId, Locked, Enabled.\nOME will throw error if required parameter is not provided for operation.\nRefer OpenManage Enterprise API Reference Guide for more details.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Unique Name of the user to be deleted.\nEither I(user_id) or I(name) is mandatory for C(absent) operation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) creates a user in case the I(UserName) provided inside I(attributes) does not exist.\nC(present) modifies a user in case the I(UserName) provided inside I(attributes) exists.\nC(absent) deletes an existing user.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user_id": {
          "aliases": [],
          "description": "Unique ID of the user to be deleted.\nEither I(user_id) or I(name) is mandatory for C(absent) operation.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Create, modify or delete a user on OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Create user with required parameters\n  dellemc.openmanage.ome_user:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    attributes:\n      UserName: \"user1\"\n      Password: \"UserPassword\"\n      RoleId: \"10\"\n      Enabled: True\n\n- name: Create user with all parameters\n  dellemc.openmanage.ome_user:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    attributes:\n      UserName: \"user2\"\n      Description: \"user2 description\"\n      Password: \"UserPassword\"\n      RoleId: \"10\"\n      Enabled: True\n      DirectoryServiceId: 0\n      UserTypeId: 1\n      Locked: False\n      Name: \"user2\"\n\n- name: Modify existing user\n  dellemc.openmanage.ome_user:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    attributes:\n      UserName: \"user3\"\n      RoleId: \"10\"\n      Enabled: True\n      Description: \"Modify user Description\"\n\n- name: Delete existing user using id\n  dellemc.openmanage.ome_user:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"absent\"\n    user_id: 1234\n\n- name: Delete existing user using name\n  dellemc.openmanage.ome_user:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"absent\"\n    name: \"name\"\n"
  },
  "dellemc.openmanage.ome_user_info": {
    "doc": {
      "description": "This module retrieves the list and basic details of all accounts or details of a specific account on OpenManage Enterprise.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to DellEMC OpenManage Enterprise.\nThis module supports C(check_mode).",
      "options": {
        "account_id": {
          "aliases": [],
          "description": "Unique Id of the account.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular IP address or hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular password.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular HTTPS port.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "system_query_options": {
          "aliases": [],
          "description": "Options for filtering the output.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "filter": {
              "aliases": [],
              "description": "Filter records for the supported values.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [],
          "description": "OpenManage Enterprise or OpenManage Enterprise Modular username.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Retrieves details of all accounts or a specific account on OpenManage Enterprise",
      "version_added": "2.0.0"
    },
    "examples": "\n---\n- name: Retrieve basic details of all accounts\n  dellemc.openmanage.ome_user_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n\n- name: Retrieve details of a specific account identified by its account ID\n  dellemc.openmanage.ome_user_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    account_id: 1\n\n- name: Get filtered user info based on user name\n  dellemc.openmanage.ome_user_info:\n    hostname: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    system_query_options:\n      filter: \"UserName eq 'test'\"\n"
  },
  "dellemc.openmanage.redfish_event_subscription": {
    "doc": {
      "description": "This module allows to add or delete Redfish Event subscriptions.",
      "has_action": false,
      "notes": "I(event_type) needs to be C(MetricReport) and I(event_format_type) needs to be C(MetricReport) for metrics subscription.\nI(event_type) needs to be C(Alert) and I(event_format_type) needs to be C(Event) for event subscription.\nModifying a subscription is not supported.\nContext is always set to RedfishEvent.\nThis module does not support C(check_mode).",
      "options": {
        "baseuri": {
          "aliases": [],
          "description": "IP address of the target out-of-band controller. For example- <ipaddress>:<port>.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "destination": {
          "aliases": [],
          "description": "The HTTPS URI of the destination to send events.\nHTTPS is required.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "event_format_type": {
          "aliases": [],
          "description": "Specifies the format type of the event to be subscribed.\nC(Event) used to subscribe for Event format type.\nC(MetricReport) used to subscribe for the metrics report format type.",
          "default": "Event",
          "type": "str",
          "required": false,
          "choices": [
            "Event",
            "MetricReport"
          ],
          "suboptions": {}
        },
        "event_type": {
          "aliases": [],
          "description": "Specifies the event type to be subscribed.\nC(Alert) used to subscribe for alert.\nC(MetricReport) used to subscribe for the metrics report.",
          "default": "Alert",
          "type": "str",
          "required": false,
          "choices": [
            "Alert",
            "MetricReport"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) adds new event subscription.\nC(absent) deletes event subscription with the specified I(destination).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Manage Redfish Subscriptions",
      "version_added": "4.1.0"
    },
    "examples": "\n---\n- name: Add Redfish metric subscription\n  redfish_event_subscription:\n    baseuri: \"192.168.0.1\"\n    username: \"user_name\"\n    password: \"user_password\"\n    destination: \"https://192.168.1.100:8188\"\n    event_type: MetricReport\n    event_format_type: MetricReport\n    state: present\n\n- name: Add Redfish alert subscription\n  redfish_event_subscription:\n    baseuri: \"192.168.0.1\"\n    username: \"user_name\"\n    password: \"user_password\"\n    destination: \"https://server01.example.com:8188\"\n    event_type: Alert\n    event_format_type: Event\n    state: present\n\n- name: Delete Redfish subscription with a specified destination\n  redfish_event_subscription:\n    baseuri: \"192.168.0.1\"\n    username: \"user_name\"\n    password: \"user_password\"\n    destination: \"https://server01.example.com:8188\"\n    state: absent\n"
  },
  "dellemc.openmanage.redfish_firmware": {
    "doc": {
      "description": "This module allows the firmware update of only one component at a time. If the module is run for more than one component, an error message is returned.\nDepending on the component, the firmware update is applied after an automatic or manual reboot.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Redfish APIs.\nThis module does not support C(check_mode).",
      "options": {
        "baseuri": {
          "aliases": [],
          "description": "IP address of the target out-of-band controller. For example- <ipaddress>:<port>.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "image_uri": {
          "aliases": [],
          "description": "Firmware Image location URI or local path.\nFor example- U(http://<web_address>/components.exe) or /home/firmware_repo/component.exe.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "transfer_protocol": {
          "aliases": [],
          "description": "Protocol used to transfer the firmware image file. Applicable for URI based update.",
          "default": "HTTP",
          "type": "str",
          "required": false,
          "choices": [
            "CIFS",
            "FTP",
            "HTTP",
            "HTTPS",
            "NSF",
            "OEM",
            "SCP",
            "SFTP",
            "TFTP"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5",
        "urllib3"
      ],
      "short_description": "To perform a component firmware update using the image file available on the local or remote system",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Update the firmware from a single executable file available in a HTTP protocol\n  dellemc.openmanage.redfish_firmware:\n    baseuri: \"192.168.0.1\"\n    username: \"user_name\"\n    password: \"user_password\"\n    image_uri: \"http://192.168.0.2/firmware_repo/component.exe\"\n    transfer_protocol: \"HTTP\"\n\n- name: Update the firmware from a single executable file available in a local path\n  dellemc.openmanage.redfish_firmware:\n    baseuri: \"192.168.0.1\"\n    username: \"user_name\"\n    password: \"user_password\"\n    image_uri: \"/home/firmware_repo/component.exe\"\n"
  },
  "dellemc.openmanage.redfish_powerstate": {
    "doc": {
      "description": "This module allows to manage the different power states of the specified device.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Redfish APIs.\nThis module supports C(check_mode).",
      "options": {
        "baseuri": {
          "aliases": [],
          "description": "IP address of the target out-of-band controller. For example- <ipaddress>:<port>.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "reset_type": {
          "aliases": [],
          "description": "This option resets the device.\nIf C(ForceOff), Turns off the device immediately.\nIf C(ForceOn), Turns on the device immediately.\nIf C(ForceRestart), Turns off the device immediately, and then restarts the device.\nIf C(GracefulRestart), Performs graceful shutdown of the device, and then restarts the device.\nIf C(GracefulShutdown), Performs a graceful shutdown of the device, and the turns off the device.\nIf C(Nmi), Sends a diagnostic interrupt to the device. This is usually a non-maskable interrupt (NMI) on x86 device.\nIf C(On), Turns on the device.\nIf C(PowerCycle), Performs power cycle on the device.\nIf C(PushPowerButton), Simulates the pressing of a physical power button on the device.\nWhen a power control operation is performed, which is not supported on the device, an error message is displayed with the list of operations that can be performed.",
          "type": "str",
          "required": true,
          "choices": [
            "ForceOff",
            "ForceOn",
            "ForceRestart",
            "GracefulRestart",
            "GracefulShutdown",
            "Nmi",
            "On",
            "PowerCycle",
            "PushPowerButton"
          ],
          "suboptions": {}
        },
        "resource_id": {
          "aliases": [],
          "description": "The unique identifier of the device being managed. For example- U(https://<I(baseuri)>/redfish/v1/Systems/<I(resource_id)>).\nThis option is mandatory for I(base_uri) with multiple devices.\nTo get the device details, use the API U(https://<I(baseuri)>/redfish/v1/Systems).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Manage device power state",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Manage power state of the first device\n  dellemc.openmanage.redfish_powerstate:\n       baseuri: \"192.168.0.1\"\n       username: \"username\"\n       password: \"password\"\n       reset_type: \"On\"\n\n- name: Manage power state of a specified device\n  dellemc.openmanage.redfish_powerstate:\n       baseuri: \"192.168.0.1\"\n       username: \"username\"\n       password: \"password\"\n       reset_type: \"ForceOff\"\n       resource_id: \"System.Embedded.1\"\n"
  },
  "dellemc.openmanage.redfish_storage_volume": {
    "doc": {
      "description": "This module allows to create, modify, initialize, or delete a single storage volume.",
      "has_action": false,
      "notes": "Run this module from a system that has direct access to Redfish APIs.\nThis module does not support C(check_mode).",
      "options": {
        "baseuri": {
          "aliases": [],
          "description": "IP address of the target out-of-band controller. For example- <ipaddress>:<port>.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "block_size_bytes": {
          "aliases": [],
          "description": "Block size in bytes.Only applicable when I(state) is C(present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "capacity_bytes": {
          "aliases": [],
          "description": "Volume size in bytes.\nOnly applicable when I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "C(initialize) initializes an existing storage volume for a specified I(volume_id).",
          "type": "str",
          "required": false,
          "choices": [
            "initialize"
          ],
          "suboptions": {}
        },
        "controller_id": {
          "aliases": [],
          "description": "Fully Qualified Device Descriptor (FQDD) of the storage controller.\nFor example- RAID.Slot.1-1.\nThis option is mandatory when I(state) is C(present) while creating a volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "drives": {
          "aliases": [],
          "description": "FQDD of the Physical disks.\nFor example- Disk.Bay.0:Enclosure.Internal.0-1:RAID.Slot.1-1.\nOnly applicable when I(state) is C(present) when creating a new volume.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "encrypted": {
          "aliases": [],
          "description": "Indicates whether volume is currently utilizing encryption or not.\nOnly applicable when I(state) is C(present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "encryption_types": {
          "aliases": [],
          "description": "The following encryption types can be selected.\nC(ControllerAssisted) The volume is encrypted by the storage controller entity.\nC(NativeDriveEncryption) The volume utilizes the native drive encryption capabilities of the drive hardware.\nC(SoftwareAssisted) The volume is encrypted by the software running on the system or the operating system.\nOnly applicable when I(state) is C(present).",
          "type": "str",
          "required": false,
          "choices": [
            "NativeDriveEncryption",
            "ControllerAssisted",
            "SoftwareAssisted"
          ],
          "suboptions": {}
        },
        "initialize_type": {
          "aliases": [],
          "description": "Initialization type of existing volume.\nOnly applicable when I(command) is C(initialize).",
          "default": "Fast",
          "type": "str",
          "required": false,
          "choices": [
            "Fast",
            "Slow"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the volume to be created.\nOnly applicable when I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "oem": {
          "aliases": [],
          "description": "Includes OEM extended payloads.\nOnly applicable when I(state) is I(present).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "optimum_io_size_bytes": {
          "aliases": [],
          "description": "Stripe size value must be in multiples of 64 * 1024.\nOnly applicable when I(state) is C(present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(present) creates a storage volume for the specified I (controller_id), or modifies the storage volume for the specified I (volume_id). \"Note: Modification of an existing volume properties depends on drive and controller capabilities\".\nC(absent) deletes the volume for the specified I(volume_id).",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username of the target out-of-band controller.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "volume_id": {
          "aliases": [],
          "description": "FQDD of existing volume.\nFor example- Disk.Virtual.4:RAID.Slot.1-1.\nThis option is mandatory in the following scenarios,\nI(state) is C(present), when updating a volume.\nI(state) is C(absent), when deleting a volume.\nI(command) is C(initialize), when initializing a volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume_type": {
          "aliases": [],
          "description": "One of the following volume types must be selected to create a volume.\nC(Mirrored) The volume is a mirrored device.\nC(NonRedundant) The volume is a non-redundant storage device.\nC(SpannedMirrors) The volume is a spanned set of mirrored devices.\nC(SpannedStripesWithParity) The volume is a spanned set of devices which uses parity to retain redundant information.\nC(StripedWithParity) The volume is a device which uses parity to retain redundant information.",
          "type": "str",
          "required": false,
          "choices": [
            "NonRedundant",
            "Mirrored",
            "StripedWithParity",
            "SpannedMirrors",
            "SpannedStripesWithParity"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7.5"
      ],
      "short_description": "Manages the storage volume configuration",
      "version_added": "2.1.0"
    },
    "examples": "\n---\n- name: Create a volume with supported options\n  dellemc.openmanage.redfish_storage_volume:\n    baseuri: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    volume_type: \"Mirrored\"\n    name: \"VD0\"\n    controller_id: \"RAID.Slot.1-1\"\n    drives:\n      - Disk.Bay.5:Enclosure.Internal.0-1:RAID.Slot.1-1\n      - Disk.Bay.6:Enclosure.Internal.0-1:RAID.Slot.1-1\n    block_size_bytes: 512\n    capacity_bytes: 299439751168\n    optimum_io_size_bytes: 65536\n    encryption_types: NativeDriveEncryption\n    encrypted: true\n\n- name: Create a volume with minimum options\n  dellemc.openmanage.redfish_storage_volume:\n    baseuri: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    controller_id: \"RAID.Slot.1-1\"\n    volume_type: \"NonRedundant\"\n    drives:\n       - Disk.Bay.1:Enclosure.Internal.0-1:RAID.Slot.1-1\n\n- name: Modify a volume's encryption type settings\n  dellemc.openmanage.redfish_storage_volume:\n    baseuri: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"present\"\n    volume_id: \"Disk.Virtual.5:RAID.Slot.1-1\"\n    encryption_types: \"ControllerAssisted\"\n    encrypted: true\n\n- name: Delete an existing volume\n  dellemc.openmanage.redfish_storage_volume:\n    baseuri: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    state: \"absent\"\n    volume_id: \"Disk.Virtual.5:RAID.Slot.1-1\"\n\n- name: Initialize an existing volume\n  dellemc.openmanage.redfish_storage_volume:\n    baseuri: \"192.168.0.1\"\n    username: \"username\"\n    password: \"password\"\n    command: \"initialize\"\n    volume_id: \"Disk.Virtual.6:RAID.Slot.1-1\"\n    initialize_type: \"Slow\"\n"
  }
}