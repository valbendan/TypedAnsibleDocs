{
  "sensu.sensu_go.ad_auth_provider": {
    "doc": {
      "description": "Create, update or delete a Sensu Go AD authentication provider.\nFor more information, refer to the Sensu Go documentation at U(https://docs.sensu.io/sensu-go/latest/operations/control-access/ad-auth/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "groups_prefix": {
          "aliases": [],
          "description": "The prefix added to all AD groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "servers": {
          "aliases": [],
          "description": "An array of AD servers for your directory.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "binding": {
              "aliases": [],
              "description": "The AD account that performs user and group lookups.\nIf your sever supports anonymous binding, you can omit the user_dn or password attributes to query the directory without credentials.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "password": {
                  "aliases": [],
                  "description": "Password for the user_dn account.\nIf your sever supports anonymous binding, you can omit this attribute.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "user_dn": {
                  "aliases": [],
                  "description": "The AD account that performs user and group lookups.\nIf your sever supports anonymous binding, you can omit this attribute.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "client_cert_file": {
              "aliases": [],
              "description": "Path to the certificate that should be sent to the server if requested.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "client_key_file": {
              "aliases": [],
              "description": "Path to the key file associated with the client_cert_file.\nRequired if I(client_cert_file) is present.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "default_upn_domain": {
              "aliases": [],
              "description": "Enables UPN authentication when set. The default UPN suffix that will be appended to the username when a domain is not specified during login (for example, user becomes user@defaultdomain.xyz).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "group_search": {
              "aliases": [],
              "description": "Search configuration for groups.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attribute": {
                  "aliases": [],
                  "description": "Used for comparing result entries.",
                  "default": "member",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "base_dn": {
                  "aliases": [],
                  "description": "Which part of the directory tree to search.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "name_attribute": {
                  "aliases": [],
                  "description": "Represents the attribute to use as the entry name.",
                  "default": "cn",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "object_class": {
                  "aliases": [],
                  "description": "Identifies the class of objects returned in the search result.",
                  "default": "group",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "host": {
              "aliases": [],
              "description": "AD server IP address.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "include_nested_groups": {
              "aliases": [],
              "description": "If true, the group search includes any nested groups a user is a member of. If false, the group search includes only the top-level groups a user is a member of.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "Skips SSL certificate verification when set to true.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "AD server port.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "security": {
              "aliases": [],
              "description": "Encryption type to be used for the connection to the AD server.",
              "default": "tls",
              "type": "str",
              "required": false,
              "choices": [
                "insecure",
                "tls",
                "starttls"
              ],
              "suboptions": {}
            },
            "trusted_ca_file": {
              "aliases": [],
              "description": "Path to an alternative CA bundle file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user_search": {
              "aliases": [],
              "description": "Search configuration for users.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attribute": {
                  "aliases": [],
                  "description": "Used for comparing result entries.",
                  "default": "sAMAccountName",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "base_dn": {
                  "aliases": [],
                  "description": "Which part of the directory tree to search.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "name_attribute": {
                  "aliases": [],
                  "description": "Represents the attribute to use as the entry name.",
                  "default": "displayName",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "object_class": {
                  "aliases": [],
                  "description": "Identifies the class of objects returned in the search result.",
                  "default": "person",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username_prefix": {
          "aliases": [],
          "description": "The prefix added to all AD usernames.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu AD authentication provider",
      "version_added": "1.10.0"
    },
    "examples": "\n- name: Create a AD auth provider\n  sensu.sensu_go.ad_auth_provider:\n    name: activedirectory\n    servers:\n      - host: 127.0.0.1\n        group_search:\n          base_dn: dc=acme,dc=org\n        user_search:\n          base_dn: dc=acme,dc=org\n- name: Delete a AD auth provider\n  sensu.sensu_go.ad_auth_provider:\n    name: activedirectory\n    state: absent\n"
  },
  "sensu.sensu_go.asset": {
    "doc": {
      "description": "Create, update or delete Sensu Go asset.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/assets/).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "builds": {
          "aliases": [],
          "description": "A list of asset builds used to define multiple artefacts which provide the named asset.\nRequired if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "filters": {
              "aliases": [],
              "description": "A set of Sensu query expressions used to determine if the asset should be installed.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Additional headers to send when retrieving the asset, e.g. for authorization.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "sha512": {
              "aliases": [],
              "description": "The checksum of the asset.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "The URL location of the asset.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu assets",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a multiple-build asset\n  sensu.sensu_go.asset:\n    name: sensu-plugins-cpu-checks\n    builds:\n      - url: https://assets.bonsai.sensu.io/68546e739d96fd695655b77b35b5aabfbabeb056/sensu-plugins-cpu-checks_4.0.0_centos_linux_amd64.tar.gz\n        sha512: 518e7c17cf670393045bff4af318e1d35955bfde166e9ceec2b469109252f79043ed133241c4dc96501b6636a1ec5e008ea9ce055d1609865635d4f004d7187b\n        filters:\n          - entity.system.os == 'linux'\n          - entity.system.arch == 'amd64'\n          - entity.system.platform == 'rhel'\n      - url: https://assets.bonsai.sensu.io/68546e739d96fd695655b77b35b5aabfbabeb056/sensu-plugins-cpu-checks_4.0.0_alpine_linux_amd64.tar.gz\n        sha512: b2da25ecd7642e6de41fde37d674fe19dcb6ee3d680e145e32289f7cfc352e6b5f9413ee9b701d61faeaa47b399aa30b25885dbc1ca432c4061c8823774c28f3\n        filters:\n          - entity.system.os == 'linux'\n          - entity.system.arch == 'amd64'\n          - entity.system.platform == 'alpine'\n\n- name: Delete an asset\n  sensu.sensu_go.asset:\n    name: sensu-plugins-cpu-check\n    state: absent\n"
  },
  "sensu.sensu_go.asset_info": {
    "doc": {
      "description": "Retrieve information about Sensu Go assets.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/assets/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu assets",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu assets\n  sensu.sensu_go.asset_info:\n  register: result\n\n- name: List the selected Sensu asset\n  sensu.sensu_go.asset_info:\n    name: my_asset\n  register: result\n\n- name: Do something with result\n  ansible.builtin.debug:\n    msg: \"{{ result.objects.0.metadata.name }}\"\n\n"
  },
  "sensu.sensu_go.auth_provider_info": {
    "doc": {
      "description": "Retrieve information about Sensu Go authentication providers.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/operations/control-access/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu authentication providers",
      "version_added": "1.10.0"
    },
    "examples": "\n- name: List all Sensu authentication providers\n  sensu.sensu_go.auth_provider_info:\n  register: result\n\n- name: List the selected Sensu authentication provider\n  sensu.sensu_go.auth_provider_info:\n    name: my_auth_provider\n  register: result\n\n- name: Do something with result\n  ansible.builtin.debug:\n    msg: \"{{ result.objects.0.metadata.name }}\"\n"
  },
  "sensu.sensu_go.bonsai_asset": {
    "doc": {
      "description": "Create or update a Sensu Go asset whose definition is available in the Bonsai, the Sensu asset index.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/assets/) and U(https://bonsai.sensu.io/).",
      "has_action": true,
      "notes": "I(labels) and I(annotations) values are merged with the values obtained from Bonsai. Values passed-in as parameters take precedence over the values obtained from Bonsai.\nTo delete an asset, use regular M(sensu.sensu_go.asset) module.",
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rename": {
          "aliases": [],
          "description": "The name that will be used when adding the asset to Sensu.\nIf not present, value of the I(name) parameter will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Version number of the asset to install.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Add Sensu assets from Bonsai",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Make sure specific version of asset is installed\n  sensu.sensu_go.bonsai_asset:\n    name: sensu/monitoring-plugins\n    version: 2.2.0-1\n\n- name: Remove previously added asset\n  sensu.sensu_go.asset:\n    name: sensu/monitoring-plugins\n    state: absent\n\n- name: Store Bonsai asset under a different name\n  sensu.sensu_go.bonsai_asset:\n    name: sensu/monitoring-plugins\n    version: 2.2.0-1\n    rename: sensu-monitoring-2.2.0-1\n\n- name: Display asset info\n  sensu.sensu_go.asset_info:\n    name: sensu-monitoring-2.2.0-1  # value from rename field\n"
  },
  "sensu.sensu_go.check": {
    "doc": {
      "description": "Create, update or delete Sensu Go check.\nFor more information, refer to the Sensu Go documentation at U(https://docs.sensu.io/sensu-go/latest/reference/checks/).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "check_hooks": {
          "aliases": [],
          "description": "A mapping of response codes to hooks which will be run by the agent when that code is returned.\nNote that the structure of this parameter is a bit different from the one described at U(https://docs.sensu.io/sensu-go/latest/reference/checks/#check-hooks-attribute).\nSee check hooks example below for more information on exact mapping structure.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "Check command to run.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cron": {
          "aliases": [],
          "description": "Schedule check requests using crontab syntax.\nCannot be used when I(interval) option is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env_vars": {
          "aliases": [],
          "description": "A mapping of environment variable names and values to use with command execution.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "handlers": {
          "aliases": [],
          "description": "List of handlers which receive check results.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "high_flap_threshold": {
          "aliases": [],
          "description": "High flap threshold.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Check request interval.\nCannot be used when I(cron) option is used.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "low_flap_threshold": {
          "aliases": [],
          "description": "Low flap threshold.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_metric_format": {
          "aliases": [],
          "description": "Enable parsing of metrics in the specified format from this check's output.",
          "type": "str",
          "required": false,
          "choices": [
            "graphite_plaintext",
            "influxdb_line",
            "nagios_perfdata",
            "opentsdb_line"
          ],
          "suboptions": {}
        },
        "output_metric_handlers": {
          "aliases": [],
          "description": "List of handlers which receive check results. I'm not sure why this exists.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_entity_name": {
          "aliases": [],
          "description": "Entity name to associate this check with instead of the agent it ran on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_requests": {
          "aliases": [],
          "description": "Allows you to assign the check to run for multiple entities according to their entity_attributes.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "entity_attributes": {
              "aliases": [],
              "description": "List of attribute checks for determining which proxy entities this check should be scheduled against.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "splay": {
              "aliases": [],
              "description": "Enables or disables splaying of check request scheduling.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "splay_coverage": {
              "aliases": [],
              "description": "Percentage of the C(interval) over which to splay checks.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "publish": {
          "aliases": [],
          "description": "Enables or disables scheduled publication of check requests.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "round_robin": {
          "aliases": [],
          "description": "An array of environment variables to use with command execution.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "runtime_assets": {
          "aliases": [],
          "description": "List of runtime assets required to run the check.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "secrets": {
          "aliases": [],
          "description": "List of secrets that are available to the command.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "1.6.0",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Variable name that will contain the sensitive data.",
              "type": "str",
              "required": true,
              "version_added": "1.6.0",
              "suboptions": {}
            },
            "secret": {
              "aliases": [],
              "description": "Name of the secret that contains sensitive data.",
              "type": "str",
              "required": true,
              "version_added": "1.6.0",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "stdin": {
          "aliases": [],
          "description": "Enables writing of serialized JSON data to the check command's stdin.\nOnly usable with checks written specifically for Sensu Go.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "subscriptions": {
          "aliases": [],
          "description": "List of subscriptions which receive check requests.\nRequired if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Check execution timeout.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Amount of time after which a check result is considered stale.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu checks",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Check executing command every 30 seconds\n  sensu.sensu_go.check:\n    name: check\n    command: check-cpu.sh -w 75 -c 90\n    subscriptions:\n      - checks\n    interval: 30\n    publish: yes\n\n- name: Check executing command with cron scheduler\n  sensu.sensu_go.check:\n    name: check\n    command: check-cpu.sh -w 75 -c 90\n    subscriptions:\n      - systems\n    handlers:\n      - slack\n    cron: \"* * * * *\"\n    publish: yes\n\n- name: Ad-hoc scheduling\n  sensu.sensu_go.check:\n    name: check\n    command: check-cpu.sh -w 75 -c 90\n    subscriptions:\n      - systems\n    handlers:\n      - slack\n    interval: 60\n    publish: no\n\n- name: Report events under proxy entity name instead of agent entity\n  sensu.sensu_go.check:\n    name: check\n    command: http_check.sh https://sensu.io\n    subscriptions:\n      - proxy\n    handlers:\n      - slack\n    interval: 60\n    proxy_entity_name: sensu-site\n    round_robin: yes\n    publish: yes\n\n- name: Event that triggers hooks\n  sensu.sensu_go.check:\n    name: check\n    command: http_check.sh https://sensu.io\n    subscriptions: [ proxy ]\n    # The upstream JSON payload for the hooks below would look like this:\n    #\n    #   \"check_hooks\": [\n    #     {\"0\": [\"passing-hook\", \"always-run-this-hook\"]},\n    #     {\"critical\": [\"failing-hook\", \"always-run-this-hook\"]}\n    #   ]\n    #\n    # Ansible task simplifies this structure into a simple mapping:\n    check_hooks:\n      \"0\":\n        - passing-hook\n        - always-run-this-hook\n      critical:\n        - failing-hook\n        - always-run-this-hook\n\n- name: Remove check\n  sensu.sensu_go.check:\n    name: my-check\n    state: absent\n"
  },
  "sensu.sensu_go.check_info": {
    "doc": {
      "description": "Retrieve information about Sensu Go checks.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/checks/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu checks",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu checks\n  sensu.sensu_go.check_info:\n  register: result\n\n- name: Obtain a specific check\n  sensu.sensu_go.check_info:\n    name: my-check\n  register: result\n"
  },
  "sensu.sensu_go.cluster": {
    "doc": {
      "description": "Create, update or delete Sensu cluster.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/operations/deploy-sensu/cluster-sensu/).",
      "has_action": false,
      "options": {
        "api_urls": {
          "aliases": [],
          "description": "List of API urls that compose a single cluster.\nRequired if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu Go clusters",
      "version_added": "1.9.0"
    },
    "examples": "\n- name: Create a small cluster\n  sensu.sensu_go.cluster:\n    name: small-cluster\n    api_urls: https://sensu.alpha.example.com:8080\n\n- name: Create a larger cluster\n  sensu.sensu_go.cluster:\n    name: large-cluster\n    api_urls:\n      - https://sensu.alpha.example.com:8080\n      - https://sensu.beta.example.com:8080\n      - https://sensu.gamma.example.com:8080\n\n- name: Delete a cluster\n  sensu.sensu_go.cluster:\n    name: small-cluster\n    state: absent\n"
  },
  "sensu.sensu_go.cluster_info": {
    "doc": {
      "description": "Retrieve information about Sensu Go clusters.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/operations/deploy-sensu/cluster-sensu/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List available Sensu Go clusters",
      "version_added": "1.9.0"
    },
    "examples": "\n- name: List all Sensu Go clusters\n  sensu.sensu_go.etcd_replicator_info:\n  register: result\n\n- name: Retrieve the selected Sensu Go cluster\n  sensu.sensu_go.etcd_replicator_info:\n    name: my-cluster\n  register: result\n\n- name: Do something with result\n  ansible.builtin.debug:\n    msg: \"{{ result.objects.0.api_urls }}\"\n"
  },
  "sensu.sensu_go.cluster_role": {
    "doc": {
      "description": "Create, update or delete Sensu role.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#roles-and-cluster-roles).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "Rules that the cluster role applies.\nMust be non-empty if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "resource_names": {
              "aliases": [],
              "description": "Names of specific resources the rule has permission to access.\nNote that for the C(create) verb, this argument will not be taken into account when enforcing RBAC, even if it is provided.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "resources": {
              "aliases": [],
              "description": "Types of resources the rule has permission to access.",
              "type": "list",
              "required": true,
              "elements": "str",
              "suboptions": {}
            },
            "verbs": {
              "aliases": [],
              "description": "Permissions to be applied by the rule.",
              "type": "list",
              "required": true,
              "choices": [
                "get",
                "list",
                "create",
                "update",
                "delete"
              ],
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu cluster roles",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a cluster role\n  sensu.sensu_go.cluster_role:\n    name: readonly\n    rules:\n      - verbs:\n          - get\n          - list\n        resources:\n          - checks\n          - entities\n\n- name: Delete a cluster role\n  sensu.sensu_go.cluster_role:\n    name: readonly\n    state: absent\n"
  },
  "sensu.sensu_go.cluster_role_binding": {
    "doc": {
      "description": "Create, update or delete Sensu cluster role binding.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#role-bindings-and-cluster-role-bindings).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "cluster_role": {
          "aliases": [],
          "description": "Name of the cluster role.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "List of groups to bind to the cluster role.\nNote that at least one of I(users) and I(groups) must be specified when creating a cluster role binding.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "users": {
          "aliases": [],
          "description": "List of users to bind to the cluster role.\nNote that at least one of I(users) and I(groups) must be specified when creating a cluster role binding.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu cluster role bindings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a cluster role binding\n  sensu.sensu_go.cluster_role_binding:\n    name: all-cluster-admins\n    cluster_role: cluster-admin\n    groups:\n      - cluster-admins\n    users:\n      - alice\n\n- name: Delete a cluster role binding\n  sensu.sensu_go.cluster_role_binding:\n    name: all-cluster-admins\n    state: absent\n"
  },
  "sensu.sensu_go.cluster_role_binding_info": {
    "doc": {
      "description": "Retrieve information about Sensu cluster role bindings.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#role-bindings-and-cluster-role-bindings).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu cluster role bindings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu cluster role bindings\n  sensu.sensu_go.cluster_role_binding_info:\n  register: result\n\n- name: Retrieve a specific Sensu cluster role binding\n  sensu.sensu_go.cluster_role_binding_info:\n    name: my-binding\n  register: result\n"
  },
  "sensu.sensu_go.cluster_role_info": {
    "doc": {
      "description": "Retrieve information about Sensu roles.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#roles-and-cluster-roles).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu cluster roles",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu cluster roles\n  sensu.sensu_go.cluster_role_info:\n  register: result\n\n- name: Retrieve Sensu cluster role by name\n  sensu.sensu_go.cluster_role_info:\n    name: my-custer-role\n  register: result\n"
  },
  "sensu.sensu_go.datastore": {
    "doc": {
      "description": "Add or remove external datastore provider.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/datastore/).",
      "has_action": false,
      "notes": "Currently, only one external datastore can be active at a time. The module will fail to perform its operation if this would break that invariant.",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "dsn": {
          "aliases": [],
          "description": "Attribute that specifies the data source names as a URL or PostgreSQL connection string. See the PostgreSQL docs for more information about connection strings.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pool_size": {
          "aliases": [],
          "description": "The maximum number of connections to hold in the PostgreSQL connection pool.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu external datastore providers",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Add external datastore\n  sensu.sensu_go.datastore:\n    name: my-postgres\n    dsn: postgresql://user:secret@host:port/dbname\n\n- name: Remove external datastore\n  sensu.sensu_go.datastore:\n    name: my-postgres\n    state: absent\n"
  },
  "sensu.sensu_go.datastore_info": {
    "doc": {
      "description": "Retrieve information about external Sensu datastores.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/datastore/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List external Sensu datastore providers",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: List all external Sensu datastores\n  sensu.sensu_go.datastore_info:\n  register: result\n\n- name: Retrieve the selected external Sensu datastore\n  sensu.sensu_go.datastore_info:\n    name: my-datastore\n  register: result\n\n- name: Do something with result\n  ansible.builtin.debug:\n    msg: \"{{ result.objects.0.dsn }}\"\n"
  },
  "sensu.sensu_go.entity": {
    "doc": {
      "description": "Create, update or delete Sensu entity.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/entities/).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "deregister": {
          "aliases": [],
          "description": "If the entity should be removed when it stops sending keepalive messages.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "deregistration_handler": {
          "aliases": [],
          "description": "The name of the handler to be called when an entity is deregistered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "entity_class": {
          "aliases": [],
          "description": "Entity class. Standard classes are C(proxy) and C(agent), but you can use whatever you want.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "last_seen": {
          "aliases": [],
          "description": "Timestamp the entity was last seen, in seconds since the Unix epoch.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "redact": {
          "aliases": [],
          "description": "List of items to redact from log messages. If a value is provided, it overwrites the default list of items to be redacted.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subscriptions": {
          "aliases": [],
          "description": "List of subscriptions for the entity.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "system": {
          "aliases": [],
          "description": "System information about the entity, such as operating system and platform. See U(https://docs.sensu.io/sensu-go/5.13/reference/entities/#system-attributes) for more information.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Sensu RBAC username used by the entity. Agent entities require get, list, create, update, and delete permissions for events across all namespaces.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu entities",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create an entity\n  sensu.sensu_go.entity:\n    auth:\n      url: http://localhost:8080\n    name: entity\n    entity_class: proxy\n    subscriptions:\n      - web\n      - prod\n    system:\n      hostname: playbook-entity\n      os: linux\n      platform: ubutntu\n      network:\n        interfaces:\n          - name: lo\n            addresses:\n              - 127.0.0.1/8\n              - ::1/128\n          - name: eth0\n            mac: 52:54:00:20:1b:3c\n            addresses:\n              - 93.184.216.34/24\n    last_seen: 1522798317\n    deregister: yes\n    deregistration_handler: email-handler\n    redact:\n      - password\n      - pass\n      - api_key\n    user: agent\n\n- name: Delete an entity\n  sensu.sensu_go.entity:\n    name: entity\n    state: absent\n"
  },
  "sensu.sensu_go.entity_info": {
    "doc": {
      "description": "Retrieve information about Sensu entities.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/entities/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu entities",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu entities\n  sensu.sensu_go.entity_info:\n  register: result\n\n- name: Retrieve a specific Sensu entity\n  sensu.sensu_go.entity_info:\n    name: my-entity\n  register: result\n"
  },
  "sensu.sensu_go.etcd_replicator": {
    "doc": {
      "description": "Create, update or delete Sensu etcd replicator.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/operations/deploy-sensu/etcdreplicators/).",
      "has_action": false,
      "options": {
        "api_version": {
          "aliases": [],
          "description": "Sensu API version of the resource to replicate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "ca_cert": {
          "aliases": [],
          "description": "Path to an the PEM-format CA certificate to use for TLS client authentication.\nRequired if I(insecure) is C(false).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cert": {
          "aliases": [],
          "description": "Path to the PEM-format certificate to use for TLS client authentication. This certificate is required for secure client communication.\nRequired if I(insecure) is C(false).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "insecure": {
          "aliases": [],
          "description": "Disable transport security.\nOnly set to C(true) in sandbox and experimental environments.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Path to the PEM-format key file associated with the cert to use for TLS client authentication. This key and its corresponding certificate are required for secure client communication.\nRequired if I(insecure) is C(false).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace to constrain replication to.\nIf you do not include namespace, all namespaces for a given resource are replicated.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "replication_interval": {
          "aliases": [],
          "description": "Interval at which the resource will be replicated. In seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resource": {
          "aliases": [],
          "description": "Name of the resource to replicate.\nList of all resources is available at U(https://docs.sensu.io/sensu-go/latest/operations/control-access/rbac/#resources).\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Destination cluster URLs.\nRequired if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu Go etcd replicators",
      "version_added": "1.9.0"
    },
    "examples": "\n- name: Create a minimal replicator\n  sensu.sensu_go.etcd_replicator:\n    name: cluster_role_replicator\n    ca_cert: /etc/sensu/certs/ca.pem\n    cert: /etc/sensu/certs/cert.pem\n    key: /etc/sensu/certs/key.pem\n    url: https://sensu.alpha.example.com:2379\n    resource: ClusterRole\n\n- name: Create an insecure minimal replicator\n  sensu.sensu_go.etcd_replicator:\n    name: role_replicator\n    insecure: true\n    url:\n      - https://sensu.beta.example.com:2379\n      - https://sensu.gamma.example.com:2379\n    resource: Role\n\n- name: Create a replicator with all parameters set\n  sensu.sensu_go.etcd_replicator:\n    name: role_binding_replicator\n    ca_cert: /etc/sensu/certs/ca.pem\n    cert: /etc/sensu/certs/cert.pem\n    key: /etc/sensu/certs/key.pem\n    insecure: false\n    url: https://127.0.0.1:2379\n    api_version: core/v2\n    resource: RoleBinding\n    namespace: default\n    replication_interval_seconds: 30\n\n- name: Delete a replicator\n  sensu.sensu_go.etcd_replicator:\n    name: my_replicator\n    state: absent\n"
  },
  "sensu.sensu_go.etcd_replicator_info": {
    "doc": {
      "description": "Retrieve information about Sensu Go etcd replicators.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/operations/deploy-sensu/etcdreplicators/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List available Sensu Go etcd replicators",
      "version_added": "1.9.0"
    },
    "examples": "\n- name: List all Sensu Go etcd replicators\n  sensu.sensu_go.etcd_replicator_info:\n  register: result\n\n- name: Retrieve the selected Sensu Go etcd replicator\n  sensu.sensu_go.etcd_replicator_info:\n    name: role_replicator\n  register: result\n\n- name: Do something with result\n  ansible.builtin.debug:\n    msg: \"{{ result.objects.0.resource }}\"\n"
  },
  "sensu.sensu_go.event": {
    "doc": {
      "description": "Send a synthetic event to Sensu.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/events/).",
      "has_action": false,
      "notes": "Metric events bypass the store and are sent off to the event pipeline and corresponding event handlers. Read more about this at U(https://docs.sensu.io/sensu-go/latest/reference/events/#metric-only-events).",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "check": {
          "aliases": [],
          "description": "Name of the check associated with this event. It must exist before event creation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "check_attributes": {
          "aliases": [],
          "description": "Additional check parameters. Find out more at U(https://docs.sensu.io/sensu-go/latest/reference/events/#check-attributes).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "duration": {
              "aliases": [],
              "description": "Command execution time in seconds.",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "executed": {
              "aliases": [],
              "description": "Time that the check request was executed.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "history": {
              "aliases": [],
              "description": "Check status history for the last 21 check executions.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {}
            },
            "issued": {
              "aliases": [],
              "description": "Time that the check request was issued in seconds since the Unix epoch.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "last_ok": {
              "aliases": [],
              "description": "The last time that the check returned an OK status (0) in seconds since the Unix epoch.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "output": {
              "aliases": [],
              "description": "The output from the execution of the check command.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state of the check.",
              "type": "str",
              "required": false,
              "choices": [
                "passing",
                "failing",
                "flapping"
              ],
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "Exit status code produced by the check.",
              "type": "str",
              "required": false,
              "choices": [
                "ok",
                "warning",
                "critical",
                "unknown"
              ],
              "suboptions": {}
            },
            "total_state_change": {
              "aliases": [],
              "description": "The total state change percentage for the check's history.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "entity": {
          "aliases": [],
          "description": "Name of the entity associated with this event. It must exist before event creation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "metric_attributes": {
          "aliases": [],
          "description": "Metric attributes. Find out more at U(https://docs.sensu.io/sensu-go/latest/reference/events/#metric-attributes).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "handlers": {
              "aliases": [],
              "description": "An array of Sensu handlers to use for events created by the check. Each array item must be a string.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "points": {
              "aliases": [],
              "description": "Metric data points including a name, timestamp, value, and tags.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {}
            }
          }
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timestamp": {
          "aliases": [],
          "description": "UNIX time at which the event occurred.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu events",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create an event\n  sensu.sensu_go.event:\n    auth:\n      url: http://localhost:8080\n    entity: awesome_entity\n    check: awesome_check\n    check_attributes:\n      duration: 1.945\n      executed: 1522100915\n      history:\n        - executed: 1552505193\n          status: 1\n      issued: 1552506034\n      last_ok: 1552506033\n      output: '10'\n      state: 'passing'\n      status: 'ok'\n      total_state_change: 0\n    metric_attributes:\n      handlers:\n        - handler1\n        - handler2\n      points:\n        - name: \"sensu-go-sandbox.curl_timings.time_total\"\n          tags:\n            - name: \"response_time_in_ms\"\n              value: 101\n          timestamp: 1552506033\n          value: 0.005\n        - name: \"sensu-go-sandbox.curl_timings.time_namelookup\"\n          tags:\n            - name: \"namelookup_time_in_ms\"\n              value: 57\n          timestamp: 1552506033\n          value: 0.004\n"
  },
  "sensu.sensu_go.event_info": {
    "doc": {
      "description": "Retrieve recent events that Sensu processed.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/events/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "check": {
          "aliases": [],
          "description": "Limit results to a specific check.\nI(entity) must also be specified if this parameter is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "entity": {
          "aliases": [],
          "description": "Limit results to a specific entity.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu events",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List Sensu events\n  sensu.sensu_go.event_info:\n  register: result\n\n- name: List Sensu events for api.example.com\n  sensu.sensu_go.event_info:\n    entity: api.example.com\n  register: result\n\n- name: Filter events by check and entity\n  sensu.sensu_go.event_info:\n    entity: api.example.com\n    check: check-cpu\n  register: result\n"
  },
  "sensu.sensu_go.filter": {
    "doc": {
      "description": "Create, update or delete Sensu filter.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/filters/).",
      "has_action": false,
      "options": {
        "action": {
          "aliases": [],
          "description": "Action to take with the event if the filter expressions match.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "deny"
          ],
          "suboptions": {}
        },
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "expressions": {
          "aliases": [],
          "description": "Filter expressions to be compared with event data.\nRequired if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "runtime_assets": {
          "aliases": [],
          "description": "Assets to be applied to the filter's execution context. JavaScript files in the lib directory of the asset will be evaluated.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu filters",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a filter\n  sensu.sensu_go.filter:\n    name: filter\n    action: deny\n    expressions:\n      - event.check.interval == 10\n      - event.check.occurrences == 1\n    runtime_assets: awesomeness\n\n- name: Create a production filter\n  sensu.sensu_go.filter:\n    name: filter\n    action: allow\n    expressions:\n      - event.entity.labels['environment'] == 'production'\n\n- name: Create a filter with JS expression\n  sensu.sensu_go.filter:\n    name: filter\n    action: deny\n    expressions:\n      - \"_.reduce(event.check.history, function(memo, h) { return (memo || h.status != 0); })\"\n    runtime_assets:\n      - underscore\n\n- name: Handling repeated events\n  sensu.sensu_go.filter:\n    name: filter_interval_60_hourly\n    action: allow\n    expressions:\n      - event.check.interval == 60\n      - event.check.occurrences == 1 || event.check.occurrences % 60 == 0\n\n- name: Delete a filter\n  sensu.sensu_go.filter:\n    name: filter_interval_60_hourly\n    state: absent\n"
  },
  "sensu.sensu_go.filter_info": {
    "doc": {
      "description": "Retrieve information about Sensu filters.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/filters/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu filters\n  sensu.sensu_go.filter_info:\n  register: result\n\n- name: Retrieve a specific Sensu filter\n  sensu.sensu_go.filter_info:\n    name: my-filter\n  register: result\n"
  },
  "sensu.sensu_go.handler_info": {
    "doc": {
      "description": "Retrieve information about Sensu handlers.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/handlers/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu handlers",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu handlers\n  sensu.sensu_go.handler_info:\n  register: result\n\n- name: Retrieve info for a specific Sensu handler\n  sensu.sensu_go.handler_info:\n    name: my-handler\n  register: result\n"
  },
  "sensu.sensu_go.handler_set": {
    "doc": {
      "description": "Create, update or delete Sensu handler set.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/handlers/#handler-sets).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "handlers": {
          "aliases": [],
          "description": "List of Sensu event handlers (names) to use for events using the handler set.\nRequired if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu handler set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a handler set\n  sensu.sensu_go.handler_set:\n    name: notify_all_the_things\n    handlers:\n      - slack\n      - tcp_handler\n      - udp_handler\n\n- name: Delete a handler set\n  sensu.sensu_go.handler_set:\n    name: notify_all_the_things\n    state: absent\n"
  },
  "sensu.sensu_go.hook": {
    "doc": {
      "description": "Create, update or delete Sensu hook.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/hooks/).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "command": {
          "aliases": [],
          "description": "Command to run when the hook is triggered.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "runtime_assets": {
          "aliases": [],
          "description": "List of runtime assets required to run the check.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "stdin": {
          "aliases": [],
          "description": "Controls whether Sensu writes serialized JSON data to the process's stdin.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The hook execution duration timeout in seconds (hard stop).\nRequired if I(state) is C(present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu hooks",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Rudimentary auto-remediation hook\n  sensu.sensu_go.hook:\n    auth:\n      url: http://localhost:8080\n    name: restart_nginx\n    command: sudo systemctl start nginx\n    timeout: 60\n    stdin: false\n\n- name: Capture the process tree\n  sensu.sensu_go.hook:\n    auth:\n      url: http://localhost:8080\n    name: process_tree\n    command: ps aux\n    timeout: 60\n    stdin: false\n\n- name: Delete a hook\n  sensu.sensu_go.hook:\n    name: process_tree\n    state: absent\n"
  },
  "sensu.sensu_go.hook_info": {
    "doc": {
      "description": "Retrieve information about Sensu hooks.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/hooks/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu hooks",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu hooks\n  sensu.sensu_go.hook_info:\n  register: result\n\n- name: Fetch a specific Sensu hook\n  sensu.sensu_go.hook_info:\n    name: awesome-hook\n  register: result\n"
  },
  "sensu.sensu_go.ldap_auth_provider": {
    "doc": {
      "description": "Create, update or delete a Sensu Go LDAP authentication provider.\nFor more information, refer to the Sensu Go documentation at U(https://docs.sensu.io/sensu-go/latest/operations/control-access/ldap-auth/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "groups_prefix": {
          "aliases": [],
          "description": "The prefix added to all LDAP groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "servers": {
          "aliases": [],
          "description": "An array of LDAP servers for your directory.\nRequired if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "binding": {
              "aliases": [],
              "description": "The LDAP account that performs user and group lookups.\nIf your sever supports anonymous binding, you can omit the user_dn or password attributes to query the directory without credentials.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "password": {
                  "aliases": [],
                  "description": "Password for the user_dn account.\nIf your sever supports anonymous binding, you can omit this attribute.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "user_dn": {
                  "aliases": [],
                  "description": "The LDAP account that performs user and group lookups.\nIf your sever supports anonymous binding, you can omit this attribute.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "client_cert_file": {
              "aliases": [],
              "description": "Path to the certificate that should be sent to the server if requested.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "client_key_file": {
              "aliases": [],
              "description": "Path to the key file associated with the client_cert_file.\nRequired if I(client_cert_file) is present.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "group_search": {
              "aliases": [],
              "description": "Search configuration for groups.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attribute": {
                  "aliases": [],
                  "description": "Used for comparing result entries.",
                  "default": "member",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "base_dn": {
                  "aliases": [],
                  "description": "Which part of the directory tree to search.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "name_attribute": {
                  "aliases": [],
                  "description": "Represents the attribute to use as the entry name.",
                  "default": "cn",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "object_class": {
                  "aliases": [],
                  "description": "Identifies the class of objects returned in the search result.",
                  "default": "groupOfNames",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "host": {
              "aliases": [],
              "description": "LDAP server IP address.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "Skips SSL certificate verification when set to true.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "LDAP server port.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "security": {
              "aliases": [],
              "description": "Encryption type to be used for the connection to the LDAP server.",
              "default": "tls",
              "type": "str",
              "required": false,
              "choices": [
                "insecure",
                "tls",
                "starttls"
              ],
              "suboptions": {}
            },
            "trusted_ca_file": {
              "aliases": [],
              "description": "Path to an alternative CA bundle file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user_search": {
              "aliases": [],
              "description": "Search configuration for users.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attribute": {
                  "aliases": [],
                  "description": "Used for comparing result entries.",
                  "default": "uid",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "base_dn": {
                  "aliases": [],
                  "description": "Which part of the directory tree to search.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "name_attribute": {
                  "aliases": [],
                  "description": "Represents the attribute to use as the entry name.",
                  "default": "cn",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "object_class": {
                  "aliases": [],
                  "description": "Identifies the class of objects returned in the search result.",
                  "default": "person",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username_prefix": {
          "aliases": [],
          "description": "The prefix added to all LDAP usernames.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu LDAP authentication provider",
      "version_added": "1.10.0"
    },
    "examples": "\n- name: Create a LDAP auth provider\n  sensu.sensu_go.ldap_auth_provider:\n    name: openldap\n    servers:\n      - host: 127.0.0.1\n        group_search:\n          base_dn: dc=acme,dc=org\n        user_search:\n          base_dn: dc=acme,dc=org\n\n- name: Delete a LDAP auth provider\n  sensu.sensu_go.ldap_auth_provider:\n    name: openldap\n    state: absent\n"
  },
  "sensu.sensu_go.mutator": {
    "doc": {
      "description": "Create, update or delete Sensu mutator.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/mutators/).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "command": {
          "aliases": [],
          "description": "The mutator command to be executed by the Sensu backend.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env_vars": {
          "aliases": [],
          "description": "A mapping of environment variable names and values to use with command execution.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "runtime_assets": {
          "aliases": [],
          "description": "List of runtime assets, required to run the mutator I(command).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "secrets": {
          "aliases": [],
          "description": "List of secrets that are available to the command.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "1.6.0",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Variable name that will contain the sensitive data.",
              "type": "str",
              "required": true,
              "version_added": "1.6.0",
              "suboptions": {}
            },
            "secret": {
              "aliases": [],
              "description": "Name of the secret that contains sensitive data.",
              "type": "str",
              "required": true,
              "version_added": "1.6.0",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The mutator execution duration timeout in seconds (hard stop).",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu mutators",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a mutator\n  sensu.sensu_go.mutator:\n    name: mutator\n    command: sensu-influxdb-mutator\n    timeout: 30\n    env_vars:\n      INFLUXDB_ADDR: http://influxdb.default.svc.cluster.local:8086\n      INFLUXDB_USER: sensu\n    runtime_assets:\n      - sensu-influxdb-mutator\n\n- name: Delete a mutator\n  sensu.sensu_go.mutator:\n    name: mutator\n    state: absent\n"
  },
  "sensu.sensu_go.mutator_info": {
    "doc": {
      "description": "Retrieve information about Sensu mutators.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/mutators/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu mutators",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu mutators\n  sensu.sensu_go.mutator_info:\n  register: result\n\n- name: Retrieve a single Sensu mutator\n  sensu.sensu_go.mutator_info:\n    name: my-mutator\n  register: result\n"
  },
  "sensu.sensu_go.namespace": {
    "doc": {
      "description": "Create, update or delete a Sensu namespace.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#namespaces).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu namespaces",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a new namespace\n  sensu.sensu_go.namespace:\n    name: production\n    state: present\n\n- name: Delete a namespace\n  sensu.sensu_go.namespace:\n    name: staging\n    state: absent\n"
  },
  "sensu.sensu_go.namespace_info": {
    "doc": {
      "description": "Retrieve information about Sensu namespaces.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#namespaces).",
      "has_action": false,
      "notes": "Currently, it is not possible to retrieve information about a single namespace because namespace is not much more than a name itself.",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu namespaces",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List Sensu namespaces\n  sensu.sensu_go.namespace_info:\n  register: result\n"
  },
  "sensu.sensu_go.oidc_auth_provider": {
    "doc": {
      "description": "Create, update or delete a Sensu Go OIDC authentication provider.\nFor more information, refer to the Sensu Go documentation at U(https://docs.sensu.io/sensu-go/latest/operations/control-access/oidc-auth/).",
      "has_action": false,
      "notes": "Supported only on Sensu Go versions >= 6.",
      "options": {
        "additional_scopes": {
          "aliases": [],
          "description": "Scopes to include in the claims.",
          "default": "openid",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "client_id": {
          "aliases": [],
          "description": "The OIDC provider application Client ID.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_secret": {
          "aliases": [],
          "description": "The OIDC provider application Client Secret.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disable_offline_access": {
          "aliases": [],
          "description": "If C(true), the OIDC provider cannot include the offline_access scope in the authentication request. Otherwise, C(false).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "groups_claim": {
          "aliases": [],
          "description": "The claim to use to form the associated RBAC groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "groups_prefix": {
          "aliases": [],
          "description": "The prefix added to all OIDC groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "redirect_uri": {
          "aliases": [],
          "description": "Redirect URL to provide to the OIDC provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "The location of the OIDC server you wish to authenticate against.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username_claim": {
          "aliases": [],
          "description": "The claim to use to form the final RBAC user name.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username_prefix": {
          "aliases": [],
          "description": "The prefix added to all OIDC usernames.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu OIDC authentication provider",
      "version_added": "1.10.0"
    },
    "examples": "\n- name: Create a OIDC auth provider\n  sensu.sensu_go.oidc_auth_provider:\n    state: present\n    name: oidc_name\n    additional_scopes:\n        - groups\n        - email\n    client_id: a8e43af034e7f2608780\n    client_secret: b63968394be6ed2edb61c93847ee792f31bf6216\n    disable_offline_access: false\n    redirect_uri: http://127.0.0.1:8080/api/enterprise/authentication/v2/oidc/callback\n    server: https://oidc.example.com:9031\n    groups_claim: groups\n    groups_prefix: 'oidc:'\n    username_claim: email\n    username_prefix: 'oidc:'\n\n- name: Delete a OIDC auth provider\n  sensu.sensu_go.oidc_auth_provider:\n    name: oidc_name\n    state: absent\n"
  },
  "sensu.sensu_go.pipe_handler": {
    "doc": {
      "description": "Create, update or delete a Sensu pipe handler.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/handlers/#pipe-handlers).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "command": {
          "aliases": [],
          "description": "The handler command to be executed. The event data is passed to the process through STDIN.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env_vars": {
          "aliases": [],
          "description": "A mapping of environment variable names and values to use with command execution.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "List of filters to use when determining whether to pass the check result to this handler.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "mutator": {
          "aliases": [],
          "description": "Mutator to call for transforming the check result before passing it to this handler.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "runtime_assets": {
          "aliases": [],
          "description": "List of runtime assets to required to run the handler C(command).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "secrets": {
          "aliases": [],
          "description": "List of secrets that are available to the command.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "1.6.0",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Variable name that will contain the sensitive data.",
              "type": "str",
              "required": true,
              "version_added": "1.6.0",
              "suboptions": {}
            },
            "secret": {
              "aliases": [],
              "description": "Name of the secret that contains sensitive data.",
              "type": "str",
              "required": true,
              "version_added": "1.6.0",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout for handler execution.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu pipe handler",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Setup InfluxDB handler\n  sensu.sensu_go.pipe_handler:\n    name: influx-db\n    command: sensu-influxdb-handler -d sensu\n    env_vars:\n      INFLUXDB_ADDR: http://influxdb.default.svc.cluster.local:8086\n      INFLUXDB_USER: sensu\n      INFLUXDB_PASS: password\n    runtime_assets:\n      - sensu-influxdb-handler\n\n- name: Delete  handler\n  sensu.sensu_go.pipe_handler:\n    name: influx-db\n    state: absent\n"
  },
  "sensu.sensu_go.role": {
    "doc": {
      "description": "Create, update or delete Sensu role.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#roles-and-cluster-roles).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "Rules that the role applies.\nMust be non-empty if I(state) is C(present).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "resource_names": {
              "aliases": [],
              "description": "Names of specific resources the rule has permission to access.\nNote that for the C(create) verb, this argument will not be taken into account when enforcing RBAC, even if it is provided.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "resources": {
              "aliases": [],
              "description": "Types of resources the rule has permission to access.",
              "type": "list",
              "required": true,
              "elements": "str",
              "suboptions": {}
            },
            "verbs": {
              "aliases": [],
              "description": "Permissions to be applied by the rule.",
              "type": "list",
              "required": true,
              "choices": [
                "get",
                "list",
                "create",
                "update",
                "delete"
              ],
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu roles",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a role\n  sensu.sensu_go.role:\n    name: readonly\n    rules:\n      - verbs:\n      - get\n      - list\n    resources:\n      - checks\n      - entities\n\n- name: Delete a role\n  sensu.sensu_go.role:\n    name: readonly\n    state: absent\n"
  },
  "sensu.sensu_go.role_binding": {
    "doc": {
      "description": "Create, update or delete Sensu role binding.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#role-bindings-and-cluster-role-bindings).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "cluster_role": {
          "aliases": [],
          "description": "Name of the cluster role. Note that the resulting role binding grants the cluster role to the provided users and groups in the context of I(auth.namespace) only.\nThis parameter is mutually exclusive with I(role).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "List of groups to bind to the role or cluster role.\nNote that at least one of I(users) and I(groups) must be specified when creating a role binding.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "Name of the role.\nThis parameter is mutually exclusive with I(cluster_role).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "users": {
          "aliases": [],
          "description": "List of users to bind to the role or cluster role.\nNote that at least one of I(users) and I(groups) must be specified when creating a role binding.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu role bindings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a role binding\n  sensu.sensu_go.role_binding:\n    name: dev_and_testing\n    role: testers_permissive\n    groups:\n      - testers\n      - dev\n      - ops\n    users:\n      - alice\n\n- name: Create a role binding for admins\n  sensu.sensu_go.role_binding:\n    name: org-admins\n    cluster_role: admin\n    groups:\n      - team1-admins\n      - team2-admins\n\n- name: Delete a role binding\n  sensu.sensu_go.role_binding:\n    name: org-admins\n    state: absent\n"
  },
  "sensu.sensu_go.role_binding_info": {
    "doc": {
      "description": "Retrieve information about Sensu role bindings.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#role-bindings-and-cluster-role-bindings).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu role bindings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu role bindings\n  sensu.sensu_go.role_binding_info:\n  register: result\n\n- name: Retrieve a single Sensu role binding\n  sensu.sensu_go.role_binding_info:\n    name: my-role-binding\n  register: result\n"
  },
  "sensu.sensu_go.role_info": {
    "doc": {
      "description": "Retrieve information about Sensu roles.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#roles-and-cluster-roles).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu roles",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu roles\n  sensu.sensu_go.role_info:\n  register: result\n\n- name: Retrieve a specific Sensu role\n  sensu.sensu_go.role_info:\n    name: my-role\n  register: result\n"
  },
  "sensu.sensu_go.secret": {
    "doc": {
      "description": "Create, update or delete Sensu secret.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/operations/manage-secrets/secrets/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Secret's id in the provider store.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "Name of the secrets provider that backs the secret value.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu Go secrets",
      "version_added": "1.6.0"
    },
    "examples": "\n- name: Create an environment varibale-backed secret\n  sensu.sensu_go.secret:\n    name: env_secret\n    provider: env\n    id: MY_ENV_VARIABLE\n\n- name: Create a HashiCorp Vault-backed secret\n  sensu.sensu_go.secret:\n    name: hashi_valut_secret\n    provider: vault\n    id: secret/store#name\n\n- name: Delete a secret\n  sensu.sensu_go.secret:\n    name: my_secret\n    state: absent\n"
  },
  "sensu.sensu_go.secret_info": {
    "doc": {
      "description": "Retrieve information about Sensu Go secrets.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/operations/manage-secrets/secrets/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List available Sensu Go secrets",
      "version_added": "1.6.0"
    },
    "examples": "\n- name: List all Sensu Go secrets\n  sensu.sensu_go.secret_info:\n  register: result\n\n- name: Retrieve the selected Sensu Go secret\n  sensu.sensu_go.secret_info:\n    name: my-secret\n  register: result\n\n- name: Do something with result\n  ansible.builtin.debug:\n    msg: \"{{ result.objects.0.id }}\"\n"
  },
  "sensu.sensu_go.secrets_provider_env": {
    "doc": {
      "description": "Create or delete a Sensu Go Env secrets provider.\nThe module operates on a secrets provider named C(env).\nFor more information, refer to the Sensu Go documentation at U(https://docs.sensu.io/sensu-go/latest/operations/manage-secrets/secrets-providers/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu Env secrets provider",
      "version_added": "1.6.0"
    },
    "examples": "\n- name: Create the env secrets provider\n  sensu.sensu_go.secrets_provider_env:\n\n- name: Delete the env secrets provider\n  sensu.sensu_go.secrets_provider_env:\n    state: absent\n"
  },
  "sensu.sensu_go.secrets_provider_info": {
    "doc": {
      "description": "Retrieve information about Sensu Go secrets providers.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/operations/manage-secrets/secrets-providers/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu secrets providers",
      "version_added": "1.6.0"
    },
    "examples": "\n- name: List all Sensu secrets providers\n  sensu.sensu_go.secrets_provider_info:\n  register: result\n\n- name: List the selected Sensu secrets provider\n  sensu.sensu_go.secrets_provider_info:\n    name: my_provider\n  register: result\n\n- name: Do something with result\n  ansible.builtin.debug:\n    msg: \"{{ result.objects.0.metadata.name }}\"\n"
  },
  "sensu.sensu_go.secrets_provider_vault": {
    "doc": {
      "description": "Create, update or delete a Sensu Go VaultProvider secrets provider.\nFor more information, refer to the Sensu Go documentation at U(https://docs.sensu.io/sensu-go/latest/operations/manage-secrets/secrets-providers/).",
      "has_action": false,
      "options": {
        "address": {
          "aliases": [],
          "description": "Address of the Vault server.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "burst_limit": {
          "aliases": [],
          "description": "Maximum allowed number of secrets requests in a rate interval.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "max_retries": {
          "aliases": [],
          "description": "Maximum number of times to retry failed connections to Vault server.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "rate_limit": {
          "aliases": [],
          "description": "Maximum number of secrets requests for per second.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout (in seconds) for connection to Vault server.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "TLS configuration for establishing connection with Vault server.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ca_cert": {
              "aliases": [],
              "description": "Path to the certificate file of the trusted certificate authority.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "client_cert": {
              "aliases": [],
              "description": "Path to the client certificate file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "client_key": {
              "aliases": [],
              "description": "Path to the client key file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "cname": {
              "aliases": [],
              "description": "Canonical name for the client.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "token": {
          "aliases": [],
          "description": "Authentication token to use with Vault.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Version of the Vault key/value store.\nPlease refer to U(https://www.vaultproject.io/docs/secrets/kv) for additional information.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "choices": [
            "v1",
            "v2"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu VaultProvider secrets providers",
      "version_added": "1.6.0"
    },
    "examples": "\n- name: Create a vault secrets provider\n  sensu.sensu_go.secrets_provider_vault:\n    name: my-vault\n    address: https://my-vault.com\n    token: VAULT_TOKEN\n    version: v1\n\n- name: Delete a vault secrets provider\n  sensu.sensu_go.secrets_provider_vault:\n    name: my-vault\n    state: absent\n"
  },
  "sensu.sensu_go.silence": {
    "doc": {
      "description": "Create, update or delete Sensu silence.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/silencing/).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "begin": {
          "aliases": [],
          "description": "UNIX time at which silence entry goes into effect.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "check": {
          "aliases": [],
          "description": "The name of the check the entry should match.\nIf left empty a silencing entry will contain an asterisk in the check position. This indicates that any event where the originating entities subscriptions match the subscription specified in the entry will be marked as silenced, regardless of the check name.\nThis parameter is required if the I(subscription) parameter is absent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expire": {
          "aliases": [],
          "description": "Number of seconds until the silence expires.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "expire_on_resolve": {
          "aliases": [],
          "description": "If the entry should be deleted when a check begins return OK status (resolves).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reason": {
          "aliases": [],
          "description": "Reason for silencing.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subscription": {
          "aliases": [],
          "description": "The name of the subscription the entry should match.\nIf left empty a silencing entry will contain an asterisk in the subscription position. This indicates that any event with a matching check name will be marked as silenced, regardless of the originating entities subscriptions.\nSpecific entity can also be targeted by taking advantage of per-entity subscription (entity:<entity_name>).\nThis parameter is required if the I(check) parameter is absent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu silences",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Silence a specific check\n  sensu.sensu_go.silence:\n    subscription: proxy\n    check: check-disk\n\n- name: Silence specific check regardless of the originating entities subscription\n  sensu.sensu_go.silence:\n    check: check-cpu\n\n- name: Silence all checks on a specific entity\n  sensu.sensu_go.silence:\n    subscription: entity:important-entity\n    expire: 120\n    reason: rebooting the world\n\n- name: Delete a silencing entry\n  sensu.sensu_go.silence:\n    subscription: entity:important-entity\n    state: absent\n"
  },
  "sensu.sensu_go.silence_info": {
    "doc": {
      "description": "Retrieve information about Sensu silences.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/silencing/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "check": {
          "aliases": [],
          "description": "The name of the check the entry should match. If left empty a silencing entry will contain an asterisk in the check position.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subscription": {
          "aliases": [],
          "description": "The name of the subscription the entry should match. If left empty a silencing entry will contain an asterisk in the subscription position.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu silence entries",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List all Sensu silence entries\n  sensu.sensu_go.silence_info:\n  register: result\n\n- name: Fetch a specific silence with name proxy:awesome_check\n  sensu.sensu_go.silence_info:\n    subscription: proxy\n    check: awesome_check\n  register: result\n"
  },
  "sensu.sensu_go.socket_handler": {
    "doc": {
      "description": "Create, update or delete Sensu socket handler.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/handlers/#tcp-udp-handlers).",
      "has_action": false,
      "options": {
        "annotations": {
          "aliases": [],
          "description": "Custom metadata fields with fewer restrictions, as key/value pairs.\nThese are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "filters": {
          "aliases": [],
          "description": "List of filters to use when determining whether to pass the check result to this handler.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The socket host address (IP or hostname) to connect to.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Custom metadata fields that can be accessed within Sensu, as key/value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "mutator": {
          "aliases": [],
          "description": "Mutator to call for transforming the check result before passing it to this handler.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The socket port to connect to.\nRequired if I(state) is C(present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Target state of the Sensu object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout for handler execution.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The handler type.\nRequired if I(state) is C(present).",
          "type": "str",
          "required": false,
          "choices": [
            "tcp",
            "udp"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu TCP/UDP handler",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: TCP handler\n  sensu.sensu_go.socket_handler:\n    name: tcp_handler\n    type: tcp\n    host: 10.0.1.99\n    port: 4444\n\n- name: UDP handler\n  sensu.sensu_go.socket_handler:\n    name: udp_handler\n    type: udp\n    host: 10.0.1.99\n    port: 4444\n\n- name: Delete a handler\n  sensu.sensu_go.socket_handler:\n    name: udp_handler\n    state: absent\n"
  },
  "sensu.sensu_go.tessen": {
    "doc": {
      "description": "Enable or disable Tessen service.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/tessen/).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Enable or disable sending anonymized data to Sensu Inc.",
          "type": "str",
          "required": true,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu's Tessen configuration",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Disable Tessen\n  sensu.sensu_go.tessen:\n    state: disabled\n  register: result\n"
  },
  "sensu.sensu_go.user": {
    "doc": {
      "description": "Create, update, activate or deactivate Sensu user.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#users).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "groups": {
          "aliases": [],
          "description": "List of groups user belongs to.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.\nIf the resource with selected name already exists, Ansible module will update it to match the specification in the task.\nConsult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for the user.\nRequired if user with a desired name does not exist yet on the backend and I(password_hash) is not set.\nIf both I(password) and I(password_hash) are set, I(password_hash) is ignored and calculated from the I(password) if required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password_hash": {
          "aliases": [],
          "description": "Bcrypt password hash for the user.\nUse C(sensuctl user hash-password PASSWORD) to generate a hash.\nRequired if user with a desired name does not exist yet on the backend and I(password) is not set.\nIf both I(password) and I(password_hash) are set, I(password_hash) is ignored and calculated from the I(password) if required.\nSensu Go < 5.21.0 does not support creating/updating users using hashed passwords. Use I(password) parameter if you need to manage such Sensu Go installations.\nAt the moment, change detection does not work properly when using password hashes because the Sensu Go backend does not expose enough information via its API.",
          "type": "str",
          "required": false,
          "version_added": "1.8.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the user.\nUsers cannot actually be deleted, only deactivated.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "bcrypt (when managing Sensu Go 5.21.0 or newer)",
        "python >= 2.7"
      ],
      "short_description": "Manage Sensu users",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a user\n  sensu.sensu_go.user:\n    auth:\n      url: http://localhost:8080\n    name: awesome_username\n    password: hidden_password?\n    groups:\n      - dev\n      - prod\n\n- name: Use pre-hashed password\n  sensu.sensu_go.user:\n    auth:\n      url: http://localhost:8080\n    name: awesome_username\n    password_hash: $5f$14$.brXRviMZpbaleSq9kjoUuwm67V/s4IziOLGHjEqxJbzPsreQAyNm\n\n- name: Deactivate a user\n  sensu.sensu_go.user:\n    name: awesome_username\n    state: disabled\n"
  },
  "sensu.sensu_go.user_info": {
    "doc": {
      "description": "Retrieve information about Sensu users.\nFor more information, refer to the Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/reference/rbac/#users).",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "Authentication parameters. Can define each of them with ENV as well.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "api_key": {
              "aliases": [],
              "description": "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.\nThis replaces I(auth.user) and I(auth.password) parameters.\nFor more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/).",
              "type": "str",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            },
            "ca_path": {
              "aliases": [],
              "description": "Path to the CA bundle that should be used to validate the backend certificate.\nIf this parameter is not set, module will use the CA bundle that python is using.\nIt is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable.",
              "type": "path",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "P@ssw0rd!",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.",
              "default": "http://localhost:8080",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user": {
              "aliases": [],
              "description": "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.\nThis parameter is ignored if the I(auth.api_key) parameter is set.",
              "default": "admin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Flag that controls the certificate validation.\nIf you are using self-signed certificates, you can set this parameter to C(false).\nONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.\nIt is also possible to set this parameter via the I(SENSU_VERIFY) environment variable.",
              "default": "True",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Retrieve information about this specific object instead of listing all objects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7"
      ],
      "short_description": "List Sensu users",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: List Sensu users\n  sensu.sensu_go.user_info:\n  register: result\n\n- name: Retrieve a single Sensu user\n  sensu.sensu_go.user_info:\n    name: my-user\n  register: result\n"
  }
}