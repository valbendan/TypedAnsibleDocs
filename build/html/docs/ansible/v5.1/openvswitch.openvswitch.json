{
  "openvswitch.openvswitch.openvswitch_bond": {
    "doc": {
      "description": "Manage Open vSwitch bonds and associated options.",
      "has_action": false,
      "options": {
        "bond_downdelay": {
          "aliases": [],
          "description": "Number of milliseconds a link must be down to be deactivated to prevent flapping.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "bond_mode": {
          "aliases": [],
          "description": "Sets the bond mode",
          "type": "str",
          "required": false,
          "choices": [
            "active-backup",
            "balance-tcp",
            "balance-slb"
          ],
          "suboptions": {}
        },
        "bond_updelay": {
          "aliases": [],
          "description": "Number of milliseconds a link must be up to be activated to prevent flapping.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "bridge": {
          "aliases": [],
          "description": "Name of bridge to manage",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "database_socket": {
          "aliases": [],
          "description": "Path/ip to datbase socket to use\nDefault path is used if not specified\nPath should start with 'unix:' prefix",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external_ids": {
          "aliases": [],
          "description": "Dictionary of external_ids applied to a port.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of interfaces to add to the bond",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "lacp": {
          "aliases": [],
          "description": "Sets LACP mode",
          "type": "str",
          "required": false,
          "choices": [
            "active",
            "passive",
            "off"
          ],
          "suboptions": {}
        },
        "other_config": {
          "aliases": [],
          "description": "Dictionary of other_config applied to a port.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Name of port to manage on the bridge",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "set": {
          "aliases": [],
          "description": "Sets one or more properties on a port.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the port should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long to wait for ovs-vswitchd to respond in seconds",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ovs-vsctl"
      ],
      "short_description": "Manage Open vSwitch bonds",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create an active-backup bond using eth4 and eth5 on bridge br-ex\n  openvswitch.openvswitch.openvswitch_bond:\n    bridge: br-ex\n    port: bond1\n    interfaces:\n      - eth4\n      - eth5\n    state: present\n- name: Delete the bond from bridge br-ex\n  openvswitch.openvswitch.openvswitch_bond:\n    bridge: br-ex\n    port: bond1\n    state: absent\n- name: Create an active LACP bond using eth4 and eth5 on bridge br-ex\n  openvswitch.openvswitch.openvswitch_bond:\n    bridge: br-ex\n    port: bond1\n    interfaces:\n      - eth4\n      - eth5\n    lacp: active\n    state: present\n# NOTE: other_config values of integer type must be represented\n# as literal strings\n- name: Configure bond with miimon link monitoring at 100 millisecond intervals\n  openvswitch.openvswitch.openvswitch_bond:\n    bridge: br-ex\n    port: bond1\n    interfaces:\n      - eth4\n      - eth5\n    bond_updelay: 100\n    bond_downdelay: 100\n    state: present\n  args:\n    other_config:\n      bond-detect-mode: miimon\n      bond-miimon-interval: '\"100\"'\n- name: Create an active LACP bond using DPDK interfaces\n  openvswitch.openvswitch.openvswitch_bond:\n    bridge: br-provider\n    port: dpdkbond\n    interfaces:\n      - \"0000:04:00.0\"\n      - \"0000:04:00.1\"\n    lacp: active\n    set:\n      - \"interface 0000:04:00.0 type=dpdk options:dpdk-devargs=0000:04:00.0\"\n      - \"interface 0000:04:00.1 type=dpdk options:dpdk-devargs=0000:04:00.1\"\n    state: present\n- name: Create an active-backup bond using eth4 and eth5 on bridge br-ex in second OVS database\n  openvswitch.openvswitch.openvswitch_bond:\n    bridge: br-ex\n    port: bond1\n    interfaces:\n      - eth4\n      - eth5\n    state: present\n    database_socket: unix:/opt/second.sock\n"
  },
  "openvswitch.openvswitch.openvswitch_bridge": {
    "doc": {
      "description": "Manage Open vSwitch bridges",
      "has_action": false,
      "options": {
        "bridge": {
          "aliases": [],
          "description": "Name of bridge or fake bridge to manage",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "database_socket": {
          "aliases": [],
          "description": "Path/ip to datbase socket to use\nDefault path is used if not specified\nPath should start with 'unix:' prefix",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external_ids": {
          "aliases": [],
          "description": "A dictionary of external-ids. Omitting this parameter is a No-op. To  clear all external-ids pass an empty value.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "fail_mode": {
          "aliases": [],
          "description": "Set bridge fail-mode. The default value (None) is a No-op.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parent": {
          "aliases": [],
          "description": "Bridge parent of the fake bridge to manage",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "set": {
          "aliases": [],
          "description": "Run set command after bridge configuration. This parameter is non-idempotent, play will always return I(changed) state if present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the bridge should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long to wait for ovs-vswitchd to respond",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "The VLAN id of the fake bridge to manage (must be between 0 and 4095). This parameter is required if I(parent) parameter is set.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ovs-vsctl"
      ],
      "short_description": "Manage Open vSwitch bridges",
      "version_added": "1.0.0"
    },
    "examples": "\n# Create a bridge named br-int\n- openvswitch.openvswitch.openvswitch_bridge:\n    bridge: br-int\n    state: present\n\n# Create a fake bridge named br-int within br-parent on the VLAN 405\n- openvswitch.openvswitch.openvswitch_bridge:\n    bridge: br-int\n    parent: br-parent\n    vlan: 405\n    state: present\n\n# Create an integration bridge\n- openvswitch.openvswitch.openvswitch_bridge:\n    bridge: br-int\n    state: present\n    fail_mode: secure\n  args:\n    external_ids:\n      bridge-id: br-int\n# Create a bridge named br0 in database with socket at /opt/second.sock\n- openvswitch.openvswitch.openvswitch_bridge:\n    bridge: br0\n    state: present\n    database_socket: unix:/opt/second.sock\n"
  },
  "openvswitch.openvswitch.openvswitch_db": {
    "doc": {
      "description": "Set column values in record in database table.",
      "has_action": false,
      "options": {
        "col": {
          "aliases": [],
          "description": "Identifies the column in the record.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "database_socket": {
          "aliases": [],
          "description": "Path/ip to datbase socket to use\nDefault path is used if not specified\nPath should start with 'unix:' prefix",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Identifies the key in the record column, when the column is a map type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "record": {
          "aliases": [],
          "description": "Identifies the record in the table.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Configures the state of the key. When set to I(present), the I(key) and I(value) pair will be set on the I(record) and when set to I(absent) the I(key) will not be set.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "read"
          ],
          "suboptions": {}
        },
        "table": {
          "aliases": [],
          "description": "Identifies the table in the database.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long to wait for ovs-vswitchd to respond",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Expected value for the table, record, column and key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ovs-vsctl >= 2.3.3"
      ],
      "short_description": "Configure open vswitch database.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Increase the maximum idle time to 50 seconds before pruning unused kernel\n# rules.\n- openvswitch.openvswitch.openvswitch_db:\n    table: open_vswitch\n    record: .\n    col: other_config\n    key: max-idle\n    value: 50000\n\n# Disable in band copy\n- openvswitch.openvswitch.openvswitch_db:\n    table: Bridge\n    record: br-int\n    col: other_config\n    key: disable-in-band\n    value: true\n\n# Remove in band key\n- openvswitch.openvswitch.openvswitch_db:\n    state: present\n    table: Bridge\n    record: br-int\n    col: other_config\n    key: disable-in-band\n\n# Mark port with tag 10\n- openvswitch.openvswitch.openvswitch_db:\n    table: Port\n    record: port0\n    col: tag\n    value: 10\n\n# Mark port with tag 10 for OVSDB with socket in /opt/second.sock\n- openvswitch.openvswitch.openvswitch_db:\n    table: Port\n    record: port0\n    col: tag\n    value: 10\n    database_socket: unix:/opt/second.sock\n\n# Get interface statistics\n- openvswitch.openvswitch.openvswitch_db:\n    state: read\n    table: interface\n    record: ifname\n    col: statistics\n\n# Get tx_packets value\n- openvswitch.openvswitch.openvswitch_db:\n    state: read\n    table: interface\n    record: ifname\n    col: statistics\n    key: tx_packets\n\n# Get mtu value\n- openvswitch.openvswitch.openvswitch_db:\n    state: read\n    table: interface\n    record: ifname\n    col: mtu\n"
  },
  "openvswitch.openvswitch.openvswitch_port": {
    "doc": {
      "description": "Manage Open vSwitch ports",
      "has_action": false,
      "options": {
        "bridge": {
          "aliases": [],
          "description": "Name of bridge to manage",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "database_socket": {
          "aliases": [],
          "description": "Path/ip to datbase socket to use\nDefault path is used if not specified\nPath should start with 'unix:' prefix",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external_ids": {
          "aliases": [],
          "description": "Dictionary of external_ids applied to a port.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Name of port to manage on the bridge",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "set": {
          "aliases": [],
          "description": "Set multiple properties on a port.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the port should exist",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "VLAN tag for this port. Must be a value between 0 and 4095.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long to wait for ovs-vswitchd to respond",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ovs-vsctl"
      ],
      "short_description": "Manage Open vSwitch ports",
      "version_added": "1.0.0"
    },
    "examples": "\n# Creates port eth2 on bridge br-ex\n- openvswitch.openvswitch.openvswitch_port:\n    bridge: br-ex\n    port: eth2\n    state: present\n\n# Creates port eth6\n- openvswitch.openvswitch.openvswitch_port:\n    bridge: bridge-loop\n    port: eth6\n    state: present\n    set: Interface eth6\n\n# Creates port vlan10 with tag 10 on bridge br-ex\n- openvswitch.openvswitch.openvswitch_port:\n    bridge: br-ex\n    port: vlan10\n    tag: 10\n    state: present\n    set: Interface vlan10\n\n# Assign interface id server1-vifeth6 and mac address 00:00:5E:00:53:23\n# to port vifeth6 and setup port to be managed by a controller.\n- openvswitch.openvswitch.openvswitch_port:\n    bridge: br-int\n    port: vifeth6\n    state: present\n  args:\n    external_ids:\n      iface-id: '{{ inventory_hostname }}-vifeth6'\n      attached-mac: 00:00:5E:00:53:23\n      vm-id: '{{ inventory_hostname }}'\n      iface-status: active\n\n# Plugs port veth0 into brdige br0 for database for OVSDB instance\n# with socket unix:/opt/second_ovsdb.sock\n- openvswitch.openvswitch.openvswitch_port:\n    bridge: br0\n    port: veth0\n    state: present\n    database_socket: unix:/opt/second_ovsdb.sock\n\n"
  }
}