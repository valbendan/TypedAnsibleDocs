{
  "ovirt.ovirt.ovirt_affinity_group": {
    "doc": {
      "description": "This module manage affinity groups in oVirt/RHV. It can also manage assignments of those groups to VMs.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster of the affinity group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the affinity group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host_enforcing": {
          "aliases": [],
          "description": "If I(yes) VM cannot start on host if it does not satisfy the C(host_rule).\nThis parameter is support since oVirt/RHV 4.1 version.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host_rule": {
          "aliases": [],
          "description": "If I(positive) I(all) VMs in this group should run on the this host.\nIf I(negative) I(no) VMs in this group should run on the this host.\nIf I(disabled) this affinity group doesn't take effect.\nThis parameter is support since oVirt/RHV 4.1 version.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "negative",
            "positive"
          ],
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "List of the hosts names, which should have assigned this affinity group.\nThis parameter is support since oVirt/RHV 4.1 version.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the affinity group to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the affinity group be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vm_enforcing": {
          "aliases": [],
          "description": "If I(yes) VM cannot start if it does not satisfy the C(vm_rule).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_rule": {
          "aliases": [],
          "description": "If I(positive) I(all) VMs in this group should run on the host defined by C(host_rule).\nIf I(negative) I(no) VMs in this group should run on the host defined by C(host_rule).\nIf I(disabled) this affinity group doesn't take effect.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "negative",
            "positive"
          ],
          "suboptions": {}
        },
        "vms": {
          "aliases": [],
          "description": "List of the VMs names, which should have assigned this affinity group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage affinity groups in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n- name: Create(if not exists) and assign affinity group to VMs vm1 and vm2 and host host1\n  ovirt.ovirt.ovirt_affinity_group:\n    name: mygroup\n    cluster: mycluster\n    vm_enforcing: true\n    vm_rule: positive\n    host_enforcing: true\n    host_rule: positive\n    vms:\n      - vm1\n      - vm2\n    hosts:\n      - host1\n\n- name: Detach VMs from affinity group and disable VM rule\n  ovirt.ovirt.ovirt_affinity_group:\n    name: mygroup\n    cluster: mycluster\n    vm_enforcing: false\n    vm_rule: disabled\n    host_enforcing: true\n    host_rule: positive\n    vms: []\n    hosts:\n      - host1\n      - host2\n\n- name: Remove affinity group\n  ovirt.ovirt.ovirt_affinity_group:\n    state: absent\n    cluster: mycluster\n    name: mygroup\n"
  },
  "ovirt.ovirt.ovirt_affinity_label": {
    "doc": {
      "description": "This module manage affinity labels in oVirt/RHV. It can also manage assignments of those labels to hosts and VMs.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster where vms and hosts resides.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "List of the hosts names, which should have assigned this affinity label.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the affinity label to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the affinity label be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vms": {
          "aliases": [],
          "description": "List of the VMs names, which should have assigned this affinity label.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage affinity labels in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create(if not exists) and assign affinity label to vms vm1 and vm2 and host host1\n- ovirt.ovirt.ovirt_affinity_label:\n    name: mylabel\n    cluster: mycluster\n    vms:\n      - vm1\n      - vm2\n    hosts:\n      - host1\n\n# To detach all VMs from label\n- ovirt.ovirt.ovirt_affinity_label:\n    name: mylabel\n    cluster: mycluster\n    vms: []\n\n# Remove affinity label\n- ovirt.ovirt.ovirt_affinity_label:\n    state: absent\n    name: mylabel\n"
  },
  "ovirt.ovirt.ovirt_affinity_label_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV affinity labels.\nThis module was called C(ovirt_affinity_label_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_affinity_label_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_affinity_labels), which contains a list of affinity labels. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Name of the host, which affinity labels should be listed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the affinity labels which should be listed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the VM, which affinity labels should be listed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV affinity labels",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all affinity labels, which names start with C(label):\n- ovirt.ovirt.ovirt_affinity_label_info:\n    name: label*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_affinity_labels }}\"\n\n# Gather information about all affinity labels, which are assigned to VMs\n# which names start with C(postgres):\n- ovirt.ovirt.ovirt_affinity_label_info:\n    vm: postgres*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_affinity_labels }}\"\n\n# Gather information about all affinity labels, which are assigned to hosts\n# which names start with C(west):\n- ovirt.ovirt.ovirt_affinity_label_info:\n    host: west*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_affinity_labels }}\"\n\n# Gather information about all affinity labels, which are assigned to hosts\n# which names start with C(west) or VMs which names start with C(postgres):\n- ovirt.ovirt.ovirt_affinity_label_info:\n    host: west*\n    vm: postgres*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_affinity_labels }}\"\n"
  },
  "ovirt.ovirt.ovirt_api_info": {
    "doc": {
      "description": "Retrieve information about the oVirt/RHV API.\nThis module was called C(ovirt_api_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_api_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_api), which contains a information about oVirt/RHV API. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about the oVirt/RHV API",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information oVirt API:\n- ovirt.ovirt.ovirt_api_info:\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_api }}\"\n"
  },
  "ovirt.ovirt.ovirt_auth": {
    "doc": {
      "description": "This module authenticates to oVirt/RHV engine and creates SSO token, which should be later used in all other oVirt/RHV modules, so all modules don't need to perform login and logout. This module returns an Ansible fact called I(ovirt_auth). Every module can use this fact as C(auth) parameter, to perform authentication.",
      "has_action": false,
      "notes": "Everytime you use ovirt_auth module to obtain ticket, you need to also revoke the ticket, when you no longer need it, otherwise the ticket would be revoked by engine when it expires. For an example of how to achieve that, please take a look at I(examples) section.\nIn order to use this module you have to install oVirt/RHV Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)\nNote that in oVirt/RHV 4.1 if you want to use a user which is not administrator you must enable the I(ENGINE_API_FILTER_BY_DEFAULT) variable in engine. In oVirt/RHV 4.2 and later it's enabled by default.",
      "options": {
        "ca_file": {
          "aliases": [],
          "description": "A PEM file containing the trusted CA certificates. The certificate presented by the server will be verified using these CA certificates. If C(ca_file) parameter is not set, system wide CA certificate store is used. Default value is set by I(OVIRT_CAFILE) environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "compress": {
          "aliases": [],
          "description": "A boolean flag indicating if the SDK should ask the server to send compressed responses. The default is I(True). Note that this is a hint for the server, and that it may return uncompressed data even when this parameter is set to I(True).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "A dictionary of HTTP headers to be added to each API call.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "A string containing the hostname of the server. For example: I(server.example.com). Default value is set by I(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "insecure": {
          "aliases": [],
          "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "kerberos": {
          "aliases": [],
          "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ovirt_auth": {
          "aliases": [],
          "description": "Previous run of the ovirt_auth used with C(state) absent\nCloses connection with the engine.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password of the user. Default value is set by I(OVIRT_PASSWORD) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies if a token should be created or revoked.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum total time to wait for the response, in seconds. A value of zero (the default) means wait forever. If the timeout expires before the response is received an exception will be raised.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "SSO token to be used instead of login with username/password. Default value is set by I(OVIRT_TOKEN) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "A string containing the API URL of the server. For example: I(https://server.example.com/ovirt-engine/api). Default value is set by I(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The name of the user. For example: I(admin@internal) Default value is set by I(OVIRT_USERNAME) environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage authentication to oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n  - block:\n       # Create a vault with `ovirt_password` variable which store your\n       # oVirt/RHV user's password, and include that yaml file with variable:\n       - ansible.builtin.include_vars: ovirt_password.yml\n\n       - name: Obtain SSO token with using username/password credentials\n         ovirt.ovirt.ovirt_auth:\n           url: https://ovirt.example.com/ovirt-engine/api\n           username: admin@internal\n           ca_file: ca.pem\n           password: \"{{ ovirt_password }}\"\n\n       # Previous task generated I(ovirt_auth) fact, which you can later use\n       # in different modules as follows:\n       - ovirt.ovirt.ovirt_vm:\n           auth: \"{{ ovirt_auth }}\"\n           state: absent\n           name: myvm\n\n    always:\n      - name: Always revoke the SSO token\n        ovirt.ovirt.ovirt_auth:\n          state: absent\n          ovirt_auth: \"{{ ovirt_auth }}\"\n\n# When user will set following environment variables:\n#   OVIRT_URL = https://fqdn/ovirt-engine/api\n#   OVIRT_USERNAME = admin@internal\n#   OVIRT_PASSWORD = the_password\n# User can login the oVirt using environment variable instead of variables\n# in yaml file.\n# This is mainly useful when using Ansible Tower or AWX, as it will work\n# for Red Hat Virtualization credentials type.\n  - name: Obtain SSO token\n    ovirt_auth:\n      state: present\n"
  },
  "ovirt.ovirt.ovirt_cluster": {
    "doc": {
      "description": "Module to manage clusters in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ballooning": {
          "aliases": [
            "balloon"
          ],
          "description": "If I(True) enable memory balloon optimization. Memory balloon is used to re-distribute / reclaim the host memory based on VM needs in a dynamic way.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Comment of the cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "compatibility_version": {
          "aliases": [],
          "description": "The compatibility version of the cluster. All hosts in this cluster must support at least this compatibility version.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_arch": {
          "aliases": [],
          "description": "CPU architecture of cluster.",
          "type": "str",
          "required": false,
          "choices": [
            "x86_64",
            "ppc64",
            "undefined"
          ],
          "suboptions": {}
        },
        "cpu_type": {
          "aliases": [],
          "description": "CPU codename. For example I(Intel SandyBridge Family).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data_center": {
          "aliases": [],
          "description": "Datacenter name where cluster reside.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external_network_providers": {
          "aliases": [],
          "description": "List of references to the external network providers available in the cluster. If the automatic deployment of the external network provider is supported, the networks of the referenced network provider are available on every host in the cluster.\nThis is supported since oVirt version 4.2.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "id": {
              "aliases": [],
              "description": "ID of the external network provider. Either C(name) or C(id) is required.",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the external network provider. Either C(name) or C(id) is required.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fence_connectivity_threshold": {
          "aliases": [],
          "description": "The threshold used by C(fence_skip_if_connectivity_broken).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "fence_enabled": {
          "aliases": [],
          "description": "If I(True) enables fencing on the cluster.\nFencing is enabled by default.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fence_skip_if_connectivity_broken": {
          "aliases": [],
          "description": "If I(True) fencing will be temporarily disabled if the percentage of hosts in the cluster that are experiencing connectivity issues is greater than or equal to the defined threshold.\nThe threshold can be specified by C(fence_connectivity_threshold).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fence_skip_if_gluster_bricks_up": {
          "aliases": [],
          "description": "A flag indicating if fencing should be skipped if Gluster bricks are up and running in the host being fenced.\nThis flag is optional, and the default value is `false`.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fence_skip_if_gluster_quorum_not_met": {
          "aliases": [],
          "description": "A flag indicating if fencing should be skipped if Gluster bricks are up and running and Gluster quorum will not be met without those bricks.\nThis flag is optional, and the default value is `false`.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fence_skip_if_sd_active": {
          "aliases": [],
          "description": "If I(True) any hosts in the cluster that are Non Responsive and still connected to storage will not be fenced.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "firewall_type": {
          "aliases": [],
          "description": "The type of firewall to be used on hosts in this cluster.\nUp to version 4.1, it was always I(iptables). Since version 4.2, you can choose between I(iptables) and I(firewalld). For clusters with a compatibility version of 4.2 and higher, the default firewall type is I(firewalld).",
          "type": "str",
          "required": false,
          "choices": [
            "firewalld",
            "iptables"
          ],
          "suboptions": {}
        },
        "gluster": {
          "aliases": [],
          "description": "If I(True), hosts in this cluster will be used as Gluster Storage server nodes, and not for running virtual machines.\nBy default the cluster is created for virtual machine hosts.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gluster_tuned_profile": {
          "aliases": [],
          "description": "The name of the U(https://fedorahosted.org/tuned) to set on all the hosts in the cluster. This is not mandatory and relevant only for clusters with Gluster service.\nCould be for example I(virtual-host), I(rhgs-sequential-io), I(rhgs-random-io)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ha_reservation": {
          "aliases": [],
          "description": "If I(True) enables the oVirt/RHV to monitor cluster capacity for highly available virtual machines.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host_reason": {
          "aliases": [],
          "description": "If I(True) enables an optional reason field when a host is placed into maintenance mode from the Manager, allowing the administrator to provide an explanation for the maintenance.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the cluster to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ksm": {
          "aliases": [],
          "description": "I I(True) MoM enables to run Kernel Same-page Merging I(KSM) when necessary and when it can yield a memory saving benefit that outweighs its CPU cost.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ksm_numa": {
          "aliases": [],
          "description": "If I(True) enables KSM C(ksm) for best performance inside NUMA nodes.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac_pool": {
          "aliases": [],
          "description": "MAC pool to be used by this cluster.\nC(Note:)\nThis is supported since oVirt version 4.1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_policy": {
          "aliases": [
            "performance_preset"
          ],
          "description": "I(disabled) - Disables memory page sharing.\nI(server) - Sets the memory page sharing threshold to 150% of the system memory on each host.\nI(desktop) - Sets the memory page sharing threshold to 200% of the system memory on each host.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "server",
            "desktop"
          ],
          "suboptions": {}
        },
        "migration_auto_converge": {
          "aliases": [],
          "description": "If I(True) auto-convergence is used during live migration of virtual machines.\nUsed only when C(migration_policy) is set to I(legacy).\nFollowing options are supported:\nC(true) - Override the global setting to I(true).\nC(false) - Override the global setting to I(false).\nC(inherit) - Use value which is set globally.",
          "type": "str",
          "required": false,
          "choices": [
            "true",
            "false",
            "inherit"
          ],
          "suboptions": {}
        },
        "migration_bandwidth": {
          "aliases": [],
          "description": "The bandwidth settings define the maximum bandwidth of both outgoing and incoming migrations per host.\nFollowing bandwidth options are supported:\nC(auto) - Bandwidth is copied from the I(rate limit) [Mbps] setting in the data center host network QoS.\nC(hypervisor_default) - Bandwidth is controlled by local VDSM setting on sending host.\nC(custom) - Defined by user (in Mbps).",
          "type": "str",
          "required": false,
          "choices": [
            "auto",
            "hypervisor_default",
            "custom"
          ],
          "suboptions": {}
        },
        "migration_bandwidth_limit": {
          "aliases": [],
          "description": "Set the I(custom) migration bandwidth limit.\nThis parameter is used only when C(migration_bandwidth) is I(custom).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "migration_compressed": {
          "aliases": [],
          "description": "If I(True) compression is used during live migration of the virtual machine.\nUsed only when C(migration_policy) is set to I(legacy).\nFollowing options are supported:\nC(true) - Override the global setting to I(true).\nC(false) - Override the global setting to I(false).\nC(inherit) - Use value which is set globally.",
          "type": "str",
          "required": false,
          "choices": [
            "true",
            "false",
            "inherit"
          ],
          "suboptions": {}
        },
        "migration_encrypted": {
          "aliases": [],
          "description": "If I(True) encryption is used during live migration of the virtual machine.\nFollowing options are supported:\nC(true) - Override the global setting to I(true).\nC(false) - Override the global setting to I(false).\nC(inherit) - Use value which is set globally.",
          "type": "str",
          "required": false,
          "choices": [
            "true",
            "false",
            "inherit"
          ],
          "suboptions": {}
        },
        "migration_policy": {
          "aliases": [],
          "description": "A migration policy defines the conditions for live migrating virtual machines in the event of host failure.\nFollowing policies are supported:\nC(legacy) - Legacy behavior of 3.6 version.\nC(minimal_downtime) - Virtual machines should not experience any significant downtime.\nC(suspend_workload) - Virtual machines may experience a more significant downtime.\nC(post_copy) - Virtual machines should not experience any significant downtime. If the VM migration is not converging for a long time, the migration will be switched to post-copy. Added in version I(2.4).",
          "type": "str",
          "required": false,
          "choices": [
            "legacy",
            "minimal_downtime",
            "suspend_workload",
            "post_copy"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the cluster to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Management network of cluster to access cluster hosts.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resilience_policy": {
          "aliases": [],
          "description": "The resilience policy defines how the virtual machines are prioritized in the migration.\nFollowing values are supported:\nC(do_not_migrate) -  Prevents virtual machines from being migrated. \nC(migrate) - Migrates all virtual machines in order of their defined priority.\nC(migrate_highly_available) - Migrates only highly available virtual machines to prevent overloading other hosts.",
          "type": "str",
          "required": false,
          "choices": [
            "do_not_migrate",
            "migrate",
            "migrate_highly_available"
          ],
          "suboptions": {}
        },
        "rng_sources": {
          "aliases": [],
          "description": "List that specify the random number generator devices that all hosts in the cluster will use.\nSupported generators are: I(hwrng) and I(random).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "scheduling_policy": {
          "aliases": [],
          "description": "Name of the scheduling policy to be used for cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scheduling_policy_properties": {
          "aliases": [],
          "description": "Custom scheduling policy properties of the cluster.\nThese optional properties override the properties of the scheduling policy specified by the C(scheduling_policy) parameter.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the scheduling policy property.",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Value of scheduling policy property.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "serial_policy": {
          "aliases": [],
          "description": "Specify a serial number policy for the virtual machines in the cluster.\nFollowing options are supported:\nC(vm) - Sets the virtual machine's UUID as its serial number.\nC(host) - Sets the host's UUID as the virtual machine's serial number.\nC(custom) - Allows you to specify a custom serial number in C(serial_policy_value).",
          "type": "str",
          "required": false,
          "choices": [
            "vm",
            "host",
            "custom"
          ],
          "suboptions": {}
        },
        "serial_policy_value": {
          "aliases": [],
          "description": "Allows you to specify a custom serial number.\nThis parameter is used only when C(serial_policy) is I(custom).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "spice_proxy": {
          "aliases": [],
          "description": "The proxy by which the SPICE client will connect to virtual machines.\nThe address must be in the following format: I(protocol://[host]:[port])",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the cluster be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "switch_type": {
          "aliases": [],
          "description": "Type of switch to be used by all networks in given cluster. Either I(legacy) which is using linux bridge or I(ovs) using Open vSwitch.",
          "type": "str",
          "required": false,
          "choices": [
            "legacy",
            "ovs"
          ],
          "suboptions": {}
        },
        "threads_as_cores": {
          "aliases": [],
          "description": "If I(True) the exposed host threads would be treated as cores which can be utilized by virtual machines.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "trusted_service": {
          "aliases": [],
          "description": "If I(True) enables integration with an OpenAttestation server.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "virt": {
          "aliases": [],
          "description": "If I(True), hosts in this cluster will be used to run virtual machines.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_reason": {
          "aliases": [],
          "description": "If I(True) enables an optional reason field when a virtual machine is shut down from the Manager, allowing the administrator to provide an explanation for the maintenance.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage clusters in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create cluster\n- ovirt.ovirt.ovirt_cluster:\n    data_center: mydatacenter\n    name: mycluster\n    cpu_type: Intel SandyBridge Family\n    description: mycluster\n    compatibility_version: 4.0\n\n# Create virt service cluster:\n- ovirt.ovirt.ovirt_cluster:\n    data_center: mydatacenter\n    name: mycluster\n    cpu_type: Intel Nehalem Family\n    description: mycluster\n    switch_type: legacy\n    compatibility_version: 4.0\n    ballooning: true\n    gluster: false\n    threads_as_cores: true\n    ha_reservation: true\n    trusted_service: false\n    host_reason: false\n    vm_reason: true\n    ksm_numa: true\n    memory_policy: server\n    rng_sources:\n      - hwrng\n      - random\n\n# Create cluster with default network provider\n- ovirt.ovirt.ovirt_cluster:\n    name: mycluster\n    data_center: Default\n    cpu_type: Intel SandyBridge Family\n    external_network_providers:\n      - name: ovirt-provider-ovn\n\n# Remove cluster\n- ovirt.ovirt.ovirt_cluster:\n    state: absent\n    name: mycluster\n\n# Change cluster Name\n- ovirt.ovirt.ovirt_cluster:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_cluster_name\"\n"
  },
  "ovirt.ovirt.ovirt_cluster_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV clusters.\nThis module was called C(ovirt_cluster_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_cluster_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_clusters), which contains a list of clusters. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search cluster X from datacenter Y use following pattern: name=X and datacenter=Y",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV clusters",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all clusters which names start with C<production>:\n- ovirt.ovirt.ovirt_cluster_info:\n    pattern:\n      name: 'production*'\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_clusters }}\"\n"
  },
  "ovirt.ovirt.ovirt_datacenter": {
    "doc": {
      "description": "Module to manage data centers in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "comment": {
          "aliases": [],
          "description": "Comment of the data center.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "compatibility_version": {
          "aliases": [],
          "description": "Compatibility version of the data center.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the data center.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "This parameter can be used only when removing a data center. If I(True) data center will be forcibly removed, even though it contains some clusters. Default value is I(False), which means that only empty data center can be removed.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the datacenter to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "iscsi_bonds": {
          "aliases": [],
          "description": "List of iscsi bonds, which should be created in datacenter.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the iscsi bond.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "networks": {
              "aliases": [],
              "description": "List of network names in bond.",
              "type": "list",
              "required": false,
              "suboptions": {}
            },
            "storage_connections": {
              "aliases": [],
              "description": "List of storage_connection IDs. Used when you want to use specific storage connection instead of all in storage domain.",
              "default": "[]",
              "type": "list",
              "required": false,
              "suboptions": {}
            },
            "storage_domains": {
              "aliases": [],
              "description": "List of storage domain names and it will automatically get all storage_connections in the domain.",
              "default": "[]",
              "type": "list",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "local": {
          "aliases": [],
          "description": "I(True) if the data center should be local, I(False) if should be shared.\nDefault value is set by engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac_pool": {
          "aliases": [],
          "description": "MAC pool to be used by this datacenter.\nIMPORTANT: This option is deprecated in oVirt/RHV 4.1. You should use C(mac_pool) in C(ovirt_clusters) module, as MAC pools are set per cluster since 4.1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the data center to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "quota_mode": {
          "aliases": [],
          "description": "Quota mode of the data center. One of I(disabled), I(audit) or I(enabled)",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "audit",
            "enabled"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the data center be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage data centers in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create datacenter\n- ovirt.ovirt.ovirt_datacenter:\n    name: mydatacenter\n    local: True\n    compatibility_version: 4.0\n    quota_mode: enabled\n\n# Remove datacenter\n- ovirt.ovirt.ovirt_datacenter:\n    state: absent\n    name: mydatacenter\n\n# Change Datacenter Name\n- ovirt.ovirt.ovirt_datacenter:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_datacenter_name\"\n\n# Create datacenter with iscsi bond\n- ovirt.ovirt.ovirt_datacenter:\n    name: mydatacenter\n    iscsi_bonds:\n      - name: bond1\n        networks:\n            - network1\n            - network2\n        storage_domains:\n            - storage1\n      - name: bond2\n        networks:\n            - network3\n        storage_connections:\n            - cf780201-6a4f-43c1-a019-e65c4220ab73\n\n# Remove all iscsi bonds\n- ovirt.ovirt.ovirt_datacenter:\n    name: mydatacenter\n    iscsi_bonds: []\n"
  },
  "ovirt.ovirt.ovirt_datacenter_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV datacenters.\nThis module was called C(ovirt_datacenter_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_datacenter_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_datacenters), which contains a list of datacenters. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search datacenter I(X) use following pattern: I(name=X)",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV datacenters",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all data centers which names start with C(production):\n- ovirt.ovirt.ovirt_datacenter_info:\n    pattern: name=production*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_datacenters }}\"\n"
  },
  "ovirt.ovirt.ovirt_disk": {
    "doc": {
      "description": "Module to manage Virtual Machine and floating disks in oVirt/RHV.\nWARNING: If you are installing the collection from ansible galaxy you need to install 'qemu-img' package.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "activate": {
          "aliases": [],
          "description": "I(True) if the disk should be activated.\nWhen creating disk of virtual machine it is set to I(True).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "backup": {
          "aliases": [],
          "description": "The backup behavior supported by the disk.",
          "type": "str",
          "required": false,
          "choices": [
            "incremental"
          ],
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "bootable": {
          "aliases": [],
          "description": "I(True) if the disk should be bootable. By default when disk is created it isn't bootable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "content_type": {
          "aliases": [],
          "description": "Specify if the disk is a data disk or ISO image or a one of a the Hosted Engine disk types\nThe Hosted Engine disk content types are available with Engine 4.3+ and Ansible 2.8",
          "default": "data",
          "type": "str",
          "required": false,
          "choices": [
            "data",
            "iso",
            "hosted_engine",
            "hosted_engine_sanlock",
            "hosted_engine_metadata",
            "hosted_engine_configuration"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the disk image to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "download_image_path": {
          "aliases": [],
          "description": "Path on a file system where disk should be downloaded.\nNote that you must have an valid oVirt/RHV engine CA in your system trust store or you must provide it in C(ca_file) parameter.\nNote that the disk is not downloaded when the file already exists, but you can forcibly download the disk when using C(force) I (true).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Please take a look at C(image_path) documentation to see the correct usage of this parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "Specify format of the disk.\nNote that this option isn't idempotent as it's not currently possible to change format of the disk via API.",
          "default": "cow",
          "type": "str",
          "required": false,
          "choices": [
            "raw",
            "cow"
          ],
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "When the hypervisor name is specified the newly created disk or an existing disk will refresh its information about the underlying storage( Disk size, Serial, Product ID, Vendor ID ...) The specified host will be used for gathering the storage related information. This option is only valid for passthrough disks. This option requires at least the logical_unit.id to be specified",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the disk to manage. Either C(id) or C(name) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_provider": {
          "aliases": [],
          "description": "When C(state) is I(exported) disk is exported to given Glance image provider.\nWhen C(state) is I(imported) disk is imported from given Glance image provider.\nC(**IMPORTANT**)\nThere is no reliable way to achieve idempotency, so every time you specify this parameter the disk is exported, so please handle your playbook accordingly to not export the disk all the time. This option is valid only for template disks.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Driver of the storage interface.\nIt's required parameter when creating the new disk.",
          "type": "str",
          "required": false,
          "choices": [
            "virtio",
            "ide",
            "sata",
            "virtio_scsi"
          ],
          "suboptions": {}
        },
        "logical_unit": {
          "aliases": [],
          "description": "Dictionary which describes LUN to be directly attached to VM:",
          "type": "dict",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Address of the storage server. Used by iSCSI.",
              "required": false,
              "suboptions": {}
            },
            "lun_id": {
              "aliases": [],
              "description": "LUN id.",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "CHAP Password of the user to be used to access storage server. Used by iSCSI.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port of the storage server. Used by iSCSI.",
              "required": false,
              "suboptions": {}
            },
            "storage_type": {
              "aliases": [],
              "description": "Storage type either I(fcp) or I(iscsi).",
              "required": false,
              "suboptions": {}
            },
            "target": {
              "aliases": [],
              "description": "iSCSI target.",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "CHAP Username to be used to access storage server. Used by iSCSI.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [
            "alias"
          ],
          "description": "Name of the disk to manage. Either C(id) or C(name)/C(alias) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "openstack_volume_type": {
          "aliases": [],
          "description": "Name of the openstack volume type. This is valid when working with cinder.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pass_discard": {
          "aliases": [],
          "description": "Defines whether the virtual machine passes discard commands to the storage.",
          "type": "bool",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "Disk profile name to be attached to disk. By default profile is chosen by oVirt/RHV engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "propagate_errors": {
          "aliases": [],
          "description": "Indicates if disk errors should cause virtual machine to be paused or if disk errors should be\npropagated to the the guest operating system instead.",
          "type": "bool",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "quota_id": {
          "aliases": [],
          "description": "Disk quota ID to be used for disk. By default quota is chosen by oVirt/RHV engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scsi_passthrough": {
          "aliases": [],
          "description": "Indicates whether SCSI passthrough is enable and its policy.\nSetting a value of `filtered`/`unfiltered` will enable SCSI passthrough for a LUN disk with unprivileged/privileged SCSI I/O.\nTo disable SCSI passthrough the value should be set to `disabled`",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "filtered",
            "unfiltered"
          ],
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "shareable": {
          "aliases": [],
          "description": "I(True) if the disk should be shareable. By default when disk is created it isn't shareable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of the disk. Size should be specified using IEC standard units. For example 10GiB, 1024MiB, etc.\nSize can be only increased, not decreased.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sparse": {
          "aliases": [],
          "description": "I(True) if the disk should be sparse (also known as I(thin provision)). If the parameter is omitted, cow disks will be created as sparse and raw disks as I(preallocated)\nNote that this option isn't idempotent as it's not currently possible to change sparseness of the disk via API.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sparsify": {
          "aliases": [],
          "description": "I(True) if the disk should be sparsified.\nSparsification frees space in the disk image that is not used by its filesystem. As a result, the image will occupy less space on the storage.\nNote that this parameter isn't idempotent, as it's not possible to check if the disk should be or should not be sparsified.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the Virtual Machine disk be present/absent/attached/detached/exported/imported.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "attached",
            "detached",
            "exported",
            "imported"
          ],
          "suboptions": {}
        },
        "storage_domain": {
          "aliases": [],
          "description": "Storage domain name where disk should be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "storage_domains": {
          "aliases": [],
          "description": "Storage domain names where disk should be copied.\nC(**IMPORTANT**)\nThere is no reliable way to achieve idempotency, so every time you specify this parameter the disks are copied, so please handle your playbook accordingly to not copy the disks all the time. This is valid only for VM and floating disks, template disks works as expected.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "upload_image_path": {
          "aliases": [
            "image_path"
          ],
          "description": "Path to disk image, which should be uploaded.\nNote if C(size) is not specified the size of the disk will be determined by the size of the specified image.\nNote that currently we support only compatibility version 0.10 of the qcow disk.\nNote that you must have an valid oVirt/RHV engine CA in your system trust store or you must provide it in C(ca_file) parameter.\nNote that there is no reliable way to achieve idempotency, so if you want to upload the disk even if the disk with C(id) or C(name) exists, then please use C(force) I(true). If you will use C(force) I(false), which is default, then the disk image won't be uploaded.\nNote that to upload iso the C(format) should be 'raw'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uses_scsi_reservation": {
          "aliases": [],
          "description": "Defines whether SCSI reservation is enabled for this disk.",
          "type": "bool",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "vm_id": {
          "aliases": [],
          "description": "ID of the Virtual Machine to manage. Either C(vm_id) or C(vm_name) is required if C(state) is I(attached) or I(detached).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_name": {
          "aliases": [],
          "description": "Name of the Virtual Machine to manage. Either C(vm_id) or C(vm_name) is required if C(state) is I(attached) or I(detached).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wipe_after_delete": {
          "aliases": [],
          "description": "If the disk's Wipe After Delete is enabled, then the disk is first wiped.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage Virtual Machine and floating disks in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create and attach new disk to VM\n- ovirt.ovirt.ovirt_disk:\n    name: myvm_disk\n    vm_name: rhel7\n    size: 10GiB\n    format: cow\n    interface: virtio\n    storage_domain: data\n\n# Attach logical unit to VM rhel7\n- ovirt.ovirt.ovirt_disk:\n    vm_name: rhel7\n    logical_unit:\n      target: iqn.2016-08-09.brq.str-01:omachace\n      id: 1IET_000d0001\n      address: 10.34.63.204\n    interface: virtio\n\n# Detach disk from VM\n- ovirt.ovirt.ovirt_disk:\n    state: detached\n    name: myvm_disk\n    vm_name: rhel7\n    size: 10GiB\n    format: cow\n    interface: virtio\n\n# Change Disk Name\n- ovirt.ovirt.ovirt_disk:\n    id: 00000000-0000-0000-0000-000000000000\n    storage_domain: data\n    name: \"new_disk_name\"\n    vm_name: rhel7\n\n# Upload local image to disk and attach it to vm:\n# Since Ansible 2.3\n- ovirt.ovirt.ovirt_disk:\n    name: mydisk\n    vm_name: myvm\n    interface: virtio\n    size: 10GiB\n    format: cow\n    image_path: /path/to/mydisk.qcow2\n    storage_domain: data\n\n# Download disk to local file system:\n# Since Ansible 2.3\n- ovirt.ovirt.ovirt_disk:\n    id: 7de90f31-222c-436c-a1ca-7e655bd5b60c\n    download_image_path: /home/user/mydisk.qcow2\n\n# Export disk as image to Glance domain\n# Since Ansible 2.4\n- ovirt.ovirt.ovirt_disk:\n    id: 7de90f31-222c-436c-a1ca-7e655bd5b60c\n    image_provider: myglance\n    state: exported\n\n# Defining a specific quota while creating a disk image:\n# Since Ansible 2.5\n- ovirt.ovirt.ovirt_quotas_info:\n    data_center: Default\n    name: myquota\n  register: quota\n- ovirt.ovirt.ovirt_disk:\n    name: mydisk\n    size: 10GiB\n    storage_domain: data\n    description: somedescriptionhere\n    quota_id: \"{{ quota.ovirt_quotas[0]['id'] }}\"\n\n# Upload an ISO image\n# Since Ansible 2.8\n- ovirt.ovirt.ovirt_disk:\n    name: myiso\n    upload_image_path: /path/to/iso/image\n    storage_domain: data\n    size: 4 GiB\n    wait: true\n    bootable: true\n    format: raw\n    content_type: iso\n\n# Add fiber chanel disk\n- name: Create disk\n  ovirt.ovirt.ovirt_disk:\n    name: fcp_disk\n    host: my_host\n    logical_unit:\n        id: 3600a09803830447a4f244c4657597777\n        storage_type: fcp\n"
  },
  "ovirt.ovirt.ovirt_disk_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV disks.\nThis module was called C(ovirt_disk_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_disk_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_disks), which contains a list of disks. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search Disk X from storage Y use following pattern: name=X and storage.name=Y",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV disks",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all Disks which names start with C(centos)\n- ovirt.ovirt.ovirt_disk_info:\n    pattern: name=centos*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_disks }}\"\n"
  },
  "ovirt.ovirt.ovirt_event": {
    "doc": {
      "description": "This module can be used to create or delete an event in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster": {
          "aliases": [],
          "description": "The id of the cluster associated with this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_id": {
          "aliases": [],
          "description": "Custom ID for the event. This ID must be unique for each event.\nRequired when state is present.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "data_center": {
          "aliases": [],
          "description": "The id of the data center associated with this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Message for the event.\nRequired when state is present.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The id of the host associated with this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The event ID in the oVirt/RHV audit_log table. This ID is not the same as custom_id and is only used when state is absent.\nRequired when state is absent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "origin": {
          "aliases": [],
          "description": "Originator of the event.\nRequired when state is present.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "severity": {
          "aliases": [],
          "description": "Severity of the event.\nRequired when state is present.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "error",
            "normal",
            "warning"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the event be present/absent.\nThe C(wait) option must be set to false when state is absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_domain": {
          "aliases": [],
          "description": "The id of the storage domain associated with this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "The id of the template associated with this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The id of the user associated with this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "The id of the VM associated with this event.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Create or delete an event in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain the auth parameter for simplicity,\n# look at the ovirt_auth module to see how to reuse authentication.\n\n- name: Create an event\n  ovirt.ovirt.ovirt_event:\n    state: present\n    description: \"The file system /home on host xyz is almost full!\"\n    origin: \"mymonitor\"\n    custom_id: 123456789\n    severity: warning\n\n- name: Create an event and link it to a specific object\n  ovirt.ovirt.ovirt_event:\n    state: present\n    description: \"The file system /home is almost full!\"\n    origin: \"mymonitor\"\n    custom_id: 123456789\n    severity: warning\n    vm: \"c79db183-46ef-44d1-95f9-1a368c516c19\"\n\n- name: Remove an event\n  ovirt.ovirt.ovirt_event:\n    state: absent\n    id: 123456789\n    wait: false\n"
  },
  "ovirt.ovirt.ovirt_event_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV events.\nThis module was called C(ovirt_event_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_event_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "case_sensitive": {
          "aliases": [],
          "description": "Indicates if the search performed using the search parameter should be performed taking case into account. The default value is true, which means that case is taken into account. If you want to search ignoring case set it to false.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "from_": {
          "aliases": [],
          "description": "Indicates the event index after which events should be returned. The indexes of events are strictly increasing, so when this parameter is used only the events with greater indexes will be returned.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "headers": {
          "aliases": [],
          "description": "Additional HTTP headers.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max": {
          "aliases": [],
          "description": "Sets the maximum number of events to return. If not specified all the events are returned.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "Additional URL query parameters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "search": {
          "aliases": [],
          "description": "Search term which is accepted by the oVirt/RHV API.\nFor example to search for events of severity alert use the following pattern: severity=alert",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If True wait for the response.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "This module can be used to retrieve information about one or more oVirt/RHV events",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain the auth parameter for simplicity,\n# look at the ovirt_auth module to see how to reuse authentication.\n\n- name: Return all events\n  ovirt.ovirt.ovirt_event_info:\n  register: result\n\n- name: Return the last 10 events\n  ovirt.ovirt.ovirt_event_info:\n    max: 10\n  register: result\n\n- name: Return all events of type alert\n  ovirt.ovirt.ovirt_event_info:\n    search: \"severity=alert\"\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_events }}\"\n"
  },
  "ovirt.ovirt.ovirt_external_provider": {
    "doc": {
      "description": "Module to manage external providers in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "authentication_keys": {
          "aliases": [
            "auth_keys"
          ],
          "description": "List of authentication keys.\nWhen you will not pass these keys and there are already some of them defined in the system they will be removed.\nApplicable for I(os_volume).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "uuid": {
              "aliases": [],
              "description": "The uuid which will be used.",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "The value which will be used.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "authentication_url": {
          "aliases": [
            "auth_url"
          ],
          "description": "Keystone authentication URL of the openstack provider.\nApplicable for those types: I(os_image), I(os_volume) and I(network).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data_center": {
          "aliases": [],
          "description": "Name of the data center where provider should be attached.\nApplicable for those type: I(os_volume).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the external provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the external provider to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "network_type": {
          "aliases": [],
          "description": "Type of the external network provider either external (for example OVN) or neutron.\nApplicable if C(type) is I(network).",
          "default": "external",
          "type": "str",
          "required": false,
          "choices": [
            "external",
            "neutron"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the user specified in C(username) parameter.\nApplicable for all types.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "read_only": {
          "aliases": [],
          "description": "Specify if the network should be read only.\nApplicable if C(type) is I(network).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the external be present or absent\nWhen you are using absent for I(os_volume), you need to make sure that SD is not attached to the data center!",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tenant_name": {
          "aliases": [
            "tenant"
          ],
          "description": "Name of the tenant.\nApplicable for those types: I(os_image), I(os_volume) and I(network).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [
            "provider"
          ],
          "description": "Type of the external provider.",
          "type": "str",
          "required": true,
          "choices": [
            "os_image",
            "network",
            "os_volume",
            "foreman"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL where external provider is hosted.\nApplicable for those types: I(os_image), I(os_volume), I(network) and I(foreman).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username to be used for login to external provider.\nApplicable for all types.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage external providers in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Add image external provider:\n- ovirt.ovirt.ovirt_external_provider:\n    name: image_provider\n    type: os_image\n    url: http://1.2.3.4:9292\n    username: admin\n    password: 123456\n    tenant: admin\n    auth_url: http://1.2.3.4:35357/v2.0\n\n# Add volume external provider:\n- ovirt.ovirt.ovirt_external_provider:\n    name: image_provider\n    type: os_volume\n    url: http://1.2.3.4:9292\n    username: admin\n    password: 123456\n    tenant: admin\n    auth_url: http://1.2.3.4:5000/v2.0\n    authentication_keys:\n      -\n        uuid: \"1234567-a1234-12a3-a234-123abc45678\"\n        value: \"ABCD00000000111111222333445w==\"\n\n# Add foreman provider:\n- ovirt.ovirt.ovirt_external_provider:\n    name: foreman_provider\n    type: foreman\n    url: https://foreman.example.com\n    username: admin\n    password: 123456\n\n# Add external network provider for OVN:\n- ovirt.ovirt.ovirt_external_provider:\n    name: ovn_provider\n    type: network\n    network_type: external\n    url: http://1.2.3.4:9696\n\n# Remove image external provider:\n- ovirt.ovirt.ovirt_external_provider:\n    state: absent\n    name: image_provider\n    type: os_image\n"
  },
  "ovirt.ovirt.ovirt_external_provider_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV external providers.\nThis module was called C(ovirt_external_provider_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_external_provider_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_external_providers), which contains a list of external_providers. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the external provider, can be used as glob expression.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "type": {
          "aliases": [
            "provider"
          ],
          "description": "Type of the external provider.",
          "type": "str",
          "required": true,
          "choices": [
            "os_image",
            "os_network",
            "os_volume",
            "foreman"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV external providers",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all image external providers named C<glance>:\n- ovirt.ovirt.ovirt_external_provider_info:\n    type: os_image\n    name: glance\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_external_providers }}\"\n"
  },
  "ovirt.ovirt.ovirt_group": {
    "doc": {
      "description": "Module to manage groups in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "authz_name": {
          "aliases": [
            "domain"
          ],
          "description": "Authorization provider of the group. In previous versions of oVirt/RHV known as domain.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the group to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace of the authorization provider, where group resides.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the group be present/absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage groups in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Add group group1 from authorization provider example.com-authz\n- ovirt.ovirt.ovirt_group:\n    name: group1\n    domain: example.com-authz\n\n# Add group group1 from authorization provider example.com-authz\n# In case of multi-domain Active Directory setup, you should pass\n# also namespace, so it adds correct group:\n- ovirt.ovirt.ovirt_group:\n    name: group1\n    namespace: dc=ad2,dc=example,dc=com\n    domain: example.com-authz\n\n# Remove group group1 with authorization provider example.com-authz\n- ovirt.ovirt.ovirt_group:\n    state: absent\n    name: group1\n    domain: example.com-authz\n"
  },
  "ovirt.ovirt.ovirt_group_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV groups.\nThis module was called C(ovirt_group_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_group_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_groups), which contains a list of groups. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search group X use following pattern: name=X",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV groups",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all groups which names start with C(admin):\n- ovirt.ovirt.ovirt_group_info:\n    pattern: name=admin*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_groups }}\"\n"
  },
  "ovirt.ovirt.ovirt_host": {
    "doc": {
      "description": "Module to manage hosts in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "activate": {
          "aliases": [],
          "description": "If C(state) is I(present) activate the host.\nThis parameter is good to disable, when you don't want to change the state of host when using I(present) C(state).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "address": {
          "aliases": [],
          "description": "Host address. It can be either FQDN (preferred) or IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "check_upgrade": {
          "aliases": [],
          "description": "If I(true) and C(state) is I(upgraded) run check for upgrade action before executing upgrade action.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster, where host should be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Description of the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Indicates that the host should be removed even if it is non-responsive, or if it is part of a Gluster Storage cluster and has volume bricks on it.\nWARNING: It doesn't forcibly remove the host if another host related operation is being executed on the host at the same time.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hosted_engine": {
          "aliases": [],
          "description": "If I(deploy) it means this host should deploy also hosted engine components.\nIf I(undeploy) it means this host should un-deploy hosted engine components and this host will not function as part of the High Availability cluster.",
          "type": "str",
          "required": false,
          "choices": [
            "deploy",
            "undeploy"
          ],
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the host to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "iscsi": {
          "aliases": [],
          "description": "If C(state) is I(iscsidiscover) it means that the iscsi attribute is being used to discover targets\nIf C(state) is I(iscsilogin) it means that the iscsi attribute is being used to login to the specified targets passed as part of the iscsi attribute",
          "type": "dict",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Address of the iSCSI storage server.",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "A CHAP password for logging into a target.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "The port being used to connect with iscsi.",
              "required": false,
              "suboptions": {}
            },
            "portal": {
              "aliases": [],
              "description": "The portal being used to connect with iscsi.",
              "required": false,
              "suboptions": {}
            },
            "target": {
              "aliases": [],
              "description": "The target IQN for the storage device.",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "A CHAP user name for logging into a target.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "kdump_integration": {
          "aliases": [],
          "description": "Specify if host will have enabled Kdump integration.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "kernel_params": {
          "aliases": [],
          "description": "List of kernel boot parameters.\nFollowing are most common kernel parameters used for host:\nHostdev Passthrough & SR-IOV: intel_iommu=on\nNested Virtualization: kvm-intel.nested=1\nUnsafe Interrupts: vfio_iommu_type1.allow_unsafe_interrupts=1\nPCI Reallocation: pci=realloc\nC(Note:)\nModifying kernel boot parameters settings can lead to a host boot failure. Please consult the product documentation before doing any changes.\nKernel boot parameters changes require host deploy and restart. The host needs to be I(reinstalled) successfully and then to be I(rebooted) for kernel boot parameters to be applied.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the host to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "override_display": {
          "aliases": [],
          "description": "Override the display address of all VMs on this host with specified address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "override_iptables": {
          "aliases": [],
          "description": "If True host iptables will be overridden by host deploy script.\nNote that C(override_iptables) is I(false) by default in oVirt/RHV.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the root. It's required in case C(public_key) is set to I(False).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "power_management_enabled": {
          "aliases": [],
          "description": "Enable or disable power management of the host.\nFor more comprehensive setup of PM use C(ovirt_host_pm) module.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "public_key": {
          "aliases": [
            "ssh_public_key"
          ],
          "description": "I(True) if the public key should be used to authenticate to host.\nIt's required in case C(password) is not set.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "reboot_after_installation": {
          "aliases": [],
          "description": "If I(true) reboot host after successful installation.\nDefault value on engine is I(true).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "reboot_after_upgrade": {
          "aliases": [],
          "description": "If I(true) and C(state) is I(upgraded) reboot host after successful upgrade.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "spm_priority": {
          "aliases": [],
          "description": "SPM priority of the host. Integer value from 1 to 10, where higher number means higher priority.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssh_port": {
          "aliases": [],
          "description": "The host SSH port.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State which should a host to be in after successful completion.\nI(iscsilogin) and I(iscsidiscover) are supported since version 2.4.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "maintenance",
            "upgraded",
            "started",
            "restarted",
            "stopped",
            "reinstalled",
            "iscsidiscover",
            "iscsilogin"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the host to get into desired state.",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vgpu_placement": {
          "aliases": [],
          "description": "If I(consolidated), each vGPU is placed on the first physical card with available space. This is the default placement, utilizing all available space on the physical cards.\nIf I(separated), each vGPU is placed on a separate physical card, if possible. This can be useful for improving vGPU performance.",
          "type": "str",
          "required": false,
          "choices": [
            "consolidated",
            "separated"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage hosts in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Add host with username/password supporting SR-IOV.\n# Note that override_iptables is false by default in oVirt/RHV:\n- ovirt.ovirt.ovirt_host:\n    cluster: Default\n    name: myhost\n    address: 10.34.61.145\n    password: secret\n    override_iptables: true\n    kernel_params:\n      - intel_iommu=on\n\n# Add host using public key\n- ovirt.ovirt.ovirt_host:\n    public_key: true\n    cluster: Default\n    name: myhost2\n    address: 10.34.61.145\n    override_iptables: true\n\n# Deploy hosted engine host\n- ovirt.ovirt.ovirt_host:\n    cluster: Default\n    name: myhost2\n    password: secret\n    address: 10.34.61.145\n    override_iptables: true\n    hosted_engine: deploy\n\n# Maintenance\n- ovirt.ovirt.ovirt_host:\n    state: maintenance\n    name: myhost\n\n# Restart host using power management:\n- ovirt.ovirt.ovirt_host:\n    state: restarted\n    name: myhost\n\n# Upgrade host\n- ovirt.ovirt.ovirt_host:\n    state: upgraded\n    name: myhost\n\n# discover iscsi targets\n- ovirt.ovirt.ovirt_host:\n    state: iscsidiscover\n    name: myhost\n    iscsi:\n      username: iscsi_user\n      password: secret\n      address: 10.34.61.145\n      port: 3260\n\n\n# login to iscsi targets\n- ovirt.ovirt.ovirt_host:\n    state: iscsilogin\n    name: myhost\n    iscsi:\n      username: iscsi_user\n      password: secret\n      address: 10.34.61.145\n      target: \"iqn.2015-07.com.mlipchuk2.redhat:444\"\n      port: 3260\n\n\n# Reinstall host using public key\n- ovirt.ovirt.ovirt_host:\n    state: reinstalled\n    name: myhost\n    public_key: true\n\n# Remove host\n- ovirt.ovirt.ovirt_host:\n    state: absent\n    name: myhost\n    force: True\n\n# Retry removing host when failed (https://bugzilla.redhat.com/show_bug.cgi?id=1719271)\n- ovirt.ovirt.ovirt_host:\n    state: absent\n    name: myhost\n  register: result\n  until: not result.failed\n  retries: 6\n  delay: 20\n\n# Change host Name\n- ovirt.ovirt.ovirt_host:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new host name\"\n"
  },
  "ovirt.ovirt.ovirt_host_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV hosts.\nThis module was called C(ovirt_host_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_host_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_hosts), which contains a list of hosts. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "all_content": {
          "aliases": [],
          "description": "If I(true) all the attributes of the hosts should be included in the response.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster_version": {
          "aliases": [],
          "description": "Filter the hosts based on the cluster version.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search host X from datacenter Y use following pattern: name=X and datacenter=Y",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV hosts",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all hosts which names start with C(host) and\n# belong to data center C(west):\n- ovirt.ovirt.ovirt_host_info:\n    pattern: name=host* and datacenter=west\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_hosts }}\"\n# All hosts with cluster version 4.2:\n- ovirt.ovirt.ovirt_host_info:\n    pattern: name=host*\n    cluster_version: \"4.2\"\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_hosts }}\"\n"
  },
  "ovirt.ovirt.ovirt_host_network": {
    "doc": {
      "description": "Module to manage host networks in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "bond": {
          "aliases": [],
          "description": "Dictionary describing network bond:",
          "type": "dict",
          "required": false,
          "suboptions": {
            "interfaces": {
              "aliases": [],
              "description": "List of interfaces to create a bond.",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Bonding mode.",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Bond name.",
              "required": false,
              "suboptions": {}
            },
            "options": {
              "aliases": [],
              "description": "Bonding options.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "check": {
          "aliases": [],
          "description": "If I(true) verify connectivity between host and engine.\nNetwork configuration changes will be rolled back if connectivity between engine and the host is lost after changing network configuration.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Name of the network interface where logical network should be attached.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "List of names of the network label to be assigned to bond or interface.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "host"
          ],
          "description": "Name of the host to manage networks for.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "List of dictionary describing networks to be attached to interface or bond:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "IP address in case of I(static) boot protocol is used.",
              "required": false,
              "suboptions": {}
            },
            "boot_protocol": {
              "aliases": [],
              "description": "Boot protocol.",
              "required": false,
              "choices": [
                "none",
                "static",
                "dhcp"
              ],
              "suboptions": {}
            },
            "custom_properties": {
              "aliases": [],
              "description": "Custom properties applied to the host network.\nCustom properties is a list of dictionary which can have following values.",
              "required": false,
              "suboptions": {
                "name": {
                  "aliases": [],
                  "description": "Name of custom property.",
                  "required": false,
                  "suboptions": {}
                },
                "value": {
                  "aliases": [],
                  "description": "Value of custom property.",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "gateway": {
              "aliases": [],
              "description": "Gateway in case of I(static) boot protocol is used.",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the logical network to be assigned to bond or interface.",
              "required": false,
              "suboptions": {}
            },
            "netmask": {
              "aliases": [],
              "description": "Subnet mask in case of I(static) boot protocol is used.",
              "required": false,
              "suboptions": {}
            },
            "version": {
              "aliases": [],
              "description": "IP version. Either v4 or v6. Default is v4.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "save": {
          "aliases": [],
          "description": "If I(true) network configuration will be persistent, otherwise it is temporary. Default I(true) since Ansible 2.8.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the host be present/absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "sync_networks": {
          "aliases": [],
          "description": "If I(true) all networks will be synchronized before modification",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage host networks in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# In all examples the durability of the configuration created is dependent on the 'save' option value:\n\n# Create bond on eth0 and eth1 interface, and put 'myvlan' network on top of it and persist the new configuration:\n- name: Bonds\n  ovirt.ovirt.ovirt_host_network:\n    name: myhost\n    save: yes\n    bond:\n      name: bond0\n      mode: 2\n      interfaces:\n        - eth1\n        - eth2\n    networks:\n      - name: myvlan\n        boot_protocol: static\n        address: 1.2.3.4\n        netmask: 255.255.255.0\n        gateway: 1.2.3.4\n        version: v4\n\n# Create bond on eth1 and eth2 interface, specifying both mode and miimon:\n- name: Bonds\n  ovirt.ovirt.ovirt_host_network:\n    name: myhost\n    bond:\n      name: bond0\n      mode: 1\n      options:\n        miimon: 200\n      interfaces:\n        - eth1\n        - eth2\n\n# Remove bond0 bond from host interfaces:\n- ovirt.ovirt.ovirt_host_network:\n    state: absent\n    name: myhost\n    bond:\n      name: bond0\n\n# Assign myvlan1 and myvlan2 vlans to host eth0 interface:\n- ovirt.ovirt.ovirt_host_network:\n    name: myhost\n    interface: eth0\n    networks:\n      - name: myvlan1\n      - name: myvlan2\n\n# Remove myvlan2 vlan from host eth0 interface:\n- ovirt.ovirt.ovirt_host_network:\n    state: absent\n    name: myhost\n    interface: eth0\n    networks:\n      - name: myvlan2\n\n# Remove all networks/vlans from host eth0 interface:\n- ovirt.ovirt.ovirt_host_network:\n    state: absent\n    name: myhost\n    interface: eth0\n\n# Add custom_properties to network:\n- ovirt.ovirt.ovirt_host_network:\n    name: myhost\n    interface: eth0\n    networks:\n      - name: myvlan1\n        custom_properties:\n          - name: bridge_opts\n            value: gc_timer=10\n"
  },
  "ovirt.ovirt.ovirt_host_pm": {
    "doc": {
      "description": "Module to manage power management of hosts in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "address": {
          "aliases": [],
          "description": "Address of the power management interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "encrypt_options": {
          "aliases": [
            "encrypt"
          ],
          "description": "If I(true) options will be encrypted when send to agent.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "host"
          ],
          "description": "Name of the host to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "Dictionary of additional fence agent options (including Power Management slot).\nAdditional information about options can be found at U(https://github.com/ClusterLabs/fence-agents/blob/master/doc/FenceAgentAPI.md).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "order": {
          "aliases": [],
          "description": "Integer value specifying, by default it's added at the end.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the user specified in C(username) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Power management interface port.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the host be present/absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of the power management. oVirt/RHV predefined values are I(drac5), I(ipmilan), I(rsa), I(bladecenter), I(alom), I(apc), I(apc_snmp), I(eps), I(wti), I(rsb), I(cisco_ucs), I(drac7), I(hpblade), I(ilo), I(ilo2), I(ilo3), I(ilo4), I(ilo_ssh), but user can have defined custom type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username to be used to connect to power management interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage power management of hosts in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Add fence agent to host 'myhost'\n- ovirt.ovirt.ovirt_host_pm:\n    name: myhost\n    address: 1.2.3.4\n    options:\n      myoption1: x\n      myoption2: y\n    username: admin\n    password: admin\n    port: 3333\n    type: ipmilan\n\n# Add fence agent to host 'myhost' using 'slot' option\n- ovirt.ovirt.ovirt_host_pm:\n    name: myhost\n    address: 1.2.3.4\n    options:\n      myoption1: x\n      myoption2: y\n      slot: myslot\n    username: admin\n    password: admin\n    port: 3333\n    type: ipmilan\n\n\n# Remove ipmilan fence agent with address 1.2.3.4 on host 'myhost'\n- ovirt.ovirt.ovirt_host_pm:\n    state: absent\n    name: myhost\n    address: 1.2.3.4\n    type: ipmilan\n"
  },
  "ovirt.ovirt.ovirt_host_storage_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV HostStorages (applicable only for block storage).\nThis module was called C(ovirt_host_storage_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_host_storage_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fcp": {
          "aliases": [],
          "description": "Dictionary with values for fibre channel storage type:",
          "type": "dict",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Address of the fibre channel storage server.",
              "required": false,
              "suboptions": {}
            },
            "lun_id": {
              "aliases": [],
              "description": "LUN id.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port of the fibre channel storage server.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Host to get device list from.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "iscsi": {
          "aliases": [],
          "description": "Dictionary with values for iSCSI storage type:",
          "type": "dict",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Address of the iSCSI storage server.",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "A CHAP password for logging into a target.",
              "required": false,
              "suboptions": {}
            },
            "portal": {
              "aliases": [],
              "description": "The portal being used to connect with iscsi.",
              "required": false,
              "suboptions": {}
            },
            "target": {
              "aliases": [],
              "description": "The target IQN for the storage device.",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "A CHAP user name for logging into a target.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV HostStorages (applicable only for block storage)",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about HostStorages with specified target and address:\n- ovirt.ovirt.ovirt_host_storage_info:\n    host: myhost\n    iscsi:\n      target: iqn.2016-08-09.domain-01:nickname\n      address: 10.34.63.204\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_host_storages }}\"\n\n- name: Gather information about all storages\n  ovirt.ovirt.ovirt_host_storage_info:\n    host: myhost\n\n- name: Gather information about all iscsi storages\n  ovirt.ovirt.ovirt_host_storage_info:\n    host: myhost\n    iscsi: {}\n\n- name: Gather information about all fcp storages\n  ovirt.ovirt.ovirt_host_storage_info:\n    host: myhost\n    fcp: {}\n"
  },
  "ovirt.ovirt.ovirt_instance_type": {
    "doc": {
      "description": "This module manages whole lifecycle of the Instance Type in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ballooning_enabled": {
          "aliases": [],
          "description": "If I(true), use memory ballooning.\nMemory balloon is a guest device, which may be used to re-distribute / reclaim the host memory based on instance type needs in a dynamic way. In this way it's possible to create memory over commitment states.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "boot_devices": {
          "aliases": [],
          "description": "List of boot devices which should be used to boot. For example C([ cdrom, hd ]).\nDefault value is set by oVirt/RHV engine.",
          "type": "list",
          "required": false,
          "choices": [
            "cdrom",
            "hd",
            "network"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "cpu_cores": {
          "aliases": [],
          "description": "Number of virtual CPUs cores of the Instance Type.\nDefault value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_mode": {
          "aliases": [],
          "description": "CPU mode of the instance type. It can be some of the following: I(host_passthrough), I(host_model) or I(custom).\nFor I(host_passthrough) CPU type you need to set C(placement_policy) to I(pinned).\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_pinning": {
          "aliases": [],
          "description": "CPU Pinning topology to map instance type CPU to host CPU.\nCPU Pinning topology is a list of dictionary which can have following values:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "cpu": {
              "aliases": [],
              "description": "Number of the host CPU.",
              "required": false,
              "suboptions": {}
            },
            "vcpu": {
              "aliases": [],
              "description": "Number of the instance type CPU.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cpu_sockets": {
          "aliases": [],
          "description": "Number of virtual CPUs sockets of the Instance Type.\nDefault value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_threads": {
          "aliases": [],
          "description": "Number of virtual CPUs sockets of the Instance Type.\nDefault value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the instance type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "graphical_console": {
          "aliases": [],
          "description": "Assign graphical console to the instance type.\nGraphical console is a dictionary which can have following values:\nC(headless_mode) - If I(true) disable the graphics console for this instance type.\nC(protocol) - Graphical protocol, a list of I(spice), I(vnc), or both.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "high_availability": {
          "aliases": [],
          "description": "If I(yes) Instance Type will be set as highly available.\nIf I(no) Instance Type won't be set as highly available.\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "high_availability_priority": {
          "aliases": [],
          "description": "Indicates the priority of the instance type inside the run and migration queues. Instance Type with higher priorities will be started and migrated before instance types with lower priorities. The value is an integer between 0 and 100. The higher the value, the higher the priority.\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Specify host where Instance Type should be running. By default the host is chosen by engine scheduler.\nThis parameter is used only when C(state) is I(running) or I(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the Instance Type to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "io_threads": {
          "aliases": [],
          "description": "Number of IO threads used by instance type. I(0) means IO threading disabled.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "Amount of memory of the Instance Type. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nDefault value is set by engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_guaranteed": {
          "aliases": [],
          "description": "Amount of minimal guaranteed memory of the Instance Type. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nC(memory_guaranteed) parameter can't be lower than C(memory) parameter.\nDefault value is set by engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_max": {
          "aliases": [],
          "description": "Upper bound of instance type memory up to which memory hot-plug can be performed. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nDefault value is set by engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Instance Type to manage.\nIf instance type don't exists C(name) is required. Otherwise C(id) or C(name) can be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "List of NICs, which should be attached to Virtual Machine. NIC is described by following dictionary.\nNOTE - This parameter is used only when C(state) is I(running) or I(present) and is able to only create NICs. To manage NICs of the instance type in more depth please use M(ovirt.ovirt.ovirt_nic) module instead.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "interface": {
              "aliases": [],
              "description": "Type of the network interface.",
              "default": "virtio",
              "type": "str",
              "required": false,
              "choices": [
                "virtio",
                "e1000",
                "rtl8139"
              ],
              "suboptions": {}
            },
            "mac_address": {
              "aliases": [],
              "description": "Custom MAC address of the network interface, by default it's obtained from MAC pool.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the NIC.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "profile_name": {
              "aliases": [],
              "description": "Profile name where NIC should be attached.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "operating_system": {
          "aliases": [],
          "description": "Operating system of the Instance Type, for example 'rhel_8x64'.\nDefault value is set by oVirt/RHV engine.\nUse the M(ovirt.ovirt.ovirt_vm_os_info) module to obtain the current list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "placement_policy": {
          "aliases": [],
          "description": "The configuration of the instance type's placement policy.\nPlacement policy can be one of the following values:\nC(migratable) - Allow manual and automatic migration.\nC(pinned) - Do not allow migration.\nC(user_migratable) - Allow manual migration only.\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rng_bytes": {
          "aliases": [],
          "description": "Number of bytes allowed to consume per period.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rng_device": {
          "aliases": [],
          "description": "Random number generator (RNG). You can choose of one the following devices I(urandom), I(random) or I(hwrng).\nIn order to select I(hwrng), you must have it enabled on cluster first.\n/dev/urandom is used for cluster version >= 4.1, and /dev/random for cluster version <= 4.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rng_period": {
          "aliases": [],
          "description": "Duration of one period in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "serial_console": {
          "aliases": [],
          "description": "I(True) enable VirtIO serial console, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "smartcard_enabled": {
          "aliases": [],
          "description": "If I(true), use smart card authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "soundcard_enabled": {
          "aliases": [],
          "description": "If I(true), the sound card is added to the instance type.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the Instance Type be present/absent.\nI(present) state will create/update instance type and don't change its state if it already exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "usb_support": {
          "aliases": [],
          "description": "I(True) enable USB support, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "virtio_scsi": {
          "aliases": [],
          "description": "If I(true), virtio scsi will be enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "watchdog": {
          "aliases": [],
          "description": "Assign watchdog device for the instance type.\nWatchdogs is a dictionary which can have following values:\nC(model) - Model of the watchdog device. For example: I(i6300esb), I(diag288) or I(null).\nC(action) - Watchdog action to be performed when watchdog is triggered. For example: I(none), I(reset), I(poweroff), I(pause) or I(dump).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage Instance Types in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create instance type\n- name: Create instance type\n  ovirt.ovirt.ovirt_instance_type:\n    state: present\n    name: myit\n    rng_device: hwrng\n    rng_bytes: 200\n    rng_period: 200\n    soundcard_enabled: true\n    virtio_scsi: true\n    boot_devices:\n      - network\n\n# Remove instance type\n- ovirt.ovirt.ovirt_instance_type:\n    state: absent\n    name: myit\n\n\n# Create instance type with predefined memory and cpu limits.\n- ovirt.ovirt.ovirt_instance_type:\n    state: present\n    name: myit\n    memory: 2GiB\n    cpu_cores: 2\n    cpu_sockets: 2\n    nics:\n      - name: nic1\n\n# Enable usb support and serial console\n- ovirt.ovirt.ovirt_instance_type:\n    name: myit\n    usb_support: True\n    serial_console: True\n\n# Use graphical console with spice and vnc\n- name: Create a instance type that has the console configured for both Spice and VNC\n  ovirt.ovirt.ovirt_instance_type:\n    name: myit\n    graphical_console:\n      protocol:\n        - spice\n        - vnc\n"
  },
  "ovirt.ovirt.ovirt_job": {
    "doc": {
      "description": "This module manage jobs in oVirt/RHV. It can also manage steps of the job.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Description of the job.\nWhen task with same description has already finished and you rerun taks it will create new job.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the job be C(present)/C(absent)/C(failed).\nC(started) is alias for C(present). C(finished) is alias for C(absent). Same in the steps.\nNote when C(finished)/C(failed) it will finish/fail all steps.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "started",
            "finished",
            "failed"
          ],
          "suboptions": {}
        },
        "steps": {
          "aliases": [],
          "description": "The steps of the job.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Description of the step.",
              "required": true,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Should the step be present/absent/failed.\nNote when one step fail whole job will fail\nNote when all steps are finished it will finish job.",
              "default": "present",
              "required": false,
              "choices": [
                "present",
                "absent",
                "started",
                "finished",
                "failed"
              ],
              "suboptions": {}
            }
          }
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage jobs in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n- name: Create job with two steps\n  ovirt.ovirt.ovirt_job:\n    description: job_name\n    steps:\n      - description: step_name_A\n      - description: step_name_B\n\n- name: Finish one step\n  ovirt.ovirt.ovirt_job:\n    description: job_name\n    steps:\n      - description: step_name_A\n        state: finished\n\n- name: When you fail one step whole job will stop\n  ovirt.ovirt.ovirt_job:\n    description: job_name\n    steps:\n      - description: step_name_B\n        state: failed\n\n- name: Finish all steps\n  ovirt.ovirt.ovirt_job:\n    description: job_name\n    state: finished\n"
  },
  "ovirt.ovirt.ovirt_mac_pool": {
    "doc": {
      "description": "This module manage MAC pools in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "allow_duplicates": {
          "aliases": [],
          "description": "If I(true) allow a MAC address to be used multiple times in a pool.\nDefault value is set by oVirt/RHV engine to I(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Description of the MAC pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the mac pool to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the MAC pool to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ranges": {
          "aliases": [],
          "description": "List of MAC ranges. The from and to should be split by comma.\nFor example: 00:1a:4a:16:01:51,00:1a:4a:16:01:61",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the mac pool be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage MAC pools in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create MAC pool:\n- ovirt.ovirt.ovirt_mac_pool:\n    name: mymacpool\n    allow_duplicates: false\n    ranges:\n      - 00:1a:4a:16:01:51,00:1a:4a:16:01:61\n      - 00:1a:4a:16:02:51,00:1a:4a:16:02:61\n\n# Remove MAC pool:\n- ovirt.ovirt.ovirt_mac_pool:\n    state: absent\n    name: mymacpool\n\n# Change MAC pool Name\n- ovirt.ovirt.ovirt_nic:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_mac_pool_name\"\n"
  },
  "ovirt.ovirt.ovirt_network": {
    "doc": {
      "description": "Module to manage logical networks in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "clusters": {
          "aliases": [],
          "description": "List of dictionaries describing how the network is managed in specific cluster.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "assigned": {
              "aliases": [],
              "description": "I(true) if the network should be assigned to cluster. Default is I(true).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "display": {
              "aliases": [],
              "description": "I(true) if the network should marked as display network.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "gluster": {
              "aliases": [],
              "description": "I(true) if the network should marked as gluster network.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "migration": {
              "aliases": [],
              "description": "I(true) if the network should marked as migration network.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Cluster name.",
              "required": false,
              "suboptions": {}
            },
            "required": {
              "aliases": [],
              "description": "I(true) if the network must remain operational for all hosts associated with this network.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "comment": {
          "aliases": [],
          "description": "Comment of the network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data_center": {
          "aliases": [],
          "description": "Datacenter name where network reside.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external_provider": {
          "aliases": [],
          "description": "Name of external network provider.\nAt first it tries to import the network when not found it will create network in external provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the network to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Name of the label to assign to the network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "Maximum transmission unit (MTU) of the network.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the network to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the network be present or absent",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vlan_tag": {
          "aliases": [],
          "description": "Specify VLAN tag.\nNOTE - To remove the vlan_tag use -1.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vm_network": {
          "aliases": [],
          "description": "If I(True) network will be marked as network for VM.\nVM network carries traffic relevant to the virtual machine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage logical networks in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create network\n- ovirt.ovirt.ovirt_network:\n    data_center: mydatacenter\n    name: mynetwork\n    vlan_tag: 10\n    vm_network: true\n\n# Remove network\n- ovirt.ovirt.ovirt_network:\n    state: absent\n    name: mynetwork\n\n# Change Network Name\n- ovirt.ovirt.ovirt_network:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_network_name\"\n    data_center: mydatacenter\n\n# Add network from external provider\n- ovirt.ovirt.ovirt_network:\n    data_center: mydatacenter\n    name: mynetwork\n    external_provider: ovirt-provider-ovn\n\n# Remove vlan_tag\n- ovirt.ovirt.ovirt_network:\n    data_center: mydatacenter\n    name: mynetwork\n    vlan_tag: -1\n"
  },
  "ovirt.ovirt.ovirt_network_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV networks.\nThis module was called C(ovirt_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_network_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_networks), which contains a list of networks. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search network starting with string vlan1 use: name=vlan1*",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV networks",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all networks which names start with C(vlan1):\n- ovirt.ovirt.ovirt_network_info:\n    pattern: name=vlan1*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_networks }}\"\n"
  },
  "ovirt.ovirt.ovirt_nic": {
    "doc": {
      "description": "Module to manage network interfaces of Virtual Machines in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the nic to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Type of the network interface. For example e1000, pci_passthrough, rtl8139, rtl8139_virtio, spapr_vlan or virtio.\nIt's required parameter when creating the new NIC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "linked": {
          "aliases": [],
          "description": "Defines if the NIC is linked to the virtual machine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac_address": {
          "aliases": [],
          "description": "Custom MAC address of the network interface, by default it's obtained from MAC pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the network interface to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Logical network to which the VM network interface should use, by default Empty network is used if network is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "Virtual network interface profile to be attached to VM network interface.\nWhen not specified and network has only single profile it will be auto-selected, otherwise you must specify profile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the Virtual Machine NIC be present/absent/plugged/unplugged.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "plugged",
            "present",
            "unplugged"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Name of the template to manage.\nYou must provide either C(vm) parameter or C(template) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template_version": {
          "aliases": [],
          "description": "Version number of the template.",
          "type": "int",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the Virtual Machine to manage.\nYou must provide either C(vm) parameter or C(template) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage network interfaces of Virtual Machines in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n- name: Add NIC to VM\n  ovirt.ovirt.ovirt_nic:\n    state: present\n    vm: myvm\n    name: mynic\n    interface: e1000\n    mac_address: 00:1a:4a:16:01:56\n    profile: ovirtmgmt\n    network: ovirtmgmt\n\n- name: Plug NIC to VM\n  ovirt.ovirt.ovirt_nic:\n    state: plugged\n    vm: myvm\n    name: mynic\n\n- name: Unplug NIC from VM\n  ovirt.ovirt.ovirt_nic:\n    state: unplugged\n    linked: false\n    vm: myvm\n    name: mynic\n\n- name: Add NIC to template\n  ovirt.ovirt.ovirt_nic:\n    auth: \"{{ ovirt_auth }}\"\n    state: present\n    template: my_template\n    name: nic1\n    interface: virtio\n    profile: ovirtmgmt\n    network: ovirtmgmt\n\n- name: Remove NIC from VM\n  ovirt.ovirt.ovirt_nic:\n    state: absent\n    vm: myvm\n    name: mynic\n\n# Change NIC Name\n- ovirt.ovirt.ovirt_nic:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_nic_name\"\n    vm: myvm\n"
  },
  "ovirt.ovirt.ovirt_nic_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV virtual machine network interfaces.\nThis module was called C(ovirt_nic_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_nic_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_nics), which contains a list of NICs. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the NIC, can be used as glob expression.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Name of the template where NIC is attached.\nYou must provide either C(vm) parameter or C(template) parameter.",
          "type": "str",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the VM where NIC is attached.\nYou must provide either C(vm) parameter or C(template) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV virtual machine network interfaces",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all NICs which names start with C(eth) for VM named C(centos7):\n- ovirt.ovirt.ovirt_nic_info:\n    vm: centos7\n    name: eth*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_nics }}\"\n"
  },
  "ovirt.ovirt.ovirt_permission": {
    "doc": {
      "description": "Module to manage permissions of users/groups in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "authz_name": {
          "aliases": [
            "domain"
          ],
          "description": "Authorization provider of the user/group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group_name": {
          "aliases": [],
          "description": "Name of the group to manage.\nNote that if group does not exist in the system this module will fail, you should ensure the group exists by using M(ovirt.ovirt.ovirt_groups) module.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace of the authorization provider, where user/group resides.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "object_id": {
          "aliases": [],
          "description": "ID of the object where the permissions should be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_name": {
          "aliases": [],
          "description": "Name of the object where the permissions should be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "The object where the permissions should be managed.",
          "default": "vm",
          "type": "str",
          "required": false,
          "choices": [
            "cluster",
            "cpu_profile",
            "data_center",
            "disk",
            "disk_profile",
            "host",
            "network",
            "storage_domain",
            "system",
            "template",
            "vm",
            "vm_pool",
            "vnic_profile"
          ],
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "quota_name": {
          "aliases": [],
          "description": "Name of the quota to assign permission. Works only with C(object_type) I(data_center).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "Name of the role to be assigned to user/group on specific object.",
          "default": "UserRole",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the permission be present/absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user_name": {
          "aliases": [],
          "description": "Username of the user to manage. In most LDAPs it's I(uid) of the user, but in Active Directory you must specify I(UPN) of the user.\nNote that if user does not exist in the system this module will fail, you should ensure the user exists by using M(ovirt.ovirt.ovirt_users) module.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage permissions of users/groups in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n- name: Add user user1 from authorization provider example.com-authz\n  ovirt.ovirt.ovirt_permission:\n    user_name: user1\n    authz_name: example.com-authz\n    object_type: vm\n    object_name: myvm\n    role: UserVmManager\n\n- name: Remove permission from user\n  ovirt.ovirt.ovirt_permission:\n    state: absent\n    user_name: user1\n    authz_name: example.com-authz\n    object_type: cluster\n    object_name: mycluster\n    role: ClusterAdmin\n\n- name: Assign QuotaConsumer role to user\n  ovirt.ovirt.ovirt_permissions:\n    state: present\n    user_name: user1\n    authz_name: example.com-authz\n    object_type: data_center\n    object_name: mydatacenter\n    quota_name: myquota\n    role: QuotaConsumer\n\n- name: Assign QuotaConsumer role to group\n  ovirt.ovirt.ovirt_permissions:\n    state: present\n    group_name: group1\n    authz_name: example.com-authz\n    object_type: data_center\n    object_name: mydatacenter\n    quota_name: myquota\n    role: QuotaConsumer\n"
  },
  "ovirt.ovirt.ovirt_permission_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV permissions.\nThis module was called C(ovirt_permission_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_permission_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_permissions), which contains a list of permissions. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "authz_name": {
          "aliases": [
            "domain"
          ],
          "description": "Authorization provider of the user/group. In previous versions of oVirt/RHV known as domain.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "group_name": {
          "aliases": [],
          "description": "Name of the group to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace of the authorization provider, where user/group resides.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "user_name": {
          "aliases": [],
          "description": "Username of the user to manage. In most LDAPs it's I(uid) of the user, but in Active Directory you must specify I(UPN) of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV permissions",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all permissions of user with username C(john):\n- ovirt.ovirt.ovirt_permission_info:\n    user_name: john\n    authz_name: example.com-authz\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_permissions }}\"\n"
  },
  "ovirt.ovirt.ovirt_quota": {
    "doc": {
      "description": "Module to manage datacenter quotas in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster_grace": {
          "aliases": [
            "cluster_hard_limit"
          ],
          "description": "Cluster grace(hard limit) defined in percentage (1-100).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cluster_threshold": {
          "aliases": [
            "cluster_soft_limit"
          ],
          "description": "Cluster threshold(soft limit) defined in percentage (0-100).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "clusters": {
          "aliases": [],
          "description": "List of dictionary of cluster limits, which is valid to specific cluster.\nIf cluster isn't specified it's valid to all clusters in system:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "cluster": {
              "aliases": [],
              "description": "Name of the cluster.",
              "required": false,
              "suboptions": {}
            },
            "cpu": {
              "aliases": [],
              "description": "CPU limit.",
              "required": false,
              "suboptions": {}
            },
            "memory": {
              "aliases": [],
              "description": "Memory limit (in GiB).",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "data_center": {
          "aliases": [],
          "description": "Name of the datacenter where quota should be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the quota to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the quota to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the quota to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the quota be present/absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_grace": {
          "aliases": [
            "storage_hard_limit"
          ],
          "description": "Storage grace(hard limit) defined in percentage (1-100).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "storage_threshold": {
          "aliases": [
            "storage_soft_limit"
          ],
          "description": "Storage threshold(soft limit) defined in percentage (0-100).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "storages": {
          "aliases": [],
          "description": "List of dictionary of storage limits, which is valid to specific storage.\nIf storage isn't specified it's valid to all storages in system:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "size": {
              "aliases": [],
              "description": "Size limit (in GiB).",
              "required": false,
              "suboptions": {}
            },
            "storage": {
              "aliases": [],
              "description": "Name of the storage.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage datacenter quotas in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Add cluster quota to cluster cluster1 with memory limit 20GiB and CPU limit to 10:\n- ovirt.ovirt.ovirt_quota:\n    name: quota1\n    data_center: dcX\n    clusters:\n        - name: cluster1\n          memory: 20\n          cpu: 10\n\n# Add cluster quota to all clusters with memory limit 30GiB and CPU limit to 15:\n- ovirt.ovirt.ovirt_quota:\n    name: quota2\n    data_center: dcX\n    clusters:\n        - memory: 30\n          cpu: 15\n\n# Add storage quota to storage data1 with size limit to 100GiB\n- ovirt.ovirt.ovirt_quota:\n    name: quota3\n    data_center: dcX\n    storage_grace: 40\n    storage_threshold: 60\n    storages:\n        - name: data1\n          size: 100\n\n# Remove quota quota1 (Note the quota must not be assigned to any VM/disk):\n- ovirt.ovirt.ovirt_quota:\n    state: absent\n    data_center: dcX\n    name: quota1\n\n# Change Quota Name\n- ovirt.ovirt.ovirt_quota:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_quota_name\"\n    data_center: dcX\n"
  },
  "ovirt.ovirt.ovirt_quota_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV quotas.\nThis module was called C(ovirt_quota_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_quota_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_quotas), which contains a list of quotas. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "data_center": {
          "aliases": [],
          "description": "Name of the datacenter where quota resides.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the quota, can be used as glob expression.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV quotas",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about quota named C<myquota> in Default datacenter:\n- ovirt.ovirt.ovirt_quota_info:\n    data_center: Default\n    name: myquota\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_quotas }}\"\n"
  },
  "ovirt.ovirt.ovirt_role": {
    "doc": {
      "description": "Module to manage roles in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "administrative": {
          "aliases": [],
          "description": "Defines the role as administrative-only or not.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Description of the role.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the role to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the role to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "permits": {
          "aliases": [],
          "description": "List of permits which role will have\nPermit 'login' is default and all roles will have it.\nList can contain name of permit.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the role be present/absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage roles in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create administrative role with two permits\n- ovirt.ovirt.ovirt_role:\n    name: role\n    administrative: true\n    permits:\n      - manipulate_permissions\n      - create_instance\n\n# Remove role\n- ovirt.ovirt.ovirt_role:\n    name: role\n    state: absent\n\n# Remove all permit\n- ovirt.ovirt.ovirt_role:\n    name: role\n    administrative: ture\n    permits:\n      - login\n"
  },
  "ovirt.ovirt.ovirt_scheduling_policy_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt scheduling policies.\nThis module was called C(ovirt_scheduling_policy_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_scheduling_policy_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_scheduling_policies), which contains a list of scheduling policies. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the scheduling policy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the scheduling policy, can be used as glob expression.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt scheduling policies",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all scheduling policies with name InClusterUpgrade:\n- ovirt.ovirt.ovirt_scheduling_policy_info:\n    name: InClusterUpgrade\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_scheduling_policies }}\"\n"
  },
  "ovirt.ovirt.ovirt_snapshot": {
    "doc": {
      "description": "Module to manage Virtual Machine Snapshots in oVirt/RHV",
      "has_action": false,
      "notes": "Note that without a guest agent the data on the created snapshot may be inconsistent.\nDeleting a snapshot does not remove any information from the virtual machine - it simply removes a return-point. However, restoring a virtual machine from a snapshot deletes any content that was written to the virtual machine after the time the snapshot was taken.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Description of the snapshot.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_id": {
          "aliases": [],
          "description": "Disk id which you want to upload or download\nTo get disk, you need to define disk_id or disk_name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_name": {
          "aliases": [],
          "description": "Disk name which you want to upload or download",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disks": {
          "aliases": [],
          "description": "List of disks which should be created with snapshot.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "id": {
              "aliases": [],
              "description": "Id of the disk which should will be created.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the disk which should will be created.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "download_image_path": {
          "aliases": [],
          "description": "Path on a file system where snapshot should be downloaded.\nNote that you must have an valid oVirt/RHV engine CA in your system trust store or you must provide it in C(ca_file) parameter.\nNote that the snapshot is not downloaded when the file already exists, but you can forcibly download the snapshot when using C(force) I (true).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "keep_days_old": {
          "aliases": [],
          "description": "Number of days after which should snapshot be deleted.\nIt will check all snapshots of virtual machine and delete them, if they are older.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshot_id": {
          "aliases": [],
          "description": "ID of the snapshot to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the Virtual Machine snapshot be restore/present/absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "restore",
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "upload_image_path": {
          "aliases": [],
          "description": "Path to disk image, which should be uploaded.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_memory": {
          "aliases": [
            "restore_memory",
            "save_memory"
          ],
          "description": "If I(true) and C(state) is I(present) save memory of the Virtual Machine if it's running.\nIf I(true) and C(state) is I(restore) restore memory of the Virtual Machine.\nNote that Virtual Machine will be paused while saving the memory.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_name": {
          "aliases": [],
          "description": "Name of the Virtual Machine to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage Virtual Machine Snapshots in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create snapshot:\n- ovirt.ovirt.ovirt_snapshot:\n    vm_name: rhel7\n    description: MySnapshot\n  register: snapshot\n\n# Create snapshot and save memory:\n- ovirt.ovirt.ovirt_snapshot:\n    vm_name: rhel7\n    description: SnapWithMem\n    use_memory: true\n  register: snapshot\n\n# Restore snapshot:\n- ovirt.ovirt.ovirt_snapshot:\n    state: restore\n    vm_name: rhel7\n    snapshot_id: \"{{ snapshot.id }}\"\n\n# Remove snapshot:\n- ovirt.ovirt.ovirt_snapshot:\n    state: absent\n    vm_name: rhel7\n    snapshot_id: \"{{ snapshot.id }}\"\n\n# Upload local image to disk and attach it to vm:\n# Since Ansible 2.8\n- ovirt.ovirt.ovirt_snapshot:\n    name: mydisk\n    vm_name: myvm\n    upload_image_path: /path/to/mydisk.qcow2\n\n# Download snapshot to local file system:\n# Since Ansible 2.8\n- ovirt.ovirt.ovirt_snapshot:\n    snapshot_id: 7de90f31-222c-436c-a1ca-7e655bd5b60c\n    disk_name: DiskName\n    vm_name: myvm\n    download_image_path: /home/user/mysnaphost.qcow2\n\n# Delete all snapshots older than 2 days\n- ovirt.ovirt.ovirt_snapshot:\n    vm_name: test\n    keep_days_old: 2\n\n- name: Select which disks should be add to snapshot\n  ovirt.ovirt.ovirt_snapshot:\n    vm_name: test\n    disks:\n      - id: 7de90f31-222c-436c-a1ca-7e655bd5b60c\n      - name: my_disk_name\n"
  },
  "ovirt.ovirt.ovirt_snapshot_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV virtual machine snapshots.\nThis module was called C(ovirt_snapshot_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_snapshot_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_snapshots), which contains a list of snapshots. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Description of the snapshot, can be used as glob expression.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "snapshot_id": {
          "aliases": [],
          "description": "Id of the snapshot we want to retrieve information about.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the VM with snapshot.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV virtual machine snapshots",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all snapshots which description start with C(update) for VM named C(centos7):\n- ovirt.ovirt.ovirt_snapshot_info:\n    vm: centos7\n    description: update*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_snapshots }}\"\n"
  },
  "ovirt.ovirt.ovirt_storage_connection": {
    "doc": {
      "description": "Module to manage storage connections in oVirt",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "address": {
          "aliases": [],
          "description": "Address of the storage server. E.g.: myserver.mydomain.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "This parameter is relevant only when updating a connection.\nIf I(true) the storage domain don't have to be in I(MAINTENANCE) state, so the storage connection is updated.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id of the storage connection to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mount_options": {
          "aliases": [],
          "description": "Option which will be passed when mounting storage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "nfs_retrans": {
          "aliases": [],
          "description": "The number of times to retry a request before attempting further recovery actions. Range 0 to 65535.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nfs_timeout": {
          "aliases": [],
          "description": "The time in tenths of a second to wait for a response before retrying NFS requests. Range 0 to 65535.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nfs_version": {
          "aliases": [],
          "description": "NFS version. One of: I(auto), I(v3), I(v4) or I(v4_1).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "A CHAP password for logging into a target.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path of the mount point of the storage. E.g.: /path/to/my/data",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Port of the iSCSI storage server.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the storage connection be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage": {
          "aliases": [],
          "description": "Name of the storage domain to be used with storage connection.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "The target IQN for the storage device.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Storage type. For example: I(nfs), I(iscsi), etc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "A CHAP username for logging into a target.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vfs_type": {
          "aliases": [],
          "description": "Virtual File System type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage storage connections in oVirt",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Add new storage connection:\n- ovirt.ovirt.ovirt_storage_connection:\n    storage: myiscsi\n    address: 10.34.63.199\n    target: iqn.2016-08-09.domain-01:nickname\n    port: 3260\n    type: iscsi\n\n# Update the existing storage connection address:\n- ovirt.ovirt.ovirt_storage_connection:\n    id: 26915c96-92ff-47e5-9e77-b581db2f2d36\n    address: 10.34.63.204\n    force: true\n\n# Remove storage connection:\n- ovirt.ovirt.ovirt_storage_connection:\n    id: 26915c96-92ff-47e5-9e77-b581db2f2d36\n"
  },
  "ovirt.ovirt.ovirt_storage_domain": {
    "doc": {
      "description": "Module to manage storage domains in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "backup": {
          "aliases": [],
          "description": "Boolean flag which indicates whether the storage domain is configured as backup or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Comment of the storage domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "critical_space_action_blocker": {
          "aliases": [],
          "description": "Indicates the minimal free space the storage domain should contain in percentages.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "data_center": {
          "aliases": [],
          "description": "Data center name where storage domain should be attached.\nThis parameter isn't idempotent, it's not possible to change data center of storage domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the storage domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destroy": {
          "aliases": [],
          "description": "Logical remove of the storage domain. If I(true) retains the storage domain's data for import.\nThis parameter is relevant only when C(state) is I(absent).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "discard_after_delete": {
          "aliases": [],
          "description": "If I(True) storage domain blocks will be discarded upon deletion. Enabled by default.\nThis parameter is relevant only for block based storage domains.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "domain_function": {
          "aliases": [
            "type"
          ],
          "description": "Function of the storage domain.\nThis parameter isn't idempotent, it's not possible to change domain function of storage domain.",
          "default": "data",
          "type": "str",
          "required": false,
          "choices": [
            "data",
            "iso",
            "export"
          ],
          "suboptions": {}
        },
        "fcp": {
          "aliases": [],
          "description": "Dictionary with values for fibre channel storage type:\nNote that these parameters are not idempotent.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "lun_id": {
              "aliases": [],
              "description": "LUN id.",
              "required": false,
              "suboptions": {}
            },
            "override_luns": {
              "aliases": [],
              "description": "If I(True) FCP storage domain LUNs will be overridden before adding.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "If I(True) storage domain will be formatted after removing it from oVirt/RHV.\nThis parameter is relevant only when C(state) is I(absent).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "glusterfs": {
          "aliases": [],
          "description": "Dictionary with values for GlusterFS storage type:\nNote that these parameters are not idempotent.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Address of the Gluster server. E.g.: myserver.mydomain.com",
              "required": false,
              "suboptions": {}
            },
            "mount_options": {
              "aliases": [],
              "description": "Option which will be passed when mounting storage.",
              "required": false,
              "suboptions": {}
            },
            "path": {
              "aliases": [],
              "description": "Path of the mount point. E.g.: /path/to/my/data",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "host": {
          "aliases": [],
          "description": "Host to be used to mount storage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id of the storage domain to be imported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "iscsi": {
          "aliases": [],
          "description": "Dictionary with values for iSCSI storage type:\nNote that these parameters are not idempotent.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Address of the iSCSI storage server.",
              "required": false,
              "suboptions": {}
            },
            "lun_id": {
              "aliases": [],
              "description": "LUN id(s).",
              "required": false,
              "suboptions": {}
            },
            "override_luns": {
              "aliases": [],
              "description": "If I(True) ISCSI storage domain luns will be overridden before adding.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "A CHAP password for logging into a target.",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port of the iSCSI storage server.",
              "required": false,
              "suboptions": {}
            },
            "target": {
              "aliases": [],
              "description": "The target IQN for the storage device.",
              "required": false,
              "suboptions": {}
            },
            "target_lun_map": {
              "aliases": [],
              "description": "List of dictionary containing targets and LUNs.",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "A CHAP user name for logging into a target.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "localfs": {
          "aliases": [],
          "description": "Dictionary with values for localfs storage type:\nNote that these parameters are not idempotent.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "path": {
              "aliases": [],
              "description": "Path of the mount point. E.g.: /path/to/my/data",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "managed_block_storage": {
          "aliases": [],
          "description": "Dictionary with values for managed block storage type\nNote: available from ovirt 4.3",
          "type": "dict",
          "required": false,
          "suboptions": {
            "driver_options": {
              "aliases": [],
              "description": "The options to be passed when creating a storage domain using a cinder driver.\nList of dictionary containing C(name) and C(value) of driver option",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {}
            },
            "driver_sensitive_options": {
              "aliases": [],
              "description": "Parameters containing sensitive information, to be passed when creating a storage domain using a cinder driver.\nList of dictionary containing C(name) and C(value) of driver sensitive option",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Name of the storage domain to manage. (Not required when state is I(imported))",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "nfs": {
          "aliases": [],
          "description": "Dictionary with values for NFS storage type:\nNote that these parameters are not idempotent.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Address of the NFS server. E.g.: myserver.mydomain.com",
              "required": false,
              "suboptions": {}
            },
            "mount_options": {
              "aliases": [],
              "description": "Option which will be passed when mounting storage.",
              "required": false,
              "suboptions": {}
            },
            "path": {
              "aliases": [],
              "description": "Path of the mount point. E.g.: /path/to/my/data",
              "required": false,
              "suboptions": {}
            },
            "retrans": {
              "aliases": [],
              "description": "The number of times to retry a request before attempting further recovery actions. Range 0 to 65535.",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "The time in tenths of a second to wait for a response before retrying NFS requests. Range 0 to 65535.",
              "required": false,
              "suboptions": {}
            },
            "version": {
              "aliases": [],
              "description": "NFS version. One of: I(auto), I(v3), I(v4) or I(v4_1).",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "posixfs": {
          "aliases": [],
          "description": "Dictionary with values for PosixFS storage type:\nNote that these parameters are not idempotent.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "mount_options": {
              "aliases": [],
              "description": "Option which will be passed when mounting storage.",
              "required": false,
              "suboptions": {}
            },
            "path": {
              "aliases": [],
              "description": "Path of the mount point. E.g.: /path/to/my/data",
              "required": false,
              "suboptions": {}
            },
            "vfs_type": {
              "aliases": [],
              "description": "Virtual File System type.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Should the storage domain be present/absent/maintenance/unattached/imported/update_ovf_store\nI(imported) is supported since version 2.4.\nI(update_ovf_store) is supported since version 2.5, currently if C(wait) is (true), we don't wait for update.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "maintenance",
            "unattached",
            "imported",
            "update_ovf_store"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "warning_low_space": {
          "aliases": [],
          "description": "Indicates the minimum percentage of a free space in a storage domain to present a warning.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wipe_after_delete": {
          "aliases": [],
          "description": "Boolean flag which indicates whether the storage domain should wipe the data after delete.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage storage domains in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Add data NFS storage domain\n- ovirt.ovirt.ovirt_storage_domain:\n    name: data_nfs\n    host: myhost\n    data_center: mydatacenter\n    nfs:\n      address: 10.34.63.199\n      path: /path/data\n\n# Add data NFS storage domain with id for data center\n- ovirt.ovirt.ovirt_storage_domain:\n    name: data_nfs\n    host: myhost\n    data_center: 11111\n    nfs:\n      address: 10.34.63.199\n      path: /path/data\n      mount_options: noexec,nosuid\n\n# Add data localfs storage domain\n- ovirt.ovirt.ovirt_storage_domain:\n    name: data_localfs\n    host: myhost\n    data_center: mydatacenter\n    localfs:\n      path: /path/to/data\n\n# Add data iSCSI storage domain:\n- ovirt.ovirt.ovirt_storage_domain:\n    name: data_iscsi\n    host: myhost\n    data_center: mydatacenter\n    iscsi:\n      target: iqn.2016-08-09.domain-01:nickname\n      lun_id:\n       - 1IET_000d0001\n       - 1IET_000d0002\n      address: 10.34.63.204\n    discard_after_delete: True\n    backup: False\n    critical_space_action_blocker: 5\n    warning_low_space: 10\n\n# Since Ansible 2.5 you can specify multiple targets for storage domain,\n# Add data iSCSI storage domain with multiple targets:\n- ovirt.ovirt.ovirt_storage_domain:\n    name: data_iscsi\n    host: myhost\n    data_center: mydatacenter\n    iscsi:\n      target_lun_map:\n        - target: iqn.2016-08-09.domain-01:nickname\n          lun_id: 1IET_000d0001\n        - target: iqn.2016-08-09.domain-02:nickname\n          lun_id: 1IET_000d0002\n      address: 10.34.63.204\n    discard_after_delete: True\n\n# Add data glusterfs storage domain\n- ovirt.ovirt.ovirt_storage_domain:\n    name: glusterfs_1\n    host: myhost\n    data_center: mydatacenter\n    glusterfs:\n      address: 10.10.10.10\n      path: /path/data\n\n# Create export NFS storage domain:\n- ovirt.ovirt.ovirt_storage_domain:\n    name: myexportdomain\n    domain_function: export\n    host: myhost\n    data_center: mydatacenter\n    nfs:\n      address: 10.34.63.199\n      path: /path/export\n    wipe_after_delete: False\n    backup: True\n    critical_space_action_blocker: 2\n    warning_low_space: 5\n\n# Import export NFS storage domain:\n- ovirt.ovirt.ovirt_storage_domain:\n    state: imported\n    domain_function: export\n    host: myhost\n    data_center: mydatacenter\n    nfs:\n      address: 10.34.63.199\n      path: /path/export\n\n# Import FCP storage domain:\n- ovirt.ovirt.ovirt_storage_domain:\n    state: imported\n    name: data_fcp\n    host: myhost\n    data_center: mydatacenter\n    fcp: {}\n\n# Update OVF_STORE:\n- ovirt.ovirt.ovirt_storage_domain:\n    state: update_ovf_store\n    name: domain\n\n# Create ISO NFS storage domain\n- ovirt.ovirt.ovirt_storage_domain:\n    name: myiso\n    domain_function: iso\n    host: myhost\n    data_center: mydatacenter\n    nfs:\n      address: 10.34.63.199\n      path: /path/iso\n\n# Create managed storage domain\n# Available from ovirt 4.3 and ansible 2.9\n- ovirt.ovirt.ovirt_storage_domain:\n    name: my_managed_domain\n    host: myhost\n    data_center: mydatacenter\n    managed_block_storage:\n      driver_options:\n        - name: rbd_pool\n          value: pool1\n        - name: rbd_user\n          value: admin\n        - name: volume_driver\n          value: cinder.volume.drivers.rbd.RBDDriver\n        - name: rbd_keyring_conf\n          value: /etc/ceph/keyring\n      driver_sensitive_options:\n        - name: secret_password\n          value: password\n\n# Remove storage domain\n- ovirt.ovirt.ovirt_storage_domain:\n    state: absent\n    name: mystorage_domain\n    format: true\n"
  },
  "ovirt.ovirt.ovirt_storage_domain_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV storage domains.\nThis module was called C(ovirt_storage_domain_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_storage_domain_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_storage_domains), which contains a list of storage domains. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search storage domain X from datacenter Y use following pattern: name=X and datacenter=Y",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV storage domains",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all storage domains which names start with C(data) and\n# belong to data center C(west):\n- ovirt.ovirt.ovirt_storage_domain_info:\n    pattern: name=data* and datacenter=west\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_storage_domains }}\"\n"
  },
  "ovirt.ovirt.ovirt_storage_template_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV templates relate to a storage domain.\nThis module was called C(ovirt_storage_template_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_storage_template_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_storage_templates), which contains a list of templates. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "max": {
          "aliases": [],
          "description": "Sets the maximum number of templates to return. If not specified all the templates are returned.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "storage_domain": {
          "aliases": [],
          "description": "The storage domain name where the templates should be listed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unregistered": {
          "aliases": [],
          "description": "Flag which indicates whether to get unregistered templates which contain one or more disks which reside on a storage domain or diskless templates.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV templates relate to a storage domain.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all Templates which relate to a storage domain and\n# are unregistered:\n- ovirt.ovirt.ovirt_storage_template_info:\n    unregistered=True\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_storage_templates }}\"\n"
  },
  "ovirt.ovirt.ovirt_storage_vm_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV virtual machines relate to a storage domain.\nThis module was called C(ovirt_storage_vm_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_storage_vm_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_storage_vms), which contains a list of virtual machines. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "max": {
          "aliases": [],
          "description": "Sets the maximum number of virtual machines to return. If not specified all the virtual machines are returned.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "storage_domain": {
          "aliases": [],
          "description": "The storage domain name where the virtual machines should be listed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unregistered": {
          "aliases": [],
          "description": "Flag which indicates whether to get unregistered virtual machines which contain one or more disks which reside on a storage domain or diskless virtual machines.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV virtual machines relate to a storage domain.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all VMs which relate to a storage domain and\n# are unregistered:\n- ovirt.ovirt.ovirt_storage_vm_info:\n    unregistered=True\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_storage_vms }}\"\n"
  },
  "ovirt.ovirt.ovirt_system_option_info": {
    "doc": {
      "description": "Retrieve information about one oVirt/RHV system options.",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_system_option_info), which contains a dict of system option. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of system option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The version of the option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one oVirt/RHV system options.",
      "version_added": "1.3.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n- ovirt.ovirt.ovirt_system_option_info:\n    name: \"ServerCPUList\"\n    version: \"4.4\"\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_system_option }}\"\n"
  },
  "ovirt.ovirt.ovirt_tag": {
    "doc": {
      "description": "This module manage tags in oVirt/RHV. It can also manage assignments of those tags to entities.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Description of the tag to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "List of the hosts names, which should have assigned this tag.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the tag to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the tag to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "parent": {
          "aliases": [],
          "description": "Name of the parent tag.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the tag be present/absent/attached/detached.\nC(Note): I(attached) and I(detached) states are supported since version 2.4.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "attached",
            "detached"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vms": {
          "aliases": [],
          "description": "List of the VMs names, which should have assigned this tag.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage tags in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create(if not exists) and assign tag to vms vm1 and vm2:\n- ovirt.ovirt.ovirt_tag:\n    name: mytag\n    vms:\n      - vm1\n      - vm2\n\n# Attach a tag to VM 'vm3', keeping the rest already attached tags on VM:\n- ovirt.ovirt.ovirt_tag:\n    name: mytag\n    state: attached\n    vms:\n      - vm3\n\n# Detach a tag from VM 'vm3', keeping the rest already attached tags on VM:\n- ovirt.ovirt.ovirt_tag:\n    name: mytag\n    state: detached\n    vms:\n      - vm3\n\n# To detach all VMs from tag:\n- ovirt.ovirt.ovirt_tag:\n    name: mytag\n    vms: []\n\n# Remove tag\n- ovirt.ovirt.ovirt_tag:\n    state: absent\n    name: mytag\n\n# Change Tag Name\n- ovirt.ovirt.ovirt_tag:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_tag_name\"\n"
  },
  "ovirt.ovirt.ovirt_tag_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV tags.\nThis module was called C(ovirt_tag_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_tag_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_tags), which contains a list of tags. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Name of the host, which tags should be listed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the tag which should be listed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the VM, which tags should be listed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV tags",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all tags, which names start with C(tag):\n- ovirt.ovirt.ovirt_tag_info:\n    name: tag*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_tags }}\"\n\n# Gather information about all tags, which are assigned to VM C(postgres):\n- ovirt.ovirt.ovirt_tag_info:\n    vm: postgres\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_tags }}\"\n\n# Gather information about all tags, which are assigned to host C(west):\n- ovirt.ovirt.ovirt_tag_info:\n    host: west\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_tags }}\"\n"
  },
  "ovirt.ovirt.ovirt_template": {
    "doc": {
      "description": "Module to manage virtual machine templates in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "allow_partial_import": {
          "aliases": [],
          "description": "Boolean indication whether to allow partial registration of a template when C(state) is registered.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ballooning_enabled": {
          "aliases": [],
          "description": "If I(true), use memory ballooning.\nMemory balloon is a guest device, which may be used to re-distribute / reclaim the host memory based on VM needs in a dynamic way. In this way it's possible to create memory over commitment states.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "clone_name": {
          "aliases": [],
          "description": "Name for importing Template from storage domain.\nIf not defined, C(name) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clone_permissions": {
          "aliases": [],
          "description": "If I(True) then the permissions of the VM (only the direct ones, not the inherited ones) will be copied to the created template.\nThis parameter is used only when C(state) I(present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_init": {
          "aliases": [],
          "description": "Dictionary with values for Unix-like Virtual Machine initialization using cloud init.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "authorized_ssh_keys": {
              "aliases": [],
              "description": "Use this SSH keys to login to Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "custom_script": {
              "aliases": [],
              "description": "Cloud-init script which will be executed on Virtual Machine when deployed.\nThis is appended to the end of the cloud-init script generated by any other options.\nFor further information, refer to cloud-init User-Data documentation.",
              "required": false,
              "suboptions": {}
            },
            "dns_search": {
              "aliases": [],
              "description": "DNS search domains to be configured on Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "dns_servers": {
              "aliases": [],
              "description": "DNS servers to be configured on Virtual Machine, maximum of two, space-separated.",
              "required": false,
              "suboptions": {}
            },
            "host_name": {
              "aliases": [],
              "description": "Hostname to be set to Virtual Machine when deployed.",
              "required": false,
              "suboptions": {}
            },
            "nic_boot_protocol": {
              "aliases": [],
              "description": "Set boot protocol of the network interface of Virtual Machine.",
              "required": false,
              "choices": [
                "none",
                "dhcp",
                "static"
              ],
              "suboptions": {}
            },
            "nic_gateway": {
              "aliases": [],
              "description": "If boot protocol is static, set this gateway to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_ip_address": {
              "aliases": [],
              "description": "If boot protocol is static, set this IP address to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_name": {
              "aliases": [],
              "description": "Set name to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_netmask": {
              "aliases": [],
              "description": "If boot protocol is static, set this netmask to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "regenerate_ssh_keys": {
              "aliases": [],
              "description": "If I(True) SSH keys will be regenerated on Virtual Machine.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "root_password": {
              "aliases": [],
              "description": "Password to be set for user specified by C(user_name) parameter.",
              "required": false,
              "suboptions": {}
            },
            "timezone": {
              "aliases": [],
              "description": "Timezone to be set to Virtual Machine when deployed.",
              "required": false,
              "suboptions": {}
            },
            "user_name": {
              "aliases": [],
              "description": "Username to be used to set password to Virtual Machine when deployed.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cloud_init_nics": {
          "aliases": [],
          "description": "List of dictionaries representing network interfaces to be setup by cloud init.\nThis option is used, when user needs to setup more network interfaces via cloud init.\nIf one network interface is enough, user should use C(cloud_init) I(nic_*) parameters. C(cloud_init) I(nic_*) parameters are merged with C(cloud_init_nics) parameters.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "nic_boot_protocol": {
              "aliases": [],
              "description": "Set boot protocol of the network interface of Virtual Machine. Can be one of C(none), C(dhcp) or C(static).",
              "required": false,
              "suboptions": {}
            },
            "nic_gateway": {
              "aliases": [],
              "description": "If boot protocol is static, set this gateway to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_ip_address": {
              "aliases": [],
              "description": "If boot protocol is static, set this IP address to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_name": {
              "aliases": [],
              "description": "Set name to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_netmask": {
              "aliases": [],
              "description": "If boot protocol is static, set this netmask to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster, where template should be created/imported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster_mappings": {
          "aliases": [],
          "description": "Mapper which maps cluster name between Template's OVF and the destination cluster this Template should be registered to, relevant when C(state) is registered. Cluster mapping is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "dest_name": {
              "aliases": [],
              "description": "The name of the destination cluster.",
              "required": false,
              "suboptions": {}
            },
            "source_name": {
              "aliases": [],
              "description": "The name of the source cluster.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cpu_profile": {
          "aliases": [],
          "description": "CPU profile to be set to template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_mappings": {
          "aliases": [],
          "description": "Mapper which maps aaa domain name between Template's OVF and the destination aaa domain this Template should be registered to, relevant when C(state) is registered. The aaa domain mapping is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "dest_name": {
              "aliases": [],
              "description": "The name of the destination aaa domain.",
              "required": false,
              "suboptions": {}
            },
            "source_name": {
              "aliases": [],
              "description": "The name of the source aaa domain.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "exclusive": {
          "aliases": [],
          "description": "When C(state) is I(exported) this parameter indicates if the existing templates with the same name should be overwritten.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "export_domain": {
          "aliases": [],
          "description": "When C(state) is I(exported) or I(imported) this parameter specifies the name of the export storage domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the template to be registered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_disk": {
          "aliases": [
            "glance_image_disk_name"
          ],
          "description": "When C(state) is I(imported) and C(image_provider) is used this parameter specifies the name of disk to be imported as template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_provider": {
          "aliases": [],
          "description": "When C(state) is I(imported) this parameter specifies the name of the image provider to be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "io_threads": {
          "aliases": [],
          "description": "Number of IO threads used by virtual machine. I(0) means IO threading disabled.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "Amount of memory of the template. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_guaranteed": {
          "aliases": [],
          "description": "Amount of minimal guaranteed memory of the template. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nC(memory_guaranteed) parameter can't be lower than C(memory) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_max": {
          "aliases": [],
          "description": "Upper bound of template memory up to which memory hot-plug can be performed. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the template to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "List of NICs, which should be attached to Virtual Machine. NIC is described by following dictionary.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "interface": {
              "aliases": [],
              "description": "Type of the network interface.",
              "default": "virtio",
              "required": false,
              "choices": [
                "virtio",
                "e1000",
                "rtl8139"
              ],
              "suboptions": {}
            },
            "mac_address": {
              "aliases": [],
              "description": "Custom MAC address of the network interface, by default it's obtained from MAC pool.",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the NIC.",
              "required": false,
              "suboptions": {}
            },
            "profile_name": {
              "aliases": [],
              "description": "Profile name where NIC should be attached.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "operating_system": {
          "aliases": [],
          "description": "Operating system of the template, for example 'rhel_8x64'.\nDefault value is set by oVirt/RHV engine.\nUse the M(ovirt_vm_os_info) module to obtain the current list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "role_mappings": {
          "aliases": [],
          "description": "Mapper which maps role name between Template's OVF and the destination role this Template should be registered to, relevant when C(state) is registered. Role mapping is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "dest_name": {
              "aliases": [],
              "description": "The name of the destination role.",
              "required": false,
              "suboptions": {}
            },
            "source_name": {
              "aliases": [],
              "description": "The name of the source role.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "seal": {
          "aliases": [],
          "description": "'Sealing' is an operation that erases all machine-specific configurations from a filesystem: This includes SSH keys, UDEV rules, MAC addresses, system ID, hostname, etc. If I(true) subsequent virtual machines made from this template will avoid configuration inheritance.\nThis parameter is used only when C(state) I(present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "smartcard_enabled": {
          "aliases": [],
          "description": "If I(true), use smart card authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "soundcard_enabled": {
          "aliases": [],
          "description": "If I(true), the sound card is added to the virtual machine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sso": {
          "aliases": [],
          "description": "I(True) enable Single Sign On by Guest Agent, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the template be present/absent/exported/imported/registered. When C(state) is I(registered) and the unregistered template's name belongs to an already registered in engine template in the same DC then we fail to register the unregistered template.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "exported",
            "imported",
            "registered"
          ],
          "suboptions": {}
        },
        "storage_domain": {
          "aliases": [],
          "description": "When C(state) is I(imported) this parameter specifies the name of the destination data storage domain. When C(state) is I(registered) this parameter specifies the name of the data storage domain of the unregistered template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sysprep": {
          "aliases": [],
          "description": "Dictionary with values for Windows Virtual Machine initialization using sysprep.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "active_directory_ou": {
              "aliases": [],
              "description": "Active Directory Organizational Unit, to be used for login of user.",
              "required": false,
              "suboptions": {}
            },
            "custom_script": {
              "aliases": [],
              "description": "A custom Sysprep definition in the format of a complete unattended installation answer file.",
              "required": false,
              "suboptions": {}
            },
            "domain": {
              "aliases": [],
              "description": "Domain to be set to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "host_name": {
              "aliases": [],
              "description": "Hostname to be set to Virtual Machine when deployed.",
              "required": false,
              "suboptions": {}
            },
            "input_locale": {
              "aliases": [],
              "description": "Input localization of the Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "org_name": {
              "aliases": [],
              "description": "Organization name to be set to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "root_password": {
              "aliases": [],
              "description": "Password to be set for username to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "system_locale": {
              "aliases": [],
              "description": "System localization of the Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "timezone": {
              "aliases": [],
              "description": "Timezone to be set to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "ui_language": {
              "aliases": [],
              "description": "UI language of the Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "user_name": {
              "aliases": [],
              "description": "Username to be used for set password to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "windows_license_key": {
              "aliases": [],
              "description": "License key to be set to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "template_image_disk_name": {
          "aliases": [],
          "description": "When C(state) is I(imported) and C(image_provider) is used this parameter specifies the new name for imported disk, if omitted then I(image_disk) name is used by default. This parameter is used only in case of importing disk image from Glance domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timezone": {
          "aliases": [],
          "description": "Sets time zone offset of the guest hardware clock.\nFor example C(Etc/GMT)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "usb_support": {
          "aliases": [],
          "description": "I(True) enable USB support, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "C(name) - The name of this version.\nC(number) - The index of this version in the versions hierarchy of the template. Used for editing of sub template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the VM, which will be used to create template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vnic_profile_mappings": {
          "aliases": [],
          "description": "Mapper which maps an external virtual NIC profile to one that exists in the engine when C(state) is registered. vnic_profile is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "source_network_name": {
              "aliases": [],
              "description": "The network name of the source network.",
              "required": false,
              "suboptions": {}
            },
            "source_profile_name": {
              "aliases": [],
              "description": "The profile name related to the source network.",
              "required": false,
              "suboptions": {}
            },
            "target_profile_id": {
              "aliases": [],
              "description": "The id of the target profile id to be mapped to in the engine.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage virtual machine templates in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create template from vm\n- ovirt.ovirt.ovirt_template:\n    cluster: Default\n    name: mytemplate\n    vm: rhel7\n    cpu_profile: Default\n    description: Test\n\n# Import template\n- ovirt.ovirt.ovirt_template:\n    state: imported\n    name: mytemplate\n    export_domain: myexport\n    storage_domain: mystorage\n    cluster: mycluster\n\n# Remove template\n- ovirt.ovirt.ovirt_template:\n    state: absent\n    name: mytemplate\n\n# Change Template Name\n- ovirt.ovirt.ovirt_template:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_template_name\"\n\n# Register template\n- ovirt.ovirt.ovirt_template:\n    state: registered\n    storage_domain: mystorage\n    cluster: mycluster\n    name: mytemplate\n\n# Register template using id\n- ovirt.ovirt.ovirt_template:\n    state: registered\n    storage_domain: mystorage\n    cluster: mycluster\n    id: 1111-1111-1111-1111\n\n# Register template, allowing partial import\n- ovirt.ovirt.ovirt_template:\n    state: registered\n    storage_domain: mystorage\n    allow_partial_import: \"True\"\n    cluster: mycluster\n    id: 1111-1111-1111-1111\n\n# Register template with vnic profile mappings\n- ovirt.ovirt.ovirt_template:\n    state: registered\n    storage_domain: mystorage\n    cluster: mycluster\n    id: 1111-1111-1111-1111\n    vnic_profile_mappings:\n      - source_network_name: mynetwork\n        source_profile_name: mynetwork\n        target_profile_id: 3333-3333-3333-3333\n      - source_network_name: mynetwork2\n        source_profile_name: mynetwork2\n        target_profile_id: 4444-4444-4444-4444\n\n# Register template with mapping\n- ovirt.ovirt.ovirt_template:\n    state: registered\n    storage_domain: mystorage\n    cluster: mycluster\n    id: 1111-1111-1111-1111\n    role_mappings:\n      - source_name: Role_A\n        dest_name: Role_B\n    domain_mappings:\n      - source_name: Domain_A\n        dest_name: Domain_B\n    cluster_mappings:\n      - source_name: cluster_A\n        dest_name: cluster_B\n\n# Import image from Glance s a template\n- ovirt.ovirt.ovirt_template:\n    state: imported\n    name: mytemplate\n    image_disk: \"centos7\"\n    template_image_disk_name: centos7_from_glance\n    image_provider: \"glance_domain\"\n    storage_domain: mystorage\n    cluster: mycluster\n\n# Edit template subversion\n- ovirt.ovirt.ovirt_template:\n    cluster: mycluster\n    name: mytemplate\n    vm: rhel7\n    version:\n        number: 2\n        name: subversion\n\n# Create new template subversion\n- ovirt.ovirt.ovirt_template:\n    cluster: mycluster\n    name: mytemplate\n    vm: rhel7\n    version:\n        name: subversion\n\n- name: Template with cloud init\n  ovirt.ovirt.ovirt_template:\n    name: mytemplate\n    cluster: Default\n    vm: rhel8\n    memory: 1GiB\n    cloud_init:\n      dns_servers: '8.8.8.8 8.8.4.4'\n      nic_boot_protocol: static\n      nic_ip_address: 10.34.60.86\n      nic_netmask: 255.255.252.0\n      nic_gateway: 10.34.63.254\n      nic_name: eth1\n      host_name: example.com\n      custom_script: |\n        write_files:\n         - content: |\n             Hello, world!\n           path: /tmp/greeting.txt\n           permissions: '0644'\n      user_name: root\n      root_password: super_password\n\n- name: Template with cloud init, with multiple network interfaces\n  ovirt.ovirt.ovirt_template:\n    name: mytemplate\n    cluster: mycluster\n    vm: rhel8\n    cloud_init_nics:\n    - nic_name: eth0\n      nic_boot_protocol: dhcp\n    - nic_name: eth1\n      nic_boot_protocol: static\n      nic_ip_address: 10.34.60.86\n      nic_netmask: 255.255.252.0\n      nic_gateway: 10.34.63.254\n\n- name: Template with timezone and nic\n  ovirt.ovirt.ovirt_template:\n    cluster: MyCluster\n    name: mytemplate\n    vm: rhel8\n    timezone: America/Godthab\n    memory_max: 2Gib\n    nics:\n      - name: nic1\n\n- name: Template with sysprep\n  ovirt.ovirt.ovirt_template:\n    name: windows2012R2_AD\n    cluster: Default\n    vm: windows2012\n    memory: 3GiB\n    sysprep:\n      host_name: windowsad.example.com\n      user_name: Administrator\n      root_password: SuperPassword123\n"
  },
  "ovirt.ovirt.ovirt_template_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV templates.\nThis module was called C(ovirt_template_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_template_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_templates), which contains a list of templates. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search template X from datacenter Y use following pattern: name=X and datacenter=Y",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV templates",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all templates which names start with C(centos) and\n# belongs to data center C(west):\n- ovirt.ovirt.ovirt_template_info:\n    pattern: name=centos* and datacenter=west\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_templates }}\"\n"
  },
  "ovirt.ovirt.ovirt_user": {
    "doc": {
      "description": "Module to manage users in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "authz_name": {
          "aliases": [
            "domain"
          ],
          "description": "Authorization provider of the user. In previous versions of oVirt/RHV known as domain.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the user to manage. In most LDAPs it's I(uid) of the user, but in Active Directory you must specify I(UPN) of the user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace where the user resides. When using the authorization provider that stores users in the LDAP server, this attribute equals the naming context of the LDAP server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssh_public_key": {
          "aliases": [],
          "description": "The user public key.",
          "type": "str",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the user be present/absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage users in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Add user user1 from authorization provider example.com-authz\n- ovirt.ovirt.ovirt_user:\n    name: user1\n    domain: example.com-authz\n\n# Add user user1 from authorization provider example.com-authz\n# In case of Active Directory specify UPN:\n- ovirt.ovirt.ovirt_user:\n    name: user1@ad2.example.com\n    domain: example.com-authz\n\n# Remove user user1 with authorization provider example.com-authz\n- ovirt.ovirt.ovirt_user:\n    state: absent\n    name: user1\n    authz_name: example.com-authz\n\n# Remove ssh_public_key\n- ovirt.ovirt.ovirt_user:\n    name: user1\n    authz_name: example.com-authz\n    ssh_public_key: \"\"\n"
  },
  "ovirt.ovirt.ovirt_user_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV users.\nThis module was called C(ovirt_user_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_user_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_users), which contains a list of users. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search user X use following pattern: name=X",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV users",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all users which first names start with C(john):\n- ovirt.ovirt.ovirt_user_info:\n    pattern: name=john*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_users }}\"\n"
  },
  "ovirt.ovirt.ovirt_vm": {
    "doc": {
      "description": "This module manages whole lifecycle of the Virtual Machine(VM) in oVirt/RHV.\nSince VM can hold many states in oVirt/RHV, this see notes to see how the states of the VM are handled.",
      "has_action": false,
      "notes": "If VM is in I(UNASSIGNED) or I(UNKNOWN) state before any operation, the module will fail. If VM is in I(IMAGE_LOCKED) state before any operation, we try to wait for VM to be I(DOWN). If VM is in I(SAVING_STATE) state before any operation, we try to wait for VM to be I(SUSPENDED). If VM is in I(POWERING_DOWN) state before any operation, we try to wait for VM to be I(UP) or I(DOWN). VM can get into I(UP) state from I(POWERING_DOWN) state, when there is no ACPI or guest agent running inside VM, or if the shutdown operation fails. When user specify I(UP) C(state), we always wait to VM to be in I(UP) state in case VM is I(MIGRATING), I(REBOOTING), I(POWERING_UP), I(RESTORING_STATE), I(WAIT_FOR_LAUNCH). In other states we run start operation on VM. When user specify I(stopped) C(state), and If user pass C(force) parameter set to I(true) we forcibly stop the VM in any state. If user don't pass C(force) parameter, we always wait to VM to be in UP state in case VM is I(MIGRATING), I(REBOOTING), I(POWERING_UP), I(RESTORING_STATE), I(WAIT_FOR_LAUNCH). If VM is in I(PAUSED) or I(SUSPENDED) state, we start the VM. Then we gracefully shutdown the VM. When user specify I(suspended) C(state), we always wait to VM to be in UP state in case VM is I(MIGRATING), I(REBOOTING), I(POWERING_UP), I(RESTORING_STATE), I(WAIT_FOR_LAUNCH). If VM is in I(PAUSED) or I(DOWN) state, we start the VM. Then we suspend the VM. When user specify I(absent) C(state), we forcibly stop the VM in any state and remove it.\nIf you update a VM parameter that requires a reboot, the oVirt engine always creates a new snapshot for the VM, and an Ansible playbook will report this as changed.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "affinity_group_mappings": {
          "aliases": [],
          "description": "Mapper which maps affinity name between VM's OVF and the destination affinity this VM should be registered to, relevant when C(state) is registered.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "affinity_label_mappings": {
          "aliases": [],
          "description": "Mapper which maps affinity label name between VM's OVF and the destination label this VM should be registered to, relevant when C(state) is registered.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "allow_partial_import": {
          "aliases": [],
          "description": "Boolean indication whether to allow partial registration of Virtual Machine when C(state) is registered.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ballooning_enabled": {
          "aliases": [],
          "description": "If I(true), use memory ballooning.\nMemory balloon is a guest device, which may be used to re-distribute / reclaim the host memory based on VM needs in a dynamic way. In this way it's possible to create memory over commitment states.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bios_type": {
          "aliases": [],
          "description": "Set bios type, necessary for some operating systems and secure boot.\nIf no value is passed, default value is set from cluster.\nNOTE - Supported since oVirt 4.3.",
          "type": "str",
          "required": false,
          "choices": [
            "i440fx_sea_bios",
            "q35_ovmf",
            "q35_sea_bios",
            "q35_secure_boot"
          ],
          "suboptions": {}
        },
        "boot_devices": {
          "aliases": [],
          "description": "List of boot devices which should be used to boot. For example C([ cdrom, hd ]).\nDefault value is set by oVirt/RHV engine.",
          "type": "list",
          "required": false,
          "choices": [
            "cdrom",
            "hd",
            "network"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "boot_menu": {
          "aliases": [],
          "description": "I(True) enable menu to select boot device, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cd_iso": {
          "aliases": [],
          "description": "ISO file from ISO storage domain which should be attached to Virtual Machine.\nIf you have multiple ISO disks with the same name use disk ID to specify which should be used or use C(storage_domain) to filter disks.\nIf you pass empty string the CD will be ejected from VM.\nIf used with C(state) I(running) or I(present) and VM is running the CD will be attached to VM.\nIf used with C(state) I(running) or I(present) and VM is down the CD will be attached to VM persistently.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clone": {
          "aliases": [],
          "description": "If I(yes) then the disks of the created virtual machine will be cloned and independent of the template.\nThis parameter is used only when C(state) is I(running) or I(present) and VM didn't exist before.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "clone_permissions": {
          "aliases": [],
          "description": "If I(yes) then the permissions of the template (only the direct ones, not the inherited ones) will be copied to the created virtual machine.\nThis parameter is used only when C(state) is I(running) or I(present) and VM didn't exist before.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cloud_init": {
          "aliases": [],
          "description": "Dictionary with values for Unix-like Virtual Machine initialization using cloud init.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "authorized_ssh_keys": {
              "aliases": [],
              "description": "Use this SSH keys to login to Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "custom_script": {
              "aliases": [],
              "description": "Cloud-init script which will be executed on Virtual Machine when deployed.\nThis is appended to the end of the cloud-init script generated by any other options.\nFor further information, refer to cloud-init User-Data documentation.",
              "required": false,
              "suboptions": {}
            },
            "dns_search": {
              "aliases": [],
              "description": "DNS search domains to be configured on Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "dns_servers": {
              "aliases": [],
              "description": "DNS servers to be configured on Virtual Machine, maximum of two, space-separated.",
              "required": false,
              "suboptions": {}
            },
            "host_name": {
              "aliases": [],
              "description": "Hostname to be set to Virtual Machine when deployed.",
              "required": false,
              "suboptions": {}
            },
            "nic_boot_protocol": {
              "aliases": [],
              "description": "Set boot protocol of the network interface of Virtual Machine.",
              "required": false,
              "choices": [
                "none",
                "dhcp",
                "static"
              ],
              "suboptions": {}
            },
            "nic_boot_protocol_v6": {
              "aliases": [],
              "description": "Set boot protocol of the network interface of Virtual Machine.",
              "required": false,
              "choices": [
                "none",
                "dhcp",
                "static"
              ],
              "suboptions": {}
            },
            "nic_gateway": {
              "aliases": [],
              "description": "If boot protocol is static, set this gateway to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_gateway_v6": {
              "aliases": [],
              "description": "If boot protocol is static, set this gateway to network interface of Virtual Machine.\nFor IPv6 addresses the value is an integer in the range of 0-128, which represents the subnet prefix.",
              "required": false,
              "suboptions": {}
            },
            "nic_ip_address": {
              "aliases": [],
              "description": "If boot protocol is static, set this IP address to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_ip_address_v6": {
              "aliases": [],
              "description": "If boot protocol is static, set this IP address to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_name": {
              "aliases": [],
              "description": "Set name to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_netmask": {
              "aliases": [],
              "description": "If boot protocol is static, set this netmask to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_netmask_v6": {
              "aliases": [],
              "description": "If boot protocol is static, set this netmask to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "regenerate_ssh_keys": {
              "aliases": [],
              "description": "If I(True) SSH keys will be regenerated on Virtual Machine.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "root_password": {
              "aliases": [],
              "description": "Password to be set for user specified by C(user_name) parameter.",
              "required": false,
              "suboptions": {}
            },
            "timezone": {
              "aliases": [],
              "description": "Timezone to be set to Virtual Machine when deployed.",
              "required": false,
              "suboptions": {}
            },
            "user_name": {
              "aliases": [],
              "description": "Username to be used to set password to Virtual Machine when deployed.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cloud_init_nics": {
          "aliases": [],
          "description": "List of dictionaries representing network interfaces to be setup by cloud init.\nThis option is used, when user needs to setup more network interfaces via cloud init.\nIf one network interface is enough, user should use C(cloud_init) I(nic_*) parameters. C(cloud_init) I(nic_*) parameters are merged with C(cloud_init_nics) parameters.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "nic_boot_protocol": {
              "aliases": [],
              "description": "Set boot protocol of the network interface of Virtual Machine. Can be one of C(none), C(dhcp) or C(static).",
              "required": false,
              "suboptions": {}
            },
            "nic_boot_protocol_v6": {
              "aliases": [],
              "description": "Set boot protocol of the network interface of Virtual Machine. Can be one of C(none), C(dhcp) or C(static).",
              "required": false,
              "suboptions": {}
            },
            "nic_gateway": {
              "aliases": [],
              "description": "If boot protocol is static, set this gateway to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_gateway_v6": {
              "aliases": [],
              "description": "If boot protocol is static, set this gateway to network interface of Virtual Machine.\nFor IPv6 addresses the value is an integer in the range of 0-128, which represents the subnet prefix.",
              "required": false,
              "suboptions": {}
            },
            "nic_ip_address": {
              "aliases": [],
              "description": "If boot protocol is static, set this IP address to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_ip_address_v6": {
              "aliases": [],
              "description": "If boot protocol is static, set this IP address to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_name": {
              "aliases": [],
              "description": "Set name to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_netmask": {
              "aliases": [],
              "description": "If boot protocol is static, set this netmask to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "nic_netmask_v6": {
              "aliases": [],
              "description": "If boot protocol is static, set this netmask to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cloud_init_persist": {
          "aliases": [
            "sysprep_persist"
          ],
          "description": "If I(yes) the C(cloud_init) or C(sysprep) parameters will be saved for the virtual machine and the virtual machine won't be started as run-once.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster, where Virtual Machine should be created.\nRequired if creating VM.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster_mappings": {
          "aliases": [],
          "description": "Mapper which maps cluster name between VM's OVF and the destination cluster this VM should be registered to, relevant when C(state) is registered. Cluster mapping is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "dest_name": {
              "aliases": [],
              "description": "The name of the destination cluster.",
              "required": false,
              "suboptions": {}
            },
            "source_name": {
              "aliases": [],
              "description": "The name of the source cluster.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "comment": {
          "aliases": [],
          "description": "Comment of the Virtual Machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_cores": {
          "aliases": [],
          "description": "Number of virtual CPUs cores of the Virtual Machine.\nDefault value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_mode": {
          "aliases": [],
          "description": "CPU mode of the virtual machine. It can be some of the following: I(host_passthrough), I(host_model) or I(custom).\nFor I(host_passthrough) CPU type you need to set C(placement_policy) to I(pinned).\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_pinning": {
          "aliases": [],
          "description": "CPU Pinning topology to map virtual machine CPU to host CPU.\nCPU Pinning topology is a list of dictionary which can have following values:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "cpu": {
              "aliases": [],
              "description": "Number of the host CPU.",
              "required": false,
              "suboptions": {}
            },
            "vcpu": {
              "aliases": [],
              "description": "Number of the virtual machine CPU.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cpu_shares": {
          "aliases": [],
          "description": "Set a CPU shares for this Virtual Machine.\nDefault value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_sockets": {
          "aliases": [],
          "description": "Number of virtual CPUs sockets of the Virtual Machine.\nDefault value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_threads": {
          "aliases": [],
          "description": "Number of threads per core of the Virtual Machine.\nDefault value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "custom_compatibility_version": {
          "aliases": [],
          "description": "Enables a virtual machine to be customized to its own compatibility version. If 'C(custom_compatibility_version)' is set, it overrides the cluster's compatibility version for this particular virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_emulated_machine": {
          "aliases": [],
          "description": "Sets the value of the custom_emulated_machine attribute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_properties": {
          "aliases": [],
          "description": "Properties sent to VDSM to configure various hooks.\nCustom properties is a list of dictionary which can have following values:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the custom property. For example: I(hugepages), I(vhost), I(sap_agent), etc.",
              "required": false,
              "suboptions": {}
            },
            "regexp": {
              "aliases": [],
              "description": "Regular expression to set for custom property.",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Value to set for custom property.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "delete_protected": {
          "aliases": [],
          "description": "If I(yes) Virtual Machine will be set as delete protected.\nIf I(no) Virtual Machine won't be set as delete protected.\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the Virtual Machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_format": {
          "aliases": [],
          "description": "Specify format of the disk.\nIf C(cow) format is used, disk will by created as sparse, so space will be allocated for the volume as needed, also known as I(thin provision).\nIf C(raw) format is used, disk storage will be allocated right away, also known as I(preallocated).\nNote that this option isn't idempotent as it's not currently possible to change format of the disk via API.\nThis parameter is considered only when C(template) and C(storage domain) is provided.",
          "default": "cow",
          "type": "str",
          "required": false,
          "choices": [
            "cow",
            "raw"
          ],
          "suboptions": {}
        },
        "disks": {
          "aliases": [],
          "description": "List of disks, which should be attached to Virtual Machine. Disk is described by following dictionary.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "activate": {
              "aliases": [],
              "description": "I(True) if the disk should be activated, default is activated.\nNOTE - This parameter is used only when C(state) is I(running) or I(present) and is able to only attach disks. To manage disks of the VM in more depth please use M(ovirt.ovirt.ovirt_disk) module instead.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "bootable": {
              "aliases": [],
              "description": "I(True) if the disk should be bootable, default is non bootable.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "ID of the disk. Either C(name) or C(id) is required.",
              "required": false,
              "suboptions": {}
            },
            "interface": {
              "aliases": [],
              "description": "Interface of the disk.",
              "default": "virtio",
              "required": false,
              "choices": [
                "virtio",
                "ide"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the disk. Either C(name) or C(id) is required.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "domain_mappings": {
          "aliases": [],
          "description": "Mapper which maps aaa domain name between VM's OVF and the destination aaa domain this VM should be registered to, relevant when C(state) is registered. The aaa domain mapping is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "dest_name": {
              "aliases": [],
              "description": "The name of the destination aaa domain.",
              "required": false,
              "suboptions": {}
            },
            "source_name": {
              "aliases": [],
              "description": "The name of the source aaa domain.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "exclusive": {
          "aliases": [],
          "description": "When C(state) is I(exported) this parameter indicates if the existing VM with the same name should be overwritten.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "export_domain": {
          "aliases": [],
          "description": "When C(state) is I(exported)this parameter specifies the name of the export storage domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "export_ova": {
          "aliases": [],
          "description": "Dictionary of values to be used to export VM as OVA.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "directory": {
              "aliases": [],
              "description": "The name of the directory where the OVA has to be exported.",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The name of the exported OVA file.",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "The name of the destination host where the OVA has to be exported.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Please check to I(Synopsis) to more detailed description of force parameter, it can behave differently in different situations.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_migrate": {
          "aliases": [],
          "description": "If I(true), the VM will migrate when I(placement_policy=user-migratable) but not when I(placement_policy=pinned).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "graphical_console": {
          "aliases": [],
          "description": "Assign graphical console to the virtual machine.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "disconnect_action": {
              "aliases": [],
              "description": "Returns the action that will take place when the graphic console(SPICE only) is disconnected. The options are:\nI(none) No action is taken.\nI(lock_screen) Locks the currently active user session.\nI(logout) Logs out the currently active user session.\nI(reboot) Initiates a graceful virtual machine reboot.\nI(shutdown) Initiates a graceful virtual machine shutdown.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "headless_mode": {
              "aliases": [],
              "description": "If I(true) disable the graphics console for this virtual machine.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "keyboard_layout": {
              "aliases": [],
              "description": "The keyboard layout to use with this graphic console.\nThis option is only available for the VNC console type.\nIf no keyboard is enabled then it won't be reported.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "monitors": {
              "aliases": [],
              "description": "The number of monitors opened for this graphic console.\nThis option is only available for the SPICE protocol.\nPossible values are 1, 2 or 4.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Graphical protocol, a list of I(spice), I(vnc), or both.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "high_availability": {
          "aliases": [],
          "description": "If I(yes) Virtual Machine will be set as highly available.\nIf I(no) Virtual Machine won't be set as highly available.\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "high_availability_priority": {
          "aliases": [],
          "description": "Indicates the priority of the virtual machine inside the run and migration queues. Virtual machines with higher priorities will be started and migrated before virtual machines with lower priorities. The value is an integer between 0 and 100. The higher the value, the higher the priority.\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Specify host where Virtual Machine should be running. By default the host is chosen by engine scheduler.\nThis parameter is used only when C(state) is I(running) or I(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_devices": {
          "aliases": [],
          "description": "Single Root I/O Virtualization - technology that allows single device to expose multiple endpoints that can be passed to VMs\nhost_devices is an list which contain dictionary with name and state of device",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the Virtual Machine to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "initrd_path": {
          "aliases": [],
          "description": "Path to an initial ramdisk to be used with the kernel specified by C(kernel_path) option.\nRamdisk image must be stored on either the ISO domain or on the host's storage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_type": {
          "aliases": [],
          "description": "Name of virtual machine's hardware configuration.\nBy default no instance type is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "io_threads": {
          "aliases": [],
          "description": "Number of IO threads used by virtual machine. I(0) means IO threading disabled.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "kernel_params": {
          "aliases": [],
          "description": "Kernel command line parameters (formatted as string) to be used with the kernel specified by C(kernel_path) option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kernel_params_persist": {
          "aliases": [],
          "description": "If I(true) C(kernel_params), C(initrd_path) and C(kernel_path) will persist in virtual machine configuration, if I(False) it will be used for run once.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "kernel_path": {
          "aliases": [],
          "description": "Path to a kernel image used to boot the virtual machine.\nKernel image must be stored on either the ISO domain or on the host's storage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kvm": {
          "aliases": [],
          "description": "Dictionary of values to be used to connect to kvm and import a virtual machine to oVirt.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "drivers_iso": {
              "aliases": [],
              "description": "The name of the ISO containing drivers that can be used during the I(virt-v2v) conversion process.",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the KVM virtual machine.",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password to authenticate against the KVM.",
              "required": false,
              "suboptions": {}
            },
            "sparse": {
              "aliases": [],
              "description": "Specifies the disk allocation policy of the resulting virtual machine. I(true) for sparse, I(false) for preallocated.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "storage_domain": {
              "aliases": [],
              "description": "Specifies the target storage domain for converted disks. This is required parameter.",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "The URL to be passed to the I(virt-v2v) tool for conversion.\nFor example I(qemu:///system). This is required parameter.",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username to authenticate against the KVM.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "lease": {
          "aliases": [],
          "description": "Name of the storage domain this virtual machine lease reside on. Pass an empty string to remove the lease.\nNOTE - Supported since oVirt 4.1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lun_mappings": {
          "aliases": [],
          "description": "Mapper which maps lun between VM's OVF and the destination lun this VM should contain, relevant when C(state) is registered. lun_mappings is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "logical_unit_address": {
              "aliases": [],
              "description": "The address of the block storage host.",
              "required": false,
              "suboptions": {}
            },
            "logical_unit_id": {
              "aliases": [],
              "description": "The logical unit number to identify a logical unit,",
              "required": false,
              "suboptions": {}
            },
            "logical_unit_password)": {
              "aliases": [],
              "description": "Password to be used to connect to the block storage host.",
              "required": false,
              "suboptions": {}
            },
            "logical_unit_port": {
              "aliases": [],
              "description": "The port being used to connect with the LUN disk.",
              "required": false,
              "suboptions": {}
            },
            "logical_unit_portal": {
              "aliases": [],
              "description": "The portal being used to connect with the LUN disk.",
              "required": false,
              "suboptions": {}
            },
            "logical_unit_target": {
              "aliases": [],
              "description": "The iSCSI specification located on an iSCSI server",
              "required": false,
              "suboptions": {}
            },
            "logical_unit_username": {
              "aliases": [],
              "description": "Username to be used to connect to the block storage host.",
              "required": false,
              "suboptions": {}
            },
            "storage_type": {
              "aliases": [],
              "description": "The storage type which the LUN reside on (iscsi or fcp)\"",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "memory": {
          "aliases": [],
          "description": "Amount of memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nDefault value is set by engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_guaranteed": {
          "aliases": [],
          "description": "Amount of minimal guaranteed memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nC(memory_guaranteed) parameter can't be lower than C(memory) parameter.\nDefault value is set by engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_max": {
          "aliases": [],
          "description": "Upper bound of virtual machine memory up to which memory hot-plug can be performed. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nDefault value is set by engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "migrate": {
          "aliases": [],
          "description": "If I(true), the VM will migrate to any available host.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Virtual Machine to manage.\nIf VM don't exists C(name) is required. Otherwise C(id) or C(name) can be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "next_run": {
          "aliases": [],
          "description": "If I(true), the update will not be applied to the VM immediately and will be only applied when virtual machine is restarted.\nNOTE - If there are multiple next run configuration changes on the VM, the first change may get reverted if this option is not passed.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "List of NICs, which should be attached to Virtual Machine. NIC is described by following dictionary.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "interface": {
              "aliases": [],
              "description": "Type of the network interface.",
              "default": "virtio",
              "required": false,
              "choices": [
                "virtio",
                "e1000",
                "rtl8139"
              ],
              "suboptions": {}
            },
            "mac_address": {
              "aliases": [],
              "description": "Custom MAC address of the network interface, by default it's obtained from MAC pool.\nNOTE - This parameter is used only when C(state) is I(running) or I(present) and is able to only create NICs. To manage NICs of the VM in more depth please use M(ovirt.ovirt.ovirt_nic) module instead.",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the NIC.",
              "required": false,
              "suboptions": {}
            },
            "profile_name": {
              "aliases": [],
              "description": "Profile name where NIC should be attached.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "numa_nodes": {
          "aliases": [],
          "description": "List of vNUMA Nodes to set for this VM and pin them to assigned host's physical NUMA node.\nEach vNUMA node is described by following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "cores": {
              "aliases": [],
              "description": "List of VM CPU cores indexes to be included in this NUMA node.",
              "type": "list",
              "required": true,
              "suboptions": {}
            },
            "index": {
              "aliases": [],
              "description": "The index of this NUMA node.",
              "required": true,
              "suboptions": {}
            },
            "memory": {
              "aliases": [],
              "description": "Memory size of the NUMA node in MiB.",
              "required": true,
              "suboptions": {}
            },
            "numa_node_pins": {
              "aliases": [],
              "description": "List of physical NUMA node indexes to pin this virtual NUMA node to.",
              "type": "list",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "numa_tune_mode": {
          "aliases": [],
          "description": "Set how the memory allocation for NUMA nodes of this VM is applied (relevant if NUMA nodes are set for this VM).\nIt can be one of the following: I(interleave), I(preferred) or I(strict).\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "str",
          "required": false,
          "choices": [
            "interleave",
            "preferred",
            "strict"
          ],
          "suboptions": {}
        },
        "operating_system": {
          "aliases": [],
          "description": "Operating system of the Virtual Machine, for example 'rhel_8x64'.\nDefault value is set by oVirt/RHV engine.\nUse the M(ovirt.ovirt.ovirt_vm_os_info) module to obtain the current list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "placement_policy": {
          "aliases": [],
          "description": "The configuration of the virtual machine's placement policy.\nIf no value is passed, default value is set by oVirt/RHV engine.\nPlacement policy can be one of the following values:",
          "type": "str",
          "required": false,
          "suboptions": {
            "migratable": {
              "aliases": [],
              "description": "Allow manual and automatic migration.",
              "required": false,
              "suboptions": {}
            },
            "pinned": {
              "aliases": [],
              "description": "Do not allow migration.",
              "required": false,
              "suboptions": {}
            },
            "user_migratable": {
              "aliases": [],
              "description": "Allow manual migration only.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "placement_policy_hosts": {
          "aliases": [],
          "description": "List of host names.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "quota_id": {
          "aliases": [],
          "description": "Virtual Machine quota ID to be used for disk. By default quota is chosen by oVirt/RHV engine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reassign_bad_macs": {
          "aliases": [],
          "description": "Boolean indication whether to reassign bad macs when C(state) is registered.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rng_device": {
          "aliases": [],
          "description": "Random number generator (RNG). You can choose of one the following devices I(urandom), I(random) or I(hwrng).\nIn order to select I(hwrng), you must have it enabled on cluster first.\n/dev/urandom is used for cluster version >= 4.1, and /dev/random for cluster version <= 4.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "role_mappings": {
          "aliases": [],
          "description": "Mapper which maps role name between VM's OVF and the destination role this VM should be registered to, relevant when C(state) is registered. Role mapping is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "dest_name": {
              "aliases": [],
              "description": "The name of the destination role.",
              "required": false,
              "suboptions": {}
            },
            "source_name": {
              "aliases": [],
              "description": "The name of the source role.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "serial_console": {
          "aliases": [],
          "description": "I(True) enable VirtIO serial console, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "serial_policy": {
          "aliases": [],
          "description": "Specify a serial number policy for the Virtual Machine.\nFollowing options are supported.\nC(vm) - Sets the Virtual Machine's UUID as its serial number.\nC(host) - Sets the host's UUID as the Virtual Machine's serial number.\nC(custom) - Allows you to specify a custom serial number in C(serial_policy_value).",
          "type": "str",
          "required": false,
          "choices": [
            "vm",
            "host",
            "custom"
          ],
          "suboptions": {}
        },
        "serial_policy_value": {
          "aliases": [],
          "description": "Allows you to specify a custom serial number.\nThis parameter is used only when C(serial_policy) is I(custom).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "smartcard_enabled": {
          "aliases": [],
          "description": "If I(true), use smart card authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "snapshot_name": {
          "aliases": [],
          "description": "Snapshot to clone VM from.\nSnapshot with description specified should exist.\nYou have to specify C(snapshot_vm) parameter with virtual machine name of this snapshot.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot_vm": {
          "aliases": [],
          "description": "Source VM to clone VM from.\nVM should have snapshot specified by C(snapshot).\nIf C(snapshot_name) specified C(snapshot_vm) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "soundcard_enabled": {
          "aliases": [],
          "description": "If I(true), the sound card is added to the virtual machine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sso": {
          "aliases": [],
          "description": "I(True) enable Single Sign On by Guest Agent, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the Virtual Machine be running/stopped/present/absent/suspended/next_run/registered/exported/reboot. When C(state) is I(registered) and the unregistered VM's name belongs to an already registered in engine VM in the same DC then we fail to register the unregistered template.\nI(present) state will create/update VM and don't change its state if it already exists.\nI(running) state will create/update VM and start it.\nI(next_run) state updates the VM and if the VM has next run configuration it will be rebooted.\nPlease check I(notes) to more detailed description of states.\nI(exported) state will export the VM to export domain or as OVA.\nI(registered) is supported since 2.4.\nI(reboot) is supported since 2.10, virtual machine is rebooted only if it's in up state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "next_run",
            "present",
            "registered",
            "running",
            "stopped",
            "suspended",
            "exported",
            "reboot"
          ],
          "suboptions": {}
        },
        "stateless": {
          "aliases": [],
          "description": "If I(yes) Virtual Machine will be set as stateless.\nIf I(no) Virtual Machine will be unset as stateless.\nIf no value is passed, default value is set by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "storage_domain": {
          "aliases": [],
          "description": "Name of the storage domain where all template disks should be created.\nThis parameter is considered only when C(template) is provided.\nIMPORTANT - This parameter is not idempotent, if the VM exists and you specify different storage domain, disk won't move.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sysprep": {
          "aliases": [],
          "description": "Dictionary with values for Windows Virtual Machine initialization using sysprep.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "active_directory_ou": {
              "aliases": [],
              "description": "Active Directory Organizational Unit, to be used for login of user.",
              "required": false,
              "suboptions": {}
            },
            "custom_script": {
              "aliases": [],
              "description": "A custom Sysprep definition in the format of a complete unattended installation answer file.",
              "required": false,
              "suboptions": {}
            },
            "domain": {
              "aliases": [],
              "description": "Domain to be set to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "host_name": {
              "aliases": [],
              "description": "Hostname to be set to Virtual Machine when deployed.",
              "required": false,
              "suboptions": {}
            },
            "input_locale": {
              "aliases": [],
              "description": "Input localization of the Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "org_name": {
              "aliases": [],
              "description": "Organization name to be set to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "root_password": {
              "aliases": [],
              "description": "Password to be set for username to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "system_locale": {
              "aliases": [],
              "description": "System localization of the Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "timezone": {
              "aliases": [],
              "description": "Timezone to be set to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "ui_language": {
              "aliases": [],
              "description": "UI language of the Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "user_name": {
              "aliases": [],
              "description": "Username to be used for set password to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "windows_license_key": {
              "aliases": [],
              "description": "License key to be set to Windows Virtual Machine.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "template": {
          "aliases": [],
          "description": "Name of the template, which should be used to create Virtual Machine.\nRequired if creating VM.\nIf template is not specified and VM doesn't exist, VM will be created from I(Blank) template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template_version": {
          "aliases": [],
          "description": "Version number of the template to be used for VM.\nBy default the latest available version of the template is used.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ticket": {
          "aliases": [],
          "description": "If I(true), in addition return I(remote_vv_file) inside I(vm) dictionary, which contains compatible content for remote-viewer application. Works only C(state) is I(running).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timezone": {
          "aliases": [],
          "description": "Sets time zone offset of the guest hardware clock.\nFor example C(Etc/GMT)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of the Virtual Machine.\nDefault value is set by oVirt/RHV engine.\nI(high_performance) is supported since Ansible 2.5 and oVirt/RHV 4.2.",
          "type": "str",
          "required": false,
          "choices": [
            "desktop",
            "server",
            "high_performance"
          ],
          "suboptions": {}
        },
        "usb_support": {
          "aliases": [],
          "description": "I(True) enable USB support, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_latest_template_version": {
          "aliases": [],
          "description": "Specify if latest template version should be used, when running a stateless VM.\nIf this parameter is set to I(yes) stateless VM is created.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmware": {
          "aliases": [],
          "description": "Dictionary of values to be used to connect to VMware and import a virtual machine to oVirt.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "drivers_iso": {
              "aliases": [],
              "description": "The name of the ISO containing drivers that can be used during the I(virt-v2v) conversion process.",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password to authenticate against the VMware.",
              "required": false,
              "suboptions": {}
            },
            "sparse": {
              "aliases": [],
              "description": "Specifies the disk allocation policy of the resulting virtual machine. I(true) for sparse, I(false) for preallocated.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "storage_domain": {
              "aliases": [],
              "description": "Specifies the target storage domain for converted disks. This is required parameter.",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "The URL to be passed to the I(virt-v2v) tool for conversion.\nFor example I(vpx://wmware_user@vcenter-host/DataCenter/Cluster/esxi-host?no_verify=1)",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The username to authenticate against the VMware.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "vnic_profile_mappings": {
          "aliases": [],
          "description": "Mapper which maps an external virtual NIC profile to one that exists in the engine when C(state) is registered. vnic_profile is described by the following dictionary:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "source_network_name": {
              "aliases": [],
              "description": "The network name of the source network.",
              "required": false,
              "suboptions": {}
            },
            "source_profile_name": {
              "aliases": [],
              "description": "The profile name related to the source network.",
              "required": false,
              "suboptions": {}
            },
            "target_profile_id": {
              "aliases": [],
              "description": "The id of the target profile id to be mapped to in the engine.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "watchdog": {
          "aliases": [],
          "description": "Assign watchdog device for the virtual machine.\nWatchdogs is a dictionary which can have following values:",
          "type": "dict",
          "required": false,
          "suboptions": {
            "action": {
              "aliases": [],
              "description": "Watchdog action to be performed when watchdog is triggered. For example: I(none), I(reset), I(poweroff), I(pause) or I(dump).",
              "required": false,
              "suboptions": {}
            },
            "model": {
              "aliases": [],
              "description": "Model of the watchdog device. For example: I(i6300esb), I(diag288) or I(null).",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "xen": {
          "aliases": [],
          "description": "Dictionary of values to be used to connect to XEN and import a virtual machine to oVirt.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "drivers_iso": {
              "aliases": [],
              "description": "The name of the ISO containing drivers that can be used during the I(virt-v2v) conversion process.",
              "required": false,
              "suboptions": {}
            },
            "sparse": {
              "aliases": [],
              "description": "Specifies the disk allocation policy of the resulting virtual machine. I(true) for sparse, I(false) for preallocated.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "storage_domain": {
              "aliases": [],
              "description": "Specifies the target storage domain for converted disks. This is required parameter.",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "The URL to be passed to the I(virt-v2v) tool for conversion.\nFor example I(xen+ssh://root@zen.server). This is required parameter.",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage Virtual Machines in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n- name: Creates a new Virtual Machine from template named 'rhel7_template'\n  ovirt.ovirt.ovirt_vm:\n    state: present\n    name: myvm\n    template: rhel7_template\n    cluster: mycluster\n\n- name: Register VM\n  ovirt.ovirt.ovirt_vm:\n    state: registered\n    storage_domain: mystorage\n    cluster: mycluster\n    name: myvm\n\n- name: Register VM using id\n  ovirt.ovirt.ovirt_vm:\n    state: registered\n    storage_domain: mystorage\n    cluster: mycluster\n    id: 1111-1111-1111-1111\n\n- name: Register VM, allowing partial import\n  ovirt.ovirt.ovirt_vm:\n    state: registered\n    storage_domain: mystorage\n    allow_partial_import: \"True\"\n    cluster: mycluster\n    id: 1111-1111-1111-1111\n\n- name: Register VM with vnic profile mappings and reassign bad macs\n  ovirt.ovirt.ovirt_vm:\n    state: registered\n    storage_domain: mystorage\n    cluster: mycluster\n    id: 1111-1111-1111-1111\n    vnic_profile_mappings:\n    - source_network_name: mynetwork\n      source_profile_name: mynetwork\n      target_profile_id: 3333-3333-3333-3333\n    - source_network_name: mynetwork2\n      source_profile_name: mynetwork2\n      target_profile_id: 4444-4444-4444-4444\n    reassign_bad_macs: \"True\"\n\n- name: Register VM with mappings\n  ovirt.ovirt.ovirt_vm:\n    state: registered\n    storage_domain: mystorage\n    cluster: mycluster\n    id: 1111-1111-1111-1111\n    role_mappings:\n      - source_name: Role_A\n        dest_name: Role_B\n    domain_mappings:\n      - source_name: Domain_A\n        dest_name: Domain_B\n    lun_mappings:\n      - source_storage_type: iscsi\n        source_logical_unit_id: 1IET_000d0001\n        source_logical_unit_port: 3260\n        source_logical_unit_portal: 1\n        source_logical_unit_address: 10.34.63.203\n        source_logical_unit_target: iqn.2016-08-09.brq.str-01:omachace\n        dest_storage_type: iscsi\n        dest_logical_unit_id: 1IET_000d0002\n        dest_logical_unit_port: 3260\n        dest_logical_unit_portal: 1\n        dest_logical_unit_address: 10.34.63.204\n        dest_logical_unit_target: iqn.2016-08-09.brq.str-02:omachace\n    affinity_group_mappings:\n      - source_name: Affinity_A\n        dest_name: Affinity_B\n    affinity_label_mappings:\n      - source_name: Label_A\n        dest_name: Label_B\n    cluster_mappings:\n      - source_name: cluster_A\n        dest_name: cluster_B\n\n- name: Creates a stateless VM which will always use latest template version\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    template: rhel7\n    cluster: mycluster\n    use_latest_template_version: true\n\n# Creates a new server rhel7 Virtual Machine from Blank template\n# on brq01 cluster with 2GiB memory and 2 vcpu cores/sockets\n# and attach bootable disk with name rhel7_disk and attach virtio NIC\n- ovirt.ovirt.ovirt_vm:\n    state: present\n    cluster: brq01\n    name: myvm\n    memory: 2GiB\n    cpu_cores: 2\n    cpu_sockets: 2\n    cpu_shares: 1024\n    type: server\n    operating_system: rhel_7x64\n    disks:\n      - name: rhel7_disk\n        bootable: True\n    nics:\n      - name: nic1\n\n# Change VM Name\n- ovirt.ovirt.ovirt_vm:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_vm_name\"\n\n- name: Run VM with cloud init\n  ovirt.ovirt.ovirt_vm:\n    name: rhel7\n    template: rhel7\n    cluster: Default\n    memory: 1GiB\n    high_availability: true\n    high_availability_priority: 50  # Available from Ansible 2.5\n    cloud_init:\n      dns_servers: '8.8.8.8 8.8.4.4'\n      nic_boot_protocol: static\n      nic_ip_address: 10.34.60.86\n      nic_netmask: 255.255.252.0\n      nic_gateway: 10.34.63.254\n      nic_name: eth1\n      host_name: example.com\n      custom_script: |\n        write_files:\n         - content: |\n             Hello, world!\n           path: /tmp/greeting.txt\n           permissions: '0644'\n      user_name: root\n      root_password: super_password\n\n- name: Run VM with cloud init, with multiple network interfaces\n  ovirt.ovirt.ovirt_vm:\n    name: rhel7_4\n    template: rhel7\n    cluster: mycluster\n    cloud_init_nics:\n    - nic_name: eth0\n      nic_boot_protocol: dhcp\n    - nic_name: eth1\n      nic_boot_protocol: static\n      nic_ip_address: 10.34.60.86\n      nic_netmask: 255.255.252.0\n      nic_gateway: 10.34.63.254\n    # IP version 6 parameters are supported since ansible 2.9\n    - nic_name: eth2\n      nic_boot_protocol_v6: static\n      nic_ip_address_v6: '2620:52:0:2282:b898:1f69:6512:36c5'\n      nic_gateway_v6: '2620:52:0:2282:b898:1f69:6512:36c9'\n      nic_netmask_v6: '120'\n    - nic_name: eth3\n      nic_boot_protocol_v6: dhcp\n\n- name: Run VM with sysprep\n  ovirt.ovirt.ovirt_vm:\n    name: windows2012R2_AD\n    template: windows2012R2\n    cluster: Default\n    memory: 3GiB\n    high_availability: true\n    sysprep:\n      host_name: windowsad.example.com\n      user_name: Administrator\n      root_password: SuperPassword123\n\n- name: Migrate/Run VM to/on host named 'host1'\n  ovirt.ovirt.ovirt_vm:\n    state: running\n    name: myvm\n    host: host1\n\n- name: Migrate/Run VM to/on host named 'host1' on cluster 'cluster1'\n  ovirt.ovirt.ovirt_vm:\n    state: running\n    name: myvm\n    host: host1\n    cluster: cluster1\n\n- name: Migrate VM to any available host\n  ovirt.ovirt.ovirt_vm:\n    state: running\n    name: myvm\n    migrate: true\n\n- name: Change VMs CD\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    cd_iso: drivers.iso\n\n- name: Eject VMs CD\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    cd_iso: ''\n\n- name: Boot VM from CD\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    cd_iso: centos7_x64.iso\n    boot_devices:\n        - cdrom\n\n- name: Stop vm\n  ovirt.ovirt.ovirt_vm:\n    state: stopped\n    name: myvm\n\n- name: Upgrade memory to already created VM\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    memory: 4GiB\n\n- name: Hot plug memory to already created and running VM (VM won't be restarted)\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    memory: 4GiB\n\n# Create/update a VM to run with two vNUMA nodes and pin them to physical NUMA nodes as follows:\n# vnuma index 0-> numa index 0, vnuma index 1-> numa index 1\n- name: Create a VM to run with two vNUMA nodes\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    cluster: mycluster\n    numa_tune_mode: \"interleave\"\n    numa_nodes:\n    - index: 0\n      cores: [0]\n      memory: 20\n      numa_node_pins: [0]\n    - index: 1\n      cores: [1]\n      memory: 30\n      numa_node_pins: [1]\n\n- name: Update an existing VM to run without previously created vNUMA nodes (i.e. remove all vNUMA nodes+NUMA pinning setting)\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    cluster: mycluster\n    state: \"present\"\n    numa_tune_mode: \"interleave\"\n    numa_nodes:\n    - index: -1\n\n# When change on the VM needs restart of the VM, use next_run state,\n# The VM will be updated and rebooted if there are any changes.\n# If present state would be used, VM won't be restarted.\n- ovirt.ovirt.ovirt_vm:\n    state: next_run\n    name: myvm\n    boot_devices:\n      - network\n\n- name: Import virtual machine from VMware\n  ovirt.ovirt.ovirt_vm:\n    state: stopped\n    cluster: mycluster\n    name: vmware_win10\n    timeout: 1800\n    poll_interval: 30\n    vmware:\n      url: vpx://user@1.2.3.4/Folder1/Cluster1/2.3.4.5?no_verify=1\n      name: windows10\n      storage_domain: mynfs\n      username: user\n      password: password\n\n- name: Create vm from template and create all disks on specific storage domain\n  ovirt.ovirt.ovirt_vm:\n    name: vm_test\n    cluster: mycluster\n    template: mytemplate\n    storage_domain: mynfs\n    nics:\n    - name: nic1\n\n- name: Remove VM, if VM is running it will be stopped\n  ovirt.ovirt.ovirt_vm:\n    state: absent\n    name: myvm\n\n# Defining a specific quota for a VM:\n# Since Ansible 2.5\n- ovirt.ovirt.ovirt_quotas_info:\n    data_center: Default\n    name: myquota\n  register: ovirt_quotas\n- ovirt.ovirt.ovirt_vm:\n    name: myvm\n    sso: False\n    boot_menu: True\n    bios_type: q35_ovmf\n    usb_support: True\n    serial_console: True\n    quota_id: \"{{ ovirt_quotas[0]['id'] }}\"\n\n- name: Create a VM that has the console configured for both Spice and VNC\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    template: mytemplate\n    cluster: mycluster\n    graphical_console:\n      protocol:\n        - spice\n        - vnc\n\n# Execute remote viewer to VM\n- block:\n  - name: Create a ticket for console for a running VM\n    ovirt.ovirt.ovirt_vm:\n      name: myvm\n      ticket: true\n      state: running\n    register: myvm\n\n  - name: Save ticket to file\n    ansible.builtin.copy:\n      content: \"{{ myvm.vm.remote_vv_file }}\"\n      dest: ~/vvfile.vv\n\n  - name: Run remote viewer with file\n    ansible.builtin.command: remote-viewer ~/vvfile.vv\n\n# Default value of host_device state is present\n- name: Attach host devices to virtual machine\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    host: myhost\n    placement_policy: pinned\n    host_devices:\n      - name: pci_0000_00_06_0\n      - name: pci_0000_00_07_0\n        state: absent\n      - name: pci_0000_00_08_0\n        state: present\n\n- name: Add placement policy with multiple hosts\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    placement_policy: migratable\n    placement_policy_hosts:\n      - host1\n      - host2\n\n- name: Export the VM as OVA\n  ovirt.ovirt.ovirt_vm:\n    name: myvm\n    state: exported\n    cluster: mycluster\n    export_ova:\n        host: myhost\n        filename: myvm.ova\n        directory: /tmp/\n\n- name: Clone VM from snapshot\n  ovirt.ovirt.ovirt_vm:\n    snapshot_vm: myvm\n    snapshot_name: myvm_snap\n    name: myvm_clone\n    state: present\n\n- name: Import external ova VM\n  ovirt.ovirt.ovirt_vm:\n    cluster: mycluster\n    name: myvm\n    host: myhost\n    timeout: 1800\n    poll_interval: 30\n    kvm:\n      name: myvm\n      url: ova:///path/myvm.ova\n      storage_domain: mystorage\n\n- name: Cpu pinning of 0#12_1#13_2#14_3#15\n  ovirt.ovirt.ovirt_vm:\n    state: present\n    cluster: mycluster\n    name: myvm\n    cpu_pinning:\n      - cpu: 12\n        vcpu: 0\n      - cpu: 13\n        vcpu: 1\n      - cpu: 14\n        vcpu: 2\n      - cpu: 15\n        vcpu: 3\n"
  },
  "ovirt.ovirt.ovirt_vm_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV virtual machines.\nThis module was called C(ovirt_vm_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_vm_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_vms), which contains a list of virtual machines. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "all_content": {
          "aliases": [],
          "description": "If I(true) all the attributes of the virtual machines should be included in the response.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "case_sensitive": {
          "aliases": [],
          "description": "If I(true) performed search will take case into account.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "current_cd": {
          "aliases": [],
          "description": "If I(true) it will get from all virtual machines current attached cd.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "max": {
          "aliases": [],
          "description": "The maximum number of results to return.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "next_run": {
          "aliases": [],
          "description": "Indicates if the returned result describes the virtual machine as it is currently running or if describes the virtual machine with the modifications that have already been performed but that will only come into effect when the virtual machine is restarted. By default the value is set by engine.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search VM X from cluster Y use following pattern: name=X and cluster=Y",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV virtual machines",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all VMs which names start with C(centos) and\n# belong to cluster C(west):\n- ovirt.ovirt.ovirt_vm_info:\n    pattern: name=centos* and cluster=west\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_vms }}\"\n\n# Gather info about next run configuration of virtual machine named myvm\n- ovirt.ovirt.ovirt_vm_info:\n    pattern: name=myvm\n    next_run: true\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_vms[0] }}\"\n\n# Gather info about VMs original template with follow parameter\n- ovirt.ovirt.ovirt_vm_info:\n    pattern: name=myvm\n    follow: ['original_template.permissions', 'original_template.nics.vnic_profile']\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_vms[0] }}\"\n"
  },
  "ovirt.ovirt.ovirt_vm_os_info": {
    "doc": {
      "description": "Retrieve information on all supported oVirt/RHV operating systems.",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_operating_systems), which contains a list of operating systems. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "filter_keys": {
          "aliases": [],
          "description": "List of attributes which should be in returned.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the operating system which should be returned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information on all supported oVirt/RHV operating systems",
      "version_added": "1.1.0"
    },
    "examples": "\n# Look at ovirt_auth module to see how to reuse authentication:\n\n- ovirt.ovirt.ovirt_vm_os_info:\n    auth: \"{{ ovirt_auth }}\"\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_operating_systems }}\"\n\n- ovirt.ovirt.ovirt_vm_os_info:\n    auth: \"{{ ovirt_auth }}\"\n    filter_keys: name,architecture\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_operating_systems }}\"\n"
  },
  "ovirt.ovirt.ovirt_vmpool": {
    "doc": {
      "description": "Module to manage VM pools in oVirt/RHV.",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster, where VM pool should be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Comment of the Virtual Machine pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the VM pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the vmpool to manage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM pool to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "prestarted": {
          "aliases": [],
          "description": "Number of pre-started VMs defines the number of VMs in run state, that are waiting to be attached to Users.\nDefault value is set by engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the VM pool be present/absent.\nNote that when C(state) is I(absent) all VMs in VM pool are stopped and removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Name of the template, which will be used to create VM pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of the VM pool. Either manual or automatic.\nC(manual) - The administrator is responsible for explicitly returning the virtual machine to the pool. The virtual machine reverts to the original base image after the administrator returns it to the pool.\nC(Automatic) - When the virtual machine is shut down, it automatically reverts to its base image and is returned to the virtual machine pool.\nDefault value is set by engine.",
          "type": "str",
          "required": false,
          "choices": [
            "manual",
            "automatic"
          ],
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "For creating vm pool without editing template.\nNote: You can use C(vm) only for creating vm pool.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "cloud_init": {
              "aliases": [],
              "description": "Dictionary with values for Unix-like Virtual Machine initialization using cloud init.\nC(host_name) - Hostname to be set to Virtual Machine when deployed.\nC(timezone) - Timezone to be set to Virtual Machine when deployed.\nC(user_name) - Username to be used to set password to Virtual Machine when deployed.\nC(root_password) - Password to be set for user specified by C(user_name) parameter.\nC(authorized_ssh_keys) - Use this SSH keys to login to Virtual Machine.\nC(regenerate_ssh_keys) - If I(True) SSH keys will be regenerated on Virtual Machine.\nC(custom_script) - Cloud-init script which will be executed on Virtual Machine when deployed.  This is appended to the end of the cloud-init script generated by any other options. For further information, refer to cloud-init User-Data documentation.\nC(dns_servers) - DNS servers to be configured on Virtual Machine, maximum of two, space-separated.\nC(dns_search) - DNS search domains to be configured on Virtual Machine.\nC(nic_boot_protocol) - Set boot protocol of the network interface of Virtual Machine. Can be one of C(none), C(dhcp) or C(static).\nC(nic_ip_address) - If boot protocol is static, set this IP address to network interface of Virtual Machine.\nC(nic_netmask) - If boot protocol is static, set this netmask to network interface of Virtual Machine.\nC(nic_gateway) - If boot protocol is static, set this gateway to network interface of Virtual Machine.\nC(nic_name) - Set name to network interface of Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "comment": {
              "aliases": [],
              "description": "Comment of the Virtual Machine.",
              "required": false,
              "suboptions": {}
            },
            "memory": {
              "aliases": [],
              "description": "Amount of memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nDefault value is set by engine.",
              "required": false,
              "suboptions": {}
            },
            "memory_guaranteed": {
              "aliases": [],
              "description": "Amount of minimal guaranteed memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nC(memory_guaranteed) parameter can't be lower than C(memory) parameter.\nDefault value is set by engine.",
              "required": false,
              "suboptions": {}
            },
            "memory_max": {
              "aliases": [],
              "description": "Upper bound of virtual machine memory up to which memory hot-plug can be performed. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).\nDefault value is set by engine.",
              "required": false,
              "suboptions": {}
            },
            "nics": {
              "aliases": [],
              "description": "List of NICs, which should be attached to Virtual Machine. NIC is described by following dictionary.\nC(name) - Name of the NIC.\nC(profile_name) - Profile name where NIC should be attached.\nC(interface) -  Type of the network interface. One of following I(virtio), I(e1000), I(rtl8139), default is I(virtio).\nC(mac_address) - Custom MAC address of the network interface, by default it's obtained from MAC pool.\nNOTE - This parameter is used only when C(state) is I(running) or I(present) and is able to only create NICs.\nTo manage NICs of the VM in more depth please use M(ovirt.ovirt.ovirt_nics) module instead.",
              "required": false,
              "suboptions": {}
            },
            "smartcard_enabled": {
              "aliases": [],
              "description": "If I(true), use smart card authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "sso": {
              "aliases": [],
              "description": "I(True) enable Single Sign On by Guest Agent, I(False) to disable it. By default is chosen by oVirt/RHV engine.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "timezone": {
              "aliases": [],
              "description": "Sets time zone offset of the guest hardware clock.\nFor example C(Etc/GMT)",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "vm_count": {
          "aliases": [],
          "description": "Number of VMs in the pool.\nDefault value is set by engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vm_per_user": {
          "aliases": [],
          "description": "Maximum number of VMs a single user can attach to from this pool.\nDefault value is set by engine.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage VM pools in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n- name: Create VM pool from template\n  ovirt.ovirt.ovirt_vmpool:\n    cluster: mycluster\n    name: myvmpool\n    template: rhel7\n    vm_count: 2\n    prestarted: 2\n    vm_per_user: 1\n\n- name: Remove vmpool, note that all VMs in pool will be stopped and removed\n  ovirt.ovirt.ovirt_vmpool:\n    state: absent\n    name: myvmpool\n\n- name: Change Pool Name\n  ovirt.ovirt.ovirt_vmpool:\n    id: 00000000-0000-0000-0000-000000000000\n    name: \"new_pool_name\"\n\n- name: Create vm pool and override the pool values\n  ovirt.ovirt.ovirt_vmpool:\n    cluster: mycluster\n    name: vmpool\n    template: blank\n    vm_count: 2\n    prestarted: 1\n    vm_per_user: 1\n    vm:\n      memory: 4GiB\n      memory_guaranteed: 4GiB\n      memory_max: 10GiB\n      comment: vncomment\n      cloud_init:\n        nic_boot_protocol: static\n        nic_ip_address: 10.34.60.86\n        nic_netmask: 255.255.252.0\n        nic_gateway: 10.34.63.254\n        nic_name: eth1\n        host_name: example.com\n        custom_script: |\n          write_files:\n           - content: |\n               Hello, world!\n             path: /tmp/greeting.txt\n             permissions: '0644'\n        user_name: root\n        root_password: super_password\n      nics:\n        - name: nicname\n          interface: virtio\n          profile_name: network\n\n"
  },
  "ovirt.ovirt.ovirt_vmpool_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV vmpools.\nThis module was called C(ovirt_vmpool_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt.ovirt.ovirt_vmpool_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_vmpools), which contains a list of vmpools. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pattern": {
          "aliases": [],
          "description": "Search term which is accepted by oVirt/RHV search backend.\nFor example to search vmpool X: name=X",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV vmpools",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information about all vm pools which names start with C(centos):\n- ovirt.ovirt.ovirt_vmpool_info:\n    pattern: name=centos*\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_vm_pools }}\"\n"
  },
  "ovirt.ovirt.ovirt_vnic_profile": {
    "doc": {
      "description": "Module to manage vNIC profile of network in oVirt/RHV",
      "has_action": false,
      "notes": "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "custom_properties": {
          "aliases": [],
          "description": "Custom properties applied to the vNIC profile.\nCustom properties is a list of dictionary which can have following values:",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the custom property. For example: I(hugepages), I(vhost), I(sap_agent), etc.",
              "required": false,
              "suboptions": {}
            },
            "regexp": {
              "aliases": [],
              "description": "Regular expression to set for custom property.",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Value to set for custom property.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "data_center": {
          "aliases": [],
          "description": "Datacenter name where network reside.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A human-readable description in plain text.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(True) the module will fetch additional data from the API.\nIt will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "migratable": {
          "aliases": [],
          "description": "Marks whether pass_through NIC is migratable or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A human-readable name in plain text.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Name of network to which is vNIC attached.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_filter": {
          "aliases": [],
          "description": "The network filter enables to filter packets send to/from the VM's nic according to defined rules.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pass_through": {
          "aliases": [],
          "description": "Enables passthrough to an SR-IOV-enabled host NIC.\nWhen enabled C(qos) and  C(network_filter) are automatically set to None and C(port_mirroring) to False.\nWhen enabled and C(migratable) not specified then C(migratable) is enabled.\nPort mirroring, QoS and network filters are not supported on passthrough profiles.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        },
        "poll_interval": {
          "aliases": [],
          "description": "Number of the seconds the module waits until another poll request on entity status is sent.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port_mirroring": {
          "aliases": [],
          "description": "Enables port mirroring.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "qos": {
          "aliases": [],
          "description": "Quality of Service attributes regulate inbound and outbound network traffic of the NIC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the vNIC be absent/present.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the instance to get into desired state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "C(yes) if the module should wait for the entity to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Module to manage vNIC profile of network in oVirt/RHV",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n- name: Add vNIC\n  ovirt.ovirt.ovirt_vnic_profile:\n    name: myvnic\n    network: mynetwork\n    state: present\n    data_center: datacenter\n\n- name: Editing vNICs network_filter, custom_properties, qos\n  ovirt.ovirt.ovirt_vnic_profile:\n    name: myvnic\n    network: mynetwork\n    data_center: datacenter\n    qos: myqos\n    custom_properties:\n      - name: SecurityGroups\n        value: 9bd9bde9-39da-44a8-9541-aa39e1a81c9d\n    network_filter: allow-dhcp\n\n- name: Remove vNICs network_filter, custom_properties, qos\n  ovirt.ovirt.ovirt_vnic_profile:\n    name: myvnic\n    network: mynetwork\n    data_center: datacenter\n    qos: \"\"\n    custom_properties: \"\"\n    network_filter: \"\"\n\n- name: Dont use migratable\n  ovirt.ovirt.ovirt_vnic_profile:\n    name: myvnic\n    network: mynetwork\n    data_center: datacenter\n    migratable: False\n    pass_through: enabled\n\n- name: Remove vNIC\n  ovirt.ovirt.ovirt_vnic_profile:\n    name: myvnic\n    network: mynetwork\n    state: absent\n    data_center: datacenter\n"
  },
  "ovirt.ovirt.ovirt_vnic_profile_info": {
    "doc": {
      "description": "Retrieve information about one or more oVirt/RHV vnic profiles.",
      "has_action": false,
      "notes": "This module returns a variable C(ovirt_vnic_profiles), which contains a list of vnic profiles. You need to register the result with the I(register) keyword to use it.\nIn order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: pip: name=ovirt-engine-sdk-python version=4.4.0",
      "options": {
        "auth": {
          "aliases": [],
          "description": "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
          "type": "dict",
          "required": true,
          "suboptions": {
            "ca_file": {
              "aliases": [],
              "description": "A PEM file containing the trusted CA certificates.\nThe certificate presented by the server will be verified using these CA certificates.\nIf C(ca_file) parameter is not set, system wide CA certificate store is used.\nDefault value is set by C(OVIRT_CAFILE) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "compress": {
              "aliases": [],
              "description": "Flag indicating if compression is used for connection.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "headers": {
              "aliases": [],
              "description": "Dictionary of HTTP headers to be added to each API call.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "A string containing the hostname of the server, usually something like `I(server.example.com)`.\nDefault value is set by C(OVIRT_HOSTNAME) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "insecure": {
              "aliases": [],
              "description": "A boolean flag that indicates if the server TLS certificate and host name should be checked.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "kerberos": {
              "aliases": [],
              "description": "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "The password of the user.\nDefault value is set by C(OVIRT_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Number of seconds to wait for response.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "token": {
              "aliases": [],
              "description": "Token to be used instead of login with username/password.\nDefault value is set by C(OVIRT_TOKEN) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.\nDefault value is set by C(OVIRT_URL) environment variable.\nEither C(url) or C(hostname) is required.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "The name of the user, something like I(admin@internal).\nDefault value is set by C(OVIRT_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch_nested": {
          "aliases": [],
          "description": "If I(yes) the module will fetch additional data from the API.\nIt will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes).\nThis parameter is deprecated and replaced by C(follows).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "follow": {
          "aliases": [
            "follows"
          ],
          "description": "List of linked entities, which should be fetched along with the main entity.\nThis parameter replaces usage of C(fetch_nested) and C(nested_attributes).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "max": {
          "aliases": [],
          "description": "The maximum number of results to return.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of vnic profile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nested_attributes": {
          "aliases": [],
          "description": "Specifies list of the attributes which should be fetched from the API.\nThis parameter apply only when C(fetch_nested) is I(true).\nThis parameter is deprecated and replaced by C(follows).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "ovirt-engine-sdk-python >= 4.4.0"
      ],
      "short_description": "Retrieve information about one or more oVirt/RHV vnic profiles",
      "version_added": "1.0.0"
    },
    "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather information 10 vnic profiles\n- ovirt.ovirt.ovirt_vnic_profile_info:\n    max: 10\n  register: result\n- ansible.builtin.debug:\n    msg: \"{{ result.ovirt_vnic_profiles }}\"\n"
  }
}