{
  "cyberark.pas.cyberark_account": {
    "doc": {
      "description": "Creates a URI for adding, deleting, modifying a privileged credential within the Cyberark Vault.  The request uses the Privileged Account Security Web Services SDK.",
      "has_action": false,
      "options": {
        "address": {
          "aliases": [],
          "description": "The address of the endpoint where the privileged account is located.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_base_url": {
          "aliases": [],
          "description": "A string containing the base URL of the server hosting CyberArk's Privileged Account Security Web Services SDK.\nExample U(https://<IIS_Server_Ip>/PasswordVault/api/)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "cyberark_session": {
          "aliases": [],
          "description": "Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session, please see M(cyberark_authentication) module for an example of cyberark_session.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "identified_by": {
          "aliases": [],
          "description": "When an API call is made to Get Accounts, often times the default parameters passed will identify more than one account. This parameter is used to confidently identify a single account when the default query can return multiple results.",
          "default": "username,address,platform_id",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "logging_file": {
          "aliases": [],
          "description": "Setting the log file name and location for troubleshooting logs.",
          "default": "/tmp/ansible_cyberark.log",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "logging_level": {
          "aliases": [],
          "description": "Parameter used to define the level of troubleshooting output to the C(logging_file) value.",
          "type": "str",
          "required": true,
          "choices": [
            "NOTSET",
            "DEBUG",
            "INFO"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The ObjectID of the account",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_secret": {
          "aliases": [],
          "description": "The new secret/password to be stored in CyberArk Vault.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "platform_account_properties": {
          "aliases": [],
          "description": "Object containing key-value pairs to associate with the account, as defined by the account platform. These properties are validated against the mandatory and optional properties of the specified platform's definition. Optional properties that do not exist on the account will not be returned here. Internal properties are not returned.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "KEY": {
              "aliases": [
                "Port",
                "ExtrPass1Name",
                "database"
              ],
              "description": "Freeform key value associated to the mandatory or optional property assigned to the specified Platform's definition.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "platform_id": {
          "aliases": [],
          "description": "The PolicyID of the Platform that is to be managing the account",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_machines_access": {
          "aliases": [],
          "description": "Set of parameters for defining PSM endpoint access targets.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "access_restricted_to_remote_machines": {
              "aliases": [],
              "description": "Whether or not to restrict access only to specified remote machines.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "remote_machines": {
              "aliases": [],
              "description": "List of targets allowed for this account.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "safe": {
          "aliases": [],
          "description": "The safe in the Vault where the privileged account is to be located.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "secret": {
          "aliases": [],
          "description": "The initial password for the creation of the account",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secret_management": {
          "aliases": [],
          "description": "Set of parameters associated with the management of the credential.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "automatic_management_enabled": {
              "aliases": [],
              "description": "Parameter that indicates whether the CPM will manage the password or not.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "management_action": {
              "aliases": [],
              "description": "CPM action flag to be placed on the account object for credential rotation.",
              "type": "str",
              "required": false,
              "choices": [
                "change",
                "change_immediately",
                "reconcile"
              ],
              "suboptions": {}
            },
            "manual_management_reason": {
              "aliases": [],
              "description": "String value indicating why the CPM will NOT manage the password.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "new_secret": {
              "aliases": [],
              "description": "The actual password value that will be assigned for the CPM action to be taken.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "perform_management_action": {
              "aliases": [],
              "description": "C(always) will perform the management action in every action.\nC(on_create) will only perform the management action right after the account is created.",
              "default": "always",
              "type": "str",
              "required": false,
              "choices": [
                "always",
                "on_create"
              ],
              "suboptions": {}
            }
          }
        },
        "secret_type": {
          "aliases": [],
          "description": "The value that identifies what type of account it will be.",
          "default": "password",
          "type": "str",
          "required": false,
          "choices": [
            "password",
            "key"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Assert the desired state of the account C(present) to creat or update and account object. Set to C(absent) for deletion of an account object.",
          "default": "present",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username associated with the account.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificate chain will not be validated.  This should only set to C(true) if you have a root CA certificate installed on each node.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Module for CyberArk Account object creation, deletion, and modification using PAS Web Services SDK.",
      "version_added": "2.4"
    },
    "examples": "\n  collections:\n    - cyberark.pas\n\n  tasks:\n\n    - name: Logon to CyberArk Vault using PAS Web Services SDK\n      cyberark_authentication:\n        api_base_url: \"http://components.cyberark.local\"\n        validate_certs: no\n        username: \"bizdev\"\n        password: \"Cyberark1\"\n\n    - name: Creating an Account using the PAS WebServices SDK\n      cyberark_account:\n        logging_level: DEBUG\n        identified_by: \"address,username\"\n        safe: \"Test\"\n        address: \"cyberark.local\"\n        username: \"administrator-x\"\n        platform_id: WinServerLocal\n        secret: \"@N&Ibl3!\"\n        platform_account_properties:\n            LogonDomain: \"cyberark\"\n            OwnerName: \"ansible_user\"\n        secret_management:\n            automatic_management_enabled: true\n        state: present\n        cyberark_session: \"{{ cyberark_session }}\"\n      register: cyberarkaction\n\n    - name:\n        - Rotate credential via reconcile and providing the password to\n          bechanged to.\n      cyberark_account:\n        identified_by: \"address,username\"\n        safe: \"Domain_Admins\"\n        address: \"prod.cyberark.local\"\n        username: \"admin\"\n        platform_id: WinDomain\n        platform_account_properties:\n            LogonDomain: \"PROD\"\n        secret_management:\n            new_secret: \"Ama123ah12@#!Xaamdjbdkl@#112\"\n            management_action: \"reconcile\"\n            automatic_management_enabled: true\n        state: present\n        cyberark_session: \"{{ cyberark_session }}\"\n      register: reconcileaccount\n\n    - name: Logoff from CyberArk Vault\n      cyberark_authentication:\n        state: absent\n        cyberark_session: \"{{ cyberark_session }}\"\n\n"
  },
  "cyberark.pas.cyberark_authentication": {
    "doc": {
      "description": "Authenticates to CyberArk Vault using Privileged Account Security Web Services SDK and creates a session fact that can be used by other modules. It returns an Ansible fact called I(cyberark_session). Every module can use this fact as C(cyberark_session) parameter.",
      "has_action": false,
      "options": {
        "api_base_url": {
          "aliases": [],
          "description": "A string containing the base URL of the server hosting CyberArk's Privileged Account Security Web Services SDK.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "connection_number": {
          "aliases": [],
          "description": "To support multiple connections for same user specify\ndifferent value for this parameter.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cyberark_session": {
          "aliases": [],
          "description": "Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "new_password": {
          "aliases": [],
          "description": "The new password of the user. This parameter is optional, and enables you to change a password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies if an authentication logon/logoff and a cyberark_session should be added/removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "use_cyberark_authentication": {
          "aliases": [],
          "description": "Whether or not LDAP will be used.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_ldap_authentication": {
          "aliases": [],
          "description": "Whether or not LDAP will be used.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_radius_authentication": {
          "aliases": [],
          "description": "Whether or not users will be authenticated via a RADIUS server. Valid values are true/false.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_windows_authentication": {
          "aliases": [],
          "description": "Whether or not Windows will be used.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The name of the user who will logon to the Vault.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificates will not be validated.  This should only set to C(false) used on personally controlled sites using self-signed certificates.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "CyberArk Authentication using PAS Web Services SDK.",
      "version_added": "2.4"
    },
    "examples": "\n- name: Logon - use_shared_logon_authentication\n  cyberark_authentication:\n    api_base_url: \"{{ web_services_base_url }}\"\n    use_shared_logon_authentication: yes\n\n- name: Logon - Not use_shared_logon_authentication\n  cyberark_authentication:\n    api_base_url: \"{{ web_services_base_url }}\"\n    username: \"{{ password_object.password }}\"\n    password: \"{{ password_object.passprops.username }}\"\n    use_shared_logon_authentication: no\n\n- name: Logoff from CyberArk Vault\n  cyberark_authentication:\n    state: absent\n    cyberark_session: \"{{ cyberark_session }}\"\n"
  },
  "cyberark.pas.cyberark_credential": {
    "doc": {
      "description": "Creates a URI for retrieving a credential from a password object stored in the Cyberark Vault.  The request uses the Privileged Account Security Web Services SDK through the Central Credential Provider by requesting access with an Application ID.",
      "has_action": false,
      "options": {
        "api_base_url": {
          "aliases": [],
          "description": "A string containing the base URL of the server hosting the Central Credential Provider.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "app_id": {
          "aliases": [],
          "description": "A string containing the Application ID authorized for retrieving the credential.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [],
          "description": "A string containing the file location and name of the client certificate used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [],
          "description": "A string containing the file location and name of the private key of the client certificate used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "connection_timeout": {
          "aliases": [],
          "description": "An integer value of the allowed time before the request returns failed.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "fail_request_on_password_change": {
          "aliases": [],
          "description": "A boolean parameter for completing the request in the middle of a password change of the requested credential.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "A string containing details of the object being queried;\nPossible parameters could be Safe, Folder, Object\n(internal account name), UserName, Address, Database,\nPolicyID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_format": {
          "aliases": [],
          "description": "The format for which your Query will be received by the CCP.",
          "default": "Exact",
          "type": "str",
          "required": false,
          "choices": [
            "Exact",
            "Regexp"
          ],
          "suboptions": {}
        },
        "reason": {
          "aliases": [],
          "description": "Reason for requesting credential if required by policy;\nIt must be specified if the Policy managing the object\nrequires it.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificate chain will not be validated.  This should only set to C(true) if you have a root CA certificate installed on each node.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Credential retrieval using AAM Central Credential Provider.",
      "version_added": "2.4"
    },
    "examples": "\n  tasks:\n    - name: credential retrieval basic\n      cyberark_credential:\n        api_base_url: \"http://10.10.0.1\"\n        app_id: \"TestID\"\n        query: \"Safe=test;UserName=admin\"\n      register: result\n\n    - name: credential retrieval advanced\n      cyberark_credential:\n        api_base_url: \"https://components.cyberark.local\"\n        validate_certs: yes\n        client_cert: /etc/pki/ca-trust/source/client.pem\n        client_key: /etc/pki/ca-trust/source/priv-key.pem\n        app_id: \"TestID\"\n        query: \"Safe=test;UserName=admin\"\n        connection_timeout: 60\n        query_format: Exact\n        fail_request_on_password_change: True\n        reason: \"requesting credential for Ansible deployment\"\n      register: result\n\n"
  },
  "cyberark.pas.cyberark_user": {
    "doc": {
      "description": "CyberArk User Management using PAS Web Services SDK, It currently supports the following actions Get User Details, Add User, Update User, Delete User.",
      "has_action": false,
      "options": {
        "authorization": {
          "aliases": [],
          "description": "A list of authorization options for this user.\nOptions can include AddSafes and AuditUsers\nThe default provides backwards compatability with older versions of the collection",
          "default": "['AddSafes', 'AuditUsers']",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "change_password_on_the_next_logon": {
          "aliases": [],
          "description": "Whether or not the user must change their password in their next logon.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cyberark_session": {
          "aliases": [],
          "description": "Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session, please see M(cyberark_authentication) module for an example of cyberark_session.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "disabled": {
          "aliases": [],
          "description": "Whether or not the user will be disabled.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "The user email address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expiry_date": {
          "aliases": [],
          "description": "The date and time when the user account will expire and become disabled.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "first_name": {
          "aliases": [],
          "description": "The user first name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group_name": {
          "aliases": [],
          "description": "The name of the group the user will be added to.\nCauses an additional lookup in cyberark\nWill be ignored if vault_id is used\nWill cause a failure if group is missing or more than one group with that name exists",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "initial_password": {
          "aliases": [],
          "description": "The password that the new user will use to log on the first time.\nThis password must meet the password policy requirements.\nThis parameter is required when state is present -- Add User.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "last_name": {
          "aliases": [],
          "description": "The user last name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The Vault Location for the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "logging_file": {
          "aliases": [],
          "description": "Setting the log file name and location for troubleshooting logs.",
          "default": "/tmp/ansible_cyberark.log",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "logging_level": {
          "aliases": [],
          "description": "Parameter used to define the level of troubleshooting output to the C(logging_file) value.",
          "default": "NOTSET",
          "type": "str",
          "required": true,
          "choices": [
            "NOTSET",
            "DEBUG",
            "INFO"
          ],
          "suboptions": {}
        },
        "new_password": {
          "aliases": [],
          "description": "The user updated password. Make sure that this password meets the password policy requirements.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies the state needed for the user present for create user, absent for delete user.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long to wait for the server to send data before giving up",
          "default": "10",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "user_type_name": {
          "aliases": [],
          "description": "The type of user.\nThe parameter defaults to C(EPVUser).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The name of the user who will be queried (for details), added, updated or deleted.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vault_id": {
          "aliases": [],
          "description": "The ID of the user group to add the user to\nPrefered over group_name",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "CyberArk User Management using PAS Web Services SDK.",
      "version_added": "2.4"
    },
    "examples": "\n- name: Logon to CyberArk Vault using PAS Web Services SDK\n  cyberark_authentication:\n    api_base_url: https://components.cyberark.local\n    use_shared_logon_authentication: yes\n\n- name: Create user & immediately add it to a group\n  cyberark_user:\n    username: username\n    initial_password: password\n    user_type_name: EPVUser\n    change_password_on_the_next_logon: no\n    group_name: GroupOfUser\n    state: present\n    cyberark_session: '{{ cyberark_session }}'\n\n- name: Make sure user is present and reset user credential if present\n  cyberark_user:\n    username: Username\n    new_password: password\n    disabled: no\n    state: present\n    cyberark_session: '{{ cyberark_session }}'\n\n- name: Logoff from CyberArk Vault\n  cyberark_authentication:\n    state: absent\n    cyberark_session: '{{ cyberark_session }}'\n"
  }
}