{
  "servicenow.servicenow.snow_record": {
    "doc": {
      "description": "Creates, deletes and updates a single record in ServiceNow.",
      "has_action": false,
      "options": {
        "attachment": {
          "aliases": [],
          "description": "Attach a file to the record.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "The method used to authenticate with the Service Now instance.\nBasic authentication uses user name and password.\nOAuth authentication uses a client id and secret in addition to Basic authentication.\nToken authentication uses a bearer token in addition to OAuth authentication.\nOpenID Connect authentication, an extension of OAuth 2.0, uses a provider, like Okta, to obtain a bearer token.\nIf the vaule is not specified in the task, the value of environment variable C(SN_AUTH) will be used instead.",
          "default": "basic",
          "type": "str",
          "required": false,
          "choices": [
            "basic",
            "oauth",
            "token",
            "openid"
          ],
          "suboptions": {}
        },
        "client_id": {
          "aliases": [],
          "description": "Client ID generated by ServiceNow.\nRequired when using OAuth or OpenID authentication, unless token is specified.\nIf the value is not specified in the task, the value of environment variable C(SN_CLIENTID) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_secret": {
          "aliases": [],
          "description": "Client Secret associated with client id.\nRequired when using OAuth or OpenID authentication, unless token is specified.\nIf the value is not specified in the task, the value of environment variable C(SN_CLIENTSECRET) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "key, value pairs of data to load into the record. See Examples.\nRequired for C(state:present).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "display_value": {
          "aliases": [],
          "description": "sysparm_display_value",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_reference_link": {
          "aliases": [],
          "description": "sysparm_exclude_reference_link",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The ServiceNow hostname.\nThis value is FQDN for ServiceNow host.\nIf the value is not specified in the task, the value of environment variable C(SN_HOST) will be used instead.\nMutually exclusive with C(instance).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance": {
          "aliases": [],
          "description": "The ServiceNow instance name, without the domain, service-now.com.\nIf the value is not specified in the task, the value of environment variable C(SN_INSTANCE) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "log_level": {
          "aliases": [],
          "description": "Set the logging level of the module",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "info",
            "normal"
          ],
          "suboptions": {}
        },
        "lookup_field": {
          "aliases": [],
          "description": "Changes the field that C(number) uses to find records.",
          "default": "number",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number": {
          "aliases": [],
          "description": "Record number to update.\nRequired for C(state:absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "openid": {
          "aliases": [],
          "description": "If the result of a previous SNOW method, using OpenID, was registered, supply the C(openid) key, from the result.\nThe C(openid) key contains a dictionary with the bearer token, which, if still valid, can be reused.\nIf the bearer token is no longer valid, the dictionary includes all of the previously supplied C(openid_) fields needed to make a new token request.\nAny other credentials previously supplied, must be provided again.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "openid_issuer": {
          "aliases": [],
          "description": "The URL for your organization's OpenID Connect provider.\nOkta, an OpenID provider, supports Single Sign-On with a url like 'https://yourorg.oktapreview.com/oauth2'.\nOkta supports application-level authentication using a url like 'https://yourorg.oktapreview.com/oauth2/TH151s50m3L0ngSTr1NG'.\nIf the value is not specified in the task, the value of environment variable C(OPENID_ISSUER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "openid_scope": {
          "aliases": [],
          "description": "A list of scopes to be included in the access token.\nSupported scopes for this application are address, email, groups, openid, phone, profile, of which, openid must be one.\nIf the value is not specified in the task, the value of environment variable C(OPENID_SCOPE) will be used instead.",
          "default": "['openid']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for username.\nRequired whether using Basic, OAuth or OpenID authentication.\nIf the value is not specified in the task, the value of environment variable C(SN_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "raise_on_empty": {
          "aliases": [],
          "description": "If set to false, will not cause a SNOW method to raise an exception should it return no records.\nThis is particurlarly useful in snow_record_find, when not sure if any record exists.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(present) is supplied with a C(number) argument, the module will attempt to update the record with the supplied data.\nIf no such record exists, a new one will be created.\nC(absent) will delete a record.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_pagination_header": {
          "aliases": [],
          "description": "sysparm_suppress_pagination_header",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "table": {
          "aliases": [],
          "description": "Table to query for records.",
          "default": "incident",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Bearer token associated with client id and secret.\nCan be used in place of client id and secret for OpenID authentication.\nIf the value is not specified in the task, the value of environment variable C(SN_TOKEN) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Name of user for connection to ServiceNow.\nRequired whether using Basic, OAuth or OpenID authentication.\nIf the value is not specified in the task, the value of environment variable C(SN_USERNAME) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python pysnow (pysnow)",
        "python requests (requests)"
      ],
      "short_description": "Manage records in ServiceNow"
    },
    "examples": "\n- name: Grab a user record\n  servicenow.servicenow.snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: 62826bf03710200044e0bfc8bcbe5df1\n    table: sys_user\n    lookup_field: sys_id\n\n- name: Grab a user record, explicitly using basic authentication and suppress exceptions if not found\n  servicenow.servicenow.snow_record:\n    auth: basic\n    raise_on_empty: False\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: 62826bf03710200044e0bfc8bcbe5df1\n    table: sys_user\n    lookup_field: sys_id\n\n- name: Grab a user record using OAuth\n  servicenow.servicenow.snow_record:\n    auth: oauth\n    username: ansible_test\n    password: my_password\n    client_id: \"1234567890abcdef1234567890abcdef\"\n    client_secret: \"Password1!\"\n    instance: dev99999\n    state: present\n    number: 62826bf03710200044e0bfc8bcbe5df1\n    table: sys_user\n    lookup_field: sys_id\n\n- name: Grab a user record using a bearer token\n  servicenow.servicenow.snow_record:\n    auth: token\n    username: ansible_test\n    password: my_password\n    token: \"y0urHorrend0u51yL0ngT0kenG0esH3r3...\"\n    instance: dev99999\n    state: present\n    number: 62826bf03710200044e0bfc8bcbe5df1\n    table: sys_user\n    lookup_field: sys_id\n\n- name: Grab a user record using OpenID\n  servicenow.servicenow.snow_record:\n    auth: openid\n    username: ansible_test\n    password: my_password\n    client_id: \"1234567890abcdef1234567890abcdef\"\n    client_secret: \"Password1!\"\n    openid_issuer: \"https://yourorg.oktapreview.com/TH151s50meL0ngSTr1NG\"\n    openid_scope: \"openid email\"\n    instance: dev99999\n    state: present\n    number: 62826bf03710200044e0bfc8bcbe5df1\n    table: sys_user\n    lookup_field: sys_id\n  register: response\n\n- name: Grab another user record using previous OpenID response\n  servicenow.servicenow.snow_record:\n    auth: openid\n    username: ansible_test\n    password: my_password\n    client_id: \"1234567890abcdef1234567890abcdef\"\n    client_secret: \"Password1!\"\n    openid: \"{{ response['openid'] }}\"\n    instance: dev99999\n    state: present\n    number: 62826bf03710200044e0bfc8deadbeef\n    table: sys_user\n    lookup_field: sys_id\n  register: response\n\n- name: Create an incident\n  servicenow.servicenow.snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    data:\n      short_description: \"This is a test incident opened by Ansible\"\n      severity: 3\n      priority: 2\n  register: new_incident\n\n- name: Create an incident using host instead of instance\n  servicenow.servicenow.snow_record:\n    username: ansible_test\n    password: my_password\n    host: dev99999.mycustom.domain.com\n    state: present\n    data:\n      short_description: \"This is a test incident opened by Ansible\"\n      priority: 2\n\n- name: Delete the record we just made\n  servicenow.servicenow.snow_record:\n    username: admin\n    password: xxxxxxx\n    instance: dev99999\n    state: absent\n    number: \"{{new_incident['record']['number']}}\"\n\n- name: Delete a non-existant record\n  servicenow.servicenow.snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: absent\n    number: 9872354\n  failed_when: false\n\n- name: Update an incident\n  servicenow.servicenow.snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: INC0000055\n    data:\n      work_notes : \"Been working all day on this thing.\"\n\n- name: Attach a file to an incident\n  servicenow.servicenow.snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: INC0000055\n    attachment: README.md\n  tags: attach\n"
  },
  "servicenow.servicenow.snow_record_find": {
    "doc": {
      "description": "Gets multiple records from a specified table from ServiceNow based on a query dictionary.",
      "has_action": false,
      "options": {
        "auth": {
          "aliases": [],
          "description": "The method used to authenticate with the Service Now instance.\nBasic authentication uses user name and password.\nOAuth authentication uses a client id and secret in addition to Basic authentication.\nToken authentication uses a bearer token in addition to OAuth authentication.\nOpenID Connect authentication, an extension of OAuth 2.0, uses a provider, like Okta, to obtain a bearer token.\nIf the vaule is not specified in the task, the value of environment variable C(SN_AUTH) will be used instead.",
          "default": "basic",
          "type": "str",
          "required": false,
          "choices": [
            "basic",
            "oauth",
            "token",
            "openid"
          ],
          "suboptions": {}
        },
        "client_id": {
          "aliases": [],
          "description": "Client ID generated by ServiceNow.\nRequired when using OAuth or OpenID authentication, unless token is specified.\nIf the value is not specified in the task, the value of environment variable C(SN_CLIENTID) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_secret": {
          "aliases": [],
          "description": "Client Secret associated with client id.\nRequired when using OAuth or OpenID authentication, unless token is specified.\nIf the value is not specified in the task, the value of environment variable C(SN_CLIENTSECRET) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_value": {
          "aliases": [],
          "description": "sysparm_display_value",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "exclude_reference_link": {
          "aliases": [],
          "description": "sysparm_exclude_reference_link",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The ServiceNow hostname.\nThis value is FQDN for ServiceNow host.\nIf the value is not specified in the task, the value of environment variable C(SN_HOST) will be used instead.\nMutually exclusive with C(instance).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance": {
          "aliases": [],
          "description": "The ServiceNow instance name, without the domain, service-now.com.\nIf the value is not specified in the task, the value of environment variable C(SN_INSTANCE) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "log_level": {
          "aliases": [],
          "description": "Set the logging level of the module",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "info",
            "normal"
          ],
          "suboptions": {}
        },
        "max_records": {
          "aliases": [],
          "description": "Maximum number of records to return.",
          "default": "20",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "openid": {
          "aliases": [],
          "description": "If the result of a previous SNOW method, using OpenID, was registered, supply the C(openid) key, from the result.\nThe C(openid) key contains a dictionary with the bearer token, which, if still valid, can be reused.\nIf the bearer token is no longer valid, the dictionary includes all of the previously supplied C(openid_) fields needed to make a new token request.\nAny other credentials previously supplied, must be provided again.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "openid_issuer": {
          "aliases": [],
          "description": "The URL for your organization's OpenID Connect provider.\nOkta, an OpenID provider, supports Single Sign-On with a url like 'https://yourorg.oktapreview.com/oauth2'.\nOkta supports application-level authentication using a url like 'https://yourorg.oktapreview.com/oauth2/TH151s50m3L0ngSTr1NG'.\nIf the value is not specified in the task, the value of environment variable C(OPENID_ISSUER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "openid_scope": {
          "aliases": [],
          "description": "A list of scopes to be included in the access token.\nSupported scopes for this application are address, email, groups, openid, phone, profile, of which, openid must be one.\nIf the value is not specified in the task, the value of environment variable C(OPENID_SCOPE) will be used instead.",
          "default": "['openid']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "order_by": {
          "aliases": [],
          "description": "Field to sort the results on.\nCan prefix with \"-\" or \"+\" to change descending or ascending sort order.",
          "default": "-created_on",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for username.\nRequired whether using Basic, OAuth or OpenID authentication.\nIf the value is not specified in the task, the value of environment variable C(SN_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "Dict to query for records.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "raise_on_empty": {
          "aliases": [],
          "description": "If set to false, will not cause a SNOW method to raise an exception should it return no records.\nThis is particurlarly useful in snow_record_find, when not sure if any record exists.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "return_fields": {
          "aliases": [],
          "description": "Fields of the record to return in the json.\nBy default, all fields will be returned.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "suppress_pagination_header": {
          "aliases": [],
          "description": "sysparm_suppress_pagination_header",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "table": {
          "aliases": [],
          "description": "Table to query for records.",
          "default": "incident",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Bearer token associated with client id and secret.\nCan be used in place of client id and secret for OpenID authentication.\nIf the value is not specified in the task, the value of environment variable C(SN_TOKEN) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Name of user for connection to ServiceNow.\nRequired whether using Basic, OAuth or OpenID authentication.\nIf the value is not specified in the task, the value of environment variable C(SN_USERNAME) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python pysnow (pysnow)",
        "python requests (requests)"
      ],
      "short_description": "Search for multiple records from ServiceNow"
    },
    "examples": "\n- name: Search for incident assigned to group, return specific fields\n  servicenow.servicenow.snow_record_find:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    table: incident\n    query:\n      assignment_group: d625dccec0a8016700a222a0f7900d06\n    return_fields:\n      - number\n      - opened_at\n\n- name: Search for incident assigned to group, explicitly using basic authentication, return specific fields, and suppress exception if not found\n  servicenow.servicenow.snow_record_find:\n    auth: basic\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    raise_on_empty: False\n    table: incident\n    query:\n      assignment_group: d625dccec0a8016700a222a0f7900d06\n    return_fields:\n      - number\n      - opened_at\n\n- name: Search for incident using host instead of instance\n  servicenow.servicenow.snow_record_find:\n    username: ansible_test\n    password: my_password\n    host: dev99999.mycustom.domain.com\n    table: incident\n    query:\n      assignment_group: d625dccec0a8016700a222a0f7900d06\n    return_fields:\n      - number\n      - opened_at\n\n- name: Using OAuth, search for incident assigned to group, return specific fields\n  servicenow.servicenow.snow_record_find:\n    auth: oauth\n    username: ansible_test\n    password: my_password\n    client_id: \"1234567890abcdef1234567890abcdef\"\n    client_secret: \"Password1!\"\n    instance: dev99999\n    table: incident\n    query:\n      assignment_group: d625dccec0a8016700a222a0f7900d06\n    return_fields:\n      - number\n      - opened_at\n\n- name: Using a bearer token, search for incident assigned to group, return specific fields\n  servicenow.servicenow.snow_record_find:\n    auth: token\n    username: ansible_test\n    password: my_password\n    token: \"y0urHorrend0u51yL0ngT0kenG0esH3r3...\"\n    instance: dev99999\n    table: incident\n    query:\n      assignment_group: d625dccec0a8016700a222a0f7900d06\n    return_fields:\n      - number\n      - opened_at\n\n- name: Using OpenID, search for incident assigned to group, return specific fields\n  servicenow.servicenow.snow_record_find:\n    auth: openid\n    username: ansible_test\n    password: my_password\n    client_id: \"1234567890abcdef1234567890abcdef\"\n    client_secret: \"Password1!\"\n    openid_issuer: \"https://yourorg.oktapreview.com/oauth2/TH151s50M3L0ngStr1NG\"\n    openid_scope: \"openid email\"\n    instance: dev99999\n    table: incident\n    query:\n      assignment_group: d625dccec0a8016700a222a0f7900d06\n    return_fields:\n      - number\n      - opened_at\n  register: response\n\n- name: Using previous OpenID response, search for incident assigned to group, return specific fields\n  servicenow.servicenow.snow_record_find:\n    auth: openid\n    username: ansible_test\n    password: my_password\n    client_id: \"1234567890abcdef1234567890abcdef\"\n    client_secret: \"Password1!\"\n    openid: \"{{ response['openid'] }}\"\n    instance: dev99999\n    table: incident\n    query:\n      assignment_group: d625dccec0a8016700a222a0f7900d06\n    return_fields:\n      - number\n      - opened_at\n\n- name: Find open standard changes with my template\n  servicenow.servicenow.snow_record_find:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    table: change_request\n    query:\n      AND:\n        equals:\n          active: \"True\"\n          type: \"standard\"\n          u_change_stage: \"80\"\n        contains:\n          u_template: \"MY-Template\"\n    return_fields:\n      - sys_id\n      - number\n      - sys_created_on\n      - sys_updated_on\n      - u_template\n      - active\n      - type\n      - u_change_stage\n      - sys_created_by\n      - description\n      - short_description\n"
  }
}