{
  "cisco.nxos.nxos_aaa_server": {
    "doc": {
      "description": "Manages AAA server global configuration",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nThe server_type parameter is always required.\nIf encrypt_type is not supplied, the global AAA server key will be stored as encrypted (type 7).\nChanges to the global AAA server key with encrypt_type=0 are not idempotent.\nstate=default will set the supplied parameters to their default values. The parameters that you want to default must also be set to default. If global_key=default, the global key will be removed.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "deadtime": {
          "aliases": [],
          "description": "Duration for which a non-reachable AAA server is skipped, in minutes or keyword 'default. Range is 1-1440. Device default is 0.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "directed_request": {
          "aliases": [],
          "description": "Enables direct authentication requests to AAA server or keyword 'default' Device default is disabled.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled",
            "default"
          ],
          "suboptions": {}
        },
        "encrypt_type": {
          "aliases": [],
          "description": "The state of encryption applied to the entered global key. O clear text, 7 encrypted. Type-6 encryption is not supported.",
          "type": "str",
          "required": false,
          "choices": [
            "0",
            "7"
          ],
          "suboptions": {}
        },
        "global_key": {
          "aliases": [],
          "description": "Global AAA shared secret or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "server_timeout": {
          "aliases": [],
          "description": "Global AAA server timeout period, in seconds or keyword 'default. Range is 1-60. Device default is 5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server_type": {
          "aliases": [],
          "description": "The server type is either radius or tacacs.",
          "type": "str",
          "required": true,
          "choices": [
            "radius",
            "tacacs"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "default"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages AAA server global configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Radius Server Basic settings\n- name: Radius Server Basic settings\n  cisco.nxos.nxos_aaa_server:\n    server_type: radius\n    server_timeout: 9\n    deadtime: 20\n    directed_request: enabled\n\n# Tacacs Server Basic settings\n- name: Tacacs Server Basic settings\n  cisco.nxos.nxos_aaa_server:\n    server_type: tacacs\n    server_timeout: 8\n    deadtime: 19\n    directed_request: disabled\n\n# Setting Global Key\n- name: AAA Server Global Key\n  cisco.nxos.nxos_aaa_server:\n    server_type: radius\n    global_key: test_key\n"
  },
  "cisco.nxos.nxos_aaa_server_host": {
    "doc": {
      "description": "Manages AAA server host-specific configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nChanges to the host key (shared secret) are not idempotent for type 0.\nIf C(state=absent) removes the whole host configuration.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "acct_port": {
          "aliases": [],
          "description": "Alternate UDP port for RADIUS accounting or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "address": {
          "aliases": [],
          "description": "Address or name of the radius or tacacs host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_port": {
          "aliases": [],
          "description": "Alternate UDP port for RADIUS authentication or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "encrypt_type": {
          "aliases": [],
          "description": "The state of encryption applied to the entered key. O for clear text, 7 for encrypted. Type-6 encryption is not supported.",
          "type": "str",
          "required": false,
          "choices": [
            "0",
            "7"
          ],
          "suboptions": {}
        },
        "host_timeout": {
          "aliases": [],
          "description": "Timeout period for specified host, in seconds or keyword 'default. Range is 1-60.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "key": {
          "aliases": [],
          "description": "Shared secret for the specified host or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "server_type": {
          "aliases": [],
          "description": "The server type is either radius or tacacs.",
          "type": "str",
          "required": true,
          "choices": [
            "radius",
            "tacacs"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tacacs_port": {
          "aliases": [],
          "description": "Alternate TCP port TACACS Server or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages AAA server host-specific configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Radius Server Host Basic settings\n- name: Radius Server Host Basic settings\n  cisco.nxos.nxos_aaa_server_host:\n    state: present\n    server_type: radius\n    address: 1.2.3.4\n    acct_port: 2084\n    host_timeout: 10\n\n# Radius Server Host Key Configuration\n- name: Radius Server Host Key Configuration\n  cisco.nxos.nxos_aaa_server_host:\n    state: present\n    server_type: radius\n    address: 1.2.3.4\n    key: hello\n    encrypt_type: 7\n\n# TACACS Server Host Configuration\n- name: Tacacs Server Host Configuration\n  cisco.nxos.nxos_aaa_server_host:\n    state: present\n    server_type: tacacs\n    tacacs_port: 89\n    host_timeout: 10\n    address: 5.6.7.8\n\n"
  },
  "cisco.nxos.nxos_acl": {
    "doc": {
      "description": "Manages access list entries for ACLs.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(state=absent) removes the ACE if it exists.\nC(state=delete_acl) deletes the ACL if it exists.\nFor idempotency, use port numbers for the src/dest port params like I(src_port1) and names for the well defined protocols for the I(proto) param.\nAlthough this module is idempotent in that if the ace as presented in the task is identical to the one on the switch, no changes will be made. If there is any difference, what is in Ansible will be pushed (configured options will be overridden).  This is to improve security, but at the same time remember an ACE is removed, then re-added, so if there is a change, the new ACE will be exactly what parameters you are sending to the module.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "ack": {
          "aliases": [],
          "description": "Match on the ACK bit.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        },
        "action": {
          "aliases": [],
          "description": "Action of the ACE.",
          "type": "str",
          "required": false,
          "choices": [
            "permit",
            "deny",
            "remark"
          ],
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Destination ip and mask using IP/MASK notation and supports the keyword 'any'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dest_port1": {
          "aliases": [],
          "description": "Port/protocol and also first (lower) port when using range operand.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dest_port2": {
          "aliases": [],
          "description": "Second (end) port when using range operand.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dest_port_op": {
          "aliases": [],
          "description": "Destination port operands such as eq, neq, gt, lt, range.",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "eq",
            "gt",
            "lt",
            "neq",
            "range"
          ],
          "suboptions": {}
        },
        "dscp": {
          "aliases": [],
          "description": "Match packets with given dscp value.",
          "type": "str",
          "required": false,
          "choices": [
            "af11",
            "af12",
            "af13",
            "af21",
            "af22",
            "af23",
            "af31",
            "af32",
            "af33",
            "af41",
            "af42",
            "af43",
            "cs1",
            "cs2",
            "cs3",
            "cs4",
            "cs5",
            "cs6",
            "cs7",
            "default",
            "ef"
          ],
          "suboptions": {}
        },
        "established": {
          "aliases": [],
          "description": "Match established connections.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        },
        "fin": {
          "aliases": [],
          "description": "Match on the FIN bit.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        },
        "fragments": {
          "aliases": [],
          "description": "Check non-initial fragments.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        },
        "log": {
          "aliases": [],
          "description": "Log matches against this entry.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Case sensitive name of the access list (ACL).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "precedence": {
          "aliases": [],
          "description": "Match packets with given precedence.",
          "type": "str",
          "required": false,
          "choices": [
            "critical",
            "flash",
            "flash-override",
            "immediate",
            "internet",
            "network",
            "priority",
            "routine"
          ],
          "suboptions": {}
        },
        "proto": {
          "aliases": [],
          "description": "Port number or protocol (as supported by the switch).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "psh": {
          "aliases": [],
          "description": "Match on the PSH bit.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        },
        "remark": {
          "aliases": [],
          "description": "If action is set to remark, this is the description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rst": {
          "aliases": [],
          "description": "Match on the RST bit.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        },
        "seq": {
          "aliases": [],
          "description": "Sequence number of the entry (ACE).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Source ip and mask using IP/MASK notation and supports keyword 'any'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src_port1": {
          "aliases": [],
          "description": "Port/protocol and also first (lower) port when using range operand.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src_port2": {
          "aliases": [],
          "description": "Second (end) port when using range operand.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src_port_op": {
          "aliases": [],
          "description": "Source port operands such as eq, neq, gt, lt, range.",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "eq",
            "gt",
            "lt",
            "neq",
            "range"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "delete_acl"
          ],
          "suboptions": {}
        },
        "syn": {
          "aliases": [],
          "description": "Match on the SYN bit.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        },
        "time_range": {
          "aliases": [],
          "description": "Name of time-range to apply.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "urg": {
          "aliases": [],
          "description": "Match on the URG bit.",
          "type": "str",
          "required": false,
          "choices": [
            "enable"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manages access list entries for ACLs.",
      "version_added": "1.0.0"
    },
    "examples": "\n# configure ACL ANSIBLE\n- cisco.nxos.nxos_acl:\n    name: ANSIBLE\n    seq: 10\n    action: permit\n    proto: tcp\n    src: 192.0.2.1/24\n    dest: any\n    state: present\n"
  },
  "cisco.nxos.nxos_acl_interface": {
    "doc": {
      "description": "Manages applying ACLs to interfaces.",
      "has_action": true,
      "notes": "For information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "direction": {
          "aliases": [],
          "description": "Direction ACL to be applied in on the interface.",
          "type": "str",
          "required": true,
          "choices": [
            "ingress",
            "egress"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Full name of interface, e.g. I(Ethernet1/1).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Case sensitive name of the access list (ACL).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manages applying ACLs to interfaces.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: apply egress acl to ethernet1/41\n  cisco.nxos.nxos_acl_interface:\n    name: ANSIBLE\n    interface: ethernet1/41\n    direction: egress\n    state: present\n"
  },
  "cisco.nxos.nxos_acl_interfaces": {
    "doc": {
      "description": "Add and remove Access Control Lists on interfaces in NX-OS platform",
      "has_action": true,
      "notes": "Tested against NX-OS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of interfaces to be configured with ACLs",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "access_groups": {
              "aliases": [],
              "description": "List of address family indicators with ACLs to be configured on the interface",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "acls": {
                  "aliases": [],
                  "description": "List of Access Control Lists for the interface",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "direction": {
                      "aliases": [],
                      "description": "Direction to be applied for the ACL",
                      "type": "str",
                      "required": true,
                      "choices": [
                        "in",
                        "out"
                      ],
                      "suboptions": {}
                    },
                    "name": {
                      "aliases": [],
                      "description": "Name of the ACL to be added/removed",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "port": {
                      "aliases": [],
                      "description": "Use ACL as port policy.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "afi": {
                  "aliases": [],
                  "description": "Address Family Indicator of the ACLs to be configured",
                  "type": "str",
                  "required": true,
                  "choices": [
                    "ipv4",
                    "ipv6"
                  ],
                  "suboptions": {}
                }
              }
            },
            "name": {
              "aliases": [],
              "description": "Name of the interface",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^interface').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "deleted",
            "gathered",
            "merged",
            "overridden",
            "rendered",
            "replaced",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "ACL interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# ------------\n#\n\n- name: Merge ACL interfaces configuration\n  cisco.nxos.nxos_acl_interfaces:\n    config:\n    - name: Ethernet1/2\n      access_groups:\n      - afi: ipv6\n        acls:\n        - name: ACL1v6\n          direction: in\n\n    - name: Eth1/5\n      access_groups:\n      - afi: ipv4\n        acls:\n        - name: PortACL\n          direction: in\n          port: true\n\n        - name: ACL1v4\n          direction: out\n\n      - afi: ipv6\n        acls:\n        - name: ACL1v6\n          direction: in\n    state: merged\n\n# After state:\n# ------------\n# interface Ethernet1/2\n#   ipv6 traffic-filter ACL1v6 in\n# interface Ethernet1/5\n#   ip port access-group PortACL in\n#   ip access-group ACL1v4 out\n#   ipv6 traffic-filter ACL1v6 in\n\n# Using replaced\n\n# Before state:\n# ------------\n# interface Ethernet1/2\n#   ipv6 traffic-filter ACL1v6 in\n# interface Ethernet1/5\n#   ip port access-group PortACL in\n#   ip access-group ACL1v4 out\n#   ipv6 traffic-filter ACL1v6 in\n\n- name: Replace interface configuration with given configuration\n  cisco.nxos.nxos_acl_interfaces:\n    config:\n    - name: Eth1/5\n      access_groups:\n      - afi: ipv4\n        acls:\n        - name: NewACLv4\n          direction: out\n\n    - name: Ethernet1/3\n      access_groups:\n      - afi: ipv6\n        acls:\n        - name: NewACLv6\n          direction: in\n          port: true\n    state: replaced\n\n# After state:\n# ------------\n# interface Ethernet1/2\n#   ipv6 traffic-filter ACL1v6 in\n# interface Ethernet1/3\n#   ipv6 port traffic-filter NewACLv6 in\n# interface Ethernet1/5\n#   ip access-group NewACLv4 out\n\n# Using overridden\n\n# Before state:\n# ------------\n# interface Ethernet1/2\n#   ipv6 traffic-filter ACL1v6 in\n# interface Ethernet1/5\n#   ip port access-group PortACL in\n#   ip access-group ACL1v4 out\n#   ipv6 traffic-filter ACL1v6 in\n\n- name: Override interface configuration with given configuration\n  cisco.nxos.nxos_acl_interfaces:\n    config:\n    - name: Ethernet1/3\n      access_groups:\n      - afi: ipv4\n        acls:\n        - name: ACL1v4\n          direction: out\n\n        - name: PortACL\n          port: true\n          direction: in\n      - afi: ipv6\n        acls:\n        - name: NewACLv6\n          direction: in\n          port: true\n    state: overridden\n\n# After state:\n# ------------\n# interface Ethernet1/3\n#   ip access-group ACL1v4 out\n#   ip port access-group PortACL in\n#   ipv6 port traffic-filter NewACLv6 in\n\n# Using deleted to remove ACL config from specified interfaces\n\n# Before state:\n# -------------\n# interface Ethernet1/1\n#   ip access-group ACL2v4 in\n# interface Ethernet1/2\n#   ipv6 traffic-filter ACL1v6 in\n# interface Ethernet1/5\n#   ip port access-group PortACL in\n#   ip access-group ACL1v4 out\n#   ipv6 traffic-filter ACL1v6 in\n\n- name: Delete ACL configuration on interfaces\n  cisco.nxos.nxos_acl_interfaces:\n    config:\n    - name: Ethernet1/5\n    - name: Ethernet1/2\n    state: deleted\n\n# After state:\n# -------------\n# interface Ethernet1/1\n#   ip access-group ACL2v4 in\n# interface Ethernet1/2\n# interface Ethernet1/5\n\n# Using deleted to remove ACL config from all interfaces\n\n# Before state:\n# -------------\n# interface Ethernet1/1\n#   ip access-group ACL2v4 in\n# interface Ethernet1/2\n#   ipv6 traffic-filter ACL1v6 in\n# interface Ethernet1/5\n#   ip port access-group PortACL in\n#   ip access-group ACL1v4 out\n#   ipv6 traffic-filter ACL1v6 in\n\n- name: Delete ACL configuration from all interfaces\n  cisco.nxos.nxos_acl_interfaces:\n    state: deleted\n\n# After state:\n# -------------\n# interface Ethernet1/1\n# interface Ethernet1/2\n# interface Ethernet1/5\n\n# Using parsed\n\n- name: Parse given configuration into structured format\n  cisco.nxos.nxos_acl_interfaces:\n    running_config: |\n      interface Ethernet1/2\n      ipv6 traffic-filter ACL1v6 in\n      interface Ethernet1/5\n      ipv6 traffic-filter ACL1v6 in\n      ip access-group ACL1v4 out\n      ip port access-group PortACL in\n    state: parsed\n\n# returns\n# parsed:\n#   - name: Ethernet1/2\n#     access_groups:\n#       - afi: ipv6\n#         acls:\n#           - name: ACL1v6\n#             direction: in\n#  - name: Ethernet1/5\n#    access_groups:\n#      - afi: ipv4\n#        acls:\n#          - name: PortACL\n#            direction: in\n#            port: True\n#          - name: ACL1v4\n#            direction: out\n#      - afi: ipv6\n#        acls:\n#          - name: ACL1v6\n#             direction: in\n\n\n# Using gathered:\n\n# Before state:\n# ------------\n# interface Ethernet1/2\n#   ipv6 traffic-filter ACL1v6 in\n# interface Ethernet1/5\n#   ipv6 traffic-filter ACL1v6 in\n#   ip access-group ACL1v4 out\n#   ip port access-group PortACL in\n\n- name: Gather existing configuration from device\n  cisco.nxos.nxos_acl_interfaces:\n    config:\n    state: gathered\n\n# returns\n# gathered:\n#   - name: Ethernet1/2\n#     access_groups:\n#       - afi: ipv6\n#         acls:\n#           - name: ACL1v6\n#             direction: in\n#  - name: Ethernet1/5\n#    access_groups:\n#      - afi: ipv4\n#        acls:\n#          - name: PortACL\n#            direction: in\n#            port: True\n#          - name: ACL1v4\n#            direction: out\n#      - afi: ipv6\n#        acls:\n#          - name: ACL1v6\n#             direction: in\n\n\n# Using rendered\n\n- name: Render required configuration to be pushed to the device\n  cisco.nxos.nxos_acl_interfaces:\n    config:\n    - name: Ethernet1/2\n      access_groups:\n      - afi: ipv6\n        acls:\n        - name: ACL1v6\n          direction: in\n\n    - name: Ethernet1/5\n      access_groups:\n      - afi: ipv4\n        acls:\n        - name: PortACL\n          direction: in\n          port: true\n        - name: ACL1v4\n          direction: out\n      - afi: ipv6\n        acls:\n        - name: ACL1v6\n          direction: in\n    state: rendered\n\n# returns\n# rendered:\n#   interface Ethernet1/2\n#   ipv6 traffic-filter ACL1v6 in\n#   interface Ethernet1/5\n#   ipv6 traffic-filter ACL1v6 in\n#   ip access-group ACL1v4 out\n#   ip port access-group PortACL in\n\n"
  },
  "cisco.nxos.nxos_acls": {
    "doc": {
      "description": "Manage named IP ACLs on the Cisco NX-OS platform",
      "has_action": true,
      "notes": "Tested against NX-OS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nAs NX-OS allows configuring a rule again with different sequence numbers, the user is expected to provide sequence numbers for the access control entries to preserve idempotency. If no sequence number is given, the rule will be added as a new rule by the device.",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of ACL options.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "acls": {
              "aliases": [],
              "description": "A list of the ACLs.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "aces": {
                  "aliases": [],
                  "description": "The entries within the ACL.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "destination": {
                      "aliases": [],
                      "description": "Specify the packet destination.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "address": {
                          "aliases": [],
                          "description": "Destination network address.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "any": {
                          "aliases": [],
                          "description": "Any destination address.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "host": {
                          "aliases": [],
                          "description": "Host IP address.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "port_protocol": {
                          "aliases": [],
                          "description": "Specify the destination port or protocol (only for TCP and UDP).",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "eq": {
                              "aliases": [],
                              "description": "Match only packets on a given port number.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "gt": {
                              "aliases": [],
                              "description": "Match only packets with a greater port number.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "lt": {
                              "aliases": [],
                              "description": "Match only packets with a lower port number.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "neq": {
                              "aliases": [],
                              "description": "Match only packets not on a given port number.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "range": {
                              "aliases": [],
                              "description": "Match only packets in the range of port numbers.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "end": {
                                  "aliases": [],
                                  "description": "Specify the end of the port range.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "start": {
                                  "aliases": [],
                                  "description": "Specify the start of the port range.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        },
                        "prefix": {
                          "aliases": [],
                          "description": "Destination network prefix. Only for prefixes of value less than 31 for ipv4 and 127 for ipv6. Prefixes of 32 (ipv4) and 128 (ipv6) should be given in the 'host' key.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "wildcard_bits": {
                          "aliases": [],
                          "description": "Destination wildcard bits.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "dscp": {
                      "aliases": [],
                      "description": "Match packets with given DSCP value.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "fragments": {
                      "aliases": [],
                      "description": "Check non-initial fragments.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "grant": {
                      "aliases": [],
                      "description": "Action to be applied on the rule.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "permit",
                        "deny"
                      ],
                      "suboptions": {}
                    },
                    "log": {
                      "aliases": [],
                      "description": "Log matches against this entry.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "precedence": {
                      "aliases": [],
                      "description": "Match packets with given precedence value.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "protocol": {
                      "aliases": [],
                      "description": "Specify the protocol.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "protocol_options": {
                      "aliases": [],
                      "description": "All possible suboptions for the protocol chosen.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "icmp": {
                          "aliases": [],
                          "description": "ICMP protocol options.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "administratively_prohibited": {
                              "aliases": [],
                              "description": "Administratively prohibited",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "alternate_address": {
                              "aliases": [],
                              "description": "Alternate address",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "conversion_error": {
                              "aliases": [],
                              "description": "Datagram conversion",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "dod_host_prohibited": {
                              "aliases": [],
                              "description": "Host prohibited",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "dod_net_prohibited": {
                              "aliases": [],
                              "description": "Net prohibited",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "echo": {
                              "aliases": [],
                              "description": "Echo (ping)",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "echo_reply": {
                              "aliases": [],
                              "description": "Echo reply",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "echo_request": {
                              "aliases": [],
                              "description": "Echo request (ping)",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "general_parameter_problem": {
                              "aliases": [],
                              "description": "Parameter problem",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_isolated": {
                              "aliases": [],
                              "description": "Host isolated",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_precedence_unreachable": {
                              "aliases": [],
                              "description": "Host unreachable for precedence",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_redirect": {
                              "aliases": [],
                              "description": "Host redirect",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_tos_redirect": {
                              "aliases": [],
                              "description": "Host redirect for TOS",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_tos_unreachable": {
                              "aliases": [],
                              "description": "Host unreachable for TOS",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_unknown": {
                              "aliases": [],
                              "description": "Host unknown",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_unreachable": {
                              "aliases": [],
                              "description": "Host unreachable",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "information_reply": {
                              "aliases": [],
                              "description": "Information replies",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "information_request": {
                              "aliases": [],
                              "description": "Information requests",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "mask_reply": {
                              "aliases": [],
                              "description": "Mask replies",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "mask_request": {
                              "aliases": [],
                              "description": "Mask requests",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "message_code": {
                              "aliases": [],
                              "description": "ICMP message code",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "message_type": {
                              "aliases": [],
                              "description": "ICMP message type",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "mobile_redirect": {
                              "aliases": [],
                              "description": "Mobile host redirect",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "net_redirect": {
                              "aliases": [],
                              "description": "Network redirect",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "net_tos_redirect": {
                              "aliases": [],
                              "description": "Net redirect for TOS",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "net_tos_unreachable": {
                              "aliases": [],
                              "description": "Network unreachable for TOS",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "net_unreachable": {
                              "aliases": [],
                              "description": "Net unreachable",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "network_unknown": {
                              "aliases": [],
                              "description": "Network unknown",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "no_room_for_option": {
                              "aliases": [],
                              "description": "Parameter required but no room",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "option_missing": {
                              "aliases": [],
                              "description": "Parameter required but not present",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "packet_too_big": {
                              "aliases": [],
                              "description": "Fragmentation needed and DF set",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "parameter_problem": {
                              "aliases": [],
                              "description": "All parameter problems",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "port_unreachable": {
                              "aliases": [],
                              "description": "Port unreachable",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "precedence_unreachable": {
                              "aliases": [],
                              "description": "Precedence cutoff",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "protocol_unreachable": {
                              "aliases": [],
                              "description": "Protocol unreachable",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "reassembly_timeout": {
                              "aliases": [],
                              "description": "Reassembly timeout",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "redirect": {
                              "aliases": [],
                              "description": "All redirects",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "router_advertisement": {
                              "aliases": [],
                              "description": "Router discovery advertisements",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "router_solicitation": {
                              "aliases": [],
                              "description": "Router discovery solicitations",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "source_quench": {
                              "aliases": [],
                              "description": "Source quenches",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "source_route_failed": {
                              "aliases": [],
                              "description": "Source route failed",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "time_exceeded": {
                              "aliases": [],
                              "description": "All time exceeded.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "timestamp_reply": {
                              "aliases": [],
                              "description": "Timestamp replies",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "timestamp_request": {
                              "aliases": [],
                              "description": "Timestamp requests",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "traceroute": {
                              "aliases": [],
                              "description": "Traceroute",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "ttl_exceeded": {
                              "aliases": [],
                              "description": "TTL exceeded",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "unreachable": {
                              "aliases": [],
                              "description": "All unreachables",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "igmp": {
                          "aliases": [],
                          "description": "IGMP protocol options.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "dvmrp": {
                              "aliases": [],
                              "description": "Distance Vector Multicast Routing Protocol",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_query": {
                              "aliases": [],
                              "description": "Host Query",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "host_report": {
                              "aliases": [],
                              "description": "Host Report",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "tcp": {
                          "aliases": [],
                          "description": "TCP flags.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "ack": {
                              "aliases": [],
                              "description": "Match on the ACK bit",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "established": {
                              "aliases": [],
                              "description": "Match established connections",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "fin": {
                              "aliases": [],
                              "description": "Match on the FIN bit",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "psh": {
                              "aliases": [],
                              "description": "Match on the PSH bit",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "rst": {
                              "aliases": [],
                              "description": "Match on the RST bit",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "syn": {
                              "aliases": [],
                              "description": "Match on the SYN bit",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "urg": {
                              "aliases": [],
                              "description": "Match on the URG bit",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "remark": {
                      "aliases": [],
                      "description": "Access list entry comment.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "sequence": {
                      "aliases": [],
                      "description": "Sequence number.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "source": {
                      "aliases": [],
                      "description": "Specify the packet source.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "address": {
                          "aliases": [],
                          "description": "Source network address.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "any": {
                          "aliases": [],
                          "description": "Any source address.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "host": {
                          "aliases": [],
                          "description": "Host IP address.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "port_protocol": {
                          "aliases": [],
                          "description": "Specify the destination port or protocol (only for TCP and UDP).",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "eq": {
                              "aliases": [],
                              "description": "Match only packets on a given port number.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "gt": {
                              "aliases": [],
                              "description": "Match only packets with a greater port number.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "lt": {
                              "aliases": [],
                              "description": "Match only packets with a lower port number.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "neq": {
                              "aliases": [],
                              "description": "Match only packets not on a given port number.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "range": {
                              "aliases": [],
                              "description": "Match only packets in the range of port numbers.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "end": {
                                  "aliases": [],
                                  "description": "Specify the end of the port range.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "start": {
                                  "aliases": [],
                                  "description": "Specify the start of the port range.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        },
                        "prefix": {
                          "aliases": [],
                          "description": "Source network prefix. Only for prefixes of mask value less than 31 for ipv4 and 127 for ipv6. Prefixes of mask 32 (ipv4) and 128 (ipv6) should be given in the 'host' key.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "wildcard_bits": {
                          "aliases": [],
                          "description": "Source wildcard bits.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Name of the ACL.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "afi": {
              "aliases": [],
              "description": "The Address Family Indicator (AFI) for the ACL.",
              "type": "str",
              "required": true,
              "choices": [
                "ipv4",
                "ipv6"
              ],
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section 'ip(v6)* access-list).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "deleted",
            "gathered",
            "merged",
            "overridden",
            "rendered",
            "replaced",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "ACLs resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n\n- name: Merge new ACLs configuration\n  cisco.nxos.nxos_acls:\n    config:\n    - afi: ipv4\n      acls:\n      - name: ACL1v4\n        aces:\n        - grant: deny\n          destination:\n            address: 192.0.2.64\n            wildcard_bits: 0.0.0.255\n          source:\n            any: true\n            port_protocol:\n              lt: 55\n          protocol: tcp\n          protocol_options:\n            tcp:\n              ack: true\n              fin: true\n          sequence: 50\n\n    - afi: ipv6\n      acls:\n      - name: ACL1v6\n        aces:\n        - grant: permit\n          sequence: 10\n          source:\n            any: true\n          destination:\n            prefix: 2001:db8:12::/32\n          protocol: sctp\n    state: merged\n\n# After state:\n# ------------\n#\n# ip access-list ACL1v4\n#  50 deny tcp any lt 55 192.0.2.64 0.0.0.255 ack fin\n# ipv6 access-list ACL1v6\n#  10 permit sctp any any\n\n# Using replaced\n\n# Before state:\n# ----------------\n#\n# ip access-list ACL1v4\n#   10 permit ip any any\n#   20 deny udp any any\n# ip access-list ACL2v4\n#   10 permit ahp 192.0.2.0 0.0.0.255 any\n# ip access-list ACL1v6\n#   10 permit sctp any any\n#   20 remark IPv6 ACL\n# ip access-list ACL2v6\n#  10 deny ipv6 any 2001:db8:3000::/36\n#  20 permit tcp 2001:db8:2000:2::2/128 2001:db8:2000:ab::2/128\n\n- name: Replace existing ACL configuration with provided configuration\n  cisco.nxos.nxos_acls:\n    config:\n    - afi: ipv4\n    - afi: ipv6\n      acls:\n      - name: ACL1v6\n        aces:\n        - sequence: 20\n          grant: permit\n          source:\n            any: true\n          destination:\n            any: true\n          protocol: pip\n\n        - remark: Replaced ACE\n\n      - name: ACL2v6\n    state: replaced\n\n# After state:\n# ---------------\n#\n# ipv6 access-list ACL1v6\n#   20 permit pip any any\n#   30 remark Replaced ACE\n# ipv6 access-list ACL2v6\n\n# Using overridden\n\n# Before state:\n# ----------------\n#\n# ip access-list ACL1v4\n#   10 permit ip any any\n#   20 deny udp any any\n# ip access-list ACL2v4\n#   10 permit ahp 192.0.2.0 0.0.0.255 any\n# ip access-list ACL1v6\n#   10 permit sctp any any\n#   20 remark IPv6 ACL\n# ip access-list ACL2v6\n#  10 deny ipv6 any 2001:db8:3000::/36\n#  20 permit tcp 2001:db8:2000:2::2/128 2001:db8:2000:ab::2/128\n\n- name: Override existing configuration with provided configuration\n  cisco.nxos.nxos_acls:\n    config:\n    - afi: ipv4\n      acls:\n      - name: NewACL\n        aces:\n        - grant: deny\n          source:\n            address: 192.0.2.0\n            wildcard_bits: 0.0.255.255\n          destination:\n            any: true\n          protocol: eigrp\n        - remark: Example for overridden state\n    state: overridden\n\n# After state:\n# ------------\n#\n# ip access-list NewACL\n#   10 deny eigrp 192.0.2.0 0.0.255.255 any\n#   20 remark Example for overridden state\n\n# Using deleted:\n#\n# Before state:\n# -------------\n#\n# ip access-list ACL1v4\n#   10 permit ip any any\n#   20 deny udp any any\n# ip access-list ACL2v4\n#   10 permit ahp 192.0.2.0 0.0.0.255 any\n# ip access-list ACL1v6\n#   10 permit sctp any any\n#   20 remark IPv6 ACL\n# ip access-list ACL2v6\n#  10 deny ipv6 any 2001:db8:3000::/36\n#  20 permit tcp 2001:db8:2000:2::2/128 2001:db8:2000:ab::2/128\n\n- name: Delete all ACLs\n  cisco.nxos.nxos_acls:\n    config:\n    state: deleted\n\n# After state:\n# -----------\n#\n\n\n# Before state:\n# -------------\n#\n# ip access-list ACL1v4\n#   10 permit ip any any\n#   20 deny udp any any\n# ip access-list ACL2v4\n#   10 permit ahp 192.0.2.0 0.0.0.255 any\n# ip access-list ACL1v6\n#   10 permit sctp any any\n#   20 remark IPv6 ACL\n# ip access-list ACL2v6\n#  10 deny ipv6 any 2001:db8:3000::/36\n#  20 permit tcp 2001:db8:2000:2::2/128 2001:db8:2000:ab::2/128\n\n- name: Delete all ACLs in given AFI\n  cisco.nxos.nxos_acls:\n    config:\n    - afi: ipv4\n    state: deleted\n\n# After state:\n# ------------\n#\n# ip access-list ACL1v6\n#   10 permit sctp any any\n#   20 remark IPv6 ACL\n# ip access-list ACL2v6\n#  10 deny ipv6 any 2001:db8:3000::/36\n#  20 permit tcp 2001:db8:2000:2::2/128 2001:db8:2000:ab::2/128\n\n\n\n# Before state:\n# -------------\n#\n# ip access-list ACL1v4\n#   10 permit ip any any\n#   20 deny udp any any\n# ip access-list ACL2v4\n#   10 permit ahp 192.0.2.0 0.0.0.255 any\n# ipv6 access-list ACL1v6\n#   10 permit sctp any any\n#   20 remark IPv6 ACL\n# ipv6 access-list ACL2v6\n#  10 deny ipv6 any 2001:db8:3000::/36\n#  20 permit tcp 2001:db8:2000:2::2/128 2001:db8:2000:ab::2/128\n\n- name: Delete specific ACLs\n  cisco.nxos.nxos_acls:\n    config:\n    - afi: ipv4\n      acls:\n      - name: ACL1v4\n      - name: ACL2v4\n    - afi: ipv6\n      acls:\n      - name: ACL1v6\n    state: deleted\n\n# After state:\n# ------------\n# ipv6 access-list ACL2v6\n#  10 deny ipv6 any 2001:db8:3000::/36\n#  20 permit tcp 2001:db8:2000:2::2/128 2001:db8:2000:ab::2/128\n\n# Using parsed\n\n- name: Parse given config to structured data\n  cisco.nxos.nxos_acls:\n    running_config: |\n      ip access-list ACL1v4\n        50 deny tcp any lt 55 192.0.2.64 0.0.0.255 ack fin\n      ipv6 access-list ACL1v6\n        10 permit sctp any any\n    state: parsed\n\n# returns:\n# parsed:\n# - afi: ipv4\n#   acls:\n#     - name: ACL1v4\n#       aces:\n#         - grant: deny\n#           destination:\n#             address: 192.0.2.64\n#             wildcard_bits: 0.0.0.255\n#           source:\n#             any: true\n#             port_protocol:\n#               lt: 55\n#           protocol: tcp\n#           protocol_options:\n#             tcp:\n#               ack: true\n#               fin: true\n#           sequence: 50\n#\n# - afi: ipv6\n#   acls:\n#     - name: ACL1v6\n#       aces:\n#         - grant: permit\n#           sequence: 10\n#           source:\n#             any: true\n#           destination:\n#             prefix: 2001:db8:12::/32\n#           protocol: sctp\n\n\n# Using gathered:\n\n# Before state:\n# ------------\n#\n# ip access-list ACL1v4\n#  50 deny tcp any lt 55 192.0.2.64 0.0.0.255 ack fin\n# ipv6 access-list ACL1v6\n#  10 permit sctp any any\n\n- name: Gather existing configuration\n  cisco.nxos.nxos_acls:\n    state: gathered\n\n# returns:\n# gathered:\n# - afi: ipv4\n#   acls:\n#     - name: ACL1v4\n#       aces:\n#         - grant: deny\n#           destination:\n#             address: 192.0.2.64\n#             wildcard_bits: 0.0.0.255\n#           source:\n#             any: true\n#             port_protocol:\n#               lt: 55\n#           protocol: tcp\n#           protocol_options:\n#             tcp:\n#               ack: true\n#               fin: true\n#           sequence: 50\n\n# - afi: ipv6\n#   acls:\n#     - name: ACL1v6\n#       aces:\n#         - grant: permit\n#           sequence: 10\n#           source:\n#             any: true\n#           destination:\n#             prefix: 2001:db8:12::/32\n#           protocol: sctp\n\n\n# Using rendered\n\n- name: Render required configuration to be pushed to the device\n  cisco.nxos.nxos_acls:\n    config:\n    - afi: ipv4\n      acls:\n      - name: ACL1v4\n        aces:\n        - grant: deny\n          destination:\n            address: 192.0.2.64\n            wildcard_bits: 0.0.0.255\n          source:\n            any: true\n            port_protocol:\n              lt: 55\n          protocol: tcp\n          protocol_options:\n            tcp:\n              ack: true\n              fin: true\n          sequence: 50\n\n    - afi: ipv6\n      acls:\n      - name: ACL1v6\n        aces:\n        - grant: permit\n          sequence: 10\n          source:\n            any: true\n          destination:\n            prefix: 2001:db8:12::/32\n          protocol: sctp\n    state: rendered\n\n# returns:\n# rendered:\n#  ip access-list ACL1v4\n#   50 deny tcp any lt 55 192.0.2.64 0.0.0.255 ack fin\n#  ipv6 access-list ACL1v6\n#   10 permit sctp any any\n"
  },
  "cisco.nxos.nxos_banner": {
    "doc": {
      "description": "This will configure both exec and motd banners on remote devices running Cisco NXOS. It allows playbooks to add or remove banner text from the active running configuration.",
      "has_action": true,
      "notes": "Since responses from the device are always read with surrounding whitespaces stripped, tasks that configure banners with preceeding or trailing whitespaces will not be idempotent.\nLimited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "banner": {
          "aliases": [],
          "description": "Specifies which banner that should be configured on the remote device.",
          "type": "str",
          "required": true,
          "choices": [
            "exec",
            "motd"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether or not the configuration is present in the current devices active running configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "The banner text that should be present in the remote device running configuration. This argument accepts a multiline string, with no empty lines. Requires I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage multiline banners on Cisco NXOS devices",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: configure the exec banner\n  cisco.nxos.nxos_banner:\n    banner: exec\n    text: |\n      this is my exec banner\n      that contains a multiline\n      string\n    state: present\n- name: remove the motd banner\n  cisco.nxos.nxos_banner:\n    banner: motd\n    state: absent\n- name: Configure banner from file\n  cisco.nxos.nxos_banner:\n    banner: motd\n    text: \"{{ lookup('file', './config_partial/raw_banner.cfg') }}\"\n    state: present\n"
  },
  "cisco.nxos.nxos_bfd_global": {
    "doc": {
      "description": "Manages Bidirectional Forwarding Detection (BFD) global-level configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 9.2(2)\nUnsupported for Cisco MDS\nBFD global will automatically enable 'feature bfd' if it is disabled.\nBFD global does not have a 'state' parameter. All of the BFD commands are unique and are defined if 'feature bfd' is enabled.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "echo_interface": {
          "aliases": [],
          "description": "Loopback interface used for echo frames.\nValid values are loopback interface name or 'deleted'.\nNot supported on N5K/N6K",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "echo_rx_interval": {
          "aliases": [],
          "description": "BFD Echo receive interval in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "fabricpath_interval": {
          "aliases": [],
          "description": "BFD fabricpath interval timer values.\nValue must be a dict defining values for keys (tx, min_rx, and multiplier).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "fabricpath_slow_timer": {
          "aliases": [],
          "description": "BFD fabricpath slow rate timer in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "fabricpath_vlan": {
          "aliases": [],
          "description": "BFD fabricpath control vlan.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "BFD interval timer values.\nValue must be a dict defining values for keys (tx, min_rx, and multiplier)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipv4_echo_rx_interval": {
          "aliases": [],
          "description": "BFD IPv4 session echo receive interval in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipv4_interval": {
          "aliases": [],
          "description": "BFD IPv4 interval timer values.\nValue must be a dict defining values for keys (tx, min_rx, and multiplier).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipv4_slow_timer": {
          "aliases": [],
          "description": "BFD IPv4 slow rate timer in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipv6_echo_rx_interval": {
          "aliases": [],
          "description": "BFD IPv6 session echo receive interval in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipv6_interval": {
          "aliases": [],
          "description": "BFD IPv6 interval timer values.\nValue must be a dict defining values for keys (tx, min_rx, and multiplier).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipv6_slow_timer": {
          "aliases": [],
          "description": "BFD IPv6 slow rate timer in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "slow_timer": {
          "aliases": [],
          "description": "BFD slow rate timer in milliseconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "startup_timer": {
          "aliases": [],
          "description": "BFD delayed startup timer in seconds.\nNot supported on N5K/N6K/N7K",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Bidirectional Forwarding Detection (BFD) global-level configuration",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_bfd_global:\n    echo_interface: Ethernet1/2\n    echo_rx_interval: 50\n    interval:\n      tx: 50\n      min_rx: 50\n      multiplier: 4\n"
  },
  "cisco.nxos.nxos_bfd_interfaces": {
    "doc": {
      "description": "Manages attributes of Bidirectional Forwarding Detection (BFD) on the interface.",
      "has_action": true,
      "notes": "Tested against NX-OS 7.0(3)I5(1).\nUnsupported for Cisco MDS\nFeature bfd should be enabled for this module.",
      "options": {
        "config": {
          "aliases": [],
          "description": "The provided configuration",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "bfd": {
              "aliases": [],
              "description": "Enable/Disable Bidirectional Forwarding Detection (BFD) on the interface.",
              "type": "str",
              "required": false,
              "choices": [
                "enable",
                "disable"
              ],
              "suboptions": {}
            },
            "echo": {
              "aliases": [],
              "description": "Enable/Disable BFD Echo functionality on the interface.",
              "type": "str",
              "required": false,
              "choices": [
                "enable",
                "disable"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the interface.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^interface|^feature bfd').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "BFD interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using deleted\n\n- name: Configure interfaces\n  cisco.nxos.nxos_bfd_interfaces:\n    state: deleted\n\n\n# Using merged\n\n- name: Configure interfaces\n  cisco.nxos.nxos_bfd_interfaces:\n    config:\n    - name: Ethernet1/1\n      bfd: enable\n      echo: enable\n    - name: Ethernet1/2\n      bfd: disable\n      echo: disable\n    state: merged\n\n\n# Using overridden\n\n- name: Configure interfaces\n  cisco.nxos.nxos_bfd_interfaces:\n    config:\n    - name: Ethernet1/1\n      bfd: enable\n      echo: enable\n    - name: Ethernet1/2\n      bfd: disable\n      echo: disable\n    state: overridden\n\n\n# Using replaced\n\n- name: Configure interfaces\n  cisco.nxos.nxos_bfd_interfaces:\n    config:\n    - name: Ethernet1/1\n      bfd: enable\n      echo: enable\n    - name: Ethernet1/2\n      bfd: disable\n      echo: disable\n    state: replaced\n\n# Using rendered\n\n- name: Use rendered state to convert task input to device specific commands\n  cisco.nxos.nxos_bfd_interfaces:\n    config:\n    - name: Ethernet1/800\n      bfd: enable\n      echo: enable\n    - name: Ethernet1/801\n      bfd: disable\n      echo: disable\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#   - \"interface Ethernet1/800\"\n#   - \"bfd\"\n#   - \"bfd echo\"\n#   - \"interface Ethernet1/801\"\n#   - \"no bfd\"\n#   - \"no bfd echo\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n\n# feature bfd\n# interface Ethernet1/800\n#   no switchport\n#   no bfd\n#   no bfd echo\n# interface Ethernet1/801\n#   no switchport\n#   no bfd\n# interface Ethernet1/802\n#   no switchport\n#   no bfd echo\n# interface mgmt0\n#   ip address dhcp\n#   vrf member management\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_bfd_interfaces:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n\n# parsed:\n#   - bfd: disable\n#     echo: disable\n#     name: Ethernet1/800\n#   - bfd: disable\n#     echo: enable\n#     name: Ethernet1/801\n#   - bfd: enable\n#     echo: disable\n#     name: Ethernet1/802\n#   - bfd: enable\n#     echo: enable\n#     name: mgmt0\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n\n# feature bfd\n# interface Ethernet1/1\n#   no switchport\n#   no bfd\n# interface Ethernet1/2\n#   no switchport\n#   no bfd echo\n# interface mgmt0\n#   ip address dhcp\n#   vrf member management\n\n- name: Gather bfd_interfaces facts from the device using nxos_bfd_interfaces\n  cisco.nxos.nxos_bfd_interfaces:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n# gathered:\n# - name: Ethernet1/1\n#   bfd: disable\n#   echo: enable\n# - name: Ethernet1/3\n#   echo: disable\n#   bfd: enable\n# - name: mgmt0\n#   bfd: enable\n#   echo: enable\n"
  },
  "cisco.nxos.nxos_bgp": {
    "doc": {
      "description": "Manages BGP configurations on NX-OS switches.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(state=absent) removes the whole BGP ASN configuration when C(vrf=default) or the whole VRF instance within the BGP process when using a different VRF.\nDefault when supported restores params default value.\nConfiguring global params is only permitted if C(vrf=default).\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "asn": {
          "aliases": [],
          "description": "BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "bestpath_always_compare_med": {
          "aliases": [],
          "description": "Enable/Disable MED comparison on paths from different autonomous systems.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bestpath_aspath_multipath_relax": {
          "aliases": [],
          "description": "Enable/Disable load sharing across the providers with different (but equal-length) AS paths.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bestpath_compare_neighborid": {
          "aliases": [],
          "description": "Enable/Disable neighborid. Use this when more paths available than max path config.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bestpath_compare_routerid": {
          "aliases": [],
          "description": "Enable/Disable comparison of router IDs for identical eBGP paths.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bestpath_cost_community_ignore": {
          "aliases": [],
          "description": "Enable/Disable Ignores the cost community for BGP best-path calculations.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bestpath_med_confed": {
          "aliases": [],
          "description": "Enable/Disable enforcement of bestpath to do a MED comparison only between paths originated within a confederation.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bestpath_med_missing_as_worst": {
          "aliases": [],
          "description": "Enable/Disable assigns the value of infinity to received routes that do not carry the MED attribute, making these routes the least desirable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bestpath_med_non_deterministic": {
          "aliases": [],
          "description": "Enable/Disable deterministic selection of the best MED pat from among the paths from the same autonomous system.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster_id": {
          "aliases": [],
          "description": "Route Reflector Cluster-ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "confederation_id": {
          "aliases": [],
          "description": "Routing domain confederation AS.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "confederation_peers": {
          "aliases": [],
          "description": "AS confederation parameters.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "disable_policy_batching": {
          "aliases": [],
          "description": "Enable/Disable the batching evaluation of prefix advertisement to all peers.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disable_policy_batching_ipv4_prefix_list": {
          "aliases": [],
          "description": "Enable/Disable the batching evaluation of prefix advertisements to all peers with prefix list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disable_policy_batching_ipv6_prefix_list": {
          "aliases": [],
          "description": "Enable/Disable the batching evaluation of prefix advertisements to all peers with prefix list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enforce_first_as": {
          "aliases": [],
          "description": "Enable/Disable enforces the neighbor autonomous system to be the first AS number listed in the AS path attribute for eBGP. On NX-OS, this property is only supported in the global BGP context.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "event_history_cli": {
          "aliases": [],
          "description": "Enable/Disable cli event history buffer.",
          "type": "str",
          "required": false,
          "choices": [
            "size_small",
            "size_medium",
            "size_large",
            "size_disable",
            "default",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "event_history_detail": {
          "aliases": [],
          "description": "Enable/Disable detail event history buffer.",
          "type": "str",
          "required": false,
          "choices": [
            "size_small",
            "size_medium",
            "size_large",
            "size_disable",
            "default",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "event_history_events": {
          "aliases": [],
          "description": "Enable/Disable event history buffer.",
          "type": "str",
          "required": false,
          "choices": [
            "size_small",
            "size_medium",
            "size_large",
            "size_disable",
            "default",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "event_history_periodic": {
          "aliases": [],
          "description": "Enable/Disable periodic event history buffer.",
          "type": "str",
          "required": false,
          "choices": [
            "size_small",
            "size_medium",
            "size_large",
            "size_disable",
            "default",
            "true",
            "false"
          ],
          "suboptions": {}
        },
        "fast_external_fallover": {
          "aliases": [],
          "description": "Enable/Disable immediately reset the session if the link to a directly connected BGP peer goes down.  Only supported in the global BGP context.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "flush_routes": {
          "aliases": [],
          "description": "Enable/Disable flush routes in RIB upon controlled restart. On NX-OS, this property is only supported in the global BGP context.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "graceful_restart": {
          "aliases": [],
          "description": "Enable/Disable graceful restart.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "graceful_restart_helper": {
          "aliases": [],
          "description": "Enable/Disable graceful restart helper mode.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "graceful_restart_timers_restart": {
          "aliases": [],
          "description": "Set maximum time for a restart sent to the BGP peer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "graceful_restart_timers_stalepath_time": {
          "aliases": [],
          "description": "Set maximum time that BGP keeps the stale routes from the restarting BGP peer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isolate": {
          "aliases": [],
          "description": "Enable/Disable isolate this router from BGP perspective.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "local_as": {
          "aliases": [],
          "description": "Local AS number to be used within a VRF instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "log_neighbor_changes": {
          "aliases": [],
          "description": "Enable/Disable message logging for neighbor up/down event.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maxas_limit": {
          "aliases": [],
          "description": "Specify Maximum number of AS numbers allowed in the AS-path attribute. Valid values are between 1 and 512.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "neighbor_down_fib_accelerate": {
          "aliases": [],
          "description": "Enable/Disable handle BGP neighbor down event, due to various reasons.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "reconnect_interval": {
          "aliases": [],
          "description": "The BGP reconnection interval for dropped sessions. Valid values are between 1 and 60.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "router_id": {
          "aliases": [],
          "description": "Router Identifier (ID) of the BGP router VRF instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shutdown": {
          "aliases": [],
          "description": "Administratively shutdown the BGP protocol.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_fib_pending": {
          "aliases": [],
          "description": "Enable/Disable advertise only routes programmed in hardware to peers.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timer_bestpath_limit": {
          "aliases": [],
          "description": "Specify timeout for the first best path after a restart, in seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timer_bgp_hold": {
          "aliases": [],
          "description": "Set BGP hold timer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timer_bgp_keepalive": {
          "aliases": [],
          "description": "Set BGP keepalive timer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Name of the VRF. The name 'default' is a valid VRF representing the global BGP.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2023-01-27) Manages BGP configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure a simple ASN\n  cisco.nxos.nxos_bgp:\n    asn: 65535\n    vrf: test\n    router_id: 192.0.2.1\n    state: present\n"
  },
  "cisco.nxos.nxos_bgp_address_family": {
    "doc": {
      "description": "This module manages BGP Address Family configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 9.3.6.\nUnsupported for Cisco MDS\nFor managing BGP neighbor address family configurations please use the M(cisco.nxos.nxos_bgp_neighbor_address_family) module.\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of BGP process configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "address_family": {
              "aliases": [],
              "description": "Address Family related configurations.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "additional_paths": {
                  "aliases": [],
                  "description": "Additional paths configuration.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "install_backup": {
                      "aliases": [],
                      "description": "Install backup path.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "receive": {
                      "aliases": [],
                      "description": "Additional paths Receive capability.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "selection": {
                      "aliases": [],
                      "description": "Additional paths selection",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "route_map": {
                          "aliases": [],
                          "description": "Route-map for additional paths selection",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "send": {
                      "aliases": [],
                      "description": "Additional paths Send capability",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "advertise_l2vpn_evpn": {
                  "aliases": [],
                  "description": "Enable advertising EVPN routes.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "advertise_pip": {
                  "aliases": [],
                  "description": "Advertise physical ip for type-5 route.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "advertise_system_mac": {
                  "aliases": [],
                  "description": "Advertise extra EVPN RT-2 with system MAC.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "afi": {
                  "aliases": [],
                  "description": "Address Family indicator.",
                  "type": "str",
                  "required": true,
                  "choices": [
                    "ipv4",
                    "ipv6",
                    "link-state",
                    "vpnv4",
                    "vpnv6",
                    "l2vpn"
                  ],
                  "suboptions": {}
                },
                "aggregate_address": {
                  "aliases": [],
                  "description": "Configure BGP aggregate prefixes",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "advertise_map": {
                      "aliases": [],
                      "description": "Select attribute information from specific routes.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "as_set": {
                      "aliases": [],
                      "description": "Generate AS-SET information.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "attribute_map": {
                      "aliases": [],
                      "description": "Set attribute information of aggregate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "prefix": {
                      "aliases": [],
                      "description": "Aggregate prefix.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "summary_only": {
                      "aliases": [],
                      "description": "Do not advertise more specifics.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "suppress_map": {
                      "aliases": [],
                      "description": "Conditionally filter more specific routes.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "allow_vni_in_ethertag": {
                  "aliases": [],
                  "description": "Allow VNI in Ethernet Tag field in EVPN route.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "client_to_client": {
                  "aliases": [],
                  "description": "Configure client-to-client route reflection.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "no_reflection": {
                      "aliases": [],
                      "description": "Reflection of routes permitted.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "dampen_igp_metric": {
                  "aliases": [],
                  "description": "Dampen IGP metric-related changes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "dampening": {
                  "aliases": [],
                  "description": "Configure route flap dampening.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "decay_half_life": {
                      "aliases": [],
                      "description": "Decay half life.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "max_suppress_time": {
                      "aliases": [],
                      "description": "Maximum suppress time for stable route.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "route_map": {
                      "aliases": [],
                      "description": "Apply route-map to specify dampening criteria.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "set": {
                      "aliases": [],
                      "description": "Set route flap dampening.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "start_reuse_route": {
                      "aliases": [],
                      "description": "Value to start reusing a route.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "start_suppress_route": {
                      "aliases": [],
                      "description": "Value to start suppressing a route.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "default_information": {
                  "aliases": [],
                  "description": "Control distribution of default information.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "originate": {
                      "aliases": [],
                      "description": "Distribute a default route.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "default_metric": {
                  "aliases": [],
                  "description": "Set metric of redistributed routes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "distance": {
                  "aliases": [],
                  "description": "Configure administrative distance.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "ebgp_routes": {
                      "aliases": [],
                      "description": "Distance for EBGP routes.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "ibgp_routes": {
                      "aliases": [],
                      "description": "Distance for IBGP routes.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "local_routes": {
                      "aliases": [],
                      "description": "Distance for local routes.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "export_gateway_ip": {
                  "aliases": [],
                  "description": "Export Gateway IP to Type-5 EVPN routes for VRF",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "inject_map": {
                  "aliases": [],
                  "description": "Routemap which specifies prefixes to inject.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "copy_attributes": {
                      "aliases": [],
                      "description": "Copy attributes from aggregate.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "exist_map": {
                      "aliases": [],
                      "description": "Routemap which specifies exist condition.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "route_map": {
                      "aliases": [],
                      "description": "Route-map name.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "maximum_paths": {
                  "aliases": [],
                  "description": "Forward packets over multipath paths.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "eibgp": {
                      "aliases": [],
                      "description": "Configure multipath for both EBGP and IBGP paths.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "parallel_paths": {
                          "aliases": [],
                          "description": "Number of parallel paths.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "ibgp": {
                      "aliases": [],
                      "description": "Configure multipath for IBGP paths.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "parallel_paths": {
                          "aliases": [],
                          "description": "Number of parallel paths.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "local": {
                      "aliases": [],
                      "description": "Configure multipath for local paths.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "parallel_paths": {
                          "aliases": [],
                          "description": "Number of parallel paths.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "mixed": {
                      "aliases": [],
                      "description": "Configure multipath for local and remote paths.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "parallel_paths": {
                          "aliases": [],
                          "description": "Number of parallel paths.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "parallel_paths": {
                      "aliases": [],
                      "description": "Number of parallel paths.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "networks": {
                  "aliases": [],
                  "description": "Configure an IP prefix to advertise.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "prefix": {
                      "aliases": [],
                      "description": "IP prefix in CIDR format.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "route_map": {
                      "aliases": [],
                      "description": "Route-map name.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "nexthop": {
                  "aliases": [],
                  "description": "Nexthop tracking.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "route_map": {
                      "aliases": [],
                      "description": "Route-map name.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "trigger_delay": {
                      "aliases": [],
                      "description": "Set the delay to trigger nexthop tracking.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "critical_delay": {
                          "aliases": [],
                          "description": "Nexthop changes affecting reachability.\nDelay value (miliseconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "non_critical_delay": {
                          "aliases": [],
                          "description": "Other nexthop changes.\nDelay value (miliseconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "redistribute": {
                  "aliases": [],
                  "description": "Configure redistribution.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "id": {
                      "aliases": [],
                      "description": "The identifier for the protocol specified.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "protocol": {
                      "aliases": [],
                      "description": "The name of the protocol.",
                      "type": "str",
                      "required": true,
                      "choices": [
                        "am",
                        "direct",
                        "eigrp",
                        "isis",
                        "lisp",
                        "ospf",
                        "ospfv3",
                        "rip",
                        "static",
                        "hmm"
                      ],
                      "suboptions": {}
                    },
                    "route_map": {
                      "aliases": [],
                      "description": "The route map policy to constrain redistribution.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                },
                "retain": {
                  "aliases": [],
                  "description": "Retain the routes based on Target VPN Extended Communities.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "route_target": {
                      "aliases": [],
                      "description": "Specify Target VPN Extended Communities",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "retain_all": {
                          "aliases": [],
                          "description": "All the routes regardless of Target-VPN community",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "route_map": {
                          "aliases": [],
                          "description": "Apply route-map to filter routes.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "safi": {
                  "aliases": [],
                  "description": "Sub Address Family indicator.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "unicast",
                    "multicast",
                    "mvpn",
                    "evpn"
                  ],
                  "suboptions": {}
                },
                "suppress_inactive": {
                  "aliases": [],
                  "description": "Advertise only active routes to peers.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "table_map": {
                  "aliases": [],
                  "description": "Policy for filtering/modifying OSPF routes before sending them to RIB.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "filter": {
                      "aliases": [],
                      "description": "Block the OSPF routes from being sent to RIB.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "name": {
                      "aliases": [],
                      "description": "The Route Map name.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                },
                "timers": {
                  "aliases": [],
                  "description": "Configure bgp related timers.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "bestpath_defer": {
                      "aliases": [],
                      "description": "Configure bestpath defer timer value for batch prefix processing.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "defer_time": {
                          "aliases": [],
                          "description": "Bestpath defer time (mseconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "maximum_defer_time": {
                          "aliases": [],
                          "description": "Maximum bestpath defer time (mseconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "vrf": {
                  "aliases": [],
                  "description": "Virtual Router Context.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "wait_igp_convergence": {
                  "aliases": [],
                  "description": "Delay initial bestpath until redistributed IGPs have converged.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "as_number": {
              "aliases": [],
              "description": "Autonomous System Number of the router.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^router bgp').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nState I(deleted) only removes BGP attributes that this modules manages and does not negate the BGP process completely.\nRefer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "BGP Address Family resource module.",
      "version_added": "2.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# Nexus9000v#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_bgp_address_family:\n    config:\n      as_number: 65536\n      address_family:\n        - afi: ipv4\n          safi: multicast\n          networks:\n            - prefix: 192.0.2.32/27\n            - prefix: 192.0.2.64/27\n              route_map: rmap1\n          nexthop:\n            route_map: rmap2\n            trigger_delay:\n              critical_delay: 120\n              non_critical_delay: 180\n        - afi: ipv4\n          safi: unicast\n          vrf: site-1\n          default_information:\n            originate: True\n          aggregate_address:\n            - prefix: 203.0.113.0/24\n              as_set: True\n              summary_only: True\n        - afi: ipv6\n          safi: multicast\n          vrf: site-1\n          redistribute:\n            - protocol: ospfv3\n              id: 100\n              route_map: rmap-ospf-1\n            - protocol: eigrp\n              id: 101\n              route_map: rmap-eigrp-1\n\n# Task output\n# -------------\n#  before: {}\n#\n#  commands:\n#  - router bgp 65536\n#  - address-family ipv4 multicast\n#  - nexthop route-map rmap2\n#  - nexthop trigger-delay critical 120 non-critical 180\n#  - network 192.0.2.32/27\n#  - network 192.0.2.64/27 route-map rmap1\n#  - vrf site-1\n#  - address-family ipv4 unicast\n#  - default-information originate\n#  - aggregate-address 203.0.113.0/24 as-set summary-only\n#  - address-family ipv6 multicast\n#  - redistribute ospfv3 100 route-map rmap-ospf-1\n#  - redistribute eigrp 101 route-map rmap-eigrp-1\n#\n#  after:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: multicast\n#        networks:\n#          - prefix: 192.0.2.32/27\n#          - prefix: 192.0.2.64/27\n#            route_map: rmap1\n#        nexthop:\n#          route_map: rmap2\n#          trigger_delay:\n#            critical_delay: 120\n#            non_critical_delay: 180\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n#        default_information:\n#          originate: True\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n#      - afi: ipv6\n#        safi: multicast\n#        vrf: site-1\n#        redistribute:\n#          - id: \"100\"\n#            protocol: ospfv3\n#            route_map: rmap-ospf-1\n#          - id: \"101\"\n#            protocol: eigrp\n#            route_map: rmap-eigrp-1\n\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   address-family ipv4 multicast\n#     nexthop route-map rmap2\n#     nexthop trigger-delay critical 120 non-critical 180\n#     network 192.0.2.32/27\n#     network 192.0.2.64/27 route-map rmap1\n#   vrf site-1\n#     address-family ipv4 unicast\n#       default-information originate\n#       aggregate-address 203.0.113.0/24 as-set summary-only\n#     address-family ipv6 multicast\n#       redistribute ospfv3 100 route-map rmap-ospf-1\n#       redistribute eigrp 101 route-map rmap-eigrp-1\n#\n\n# Using replaced\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   address-family ipv4 multicast\n#     nexthop route-map rmap2\n#     nexthop trigger-delay critical 120 non-critical 180\n#     network 192.0.2.32/27\n#     network 192.0.2.64/27 route-map rmap1\n#   vrf site-1\n#     address-family ipv4 unicast\n#       default-information originate\n#       aggregate-address 203.0.113.0/24 as-set summary-only\n#     address-family ipv6 multicast\n#       redistribute ospfv3 100 route-map rmap-ospf-1\n#       redistribute eigrp 101 route-map rmap-eigrp-1\n\n- name: Replace configuration of specified AFs\n  cisco.nxos.nxos_bgp_address_family:\n    config:\n      as_number: 65536\n      address_family:\n        - afi: ipv4\n          safi: multicast\n          networks:\n            - prefix: 192.0.2.64/27\n              route_map: rmap1\n          nexthop:\n            route_map: rmap2\n            trigger_delay:\n              critical_delay: 120\n              non_critical_delay: 180\n          aggregate_address:\n            - prefix: 203.0.113.0/24\n              as_set: True\n              summary_only: True\n        - afi: ipv4\n          safi: unicast\n          vrf: site-1\n    state: replaced\n\n# Task output\n# -------------\n#  before:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: multicast\n#        networks:\n#          - prefix: 192.0.2.32/27\n#          - prefix: 192.0.2.64/27\n#            route_map: rmap1\n#        nexthop:\n#          route_map: rmap2\n#          trigger_delay:\n#            critical_delay: 120\n#            non_critical_delay: 180\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n#        default_information:\n#          originate: True\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n#      - afi: ipv6\n#        safi: multicast\n#        vrf: site-1\n#        redistribute:\n#          - id: \"100\"\n#            protocol: ospfv3\n#            route_map: rmap-ospf-1\n#          - id: \"101\"\n#            protocol: eigrp\n#            route_map: rmap-eigrp-1\n#\n#  commands:\n#  - router bgp 65536\n#  - address-family ipv4 multicast\n#  - no network 192.0.2.32/27\n#  - aggregate-address 203.0.113.0/24 as-set summary-only\n#  - vrf site-1\n#  - address-family ipv4 unicast\n#  - no default-information originate\n#  - no aggregate-address 203.0.113.0/24 as-set summary-only\n#\n#  after:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: multicast\n#        networks:\n#          - prefix: 192.0.2.64/27\n#            route_map: rmap1\n#        nexthop:\n#          route_map: rmap2\n#          trigger_delay:\n#            critical_delay: 120\n#            non_critical_delay: 180\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n#\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n#\n#      - afi: ipv6\n#        safi: multicast\n#        vrf: site-1\n#        redistribute:\n#          - protocol: ospfv3\n#            id: \"100\"\n#            route_map: rmap-ospf-1\n#          - protocol: eigrp\n#            id: \"101\"\n#            route_map: rmap-eigrp-1\n\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   address-family ipv4 multicast\n#     nexthop route-map rmap2\n#     nexthop trigger-delay critical 120 non-critical 180\n#     network 192.0.2.64/27 route-map rmap1\n#     aggregate-address 203.0.113.0/24 as-set summary-only\n#   vrf site-1\n#     address-family ipv4 unicast\n#     address-family ipv6 multicast\n#       redistribute ospfv3 100 route-map rmap-ospf-1\n#       redistribute eigrp 101 route-map rmap-eigrp-1\n\n# Using overridden\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   address-family ipv4 multicast\n#     nexthop route-map rmap2\n#     nexthop trigger-delay critical 120 non-critical 180\n#     network 192.0.2.32/27\n#     network 192.0.2.64/27 route-map rmap1\n#   vrf site-1\n#     address-family ipv4 unicast\n#       default-information originate\n#       aggregate-address 203.0.113.0/24 as-set summary-only\n#     address-family ipv6 multicast\n#       redistribute ospfv3 100 route-map rmap-ospf-1\n#       redistribute eigrp 101 route-map rmap-eigrp-1\n\n- name: Override all BGP AF configuration with provided configuration\n  cisco.nxos.nxos_bgp_address_family: &overridden\n    config:\n      as_number: 65536\n      address_family:\n        - afi: ipv4\n          safi: multicast\n          networks:\n            - prefix: 192.0.2.64/27\n              route_map: rmap1\n          aggregate_address:\n            - prefix: 203.0.113.0/24\n              as_set: True\n              summary_only: True\n        - afi: ipv4\n          safi: unicast\n          vrf: site-1\n    state: overridden\n\n# Task output\n# -------------\n#  before:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: multicast\n#        networks:\n#          - prefix: 192.0.2.32/27\n#          - prefix: 192.0.2.64/27\n#            route_map: rmap1\n#        nexthop:\n#          route_map: rmap2\n#          trigger_delay:\n#            critical_delay: 120\n#            non_critical_delay: 180\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n#        default_information:\n#          originate: True\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n#      - afi: ipv6\n#        safi: multicast\n#        vrf: site-1\n#        redistribute:\n#          - id: \"100\"\n#            protocol: ospfv3\n#            route_map: rmap-ospf-1\n#          - id: \"101\"\n#            protocol: eigrp\n#            route_map: rmap-eigrp-1\n#\n#  commands:\n#  - router bgp 65536\n#  - vrf site-1\n#  - no address-family ipv6 multicast\n#  - exit\n#  - address-family ipv4 multicast\n#  - no nexthop route-map rmap2\n#  - no nexthop trigger-delay critical 120 non-critical 180\n#  - aggregate-address 203.0.113.0/24 as-set summary-only\n#  - no network 192.0.2.32/27\n#  - vrf site-1\n#  - address-family ipv4 unicast\n#  - no default-information originate\n#  - no aggregate-address 203.0.113.0/24 as-set summary-only\n#\n#  after:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: multicast\n#        networks:\n#          - prefix: 192.0.2.64/27\n#            route_map: rmap1\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n\n#\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   address-family ipv4 multicast\n#     network 192.0.2.64/27 route-map rmap1\n#     aggregate-address 203.0.113.0/24 as-set summary-only\n#   vrf site-1\n#     address-family ipv4 unicast\n#\n\n# Using deleted to remove specified AFs\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   address-family ipv4 multicast\n#     nexthop route-map rmap2\n#     nexthop trigger-delay critical 120 non-critical 180\n#     network 192.0.2.32/27\n#     network 192.0.2.64/27 route-map rmap1\n#   vrf site-1\n#     address-family ipv4 unicast\n#       default-information originate\n#       aggregate-address 203.0.113.0/24 as-set summary-only\n#     address-family ipv6 multicast\n#       redistribute ospfv3 100 route-map rmap-ospf-1\n#       redistribute eigrp 101 route-map rmap-eigrp-1\n\n- name: Delete specified BGP AFs\n  cisco.nxos.nxos_bgp_address_family:\n    config:\n      as_number: 65536\n      address_family:\n        - afi: ipv4\n          safi: multicast\n        - vrf: site-1\n          afi: ipv6\n          safi: multicast\n    state: deleted\n\n# Task output\n# -------------\n#  before:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: multicast\n#        networks:\n#          - prefix: 192.0.2.32/27\n#          - prefix: 192.0.2.64/27\n#            route_map: rmap1\n#        nexthop:\n#          route_map: rmap2\n#          trigger_delay:\n#            critical_delay: 120\n#            non_critical_delay: 180\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n#        default_information:\n#          originate: True\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n#      - afi: ipv6\n#        safi: multicast\n#        vrf: site-1\n#        redistribute:\n#          - id: \"100\"\n#            protocol: ospfv3\n#            route_map: rmap-ospf-1\n#          - id: \"101\"\n#            protocol: eigrp\n#            route_map: rmap-eigrp-1\n#\n#  commands:\n#  - router bgp 65563\n#  - no address-family ipv4 multicast\n#  - vrf site-1\n#  - no address-family ipv6 multicast\n#\n#  after:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n#        default_information:\n#          originate: True\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   vrf site-1\n#     address-family ipv4 unicast\n#       default-information originate\n#       aggregate-address 203.0.113.0/24 as-set summary-only\n\n# Using deleted to remove all BGP AFs\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   address-family ipv4 multicast\n#     nexthop route-map rmap2\n#     nexthop trigger-delay critical 120 non-critical 180\n#     network 192.0.2.32/27\n#     network 192.0.2.64/27 route-map rmap1\n#   vrf site-1\n#     address-family ipv4 unicast\n#       default-information originate\n#       aggregate-address 203.0.113.0/24 as-set summary-only\n#     address-family ipv6 multicast\n#       redistribute ospfv3 100 route-map rmap-ospf-1\n#       redistribute eigrp 101 route-map rmap-eigrp-1\n\n- name: Delete all BGP AFs\n  cisco.nxos.nxos_bgp_address_family:\n    state: deleted\n\n# Task output\n# -------------\n#  before:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: multicast\n#        networks:\n#          - prefix: 192.0.2.32/27\n#          - prefix: 192.0.2.64/27\n#            route_map: rmap1\n#        nexthop:\n#          route_map: rmap2\n#          trigger_delay:\n#            critical_delay: 120\n#            non_critical_delay: 180\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n#        default_information:\n#          originate: True\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n#      - afi: ipv6\n#        safi: multicast\n#        vrf: site-1\n#        redistribute:\n#          - id: \"100\"\n#            protocol: ospfv3\n#            route_map: rmap-ospf-1\n#          - id: \"101\"\n#            protocol: eigrp\n#            route_map: rmap-eigrp-1\n#\n#  commands:\n#  - router bgp 65563\n#  - no address-family ipv4 multicast\n#  - vrf site-1\n#  - no address-family ipv4 unicast\n#  - no address-family ipv6 multicast\n#\n#  after:\n#    as_number: \"65536\"\n\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n# Nexus9000v#\n\n# Using rendered\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_bgp_address_family:\n    config:\n      as_number: 65536\n      address_family:\n        - afi: ipv4\n          safi: multicast\n          networks:\n            - prefix: 192.0.2.32/27\n            - prefix: 192.0.2.64/27\n              route_map: rmap1\n          nexthop:\n            route_map: rmap2\n            trigger_delay:\n              critical_delay: 120\n              non_critical_delay: 180\n        - afi: ipv4\n          safi: unicast\n          vrf: site-1\n          default_information:\n            originate: True\n          aggregate_address:\n            - prefix: 203.0.113.0/24\n              as_set: True\n              summary_only: True\n        - afi: ipv6\n          safi: multicast\n          vrf: site-1\n          redistribute:\n            - protocol: ospfv3\n              id: 100\n              route_map: rmap-ospf-1\n            - protocol: eigrp\n              id: 101\n              route_map: rmap-eigrp-1\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n# rendered:\n# - router bgp 65536\n# - address-family ipv4 multicast\n# - nexthop route-map rmap2\n# - nexthop trigger-delay critical 120 non-critical 180\n# - network 192.0.2.32/27\n# - network 192.0.2.64/27 route-map rmap1\n# - vrf site-1\n# - address-family ipv4 unicast\n# - default-information originate\n# - aggregate-address 203.0.113.0/24 as-set summary-only\n# - address-family ipv6 multicast\n# - redistribute ospfv3 100 route-map rmap-ospf-1\n# - redistribute eigrp 101 route-map rmap-eigrp-1\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# router bgp 65536\n#   address-family ipv4 multicast\n#     nexthop route-map rmap2\n#     nexthop trigger-delay critical 120 non-critical 180\n#     network 192.0.2.32/27\n#    network 192.0.2.64/27 route-map rmap1\n#  vrf site-1\n#    address-family ipv4 unicast\n#      default-information originate\n#      aggregate-address 203.0.113.0/24 as-set summary-only\n#    address-family ipv6 multicast\n#      redistribute ospfv3 100 route-map rmap-ospf-1\n#      redistribute eigrp 101 route-map rmap-eigrp-1\n\n- name: Parse externally provided BGP AF config\n  cisco.nxos.nxos_bgp_address_family:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n#  parsed:\n#    as_number: \"65536\"\n#    address_family:\n#      - afi: ipv4\n#        safi: multicast\n#        networks:\n#          - prefix: 192.0.2.32/27\n#          - prefix: 192.0.2.64/27\n#            route_map: rmap1\n#        nexthop:\n#          route_map: rmap2\n#          trigger_delay:\n#            critical_delay: 120\n#            non_critical_delay: 180\n#      - afi: ipv4\n#        safi: unicast\n#        vrf: site-1\n#        default_information:\n#          originate: True\n#        aggregate_address:\n#          - prefix: 203.0.113.0/24\n#            as_set: True\n#            summary_only: True\n#      - afi: ipv6\n#        safi: multicast\n#        vrf: site-1\n#        redistribute:\n#          - id: \"100\"\n#            protocol: ospfv3\n#            route_map: rmap-ospf-1\n#          - id: \"101\"\n#            protocol: eigrp\n#            route_map: rmap-eigrp-1\n"
  },
  "cisco.nxos.nxos_bgp_af": {
    "doc": {
      "description": "Manages BGP Address-family configurations on NX-OS switches.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(state=absent) removes the whole BGP ASN configuration\nDefault, where supported, restores params default value.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "additional_paths_install": {
          "aliases": [],
          "description": "Install a backup path into the forwarding table and provide prefix independent convergence (PIC) in case of a PE-CE link failure.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "additional_paths_receive": {
          "aliases": [],
          "description": "Enables the receive capability of additional paths for all of the neighbors under this address family for which the capability has not been disabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "additional_paths_selection": {
          "aliases": [],
          "description": "Configures the capability of selecting additional paths for a prefix. Valid values are a string defining the name of the route-map.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "additional_paths_send": {
          "aliases": [],
          "description": "Enables the send capability of additional paths for all of the neighbors under this address family for which the capability has not been disabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "advertise_l2vpn_evpn": {
          "aliases": [],
          "description": "Advertise evpn routes.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "afi": {
          "aliases": [],
          "description": "Address Family Identifier.",
          "type": "str",
          "required": true,
          "choices": [
            "ipv4",
            "ipv6",
            "vpnv4",
            "vpnv6",
            "l2vpn"
          ],
          "suboptions": {}
        },
        "asn": {
          "aliases": [],
          "description": "BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "client_to_client": {
          "aliases": [],
          "description": "Configure client-to-client route reflection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dampen_igp_metric": {
          "aliases": [],
          "description": "Specify dampen value for IGP metric-related changes, in seconds. Valid values are integer and keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dampening_half_time": {
          "aliases": [],
          "description": "Specify decay half-life in minutes for route-flap dampening. Valid values are integer and keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dampening_max_suppress_time": {
          "aliases": [],
          "description": "Specify max suppress time for route-flap dampening stable route. Valid values are integer and keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dampening_reuse_time": {
          "aliases": [],
          "description": "Specify route reuse time for route-flap dampening. Valid values are integer and keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dampening_routemap": {
          "aliases": [],
          "description": "Specify route-map for route-flap dampening. Valid values are a string defining the name of the route-map.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dampening_state": {
          "aliases": [],
          "description": "Enable/disable route-flap dampening.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dampening_suppress_time": {
          "aliases": [],
          "description": "Specify route suppress time for route-flap dampening. Valid values are integer and keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_information_originate": {
          "aliases": [],
          "description": "Default information originate.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "default_metric": {
          "aliases": [],
          "description": "Sets default metrics for routes redistributed into BGP. Valid values are Integer or keyword 'default'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "distance_ebgp": {
          "aliases": [],
          "description": "Sets the administrative distance for eBGP routes. Valid values are Integer or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "distance_ibgp": {
          "aliases": [],
          "description": "Sets the administrative distance for iBGP routes. Valid values are Integer or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "distance_local": {
          "aliases": [],
          "description": "Sets the administrative distance for local BGP routes. Valid values are Integer or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inject_map": {
          "aliases": [],
          "description": "An array of route-map names which will specify prefixes to inject. Each array entry must first specify the inject-map name, secondly an exist-map name, and optionally the copy-attributes keyword which indicates that attributes should be copied from the aggregate. For example [['lax_inject_map', 'lax_exist_map'], ['nyc_inject_map', 'nyc_exist_map', 'copy-attributes'], ['fsd_inject_map', 'fsd_exist_map']].",
          "type": "list",
          "required": false,
          "elements": "list",
          "suboptions": {}
        },
        "maximum_paths": {
          "aliases": [],
          "description": "Configures the maximum number of equal-cost paths for load sharing. Valid value is an integer in the range 1-64.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maximum_paths_ibgp": {
          "aliases": [],
          "description": "Configures the maximum number of ibgp equal-cost paths for load sharing. Valid value is an integer in the range 1-64.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "Networks to configure. Valid value is a list of network prefixes to advertise. The list must be in the form of an array. Each entry in the array must include a prefix address and an optional route-map. For example [['10.0.0.0/16', 'routemap_LA'], ['192.168.1.1', 'Chicago'], ['192.168.2.0/24'], ['192.168.3.0/24', 'routemap_NYC']].",
          "type": "list",
          "required": false,
          "elements": "list",
          "suboptions": {}
        },
        "next_hop_route_map": {
          "aliases": [],
          "description": "Configure a route-map for valid nexthops. Valid values are a string defining the name of the route-map.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "redistribute": {
          "aliases": [],
          "description": "A list of redistribute directives. Multiple redistribute entries are allowed. The list must be in the form of a nested array. the first entry of each array defines the source-protocol to redistribute from; the second entry defines a route-map name. A route-map is highly advised but may be optional on some platforms, in which case it may be omitted from the array list. For example [['direct', 'rm_direct'], ['lisp', 'rm_lisp']].",
          "type": "list",
          "required": false,
          "elements": "list",
          "suboptions": {}
        },
        "retain_route_target": {
          "aliases": [],
          "description": "Retains all of the routes or the routes which are part of configured route-map. Valid values are route-map names or keyword C(all) or keyword C(default).  C(all) retains all the routes regardless of Target-VPN community. C(default) will disable the retain route target option. If you are using route-map name please ensure that the name is not same as C(all) and C(default).",
          "type": "str",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "safi": {
          "aliases": [],
          "description": "Sub Address Family Identifier.",
          "type": "str",
          "required": true,
          "choices": [
            "unicast",
            "multicast",
            "evpn"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_inactive": {
          "aliases": [],
          "description": "Advertises only active routes to peers.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "table_map": {
          "aliases": [],
          "description": "Apply table-map to filter routes downloaded into URIB. Valid values are a string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "table_map_filter": {
          "aliases": [],
          "description": "Filters routes rejected by the route-map and does not download them to the RIB.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Name of the VRF. The name 'default' is a valid VRF representing the global bgp.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2023-02-24) Manages BGP Address-family configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# configure a simple address-family\n- cisco.nxos.nxos_bgp_af:\n    asn: 65535\n    vrf: TESTING\n    afi: ipv4\n    safi: unicast\n    advertise_l2vpn_evpn: true\n    state: present\n    retain_route_target: all\n"
  },
  "cisco.nxos.nxos_bgp_global": {
    "doc": {
      "description": "This module manages global BGP configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 9.3.6.\nUnsupported for Cisco MDS\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of BGP process configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "affinity_group": {
              "aliases": [],
              "description": "Configure an affinity group.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "group_id": {
                  "aliases": [],
                  "description": "Affinity Group ID.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "as_number": {
              "aliases": [],
              "description": "Autonomous System Number of the router.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "bestpath": {
              "aliases": [],
              "description": "Define the default bestpath selection algorithm.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "always_compare_med": {
                  "aliases": [],
                  "description": "Compare MED on paths from different AS.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "as_path": {
                  "aliases": [],
                  "description": "AS-Path.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "ignore": {
                      "aliases": [],
                      "description": "Ignore AS-Path during bestpath selection.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "multipath_relax": {
                      "aliases": [],
                      "description": "Relax AS-Path restriction when choosing multipaths.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "compare_neighborid": {
                  "aliases": [],
                  "description": "When more paths are available than max path config, use neighborid as tie-breaker.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "compare_routerid": {
                  "aliases": [],
                  "description": "Compare router-id for identical EBGP paths.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "cost_community_ignore": {
                  "aliases": [],
                  "description": "Ignore cost communities in bestpath selection.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "igp_metric_ignore": {
                  "aliases": [],
                  "description": "Ignore IGP metric for next-hop during bestpath selection.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "med": {
                  "aliases": [],
                  "description": "MED",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "confed": {
                      "aliases": [],
                      "description": "Compare MED only from paths originated from within a confederation.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "missing_as_worst": {
                      "aliases": [],
                      "description": "Treat missing MED as highest MED.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "non_deterministic": {
                      "aliases": [],
                      "description": "Not always pick the best-MED path among paths from same AS.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "cluster_id": {
              "aliases": [],
              "description": "Configure Route Reflector Cluster-ID.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "confederation": {
              "aliases": [],
              "description": "AS confederation parameters.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "identifier": {
                  "aliases": [],
                  "description": "Set routing domain confederation AS.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "peers": {
                  "aliases": [],
                  "description": "Peer ASs in BGP confederation.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "disable_policy_batching": {
              "aliases": [],
              "description": "Disable batching evaluation of outbound policy for a peer.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "ipv4": {
                  "aliases": [],
                  "description": "IPv4 address-family settings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "prefix_list": {
                      "aliases": [],
                      "description": "Name of prefix-list to apply.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "ipv6": {
                  "aliases": [],
                  "description": "IPv6 address-family settings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "prefix_list": {
                      "aliases": [],
                      "description": "Name of prefix-list to apply.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "nexthop": {
                  "aliases": [],
                  "description": "Batching based on nexthop.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "set": {
                  "aliases": [],
                  "description": "Set policy batching.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "dynamic_med_interval": {
              "aliases": [],
              "description": "Sets the interval for dampening of med changes.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "enforce_first_as": {
              "aliases": [],
              "description": "Enforce neighbor AS is the first AS in AS-PATH attribute (EBGP).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enhanced_error": {
              "aliases": [],
              "description": "Enable BGP Enhanced error handling.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "fabric_soo": {
              "aliases": [],
              "description": "Fabric site of origin.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "fast_external_fallover": {
              "aliases": [],
              "description": "Immediately reset the session if the link to a directly connected BGP peer goes down.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "flush_routes": {
              "aliases": [],
              "description": "Flush routes in RIB upon controlled restart.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "graceful_restart": {
              "aliases": [],
              "description": "Configure Graceful Restart functionality.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "helper": {
                  "aliases": [],
                  "description": "Configure Graceful Restart Helper mode functionality.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "restart_time": {
                  "aliases": [],
                  "description": "Maximum time for restart advertised to peers.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "set": {
                  "aliases": [],
                  "description": "Enable graceful-restart.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "stalepath_time": {
                  "aliases": [],
                  "description": "Maximum time to keep a restarting peer's stale routes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "graceful_shutdown": {
              "aliases": [],
              "description": "Graceful-shutdown for BGP protocol.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "activate": {
                  "aliases": [],
                  "description": "Send graceful-shutdown community on all routes.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "route_map": {
                      "aliases": [],
                      "description": "Apply route-map to modify attributes for outbound.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "set": {
                      "aliases": [],
                      "description": "Activiate graceful-shutdown.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "aware": {
                  "aliases": [],
                  "description": "Lower preference of routes carrying graceful-shutdown community.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "isolate": {
              "aliases": [],
              "description": "Isolate this router from BGP perspective.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "include_local": {
                  "aliases": [],
                  "description": "Withdraw both local and remote BGP routes.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "set": {
                  "aliases": [],
                  "description": "Withdraw remote BGP routes to isolate this router.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "log_neighbor_changes": {
              "aliases": [],
              "description": "Log a message for neighbor up/down event.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "maxas_limit": {
              "aliases": [],
              "description": "Allow AS-PATH attribute from EBGP neighbor imposing a limit on number of ASes.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "neighbor_down": {
              "aliases": [],
              "description": "Handle BGP neighbor down event, due to various reasons.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "fib_accelerate": {
                  "aliases": [],
                  "description": "Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "neighbors": {
              "aliases": [],
              "description": "Configure BGP neighbors.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "bfd": {
                  "aliases": [],
                  "description": "Bidirectional Fast Detection for the neighbor.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "multihop": {
                      "aliases": [],
                      "description": "Multihop session.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "interval": {
                          "aliases": [],
                          "description": "Configure BFD session interval parameters.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "min_rx_interval": {
                              "aliases": [],
                              "description": "Minimum RX interval.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "multiplier": {
                              "aliases": [],
                              "description": "Detect Multiplier.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "tx_interval": {
                              "aliases": [],
                              "description": "TX interval in milliseconds.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set BFD multihop.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "set": {
                      "aliases": [],
                      "description": "Set BFD for this neighbor.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "singlehop": {
                      "aliases": [],
                      "description": "Single-hop session.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bmp_activate_server": {
                  "aliases": [],
                  "description": "Specify server ID for activating BMP monitoring for the peer.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "capability": {
                  "aliases": [],
                  "description": "Capability.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "suppress_4_byte_as": {
                      "aliases": [],
                      "description": "Suppress 4-byte AS Capability.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Neighbor specific descripion.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "disable_connected_check": {
                  "aliases": [],
                  "description": "Disable check for directly connected peer.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "dont_capability_negotiate": {
                  "aliases": [],
                  "description": "Don't negotiate capability with this neighbor.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "dscp": {
                  "aliases": [],
                  "description": "Set dscp value for tcp transport.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dynamic_capability": {
                  "aliases": [],
                  "description": "Dynamic Capability",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "ebgp_multihop": {
                  "aliases": [],
                  "description": "Specify multihop TTL for remote peer.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "graceful_shutdown": {
                  "aliases": [],
                  "description": "Graceful-shutdown for this neighbor.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "activate": {
                      "aliases": [],
                      "description": "Send graceful-shutdown community.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "route_map": {
                          "aliases": [],
                          "description": "Apply route-map to modify attributes for outbound.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set activate.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "inherit": {
                  "aliases": [],
                  "description": "Inherit a template.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "peer": {
                      "aliases": [],
                      "description": "Peer template to inherit.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "peer_session": {
                      "aliases": [],
                      "description": "Peer-session template to inherit.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "local_as": {
                  "aliases": [],
                  "description": "Specify the local-as number for the eBGP neighbor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "log_neighbor_changes": {
                  "aliases": [],
                  "description": "Log message for neighbor up/down event.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "disable": {
                      "aliases": [],
                      "description": "Disable logging of neighbor up/down event.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "set": {
                      "aliases": [],
                      "description": "Set log-neighbor-changes.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "low_memory": {
                  "aliases": [],
                  "description": "Behaviour in low memory situations.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "exempt": {
                      "aliases": [],
                      "description": "Do not shutdown this peer when under memory pressure.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "neighbor_address": {
                  "aliases": [],
                  "description": "IP address/Prefix of the neighbor or interface.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "neighbor_affinity_group": {
                  "aliases": [],
                  "description": "Configure an affinity group.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "group_id": {
                      "aliases": [],
                      "description": "Affinity Group ID.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "password": {
                  "aliases": [],
                  "description": "Configure a password for neighbor.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "encryption": {
                      "aliases": [],
                      "description": "0 specifies an UNENCRYPTED neighbor password.\n3 specifies an 3DES ENCRYPTED neighbor password will follow.\n7 specifies a Cisco type 7  ENCRYPTED neighbor password will follow.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "key": {
                      "aliases": [],
                      "description": "Authentication password.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "path_attribute": {
                  "aliases": [],
                  "description": "BGP path attribute optional filtering.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "action": {
                      "aliases": [],
                      "description": "Action.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "discard",
                        "treat-as-withdraw"
                      ],
                      "suboptions": {}
                    },
                    "range": {
                      "aliases": [],
                      "description": "Path attribute range.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "end": {
                          "aliases": [],
                          "description": "Path attribute range end value.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "start": {
                          "aliases": [],
                          "description": "Path attribute range start value.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "type": {
                      "aliases": [],
                      "description": "Path attribute type",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "peer_type": {
                  "aliases": [],
                  "description": "Neighbor facing",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "fabric-border-leaf",
                    "fabric-external"
                  ],
                  "suboptions": {}
                },
                "remote_as": {
                  "aliases": [],
                  "description": "Specify Autonomous System Number of the neighbor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "remove_private_as": {
                  "aliases": [],
                  "description": "Remove private AS number from outbound updates.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "all": {
                      "aliases": [],
                      "description": "All.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "replace_as": {
                      "aliases": [],
                      "description": "Replace.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "set": {
                      "aliases": [],
                      "description": "Remove private AS.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "shutdown": {
                  "aliases": [],
                  "description": "Administratively shutdown this neighbor.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "timers": {
                  "aliases": [],
                  "description": "Configure keepalive and hold timers.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "holdtime": {
                      "aliases": [],
                      "description": "Holdtime (seconds).",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "keepalive": {
                      "aliases": [],
                      "description": "Keepalive interval (seconds).",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "transport": {
                  "aliases": [],
                  "description": "BGP transport connection.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "connection_mode": {
                      "aliases": [],
                      "description": "Specify type of connection.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "passive": {
                          "aliases": [],
                          "description": "Allow passive connection setup only.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "ttl_security": {
                  "aliases": [],
                  "description": "Enable TTL Security Mechanism.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "hops": {
                      "aliases": [],
                      "description": "Specify hop count for remote peer.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "update_source": {
                  "aliases": [],
                  "description": "Specify source of BGP session and updates.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "nexthop": {
              "aliases": [],
              "description": "Nexthop resolution options.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "suppress_default_resolution": {
                  "aliases": [],
                  "description": "Prohibit use of default route for nexthop address resolution.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "rd": {
              "aliases": [],
              "description": "Secondary Route Distinguisher for vxlan multisite border gateway.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "dual": {
                  "aliases": [],
                  "description": "Generate Secondary RD for all VRFs and L2VNIs.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "id": {
                  "aliases": [],
                  "description": "Specify 2 byte value for ID.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "reconnect_interval": {
              "aliases": [],
              "description": "Configure connection reconnect interval.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "router_id": {
              "aliases": [],
              "description": "Specify the IP address to use as router-id.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "shutdown": {
              "aliases": [],
              "description": "Administratively shutdown BGP protocol.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "suppress_fib_pending": {
              "aliases": [],
              "description": "Advertise only routes that are programmed in hardware to peers.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "timers": {
              "aliases": [],
              "description": "Configure bgp related timers.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "bestpath_limit": {
                  "aliases": [],
                  "description": "Configure timeout for first bestpath after restart.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "always": {
                      "aliases": [],
                      "description": "Configure update-delay-always option.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "timeout": {
                      "aliases": [],
                      "description": "Bestpath timeout (seconds).",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bgp": {
                  "aliases": [],
                  "description": "Configure different bgp keepalive and holdtimes.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "holdtime": {
                      "aliases": [],
                      "description": "Holdtime (seconds).",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "keepalive": {
                      "aliases": [],
                      "description": "Keepalive interval (seconds).",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "prefix_peer_timeout": {
                  "aliases": [],
                  "description": "Prefix Peer timeout (seconds).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "prefix_peer_wait": {
                  "aliases": [],
                  "description": "Configure wait timer for a prefix peer.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "vrfs": {
              "aliases": [],
              "description": "Virtual Router Context configurations.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "allocate_index": {
                  "aliases": [],
                  "description": "Configure allocate-index.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "bestpath": {
                  "aliases": [],
                  "description": "Define the default bestpath selection algorithm.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "always_compare_med": {
                      "aliases": [],
                      "description": "Compare MED on paths from different AS.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "as_path": {
                      "aliases": [],
                      "description": "AS-Path.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "ignore": {
                          "aliases": [],
                          "description": "Ignore AS-Path during bestpath selection.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "multipath_relax": {
                          "aliases": [],
                          "description": "Relax AS-Path restriction when choosing multipaths.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "compare_neighborid": {
                      "aliases": [],
                      "description": "When more paths are available than max path config, use neighborid as tie-breaker.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "compare_routerid": {
                      "aliases": [],
                      "description": "Compare router-id for identical EBGP paths.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "cost_community_ignore": {
                      "aliases": [],
                      "description": "Ignore cost communities in bestpath selection.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "igp_metric_ignore": {
                      "aliases": [],
                      "description": "Ignore IGP metric for next-hop during bestpath selection.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "med": {
                      "aliases": [],
                      "description": "MED",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "confed": {
                          "aliases": [],
                          "description": "Compare MED only from paths originated from within a confederation.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "missing_as_worst": {
                          "aliases": [],
                          "description": "Treat missing MED as highest MED.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "non_deterministic": {
                          "aliases": [],
                          "description": "Not always pick the best-MED path among paths from same AS.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "cluster_id": {
                  "aliases": [],
                  "description": "Configure Route Reflector Cluster-ID.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "confederation": {
                  "aliases": [],
                  "description": "AS confederation parameters.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "identifier": {
                      "aliases": [],
                      "description": "Set routing domain confederation AS.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "peers": {
                      "aliases": [],
                      "description": "Peer ASs in BGP confederation.",
                      "type": "list",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                },
                "graceful_restart": {
                  "aliases": [],
                  "description": "Configure Graceful Restart functionality.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "helper": {
                      "aliases": [],
                      "description": "Configure Graceful Restart Helper mode functionality.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "restart_time": {
                      "aliases": [],
                      "description": "Maximum time for restart advertised to peers.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "set": {
                      "aliases": [],
                      "description": "Enable graceful-restart.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "stalepath_time": {
                      "aliases": [],
                      "description": "Maximum time to keep a restarting peer's stale routes.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "local_as": {
                  "aliases": [],
                  "description": "Specify the local-as for this vrf.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "log_neighbor_changes": {
                  "aliases": [],
                  "description": "Log a message for neighbor up/down event.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "maxas_limit": {
                  "aliases": [],
                  "description": "Allow AS-PATH attribute from EBGP neighbor imposing a limit on number of ASes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "neighbor_down": {
                  "aliases": [],
                  "description": "Handle BGP neighbor down event, due to various reasons.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "fib_accelerate": {
                      "aliases": [],
                      "description": "Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "neighbors": {
                  "aliases": [],
                  "description": "Configure BGP neighbors.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "bfd": {
                      "aliases": [],
                      "description": "Bidirectional Fast Detection for the neighbor.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "multihop": {
                          "aliases": [],
                          "description": "Multihop session.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "interval": {
                              "aliases": [],
                              "description": "Configure BFD session interval parameters.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "min_rx_interval": {
                                  "aliases": [],
                                  "description": "Minimum RX interval.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "multiplier": {
                                  "aliases": [],
                                  "description": "Detect Multiplier.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "tx_interval": {
                                  "aliases": [],
                                  "description": "TX interval in milliseconds.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set BFD multihop.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set BFD for this neighbor.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "singlehop": {
                          "aliases": [],
                          "description": "Single-hop session.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "bmp_activate_server": {
                      "aliases": [],
                      "description": "Specify server ID for activating BMP monitoring for the peer.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "capability": {
                      "aliases": [],
                      "description": "Capability.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "suppress_4_byte_as": {
                          "aliases": [],
                          "description": "Suppress 4-byte AS Capability.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "description": {
                      "aliases": [],
                      "description": "Neighbor specific descripion.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "disable_connected_check": {
                      "aliases": [],
                      "description": "Disable check for directly connected peer.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "dont_capability_negotiate": {
                      "aliases": [],
                      "description": "Don't negotiate capability with this neighbor.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "dscp": {
                      "aliases": [],
                      "description": "Set dscp value for tcp transport.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "dynamic_capability": {
                      "aliases": [],
                      "description": "Dynamic Capability",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "ebgp_multihop": {
                      "aliases": [],
                      "description": "Specify multihop TTL for remote peer.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "graceful_shutdown": {
                      "aliases": [],
                      "description": "Graceful-shutdown for this neighbor.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "activate": {
                          "aliases": [],
                          "description": "Send graceful-shutdown community.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "route_map": {
                              "aliases": [],
                              "description": "Apply route-map to modify attributes for outbound.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set activate.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "inherit": {
                      "aliases": [],
                      "description": "Inherit a template.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "peer": {
                          "aliases": [],
                          "description": "Peer template to inherit.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "peer_session": {
                          "aliases": [],
                          "description": "Peer-session template to inherit.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "local_as": {
                      "aliases": [],
                      "description": "Specify the local-as number for the eBGP neighbor.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "log_neighbor_changes": {
                      "aliases": [],
                      "description": "Log message for neighbor up/down event.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "disable": {
                          "aliases": [],
                          "description": "Disable logging of neighbor up/down event.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set log-neighbor-changes.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "low_memory": {
                      "aliases": [],
                      "description": "Behaviour in low memory situations.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "exempt": {
                          "aliases": [],
                          "description": "Do not shutdown this peer when under memory pressure.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "neighbor_address": {
                      "aliases": [],
                      "description": "IP address/Prefix of the neighbor or interface.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "neighbor_affinity_group": {
                      "aliases": [],
                      "description": "Configure an affinity group.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "group_id": {
                          "aliases": [],
                          "description": "Affinity Group ID.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "password": {
                      "aliases": [],
                      "description": "Configure a password for neighbor.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "encryption": {
                          "aliases": [],
                          "description": "0 specifies an UNENCRYPTED neighbor password.\n3 specifies an 3DES ENCRYPTED neighbor password will follow.\n7 specifies a Cisco type 7  ENCRYPTED neighbor password will follow.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "key": {
                          "aliases": [],
                          "description": "Authentication password.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "path_attribute": {
                      "aliases": [],
                      "description": "BGP path attribute optional filtering.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "action": {
                          "aliases": [],
                          "description": "Action.",
                          "type": "str",
                          "required": false,
                          "choices": [
                            "discard",
                            "treat-as-withdraw"
                          ],
                          "suboptions": {}
                        },
                        "range": {
                          "aliases": [],
                          "description": "Path attribute range.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "end": {
                              "aliases": [],
                              "description": "Path attribute range end value.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "start": {
                              "aliases": [],
                              "description": "Path attribute range start value.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "type": {
                          "aliases": [],
                          "description": "Path attribute type",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "peer_type": {
                      "aliases": [],
                      "description": "Neighbor facing",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "fabric-border-leaf",
                        "fabric-external"
                      ],
                      "suboptions": {}
                    },
                    "remote_as": {
                      "aliases": [],
                      "description": "Specify Autonomous System Number of the neighbor.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "remove_private_as": {
                      "aliases": [],
                      "description": "Remove private AS number from outbound updates.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "all": {
                          "aliases": [],
                          "description": "All.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "replace_as": {
                          "aliases": [],
                          "description": "Replace.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Remove private AS.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "shutdown": {
                      "aliases": [],
                      "description": "Administratively shutdown this neighbor.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "timers": {
                      "aliases": [],
                      "description": "Configure keepalive and hold timers.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "holdtime": {
                          "aliases": [],
                          "description": "Holdtime (seconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "keepalive": {
                          "aliases": [],
                          "description": "Keepalive interval (seconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "transport": {
                      "aliases": [],
                      "description": "BGP transport connection.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "connection_mode": {
                          "aliases": [],
                          "description": "Specify type of connection.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "passive": {
                              "aliases": [],
                              "description": "Allow passive connection setup only.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "ttl_security": {
                      "aliases": [],
                      "description": "Enable TTL Security Mechanism.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "hops": {
                          "aliases": [],
                          "description": "Specify hop count for remote peer.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "update_source": {
                      "aliases": [],
                      "description": "Specify source of BGP session and updates.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "reconnect_interval": {
                  "aliases": [],
                  "description": "Configure connection reconnect interval.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "router_id": {
                  "aliases": [],
                  "description": "Specify the IP address to use as router-id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "timers": {
                  "aliases": [],
                  "description": "Configure bgp related timers.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "bestpath_limit": {
                      "aliases": [],
                      "description": "Configure timeout for first bestpath after restart.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "always": {
                          "aliases": [],
                          "description": "Configure update-delay-always option.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "timeout": {
                          "aliases": [],
                          "description": "Bestpath timeout (seconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "bgp": {
                      "aliases": [],
                      "description": "Configure different bgp keepalive and holdtimes.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "holdtime": {
                          "aliases": [],
                          "description": "Holdtime (seconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "keepalive": {
                          "aliases": [],
                          "description": "Keepalive interval (seconds).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "prefix_peer_timeout": {
                      "aliases": [],
                      "description": "Prefix Peer timeout (seconds).",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "prefix_peer_wait": {
                      "aliases": [],
                      "description": "Configure wait timer for a prefix peer.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "vrf": {
                  "aliases": [],
                  "description": "VRF name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^router bgp').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nState I(purged) removes all the BGP configurations from the target device. Use caution with this state.\nState I(deleted) only removes BGP attributes that this modules manages and does not negate the BGP process completely. Thereby, preserving address-family related configurations under BGP context.\nRunning states I(deleted) and I(replaced) will result in an error if there are address-family configuration lines present under a neighbor, or a vrf context that is to be removed. Please use the M(cisco.nxos.nxos_bgp_af) or M(cisco.nxos.nxos_bgp_neighbor_af) modules for prior cleanup.\nStates I(merged) and I(replaced) will result in a failure if BGP is already configured with a different ASN than what is provided in the task. In such cases, please use state I(purged) to remove the existing BGP process and proceed further.\nRefer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "deleted",
            "purged",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "BGP Global resource module.",
      "version_added": "1.4.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# Nexus9000v#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_bgp_global:\n    config:\n      as_number: 65563\n      router_id: 192.168.1.1\n      bestpath:\n        as_path:\n          multipath_relax: True\n        compare_neighborid: True\n        cost_community_ignore: True\n      confederation:\n        identifier: 42\n        peers:\n          - 65020\n          - 65030\n          - 65040\n      log_neighbor_changes: True\n      maxas_limit: 20\n      neighbors:\n        - neighbor_address: 192.168.1.100\n          neighbor_affinity_group:\n            group_id: 160\n          bmp_activate_server: 1\n          remote_as: 65563\n          description: NBR-1\n          low_memory:\n            exempt: True\n        - neighbor_address: 192.168.1.101\n          remote_as: 65563\n          password:\n            encryption: 7\n            key: 12090404011C03162E\n      neighbor_down:\n        fib_accelerate: True\n      vrfs:\n        - vrf: site-1\n          allocate_index: 5000\n          local_as: 200\n          log_neighbor_changes: True\n          neighbors:\n            - neighbor_address: 198.51.100.1\n              description: site-1-nbr-1\n              password:\n                encryption: 3\n                key: 13D4D3549493D2877B1DC116EE27A6BE\n              remote_as: 65562\n            - neighbor_address: 198.51.100.2\n              remote_as: 65562\n              description: site-1-nbr-2\n        - vrf: site-2\n          local_as: 300\n          log_neighbor_changes: True\n          neighbors:\n            - neighbor_address: 203.0.113.2\n              description: site-2-nbr-1\n              password:\n                encryption: 3\n                key: AF92F4C16A0A0EC5BDF56CF58BC030F6\n              remote_as: 65568\n          neighbor_down:\n            fib_accelerate: True\n\n# Task output\n# -------------\n# before: {}\n#\n# commands:\n#  - router bgp 65563\n#  - bestpath as-path multipath-relax\n#  - bestpath compare-neighborid\n#  - bestpath cost-community ignore\n#  - confederation identifier 42\n#  - log-neighbor-changes\n#  - maxas-limit 20\n#  - neighbor-down fib-accelerate\n#  - router-id 192.168.1.1\n#  - confederation peers 65020 65030 65040\n#  - neighbor 192.168.1.100\n#  - remote-as 65563\n#  - affinity-group 160\n#  - bmp-activate-server 1\n#  - description NBR-1\n#  - low-memory exempt\n#  - neighbor 192.168.1.101\n#  - remote-as 65563\n#  - password 7 12090404011C03162E\n#  - vrf site-1\n#  - allocate-index 5000\n#  - local-as 200\n#  - log-neighbor-changes\n#  - neighbor 198.51.100.1\n#  - remote-as 65562\n#  - description site-1-nbr-1\n#  - password 3 13D4D3549493D2877B1DC116EE27A6BE\n#  - neighbor 198.51.100.2\n#  - remote-as 65562\n#  - description site-1-nbr-2\n#  - vrf site-2\n#  - local-as 300\n#  - log-neighbor-changes\n#  - neighbor-down fib-accelerate\n#  - neighbor 203.0.113.2\n#  - remote-as 65568\n#  - description site-2-nbr-1\n#  - password 3 AF92F4C16A0A0EC5BDF56CF58BC030F6\n#\n# after:\n#    as_number: '65563'\n#    bestpath:\n#      as_path:\n#        multipath_relax: true\n#      compare_neighborid: true\n#      cost_community_ignore: true\n#    confederation:\n#      identifier: '42'\n#      peers:\n#      - '65020'\n#      - '65030'\n#      - '65040'\n#    log_neighbor_changes: true\n#    maxas_limit: 20\n#    neighbor_down:\n#      fib_accelerate: true\n#    neighbors:\n#    - bmp_activate_server: 1\n#      description: NBR-1\n#      low_memory:\n#        exempt: true\n#      neighbor_address: 192.168.1.100\n#      neighbor_affinity_group:\n#        group_id: 160\n#      remote_as: '65563'\n#    - neighbor_address: 192.168.1.101\n#      password:\n#        encryption: 7\n#        key: 12090404011C03162E\n#      remote_as: '65563'\n#    router_id: 192.168.1.1\n#    vrfs:\n#    - allocate_index: 5000\n#      local_as: '200'\n#      log_neighbor_changes: true\n#      neighbors:\n#      - description: site-1-nbr-1\n#        neighbor_address: 198.51.100.1\n#        password:\n#          encryption: 3\n#          key: 13D4D3549493D2877B1DC116EE27A6BE\n#        remote_as: '65562'\n#      - description: site-1-nbr-2\n#        neighbor_address: 198.51.100.2\n#        remote_as: '65562'\n#      vrf: site-1\n#    - local_as: '300'\n#      log_neighbor_changes: true\n#      neighbor_down:\n#        fib_accelerate: true\n#      neighbors:\n#      - description: site-2-nbr-1\n#        neighbor_address: 203.0.113.2\n#        password:\n#          encryption: 3\n#          key: AF92F4C16A0A0EC5BDF56CF58BC030F6\n#        remote_as: '65568'\n#      vrf: site-2\n\n\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65563\n#   router-id 192.168.1.1\n#   confederation identifier 42\n#   confederation peers 65020 65030 65040\n#   bestpath as-path multipath-relax\n#   bestpath cost-community ignore\n#   bestpath compare-neighborid\n#   neighbor-down fib-accelerate\n#   maxas-limit 20\n#   log-neighbor-changes\n#   neighbor 192.168.1.100\n#     low-memory exempt\n#     bmp-activate-server 1\n#     remote-as 65563\n#     description NBR-1\n#     affinity-group 160\n#   neighbor 192.168.1.101\n#     remote-as 65563\n#     password 7 12090404011C03162E\n#   vrf site-1\n#     local-as 200\n#     log-neighbor-changes\n#     allocate-index 5000\n#     neighbor 198.51.100.1\n#       remote-as 65562\n#       description site-1-nbr-1\n#       password 3 13D4D3549493D2877B1DC116EE27A6BE\n#     neighbor 198.51.100.2\n#       remote-as 65562\n#       description site-1-nbr-2\n#   vrf site-2\n#     local-as 300\n#     neighbor-down fib-accelerate\n#     log-neighbor-changes\n#     neighbor 203.0.113.2\n#       remote-as 65568\n#       description site-2-nbr-1\n#       password 3 AF92F4C16A0A0EC5BDF56CF58BC030F6\n\n# Using replaced\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65563\n#   router-id 192.168.1.1\n#   confederation identifier 42\n#   confederation peers 65020 65030 65040\n#   bestpath as-path multipath-relax\n#   bestpath cost-community ignore\n#   bestpath compare-neighborid\n#   neighbor-down fib-accelerate\n#   maxas-limit 20\n#   log-neighbor-changes\n#   neighbor 192.168.1.100\n#     low-memory exempt\n#     bmp-activate-server 1\n#     remote-as 65563\n#     description NBR-1\n#     affinity-group 160\n#   neighbor 192.168.1.101\n#     remote-as 65563\n#     password 7 12090404011C03162E\n#   vrf site-1\n#     local-as 200\n#     log-neighbor-changes\n#     allocate-index 5000\n#     neighbor 198.51.100.1\n#       remote-as 65562\n#       description site-1-nbr-1\n#       password 3 13D4D3549493D2877B1DC116EE27A6BE\n#     neighbor 198.51.100.2\n#       remote-as 65562\n#       description site-1-nbr-2\n#   vrf site-2\n#     local-as 300\n#     neighbor-down fib-accelerate\n#     log-neighbor-changes\n#     neighbor 203.0.113.2\n#       remote-as 65568\n#       description site-2-nbr-1\n#       password 3 AF92F4C16A0A0EC5BDF56CF58BC030F6\n\n- name: Replace BGP configuration with provided configuration\n  cisco.nxos.nxos_bgp_global:\n    config:\n      as_number: 65563\n      router_id: 192.168.1.1\n      bestpath:\n        compare_neighborid: True\n        cost_community_ignore: True\n      confederation:\n        identifier: 42\n        peers:\n          - 65020\n          - 65030\n          - 65050\n      maxas_limit: 40\n      neighbors:\n        - neighbor_address: 192.168.1.100\n          neighbor_affinity_group:\n            group_id: 160\n          bmp_activate_server: 1\n          remote_as: 65563\n          description: NBR-1\n          low_memory:\n            exempt: True\n      neighbor_down:\n        fib_accelerate: True\n      vrfs:\n        - vrf: site-2\n          local_as: 300\n          log_neighbor_changes: True\n          neighbors:\n            - neighbor_address: 203.0.113.2\n              password:\n                encryption: 7\n                key: 12090404011C03162E\n          neighbor_down:\n            fib_accelerate: True\n    state: replaced\n\n# Task output\n# -------------\n#  before:\n#    as_number: '65563'\n#    bestpath:\n#      as_path:\n#        multipath_relax: true\n#      compare_neighborid: true\n#      cost_community_ignore: true\n#    confederation:\n#      identifier: '42'\n#      peers:\n#      - '65020'\n#      - '65030'\n#      - '65040'\n#    log_neighbor_changes: true\n#    maxas_limit: 20\n#    neighbor_down:\n#      fib_accelerate: true\n#    neighbors:\n#    - bmp_activate_server: 1\n#      description: NBR-1\n#      low_memory:\n#        exempt: true\n#      neighbor_address: 192.168.1.100\n#      neighbor_affinity_group:\n#        group_id: 160\n#      remote_as: '65563'\n#    - neighbor_address: 192.168.1.101\n#      password:\n#        encryption: 7\n#        key: 12090404011C03162E\n#      remote_as: '65563'\n#    router_id: 192.168.1.1\n#    vrfs:\n#    - allocate_index: 5000\n#      local_as: '200'\n#      log_neighbor_changes: true\n#      neighbors:\n#      - description: site-1-nbr-1\n#        neighbor_address: 198.51.100.1\n#        password:\n#          encryption: 3\n#          key: 13D4D3549493D2877B1DC116EE27A6BE\n#        remote_as: '65562'\n#      - description: site-1-nbr-2\n#        neighbor_address: 198.51.100.2\n#        remote_as: '65562'\n#      vrf: site-1\n#    - local_as: '300'\n#      log_neighbor_changes: true\n#      neighbor_down:\n#        fib_accelerate: true\n#      neighbors:\n#      - description: site-2-nbr-1\n#        neighbor_address: 203.0.113.2\n#        password:\n#          encryption: 3\n#          key: AF92F4C16A0A0EC5BDF56CF58BC030F6\n#        remote_as: '65568'\n#      vrf: site-2\n#\n# commands:\n#  - router bgp 65563\n#  - no bestpath as-path multipath-relax\n#  - no log-neighbor-changes\n#  - maxas-limit 40\n#  - no confederation peers 65020 65030 65040\n#  - confederation peers 65020 65030 65050\n#  - no neighbor 192.168.1.101\n#  - vrf site-2\n#  - neighbor 203.0.113.2\n#  - no remote-as 65568\n#  - no description site-2-nbr-1\n#  - password 7 12090404011C03162E\n#  - no vrf site-1\n\n#  after:\n#    as_number: '65563'\n#    bestpath:\n#      compare_neighborid: true\n#      cost_community_ignore: true\n#    confederation:\n#      identifier: '42'\n#      peers:\n#      - '65020'\n#      - '65030'\n#      - '65050'\n#    maxas_limit: 40\n#    neighbor_down:\n#      fib_accelerate: true\n#    neighbors:\n#    - bmp_activate_server: 1\n#      description: NBR-1\n#      low_memory:\n#        exempt: true\n#      neighbor_address: 192.168.1.100\n#      neighbor_affinity_group:\n#        group_id: 160\n#      remote_as: '65563'\n#    router_id: 192.168.1.1\n#    vrfs:\n#    - local_as: '300'\n#      log_neighbor_changes: true\n#      neighbor_down:\n#        fib_accelerate: true\n#      neighbors:\n#      - neighbor_address: 203.0.113.2\n#        password:\n#          encryption: 7\n#          key: 12090404011C03162E\n#      vrf: site-2\n#\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65563\n#   router-id 192.168.1.1\n#   confederation identifier 42\n#   confederation peers 65020 65030 65050\n#   bestpath cost-community ignore\n#   bestpath compare-neighborid\n#   neighbor-down fib-accelerate\n#   maxas-limit 40\n#   neighbor 192.168.1.100\n#     low-memory exempt\n#     bmp-activate-server 1\n#     remote-as 65563\n#     description NBR-1\n#     affinity-group 160\n#   vrf site-2\n#     local-as 300\n#     neighbor-down fib-accelerate\n#     log-neighbor-changes\n#     neighbor 203.0.113.2\n#       password 7 12090404011C03162E\n\n# Using deleted\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65563\n#   router-id 192.168.1.1\n#   confederation identifier 42\n#   confederation peers 65020 65030 65040\n#   bestpath as-path multipath-relax\n#   bestpath cost-community ignore\n#   bestpath compare-neighborid\n#   neighbor-down fib-accelerate\n#   maxas-limit 20\n#   log-neighbor-changes\n#   address-family ipv4 unicast\n#     default-metric 400\n#     suppress-inactive\n#     default-information originate\n#   address-family ipv6 multicast\n#     wait-igp-convergence\n#     redistribute eigrp eigrp-1 route-map site-1-rmap\n#   neighbor 192.168.1.100\n#     low-memory exempt\n#     bmp-activate-server 1\n#     remote-as 65563\n#     description NBR-1\n#     affinity-group 160\n#   neighbor 192.168.1.101\n#     remote-as 65563\n#     password 7 12090404011C03162E\n#   vrf site-1\n#     local-as 200\n#     log-neighbor-changes\n#     allocate-index 5000\n#     address-family ipv4 multicast\n#       maximum-paths 40\n#       dampen-igp-metric 1200\n#     neighbor 198.51.100.1\n#       remote-as 65562\n#       description site-1-nbr-1\n#       password 3 13D4D3549493D2877B1DC116EE27A6BE\n#     neighbor 198.51.100.2\n#       remote-as 65562\n#       description site-1-nbr-2\n#   vrf site-2\n#     local-as 300\n#     neighbor-down fib-accelerate\n#     log-neighbor-changes\n#     neighbor 203.0.113.2\n#       remote-as 65568\n#       description site-1-nbr-1\n#       password 3 AF92F4C16A0A0EC5BDF56CF58BC030F6\n\n- name: Delete BGP configurations handled by this module\n  cisco.nxos.nxos_bgp_global:\n    state: deleted\n\n# Task output\n# -------------\n\n# before:\n#    as_number: '65563'\n#    bestpath:\n#      as_path:\n#        multipath_relax: true\n#      compare_neighborid: true\n#      cost_community_ignore: true\n#    confederation:\n#      identifier: '42'\n#      peers:\n#      - '65020'\n#      - '65030'\n#      - '65040'\n#    log_neighbor_changes: true\n#    maxas_limit: 20\n#    neighbor_down:\n#      fib_accelerate: true\n#    neighbors:\n#    - bmp_activate_server: 1\n#      description: NBR-1\n#      low_memory:\n#        exempt: true\n#      neighbor_address: 192.168.1.100\n#      neighbor_affinity_group:\n#        group_id: 160\n#      remote_as: '65563'\n#    - neighbor_address: 192.168.1.101\n#      password:\n#        encryption: 7\n#        key: 12090404011C03162E\n#      remote_as: '65563'\n#    router_id: 192.168.1.1\n#    vrfs:\n#    - allocate_index: 5000\n#      local_as: '200'\n#      log_neighbor_changes: true\n#      neighbors:\n#      - description: site-1-nbr-1\n#        neighbor_address: 198.51.100.1\n#        password:\n#          encryption: 3\n#          key: 13D4D3549493D2877B1DC116EE27A6BE\n#        remote_as: '65562'\n#      - description: site-1-nbr-2\n#        neighbor_address: 198.51.100.2\n#        remote_as: '65562'\n#      vrf: site-1\n#    - local_as: '300'\n#      log_neighbor_changes: true\n#      neighbor_down:\n#        fib_accelerate: true\n#      neighbors:\n#      - description: site-1-nbr-1\n#        neighbor_address: 203.0.113.2\n#        password:\n#          encryption: 3\n#          key: AF92F4C16A0A0EC5BDF56CF58BC030F6\n#        remote_as: '65568'\n#      vrf: site-2\n#\n# commands:\n#   - router bgp 65563\n#   - no bestpath as-path multipath-relax\n#   - no bestpath compare-neighborid\n#   - no bestpath cost-community ignore\n#   - no confederation identifier 42\n#   - no log-neighbor-changes\n#   - no maxas-limit 20\n#   - no neighbor-down fib-accelerate\n#   - no router-id 192.168.1.1\n#   - no confederation peers 65020 65030 65040\n#   - no neighbor 192.168.1.100\n#   - no neighbor 192.168.1.101\n#   - no vrf site-1\n#   - no vrf site-2\n#\n#  after:\n#    as_number: '65563'\n#\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65563\n#   address-family ipv4 unicast\n#     default-metric 400\n#     suppress-inactive\n#     default-information originate\n#   address-family ipv6 multicast\n#     wait-igp-convergence\n#     redistribute eigrp eigrp-1 route-map site-1-rmap\n#\n\n# Using purged\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65563\n#   router-id 192.168.1.1\n#   confederation identifier 42\n#   confederation peers 65020 65030 65040\n#   bestpath as-path multipath-relax\n#   bestpath cost-community ignore\n#   bestpath compare-neighborid\n#   neighbor-down fib-accelerate\n#   maxas-limit 20\n#   log-neighbor-changes\n#   address-family ipv4 unicast\n#     default-metric 400\n#     suppress-inactive\n#     default-information originate\n#   address-family ipv6 multicast\n#     wait-igp-convergence\n#     redistribute eigrp eigrp-1 route-map site-1-rmap\n#   neighbor 192.168.1.100\n#     low-memory exempt\n#     bmp-activate-server 1\n#     remote-as 65563\n#     description NBR-1\n#     affinity-group 160\n#   neighbor 192.168.1.101\n#     remote-as 65563\n#     password 7 12090404011C03162E\n#   vrf site-1\n#     local-as 200\n#     log-neighbor-changes\n#     allocate-index 5000\n#     address-family ipv4 multicast\n#       maximum-paths 40\n#       dampen-igp-metric 1200\n#     neighbor 198.51.100.1\n#       remote-as 65562\n#       description site-1-nbr-1\n#       password 3 13D4D3549493D2877B1DC116EE27A6BE\n#     neighbor 198.51.100.2\n#       remote-as 65562\n#       description site-1-nbr-2\n#   vrf site-2\n#     local-as 300\n#     neighbor-down fib-accelerate\n#     log-neighbor-changes\n#     neighbor 203.0.113.2\n#       remote-as 65568\n#       description site-1-nbr-1\n#       password 3 AF92F4C16A0A0EC5BDF56CF58BC030F6\n\n- name: Purge all BGP configurations from the device\n  cisco.nxos.nxos_bgp_global:\n    state: purged\n\n# Task output\n# -------------\n\n# before:\n#    as_number: '65563'\n#    bestpath:\n#      as_path:\n#        multipath_relax: true\n#      compare_neighborid: true\n#      cost_community_ignore: true\n#    confederation:\n#      identifier: '42'\n#      peers:\n#      - '65020'\n#      - '65030'\n#      - '65040'\n#    log_neighbor_changes: true\n#    maxas_limit: 20\n#    neighbor_down:\n#      fib_accelerate: true\n#    neighbors:\n#    - bmp_activate_server: 1\n#      description: NBR-1\n#      low_memory:\n#        exempt: true\n#      neighbor_address: 192.168.1.100\n#      neighbor_affinity_group:\n#        group_id: 160\n#      remote_as: '65563'\n#    - neighbor_address: 192.168.1.101\n#      password:\n#        encryption: 7\n#        key: 12090404011C03162E\n#      remote_as: '65563'\n#    router_id: 192.168.1.1\n#    vrfs:\n#    - allocate_index: 5000\n#      local_as: '200'\n#      log_neighbor_changes: true\n#      neighbors:\n#      - description: site-1-nbr-1\n#        neighbor_address: 198.51.100.1\n#        password:\n#          encryption: 3\n#          key: 13D4D3549493D2877B1DC116EE27A6BE\n#        remote_as: '65562'\n#      - description: site-1-nbr-2\n#        neighbor_address: 198.51.100.2\n#        remote_as: '65562'\n#      vrf: site-1\n#    - local_as: '300'\n#      log_neighbor_changes: true\n#      neighbor_down:\n#        fib_accelerate: true\n#      neighbors:\n#      - description: site-1-nbr-1\n#        neighbor_address: 203.0.113.2\n#        password:\n#          encryption: 3\n#          key: AF92F4C16A0A0EC5BDF56CF58BC030F6\n#        remote_as: '65568'\n#      vrf: site-2\n#\n# commands:\n#   - no router bgp 65563\n#\n#  after: {}\n#\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# Nexus9000v#\n\n# Using rendered\n\n- name: Render platform specific configuration lines (without connecting to the device)\n  cisco.nxos.nxos_bgp_global:\n    config:\n      as_number: 65563\n      router_id: 192.168.1.1\n      bestpath:\n        as_path:\n          multipath_relax: True\n        compare_neighborid: True\n        cost_community_ignore: True\n      confederation:\n        identifier: 42\n        peers:\n          - 65020\n          - 65030\n          - 65040\n      log_neighbor_changes: True\n      maxas_limit: 20\n      neighbors:\n        - neighbor_address: 192.168.1.100\n          neighbor_affinity_group:\n            group_id: 160\n          bmp_activate_server: 1\n          remote_as: 65563\n          description: NBR-1\n          low_memory:\n            exempt: True\n        - neighbor_address: 192.168.1.101\n          remote_as: 65563\n          password:\n            encryption: 7\n            key: 12090404011C03162E\n      neighbor_down:\n        fib_accelerate: True\n      vrfs:\n        - vrf: site-1\n          allocate_index: 5000\n          local_as: 200\n          log_neighbor_changes: True\n          neighbors:\n            - neighbor_address: 198.51.100.1\n              description: site-1-nbr-1\n              password:\n                encryption: 3\n                key: 13D4D3549493D2877B1DC116EE27A6BE\n              remote_as: 65562\n            - neighbor_address: 198.51.100.2\n              remote_as: 65562\n              description: site-1-nbr-2\n        - vrf: site-2\n          local_as: 300\n          log_neighbor_changes: True\n          neighbors:\n            - neighbor_address: 203.0.113.2\n              description: site-1-nbr-1\n              password:\n                encryption: 3\n                key: AF92F4C16A0A0EC5BDF56CF58BC030F6\n              remote_as: 65568\n          neighbor_down:\n            fib_accelerate: True\n\n# Task Output (redacted)\n# -----------------------\n# rendered:\n#   - router bgp 65563\n#   - bestpath as-path multipath-relax\n#   - bestpath compare-neighborid\n#   - bestpath cost-community ignore\n#   - confederation identifier 42\n#   - log-neighbor-changes\n#   - maxas-limit 20\n#   - neighbor-down fib-accelerate\n#   - router-id 192.168.1.1\n#   - confederation peers 65020 65030 65040\n#   - neighbor 192.168.1.100\n#   - remote-as 65563\n#   - affinity-group 160\n#   - bmp-activate-server 1\n#   - description NBR-1\n#   - low-memory exempt\n#   - neighbor 192.168.1.101\n#   - remote-as 65563\n#   - password 7 12090404011C03162E\n#   - vrf site-1\n#   - allocate-index 5000\n#   - local-as 200\n#   - log-neighbor-changes\n#   - neighbor 198.51.100.1\n#   - remote-as 65562\n#   - description site-1-nbr-1\n#   - password 3 13D4D3549493D2877B1DC116EE27A6BE\n#   - neighbor 198.51.100.2\n#   - remote-as 65562\n#   - description site-1-nbr-2\n#   - vrf site-2\n#   - local-as 300\n#   - log-neighbor-changes\n#   - neighbor-down fib-accelerate\n#   - neighbor 203.0.113.2\n#   - remote-as 65568\n#   - description site-1-nbr-1\n#   - password 3 AF92F4C16A0A0EC5BDF56CF58BC030F6\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# router bgp 65563\n#   router-id 192.168.1.1\n#   confederation identifier 42\n#   confederation peers 65020 65030 65040\n#   bestpath as-path multipath-relax\n#   bestpath cost-community ignore\n#   bestpath compare-neighborid\n#   neighbor-down fib-accelerate\n#   maxas-limit 20\n#   log-neighbor-changes\n#   neighbor 192.168.1.100\n#     low-memory exempt\n#     bmp-activate-server 1\n#     remote-as 65563\n#     description NBR-1\n#     affinity-group 160\n#   neighbor 192.168.1.101\n#     remote-as 65563\n#     password 7 12090404011C03162E\n#   vrf site-1\n#     local-as 200\n#     log-neighbor-changes\n#     allocate-index 5000\n#     neighbor 198.51.100.1\n#       remote-as 65562\n#       description site-1-nbr-1\n#       password 3 13D4D3549493D2877B1DC116EE27A6BE\n#     neighbor 198.51.100.2\n#       remote-as 65562\n#       description site-1-nbr-2\n#   vrf site-2\n#     local-as 300\n#     neighbor-down fib-accelerate\n#     log-neighbor-changes\n#     neighbor 203.0.113.2\n#       remote-as 65568\n#       description site-1-nbr-1\n#       password 3 AF92F4C16A0A0EC5BDF56CF58BC030F6\n\n- name: Parse externally provided BGP config\n  cisco.nxos.nxos_bgp_global:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n#  parsed:\n#    as_number: '65563'\n#    bestpath:\n#      as_path:\n#        multipath_relax: true\n#      compare_neighborid: true\n#      cost_community_ignore: true\n#    confederation:\n#      identifier: '42'\n#      peers:\n#      - '65020'\n#      - '65030'\n#      - '65040'\n#    log_neighbor_changes: true\n#    maxas_limit: 20\n#    neighbor_down:\n#      fib_accelerate: true\n#    neighbors:\n#    - bmp_activate_server: 1\n#      description: NBR-1\n#      low_memory:\n#        exempt: true\n#      neighbor_address: 192.168.1.100\n#      neighbor_affinity_group:\n#        group_id: 160\n#      remote_as: '65563'\n#    - neighbor_address: 192.168.1.101\n#      password:\n#        encryption: 7\n#        key: 12090404011C03162E\n#      remote_as: '65563'\n#    router_id: 192.168.1.1\n#    vrfs:\n#    - allocate_index: 5000\n#      local_as: '200'\n#      log_neighbor_changes: true\n#      neighbors:\n#      - description: site-1-nbr-1\n#        neighbor_address: 198.51.100.1\n#        password:\n#          encryption: 3\n#          key: 13D4D3549493D2877B1DC116EE27A6BE\n#        remote_as: '65562'\n#      - description: site-1-nbr-2\n#        neighbor_address: 198.51.100.2\n#        remote_as: '65562'\n#      vrf: site-1\n#    - local_as: '300'\n#      log_neighbor_changes: true\n#      neighbor_down:\n#        fib_accelerate: true\n#      neighbors:\n#      - description: site-1-nbr-1\n#        neighbor_address: 203.0.113.2\n#        password:\n#          encryption: 3\n#          key: AF92F4C16A0A0EC5BDF56CF58BC030F6\n#        remote_as: '65568'\n#      vrf: site-2\n\n# Using gathered\n\n# existing config\n#\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65563\n#   router-id 192.168.1.1\n#   confederation identifier 42\n#   confederation peers 65020 65030 65050\n#   bestpath cost-community ignore\n#   bestpath compare-neighborid\n#   neighbor-down fib-accelerate\n#   maxas-limit 40\n#   neighbor 192.168.1.100\n#     low-memory exempt\n#     bmp-activate-server 1\n#     remote-as 65563\n#     description NBR-1\n#     affinity-group 160\n#   vrf site-1\n#   vrf site-2\n#     local-as 300\n#     neighbor-down fib-accelerate\n#     log-neighbor-changes\n#     neighbor 203.0.113.2\n#       password 7 12090404011C03162E\n\n- name: Gather BGP facts using gathered\n  cisco.nxos.nxos_bgp_global:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n#  gathered:\n#    as_number: '65563'\n#    bestpath:\n#      compare_neighborid: true\n#      cost_community_ignore: true\n#    confederation:\n#      identifier: '42'\n#      peers:\n#      - '65020'\n#      - '65030'\n#      - '65050'\n#    maxas_limit: 40\n#    neighbor_down:\n#      fib_accelerate: true\n#    neighbors:\n#    - bmp_activate_server: 1\n#      description: NBR-1\n#      low_memory:\n#        exempt: true\n#      neighbor_address: 192.168.1.100\n#      neighbor_affinity_group:\n#        group_id: 160\n#      remote_as: '65563'\n#    router_id: 192.168.1.1\n#    vrfs:\n#    - vrf: site-1\n#    - local_as: '300'\n#      log_neighbor_changes: true\n#      neighbor_down:\n#        fib_accelerate: true\n#      neighbors:\n#      - neighbor_address: 203.0.113.2\n#        password:\n#          encryption: 7\n#          key: 12090404011C03162E\n#      vrf: site-2\n\n# Remove a neighbor having AF configurations with state replaced (will fail)\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   log-neighbor-changes\n#   maxas-limit 20\n#   router-id 198.51.100.2\n#   neighbor 203.0.113.2\n#     address-family ipv4 unicast\n#       next-hop-self\n#     remote-as 65538\n#     affinity-group 160\n#     description NBR-1\n#     low-memory exempt\n#   neighbor 192.0.2.1\n#     remote-as 65537\n#     password 7 12090404011C03162E\n\n- name: Remove a neighbor having AF configurations (should fail)\n  cisco.nxos.nxos_bgp_global:\n    config:\n      as_number: 65536\n      router_id: 198.51.100.2\n      maxas_limit: 20\n      log_neighbor_changes: True\n      neighbors:\n        - neighbor_address: 192.0.2.1\n          remote_as: 65537\n          password:\n            encryption: 7\n            key: 12090404011C03162E\n    state: replaced\n\n# Task output (redacted)\n# -----------------------\n# fatal: [Nexus9000v]: FAILED! => changed=false\n#    msg: Neighbor 203.0.113.2 has address-family configurations.\n#         Please use the nxos_bgp_neighbor_af module to remove those first.\n\n# Remove a VRF having AF configurations with state replaced (will fail)\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   log-neighbor-changes\n#   maxas-limit 20\n#   router-id 198.51.100.2\n#   neighbor 192.0.2.1\n#     remote-as 65537\n#     password 7 12090404011C03162E\n#   vrf site-1\n#     address-family ipv4 unicast\n#       default-information originate\n#     neighbor 203.0.113.2\n#       remote-as 65538\n#       affinity-group 160\n#       description NBR-1\n#       low-memory exempt\n#   vrf site-2\n#     neighbor-down fib-accelerate\n\n- name: Remove a VRF having AF configurations (should fail)\n  cisco.nxos.nxos_bgp_global:\n    config:\n      as_number: 65536\n      router_id: 198.51.100.2\n      maxas_limit: 20\n      log_neighbor_changes: True\n      neighbors:\n        - neighbor_address: 192.0.2.1\n          remote_as: 65537\n          password:\n            encryption: 7\n            key: 12090404011C03162E\n      vrfs:\n        - vrf: site-2\n          neighbor_down:\n            fib_accelerate: True\n    state: replaced\n\n# Task output (redacted)\n# -----------------------\n# fatal: [Nexus9000v]: FAILED! => changed=false\n#    msg: VRF site-1 has address-family configurations.\n#         Please use the nxos_bgp_af module to remove those first.\n"
  },
  "cisco.nxos.nxos_bgp_neighbor": {
    "doc": {
      "description": "Manages BGP neighbors configurations on NX-OS switches.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(state=absent) removes the whole BGP neighbor configuration.\nDefault, where supported, restores params default value.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "asn": {
          "aliases": [],
          "description": "BGP autonomous system number. Valid values are string, Integer in ASPLAIN or ASDOT notation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "bfd": {
          "aliases": [],
          "description": "Enables/Disables BFD for a given neighbor.\nDependency: ''feature bfd''",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "capability_negotiation": {
          "aliases": [],
          "description": "Configure whether or not to negotiate capability with this neighbor.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "connected_check": {
          "aliases": [],
          "description": "Configure whether or not to check for directly connected peer.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the neighbor.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dynamic_capability": {
          "aliases": [],
          "description": "Configure whether or not to enable dynamic capability.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ebgp_multihop": {
          "aliases": [],
          "description": "Specify multihop TTL for a remote peer. Valid values are integers between 2 and 255, or keyword 'default' to disable this property.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_as": {
          "aliases": [],
          "description": "Specify the local-as number for the eBGP neighbor. Valid values are String or Integer in ASPLAIN or ASDOT notation, or 'default', which means not to configure it.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "log_neighbor_changes": {
          "aliases": [],
          "description": "Specify whether or not to enable log messages for neighbor up/down event.",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable",
            "inherit"
          ],
          "suboptions": {}
        },
        "low_memory_exempt": {
          "aliases": [],
          "description": "Specify whether or not to shut down this neighbor under memory pressure.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maximum_peers": {
          "aliases": [],
          "description": "Specify Maximum number of peers for this neighbor prefix Valid values are between 1 and 1000, or 'default', which does not impose the limit. Note that this parameter is accepted only on neighbors with address/prefix.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "neighbor": {
          "aliases": [],
          "description": "Neighbor Identifier. Valid values are string. Neighbors may use IPv4 or IPv6 notation, with or without prefix length.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "peer_type": {
          "aliases": [],
          "description": "Specify the peer type for BGP session.",
          "type": "str",
          "required": false,
          "choices": [
            "fabric_border_leaf",
            "fabric_external",
            "disable"
          ],
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "pwd": {
          "aliases": [],
          "description": "Specify the password for neighbor. Valid value is string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pwd_type": {
          "aliases": [],
          "description": "Specify the encryption type the password will use. Valid values are '3des' or 'cisco_type_7' encryption or keyword 'default'.",
          "type": "str",
          "required": false,
          "choices": [
            "3des",
            "cisco_type_7",
            "default"
          ],
          "suboptions": {}
        },
        "remote_as": {
          "aliases": [],
          "description": "Specify Autonomous System Number of the neighbor. Valid values are String or Integer in ASPLAIN or ASDOT notation, or 'default', which means not to configure it.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remove_private_as": {
          "aliases": [],
          "description": "Specify the config to remove private AS number from outbound updates. Valid values are 'enable' to enable this config, 'disable' to disable this config, 'all' to remove all private AS number, or 'replace-as', to replace the private AS number.",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable",
            "all",
            "replace-as"
          ],
          "suboptions": {}
        },
        "shutdown": {
          "aliases": [],
          "description": "Configure to administratively shutdown this neighbor.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_4_byte_as": {
          "aliases": [],
          "description": "Configure to suppress 4-byte AS Capability.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timers_holdtime": {
          "aliases": [],
          "description": "Specify holdtime timer value. Valid values are integers between 0 and 3600 in terms of seconds, or 'default', which is 180.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timers_keepalive": {
          "aliases": [],
          "description": "Specify keepalive timer value. Valid values are integers between 0 and 3600 in terms of seconds, or 'default', which is 60.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "transport_passive_only": {
          "aliases": [],
          "description": "Specify whether or not to only allow passive connection setup. Valid values are 'true', 'false', and 'default', which defaults to 'false'. This property can only be configured when the neighbor is in 'ip' address format without prefix length.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "update_source": {
          "aliases": [],
          "description": "Specify source interface of BGP session and updates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Name of the VRF. The name 'default' is a valid VRF representing the global bgp.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2023-01-27) Manages BGP neighbors configurations.",
      "version_added": "1.0.0"
    },
    "examples": "\n# create a new neighbor\n- cisco.nxos.nxos_bgp_neighbor:\n    asn: 65535\n    neighbor: 192.0.2.3\n    local_as: 20\n    remote_as: 30\n    bfd: enable\n    description: just a description\n    update_source: Ethernet1/3\n    state: present\n    peer_type: fabric_external\n"
  },
  "cisco.nxos.nxos_bgp_neighbor_address_family": {
    "doc": {
      "description": "This module manages BGP Neighbor Address Family configuration on devices running Cisco NX-OS.",
      "has_action": false,
      "notes": "Tested against NX-OS 9.3.6.\nUnsupported for Cisco MDS\nFor managing BGP address family configurations please use the M(cisco.nxos.nxos_bgp_address_family) module.\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "BGP Neighbor AF configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "as_number": {
              "aliases": [],
              "description": "Autonomous System Number of the router.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "neighbors": {
              "aliases": [],
              "description": "A list of BGP Neighbor AF configuration.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "address_family": {
                  "aliases": [],
                  "description": "BGP Neighbor Address Family related configurations.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "advertise_map": {
                      "aliases": [],
                      "description": "Specify route-map for conditional advertisement.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "exist_map": {
                          "aliases": [],
                          "description": "Condition route-map to advertise only when prefix in condition exists.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "non_exist_map": {
                          "aliases": [],
                          "description": "Condition route-map to advertise only when prefix in condition does not exist.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "route_map": {
                          "aliases": [],
                          "description": "Route-map name.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        }
                      }
                    },
                    "advertisement_interval": {
                      "aliases": [],
                      "description": "Minimum interval between sending BGP routing updates.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "afi": {
                      "aliases": [],
                      "description": "Address Family indicator.",
                      "type": "str",
                      "required": true,
                      "choices": [
                        "ipv4",
                        "ipv6",
                        "link-state",
                        "vpnv4",
                        "vpnv6",
                        "l2vpn"
                      ],
                      "suboptions": {}
                    },
                    "allowas_in": {
                      "aliases": [],
                      "description": "Accept as-path with my AS present in it.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "max_occurences": {
                          "aliases": [],
                          "description": "Number of occurrences of AS number, default is 3.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Activate allowas-in property.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "as_override": {
                      "aliases": [],
                      "description": "Override matching AS-number while sending update.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "capability": {
                      "aliases": [],
                      "description": "Advertise capability to the peer.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "additional_paths": {
                          "aliases": [],
                          "description": "Additional paths capability.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "receive": {
                              "aliases": [],
                              "description": "Additional paths Receive capability.",
                              "type": "str",
                              "required": false,
                              "choices": [
                                "enable",
                                "disable"
                              ],
                              "suboptions": {}
                            },
                            "send": {
                              "aliases": [],
                              "description": "Additional paths Send capability.",
                              "type": "str",
                              "required": false,
                              "choices": [
                                "enable",
                                "disable"
                              ],
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "default_originate": {
                      "aliases": [],
                      "description": "Originate a default toward this peer.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "route_map": {
                          "aliases": [],
                          "description": "Route-map to specify criteria for originating default.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set default-originate attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "disable_peer_as_check": {
                      "aliases": [],
                      "description": "Disable checking of peer AS-number while advertising.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "filter_list": {
                      "aliases": [],
                      "description": "Name of filter-list.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "inbound": {
                          "aliases": [],
                          "description": "Apply policy to incoming routes.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "outbound": {
                          "aliases": [],
                          "description": "Apply policy to outgoing routes.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "inherit": {
                      "aliases": [],
                      "description": "Inherit a template.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "sequence": {
                          "aliases": [],
                          "description": "Sequence number.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "template": {
                          "aliases": [],
                          "description": "Template name.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "maximum_prefix": {
                      "aliases": [],
                      "description": "Maximum number of prefixes from this neighbor.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "generate_warning_threshold": {
                          "aliases": [],
                          "description": "Threshold percentage at which to generate a warning.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "max_prefix_limit": {
                          "aliases": [],
                          "description": "Maximum prefix limit.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "restart_interval": {
                          "aliases": [],
                          "description": "Restart bgp connection after limit is exceeded.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "warning_only": {
                          "aliases": [],
                          "description": "Only give a warning message when limit is exceeded.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "next_hop_self": {
                      "aliases": [],
                      "description": "Set our address as nexthop (non-reflected).",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "all_routes": {
                          "aliases": [],
                          "description": "Set our address as nexthop for all routes.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set next-hop-self attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "next_hop_third_party": {
                      "aliases": [],
                      "description": "Compute a third-party nexthop if possible.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "prefix_list": {
                      "aliases": [],
                      "description": "Apply prefix-list.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "inbound": {
                          "aliases": [],
                          "description": "Apply policy to incoming routes.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "outbound": {
                          "aliases": [],
                          "description": "Apply policy to outgoing routes.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "rewrite_evpn_rt_asn": {
                      "aliases": [],
                      "description": "Auto generate RTs for EBGP neighbor.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "route_map": {
                      "aliases": [],
                      "description": "Apply route-map to neighbor.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "inbound": {
                          "aliases": [],
                          "description": "Apply policy to incoming routes.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "outbound": {
                          "aliases": [],
                          "description": "Apply policy to outgoing routes.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "route_reflector_client": {
                      "aliases": [],
                      "description": "Configure a neighbor as Route reflector client.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "safi": {
                      "aliases": [],
                      "description": "Sub Address Family indicator.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "unicast",
                        "multicast",
                        "mvpn",
                        "evpn"
                      ],
                      "suboptions": {}
                    },
                    "send_community": {
                      "aliases": [],
                      "description": "Send Community attribute to this neighbor.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "both": {
                          "aliases": [],
                          "description": "Send Standard and Extended Community attributes.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "extended": {
                          "aliases": [],
                          "description": "Send Extended Community attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set send-community attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "standard": {
                          "aliases": [],
                          "description": "Send Standard Community attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "soft_reconfiguration_inbound": {
                      "aliases": [],
                      "description": "Soft reconfiguration.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "always": {
                          "aliases": [],
                          "description": "Always perform inbound soft reconfiguration.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set soft-reconfiguration inbound attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "soo": {
                      "aliases": [],
                      "description": "Specify Site-of-origin extcommunity.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "suppress_inactive": {
                      "aliases": [],
                      "description": "Advertise only active routes to peer.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "unsuppress_map": {
                      "aliases": [],
                      "description": "Route-map to selectively unsuppress suppressed routes.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "weight": {
                      "aliases": [],
                      "description": "Set default weight for routes from this neighbor.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "neighbor_address": {
                  "aliases": [],
                  "description": "IP/IPv6 address of the neighbor.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "vrfs": {
              "aliases": [],
              "description": "Virtual Router Context.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "neighbors": {
                  "aliases": [],
                  "description": "A list of BGP Neighbor AF configuration.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "address_family": {
                      "aliases": [],
                      "description": "BGP Neighbor Address Family related configurations.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "advertise_map": {
                          "aliases": [],
                          "description": "Specify route-map for conditional advertisement.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "exist_map": {
                              "aliases": [],
                              "description": "Condition route-map to advertise only when prefix in condition exists.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "non_exist_map": {
                              "aliases": [],
                              "description": "Condition route-map to advertise only when prefix in condition does not exist.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "route_map": {
                              "aliases": [],
                              "description": "Route-map name.",
                              "type": "str",
                              "required": true,
                              "suboptions": {}
                            }
                          }
                        },
                        "advertisement_interval": {
                          "aliases": [],
                          "description": "Minimum interval between sending BGP routing updates.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "afi": {
                          "aliases": [],
                          "description": "Address Family indicator.",
                          "type": "str",
                          "required": true,
                          "choices": [
                            "ipv4",
                            "ipv6",
                            "link-state",
                            "vpnv4",
                            "vpnv6",
                            "l2vpn"
                          ],
                          "suboptions": {}
                        },
                        "allowas_in": {
                          "aliases": [],
                          "description": "Accept as-path with my AS present in it.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "max_occurences": {
                              "aliases": [],
                              "description": "Number of occurrences of AS number, default is 3.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Activate allowas-in property.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "as_override": {
                          "aliases": [],
                          "description": "Override matching AS-number while sending update.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "capability": {
                          "aliases": [],
                          "description": "Advertise capability to the peer.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "additional_paths": {
                              "aliases": [],
                              "description": "Additional paths capability.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "receive": {
                                  "aliases": [],
                                  "description": "Additional paths Receive capability.",
                                  "type": "str",
                                  "required": false,
                                  "choices": [
                                    "enable",
                                    "disable"
                                  ],
                                  "suboptions": {}
                                },
                                "send": {
                                  "aliases": [],
                                  "description": "Additional paths Send capability.",
                                  "type": "str",
                                  "required": false,
                                  "choices": [
                                    "enable",
                                    "disable"
                                  ],
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        },
                        "default_originate": {
                          "aliases": [],
                          "description": "Originate a default toward this peer.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "route_map": {
                              "aliases": [],
                              "description": "Route-map to specify criteria for originating default.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set default-originate attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "disable_peer_as_check": {
                          "aliases": [],
                          "description": "Disable checking of peer AS-number while advertising.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "filter_list": {
                          "aliases": [],
                          "description": "Name of filter-list.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "inbound": {
                              "aliases": [],
                              "description": "Apply policy to incoming routes.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "outbound": {
                              "aliases": [],
                              "description": "Apply policy to outgoing routes.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "inherit": {
                          "aliases": [],
                          "description": "Inherit a template.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "sequence": {
                              "aliases": [],
                              "description": "Sequence number.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "template": {
                              "aliases": [],
                              "description": "Template name.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "maximum_prefix": {
                          "aliases": [],
                          "description": "Maximum number of prefixes from this neighbor.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "generate_warning_threshold": {
                              "aliases": [],
                              "description": "Threshold percentage at which to generate a warning.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "max_prefix_limit": {
                              "aliases": [],
                              "description": "Maximum prefix limit.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "restart_interval": {
                              "aliases": [],
                              "description": "Restart bgp connection after limit is exceeded.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "warning_only": {
                              "aliases": [],
                              "description": "Only give a warning message when limit is exceeded.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "next_hop_self": {
                          "aliases": [],
                          "description": "Set our address as nexthop (non-reflected).",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "all_routes": {
                              "aliases": [],
                              "description": "Set our address as nexthop for all routes.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set next-hop-self attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "next_hop_third_party": {
                          "aliases": [],
                          "description": "Compute a third-party nexthop if possible.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "prefix_list": {
                          "aliases": [],
                          "description": "Apply prefix-list.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "inbound": {
                              "aliases": [],
                              "description": "Apply policy to incoming routes.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "outbound": {
                              "aliases": [],
                              "description": "Apply policy to outgoing routes.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "rewrite_evpn_rt_asn": {
                          "aliases": [],
                          "description": "Auto generate RTs for EBGP neighbor.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "route_map": {
                          "aliases": [],
                          "description": "Apply route-map to neighbor.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "inbound": {
                              "aliases": [],
                              "description": "Apply policy to incoming routes.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "outbound": {
                              "aliases": [],
                              "description": "Apply policy to outgoing routes.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "route_reflector_client": {
                          "aliases": [],
                          "description": "Configure a neighbor as Route reflector client.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "safi": {
                          "aliases": [],
                          "description": "Sub Address Family indicator.",
                          "type": "str",
                          "required": false,
                          "choices": [
                            "unicast",
                            "multicast",
                            "mvpn",
                            "evpn"
                          ],
                          "suboptions": {}
                        },
                        "send_community": {
                          "aliases": [],
                          "description": "Send Community attribute to this neighbor.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "both": {
                              "aliases": [],
                              "description": "Send Standard and Extended Community attributes.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "extended": {
                              "aliases": [],
                              "description": "Send Extended Community attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set send-community attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "standard": {
                              "aliases": [],
                              "description": "Send Standard Community attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "soft_reconfiguration_inbound": {
                          "aliases": [],
                          "description": "Soft reconfiguration.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "always": {
                              "aliases": [],
                              "description": "Always perform inbound soft reconfiguration.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set soft-reconfiguration inbound attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "soo": {
                          "aliases": [],
                          "description": "Specify Site-of-origin extcommunity.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "suppress_inactive": {
                          "aliases": [],
                          "description": "Advertise only active routes to peer.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "unsuppress_map": {
                          "aliases": [],
                          "description": "Route-map to selectively unsuppress suppressed routes.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "weight": {
                          "aliases": [],
                          "description": "Set default weight for routes from this neighbor.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "neighbor_address": {
                      "aliases": [],
                      "description": "IP/IPv6 address of the neighbor.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                },
                "vrf": {
                  "aliases": [],
                  "description": "VRF name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^router bgp').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nState I(deleted) only removes BGP attributes that this modules manages and does not negate the BGP process completely.\nRefer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "BGP Neighbor Address Family resource module.",
      "version_added": "2.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# Nexus9000v#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_bgp_neighbor_address_family: &id001\n    config:\n      as_number: 65536\n      neighbors:\n        - neighbor_address: 192.0.2.32\n          address_family:\n            - afi: ipv4\n              safi: unicast\n              maximum_prefix:\n                max_prefix_limit: 20\n                generate_warning_threshold: 75\n              weight: 100\n              prefix_list:\n                inbound: rmap1\n                outbound: rmap2\n            - afi: ipv6\n              safi: unicast\n        - neighbor_address: 192.0.2.33\n          address_family:\n            - afi: ipv4\n              safi: multicast\n              inherit:\n                template: BasePolicy\n                sequence: 200\n      vrfs:\n        - vrf: site-1\n          neighbors:\n            - neighbor_address: 203.0.113.1\n              address_family:\n                - afi: ipv4\n                  safi: unicast\n                  suppress_inactive: True\n                  next_hop_self:\n                    set: True\n            - neighbor_address: 203.0.113.2\n              address_family:\n                - afi: ipv6\n                  safi: unicast\n                - afi: ipv4\n                  safi: multicast\n                  send_community:\n                    set: True\n\n# Task output\n# -------------\n#  before: {}\n#\n#  commands:\n#  - router bgp 65536\n#  - neighbor 192.0.2.32\n#  - address-family ipv4 unicast\n#  - maximum-prefix 20 75\n#  - weight 100\n#  - prefix-list rmap1 in\n#  - prefix-list rmap2 out\n#  - address-family ipv6 unicast\n#  - neighbor 192.0.2.33\n#  - address-family ipv4 multicast\n#  - inherit peer-policy BasePolicy 200\n#  - vrf site-1\n#  - neighbor 203.0.113.1\n#  - address-family ipv4 unicast\n#  - suppress-inactive\n#  - next-hop-self\n#  - neighbor 203.0.113.2\n#  - address-family ipv6 unicast\n#  - address-family ipv4 multicast\n#  - send-community\n#\n#  after:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv4\n#            safi: unicast\n#            maximum_prefix:\n#              max_prefix_limit: 20\n#              generate_warning_threshold: 75\n#            weight: 100\n#            prefix_list:\n#              inbound: rmap1\n#              outbound: rmap2\n#          - afi: ipv6\n#            safi: unicast\n#      - neighbor_address: 192.0.2.33\n#        address_family:\n#          - afi: ipv4\n#            safi: multicast\n#            inherit:\n#              template: BasePolicy\n#              sequence: 200\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#                suppress_inactive: true\n#                next_hop_self:\n#                  set: true\n#          - neighbor_address: 203.0.113.2\n#            address_family:\n#              - afi: ipv4\n#                safi: multicast\n#                send_community:\n#                  set: True\n#              - afi: ipv6\n#                safi: unicast\n\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv4 unicast\n#       maximum-prefix 20 75\n#       weight 100\n#       prefix-list rmap1 in\n#       prefix-list rmap2 out\n#     address-family ipv6 unicast\n#   neighbor 192.0.2.33\n#     address-family ipv4 multicast\n#       inherit peer-policy BasePolicy 200\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#         suppress-inactive\n#         next-hop-self\n#     neighbor 203.0.113.2\n#       address-family ipv4 multicast\n#         send-community\n#       address-family ipv6 unicast\n#\n\n# Using replaced\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv4 unicast\n#       maximum-prefix 20 75\n#       weight 100\n#       prefix-list rmap1 in\n#       prefix-list rmap2 out\n#     address-family ipv6 unicast\n#   neighbor 192.0.2.33\n#     address-family ipv4 multicast\n#       inherit peer-policy BasePolicy 200\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#         suppress-inactive\n#         next-hop-self\n#     neighbor 203.0.113.2\n#       address-family ipv4 multicast\n#         send-community\n#       address-family ipv6 unicast\n#\n\n- name: Replace specified neighbor AFs with given configuration\n  cisco.nxos.nxos_bgp_neighbor_address_family: &replaced\n    config:\n      as_number: 65536\n      neighbors:\n        - neighbor_address: 192.0.2.32\n          address_family:\n            - afi: ipv4\n              safi: unicast\n              weight: 110\n            - afi: ipv6\n              safi: unicast\n        - neighbor_address: 192.0.2.33\n          address_family:\n            - afi: ipv4\n              safi: multicast\n              inherit:\n                template: BasePolicy\n                sequence: 200\n      vrfs:\n        - vrf: site-1\n          neighbors:\n            - neighbor_address: 203.0.113.1\n              address_family:\n                - afi: ipv4\n                  safi: unicast\n            - neighbor_address: 203.0.113.2\n              address_family:\n                - afi: ipv6\n                  safi: unicast\n                - afi: ipv4\n                  safi: multicast\n                  send_community:\n                    set: True\n    state: replaced\n\n# Task output\n# -------------\n#  before:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv4\n#            safi: unicast\n#            maximum_prefix:\n#              max_prefix_limit: 20\n#              generate_warning_threshold: 75\n#            weight: 100\n#            prefix_list:\n#              inbound: rmap1\n#              outbound: rmap2\n#          - afi: ipv6\n#            safi: unicast\n#      - neighbor_address: 192.0.2.33\n#        address_family:\n#          - afi: ipv4\n#            safi: multicast\n#            inherit:\n#              template: BasePolicy\n#              sequence: 200\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#                suppress_inactive: true\n#                next_hop_self:\n#                  set: true\n#          - neighbor_address: 203.0.113.2\n#            address_family:\n#              - afi: ipv4\n#                safi: multicast\n#                send_community:\n#                  set: True\n#              - afi: ipv6\n#                safi: unicast\n#\n#  commands:\n#    - router bgp 65536\n#    - neighbor 192.0.2.32\n#    - address-family ipv4 unicast\n#    - no maximum-prefix 20 75\n#    - weight 110\n#    - no prefix-list rmap1 in\n#    - no prefix-list rmap2 out\n#    - vrf site-1\n#    - neighbor 203.0.113.1\n#    - address-family ipv4 unicast\n#    - no suppress-inactive\n#    - no next-hop-self\n#\n#  after:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv4\n#            safi: unicast\n#            weight: 110\n#          - afi: ipv6\n#            safi: unicast\n#      - neighbor_address: 192.0.2.33\n#        address_family:\n#          - afi: ipv4\n#            safi: multicast\n#            inherit:\n#              template: BasePolicy\n#              sequence: 200\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#          - neighbor_address: 203.0.113.2\n#            address_family:\n#              - afi: ipv4\n#                safi: multicast\n#                send_community:\n#                  set: True\n#              - afi: ipv6\n#                safi: unicast\n\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv4 unicast\n#       weight 110\n#     address-family ipv6 unicast\n#   neighbor 192.0.2.33\n#     address-family ipv4 multicast\n#       inherit peer-policy BasePolicy 200\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#     neighbor 203.0.113.2\n#       address-family ipv4 multicast\n#         send-community\n#       address-family ipv6 unicast\n#\n\n# Using overridden\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv4 unicast\n#       maximum-prefix 20 75\n#       weight 100\n#       prefix-list rmap1 in\n#       prefix-list rmap2 out\n#     address-family ipv6 unicast\n#   neighbor 192.0.2.33\n#     address-family ipv4 multicast\n#       inherit peer-policy BasePolicy 200\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#         suppress-inactive\n#         next-hop-self\n#     neighbor 203.0.113.2\n#       address-family ipv4 multicast\n#         send-community\n#       address-family ipv6 unicast\n#\n\n- name: Override all BGP AF configuration with provided configuration\n  cisco.nxos.nxos_bgp_neighbor_address_family:\n    config:\n      as_number: 65536\n      neighbors:\n        - neighbor_address: 192.0.2.32\n          address_family:\n            - afi: ipv4\n              safi: unicast\n      vrfs:\n        - vrf: site-1\n          neighbors:\n            - neighbor_address: 203.0.113.1\n              address_family:\n                - afi: ipv4\n                  safi: unicast\n                  suppress_inactive: True\n                  next_hop_self:\n                    set: True\n    state: overridden\n\n# Task output\n# -------------\n#  before:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv4\n#            safi: unicast\n#            maximum_prefix:\n#              max_prefix_limit: 20\n#              generate_warning_threshold: 75\n#            weight: 100\n#            prefix_list:\n#              inbound: rmap1\n#              outbound: rmap2\n#          - afi: ipv6\n#            safi: unicast\n#      - neighbor_address: 192.0.2.33\n#        address_family:\n#          - afi: ipv4\n#            safi: multicast\n#            inherit:\n#              template: BasePolicy\n#              sequence: 200\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#                suppress_inactive: true\n#                next_hop_self:\n#                  set: true\n#          - neighbor_address: 203.0.113.2\n#            address_family:\n#              - afi: ipv4\n#                safi: multicast\n#                send_community:\n#                  set: True\n#              - afi: ipv6\n#                safi: unicast\n#\n#  commands:\n#    - router bgp 65536\n#    - neighbor 192.0.2.32\n#    - address-family ipv4 unicast\n#    - no maximum-prefix 20 75\n#    - no weight 100\n#    - no prefix-list rmap1 in\n#    - no prefix-list rmap2 out\n#    - no address-family ipv6 unicast\n#    - neighbor 192.0.2.33\n#    - no address-family ipv4 multicast\n#    - vrf site-1\n#    - neighbor 203.0.113.2\n#    - no address-family ipv4 multicast\n#    - no address-family ipv6 unicast\n#\n#  after:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv4\n#            safi: unicast\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#                suppress_inactive: True\n#                next_hop_self:\n#                  set: True\n\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv4 unicast\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#         suppress-inactive\n#         next-hop-self\n\n# Using deleted to remove specified neighbor AFs\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv4 unicast\n#       maximum-prefix 20 75\n#       weight 100\n#       prefix-list rmap1 in\n#       prefix-list rmap2 out\n#     address-family ipv6 unicast\n#   neighbor 192.0.2.33\n#     address-family ipv4 multicast\n#       inherit peer-policy BasePolicy 200\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#         suppress-inactive\n#         next-hop-self\n#     neighbor 203.0.113.2\n#       address-family ipv4 multicast\n#         send-community\n#       address-family ipv6 unicast\n#\n\n- name: Delete BGP configs handled by this module\n  cisco.nxos.nxos_bgp_neighbor_address_family:\n    config:\n      as_number: 65536\n      neighbors:\n        - neighbor_address: 192.0.2.32\n          address_family:\n            - afi: ipv4\n              safi: unicast\n      vrfs:\n        - vrf: site-1\n          neighbors:\n            - neighbor_address: 203.0.113.2\n              address_family:\n                - afi: ipv6\n                  safi: unicast\n    state: deleted\n\n# Task output\n# -------------\n#  before:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv4\n#            safi: unicast\n#            maximum_prefix:\n#              max_prefix_limit: 20\n#              generate_warning_threshold: 75\n#            weight: 100\n#            prefix_list:\n#              inbound: rmap1\n#              outbound: rmap2\n#          - afi: ipv6\n#            safi: unicast\n#      - neighbor_address: 192.0.2.33\n#        address_family:\n#          - afi: ipv4\n#            safi: multicast\n#            inherit:\n#              template: BasePolicy\n#              sequence: 200\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#                suppress_inactive: true\n#                next_hop_self:\n#                  set: true\n#          - neighbor_address: 203.0.113.2\n#            address_family:\n#              - afi: ipv4\n#                safi: multicast\n#                send_community:\n#                  set: True\n#              - afi: ipv6\n#                safi: unicast\n#\n#  commands:\n#    - router bgp 65536\n#    - neighbor 192.0.2.32\n#    - no address-family ipv4 unicast\n#    - vrf site-1\n#    - neighbor 203.0.113.2\n#    - no address-family ipv6 unicast\n#\n#  after:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv6\n#            safi: unicast\n#      - neighbor_address: 192.0.2.33\n#        address_family:\n#          - afi: ipv4\n#            safi: multicast\n#            inherit:\n#              template: BasePolicy\n#              sequence: 200\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#                suppress_inactive: true\n#                next_hop_self:\n#                  set: true\n#          - neighbor_address: 203.0.113.2\n#            address_family:\n#              - afi: ipv4\n#                safi: multicast\n#                send_community:\n#                  set: True\n#\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv6 unicast\n#   neighbor 192.0.2.33\n#     address-family ipv4 multicast\n#       inherit peer-policy BasePolicy 200\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#         suppress-inactive\n#         next-hop-self\n#     neighbor 203.0.113.2\n#       address-family ipv4 multicast\n#         send-community\n#\n\n# Using deleted to remove all neighbor AFs\n\n# Before state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv4 unicast\n#       maximum-prefix 20 75\n#       weight 100\n#       prefix-list rmap1 in\n#       prefix-list rmap2 out\n#     address-family ipv6 unicast\n#   neighbor 192.0.2.33\n#     address-family ipv4 multicast\n#       inherit peer-policy BasePolicy 200\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#         suppress-inactive\n#         next-hop-self\n#     neighbor 203.0.113.2\n#       address-family ipv4 multicast\n#         send-community\n#       address-family ipv6 unicast\n#\n\n- name: Delete all BGP neighbor AF configs handled by this module\n  cisco.nxos.nxos_bgp_neighbor_address_family:\n    state: deleted\n\n# Task output\n# -------------\n#  before:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv4\n#            safi: unicast\n#            maximum_prefix:\n#              max_prefix_limit: 20\n#              generate_warning_threshold: 75\n#            weight: 100\n#            prefix_list:\n#              inbound: rmap1\n#              outbound: rmap2\n#          - afi: ipv6\n#            safi: unicast\n#      - neighbor_address: 192.0.2.33\n#        address_family:\n#          - afi: ipv4\n#            safi: multicast\n#            inherit:\n#              template: BasePolicy\n#              sequence: 200\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#                suppress_inactive: true\n#                next_hop_self:\n#                  set: true\n#          - neighbor_address: 203.0.113.2\n#            address_family:\n#              - afi: ipv4\n#                safi: multicast\n#                send_community:\n#                  set: True\n#              - afi: ipv6\n#                safi: unicast\n#\n#  commands:\n#    - router bgp 65536\n#    - neighbor 192.0.2.32\n#    - no address-family ipv4 unicast\n#    - no address-family ipv6 unicast\n#    - neighbor 192.0.2.33\n#    - no address-family ipv4 multicast\n#    - vrf site-1\n#    - neighbor 203.0.113.1\n#    - no address-family ipv4 unicast\n#    - neighbor 203.0.113.2\n#    - no address-family ipv6 unicast\n#    - no address-family ipv4 multicast\n#\n#  after:\n#    as_number: \"65536\"\n#\n# After state:\n# -------------\n# Nexus9000v# show running-config | section \"^router bgp\"\n# router bgp 65536\n#   neighbor 192.0.2.32\n#   neighbor 192.0.2.33\n#   vrf site-1\n#     neighbor 203.0.113.1\n#     neighbor 203.0.113.2\n#\n\n# Using rendered\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_bgp_neighbor_address_family:\n    config:\n      as_number: 65536\n      neighbors:\n        - neighbor_address: 192.0.2.32\n          address_family:\n            - afi: ipv4\n              safi: unicast\n              maximum_prefix:\n                max_prefix_limit: 20\n                generate_warning_threshold: 75\n              weight: 100\n              prefix_list:\n                inbound: rmap1\n                outbound: rmap2\n            - afi: ipv6\n              safi: unicast\n        - neighbor_address: 192.0.2.33\n          address_family:\n            - afi: ipv4\n              safi: multicast\n              inherit:\n                template: BasePolicy\n                sequence: 200\n      vrfs:\n        - vrf: site-1\n          neighbors:\n            - neighbor_address: 203.0.113.1\n              address_family:\n                - afi: ipv4\n                  safi: unicast\n                  suppress_inactive: True\n                  next_hop_self:\n                    set: True\n            - neighbor_address: 203.0.113.2\n              address_family:\n                - afi: ipv6\n                  safi: unicast\n                - afi: ipv4\n                  safi: multicast\n                  send_community:\n                    set: True\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n#  rendered:\n#    - router bgp 65536\n#    - neighbor 192.0.2.32\n#    - address-family ipv4 unicast\n#    - maximum-prefix 20 75\n#    - weight 100\n#    - prefix-list rmap1 in\n#    - prefix-list rmap2 out\n#    - address-family ipv6 unicast\n#    - neighbor 192.0.2.33\n#    - address-family ipv4 multicast\n#    - inherit peer-policy BasePolicy 200\n#    - vrf site-1\n#    - neighbor 203.0.113.1\n#    - address-family ipv4 unicast\n#    - suppress-inactive\n#    - next-hop-self\n#    - neighbor 203.0.113.2\n#    - address-family ipv6 unicast\n#    - address-family ipv4 multicast\n#    - send-community\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# router bgp 65536\n#   neighbor 192.0.2.32\n#     address-family ipv4 unicast\n#       maximum-prefix 20 75\n#       weight 100\n#       prefix-list rmap1 in\n#       prefix-list rmap2 out\n#     address-family ipv6 unicast\n#   neighbor 192.0.2.33\n#     address-family ipv4 multicast\n#       inherit peer-policy BasePolicy 200\n#   vrf site-1\n#     neighbor 203.0.113.1\n#       address-family ipv4 unicast\n#         suppress-inactive\n#         next-hop-self\n#     neighbor 203.0.113.2\n#       address-family ipv4 multicast\n#         send-community\n#       address-family ipv6 unicast\n\n- name: Parse externally provided BGP neighbor AF config\n  register: result\n  cisco.nxos.nxos_bgp_neighbor_address_family:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n#  parsed:\n#    as_number: \"65536\"\n#    neighbors:\n#      - neighbor_address: 192.0.2.32\n#        address_family:\n#          - afi: ipv4\n#           safi: unicast\n#           maximum_prefix:\n#              max_prefix_limit: 20\n#              generate_warning_threshold: 75\n#           weight: 100\n#            prefix_list:\n#              inbound: rmap1\n#              outbound: rmap2\n#          - afi: ipv6\n#            safi: unicast\n#      - neighbor_address: 192.0.2.33\n#        address_family:\n#          - afi: ipv4\n#            safi: multicast\n#            inherit:\n#              template: BasePolicy\n#              sequence: 200\n#    vrfs:\n#      - vrf: site-1\n#        neighbors:\n#          - neighbor_address: 203.0.113.1\n#            address_family:\n#              - afi: ipv4\n#                safi: unicast\n#                suppress_inactive: true\n#                next_hop_self:\n#                  set: true\n#          - neighbor_address: 203.0.113.2\n#            address_family:\n#              - afi: ipv4\n#                safi: multicast\n#                send_community:\n#                  set: True\n#              - afi: ipv6\n#                safi: unicast\n"
  },
  "cisco.nxos.nxos_bgp_neighbor_af": {
    "doc": {
      "description": "Manages BGP address-family's neighbors configurations on NX-OS switches.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(state=absent) removes the whole BGP address-family's neighbor configuration.\nDefault, when supported, removes properties\nIn order to default maximum-prefix configuration, only C(max_prefix_limit=default) is needed.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "additional_paths_receive": {
          "aliases": [],
          "description": "Valid values are enable for basic command enablement; disable for disabling the command at the neighbor af level (it adds the disable keyword to the basic command); and inherit to remove the command at this level (the command value is inherited from a higher BGP layer).",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable",
            "inherit"
          ],
          "suboptions": {}
        },
        "additional_paths_send": {
          "aliases": [],
          "description": "Valid values are enable for basic command enablement; disable for disabling the command at the neighbor af level (it adds the disable keyword to the basic command); and inherit to remove the command at this level (the command value is inherited from a higher BGP layer).",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable",
            "inherit"
          ],
          "suboptions": {}
        },
        "advertise_map_exist": {
          "aliases": [],
          "description": "Conditional route advertisement. This property requires two route maps, an advertise-map and an exist-map. Valid values are an array specifying both the advertise-map name and the exist-map name, or simply 'default' e.g. ['my_advertise_map', 'my_exist_map']. This command is mutually exclusive with the advertise_map_non_exist property.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "advertise_map_non_exist": {
          "aliases": [],
          "description": "Conditional route advertisement. This property requires two route maps, an advertise-map and an exist-map. Valid values are an array specifying both the advertise-map name and the non-exist-map name, or simply 'default' e.g. ['my_advertise_map', 'my_non_exist_map']. This command is mutually exclusive with the advertise_map_exist property.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "afi": {
          "aliases": [],
          "description": "Address Family Identifier.",
          "type": "str",
          "required": true,
          "choices": [
            "ipv4",
            "ipv6",
            "vpnv4",
            "vpnv6",
            "l2vpn"
          ],
          "suboptions": {}
        },
        "allowas_in": {
          "aliases": [],
          "description": "Activate allowas-in property",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowas_in_max": {
          "aliases": [],
          "description": "Max-occurrences value for allowas_in. Valid values are an integer value or 'default'. This is mutually exclusive with allowas_in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "as_override": {
          "aliases": [],
          "description": "Activate the as-override feature.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "asn": {
          "aliases": [],
          "description": "BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "default_originate": {
          "aliases": [],
          "description": "Activate the default-originate feature.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "default_originate_route_map": {
          "aliases": [],
          "description": "Route-map for the default_originate property. Valid values are a string defining a route-map name, or 'default'. This is mutually exclusive with default_originate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disable_peer_as_check": {
          "aliases": [],
          "description": "Disable checking of peer AS-number while advertising",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "filter_list_in": {
          "aliases": [],
          "description": "Valid values are a string defining a filter-list name, or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filter_list_out": {
          "aliases": [],
          "description": "Valid values are a string defining a filter-list name, or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_prefix_interval": {
          "aliases": [],
          "description": "Optional restart interval. Valid values are an integer. Requires max_prefix_limit. May not be combined with max_prefix_warning.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_prefix_limit": {
          "aliases": [],
          "description": "maximum-prefix limit value. Valid values are an integer value or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_prefix_threshold": {
          "aliases": [],
          "description": "Optional threshold percentage at which to generate a warning. Valid values are an integer value. Requires max_prefix_limit.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_prefix_warning": {
          "aliases": [],
          "description": "Optional warning-only keyword. Requires max_prefix_limit. May not be combined with max_prefix_interval.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "neighbor": {
          "aliases": [],
          "description": "Neighbor Identifier. Valid values are string. Neighbors may use IPv4 or IPv6 notation, with or without prefix length.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "next_hop_self": {
          "aliases": [],
          "description": "Activate the next-hop-self feature.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "next_hop_third_party": {
          "aliases": [],
          "description": "Activate the next-hop-third-party feature.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "prefix_list_in": {
          "aliases": [],
          "description": "Valid values are a string defining a prefix-list name, or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefix_list_out": {
          "aliases": [],
          "description": "Valid values are a string defining a prefix-list name, or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rewrite_evpn_rt_asn": {
          "aliases": [],
          "description": "Auto generate route targets for EBGP neighbor.",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "route_map_in": {
          "aliases": [],
          "description": "Valid values are a string defining a route-map name, or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "route_map_out": {
          "aliases": [],
          "description": "Valid values are a string defining a route-map name, or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "route_reflector_client": {
          "aliases": [],
          "description": "Router reflector client.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "safi": {
          "aliases": [],
          "description": "Sub Address Family Identifier.",
          "type": "str",
          "required": true,
          "choices": [
            "unicast",
            "multicast",
            "evpn"
          ],
          "suboptions": {}
        },
        "send_community": {
          "aliases": [],
          "description": "send-community attribute.",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "both",
            "extended",
            "standard",
            "default"
          ],
          "suboptions": {}
        },
        "soft_reconfiguration_in": {
          "aliases": [],
          "description": "Valid values are 'enable' for basic command enablement; 'always' to add the always keyword to the basic command; and 'inherit' to remove the command at this level (the command value is inherited from a higher BGP layer).",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "always",
            "inherit"
          ],
          "suboptions": {}
        },
        "soo": {
          "aliases": [],
          "description": "Site-of-origin. Valid values are a string defining a VPN extcommunity or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_inactive": {
          "aliases": [],
          "description": "suppress-inactive feature.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "unsuppress_map": {
          "aliases": [],
          "description": "unsuppress-map. Valid values are a string defining a route-map name or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Name of the VRF. The name 'default' is a valid VRF representing the global bgp.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "Weight value. Valid values are an integer value or 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2023-02-24) Manages BGP address-family's neighbors configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: configure RR client\n  cisco.nxos.nxos_bgp_neighbor_af:\n    asn: 65535\n    neighbor: 192.0.2.3\n    afi: ipv4\n    safi: unicast\n    route_reflector_client: true\n    state: present\n    rewrite_evpn_rt_asn: true\n"
  },
  "cisco.nxos.nxos_command": {
    "doc": {
      "description": "Sends an arbitrary command to an NXOS node and returns the results read from the device.  This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.",
      "has_action": true,
      "notes": "Limited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "commands": {
          "aliases": [],
          "description": "The commands to send to the remote NXOS device.  The resulting output from the command is returned.  If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.\nThe I(commands) argument also accepts an alternative form that allows for complex values that specify the command to run and the output format to return. This can be done on a command by command basis.  The complex argument supports the keywords C(command) and C(output) where C(command) is the command to run and C(output) is one of 'text' or 'json'.\nIf a command sent to the device requires answering a prompt, it is possible to pass a dict containing command, answer and prompt. Common answers are 'y' or \"\\r\" (carriage return, must be double quotes). See examples.",
          "type": "list",
          "required": true,
          "elements": "raw",
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Configures the interval in seconds to wait between retries of the command.  If the command does not pass the specified conditional, the interval indicates how to long to wait before trying the command again.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the I(wait_for) must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "all"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "retries": {
          "aliases": [],
          "description": "Specifies the number of retries a command should by tried before it is considered failed.  The command is run on the target device every retry and evaluated against the I(wait_for) conditionals.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_for": {
          "aliases": [
            "waitfor"
          ],
          "description": "Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries, the task fails.  See examples.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Run arbitrary command on Cisco NXOS devices",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: run show version on remote devices\n  cisco.nxos.nxos_command:\n    commands: show version\n\n- name: run show version and check to see if output contains Cisco\n  cisco.nxos.nxos_command:\n    commands: show version\n    wait_for: result[0] contains Cisco\n\n- name: run multiple commands on remote nodes\n  cisco.nxos.nxos_command:\n    commands:\n    - show version\n    - show interfaces\n\n- name: run multiple commands and evaluate the output\n  cisco.nxos.nxos_command:\n    commands:\n    - show version\n    - show interfaces\n    wait_for:\n    - result[0] contains Cisco\n    - result[1] contains loopback0\n\n- name: run commands and specify the output format\n  cisco.nxos.nxos_command:\n    commands:\n    - command: show version\n      output: json\n\n- name: run commands that require answering a prompt\n  cisco.nxos.nxos_command:\n    commands:\n    - configure terminal\n    - command: no feature npv\n      prompt: Do you want to continue\n      answer: y\n\n"
  },
  "cisco.nxos.nxos_config": {
    "doc": {
      "description": "Cisco NXOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with NXOS configuration sections in a deterministic way.  This module works with either CLI or NXAPI transports.",
      "has_action": true,
      "notes": "Unsupported for Cisco MDS\nAbbreviated commands are NOT idempotent, see U(https://docs.ansible.com/ansible/latest/network/user_guide/faq.html#why-do-the-config-modules-always-return-changed-true-with-abbreviated-commands).\nTo ensure idempotency and correct diff the configuration lines in the relevant module options should be similar to how they appear if present in the running configuration on device including the indentation.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "after": {
          "aliases": [],
          "description": "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory or role root directory, if playbook is part of an ansible role. If the directory does not exist, it is created.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_options": {
          "aliases": [],
          "description": "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(True), if C(backup) is set to I(false) this option will be silently ignored.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dir_path": {
              "aliases": [],
              "description": "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory.",
              "type": "path",
              "required": false,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "before": {
          "aliases": [],
          "description": "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "defaults": {
          "aliases": [],
          "description": "The I(defaults) argument will influence how the running-config is collected from the device.  When the value is set to true, the command used to collect the running-config is append with the all keyword.  When the value is set to false, the command is issued without the all keyword",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "diff_against": {
          "aliases": [],
          "description": "When using the C(ansible-playbook --diff) command line argument the module can generate diffs against different sources.\nWhen this option is configure as I(startup), the module will return the diff of the running-config against the startup-config.\nWhen this option is configured as I(intended), the module will return the diff of the running-config against the configuration provided in the C(intended_config) argument.\nWhen this option is configured as I(running), the module will return the before and after diff of the running-config with respect to any changes made to the device configuration.",
          "type": "str",
          "required": false,
          "choices": [
            "startup",
            "intended",
            "running"
          ],
          "suboptions": {}
        },
        "diff_ignore_lines": {
          "aliases": [],
          "description": "Use this argument to specify one or more lines that should be ignored during the diff.  This is used for lines in the configuration that are automatically updated by the system.  This argument takes a list of regular expressions or exact line matches.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "intended_config": {
          "aliases": [],
          "description": "The C(intended_config) provides the master configuration that the node should conform to and is used to check the final running-config against. This argument will not modify any settings on the remote device and is strictly used to check the compliance of the current device's configuration against.  When specifying this argument, the task should also modify the C(diff_against) value and set it to I(intended). The configuration lines for this value should be similar to how it will appear if present in the running-configuration of the device including the indentation to ensure correct diff.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lines": {
          "aliases": [
            "commands"
          ],
          "description": "The ordered set of commands that should be configured in the section. The commands must be the exact same commands as found in the device running-config to ensure idempotency and correct diff. Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "match": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.",
          "default": "line",
          "type": "str",
          "required": false,
          "choices": [
            "line",
            "strict",
            "exact",
            "none"
          ],
          "suboptions": {}
        },
        "parents": {
          "aliases": [],
          "description": "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "replace": {
          "aliases": [],
          "description": "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct. replace I(config) will only work for NX-OS versions that support `config replace`.",
          "default": "line",
          "type": "str",
          "required": false,
          "choices": [
            "line",
            "block",
            "config"
          ],
          "suboptions": {}
        },
        "replace_src": {
          "aliases": [],
          "description": "The I(replace_src) argument provides path to the configuration file to load into the remote system. This argument is used to replace the entire config with a flat-file. This is used with argument I(replace) with value I(config). This is mutually exclusive with the I(lines) and I(src) arguments. This argument will only work for NX-OS versions that support `config replace`. Use I(nxos_file_copy) module to copy the flat file to remote device and then use the path with this argument. The configuration lines in the file should be similar to how it will appear if present in the running-configuration of the device including the indentation to ensure idempotency and correct diff.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "running_config": {
          "aliases": [
            "config"
          ],
          "description": "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(running_config) argument allows the implementer to pass in the configuration to use as the base config for comparison. The configuration lines for this option should be similar to how it will appear if present in the running-configuration of the device including the indentation to ensure idempotency and correct diff.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "save_when": {
          "aliases": [],
          "description": "When changes are made to the device running-configuration, the changes are not copied to non-volatile storage by default.  Using this argument will change that before.  If the argument is set to I(always), then the running-config will always be copied to the startup-config and the I(modified) flag will always be set to True.  If the argument is set to I(modified), then the running-config will only be copied to the startup-config if it has changed since the last save to startup-config.  If the argument is set to I(never), the running-config will never be copied to the startup-config.  If the argument is set to I(changed), then the running-config will only be copied to the startup-config if the task has made a change. I(changed) was added in Ansible 2.6.",
          "default": "never",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "never",
            "modified",
            "changed"
          ],
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "The I(src) argument provides a path to the configuration file to load into the remote system.  The path can either be a full system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook. This argument is mutually exclusive with the I(lines) and I(parents) arguments. The configuration lines in the source file should be similar to how it will appear if present in the running-configuration of the device including indentation to ensure idempotency and correct diff.",
          "type": "path",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Cisco NXOS configuration sections",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: configure top level configuration and save it\n  cisco.nxos.nxos_config:\n    lines: hostname {{ inventory_hostname }}\n    save_when: modified\n\n- name: diff the running-config against a provided config\n  cisco.nxos.nxos_config:\n    diff_against: intended\n    intended_config: \"{{ lookup('file', 'master.cfg') }}\"\n\n- cisco.nxos.nxos_config:\n    lines:\n    - 10 permit ip 192.0.2.1/32 any log\n    - 20 permit ip 192.0.2.2/32 any log\n    - 30 permit ip 192.0.2.3/32 any log\n    - 40 permit ip 192.0.2.4/32 any log\n    - 50 permit ip 192.0.2.5/32 any log\n    parents: ip access-list test\n    before: no ip access-list test\n    match: exact\n\n- cisco.nxos.nxos_config:\n    lines:\n    - 10 permit ip 192.0.2.1/32 any log\n    - 20 permit ip 192.0.2.2/32 any log\n    - 30 permit ip 192.0.2.3/32 any log\n    - 40 permit ip 192.0.2.4/32 any log\n    parents: ip access-list test\n    before: no ip access-list test\n    replace: block\n\n- name: replace config with flat file\n  cisco.nxos.nxos_config:\n    replace_src: config.txt\n    replace: config\n\n- name: for idempotency, use full-form commands\n  cisco.nxos.nxos_config:\n    lines:\n      # - shut\n    - shutdown\n    # parents: int eth1/1\n    parents: interface Ethernet1/1\n\n- name: configurable backup path\n  cisco.nxos.nxos_config:\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n"
  },
  "cisco.nxos.nxos_devicealias": {
    "doc": {
      "description": "Configuration of device alias for Cisco MDS NXOS.",
      "has_action": true,
      "notes": "Tested against Cisco MDS NX-OS 8.4(1)",
      "options": {
        "da": {
          "aliases": [],
          "description": "List of device-alias to be added or removed",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the device-alias to be added or removed",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "pwwn": {
              "aliases": [],
              "description": "pwwn to which the name needs to be associated with",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "remove": {
              "aliases": [],
              "description": "Removes the device-alias if set to True",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "distribute": {
          "aliases": [],
          "description": "Enable/Disable device-alias distribution",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode of devices-alias, basic or enhanced",
          "type": "str",
          "required": false,
          "choices": [
            "basic",
            "enhanced"
          ],
          "suboptions": {}
        },
        "rename": {
          "aliases": [],
          "description": "List of device-alias to be renamed",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "new_name": {
              "aliases": [],
              "description": "New name of the device-alias",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "old_name": {
              "aliases": [],
              "description": "Old name of the device-alias that needs to be renamed",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Configuration of device alias for Cisco NXOS MDS Switches.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Test that device alias module works\n  cisco.nxos.nxos_devicealias:\n    da:\n    - name: test1_add\n      pwwn: 56:2:22:11:22:88:11:67\n    - name: test2_add\n      pwwn: 65:22:22:11:22:22:11:d\n    - name: dev1\n      remove: true\n    - name: dev2\n      remove: true\n    distribute: true\n    mode: enhanced\n    rename:\n    - new_name: bcd\n      old_name: abc\n    - new_name: bcd1\n      old_name: abc1\n\n\n"
  },
  "cisco.nxos.nxos_evpn_global": {
    "doc": {
      "description": "Handles the EVPN control plane for VXLAN.",
      "has_action": true,
      "notes": "This module is not supported on Nexus 3000 series of switches.\nUnsupported for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "nv_overlay_evpn": {
          "aliases": [],
          "description": "EVPN control plane.",
          "type": "bool",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Handles the EVPN control plane for VXLAN.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_evpn_global:\n    nv_overlay_evpn: true\n"
  },
  "cisco.nxos.nxos_evpn_vni": {
    "doc": {
      "description": "Manages Cisco Ethernet Virtual Private Network (EVPN) VXLAN Network Identifier (VNI) configurations of a Nexus device.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\ndefault, where supported, restores params default value.\nRD override is not permitted. You should set it to the default values first and then reconfigure it.\nC(route_target_both), C(route_target_import) and C(route_target_export valid) values are a list of extended communities, (i.e. ['1.2.3.4:5', '33:55']) or the keywords 'auto' or 'default'.\nThe C(route_target_both) property is discouraged due to the inconsistent behavior of the property across Nexus platforms and image versions. For this reason it is recommended to use explicit C(route_target_export) and C(route_target_import) properties instead of C(route_target_both).\nRD valid values are a string in one of the route-distinguisher formats, the keyword 'auto', or the keyword 'default'.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "route_distinguisher": {
          "aliases": [],
          "description": "The VPN Route Distinguisher (RD). The RD is combined with the IPv4 or IPv6 prefix learned by the PE router to create a globally unique address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "route_target_both": {
          "aliases": [],
          "description": "Enables/Disables route-target settings for both import and export target communities using a single property.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "route_target_export": {
          "aliases": [],
          "description": "Sets the route-target 'export' extended communities.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "route_target_import": {
          "aliases": [],
          "description": "Sets the route-target 'import' extended communities.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vni": {
          "aliases": [],
          "description": "The EVPN VXLAN Network Identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages Cisco EVPN VXLAN Network Identifier (VNI).",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: vni configuration\n  cisco.nxos.nxos_evpn_vni:\n    vni: 6000\n    route_distinguisher: 60:10\n    route_target_import:\n    - 5000:10\n    - 4100:100\n    route_target_export: auto\n    route_target_both: default\n"
  },
  "cisco.nxos.nxos_facts": {
    "doc": {
      "description": "Collects facts from Cisco Nexus devices running the NX-OS operating system.  Fact collection is supported over both Cli and Nxapi transports.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "available_network_resources": {
          "aliases": [],
          "description": "When 'True' a list of network resources for which resource modules are available will be provided.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gather_network_resources": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all and the resources like interfaces, vlans etc. Can specify a list of values to include a larger subset. Values can also be used with an initial C(!) to specify that a specific subset should not be collected. Valid subsets are C(all), C(bfd_interfaces), C(lag_interfaces), C(telemetry), C(vlans), C(lacp), C(lacp_interfaces), C(interfaces), C(l3_interfaces), C(l2_interfaces), C(lldp_global), C(acls), C(acl_interfaces), C(ospfv2), C(ospfv3), C(ospf_interfaces), C(bgp_global), C(bgp_address_family), C(route_maps), C(prefix_lists), C(logging_global), C(ntp_global), C(snmp_server).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "gather_subset": {
          "aliases": [],
          "description": "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include C(all), C(hardware), C(config), C(legacy), and C(interfaces).  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected.",
          "default": "!config",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Gets facts about NX-OS switches",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Gather all legacy facts\n  cisco.nxos.nxos_facts:\n    gather_subset: all\n- name: Gather only the config and default facts\n  cisco.nxos.nxos_facts:\n    gather_subset:\n    - config\n- name: Do not gather hardware facts\n  cisco.nxos.nxos_facts:\n    gather_subset:\n    - '!hardware'\n- name: Gather legacy and resource facts\n  cisco.nxos.nxos_facts:\n    gather_subset: all\n    gather_network_resources: all\n- name: Gather only the interfaces resource facts and no legacy facts\n  cisco.nxos.nxos_facts:\n    gather_subset:\n    - '!all'\n    - '!min'\n    gather_network_resources:\n    - interfaces\n- name: Gather interfaces resource and minimal legacy facts\n  cisco.nxos.nxos_facts:\n    gather_subset: min\n    gather_network_resources: interfaces\n"
  },
  "cisco.nxos.nxos_feature": {
    "doc": {
      "description": "Offers ability to enable and disable features in NX-OS.",
      "has_action": true,
      "notes": "Limited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "feature": {
          "aliases": [],
          "description": "Name of feature.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the feature.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage features in NX-OS switches.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure lacp is enabled\n  cisco.nxos.nxos_feature:\n    feature: lacp\n    state: enabled\n\n- name: Ensure ospf is disabled\n  cisco.nxos.nxos_feature:\n    feature: ospf\n    state: disabled\n\n- name: Ensure vpc is enabled\n  cisco.nxos.nxos_feature:\n    feature: vpc\n    state: enabled\n"
  },
  "cisco.nxos.nxos_file_copy": {
    "doc": {
      "description": "This module supports two different workflows for copying a file to flash (or bootflash) on NXOS devices.  Files can either be (1) pushed from the Ansible controller to the device or (2) pulled from a remote SCP file server to the device.  File copies are initiated from the NXOS device to the remote SCP server.  This module only supports the use of connection C(network_cli) or C(Cli) transport with connection C(local).",
      "has_action": true,
      "notes": "Tested against NXOS 7.0(3)I2(5), 7.0(3)I4(6), 7.0(3)I5(3), 7.0(3)I6(1), 7.0(3)I7(3), 6.0(2)A8(8), 7.0(3)F3(4), 7.3(0)D1(1), 8.3(0), 9.2, 9.3\nLimited Support for Cisco MDS\nWhen pushing files (file_pull is False) to the NXOS device, feature scp-server must be enabled.\nWhen pulling files (file_pull is True) to the NXOS device, feature scp-server is not required.\nWhen pulling files (file_pull is True) to the NXOS device, no transfer will take place if the file is already present.\nCheck mode will tell you if the file would be copied.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "connect_ssh_port": {
          "aliases": [],
          "description": "SSH server port used for file transfer.",
          "default": "22",
          "required": false,
          "suboptions": {}
        },
        "file_pull": {
          "aliases": [],
          "description": "When (False) file is copied from the Ansible controller to the NXOS device.\nWhen (True) file is copied from a remote SCP server to the NXOS device. In this mode, the file copy is initiated from the NXOS device.\nIf the file is already present on the device it will be overwritten and therefore the operation is NOT idempotent.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "file_pull_compact": {
          "aliases": [],
          "description": "When file_pull is True, this is used to compact nxos image files. This option can only be used with nxos image files.\nWhen (file_pull is False), this is not used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "file_pull_kstack": {
          "aliases": [],
          "description": "When file_pull is True, this can be used to speed up file copies when the nxos running image supports the use-kstack option.\nWhen (file_pull is False), this is not used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "file_pull_protocol": {
          "aliases": [],
          "description": "When file_pull is True, this can be used to define the transfer protocol for copying file from remote to the NXOS device.\nWhen (file_pull is False), this is not used.",
          "default": "scp",
          "type": "str",
          "required": false,
          "choices": [
            "scp",
            "sftp",
            "ftp",
            "http",
            "https",
            "tftp"
          ],
          "suboptions": {}
        },
        "file_pull_timeout": {
          "aliases": [],
          "description": "Use this parameter to set timeout in seconds, when transferring large files or when the network is slow.\nWhen (file_pull is False), this is not used.",
          "default": "300",
          "required": false,
          "suboptions": {}
        },
        "file_system": {
          "aliases": [],
          "description": "The remote file system on the nxos device. If omitted, devices that support a I(file_system) parameter will use their default values.",
          "default": "bootflash:",
          "required": false,
          "suboptions": {}
        },
        "local_file": {
          "aliases": [],
          "description": "When (file_pull is False) this is the path to the local file on the Ansible controller. The local directory must exist.\nWhen (file_pull is True) this is the target file name on the NXOS device.",
          "required": false,
          "suboptions": {}
        },
        "local_file_directory": {
          "aliases": [],
          "description": "When (file_pull is True) file is copied from a remote SCP server to the NXOS device, and written to this directory on the NXOS device. If the directory does not exist, it will be created under the file_system. This is an optional parameter.\nWhen (file_pull is False), this is not used.",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "remote_file": {
          "aliases": [],
          "description": "When (file_pull is False) this is the remote file path on the NXOS device. If omitted, the name of the local file will be used. The remote directory must exist.\nWhen (file_pull is True) this is the full path to the file on the remote SCP server to be copied to the NXOS device.",
          "required": false,
          "suboptions": {}
        },
        "remote_scp_server": {
          "aliases": [],
          "description": "The remote scp server address when file_pull is True. This is required if file_pull is True.\nWhen (file_pull is False), this is not used.",
          "required": false,
          "suboptions": {}
        },
        "remote_scp_server_password": {
          "aliases": [],
          "description": "The remote scp server password when file_pull is True. This is required if file_pull is True.\nWhen (file_pull is False), this is not used.",
          "required": false,
          "suboptions": {}
        },
        "remote_scp_server_user": {
          "aliases": [],
          "description": "The remote scp server username when file_pull is True. This is required if file_pull is True.\nWhen (file_pull is False), this is not used.",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "The VRF used to pull the file. Useful when no vrf management is defined",
          "default": "management",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "paramiko (required when file_pull is False)",
        "SCPClient (required when file_pull is False)",
        "pexpect (required when file_pull is True)"
      ],
      "short_description": "Copy a file to a remote NXOS device.",
      "version_added": "1.0.0"
    },
    "examples": "\n# File copy from ansible controller to nxos device\n- name: copy from server to device\n  cisco.nxos.nxos_file_copy:\n    local_file: ./test_file.txt\n    remote_file: test_file.txt\n\n# Initiate file copy from the nxos device to transfer file from an SCP server back to the nxos device\n- name: initiate file copy from device\n  cisco.nxos.nxos_file_copy:\n    file_pull: true\n    local_file: xyz\n    local_file_directory: dir1/dir2/dir3\n    remote_file: /mydir/abc\n    remote_scp_server: 192.168.0.1\n    remote_scp_server_user: myUser\n    remote_scp_server_password: myPassword\n    vrf: management\n\n# Initiate file copy from the nxos device to transfer file from a ftp server back to the nxos device.\n# remote_scp_server_user and remote_scp_server_password are used to login to the FTP server.\n- name: initiate file copy from device\n  cisco.nxos.nxos_file_copy:\n    file_pull: true\n    file_pull_protocol: ftp\n    local_file: xyz\n    remote_file: /mydir/abc\n    remote_scp_server: 192.168.0.1\n    remote_scp_server_user: myUser\n    remote_scp_server_password: myPassword\n    vrf: management\n"
  },
  "cisco.nxos.nxos_gir": {
    "doc": {
      "description": "Trigger a graceful removal or insertion (GIR) of the switch.\nGIR processing may take more than 2 minutes. Timeout settings are automatically extended to 200s when user timeout settings are insufficient.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(state) has effect only in combination with C(system_mode_maintenance_timeout) or C(system_mode_maintenance_on_reload_reset_reason).\nUsing C(system_mode_maintenance) and C(system_mode_maintenance_dont_generate_profile) would make the module fail, but the system mode will be triggered anyway.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "system_mode_maintenance": {
          "aliases": [],
          "description": "When C(system_mode_maintenance=true) it puts all enabled protocols in maintenance mode (using the isolate command). When C(system_mode_maintenance=false) it puts all enabled protocols in normal mode (using the no isolate command).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "system_mode_maintenance_dont_generate_profile": {
          "aliases": [],
          "description": "When C(system_mode_maintenance_dont_generate_profile=true) it prevents the dynamic searching of enabled protocols and executes commands configured in a maintenance-mode profile. Use this option if you want the system to use a maintenance-mode profile that you have created. When C(system_mode_maintenance_dont_generate_profile=false) it prevents the dynamic searching of enabled protocols and executes commands configured in a normal-mode profile. Use this option if you want the system to use a normal-mode profile that you have created.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "system_mode_maintenance_on_reload_reset_reason": {
          "aliases": [],
          "description": "Boots the switch into maintenance mode automatically in the event of a specified system crash. Note that not all reset reasons are applicable for all platforms. Also if reset reason is set to match_any, it is not idempotent as it turns on all reset reasons. If reset reason is match_any and state is absent, it turns off all the reset reasons.",
          "type": "str",
          "required": false,
          "choices": [
            "hw_error",
            "svc_failure",
            "kern_failure",
            "wdog_timeout",
            "fatal_error",
            "lc_failure",
            "match_any",
            "manual_reload",
            "any_other",
            "maintenance"
          ],
          "suboptions": {}
        },
        "system_mode_maintenance_shutdown": {
          "aliases": [],
          "description": "Shuts down all protocols, vPC domains, and interfaces except the management interface (using the shutdown command). This option is disruptive while C(system_mode_maintenance) (which uses the isolate command) is not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "system_mode_maintenance_timeout": {
          "aliases": [],
          "description": "Keeps the switch in maintenance mode for a specified number of minutes. Range is 5-65535.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Trigger a graceful removal or insertion (GIR) of the switch.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Trigger system maintenance mode\n- cisco.nxos.nxos_gir:\n    system_mode_maintenance: true\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n# Trigger system normal mode\n- cisco.nxos.nxos_gir:\n    system_mode_maintenance: false\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n# Configure on-reload reset-reason for maintenance mode\n- cisco.nxos.nxos_gir:\n    system_mode_maintenance_on_reload_reset_reason: manual_reload\n    state: present\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n# Add on-reload reset-reason for maintenance mode\n- cisco.nxos.nxos_gir:\n    system_mode_maintenance_on_reload_reset_reason: hw_error\n    state: present\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n# Remove on-reload reset-reason for maintenance mode\n- cisco.nxos.nxos_gir:\n    system_mode_maintenance_on_reload_reset_reason: manual_reload\n    state: absent\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n# Set timeout for maintenance mode\n- cisco.nxos.nxos_gir:\n    system_mode_maintenance_timeout: 30\n    state: present\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n# Remove timeout for maintenance mode\n- cisco.nxos.nxos_gir:\n    system_mode_maintenance_timeout: 30\n    state: absent\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n"
  },
  "cisco.nxos.nxos_gir_profile_management": {
    "doc": {
      "description": "Manage a maintenance-mode or normal-mode profile with configuration commands that can be applied during graceful removal or graceful insertion.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(state=absent) removes the whole profile.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "commands": {
          "aliases": [],
          "description": "List of commands to be included into the profile.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Configure the profile as Maintenance or Normal mode.",
          "type": "str",
          "required": true,
          "choices": [
            "maintenance",
            "normal"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Create a maintenance-mode or normal-mode profile for GIR.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Create a maintenance-mode profile\n- cisco.nxos.nxos_gir_profile_management:\n    mode: maintenance\n    commands:\n    - router eigrp 11\n    - isolate\n\n# Remove the maintenance-mode profile\n- cisco.nxos.nxos_gir_profile_management:\n    mode: maintenance\n    state: absent\n"
  },
  "cisco.nxos.nxos_hostname": {
    "doc": {
      "description": "This module manages hostname configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 9.3.6.\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of hostname configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hostname": {
              "aliases": [],
              "description": "Hostname of the device.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section hostname).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nThe states I(merged), I(replaced) and I(overridden) have identical behaviour for this module.\nRefer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Hostname resource module.",
      "version_added": "2.9.0"
    },
    "examples": "\n# Using merged (replaced, overridden has the same behaviour)\n\n# Before state:\n# -------------\n# nxos-9k-rdo# show running-config | section ^hostname\n# nxos-9k-rdo#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_hostname:\n    config:\n      hostname: NXOSv-9k\n\n# Task output\n# -------------\n# before: {}\n#\n# commands:\n#   - hostname NXOSv-9k\n#\n# after:\n#   hostname: NXOSv-9k\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section ^hostname\n# hostname NXOSv-9k\n#\n\n# Using deleted\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section ^hostname\n# hostname NXOSv-9k\n\n- name: Delete hostname from running-config\n  cisco.nxos.nxos_hostname:\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#   hostname: NXOSv-9k\n#\n# commands:\n#   - no hostname NXOSv-9k\n#\n# after: {}\n\n# Using gathered\n\n- name: Gather hostname facts using gathered\n  cisco.nxos.nxos_hostname:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n#  gathered:\n#    hostname: NXOSv-9k\n\n# Using rendered\n\n- name: Render platform specific configuration lines (without connecting to the device)\n  cisco.nxos.nxos_hostname:\n    config:\n      hostname: NXOSv-9k\n\n# Task Output (redacted)\n# -----------------------\n# rendered:\n#   - hostname NXOSv-9k\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# hostname NXOSv-9k\n\n- name: Parse externally provided hostname config\n  cisco.nxos.nxos_hostname:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# parsed:\n#   hostname: NXOSv-9k\n\n"
  },
  "cisco.nxos.nxos_hsrp": {
    "doc": {
      "description": "Manages HSRP configuration on NX-OS switches.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nHSRP feature needs to be enabled first on the system.\nSVIs must exist before using this module.\nInterface must be a L3 port before using this module.\nHSRP cannot be configured on loopback interfaces.\nMD5 authentication is only possible with HSRPv2 while it is ignored if HSRPv1 is used instead, while it will not raise any error. Here we allow MD5 authentication only with HSRPv2 in order to enforce better practice.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "auth_string": {
          "aliases": [],
          "description": "Authentication string. If this needs to be hidden(for md5 type), the string should be 7 followed by the key string. Otherwise, it can be 0 followed by key string or just key string (for backward compatibility). For text type, this should be just be a key string. if this is 'default', authentication is removed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "text",
            "md5"
          ],
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "HSRP group number.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Full name of interface that is being managed for HSRP.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "preempt": {
          "aliases": [],
          "description": "Enable/Disable preempt.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "HSRP priority or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "HSRP version.",
          "default": "1",
          "type": "str",
          "required": false,
          "choices": [
            "1",
            "2"
          ],
          "suboptions": {}
        },
        "vip": {
          "aliases": [],
          "description": "HSRP virtual IP address or keyword 'default'",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages HSRP configuration on NX-OS switches.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure HSRP is configured with following params on a SVI\n  cisco.nxos.nxos_hsrp:\n    group: 10\n    vip: 10.1.1.1\n    priority: 150\n    interface: vlan10\n    preempt: enabled\n\n- name: Ensure HSRP is configured with following params on a SVI with clear text authentication\n  cisco.nxos.nxos_hsrp:\n    group: 10\n    vip: 10.1.1.1\n    priority: 150\n    interface: vlan10\n    preempt: enabled\n    auth_type: text\n    auth_string: CISCO\n\n- name: Ensure HSRP is configured with md5 authentication and clear authentication\n    string\n  cisco.nxos.nxos_hsrp:\n    group: 10\n    vip: 10.1.1.1\n    priority: 150\n    interface: vlan10\n    preempt: enabled\n    auth_type: md5\n    auth_string: 0 1234\n\n- name: Ensure HSRP is configured with md5 authentication and hidden authentication\n    string\n  cisco.nxos.nxos_hsrp:\n    group: 10\n    vip: 10.1.1.1\n    priority: 150\n    interface: vlan10\n    preempt: enabled\n    auth_type: md5\n    auth_string: 7 1234\n\n- name: Remove HSRP config for given interface, group, and VIP\n  cisco.nxos.nxos_hsrp:\n    group: 10\n    interface: vlan10\n    vip: 10.1.1.1\n    state: absent\n"
  },
  "cisco.nxos.nxos_hsrp_interfaces": {
    "doc": {
      "description": "Manages Hot Standby Router Protocol (HSRP) interface attributes.",
      "has_action": true,
      "notes": "Tested against NX-OS 7.0(3)I5(1).\nFeature bfd should be enabled for this module.\nUnsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "The provided configuration",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "bfd": {
              "aliases": [],
              "description": "Enable/Disable HSRP Bidirectional Forwarding Detection (BFD) on the interface.",
              "type": "str",
              "required": false,
              "choices": [
                "enable",
                "disable"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the interface.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^interface').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "HSRP interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using deleted\n\n- name: Configure hsrp attributes on interfaces\n  cisco.nxos.nxos_hsrp_interfaces:\n    config:\n    - name: Ethernet1/1\n    - name: Ethernet1/2\n    operation: deleted\n\n\n# Using merged\n\n- name: Configure hsrp attributes on interfaces\n  cisco.nxos.nxos_hsrp_interfaces:\n    config:\n    - name: Ethernet1/1\n      bfd: enable\n    - name: Ethernet1/2\n      bfd: disable\n    operation: merged\n\n\n# Using overridden\n\n- name: Configure hsrp attributes on interfaces\n  cisco.nxos.nxos_hsrp_interfaces:\n    config:\n    - name: Ethernet1/1\n      bfd: enable\n    - name: Ethernet1/2\n      bfd: disable\n    operation: overridden\n\n\n# Using replaced\n\n- name: Configure hsrp attributes on interfaces\n  cisco.nxos.nxos_hsrp_interfaces:\n    config:\n    - name: Ethernet1/1\n      bfd: enable\n    - name: Ethernet1/2\n      bfd: disable\n    operation: replaced\n\n# Using rendered\n\n- name: Use rendered state to convert task input to device specific commands\n  cisco.nxos.nxos_hsrp_interfaces:\n    config:\n    - name: Ethernet1/800\n      bfd: enable\n    - name: Ethernet1/801\n      bfd: enable\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#   - \"interface Ethernet1/800\"\n#   - \"hsrp bfd\"\n#   - \"interface Ethernet1/801\"\n#   - \"hsrp bfd\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# interface Ethernet1/800\n#   no switchport\n#   hsrp bfd\n# interface Ethernet1/801\n#   no switchport\n#   hsrp bfd\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_hsrp_interfaces:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n\n# parsed:\n#   - name: Ethernet1/800\n#     bfd: enable\n#   - name: Ethernet1/801\n#     bfd: enable\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n\n# interface Ethernet1/1\n#   no switchport\n#   hsrp bfd\n# interface Ethernet1/2\n#   no switchport\n#   hsrp bfd\n# interface Ethernet1/3\n#   no switchport\n\n- name: Gather hsrp_interfaces facts from the device using nxos_hsrp_interfaces\n  cisco.nxos.nxos_hsrp_interfaces:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n\n# gathered:\n#   - name: Ethernet1/1\n#     bfd: enable\n#   - name: Ethernet1/2\n#     bfd: enable\n\n"
  },
  "cisco.nxos.nxos_igmp": {
    "doc": {
      "description": "Manages IGMP global configuration configuration settings.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nWhen C(state=default), all supported params will be reset to a default state.\nIf restart is set to true with other params set, the restart will happen last, i.e. after the configuration takes place.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "enforce_rtr_alert": {
          "aliases": [],
          "description": "Enables or disables the enforce router alert option check for IGMPv2 and IGMPv3 packets.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "flush_routes": {
          "aliases": [],
          "description": "Removes routes when the IGMP process is restarted. By default, routes are not flushed.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "restart": {
          "aliases": [],
          "description": "Restarts the igmp process (using an exec config command).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manages desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "default"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages IGMP global configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Default igmp global params (all params except restart)\n  cisco.nxos.nxos_igmp:\n    state: default\n\n- name: Ensure the following igmp global config exists on the device\n  cisco.nxos.nxos_igmp:\n    flush_routes: true\n    enforce_rtr_alert: true\n\n- name: Restart the igmp process\n  cisco.nxos.nxos_igmp:\n    restart: true\n"
  },
  "cisco.nxos.nxos_igmp_interface": {
    "doc": {
      "description": "Manages IGMP interface configuration settings.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nWhen C(state=default), supported params will be reset to a default state. These include C(version), C(startup_query_interval), C(startup_query_count), C(robustness), C(querier_timeout), C(query_mrt), C(query_interval), C(last_member_qrt), C(last_member_query_count), C(group_timeout), C(report_llg), and C(immediate_leave).\nWhen C(state=absent), all configs for C(oif_ps), and C(oif_routemap) will be removed.\nPIM must be enabled to use this module.\nThis module is for Layer 3 interfaces.\nRoute-map check not performed (same as CLI) check when configuring route-map with 'static-oif'\nIf restart is set to true with other params set, the restart will happen last, i.e. after the configuration takes place. However, 'restart' itself is not idempotent as it is an action and not configuration.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "group_timeout": {
          "aliases": [],
          "description": "Sets the group membership timeout for IGMPv2. Values can range from 3 to 65,535 seconds or keyword 'default'. The default is 260 seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "immediate_leave": {
          "aliases": [],
          "description": "Enables the device to remove the group entry from the multicast routing table immediately upon receiving a leave message for the group. Use this command to minimize the leave latency of IGMPv2 group memberships on a given IGMP interface because the device does not send group-specific queries. The default is disabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "The full interface name for IGMP configuration. e.g. I(Ethernet1/2).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "last_member_qrt": {
          "aliases": [],
          "description": "Sets the query interval waited after sending membership reports before the software deletes the group state. Values can range from 1 to 25 seconds or keyword 'default'. The default is 1 second.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "last_member_query_count": {
          "aliases": [],
          "description": "Sets the number of times that the software sends an IGMP query in response to a host leave message. Values can range from 1 to 5 or keyword 'default'. The default is 2.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "oif_ps": {
          "aliases": [],
          "description": "Configure prefixes and sources for static outgoing interface (OIF). This is a list of dict where each dict has source and prefix defined or just prefix if source is not needed. The specified values will be configured on the device and if any previous prefix/sources exist, they will be removed. Keyword 'default' is also accepted which removes all existing prefix/sources.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "oif_routemap": {
          "aliases": [],
          "description": "Configure a routemap for static outgoing interface (OIF) or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "querier_timeout": {
          "aliases": [],
          "description": "Sets the querier timeout that the software uses when deciding to take over as the querier. Values can range from 1 to 65535 seconds or keyword 'default'. The default is 255 seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_interval": {
          "aliases": [],
          "description": "Sets the frequency at which the software sends IGMP host query messages. Values can range from 1 to 18000 seconds or keyword 'default'. The default is 125 seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "query_mrt": {
          "aliases": [],
          "description": "Sets the response time advertised in IGMP queries. Values can range from 1 to 25 seconds or keyword 'default'. The default is 10 seconds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "report_llg": {
          "aliases": [],
          "description": "Configures report-link-local-groups. Enables sending reports for groups in 224.0.0.0/24. Reports are always sent for nonlink local groups. By default, reports are not sent for link local groups.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "restart": {
          "aliases": [],
          "description": "Restart IGMP. This is NOT idempotent as this is action only.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "robustness": {
          "aliases": [],
          "description": "Sets the robustness variable. Values can range from 1 to 7 or keyword 'default'. The default is 2.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "startup_query_count": {
          "aliases": [],
          "description": "Query count used when the IGMP process starts up. The range is from 1 to 10 or keyword 'default'. The default is 2.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "startup_query_interval": {
          "aliases": [],
          "description": "Query interval used when the IGMP process starts up. The range is from 1 to 18000 or keyword 'default'. The default is 31.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manages desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "default"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "IGMP version. It can be 2 or 3 or keyword 'default'.",
          "type": "str",
          "required": false,
          "choices": [
            "2",
            "3",
            "default"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages IGMP interface configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_igmp_interface:\n    interface: ethernet1/32\n    startup_query_interval: 30\n    oif_ps:\n    - {prefix: 238.2.2.6}\n    - {source: 192.168.0.1, prefix: 238.2.2.5}\n    state: present\n"
  },
  "cisco.nxos.nxos_igmp_snooping": {
    "doc": {
      "description": "Manages IGMP snooping global configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nWhen C(state=default), params will be reset to a default state.\nC(group_timeout) also accepts I(never) as an input.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "group_timeout": {
          "aliases": [],
          "description": "Group membership timeout value for all VLANs on the device. Accepted values are integer in range 1-10080, I(never) and I(default).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "link_local_grp_supp": {
          "aliases": [],
          "description": "Global link-local groups suppression.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "report_supp": {
          "aliases": [],
          "description": "Global IGMPv1/IGMPv2 Report Suppression.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "snooping": {
          "aliases": [],
          "description": "Enables/disables IGMP snooping on the switch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "default"
          ],
          "suboptions": {}
        },
        "v3_report_supp": {
          "aliases": [],
          "description": "Global IGMPv3 Report Suppression and Proxy Reporting.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages IGMP snooping global configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ensure igmp snooping params supported in this module are in there default state\n- cisco.nxos.nxos_igmp_snooping:\n    state: default\n\n# ensure following igmp snooping params are in the desired state\n- cisco.nxos.nxos_igmp_snooping:\n    group_timeout: never\n    snooping: true\n    link_local_grp_supp: false\n    optimize_mcast_flood: false\n    report_supp: true\n    v3_report_supp: true\n"
  },
  "cisco.nxos.nxos_install_os": {
    "doc": {
      "description": "Install an operating system by setting the boot options like boot image and kickstart image and optionally select to install using ISSU (In Server Software Upgrade).",
      "has_action": true,
      "notes": "Tested against the following platforms and images - N9k 7.0(3)I4(6), 7.0(3)I5(3), 7.0(3)I6(1), 7.0(3)I7(1), 7.0(3)F2(2), 7.0(3)F3(2) - N3k 6.0(2)A8(6), 6.0(2)A8(8), 7.0(3)I6(1), 7.0(3)I7(1) - N7k 7.3(0)D1(1), 8.0(1), 8.1(1), 8.2(1)\nLimited Support for Cisco MDS\nThis module requires both the ANSIBLE_PERSISTENT_CONNECT_TIMEOUT and ANSIBLE_PERSISTENT_COMMAND_TIMEOUT timers to be set to 600 seconds or higher. The module will exit if the timers are not set properly.\nWhen using connection local, ANSIBLE_PERSISTENT_CONNECT_TIMEOUT and ANSIBLE_PERSISTENT_COMMAND_TIMEOUT can only be set using ENV variables or the ansible.cfg file.\nDo not include full file paths, just the name of the file(s) stored on the top level flash directory.\nThis module attempts to install the software immediately, which may trigger a reboot.\nIn check mode, the module will indicate if an upgrade is needed and whether or not the upgrade is disruptive or non-disruptive(ISSU).\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "issu": {
          "aliases": [],
          "description": "Upgrade using In Service Software Upgrade (ISSU). (Supported on N5k, N7k, N9k platforms)\nSelecting 'required' or 'yes' means that upgrades will only proceed if the switch is capable of ISSU.\nSelecting 'desired' means that upgrades will use ISSU if possible but will fall back to disruptive upgrade if needed.\nSelecting 'no' means do not use ISSU. Forced disruptive.",
          "default": "no",
          "type": "str",
          "required": false,
          "choices": [
            "required",
            "desired",
            "yes",
            "no"
          ],
          "suboptions": {}
        },
        "kickstart_image_file": {
          "aliases": [],
          "description": "Name of the kickstart image file on flash. (Not required on all Nexus platforms)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "system_image_file": {
          "aliases": [],
          "description": "Name of the system (or combined) image file on flash.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Set boot options like boot, kickstart image and issu.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Install OS on N9k\n  check_mode: no\n  cisco.nxos.nxos_install_os:\n    system_image_file: nxos.7.0.3.I6.1.bin\n    issu: desired\n\n- name: Wait for device to come back up with new image\n  wait_for:\n    port: 22\n    state: started\n    timeout: 500\n    delay: 60\n    host: '{{ inventory_hostname }}'\n\n- name: Check installed OS for newly installed version\n  nxos_command:\n    commands: [show version | json]\n    provider: '{{ connection }}'\n  register: output\n- assert:\n    that:\n    - output['stdout'][0]['kickstart_ver_str'] == '7.0(3)I6(1)'\n"
  },
  "cisco.nxos.nxos_interface": {
    "doc": {
      "description": "Manages physical attributes of interfaces of NX-OS switches.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nThis module is also used to create logical interfaces such as svis and loopbacks.\nBe cautious of platform specific idiosyncrasies. For example, when you default a loopback interface, the admin state toggles on certain versions of NX-OS.\nThe M(cisco.nxos.nxos_overlay_global) C(anycast_gateway_mac) attribute must be set before setting the C(fabric_forwarding_anycast_gateway) property.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "admin_state": {
          "aliases": [],
          "description": "Administrative state of the interface.",
          "default": "up",
          "type": "str",
          "required": false,
          "choices": [
            "up",
            "down"
          ],
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [],
          "description": "List of Interfaces definitions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "admin_state": {
              "aliases": [],
              "description": "Administrative state of the interface.",
              "type": "str",
              "required": false,
              "choices": [
                "up",
                "down"
              ],
              "suboptions": {}
            },
            "delay": {
              "aliases": [],
              "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Interface description.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "duplex": {
              "aliases": [],
              "description": "Interface link status. Applicable for ethernet interface only.",
              "type": "str",
              "required": false,
              "choices": [
                "full",
                "half",
                "auto"
              ],
              "suboptions": {}
            },
            "fabric_forwarding_anycast_gateway": {
              "aliases": [],
              "description": "Associate SVI with anycast gateway under VLAN configuration mode. Applicable for SVI interface only.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "interface_type": {
              "aliases": [],
              "description": "Interface type to be unconfigured from the device.",
              "type": "str",
              "required": false,
              "choices": [
                "loopback",
                "portchannel",
                "svi",
                "nve"
              ],
              "suboptions": {}
            },
            "ip_forward": {
              "aliases": [],
              "description": "Enable/Disable ip forward feature on SVIs.",
              "type": "str",
              "required": false,
              "choices": [
                "enable",
                "disable"
              ],
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Manage Layer 2 or Layer 3 state of the interface. This option is supported for ethernet and portchannel interface. Applicable for ethernet and portchannel interface only.",
              "type": "str",
              "required": false,
              "choices": [
                "layer2",
                "layer3"
              ],
              "suboptions": {}
            },
            "mtu": {
              "aliases": [],
              "description": "MTU for a specific interface. Must be an even number between 576 and 9216. Applicable for ethernet interface only.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Full name of interface, i.e. Ethernet1/1, port-channel10.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "neighbors": {
              "aliases": [],
              "description": "Check the operational state of given interface C(name) for LLDP neighbor.\nThe following suboptions are available. This is state check parameter only.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "host": {
                  "aliases": [],
                  "description": "LLDP neighbor host for given interface C(name).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "LLDP neighbor port to which given interface C(name) is connected.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "rx_rate": {
              "aliases": [],
              "description": "Receiver rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see U(https://docs.ansible.com/ansible/latest/network/user_guide/network_working_with_command_output.html#conditionals-in-networking-modules)",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "speed": {
              "aliases": [],
              "description": "Interface link speed. Applicable for ethernet interface only.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Specify desired state of the resource.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent",
                "default"
              ],
              "suboptions": {}
            },
            "tx_rate": {
              "aliases": [],
              "description": "Transmit rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see U(https://docs.ansible.com/ansible/latest/network/user_guide/network_working_with_command_output.html#conditionals-in-networking-modules)",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "delay": {
          "aliases": [],
          "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Interface description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "duplex": {
          "aliases": [],
          "description": "Interface link status. Applicable for ethernet interface only.",
          "type": "str",
          "required": false,
          "choices": [
            "full",
            "half",
            "auto"
          ],
          "suboptions": {}
        },
        "fabric_forwarding_anycast_gateway": {
          "aliases": [],
          "description": "Associate SVI with anycast gateway under VLAN configuration mode. Applicable for SVI interface only.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface_type": {
          "aliases": [],
          "description": "Interface type to be unconfigured from the device.",
          "type": "str",
          "required": false,
          "choices": [
            "loopback",
            "portchannel",
            "svi",
            "nve"
          ],
          "suboptions": {}
        },
        "ip_forward": {
          "aliases": [],
          "description": "Enable/Disable ip forward feature on SVIs.",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Manage Layer 2 or Layer 3 state of the interface. This option is supported for ethernet and portchannel interface. Applicable for ethernet and portchannel interface only.",
          "type": "str",
          "required": false,
          "choices": [
            "layer2",
            "layer3"
          ],
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "MTU for a specific interface. Must be an even number between 576 and 9216. Applicable for ethernet interface only.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "interface"
          ],
          "description": "Full name of interface, i.e. Ethernet1/1, port-channel10.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "neighbors": {
          "aliases": [],
          "description": "Check the operational state of given interface C(name) for LLDP neighbor.\nThe following suboptions are available. This is state check parameter only.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "LLDP neighbor host for given interface C(name).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "LLDP neighbor port to which given interface C(name) is connected.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rx_rate": {
          "aliases": [],
          "description": "Receiver rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see U(https://docs.ansible.com/ansible/latest/network/user_guide/network_working_with_command_output.html#conditionals-in-networking-modules)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "speed": {
          "aliases": [],
          "description": "Interface link speed. Applicable for ethernet interface only.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "default"
          ],
          "suboptions": {}
        },
        "tx_rate": {
          "aliases": [],
          "description": "Transmit rate in bits per second (bps).\nThis is state check parameter only.\nSupports conditionals, see U(https://docs.ansible.com/ansible/latest/network/user_guide/network_working_with_command_output.html#conditionals-in-networking-modules)",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manages physical attributes of interfaces.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure an interface is a Layer 3 port and that it has the proper description\n  cisco.nxos.nxos_interface:\n    name: Ethernet1/1\n    description: Configured by Ansible\n    mode: layer3\n\n- name: Admin down an interface\n  cisco.nxos.nxos_interface:\n    name: Ethernet2/1\n    admin_state: down\n\n- name: Remove all loopback interfaces\n  cisco.nxos.nxos_interface:\n    name: loopback\n    state: absent\n\n- name: Remove all logical interfaces\n  cisco.nxos.nxos_interface:\n    interface_type: '{{ item }} '\n    state: absent\n  loop:\n  - loopback\n  - portchannel\n  - svi\n  - nve\n\n- name: Admin up all loopback interfaces\n  cisco.nxos.nxos_interface:\n    name: loopback 0-1023\n    admin_state: up\n\n- name: Admin down all loopback interfaces\n  cisco.nxos.nxos_interface:\n    name: loopback 0-1023\n    admin_state: down\n\n- name: Check neighbors intent arguments\n  cisco.nxos.nxos_interface:\n    name: Ethernet2/3\n    neighbors:\n    - port: Ethernet2/3\n      host: abc.mycompany.com\n\n- name: Add interface using aggregate\n  cisco.nxos.nxos_interface:\n    aggregate:\n    - {name: Ethernet0/1, mtu: 256, description: test-interface-1}\n    - {name: Ethernet0/2, mtu: 516, description: test-interface-2}\n    duplex: full\n    speed: 100\n    state: present\n\n- name: Delete interface using aggregate\n  cisco.nxos.nxos_interface:\n    aggregate:\n    - name: Loopback9\n    - name: Loopback10\n    state: absent\n\n- name: Check intent arguments\n  cisco.nxos.nxos_interface:\n    name: Ethernet0/2\n    state: up\n    tx_rate: ge(0)\n    rx_rate: le(0)\n"
  },
  "cisco.nxos.nxos_interface_ospf": {
    "doc": {
      "description": "Manages configuration of an OSPF interface instance.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nDefault, where supported, restores params default value.\nTo remove an existing authentication configuration you should use C(message_digest_key_id=default) plus all other options matching their existing values.\nLoopback interfaces only support ospf network type 'point-to-point'.\nC(state=absent) removes the whole OSPF interface configuration.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "area": {
          "aliases": [],
          "description": "Ospf area associated with this cisco_interface_ospf instance. Valid values are a string, formatted as an IP address (i.e. \"0.0.0.0\") or as an integer.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "bfd": {
          "aliases": [],
          "description": "Enables bfd at interface level. This overrides the bfd variable set at the ospf router level.\nValid values are 'enable', 'disable' or 'default'.\nDependency: ''feature bfd''",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable",
            "default"
          ],
          "suboptions": {}
        },
        "cost": {
          "aliases": [],
          "description": "The cost associated with this cisco_interface_ospf instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dead_interval": {
          "aliases": [],
          "description": "Time interval an ospf neighbor waits for a hello packet before tearing down adjacencies. Valid values are an integer or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hello_interval": {
          "aliases": [],
          "description": "Time between sending successive hello packets. Valid values are an integer or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Name of this cisco_interface resource. Valid value is a string.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "message_digest": {
          "aliases": [],
          "description": "Enables or disables the usage of message digest authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "message_digest_algorithm_type": {
          "aliases": [],
          "description": "Algorithm used for authentication among neighboring routers within an area. Valid values are 'md5' and 'default'.",
          "type": "str",
          "required": false,
          "choices": [
            "md5",
            "default"
          ],
          "suboptions": {}
        },
        "message_digest_encryption_type": {
          "aliases": [],
          "description": "Specifies the scheme used for encrypting message_digest_password. Valid values are '3des' or 'cisco_type_7' encryption or 'default'.",
          "type": "str",
          "required": false,
          "choices": [
            "cisco_type_7",
            "3des",
            "default"
          ],
          "suboptions": {}
        },
        "message_digest_key_id": {
          "aliases": [],
          "description": "Md5 authentication key-id associated with the ospf instance. If this is present, message_digest_encryption_type, message_digest_algorithm_type and message_digest_password are mandatory. Valid value is an integer and 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "message_digest_password": {
          "aliases": [],
          "description": "Specifies the message_digest password. Valid value is a string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Specifies interface ospf network type. Valid values are 'point-to-point' or 'broadcast'.",
          "type": "str",
          "required": false,
          "choices": [
            "point-to-point",
            "broadcast"
          ],
          "suboptions": {}
        },
        "ospf": {
          "aliases": [],
          "description": "Name of the ospf instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "passive_interface": {
          "aliases": [],
          "description": "Enable or disable passive-interface state on this interface. true - (enable) Prevent OSPF from establishing an adjacency or sending routing updates on this interface. false - (disable) Override global 'passive-interface default' for this interface.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-10-26) Manages configuration of an OSPF interface instance.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_interface_ospf:\n    interface: ethernet1/32\n    ospf: 1\n    area: 1\n    bfd: disable\n    cost: default\n\n- cisco.nxos.nxos_interface_ospf:\n    interface: loopback0\n    ospf: prod\n    area: 0.0.0.0\n    bfd: enable\n    network: point-to-point\n    state: present\n"
  },
  "cisco.nxos.nxos_interfaces": {
    "doc": {
      "description": "This module manages the interface attributes of NX-OS interfaces.",
      "has_action": true,
      "notes": "Tested against NXOS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of interface options",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Interface description.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "duplex": {
              "aliases": [],
              "description": "Interface link status. Applicable for Ethernet interfaces only.",
              "type": "str",
              "required": false,
              "choices": [
                "full",
                "half",
                "auto"
              ],
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Administrative state of the interface. Set the value to C(true) to administratively enable the interface or C(false) to disable it",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "fabric_forwarding_anycast_gateway": {
              "aliases": [],
              "description": "Associate SVI with anycast gateway under VLAN configuration mode. Applicable for SVI interfaces only.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "ip_forward": {
              "aliases": [],
              "description": "Enable or disable IP forward feature on SVIs. Set the value to C(true) to enable  or C(false) to disable.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Manage Layer2 or Layer3 state of the interface. Applicable for Ethernet and port channel interfaces only.",
              "type": "str",
              "required": false,
              "choices": [
                "layer2",
                "layer3"
              ],
              "suboptions": {}
            },
            "mtu": {
              "aliases": [],
              "description": "MTU for a specific interface. Must be an even number between 576 and 9216. Applicable for Ethernet interfaces only.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Full name of interface, e.g. Ethernet1/1, port-channel10.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "speed": {
              "aliases": [],
              "description": "Interface link speed. Applicable for Ethernet interfaces only.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section ^interface)\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion\nThe state I(rendered) considers the system default mode for interfaces to be \"Layer 3\" and the system default state for interfaces to be shutdown.\nThe state I(purged) negates virtual interfaces that are specified in task from running-config.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed",
            "purged"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/1\n#   description testing\n#   mtu 1800\n\n- name: Merge provided configuration with device configuration\n  cisco.nxos.nxos_interfaces:\n    config:\n    - name: Ethernet1/1\n      description: Configured by Ansible\n      enabled: true\n    - name: Ethernet1/2\n      description: Configured by Ansible Network\n      enabled: false\n    state: merged\n\n# After state:\n# ------------\n#\n# interface Ethernet1/1\n#    description Configured by Ansible\n#    no shutdown\n#    mtu 1800\n# interface Ethernet2\n#    description Configured by Ansible Network\n#    shutdown\n\n\n# Using replaced\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/1\n#    description Interface 1/1\n# interface Ethernet1/2\n\n- name: Replaces device configuration of listed interfaces with provided configuration\n  cisco.nxos.nxos_interfaces:\n    config:\n    - name: Ethernet1/1\n      description: Configured by Ansible\n      enabled: true\n      mtu: 2000\n    - name: Ethernet1/2\n      description: Configured by Ansible Network\n      enabled: false\n      mode: layer2\n    state: replaced\n\n# After state:\n# ------------\n#\n# interface Ethernet1/1\n#   description Configured by Ansible\n#   no shutdown\n#   mtu 1500\n# interface Ethernet2/2\n#    description Configured by Ansible Network\n#    shutdown\n#    switchport\n\n\n# Using overridden\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/1\n#    description Interface Ethernet1/1\n# interface Ethernet1/2\n# interface mgmt0\n#    description Management interface\n#    ip address dhcp\n\n- name: Override device configuration of all interfaces with provided configuration\n  cisco.nxos.nxos_interfaces:\n    config:\n    - name: Ethernet1/1\n      enabled: true\n    - name: Ethernet1/2\n      description: Configured by Ansible Network\n      enabled: false\n    state: overridden\n\n# After state:\n# ------------\n#\n# interface Ethernet1/1\n# interface Ethernet1/2\n#    description Configured by Ansible Network\n#    shutdown\n# interface mgmt0\n#    ip address dhcp\n\n\n# Using deleted\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/1\n#    description Interface Ethernet1/1\n# interface Ethernet1/2\n# interface mgmt0\n#    description Management interface\n#    ip address dhcp\n\n- name: Delete or return interface parameters to default settings\n  cisco.nxos.nxos_interfaces:\n    config:\n    - name: Ethernet1/1\n    state: deleted\n\n# After state:\n# ------------\n#\n# interface Ethernet1/1\n# interface Ethernet1/2\n# interface mgmt0\n#    description Management interface\n#    ip address dhcp\n\n# Using rendered\n\n- name: Use rendered state to convert task input to device specific commands\n  cisco.nxos.nxos_interfaces:\n    config:\n    - name: Ethernet1/1\n      description: outbound-intf\n      mode: layer3\n      speed: 100\n    - name: Ethernet1/2\n      mode: layer2\n      enabled: true\n      duplex: full\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#   - \"interface Ethernet1/1\"\n#   - \"description outbound-intf\"\n#   - \"speed 100\"\n#   - \"interface Ethernet1/2\"\n#   - \"switchport\"\n#   - \"duplex full\"\n#   - \"no shutdown\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# interface Ethernet1/800\n#   description test-1\n#   speed 1000\n#   shutdown\n#   no switchport\n#   duplex half\n# interface Ethernet1/801\n#   description test-2\n#   switchport\n#   no shutdown\n#   mtu 1800\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_interfaces:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n#  parsed:\n#    - description: \"test-1\"\n#      duplex: \"half\"\n#      enabled: false\n#      mode: \"layer3\"\n#      name: \"Ethernet1/800\"\n#      speed: \"1000\"\n#\n#    - description: \"test-2\"\n#      enabled: true\n#      mode: \"layer2\"\n#      mtu: \"1800\"\n#      name: \"Ethernet1/801\"\n\n# Using gathered\n\n# Existing device config state\n# -----------------------------\n# interface Ethernet1/1\n#   description outbound-intf\n#   switchport\n#   no shutdown\n# interface Ethernet1/2\n#   description intf-l3\n#   speed 1000\n# interface Ethernet1/3\n# interface Ethernet1/4\n# interface Ethernet1/5\n\n- name: Gather interfaces facts from the device using nxos_interfaces\n  cisco.nxos.nxos_interfaces:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n# - name: Ethernet1/1\n#   description: outbound-intf\n#   mode: layer2\n#   enabled: True\n# - name: Ethernet1/2\n#   description: intf-l3\n#   speed: \"1000\"\n\n# Using purged\n\n# Existing device config state\n# -----------------------------\n# interface Vlan1\n# interface Vlan42\n#   mtu 1800\n# interface port-channel10\n# interface port-channel11\n# interface Ethernet1/1\n# interface Ethernet1/2\n# interface Ethernet1/2.100\n#   description sub-intf\n\n- name: Purge virtual interfaces from running-config\n  cisco.nxos.nxos_interfaces:\n    config:\n      - name: Vlan42\n      - name: port-channel10\n      - name: Ethernet1/2.100\n    state: purged\n\n# Task output\n# ------------\n# before:\n#   - name: Vlan1\n#   - mtu: '1800'\n#     name: Vlan42\n#   - name: port-channel10\n#   - name: port-channel11\n#   - name: Ethernet1/1\n#   - name: Ethernet1/2\n#   - description: sub-intf\n#     name: Ethernet1/2.100\n#\n# commands:\n#   - no interface port-channel10\n#   - no interface Ethernet1/2.100\n#   - no interface Vlan42\n#\n# after:\n#   - name: Vlan1\n#   - name: port-channel11\n#   - name: Ethernet1/1\n#   - name: Ethernet1/2\n"
  },
  "cisco.nxos.nxos_l2_interface": {
    "doc": {
      "description": "This module provides declarative management of Layer-2 interface on Cisco NXOS devices.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.0(3)I5(1).\nUnsupported for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "access_vlan": {
          "aliases": [],
          "description": "Configure given VLAN in access port. If C(mode=access), used as the access VLAN ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [],
          "description": "List of Layer-2 interface definitions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "access_vlan": {
              "aliases": [],
              "description": "Configure given VLAN in access port. If C(mode=access), used as the access VLAN ID.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Mode in which interface needs to be configured.",
              "type": "str",
              "required": false,
              "choices": [
                "access",
                "trunk"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [
                "interface"
              ],
              "description": "Full name of the interface excluding any logical unit number, i.e. Ethernet1/1.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "native_vlan": {
              "aliases": [],
              "description": "Native VLAN to be configured in trunk port. If C(mode=trunk), used as the trunk native VLAN ID.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Manage the state of the Layer-2 Interface configuration.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent",
                "unconfigured"
              ],
              "suboptions": {}
            },
            "trunk_allowed_vlans": {
              "aliases": [],
              "description": "List of allowed VLANs in a given trunk port. If C(mode=trunk), these are the only VLANs that will be configured on the trunk, i.e. \"2-10,15\".",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "trunk_vlans": {
              "aliases": [
                "trunk_add_vlans"
              ],
              "description": "List of VLANs to be configured in trunk port. If C(mode=trunk), used as the VLAN range to ADD or REMOVE from the trunk.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "mode": {
          "aliases": [],
          "description": "Mode in which interface needs to be configured.",
          "type": "str",
          "required": false,
          "choices": [
            "access",
            "trunk"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "interface"
          ],
          "description": "Full name of the interface excluding any logical unit number, i.e. Ethernet1/1.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "native_vlan": {
          "aliases": [],
          "description": "Native VLAN to be configured in trunk port. If C(mode=trunk), used as the trunk native VLAN ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the Layer-2 Interface configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "unconfigured"
          ],
          "suboptions": {}
        },
        "trunk_allowed_vlans": {
          "aliases": [],
          "description": "List of allowed VLANs in a given trunk port. If C(mode=trunk), these are the only VLANs that will be configured on the trunk, i.e. \"2-10,15\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "trunk_vlans": {
          "aliases": [
            "trunk_add_vlans"
          ],
          "description": "List of VLANs to be configured in trunk port. If C(mode=trunk), used as the VLAN range to ADD or REMOVE from the trunk.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manage Layer-2 interface on Cisco NXOS devices.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure Eth1/5 is in its default l2 interface state\n  cisco.nxos.nxos_l2_interface:\n    name: Ethernet1/5\n    state: unconfigured\n\n- name: Ensure Eth1/5 is configured for access vlan 20\n  cisco.nxos.nxos_l2_interface:\n    name: Ethernet1/5\n    mode: access\n    access_vlan: 20\n\n- name: Ensure Eth1/5 only has vlans 5-10 as trunk vlans\n  cisco.nxos.nxos_l2_interface:\n    name: Ethernet1/5\n    mode: trunk\n    native_vlan: 10\n    trunk_vlans: 5-10\n\n- name: Ensure eth1/5 is a trunk port and ensure 2-50 are being tagged (doesn't mean\n    others aren't also being tagged)\n  cisco.nxos.nxos_l2_interface:\n    name: Ethernet1/5\n    mode: trunk\n    native_vlan: 10\n    trunk_vlans: 2-50\n\n- name: Ensure these VLANs are not being tagged on the trunk\n  cisco.nxos.nxos_l2_interface:\n    name: Ethernet1/5\n    mode: trunk\n    trunk_vlans: 51-4094\n    state: absent\n\n- name: Aggregate Configure interfaces for access_vlan with aggregate\n  cisco.nxos.nxos_l2_interface:\n    aggregate:\n    - {name: Ethernet1/2, access_vlan: 6}\n    - {name: Ethernet1/7, access_vlan: 15}\n    mode: access\n"
  },
  "cisco.nxos.nxos_l2_interfaces": {
    "doc": {
      "description": "This module manages Layer-2 interfaces attributes of NX-OS Interfaces.",
      "has_action": true,
      "notes": "Tested against NXOS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of Layer-2 interface options",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "access": {
              "aliases": [],
              "description": "Switchport mode access command to configure the interface as a Layer-2 access.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "vlan": {
                  "aliases": [],
                  "description": "Configure given VLAN in access port. It's used as the access VLAN ID.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "mode": {
              "aliases": [],
              "description": "Mode in which interface needs to be configured.\nAccess mode is not shown in interface facts, so idempotency will not be maintained for switchport mode access and every time the output will come as changed=True.",
              "type": "str",
              "required": false,
              "choices": [
                "access",
                "trunk",
                "fex-fabric",
                "fabricpath"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Full name of interface, i.e. Ethernet1/1.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "trunk": {
              "aliases": [],
              "description": "Switchport mode trunk command to configure the interface as a Layer-2 trunk.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowed_vlans": {
                  "aliases": [],
                  "description": "List of allowed VLANs in a given trunk port. These are the only VLANs that will be configured on the trunk.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "native_vlan": {
                  "aliases": [],
                  "description": "Native VLAN to be configured in trunk port. It is used as the trunk native VLAN ID.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section ^interface).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "L2 interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/1\n#   switchport access vlan 20\n# interface Ethernet1/2\n#   switchport trunk native vlan 20\n# interface mgmt0\n#   ip address dhcp\n#   ipv6 address auto-config\n\n- name: Merge provided configuration with device configuration.\n  cisco.nxos.nxos_l2_interfaces:\n    config:\n    - name: Ethernet1/1\n      trunk:\n        native_vlan: 10\n        allowed_vlans: 2,4,15\n    - name: Ethernet1/2\n      access:\n        vlan: 30\n    state: merged\n\n# After state:\n# ------------\n#\n# interface Ethernet1/1\n#   switchport trunk native vlan 10\n#   switchport trunk allowed vlans 2,4,15\n# interface Ethernet1/2\n#   switchport access vlan 30\n# interface mgmt0\n#   ip address dhcp\n#   ipv6 address auto-config\n\n\n# Using replaced\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/1\n#   switchport access vlan 20\n# interface Ethernet1/2\n#   switchport trunk native vlan 20\n# interface mgmt0\n#   ip address dhcp\n#   ipv6 address auto-config\n\n- name: Replace device configuration of specified L2 interfaces with provided configuration.\n  cisco.nxos.nxos_l2_interfaces:\n    config:\n    - name: Ethernet1/1\n      trunk:\n        native_vlan: 20\n        allowed_vlans: 5-10, 15\n    state: replaced\n\n# After state:\n# ------------\n#\n# interface Ethernet1/1\n#   switchport trunk native vlan 20\n#   switchport trunk allowed vlan 5-10,15\n# interface Ethernet1/2\n#   switchport trunk native vlan 20\n#   switchport mode trunk\n# interface mgmt0\n#   ip address dhcp\n#   ipv6 address auto-config\n\n\n# Using overridden\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/1\n#   switchport access vlan 20\n# interface Ethernet1/2\n#   switchport trunk native vlan 20\n# interface mgmt0\n#   ip address dhcp\n#   ipv6 address auto-config\n\n- name: Override device configuration of all L2 interfaces on device with provided\n    configuration.\n  cisco.nxos.nxos_l2_interfaces:\n    config:\n    - name: Ethernet1/2\n      access:\n        vlan: 30\n    state: overridden\n\n# After state:\n# ------------\n#\n# interface Ethernet1/1\n# interface Ethernet1/2\n#   switchport access vlan 30\n# interface mgmt0\n#   ip address dhcp\n#   ipv6 address auto-config\n\n\n# Using deleted\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/1\n#   switchport access vlan 20\n# interface Ethernet1/2\n#   switchport trunk native vlan 20\n# interface mgmt0\n#   ip address dhcp\n#   ipv6 address auto-config\n\n- name: Delete L2 attributes of given interfaces (Note This won't delete the interface\n    itself).\n  cisco.nxos.nxos_l2_interfaces:\n    config:\n    - name: Ethernet1/1\n    - name: Ethernet1/2\n    state: deleted\n\n# After state:\n# ------------\n#\n# interface Ethernet1/1\n# interface Ethernet1/2\n# interface mgmt0\n#   ip address dhcp\n#   ipv6 address auto-config\n\n# Using rendered\n\n- name: Render platform specific configuration lines (without connecting to the device)\n  cisco.nxos.nxos_l2_interfaces:\n    config:\n    - name: Ethernet1/1\n      trunk:\n        native_vlan: 10\n        allowed_vlans: 2,4,15\n    - name: Ethernet1/2\n      access:\n        vlan: 30\n    - name: Ethernet1/3\n      trunk:\n        native_vlan: 20\n        allowed_vlans: 5-10, 15\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#  - \"interface Ethernet1/1\"\n#  - \"switchport trunk allowed vlan 2,4,15\"\n#  - \"switchport trunk native vlan 10\"\n#  - \"interface Ethernet1/2\"\n#  - \"switchport access vlan 30\"\n#  - \"interface Ethernet1/3\"\n#  - \"switchport trunk allowed vlan 5,6,7,8,9,10,15\"\n#  - \"switchport trunk native vlan 20\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# interface Ethernet1/800\n#   switchport access vlan 18\n#   switchport trunk allowed vlan 210\n# interface Ethernet1/801\n#   switchport trunk allowed vlan 2,4,15\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_l2_interfaces:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# parsed:\n#  - name: Ethernet1/800\n#    access:\n#      vlan: 18\n#    trunk:\n#      allowed_vlans: \"210\"\n#  - name: Ethernet1/801\n#    trunk:\n#      allowed_vlans: \"2,4,15\"\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n# Nexus9kvI5# sh running-config | section ^interface\n# interface Ethernet1/1\n#   switchport access vlan 6\n#   switchport trunk allowed vlan 200\n# interface Ethernet1/2\n#   switchport trunk native vlan 10\n\n- name: Gather l2_interfaces facts from the device using nxos_l2_interfaces\n  cisco.nxos.nxos_l2_interfaces:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n# gathered:\n#  - name: \"Ethernet1/1\"\n#    access:\n#      vlan: 6\n#    trunk:\n#      allowed_vlans: \"200\"\n#\n#  - name: \"Ethernet1/2\"\n#    trunk:\n#      native_vlan: 10\n"
  },
  "cisco.nxos.nxos_l3_interface": {
    "doc": {
      "description": "This module provides declarative management of L3 interfaces on Cisco NXOS network devices.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.0(3)I5(1).\nUnsupported for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of L3 interfaces definitions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ipv4": {
              "aliases": [],
              "description": "IPv4 of the L3 interface.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ipv6": {
              "aliases": [],
              "description": "IPv6 of the L3 interface.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the L3 interface.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the L3 interface configuration.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            }
          }
        },
        "ipv4": {
          "aliases": [],
          "description": "IPv4 of the L3 interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipv6": {
          "aliases": [],
          "description": "IPv6 of the L3 interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the L3 interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "State of the L3 interface configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manage L3 interfaces on Cisco NXOS network devices",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Set interface IPv4 address\n  cisco.nxos.nxos_l3_interface:\n    name: Ethernet2/3\n    ipv4: 192.168.0.1/24\n\n- name: Remove interface IPv4 address\n  cisco.nxos.nxos_l3_interface:\n    name: Ethernet2/3\n    state: absent\n\n- name: Set IP addresses on aggregate\n  cisco.nxos.nxos_l3_interface:\n    aggregate:\n    - {name: \"Ethernet2/1\", ipv4: \"192.168.2.10/24\"}\n    - {name: \"Ethernet2/5\", ipv4: \"192.168.3.10/24\", ipv6: \"fd5d:12c9:2201:1::1/64\"}\n\n- name: Remove IP addresses on aggregate\n  cisco.nxos.nxos_l3_interface:\n    aggregate:\n    - {name: \"Ethernet2/1\", ipv4: \"192.168.2.10/24\"}\n    - {name: \"Ethernet2/5\", ipv4: \"192.168.3.10/24\", ipv6: \"fd5d:12c9:2201:1::1/64\"}\n    state: absent\n"
  },
  "cisco.nxos.nxos_l3_interfaces": {
    "doc": {
      "description": "This module manages Layer-3 interfaces attributes of NX-OS Interfaces.",
      "has_action": true,
      "notes": "Tested against NXOS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of Layer-3 interface options",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "dot1q": {
              "aliases": [],
              "description": "Configures IEEE 802.1Q VLAN encapsulation on a subinterface.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "evpn_multisite_tracking": {
              "aliases": [],
              "description": "VxLAN evpn multisite Interface tracking. Supported only on selected model.",
              "type": "str",
              "required": false,
              "choices": [
                "fabric-tracking",
                "dci-tracking"
              ],
              "version_added": "1.1.0",
              "suboptions": {}
            },
            "ipv4": {
              "aliases": [],
              "description": "IPv4 address and attributes of the L3 interface.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "address": {
                  "aliases": [],
                  "description": "IPV4 address of the L3 interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "secondary": {
                  "aliases": [],
                  "description": "A boolean attribute to manage addition of secondary IP address.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "tag": {
                  "aliases": [],
                  "description": "URIB route tag value for local/direct routes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "ipv6": {
              "aliases": [],
              "description": "IPv6 address and attributes of the L3 interface.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "address": {
                  "aliases": [],
                  "description": "IPV6 address of the L3 interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "tag": {
                  "aliases": [],
                  "description": "URIB route tag value for local/direct routes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "name": {
              "aliases": [],
              "description": "Full name of L3 interface, i.e. Ethernet1/1.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "redirects": {
              "aliases": [],
              "description": "Enables/disables ip redirects",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "unreachables": {
              "aliases": [],
              "description": "Enables/disables ip redirects",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^interface').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion.\nThe state I(overridden) would override the IP address configuration of all interfaces on the device with the provided configuration in the task. Use caution with this state as you may loose access to the device.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "L3 interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/6\n\n- name: Merge provided configuration with device configuration.\n  cisco.nxos.nxos_l3_interfaces:\n    config:\n    - name: Ethernet1/6\n      ipv4:\n      - address: 192.168.1.1/24\n        tag: 5\n      - address: 10.1.1.1/24\n        secondary: true\n        tag: 10\n      ipv6:\n      - address: fd5d:12c9:2201:2::1/64\n        tag: 6\n    - name: Ethernet1/7.42\n      dot1q: 42\n      redirects: false\n      unreachables: false\n    state: merged\n\n# After state:\n# ------------\n#\n# interface Ethernet1/6\n#   ip address 192.168.22.1/24 tag 5\n#   ip address 10.1.1.1/24 secondary tag 10\n# interface Ethernet1/6\n#   ipv6 address fd5d:12c9:2201:2::1/64 tag 6\n# interface Ethernet1/7.42\n#   encapsulation dot1q 42\n#   no ip redirects\n#   no ip unreachables\n\n\n# Using replaced\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/6\n#   ip address 192.168.22.1/24\n#   ipv6 address \"fd5d:12c9:2201:1::1/64\"\n\n- name: Replace device configuration of specified L3 interfaces with provided configuration.\n  cisco.nxos.nxos_l3_interfaces:\n    config:\n    - name: Ethernet1/6\n      ipv4:\n        - address: 192.168.22.3/24\n    state: replaced\n\n# After state:\n# ------------\n#\n# interface Ethernet1/6\n#   ip address 192.168.22.3/24\n\n\n# Using overridden\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/2\n#   ip address 192.168.22.1/24\n# interface Ethernet1/6\n#   ipv6 address \"fd5d:12c9:2201:1::1/64\"\n\n- name: Override device configuration of all L3 interfaces on device with provided\n    configuration.\n  cisco.nxos.nxos_l3_interfaces:\n    config:\n    - name: Ethernet1/2\n      ipv4: 192.168.22.3/4\n    state: overridden\n\n# After state:\n# ------------\n#\n# interface Ethernet1/2\n#   ipv4 address 192.168.22.3/24\n# interface Ethernet1/6\n\n\n# Using deleted\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/6\n#   ip address 192.168.22.1/24\n# interface Ethernet1/2\n#   ipv6 address \"fd5d:12c9:2201:1::1/64\"\n\n- name: Delete L3 attributes of given interfaces (This won't delete the interface\n    itself).\n  cisco.nxos.nxos_l3_interfaces:\n    config:\n    - name: Ethernet1/6\n    - name: Ethernet1/2\n    state: deleted\n\n# After state:\n# ------------\n#\n# interface Ethernet1/6\n# interface Ethernet1/2\n\n# Using rendered\n\n- name: Use rendered state to convert task input to device specific commands\n  cisco.nxos.nxos_l3_interfaces:\n    config:\n    - name: Ethernet1/800\n      ipv4:\n      - address: 192.168.1.100/24\n        tag: 5\n      - address: 10.1.1.1/24\n        secondary: true\n        tag: 10\n    - name: Ethernet1/800\n      ipv6:\n      - address: fd5d:12c9:2201:2::1/64\n        tag: 6\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#   - \"interface Ethernet1/800\"\n#   - \"ip address 192.168.1.100/24 tag 5\"\n#   - \"ip address 10.1.1.1/24 secondary tag 10\"\n#   - \"interface Ethernet1/800\"\n#   - \"ipv6 address fd5d:12c9:2201:2::1/64 tag 6\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# interface Ethernet1/800\n#   ip address 192.168.1.100/24 tag 5\n#   ip address 10.1.1.1/24 secondary tag 10\n#   no ip redirects\n# interface Ethernet1/801\n#   ipv6 address fd5d:12c9:2201:2::1/64 tag 6\n#   ip unreachables\n# interface mgmt0\n#   ip address dhcp\n#   vrf member management\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_l3_interfaces:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n\n# parsed:\n#   - name: Ethernet1/800\n#     ipv4:\n#       - address: 192.168.1.100/24\n#         tag: 5\n#       - address: 10.1.1.1/24\n#         secondary: True\n#         tag: 10\n#     redirects: False\n#   - name: Ethernet1/801\n#     ipv6:\n#      - address: fd5d:12c9:2201:2::1/64\n#        tag: 6\n#     unreachables: True\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n# interface Ethernet1/1\n#   ip address 192.0.2.100/24\n# interface Ethernet1/2\n#   no ip redirects\n#   ip address 203.0.113.10/24\n#   ip unreachables\n#   ipv6 address 2001:db8::1/32\n\n- name: Gather l3_interfaces facts from the device using nxos_l3_interfaces\n  cisco.nxos.nxos_l3_interfaces:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n\n# gathered:\n#   - name: Ethernet1/1\n#     ipv4:\n#       - address: 192.0.2.100/24\n#   - name: Ethernet1/2\n#     ipv4:\n#       - address: 203.0.113.10/24\n#     ipv6:\n#       - address: 2001:db8::1/32\n#     redirects: False\n#     unreachables: True\n"
  },
  "cisco.nxos.nxos_lacp": {
    "doc": {
      "description": "This module manages Global Link Aggregation Control Protocol (LACP) on NX-OS devices.",
      "has_action": true,
      "notes": "Tested against NXOS 7.3.(0)D1(1) on VIRL.\nUnsupported for Cisco MDS\nFeature lacp should be enabled for this module.",
      "options": {
        "config": {
          "aliases": [],
          "description": "LACP global options.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "system": {
              "aliases": [],
              "description": "LACP system options",
              "type": "dict",
              "required": false,
              "suboptions": {
                "mac": {
                  "aliases": [],
                  "description": "MAC address to be used for the LACP Protocol exchanges",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "address": {
                      "aliases": [],
                      "description": "MAC-address (FORMAT :xxxx.xxxx.xxxx).",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "role": {
                      "aliases": [],
                      "description": "The role for the Switch.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "primary",
                        "secondary"
                      ],
                      "suboptions": {}
                    }
                  }
                },
                "priority": {
                  "aliases": [],
                  "description": "The system priority to use in LACP negotiations.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | include lacp).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "LACP resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n\n- name: Merge provided configuration with device configuration.\n  cisco.nxos.nxos_lacp:\n    config:\n      system:\n        priority: 10\n        mac:\n          address: 00c1.4c00.bd15\n    state: merged\n\n# After state:\n# ------------\n#\n# lacp system-priority 10\n# lacp system-mac 00c1.4c00.bd15\n\n\n# Using replaced\n\n# Before state:\n# -------------\n#\n# lacp system-priority 10\n\n- name: Replace device global lacp configuration with the given configuration.\n  cisco.nxos.nxos_lacp:\n    config:\n      system:\n        mac:\n          address: 00c1.4c00.bd15\n    state: replaced\n\n# After state:\n# ------------\n#\n# lacp system-mac 00c1.4c00.bd15\n\n\n# Using deleted\n\n# Before state:\n# -------------\n#\n# lacp system-priority 10\n\n- name: Delete global LACP configurations.\n  cisco.nxos.nxos_lacp:\n    state: deleted\n\n# After state:\n# ------------\n#\n\n# Using rendered\n\n- name: Render platform specific configuration lines (without connecting to the device)\n  cisco.nxos.nxos_lacp:\n    config:\n      system:\n        priority: 10\n        mac:\n          address: 00c1.4c00.bd15\n          role: secondary\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#   - \"lacp system-priority 10\"\n#   - \"lacp system-mac 00c1.4c00.bd15 role secondary\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# lacp system-priority 10\n# lacp system-mac 00c1.4c00.bd15 role secondary\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_lacp:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# parsed:\n#  system:\n#    priority: 10\n#    mac:\n#      address: 00c1.4c00.bd15\n#      role: secondary\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n# Nexus9000v# show running-config | include lacp\n# lacp system-priority 11\n# lacp system-mac 00c1.4c00.bd15 role primary\n\n- name: Gather lacp facts from the device using nxos_lacp\n  cisco.nxos.nxos_lacp:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n# gathered:\n#  system:\n#    priority: 11\n#    mac:\n#      address: 00c1.4c00.bd15\n#      role: primary\n"
  },
  "cisco.nxos.nxos_lacp_interfaces": {
    "doc": {
      "description": "This module manages Link Aggregation Control Protocol (LACP) attributes of NX-OS Interfaces.",
      "has_action": true,
      "notes": "Tested against NXOS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of LACP interfaces options.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "convergence": {
              "aliases": [],
              "description": "This dict contains configurable options related to convergence. Applicable only for Port-channel.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "graceful": {
                  "aliases": [],
                  "description": "port-channel lacp graceful convergence. Disable this only with lacp ports connected to Non-Nexus peer. Disabling this with Nexus peer can lead to port suspension.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "vpc": {
                  "aliases": [],
                  "description": "Enable lacp convergence for vPC port channels.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "links": {
              "aliases": [],
              "description": "This dict contains configurable options related to max and min port-channel links. Applicable only for Port-channel.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "max": {
                  "aliases": [],
                  "description": "Port-channel max bundle.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "min": {
                  "aliases": [],
                  "description": "Port-channel min links.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "mode": {
              "aliases": [],
              "description": "LACP mode. Applicable only for Port-channel.",
              "type": "str",
              "required": false,
              "choices": [
                "delay"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the interface.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "port_priority": {
              "aliases": [],
              "description": "LACP port priority for the interface. Range 1-65535. Applicable only for Ethernet.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "rate": {
              "aliases": [],
              "description": "Rate at which PDUs are sent by LACP. Applicable only for Ethernet. At fast rate LACP is transmitted once every 1 second. At normal rate LACP is transmitted every 30 seconds after the link is bundled.",
              "type": "str",
              "required": false,
              "choices": [
                "fast",
                "normal"
              ],
              "suboptions": {}
            },
            "suspend_individual": {
              "aliases": [],
              "description": "port-channel lacp state. Disabling this will cause lacp to put the port to individual state and not suspend the port in case it does not get LACP BPDU from the peer ports in the port-channel.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section ^interface).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "LACP interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n\n- name: Merge provided configuration with device configuration.\n  cisco.nxos.nxos_lacp_interfaces:\n    config:\n    - name: Ethernet1/3\n      port_priority: 5\n      rate: fast\n    state: merged\n\n# After state:\n# ------------\n#\n# interface Ethernet1/3\n# lacp port-priority 5\n# lacp rate fast\n\n\n# Using replaced\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/3\n#   lacp port-priority 5\n# interface port-channel11\n#   lacp mode delay\n\n- name: Replace device lacp interfaces configuration with the given configuration.\n  cisco.nxos.nxos_lacp_interfaces:\n    config:\n    - name: port-channel11\n      links:\n        min: 4\n    state: replaced\n\n# After state:\n# ------------\n#\n# interface Ethernet1/3\n#   lacp port-priority 5\n# interface port-channel11\n#   lacp min-links 4\n\n\n# Using overridden\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/3\n#   lacp port-priority 5\n# interface port-channel11\n#   lacp mode delay\n\n- name: Override device configuration of all LACP interfaces attributes of given interfaces\n    on device with provided configuration.\n  cisco.nxos.nxos_lacp_interfaces:\n    config:\n    - name: port-channel11\n      links:\n        min: 4\n    state: overridden\n\n# After state:\n# ------------\n#\n# interface port-channel11\n# lacp min-links 4\n\n\n# Using deleted\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/3\n#   lacp port-priority 5\n# interface port-channel11\n#   lacp mode delay\n\n- name: Delete LACP interfaces configurations.\n  cisco.nxos.nxos_lacp_interfaces:\n    state: deleted\n\n# After state:\n# ------------\n#\n\n# Using rendered\n\n- name: Use rendered state to convert task input to device specific commands\n  cisco.nxos.nxos_lacp_interfaces:\n    config:\n    - name: Ethernet1/800\n      rate: fast\n    - name: Ethernet1/801\n      rate: fast\n      port_priority: 32\n    - name: port-channel10\n      links:\n        max: 15\n        min: 2\n      convergence:\n        graceful: true\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#  - \"interface Ethernet1/800\"\n#  - \"lacp rate fast\"\n#  - \"interface Ethernet1/801\"\n#  - \"lacp port-priority 32\"\n#  - \"lacp rate fast\"\n#  - \"interface port-channel10\"\n#  - \"lacp min-links 2\"\n#  - \"lacp max-bundle 15\"\n#  - \"lacp graceful-convergence\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n\n# interface port-channel10\n#   lacp min-links 10\n#   lacp max-bundle 15\n# interface Ethernet1/800\n#   lacp port-priority 100\n#   lacp rate fast\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_lacp_interfaces:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n\n# parsed:\n#   - name: port-channel10\n#     links:\n#       max: 15\n#       min: 10\n#   - name: Ethernet1/800\n#     port_priority: 100\n#     rate: fast\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n# interface Ethernet1/1\n#   lacp port-priority 5\n#   lacp rate fast\n# interface port-channel10\n#   lacp mode delay\n# interface port-channel11\n#   lacp max-bundle 10\n#   lacp min-links 5\n\n- name: Gather lacp_interfaces facts from the device using nxos_lacp_interfaces\n  cisco.nxos.nxos_lacp_interfaces:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n# gathered:\n#  - name: Ethernet1/1\n#    port_priority: 5\n#    rate: fast\n#  - name: port-channel10\n#    mode: delay\n#  - name: port-channel11\n#    links:\n#      max: 10\n#      min: 5\n"
  },
  "cisco.nxos.nxos_lag_interfaces": {
    "doc": {
      "description": "This module manages attributes of link aggregation groups of NX-OS Interfaces.",
      "has_action": true,
      "notes": "Tested against NXOS 7.3.(0)D1(1) on VIRL.\nUnsupported for Cisco MDS\nThis module works with connection C(network_cli).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of link aggregation group configurations.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "members": {
              "aliases": [],
              "description": "The list of interfaces that are part of the group.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "force": {
                  "aliases": [],
                  "description": "When true it forces link aggregation group members to match what is declared in the members param. This can be used to remove members.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "member": {
                  "aliases": [],
                  "description": "The interface name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mode": {
                  "aliases": [],
                  "description": "Link aggregation group (LAG).",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "active",
                    "on",
                    "passive"
                  ],
                  "suboptions": {}
                }
              }
            },
            "name": {
              "aliases": [],
              "description": "Name of the link aggregation group (LAG).",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section ^interface).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "LAG interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/4\n\n- name: Merge provided configuration with device configuration.\n  cisco.nxos.nxos_lag_interfaces:\n    config:\n    - name: port-channel99\n      members:\n      - member: Ethernet1/4\n    state: merged\n\n# After state:\n# ------------\n#\n# interface Ethernet1/4\n#   channel-group 99\n\n\n# Using replaced\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/4\n#   channel-group 99 mode active\n\n- name: Replace device configuration of specified LAG attributes of given interfaces\n    with provided configuration.\n  cisco.nxos.nxos_lag_interfaces:\n    config:\n    - name: port-channel10\n      members:\n      - member: Ethernet1/4\n    state: replaced\n\n# After state:\n# ------------\n#\n# interface Ethernet1/4\n#   channel-group 10\n\n\n# Using overridden\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/4\n#   channel-group 10\n# interface Ethernet1/2\n#   channel-group 99 mode passive\n\n- name: Override device configuration of all LAG attributes of given interfaces on\n    device with provided configuration.\n  cisco.nxos.nxos_lag_interfaces:\n    config:\n    - name: port-channel20\n      members:\n      - member: Ethernet1/6\n        force: true\n    state: overridden\n\n# After state:\n# ------------\n# interface Ethernet1/2\n# interface Ethernet1/4\n# interface Ethernet1/6\n#   channel-group 20 force\n\n\n# Using deleted\n\n# Before state:\n# -------------\n#\n# interface Ethernet1/4\n#   channel-group 99 mode active\n\n- name: Delete LAG attributes of given interface (This won't delete the port-channel\n    itself).\n  cisco.nxos.nxos_lag_interfaces:\n    config:\n    - port-channel: port-channel99\n    state: deleted\n\n- name: Delete LAG attributes of all the interfaces\n  cisco.nxos.nxos_lag_interfaces:\n    state: deleted\n\n# After state:\n# ------------\n#\n# interface Ethernet1/4\n#   no channel-group 99\n\n# Using rendered\n\n- name: Use rendered state to convert task input to device specific commands\n  cisco.nxos.nxos_lag_interfaces:\n    config:\n    - name: port-channel10\n      members:\n      - member: Ethernet1/800\n        mode: active\n      - member: Ethernet1/801\n    - name: port-channel11\n      members:\n      - member: Ethernet1/802\n        mode: passive\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#  - \"interface Ethernet1/800\"\n#  - \"channel-group 10 mode active\"\n#  - \"interface Ethernet1/801\"\n#  - \"channel-group 10\"\n#  - \"interface Ethernet1/802\"\n#  - \"channel-group 11 mode passive\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n\n# interface port-channel10\n# interface port-channel11\n# interface port-channel12\n# interface Ethernet1/800\n#   channel-group 10 mode active\n# interface Ethernet1/801\n#   channel-group 10 mode active\n# interface Ethernet1/802\n#   channel-group 11 mode passive\n# interface Ethernet1/803\n#   channel-group 11 mode passive\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_lag_interfaces:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n\n# parsed:\n#  - members:\n#      - member: Ethernet1/800\n#        mode: active\n#      - member: Ethernet1/801\n#        mode: active\n#    name: port-channel10\n#\n#  - members:\n#      - member: Ethernet1/802\n#        mode: passive\n#      - member: Ethernet1/803\n#        mode: passive\n#    name: port-channel11\n#\n#  - name: port-channel12\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n# interface port-channel10\n# interface port-channel11\n# interface Ethernet1/1\n#   channel-group 10 mode active\n# interface Ethernet1/2\n#   channel-group 11 mode passive\n#\n\n- name: Gather lag_interfaces facts from the device using nxos_lag_interfaces\n  cisco.nxos.nxos_lag_interfaces:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n# gathered:\n#  - name: port-channel10\n#    members:\n#      - member: Ethernet1/1\n#        mode: active\n#  - name: port-channel11\n#    members:\n#      - member: Ethernet1/2\n#        mode: passive\n"
  },
  "cisco.nxos.nxos_linkagg": {
    "doc": {
      "description": "This module provides declarative management of link aggregation groups on Cisco NXOS devices.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.0(3)I5(1).\nUnsupported for Cisco MDS\nC(state=absent) removes the portchannel config and interface if it already exists. If members to be removed are not explicitly passed, all existing members (if any), are removed.\nMembers must be a list.\nLACP needs to be enabled first if active/passive modes are used.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of link aggregation definitions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "force": {
              "aliases": [],
              "description": "When true it forces link aggregation group members to match what is declared in the members param. This can be used to remove members.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "group": {
              "aliases": [],
              "description": "Channel-group number for the port-channel Link aggregation group.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "members": {
              "aliases": [],
              "description": "List of interfaces that will be managed in the link aggregation group.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "min_links": {
              "aliases": [],
              "description": "Minimum number of ports required up before bringing up the link aggregation group.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Mode for the link aggregation group.",
              "type": "str",
              "required": false,
              "choices": [
                "active",
                "on",
                "passive"
              ],
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the link aggregation group.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            }
          }
        },
        "force": {
          "aliases": [],
          "description": "When true it forces link aggregation group members to match what is declared in the members param. This can be used to remove members.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Channel-group number for the port-channel Link aggregation group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "List of interfaces that will be managed in the link aggregation group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "min_links": {
          "aliases": [],
          "description": "Minimum number of ports required up before bringing up the link aggregation group.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode for the link aggregation group.",
          "default": "on",
          "type": "str",
          "required": false,
          "choices": [
            "active",
            "on",
            "passive"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "purge": {
          "aliases": [],
          "description": "Purge links not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the link aggregation group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manage link aggregation groups on Cisco NXOS devices.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: create link aggregation group\n  cisco.nxos.nxos_linkagg:\n    group: 99\n    state: present\n\n- name: delete link aggregation group\n  cisco.nxos.nxos_linkagg:\n    group: 99\n    state: absent\n\n- name: set link aggregation group to members\n  cisco.nxos.nxos_linkagg:\n    group: 10\n    min_links: 3\n    mode: active\n    members:\n    - Ethernet1/2\n    - Ethernet1/4\n\n- name: remove link aggregation group from Ethernet1/2\n  cisco.nxos.nxos_linkagg:\n    group: 10\n    min_links: 3\n    mode: active\n    members:\n    - Ethernet1/4\n\n- name: Create aggregate of linkagg definitions\n  cisco.nxos.nxos_linkagg:\n    aggregate:\n    - {group: 3}\n    - {group: 100, min_links: 3}\n\n- name: Remove aggregate of linkagg definitions\n  cisco.nxos.nxos_linkagg:\n    aggregate:\n    - {group: 3}\n    - {group: 100, min_links: 3}\n    state: absent\n"
  },
  "cisco.nxos.nxos_lldp": {
    "doc": {
      "description": "This module provides declarative management of LLDP service on Cisco NXOS network devices.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.0(3)I5(1).\nUnsupported for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "State of the LLDP configuration. If value is I(present) lldp will be enabled else if it is I(absent) it will be disabled.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manage LLDP configuration on Cisco NXOS network devices.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Enable LLDP service\n  cisco.nxos.nxos_lldp:\n    state: present\n\n- name: Disable LLDP service\n  cisco.nxos.nxos_lldp:\n    state: absent\n"
  },
  "cisco.nxos.nxos_lldp_global": {
    "doc": {
      "description": "This module configures and manages the Link Layer Discovery Protocol(LLDP) attributes on NX-OS platforms.",
      "has_action": true,
      "notes": "Tested against NxOS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nThe LLDP feature needs to be enabled before using this module",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of link layer discovery configurations",
          "type": "dict",
          "required": false,
          "suboptions": {
            "holdtime": {
              "aliases": [],
              "description": "Amount of time the receiving device should hold the information (in seconds)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "port_id": {
              "aliases": [],
              "description": "This attribute defines if the interface names should be advertised in the long(0) or short(1) form.",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1"
              ],
              "suboptions": {}
            },
            "reinit": {
              "aliases": [],
              "description": "Amount of time to delay the initialization of LLDP on any interface (in seconds)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "timer": {
              "aliases": [],
              "description": "Frequency at which LLDP updates need to be transmitted (in seconds)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "tlv_select": {
              "aliases": [],
              "description": "This attribute can be used to specify the TLVs that need to be sent and received in the LLDP packets. By default, all TLVs are advertised",
              "type": "dict",
              "required": false,
              "suboptions": {
                "dcbxp": {
                  "aliases": [],
                  "description": "Used to specify the Data Center Bridging Exchange Protocol TLV",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "management_address": {
                  "aliases": [],
                  "description": "Used to specify the management address in TLV messages",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "v4": {
                      "aliases": [],
                      "description": "Management address with TLV v4",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "v6": {
                      "aliases": [],
                      "description": "Management address with TLV v6",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "port": {
                  "aliases": [],
                  "description": "Used to manage port based attributes in TLV messages",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "description": {
                      "aliases": [],
                      "description": "Used to specify the port description TLV",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "vlan": {
                      "aliases": [],
                      "description": "Used to specify the port VLAN ID TLV",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "power_management": {
                  "aliases": [],
                  "description": "Used to specify IEEE 802.3 DTE Power via MDI TLV",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "system": {
                  "aliases": [],
                  "description": "Used to manage system based attributes in TLV messages",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "capabilities": {
                      "aliases": [],
                      "description": "Used to specify the system capabilities TLV",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "description": {
                      "aliases": [],
                      "description": "Used to specify the system description TLV",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "name": {
                      "aliases": [],
                      "description": "Used to specify the system name TLV",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | include lldp).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "LLDP resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n# Before state:\n# -------------\n#\n# user(config)# show running-config | include lldp\n# feature lldp\n\n- name: Merge provided configuration with device configuration\n  cisco.nxos.nxos_lldp_global:\n    config:\n      timer: 35\n      holdtime: 100\n    state: merged\n\n# After state:\n# ------------\n#\n# user(config)# show running-config | include lldp\n# feature lldp\n# lldp timer 35\n# lldp holdtime 100\n\n\n# Using replaced\n# Before state:\n# -------------\n#\n# user(config)# show running-config | include lldp\n# feature lldp\n# lldp holdtime 100\n# lldp reinit 5\n# lldp timer 35\n\n- name: Replace device configuration of specific LLDP attributes with provided configuration\n  cisco.nxos.nxos_lldp_global:\n    config:\n      timer: 40\n      tlv_select:\n        system:\n          description: true\n          name: false\n        management_address:\n          v4: true\n    state: replaced\n\n# After state:\n# ------------\n#\n# user(config)# show running-config | include lldp\n# feature lldp\n# lldp timer 40\n# no lldp tlv-select system-name\n\n\n# Using deleted\n# Before state:\n# -------------\n#\n# user(config)# show running-config | include lldp\n# feature lldp\n# lldp holdtime 5\n# lldp reinit 3\n\n- name: Delete LLDP configuration (this will by default remove all lldp configuration)\n  cisco.nxos.nxos_lldp_global:\n    state: deleted\n\n# After state:\n# ------------\n#\n# user(config)# show running-config | include lldp\n# feature lldp\n\n# Using rendered\n\n- name: Use rendered state to convert task input to device specific commands\n  cisco.nxos.nxos_lldp_global:\n    config:\n      holdtime: 130\n      port_id: 1\n      reinit: 5\n      tlv_select:\n        dcbxp: yes\n        power_management: yes\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#   - \"lldp tlv-select dcbxp\"\n#   - \"lldp tlv-select power-management\"\n#   - \"lldp portid-subtype 1\"\n#   - \"lldp reinit 5\"\n#   - \"lldp holdtime 130\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# lldp holdtime 131\n# lldp reinit 7\n# no lldp tlv-select system-name\n# no lldp tlv-select system-description\n\n# Task output (redacted)\n# -----------------------\n\n# parsed:\n#   holdtime: 131\n#   reinit: 7\n#   tlv_select:\n#     system:\n#       description: false\n#       name: false\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n# feature lldp\n# lldp holdtime 129\n# lldp reinit 5\n# lldp timer 35\n# no lldp tlv-select system-name\n\n# Task output (redacted)\n# -----------------------\n\n# gathered:\n#   reinit: 5\n#   timer: 35\n#   tlv_select:\n#     system:\n#       name: False\n#   holdtime: 129\n"
  },
  "cisco.nxos.nxos_lldp_interfaces": {
    "doc": {
      "description": "This module manages interfaces' configuration for Link Layer Discovery Protocol (LLDP) on NX-OS platforms.",
      "has_action": true,
      "notes": "Tested against NXOS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nThe LLDP feature needs to be enabled before using this module",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of link layer discovery configurations for interfaces.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the interface",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "receive": {
              "aliases": [],
              "description": "Used to enable or disable the reception of LLDP packets on that interface. By default, this is enabled after LLDP is enabled globally.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "tlv_set": {
              "aliases": [],
              "description": "Used to configure TLV parameters on the interface",
              "type": "dict",
              "required": false,
              "suboptions": {
                "management_address": {
                  "aliases": [],
                  "description": "Used to mention the IPv4 or IPv6 management address for the interface",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "vlan": {
                  "aliases": [],
                  "description": "Used to mention the VLAN for the interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "transmit": {
              "aliases": [],
              "description": "Used to enable or disable the transmission of LLDP packets on that interface. By default, this is enabled after LLDP is enabled globally.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section ^interface).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "LLDP interfaces resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n#\n\n- name: Merge provided configuration with device configuration\n  cisco.nxos.nxos_lldp_interfaces:\n    config:\n    - name: Ethernet1/4\n      receive: false\n      transmit: true\n      tlv_set:\n        management_address: 192.168.122.64\n      vlan: 12\n    state: merged\n\n# After state:\n# -------------\n#\n# interface Ethernet1/4\n#   no lldp receive\n#   lldp tlv-set management-address 192.168.122.64\n#   lldp tlv-set vlan 12\n\n\n# Using replaced\n\n# Before state:\n# ------------\n#\n# interface Ethernet1/4\n#   no lldp receive\n#   lldp tlv-set management-address 192.168.122.64\n# interface Ethernet1/5\n#   no lldp transmit\n#   lldp tlv-set vlan 10\n\n- name: Replace LLDP configuration on interfaces with given configuration\n  cisco.nxos.nxos_lldp_interfaces:\n    config:\n    - name: Ethernet1/4\n      transmit: no\n      tlv_set:\n        vlan: 2\n    state: replaced\n\n\n# After state:\n# -----------\n#\n# interface Ethernet1/4\n#   no lldp transmit\n#   lldp tlv_set vlan 2\n# interface Ethernet1/5\n#   no lldp transmit\n#   lldp tlv-set vlan 10\n\n\n# Using overridden\n\n# Before state:\n# ------------\n#\n# interface Ethernet1/4\n#   no lldp receive\n#   lldp tlv-set management-address 192.168.122.64\n# interface Ethernet1/5\n#   no lldp transmit\n#   lldp tlv-set vlan 10\n\n- name: Override LLDP configuration on all interfaces with given configuration\n  cisco.nxos.nxos_lldp_interfaces:\n    config:\n    - name: Ethernet1/7\n      receive: no\n      tlv_set:\n        vlan: 12\n    state: overridden\n\n\n# After state:\n# -----------\n#\n# interface Ethernet1/7\n#   no lldp receive\n#   lldp tlv_set vlan 12\n\n\n# Using deleted\n\n# Before state:\n# ------------\n#\n# interface Ethernet1/4\n#   lldp tlv-set management vlan 24\n#   no lldp transmit\n# interface mgmt0\n#   no lldp receive\n\n- name: Delete LLDP interfaces configuration\n  cisco.nxos.nxos_lldp_interfaces:\n    state: deleted\n\n# After state:\n# ------------\n#\n\n\n"
  },
  "cisco.nxos.nxos_logging": {
    "doc": {
      "description": "This module provides declarative management of logging on Cisco NX-OS devices.",
      "has_action": true,
      "notes": "Limited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of logging definitions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Destination of the logs.",
          "type": "str",
          "required": false,
          "choices": [
            "console",
            "logfile",
            "module",
            "monitor",
            "server"
          ],
          "suboptions": {}
        },
        "dest_level": {
          "aliases": [
            "level"
          ],
          "description": "Set logging severity levels.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "event": {
          "aliases": [],
          "description": "Link/trunk enable/default interface configuration logging",
          "type": "str",
          "required": false,
          "choices": [
            "link-enable",
            "link-default",
            "trunk-enable",
            "trunk-default"
          ],
          "suboptions": {}
        },
        "facility": {
          "aliases": [],
          "description": "Facility name for logging.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "facility_level": {
          "aliases": [],
          "description": "Set logging severity levels for facility based log messages.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "facility_link_status": {
          "aliases": [],
          "description": "Set logging facility ethpm link status. Not idempotent with version 6.0 images.",
          "type": "str",
          "required": false,
          "choices": [
            "link-down-notif",
            "link-down-error",
            "link-up-notif",
            "link-up-error"
          ],
          "suboptions": {}
        },
        "file_size": {
          "aliases": [],
          "description": "Set logfile size",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Interface to be used while configuring source-interface for logging (e.g., 'Ethernet1/2', 'mgmt0')",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface_message": {
          "aliases": [],
          "description": "Add interface description to interface syslogs. Does not work with version 6.0 images using nxapi as a transport.",
          "type": "str",
          "required": false,
          "choices": [
            "add-interface-description"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "If value of C(dest) is I(logfile) it indicates file-name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "purge": {
          "aliases": [],
          "description": "Remove any switch logging configuration that does not match what has been configured Not supported for ansible_connection local. All nxos_logging tasks must use the same ansible_connection type.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "remote_server": {
          "aliases": [],
          "description": "Hostname or IP Address for remote logging (when dest is 'server').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the logging configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timestamp": {
          "aliases": [],
          "description": "Set logging timestamp format",
          "type": "str",
          "required": false,
          "choices": [
            "microseconds",
            "milliseconds",
            "seconds"
          ],
          "suboptions": {}
        },
        "use_vrf": {
          "aliases": [],
          "description": "VRF to be used while configuring remote logging (when dest is 'server').",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage logging on network devices",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: configure console logging with level\n  cisco.nxos.nxos_logging:\n    dest: console\n    level: 2\n    state: present\n- name: remove console logging configuration\n  cisco.nxos.nxos_logging:\n    dest: console\n    level: 2\n    state: absent\n- name: configure file logging with level\n  cisco.nxos.nxos_logging:\n    dest: logfile\n    name: testfile\n    dest_level: 3\n    state: present\n- name: Configure logging logfile with size\n  cisco.nxos.nxos_logging:\n    dest: logfile\n    name: testfile\n    dest_level: 3\n    file_size: 16384\n- name: configure facility level logging\n  cisco.nxos.nxos_logging:\n    facility: daemon\n    facility_level: 0\n    state: present\n- name: remove facility level logging\n  cisco.nxos.nxos_logging:\n    facility: daemon\n    facility_level: 0\n    state: absent\n- name: Configure Remote Logging\n  cisco.nxos.nxos_logging:\n    dest: server\n    remote_server: test-syslogserver.com\n    facility: auth\n    facility_level: 1\n    use_vrf: management\n    state: present\n- name: Configure Source Interface for Logging\n  cisco.nxos.nxos_logging:\n    interface: mgmt0\n    state: present\n- name: Purge nxos_logging configuration not managed by this playbook\n  cisco.nxos.nxos_logging:\n    purge: true\n- name: Configure logging timestamp\n  cisco.nxos.nxos_logging:\n    timestamp: milliseconds\n    state: present\n- name: Configure logging facility ethpm link status\n  cisco.nxos.nxos_logging:\n    facility: ethpm\n    facility_link_status: link-up-notif\n    state: present\n- name: Configure logging message ethernet description\n  cisco.nxos.nxos_logging:\n    interface_message: add-interface-description\n    state: present\n- name: Configure logging event link enable\n  cisco.nxos.nxos_logging:\n    event: link-enable\n    state: present\n- name: Configure logging using aggregate\n  cisco.nxos.nxos_logging:\n    aggregate:\n    - {dest: console, dest_level: 2}\n    - {dest: logfile, dest_level: 2, name: testfile}\n    - {facility: daemon, facility_level: 0}\n    state: present\n"
  },
  "cisco.nxos.nxos_logging_global": {
    "doc": {
      "description": "This module manages logging configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 9.3.6.\nLimited Support for Cisco MDS\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of logging configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "console": {
              "aliases": [],
              "description": "Set console logging parameters.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "severity": {
                  "aliases": [],
                  "description": "Set severity severity for console.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "emergency",
                    "alert",
                    "critical",
                    "error",
                    "warning",
                    "notification",
                    "informational",
                    "debugging"
                  ],
                  "suboptions": {}
                },
                "state": {
                  "aliases": [],
                  "description": "Enable or disable monitor logging.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "enabled",
                    "disabled"
                  ],
                  "suboptions": {}
                }
              }
            },
            "event": {
              "aliases": [],
              "description": "Interface events.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "link_status": {
                  "aliases": [],
                  "description": "UPDOWN and CHANGE messages.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "default": {
                      "aliases": [],
                      "description": "Default logging configuration used by interfaces not explicitly configured.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "To enable logging overriding port severity configuration.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "trunk_status": {
                  "aliases": [],
                  "description": "TRUNK status messages.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "default": {
                      "aliases": [],
                      "description": "Default logging configuration used by interfaces not explicitly configured.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "To enable logging overriding port severity configuration.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "facilities": {
              "aliases": [],
              "description": "Facility parameter for syslog messages.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "facility": {
                  "aliases": [],
                  "description": "Facility name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "severity": {
                  "aliases": [],
                  "description": "Set severity severity for console.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "emergency",
                    "alert",
                    "critical",
                    "error",
                    "warning",
                    "notification",
                    "informational",
                    "debugging"
                  ],
                  "suboptions": {}
                }
              }
            },
            "history": {
              "aliases": [],
              "description": "Modifies severity severity or size for history table.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "severity": {
                  "aliases": [],
                  "description": "Set severity severity for console.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "emergency",
                    "alert",
                    "critical",
                    "error",
                    "warning",
                    "notification",
                    "informational",
                    "debugging"
                  ],
                  "suboptions": {}
                },
                "size": {
                  "aliases": [],
                  "description": "Set history table size.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "hosts": {
              "aliases": [],
              "description": "Enable forwarding to Remote Syslog Servers.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "facility": {
                  "aliases": [],
                  "description": "Facility to use when forwarding to server.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "host": {
                  "aliases": [],
                  "description": "Hostname/IPv4/IPv6 address of the Remote Syslog Server.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Destination Port when forwarding to remote server.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "secure": {
                  "aliases": [],
                  "description": "Enable secure connection to remote server.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "trustpoint": {
                      "aliases": [],
                      "description": "Trustpoint configuration.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "client_identity": {
                          "aliases": [],
                          "description": "Client Identity certificate for mutual authentication.\nTrustpoint to use for client certificate authentication.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "severity": {
                  "aliases": [],
                  "description": "Set severity severity for console.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "emergency",
                    "alert",
                    "critical",
                    "error",
                    "warning",
                    "notification",
                    "informational",
                    "debugging"
                  ],
                  "suboptions": {}
                },
                "use_vrf": {
                  "aliases": [],
                  "description": "Display per-VRF information.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "ip": {
              "aliases": [],
              "description": "IP configuration.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "access_list": {
                  "aliases": [],
                  "description": "Access-List.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "cache": {
                      "aliases": [],
                      "description": "Set caching settings.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "entries": {
                          "aliases": [],
                          "description": "Maximum number of log entries cached in software.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "interval": {
                          "aliases": [],
                          "description": "Log-update interval (in sec).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "threshold": {
                          "aliases": [],
                          "description": "Log-update threshold (number of hits)",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "detailed": {
                      "aliases": [],
                      "description": "Detailed ACL information.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "include": {
                      "aliases": [],
                      "description": "Include additional fields in syslogs.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "sgt": {
                          "aliases": [],
                          "description": "Include source group tag info in syslogs.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "logfile": {
              "aliases": [],
              "description": "Set file logging.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "name": {
                  "aliases": [],
                  "description": "Logfile name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "persistent_threshold": {
                  "aliases": [],
                  "description": "Set persistent logging utilization alert threshold in percentage.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "severity": {
                  "aliases": [],
                  "description": "Set severity severity for console.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "emergency",
                    "alert",
                    "critical",
                    "error",
                    "warning",
                    "notification",
                    "informational",
                    "debugging"
                  ],
                  "suboptions": {}
                },
                "size": {
                  "aliases": [],
                  "description": "Enter the logfile size in bytes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "state": {
                  "aliases": [],
                  "description": "Enable or disable logfile.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "enabled",
                    "disabled"
                  ],
                  "suboptions": {}
                }
              }
            },
            "module": {
              "aliases": [],
              "description": "Set module(linecard) logging.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "severity": {
                  "aliases": [],
                  "description": "Set severity severity for console.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "emergency",
                    "alert",
                    "critical",
                    "error",
                    "warning",
                    "notification",
                    "informational",
                    "debugging"
                  ],
                  "suboptions": {}
                },
                "state": {
                  "aliases": [],
                  "description": "Enable or disable module logging.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "enabled",
                    "disabled"
                  ],
                  "suboptions": {}
                }
              }
            },
            "monitor": {
              "aliases": [],
              "description": "Set terminal line(monitor) logging severity.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "severity": {
                  "aliases": [],
                  "description": "Set severity severity for console.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "emergency",
                    "alert",
                    "critical",
                    "error",
                    "warning",
                    "notification",
                    "informational",
                    "debugging"
                  ],
                  "suboptions": {}
                },
                "state": {
                  "aliases": [],
                  "description": "Enable or disable monitor logging.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "enabled",
                    "disabled"
                  ],
                  "suboptions": {}
                }
              }
            },
            "origin_id": {
              "aliases": [],
              "description": "Enable origin information for Remote Syslog Server.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "hostname": {
                  "aliases": [],
                  "description": "Use hostname as origin-id of logging messages.\nThis option is mutually exclusive with I(ip) and I(string).",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "ip": {
                  "aliases": [],
                  "description": "Use ip address as origin-id of logging messages.\nThis option is mutually exclusive with I(hostname) and I(string).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "string": {
                  "aliases": [],
                  "description": "Use text string as origin-id of logging messages.\nThis option is mutually exclusive with I(hostname) and I(ip).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "rate_limit": {
              "aliases": [],
              "description": "Enable or disable rate limit for log messages.",
              "type": "str",
              "required": false,
              "choices": [
                "enabled",
                "disabled"
              ],
              "suboptions": {}
            },
            "rfc_strict": {
              "aliases": [],
              "description": "Set RFC to which messages should compliant.\nSyslogs will be compliant to RFC 5424.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "source_interface": {
              "aliases": [],
              "description": "Enable Source-Interface for Remote Syslog Server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timestamp": {
              "aliases": [],
              "description": "Set logging timestamp granularity.",
              "type": "str",
              "required": false,
              "choices": [
                "microseconds",
                "milliseconds",
                "seconds"
              ],
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | include logging).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nThe states I(replaced) and I(overridden) have identical behaviour for this module.\nRefer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Logging resource module.",
      "version_added": "2.5.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# nxos-9k-rdo# show running-config | include logging\n# nxos-9k-rdo#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_logging_global:\n    config:\n      console:\n        severity: error\n      monitor:\n        severity: warning\n      ip:\n        access_list:\n          cache:\n            entries: 16384\n            interval: 200\n            threshold: 5000\n      facilities:\n        - facility: auth\n          severity: critical\n        - facility: ospfv3\n          severity: alert\n        - facility: ftp\n          severity: informational\n      hosts:\n        - host: 203.0.113.100\n          severity: alert\n          use_vrf: management\n        - host: 203.0.113.101\n          severity: error\n          facility: local6\n          use_vrf: default\n      origin_id:\n        hostname: True\n\n# Task output\n# -------------\n#  before: {}\n#\n#  commands:\n#    - \"logging console 3\"\n#    - \"logging monitor 4\"\n#    - \"logging ip access-list cache entries 16384\"\n#    - \"logging ip access-list cache interval 200\"\n#    - \"logging ip access-list cache threshold 5000\"\n#    - \"logging severity auth 2\"\n#    - \"logging severity ospfv3 1\"\n#    - \"logging severity ftp 6\"\n#    - \"logging server 203.0.113.100 1 use-vrf management\"\n#    - \"logging server 203.0.113.101 3 facility local6 use-vrf default\"\n#    - \"logging origin-id hostname\"\n#\n# after:\n#   console:\n#      severity: error\n#    facilities:\n#      - facility: auth\n#        severity: critical\n#      - facility: ftp\n#        severity: informational\n#      - facility: ospfv3\n#        severity: alert\n#    ip:\n#      access_list:\n#        cache:\n#          entries: 16384\n#          interval: 200\n#          threshold: 5000\n#    monitor:\n#      severity: warning\n#    origin_id:\n#      hostname: true\n#    hosts:\n#      - severity: alert\n#        host: 203.0.113.100\n#        use_vrf: management\n#      - facility: local6\n#        severity: error\n#        host: 203.0.113.101\n#        use_vrf: default\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | include logging\n# logging console 3\n# logging monitor 4\n# logging ip access-list cache entries 16384\n# logging ip access-list cache interval 200\n# logging ip access-list cache threshold 5000\n# logging severity auth 2\n# logging severity ospfv3 1\n# logging severity ftp 6\n# logging origin-id hostname\n# logging server 203.0.113.100 1 use-vrf management\n# logging server 203.0.113.101 3 use-vrf default facility local6\n\n# Using replaced\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | include logging\n# logging console 3\n# logging monitor 4\n# logging ip access-list cache entries 16384\n# logging ip access-list cache interval 200\n# logging ip access-list cache threshold 5000\n# logging severity auth 2\n# logging severity ospfv3 1\n# logging severity ftp 6\n# logging origin-id hostname\n# logging server 203.0.113.100 1 use-vrf management\n# logging server 203.0.113.101 3 use-vrf default facility local6\n\n- name: Replace logging configurations with provided config\n  cisco.nxos.nxos_logging_global:\n    config:\n      monitor:\n        severity: warning\n      ip:\n        access_list:\n          cache:\n            entries: 4096\n      facilities:\n        - facility: auth\n          severity: critical\n        - facility: ospfv3\n          severity: alert\n        - facility: ftp\n          severity: informational\n      hosts:\n        - host: 203.0.113.101\n          severity: error\n          facility: local6\n          use_vrf: default\n        - host: 198.51.100.101\n          severity: alert\n          port: 6538\n          use_vrf: management\n      origin_id:\n        ip: 192.0.2.100\n    state: replaced\n\n# Task output\n# -------------\n# before:\n#   console:\n#      severity: error\n#    facilities:\n#      - facility: auth\n#        severity: critical\n#      - facility: ftp\n#        severity: informational\n#      - facility: ospfv3\n#        severity: alert\n#    ip:\n#      access_list:\n#        cache:\n#          entries: 16384\n#          interval: 200\n#          threshold: 5000\n#    monitor:\n#      severity: warning\n#    origin_id:\n#      hostname: true\n#    hosts:\n#      - severity: alert\n#        host: 203.0.113.100\n#        use_vrf: management\n#      - facility: local6\n#        severity: error\n#        host: 203.0.113.101\n#        use_vrf: default\n#\n# commands:\n#   - \"logging console\"\n#   - \"logging ip access-list cache entries 4096\"\n#   - \"no logging ip access-list cache interval 200\"\n#   - \"no logging ip access-list cache threshold 5000\"\n#   - \"no logging origin-id hostname\"\n#   - \"logging origin-id ip 192.0.2.100\"\n#   - \"logging server 198.51.100.101 1 port 6538 use-vrf management\"\n#   - \"no logging server 203.0.113.100 1 use-vrf management\"\n#\n#  after:\n#    facilities:\n#      - facility: auth\n#        severity: critical\n#      - facility: ftp\n#        severity: informational\n#      - facility: ospfv3\n#        severity: alert\n#    ip:\n#      access_list:\n#        cache:\n#          entries: 4096\n#    monitor:\n#      severity: warning\n#    origin_id:\n#      ip: 192.0.2.100\n#    hosts:\n#      - severity: alert\n#        port: 6538\n#        host: 198.51.100.101\n#        use_vrf: management\n#      - facility: local6\n#        severity: error\n#        host: 203.0.113.101\n#        use_vrf: default\n#\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | include logging\n# logging monitor 4\n# logging ip access-list cache entries 4096\n# logging severity auth 2\n# logging severity ospfv3 1\n# logging severity ftp 6\n# logging origin-id ip 192.0.2.100\n# logging server 203.0.113.101 3 use-vrf default facility local6\n# logging server 198.51.100.101 1 port 6538 use-vrf management\n\n# Using deleted to delete all logging configurations\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | include logging\n# logging console 3\n# logging monitor 4\n# logging ip access-list cache entries 16384\n# logging ip access-list cache interval 200\n# logging ip access-list cache threshold 5000\n# logging severity auth 2\n# logging severity ospfv3 1\n# logging severity ftp 6\n# logging origin-id hostname\n# logging server 203.0.113.100 1 use-vrf management\n# logging server 203.0.113.101 3 use-vrf default facility local6\n\n- name: Delete all logging configuration\n  cisco.nxos.nxos_logging_global:\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#   console:\n#      severity: error\n#    facilities:\n#      - facility: auth\n#        severity: critical\n#      - facility: ftp\n#        severity: informational\n#      - facility: ospfv3\n#        severity: alert\n#    ip:\n#      access_list:\n#        cache:\n#          entries: 16384\n#          interval: 200\n#          threshold: 5000\n#    monitor:\n#      severity: warning\n#    origin_id:\n#      hostname: true\n#    hosts:\n#      - severity: alert\n#        host: 203.0.113.100\n#        use_vrf: management\n#      - facility: local6\n#        severity: error\n#        host: 203.0.113.101\n#        use_vrf: default\n#\n# commands:\n#   - \"logging console\"\n#   - \"logging monitor\"\n#   - \"no logging ip access-list cache entries 16384\"\n#   - \"no logging ip access-list cache interval 200\"\n#   - \"no logging ip access-list cache threshold 5000\"\n#   - \"no logging origin-id hostname\"\n#   - \"no logging severity auth 2\"\n#   - \"no logging severity ospfv3 1\"\n#   - \"no logging severity ftp 6\"\n#   - \"no logging server 203.0.113.100 1 use-vrf management\"\n#   - \"no logging server 203.0.113.101 3 facility local6 use-vrf default\"\n#\n# after: {}\n\n# Using rendered\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_logging_global:\n    config:\n      console:\n        severity: error\n      monitor:\n        severity: warning\n      ip:\n        access_list:\n          cache:\n            entries: 16384\n            interval: 200\n            threshold: 5000\n      facilities:\n        - facility: auth\n          severity: critical\n        - facility: ospfv3\n          severity: alert\n        - facility: ftp\n          severity: informational\n      hosts:\n        - host: 203.0.113.100\n          severity: alert\n          use_vrf: management\n        - host: 203.0.113.101\n          severity: error\n          facility: local6\n          use_vrf: default\n      origin_id:\n        hostname: True\n\n# Task Output (redacted)\n# -----------------------\n#  rendered:\n#    - \"logging console 3\"\n#    - \"logging monitor 4\"\n#    - \"logging ip access-list cache entries 16384\"\n#    - \"logging ip access-list cache interval 200\"\n#    - \"logging ip access-list cache threshold 5000\"\n#    - \"logging severity auth 2\"\n#    - \"logging severity ospfv3 1\"\n#    - \"logging severity ftp 6\"\n#    - \"logging server 203.0.113.100 1 use-vrf management\"\n#    - \"logging server 203.0.113.101 3 facility local6 use-vrf default\"\n#    - \"logging origin-id hostname\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# logging console 3\n# logging monitor 4\n# logging ip access-list cache entries 16384\n# logging ip access-list cache interval 200\n# logging ip access-list cache threshold 5000\n# logging severity auth 2\n# logging severity ospfv3 1\n# logging severity ftp 6\n# logging origin-id hostname\n# logging server 203.0.113.100 1 use-vrf management\n# logging server 203.0.113.101 3 use-vrf default facility local6\n\n- name: Parse externally provided logging configuration\n  cisco.nxos.nxos_logging_global:\n    running_config: \"{{ lookup('file', './fixtures/parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# parsed:\n#   console:\n#      severity: error\n#    facilities:\n#      - facility: auth\n#        severity: critical\n#      - facility: ftp\n#        severity: informational\n#      - facility: ospfv3\n#        severity: alert\n#    ip:\n#      access_list:\n#        cache:\n#          entries: 16384\n#          interval: 200\n#          threshold: 5000\n#    monitor:\n#      severity: warning\n#    origin_id:\n#      hostname: true\n#    hosts:\n#      - severity: alert\n#        host: 203.0.113.100\n#        use_vrf: management\n#      - facility: local6\n#        severity: error\n#        host: 203.0.113.101\n#        use_vrf: default\n"
  },
  "cisco.nxos.nxos_ntp": {
    "doc": {
      "description": "Manages core NTP configuration.",
      "has_action": true,
      "notes": "Limited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "key_id": {
          "aliases": [],
          "description": "Authentication key identifier to use with given NTP server or peer or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "peer": {
          "aliases": [],
          "description": "Network address of NTP peer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefer": {
          "aliases": [],
          "description": "Makes given NTP server or peer the preferred NTP server or peer for the device.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "server": {
          "aliases": [],
          "description": "Network address of NTP server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_addr": {
          "aliases": [],
          "description": "Local source address from which NTP messages are sent or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_int": {
          "aliases": [],
          "description": "Local source interface from which NTP messages are sent. Must be fully qualified interface name or keyword 'default'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vrf_name": {
          "aliases": [],
          "description": "Makes the device communicate with the given NTP server or peer over a specific VRF or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages core NTP configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Set NTP Server with parameters\n- cisco.nxos.nxos_ntp:\n    server: 1.2.3.4\n    key_id: 32\n    prefer: enabled\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n"
  },
  "cisco.nxos.nxos_ntp_auth": {
    "doc": {
      "description": "Manages NTP authentication.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nIf C(state=absent), the module will remove the given key configuration if it exists.\nIf C(state=absent) and C(authentication=on), authentication will be turned off.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "auth_type": {
          "aliases": [],
          "description": "Whether the given md5string is in cleartext or has been encrypted. If in cleartext, the device will encrypt it before storing it.",
          "default": "text",
          "type": "str",
          "required": false,
          "choices": [
            "text",
            "encrypt"
          ],
          "suboptions": {}
        },
        "authentication": {
          "aliases": [],
          "description": "Turns NTP authentication on or off.",
          "type": "str",
          "required": false,
          "choices": [
            "on",
            "off"
          ],
          "suboptions": {}
        },
        "key_id": {
          "aliases": [],
          "description": "Authentication key identifier (numeric).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "md5string": {
          "aliases": [],
          "description": "MD5 String.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "trusted_key": {
          "aliases": [],
          "description": "Whether the given key is required to be supplied by a time source for the device to synchronize to the time source.",
          "default": "false",
          "type": "str",
          "required": false,
          "choices": [
            "false",
            "true"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages NTP authentication.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Basic NTP authentication configuration\n- cisco.nxos.nxos_ntp_auth:\n    key_id: 32\n    md5string: hello\n    auth_type: text\n"
  },
  "cisco.nxos.nxos_ntp_global": {
    "doc": {
      "description": "This module manages ntp configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 9.3.6.\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dict of ntp configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "access_group": {
              "aliases": [],
              "description": "NTP access-group.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "match_all": {
                  "aliases": [],
                  "description": "Scan ACLs present in all ntp access groups.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "peer": {
                  "aliases": [],
                  "description": "Access-group peer.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "access_list": {
                      "aliases": [],
                      "description": "Name of access list.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "query_only": {
                  "aliases": [],
                  "description": "Access-group query-only.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "access_list": {
                      "aliases": [],
                      "description": "Name of access list.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "serve": {
                  "aliases": [],
                  "description": "Access-group serve.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "access_list": {
                      "aliases": [],
                      "description": "Name of access list.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "serve_only": {
                  "aliases": [],
                  "description": "Access-group serve-only.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "access_list": {
                      "aliases": [],
                      "description": "Name of access list.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "allow": {
              "aliases": [],
              "description": "Enable/Disable the packets.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "control": {
                  "aliases": [],
                  "description": "Control mode packets.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "rate_limit": {
                      "aliases": [],
                      "description": "Rate-limit delay.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "private": {
                  "aliases": [],
                  "description": "Enable/Disable Private mode packets.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "authenticate": {
              "aliases": [],
              "description": "Enable/Disable authentication.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "authentication_keys": {
              "aliases": [],
              "description": "NTP authentication key.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "encryption": {
                  "aliases": [],
                  "description": "0 for Clear text\n7 for Encrypted",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "id": {
                  "aliases": [],
                  "description": "Authentication key number (range 1-65535).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "key": {
                  "aliases": [],
                  "description": "Authentication key.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "logging": {
              "aliases": [],
              "description": "Enable/Disable logging of NTPD Events.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "master": {
              "aliases": [],
              "description": "Act as NTP master clock.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "stratum": {
                  "aliases": [],
                  "description": "Stratum number.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "passive": {
              "aliases": [],
              "description": "NTP passive command.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "peers": {
              "aliases": [],
              "description": "NTP Peers.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "key_id": {
                  "aliases": [],
                  "description": "Keyid to be used while communicating to this server.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "maxpoll": {
                  "aliases": [],
                  "description": "Maximum interval to poll a peer.\nPoll interval in secs to a power of 2.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "minpoll": {
                  "aliases": [],
                  "description": "Minimum interval to poll a peer.\nPoll interval in secs to a power of 2.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "peer": {
                  "aliases": [],
                  "description": "Hostname/IP address of the NTP Peer.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "prefer": {
                  "aliases": [],
                  "description": "Preferred Server.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "use_vrf": {
                  "aliases": [],
                  "description": "Display per-VRF information.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "servers": {
              "aliases": [],
              "description": "NTP servers.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "key_id": {
                  "aliases": [],
                  "description": "Keyid to be used while communicating to this server.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "maxpoll": {
                  "aliases": [],
                  "description": "Maximum interval to poll a peer.\nPoll interval in secs to a power of 2.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "minpoll": {
                  "aliases": [],
                  "description": "Minimum interval to poll a peer.\nPoll interval in secs to a power of 2.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "prefer": {
                  "aliases": [],
                  "description": "Preferred Server.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "server": {
                  "aliases": [],
                  "description": "Hostname/IP address of the NTP Peer.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "use_vrf": {
                  "aliases": [],
                  "description": "Display per-VRF information.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "source": {
              "aliases": [],
              "description": "Source of NTP packets.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "source_interface": {
              "aliases": [],
              "description": "Source interface sending NTP packets.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "trusted_keys": {
              "aliases": [],
              "description": "NTP trusted-key number.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "key_id": {
                  "aliases": [],
                  "description": "Trusted-Key number.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config ntp).\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nThe states I(replaced) and I(overridden) have identical behaviour for this module.\nPlease refer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "NTP Global resource module.",
      "version_added": "2.6.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# nxos-9k-rdo# show running-config ntp\n# nxos-9k-rdo#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_ntp_global: &id001\n    config:\n      access_group:\n        peer:\n          - access_list: PeerAcl1\n        serve:\n          - access_list: ServeAcl1\n      authenticate: True\n      authentication_keys:\n        - id: 1001\n          key: vagwwtKfkv\n          encryption: 7\n        - id: 1002\n          key: vagwwtKfkvgthz\n          encryption: 7\n      logging: True\n      master:\n        stratum: 2\n      peers:\n        - peer: 192.0.2.1\n          key_id: 1\n          maxpoll: 15\n          minpoll: 5\n          use_vrf: default\n        - peer: 192.0.2.2\n          key_id: 2\n          prefer: True\n          use_vrf: siteA\n      servers:\n        - server: 198.51.100.1\n          key_id: 2\n          use_vrf: default\n        - server: 203.0.113.1\n          key_id: 1\n          use_vrf: siteB\n\n# Task output\n# -------------\n#  before: {}\n#\n#  commands:\n#    - \"ntp authenticate\"\n#    - \"ntp logging\"\n#    - \"ntp master 2\"\n#    - \"ntp authentication-keys 1001 md5 vagwwtKfkv 7\"\n#    - \"ntp authentication-keys 1002 md5 vagwwtKfkvgthz 7\"\n#    - \"ntp peer 192.0.2.1 use-vrf default key 1 minpoll 5 maxpoll 15\"\n#    - \"ntp peer 192.0.2.2 prefer use-vrf siteA key 2\"\n#    - \"ntp server 198.51.100.1 use-vrf default key 2\"\n#    - \"ntp server 203.0.113.1 use-vrf siteB key 1\"\n#    - \"ntp access-group peer PeerAcl1\"\n#    - \"ntp access-group serve ServeAcl1\"\n#\n#  after:\n#    access_group:\n#      peer:\n#        - access_list: PeerAcl1\n#      serve:\n#       - access_list: ServeAcl1\n#    authenticate: True\n#    authentication_keys:\n#      - id: 1001\n#        key: vagwwtKfkv\n#        encryption: 7\n#      - id: 1002\n#        key: vagwwtKfkvgthz\n#        encryption: 7\n#    logging: True\n#    master:\n#     stratum: 2\n#    peers:\n#      - peer: 192.0.2.1\n#        key_id: 1\n#        maxpoll: 15\n#        minpoll: 5\n#        use_vrf: default\n#      - peer: 192.0.2.2\n#        key_id: 2\n#        prefer: True\n#        use_vrf: siteA\n#    servers:\n#      - server: 198.51.100.1\n#        key_id: 2\n#        use_vrf: default\n#      - server: 203.0.113.1\n#        key_id: 1\n#        use_vrf: siteB\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config ntp\n# ntp authenticate\n# ntp logging\n# ntp master 2\n# ntp authentication-keys 1001 md5 vagwwtKfkv 7\n# ntp authentication-keys 1002 md5 vagwwtKfkvgthz 7\n# ntp peer 192.0.2.1 use-vrf default key 1 minpoll 5 maxpoll 15\n# ntp peer 192.0.2.2 prefer use-vrf siteA key 2\n# ntp server 198.51.100.1 use-vrf default key 2\n# ntp server 203.0.113.1 use-vrf siteB key 1\n# ntp access-group peer PeerAcl1\n# ntp access-group serve ServeAcl1\n\n# Using replaced\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config ntp\n# ntp authenticate\n# ntp logging\n# ntp master 2\n# ntp authentication-keys 1001 md5 vagwwtKfkv 7\n# ntp authentication-keys 1002 md5 vagwwtKfkvgthz 7\n# ntp peer 192.0.2.1 use-vrf default key 1 minpoll 5 maxpoll 15\n# ntp peer 192.0.2.2 prefer use-vrf siteA key 2\n# ntp server 198.51.100.1 use-vrf default key 2\n# ntp server 203.0.113.1 use-vrf siteB key 1\n# ntp access-group peer PeerAcl1\n# ntp access-group serve ServeAcl1\n\n- name: Replace logging global configurations of listed logging global with provided configurations\n  cisco.nxos.nxos_ntp_global:\n    config:\n      access_group:\n        peer:\n          - access_list: PeerAcl2\n        serve:\n          - access_list: ServeAcl2\n      logging: True\n      master:\n        stratum: 2\n      peers:\n        - peer: 192.0.2.1\n          key_id: 1\n          maxpoll: 15\n          minpoll: 5\n          use_vrf: default\n        - peer: 192.0.2.5\n          key_id: 2\n          prefer: True\n          use_vrf: siteA\n      servers:\n        - server: 198.51.100.1\n          key_id: 2\n          use_vrf: default\n    state: replaced\n\n# Task output\n# -------------\n#  before:\n#    access_group:\n#      peer:\n#        - access_list: PeerAcl1\n#      serve:\n#       - access_list: ServeAcl1\n#    authenticate: True\n#    authentication_keys:\n#      - id: 1001\n#        key: vagwwtKfkv\n#        encryption: 7\n#      - id: 1002\n#        key: vagwwtKfkvgthz\n#        encryption: 7\n#    logging: True\n#    master:\n#     stratum: 2\n#    peers:\n#      - peer: 192.0.2.1\n#        key_id: 1\n#        maxpoll: 15\n#        minpoll: 5\n#        use_vrf: default\n#      - peer: 192.0.2.2\n#        key_id: 2\n#        prefer: True\n#        use_vrf: siteA\n#    servers:\n#      - server: 198.51.100.1\n#        key_id: 2\n#        use_vrf: default\n#      - server: 203.0.113.1\n#        key_id: 1\n#        use_vrf: siteB\n#\n#  commands:\n#    - \"no ntp authenticate\"\n#    - \"no ntp authentication-keys 1001 md5 vagwwtKfkv 7\"\n#    - \"no ntp authentication-keys 1002 md5 vagwwtKfkvgthz 7\"\n#    - \"ntp peer 192.0.2.5 prefer use-vrf siteA key 2\"\n#    - \"no ntp peer 192.0.2.2 prefer use-vrf siteA key 2\"\n#    - \"no ntp server 203.0.113.1 use-vrf siteB key 1\"\n#    - \"ntp access-group peer PeerAcl2\"\n#    - \"no ntp access-group peer PeerAcl1\"\n#    - \"ntp access-group serve ServeAcl2\"\n#    - \"no ntp access-group serve ServeAcl1\"\n#\n#  after:\n#    access_group:\n#      peer:\n#        - access_list: PeerAcl2\n#      serve:\n#        - access_list: ServeAcl2\n#    logging: True\n#    master:\n#      stratum: 2\n#    peers:\n#      - peer: 192.0.2.1\n#        key_id: 1\n#        maxpoll: 15\n#        minpoll: 5\n#        use_vrf: default\n#      - peer: 192.0.2.5\n#        key_id: 2\n#        prefer: True\n#        use_vrf: siteA\n#    servers:\n#      - server: 198.51.100.1\n#        key_id: 2\n#        use_vrf: default\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config ntp\n# ntp logging\n# ntp master 2\n# ntp peer 192.0.2.1 use-vrf default key 1 minpoll 5 maxpoll 15\n# ntp peer 192.0.2.5 prefer use-vrf siteA key 2\n# ntp server 198.51.100.1 use-vrf default key 2\n# ntp access-group peer PeerAcl2\n# ntp access-group serve ServeAcl2\n\n# Using deleted to delete all logging configurations\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config ntp\n\n- name: Delete all logging configuration\n  cisco.nxos.nxos_ntp_global:\n    state: deleted\n\n# Task output\n# -------------\n#  before:\n#    access_group:\n#      peer:\n#        - access_list: PeerAcl1\n#      serve:\n#       - access_list: ServeAcl1\n#    authenticate: True\n#    authentication_keys:\n#      - id: 1001\n#        key: vagwwtKfkv\n#        encryption: 7\n#      - id: 1002\n#        key: vagwwtKfkvgthz\n#        encryption: 7\n#    logging: True\n#    master:\n#     stratum: 2\n#    peers:\n#      - peer: 192.0.2.1\n#        key_id: 1\n#        maxpoll: 15\n#        minpoll: 5\n#        use_vrf: default\n#      - peer: 192.0.2.2\n#        key_id: 2\n#        prefer: True\n#        use_vrf: siteA\n#    servers:\n#      - server: 198.51.100.1\n#        key_id: 2\n#        use_vrf: default\n#      - server: 203.0.113.1\n#        key_id: 1\n#        use_vrf: siteB\n#\n#  commands:\n#    - \"no ntp authenticate\"\n#    - \"no ntp logging\"\n#    - \"no ntp master 2\"\n#    - \"no ntp authentication-keys 1001 md5 vagwwtKfkv 7\"\n#    - \"no ntp authentication-keys 1002 md5 vagwwtKfkvgthz 7\"\n#    - \"no ntp peer 192.0.2.1 use-vrf default key 1 minpoll 5 maxpoll 15\"\n#    - \"no ntp peer 192.0.2.2 prefer use-vrf siteA key 2\"\n#    - \"no ntp server 198.51.100.1 use-vrf default key 2\"\n#    - \"no ntp server 203.0.113.1 use-vrf siteB key 1\"\n#    - \"no ntp access-group peer PeerAcl1\"\n#    - \"no ntp access-group serve ServeAcl1\"\n#\n#  after: {}\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config ntp\n# nxos-9k-rdo#\n\n# Using rendered\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_ntp_global:\n    config:\n      access_group:\n        peer:\n          - access_list: PeerAcl1\n        serve:\n          - access_list: ServeAcl1\n      authenticate: True\n      authentication_keys:\n        - id: 1001\n          key: vagwwtKfkv\n          encryption: 7\n        - id: 1002\n          key: vagwwtKfkvgthz\n          encryption: 7\n      logging: True\n      master:\n        stratum: 2\n      peers:\n        - peer: 192.0.2.1\n          key_id: 1\n          maxpoll: 15\n          minpoll: 5\n          use_vrf: default\n        - peer: 192.0.2.2\n          key_id: 2\n          prefer: True\n          use_vrf: siteA\n      servers:\n        - server: 198.51.100.1\n          key_id: 2\n          use_vrf: default\n        - server: 203.0.113.1\n          key_id: 1\n          use_vrf: siteB\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n#  rendered:\n#    - \"ntp authenticate\"\n#    - \"ntp logging\"\n#    - \"ntp master 2\"\n#    - \"ntp authentication-keys 1001 md5 vagwwtKfkv 7\"\n#    - \"ntp authentication-keys 1002 md5 vagwwtKfkvgthz 7\"\n#    - \"ntp peer 192.0.2.1 use-vrf default key 1 minpoll 5 maxpoll 15\"\n#    - \"ntp peer 192.0.2.2 prefer use-vrf siteA key 2\"\n#    - \"ntp server 198.51.100.1 use-vrf default key 2\"\n#    - \"ntp server 203.0.113.1 use-vrf siteB key 1\"\n#    - \"ntp access-group peer PeerAcl1\"\n#    - \"ntp access-group serve ServeAcl1\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# ntp authenticate\n# ntp logging\n# ntp master 2\n# ntp authentication-keys 1001 md5 vagwwtKfkv 7\n# ntp authentication-keys 1002 md5 vagwwtKfkvgthz 7\n# ntp peer 192.0.2.1 use-vrf default key 1 minpoll 5 maxpoll 15\n# ntp peer 192.0.2.2 prefer use-vrf siteA key 2\n# ntp server 198.51.100.1 use-vrf default key 2\n# ntp server 203.0.113.1 use-vrf siteB key 1\n# ntp access-group peer PeerAcl1\n# ntp access-group serve ServeAcl1\n\n- name: Parse externally provided ntp configuration\n  cisco.nxos.nxos_ntp_global:\n    running_config: \"{{ lookup('file', './fixtures/parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# parsed:\n#    access_group:\n#      peer:\n#        - access_list: PeerAcl1\n#      serve:\n#       - access_list: ServeAcl1\n#    authenticate: True\n#    authentication_keys:\n#      - id: 1001\n#        key: vagwwtKfkv\n#        encryption: 7\n#      - id: 1002\n#        key: vagwwtKfkvgthz\n#        encryption: 7\n#    logging: True\n#    master:\n#     stratum: 2\n#    peers:\n#      - peer: 192.0.2.1\n#        key_id: 1\n#        maxpoll: 15\n#        minpoll: 5\n#        use_vrf: default\n#      - peer: 192.0.2.2\n#        key_id: 2\n#        prefer: True\n#        use_vrf: siteA\n#    servers:\n#      - server: 198.51.100.1\n#        key_id: 2\n#        use_vrf: default\n#      - server: 203.0.113.1\n#        key_id: 1\n#        use_vrf: siteB\n"
  },
  "cisco.nxos.nxos_ntp_options": {
    "doc": {
      "description": "Manages NTP options, e.g. authoritative server and logging.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nWhen C(state=absent), master and logging will be set to False and stratum will be removed as well\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "logging": {
          "aliases": [],
          "description": "Sets whether NTP logging is enabled on the device.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "master": {
          "aliases": [],
          "description": "Sets whether the device is an authoritative NTP server.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "stratum": {
          "aliases": [],
          "description": "If C(master=true), an optional stratum can be supplied (1-15). The device default is 8.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages NTP options.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Basic NTP options configuration\n- cisco.nxos.nxos_ntp_options:\n    master: true\n    stratum: 12\n    logging: false\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n"
  },
  "cisco.nxos.nxos_nxapi": {
    "doc": {
      "description": "Configures the NXAPI feature on devices running Cisco NXOS.  The NXAPI feature is absent from the configuration by default.  Since this module manages the NXAPI feature it only supports the use of the C(Cli) transport.",
      "has_action": true,
      "notes": "Limited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "http": {
          "aliases": [
            "enable_http"
          ],
          "description": "Controls the operating state of the HTTP protocol as one of the underlying transports for NXAPI.  By default, NXAPI will enable the HTTP transport when the feature is first configured.  To disable the use of the HTTP transport, set the value of this argument to False.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "http_port": {
          "aliases": [],
          "description": "Configure the port with which the HTTP server will listen on for requests.  By default, NXAPI will bind the HTTP service to the standard HTTP port 80.  This argument accepts valid port values in the range of 1 to 65535.",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "https": {
          "aliases": [
            "enable_https"
          ],
          "description": "Controls the operating state of the HTTPS protocol as one of the underlying transports for NXAPI.  By default, NXAPI will disable the HTTPS transport when the feature is first configured.  To enable the use of the HTTPS transport, set the value of this argument to True.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "https_port": {
          "aliases": [],
          "description": "Configure the port with which the HTTPS server will listen on for requests.  By default, NXAPI will bind the HTTPS service to the standard HTTPS port 443.  This argument accepts valid port values in the range of 1 to 65535.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "sandbox": {
          "aliases": [
            "enable_sandbox"
          ],
          "description": "The NXAPI feature provides a web base UI for developers for entering commands.  This feature is initially disabled when the NXAPI feature is configured for the first time.  When the C(sandbox) argument is set to True, the developer sandbox URL will accept requests and when the value is set to False, the sandbox URL is unavailable. This is supported on NX-OS 7K series.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_strong_ciphers": {
          "aliases": [],
          "description": "Controls the use of whether strong or weak ciphers are configured. By default, this feature is disabled and weak ciphers are configured.  To enable the use of strong ciphers, set the value of this argument to True.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The C(state) argument controls whether or not the NXAPI feature is configured on the remote device.  When the value is C(present) the NXAPI feature configuration is present in the device running-config.  When the values is C(absent) the feature configuration is removed from the running-config.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tlsv1_0": {
          "aliases": [],
          "description": "Controls the use of the Transport Layer Security version 1.0 is configured.  By default, this feature is enabled.  To disable the use of TLSV1.0, set the value of this argument to True.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tlsv1_1": {
          "aliases": [],
          "description": "Controls the use of the Transport Layer Security version 1.1 is configured.  By default, this feature is disabled.  To enable the use of TLSV1.1, set the value of this argument to True.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tlsv1_2": {
          "aliases": [],
          "description": "Controls the use of the Transport Layer Security version 1.2 is configured.  By default, this feature is disabled.  To enable the use of TLSV1.2, set the value of this argument to True.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage NXAPI configuration on an NXOS device.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Enable NXAPI access with default configuration\n  cisco.nxos.nxos_nxapi:\n    state: present\n\n- name: Enable NXAPI with no HTTP, HTTPS at port 9443 and sandbox disabled\n  cisco.nxos.nxos_nxapi:\n    enable_http: false\n    https_port: 9443\n    https: yes\n    enable_sandbox: no\n\n- name: remove NXAPI configuration\n  cisco.nxos.nxos_nxapi:\n    state: absent\n"
  },
  "cisco.nxos.nxos_ospf": {
    "doc": {
      "description": "Manages configuration of an ospf instance.",
      "has_action": true,
      "notes": "Unsupported for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "ospf": {
          "aliases": [],
          "description": "Name of the ospf instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manages configuration of an ospf instance.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_ospf:\n    ospf: 1\n    state: present\n"
  },
  "cisco.nxos.nxos_ospf_interfaces": {
    "doc": {
      "description": "This module manages OSPF(v2/v3) configuration of interfaces on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Unsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of OSPF configuration for interfaces.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "address_family": {
              "aliases": [],
              "description": "OSPF settings on the interfaces in address-family context.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "afi": {
                  "aliases": [],
                  "description": "Address Family Identifier (AFI) for OSPF settings on the interfaces.",
                  "type": "str",
                  "required": true,
                  "choices": [
                    "ipv4",
                    "ipv6"
                  ],
                  "suboptions": {}
                },
                "authentication": {
                  "aliases": [],
                  "description": "Authentication settings on the interface.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable/disable authentication on the interface.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "key_chain": {
                      "aliases": [],
                      "description": "Authentication password key-chain.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "message_digest": {
                      "aliases": [],
                      "description": "Use message-digest authentication.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "null_auth": {
                      "aliases": [],
                      "description": "Use null(disable) authentication.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "authentication_key": {
                  "aliases": [],
                  "description": "Configure the authentication key for the interface.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "encryption": {
                      "aliases": [],
                      "description": "0 Specifies an UNENCRYPTED authentication key will follow.\n3 Specifies an 3DES ENCRYPTED authentication key will follow.\n7 Specifies a Cisco type 7  ENCRYPTED authentication key will follow.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "key": {
                      "aliases": [],
                      "description": "Authentication key.\nValid values are Cisco type 7 ENCRYPTED password, 3DES ENCRYPTED password and UNENCRYPTED (cleartext) password based on the value of encryption key.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                },
                "cost": {
                  "aliases": [],
                  "description": "Cost associated with interface.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "dead_interval": {
                  "aliases": [],
                  "description": "Dead interval value (in seconds).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "default_passive_interface": {
                  "aliases": [],
                  "description": "Set passive-interface attribute on this interface to default.\nThis option is mutually exclusive with I(passive_interface).",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "hello_interval": {
                  "aliases": [],
                  "description": "Hello interval value (in seconds).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "instance": {
                  "aliases": [],
                  "description": "Instance identifier.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "message_digest_key": {
                  "aliases": [],
                  "description": "Message digest authentication password (key) settings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "encryption": {
                      "aliases": [],
                      "description": "0 Specifies an UNENCRYPTED ospf password (key) will follow.\n3 Specifies an 3DES ENCRYPTED ospf password (key) will follow.\n7 Specifies a Cisco type 7 ENCRYPTED the ospf password (key) will follow.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "key": {
                      "aliases": [],
                      "description": "Authentication key.\nValid values are Cisco type 7 ENCRYPTED password, 3DES ENCRYPTED password and UNENCRYPTED (cleartext) password based on the value of encryption key.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "key_id": {
                      "aliases": [],
                      "description": "Key ID.",
                      "type": "int",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                },
                "mtu_ignore": {
                  "aliases": [],
                  "description": "Enable/disable OSPF MTU mismatch detection.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "multi_areas": {
                  "aliases": [],
                  "description": "Multi-Areas associated with interface (not tied to OSPF process).\nValid values are Area Ids as an integer or IP address.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "network": {
                  "aliases": [],
                  "description": "Network type.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "broadcast",
                    "point-to-point"
                  ],
                  "suboptions": {}
                },
                "passive_interface": {
                  "aliases": [],
                  "description": "Suppress routing updates on the interface.\nThis option is mutually exclusive with I(default_passive_interface).",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "priority": {
                  "aliases": [],
                  "description": "Router priority.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "processes": {
                  "aliases": [],
                  "description": "Interfaces configuration for an OSPF process.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "area": {
                      "aliases": [],
                      "description": "Area associated with interface.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "area_id": {
                          "aliases": [],
                          "description": "Area ID in IP address format.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        },
                        "secondaries": {
                          "aliases": [],
                          "description": "Do not include secondary IPv4/IPv6 addresses.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "multi_areas": {
                      "aliases": [],
                      "description": "Multi-Areas associated with interface.\nValid values are Area Ids as an integer or IP address.",
                      "type": "list",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    },
                    "process_id": {
                      "aliases": [],
                      "description": "OSPF process tag.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                },
                "retransmit_interval": {
                  "aliases": [],
                  "description": "Packet retransmission interval.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "shutdown": {
                  "aliases": [],
                  "description": "Shutdown OSPF on this interface.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "transmit_delay": {
                  "aliases": [],
                  "description": "Packet transmission delay.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "name": {
              "aliases": [],
              "description": "Name/Identifier of the interface.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section \"^interface\").\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "parsed",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "OSPF Interfaces Resource Module.",
      "version_added": "1.3.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n# interface Ethernet1/2\n#   no switchport\n# interface Ethernet1/3\n#   no switchport\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_ospf_interfaces:\n    config:\n      - name: Ethernet1/1\n        address_family:\n        - afi: ipv4\n          processes:\n          - process_id: \"100\"\n            area:\n              area_id: 1.1.1.1\n              secondaries: False\n          multi_areas:\n          - 11.11.11.11\n        - afi: ipv6\n          processes:\n          - process_id: \"200\"\n            area:\n              area_id: 2.2.2.2\n            multi_areas:\n            - 21.0.0.0\n          - process_id: \"300\"\n            multi_areas:\n            - 50.50.50.50\n          multi_areas:\n          - 16.10.10.10\n      - name: Ethernet1/2\n        address_family:\n        - afi: ipv4\n          authentication:\n            enable: True\n            key_chain: test-1\n          message_digest_key:\n            key_id: 10\n            encryption: 3\n            key: abc01d272be25d29\n          cost: 100\n        - afi: ipv6\n          network: broadcast\n          shutdown: True\n      - name: Ethernet1/3\n        address_family:\n        - afi: ipv4\n          authentication_key:\n            encryption: 7\n            key: 12090404011C03162E\n    state: merged\n\n# Task output\n# -------------\n# \"before\": [\n#        {\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n#\n# \"commands\": [\n#        \"interface Ethernet1/1\",\n#        \"ip router ospf multi-area 11.11.11.11\",\n#        \"ip router ospf 100 area 1.1.1.1 secondaries none\",\n#        \"ipv6 router ospfv3 multi-area 16.10.10.10\",\n#        \"ipv6 router ospfv3 200 area 2.2.2.2\",\n#        \"ipv6 router ospfv3 200 multi-area 21.0.0.0\",\n#        \"ipv6 router ospfv3 300 multi-area 50.50.50.50\",\n#        \"interface Ethernet1/2\",\n#        \"ip ospf authentication key-chain test-1\",\n#        \"ip ospf authentication\",\n#        \"ip ospf message-digest-key 10 md5 3 abc01d272be25d29\",\n#        \"ip ospf cost 100\",\n#        \"ospfv3 network broadcast\",\n#        \"ospfv3 shutdown\",\n#        \"interface Ethernet1/3\",\n#        \"ip ospf authentication-key 7 12090404011C03162E\"\n# ]\n#\n# \"after\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.11\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"multi_areas\": [\n#                        \"16.10.10.10\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"2.2.2.2\"\n#                            },\n#                            \"multi_areas\": [\n#                                \"21.0.0.0\"\n#                            ],\n#                            \"process_id\": \"200\"\n#                        },\n#                        {\n#                            \"multi_areas\": [\n#                                \"50.50.50.50\"\n#                            ],\n#                            \"process_id\": \"300\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                       \"enable\": true,\n#                       \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication_key\": {\n#                        \"encryption\": 7,\n#                        \"key\": \"12090404011C03162E\"\n#                    }\n#                }\n#            ],\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n\n# After state:\n# -------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.11\n#   ipv6 router ospfv3 200 area 2.2.2.2\n#   ipv6 router ospfv3 multi-area 16.10.10.10\n#   ipv6 router ospfv3 200 multi-area 21.0.0.0\n#   ipv6 router ospfv3 300 multi-area 50.50.50.50\n# interface Ethernet1/2\n#   no switchport\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   no switchport\n#   ip ospf authentication-key 7 12090404011C03162E\n\n\n# Using replaced\n\n# Before state:\n# ------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.11\n#   ipv6 router ospfv3 200 area 2.2.2.2\n#   ipv6 router ospfv3 multi-area 16.10.10.10\n#   ipv6 router ospfv3 200 multi-area 21.0.0.0\n#   ipv6 router ospfv3 300 multi-area 50.50.50.50\n# interface Ethernet1/2\n#   no switchport\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   no switchport\n#   ip ospf authentication-key 7 12090404011C03162E\n\n- name: Replace OSPF configurations of listed interfaces with provided configurations\n  cisco.nxos.nxos_ospf_interfaces:\n    config:\n    - name: Ethernet1/1\n      address_family:\n      - afi: ipv4\n        processes:\n        - process_id: \"100\"\n          area:\n            area_id: 1.1.1.1\n            secondaries: False\n        multi_areas:\n        - 11.11.11.12\n    - name: Ethernet1/3\n    state: replaced\n\n# Task output\n# -------------\n# \"before\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.11\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"multi_areas\": [\n#                        \"16.10.10.10\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"2.2.2.2\"\n#                            },\n#                            \"multi_areas\": [\n#                                \"21.0.0.0\"\n#                            ],\n#                            \"process_id\": \"200\"\n#                        },\n#                        {\n#                            \"multi_areas\": [\n#                                \"50.50.50.50\"\n#                            ],\n#                            \"process_id\": \"300\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                       \"enable\": true,\n#                       \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication_key\": {\n#                        \"encryption\": 7,\n#                        \"key\": \"12090404011C03162E\"\n#                    }\n#                }\n#            ],\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n#\n# \"commands\": [\n#        \"interface Ethernet1/1\",\n#        \"ip router ospf multi-area 11.11.11.12\",\n#        \"no ip router ospf multi-area 11.11.11.11\",\n#        \"no ipv6 router ospfv3 multi-area 16.10.10.10\",\n#        \"no ipv6 router ospfv3 200 area 2.2.2.2\",\n#        \"no ipv6 router ospfv3 200 multi-area 21.0.0.0\",\n#        \"no ipv6 router ospfv3 300 multi-area 50.50.50.50\",\n#        \"interface Ethernet1/3\",\n#        \"no ip ospf authentication-key 7 12090404011C03162E\"\n# ]\n#\n# \"after\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.12\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                        \"enable\": true,\n#                        \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"name\": \"Ethernet1/3\"\n#        },\n#\n# After state:\n# -------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.12\n# interface Ethernet1/2\n#   no switchport\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   no switchport\n\n\n# Using overridden\n\n# Before state:\n# ------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.11\n#   ipv6 router ospfv3 200 area 2.2.2.2\n#   ipv6 router ospfv3 multi-area 16.10.10.10\n#   ipv6 router ospfv3 200 multi-area 21.0.0.0\n#   ipv6 router ospfv3 300 multi-area 50.50.50.50\n# interface Ethernet1/2\n#   no switchport\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   no switchport\n#   ip ospf authentication-key 7 12090404011C03162E\n\n- name: Override all OSPF interfaces configuration with provided configuration\n  cisco.nxos.nxos_ospf_interfaces:\n    config:\n    - name: Ethernet1/1\n      address_family:\n      - afi: ipv4\n        processes:\n        - process_id: \"100\"\n          area:\n            area_id: 1.1.1.1\n            secondaries: False\n        multi_areas:\n        - 11.11.11.12\n    state: overridden\n\n# Task output\n# -------------\n# \"before\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.11\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"multi_areas\": [\n#                        \"16.10.10.10\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"2.2.2.2\"\n#                            },\n#                            \"multi_areas\": [\n#                                \"21.0.0.0\"\n#                            ],\n#                            \"process_id\": \"200\"\n#                        },\n#                        {\n#                            \"multi_areas\": [\n#                                \"50.50.50.50\"\n#                            ],\n#                            \"process_id\": \"300\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                       \"enable\": true,\n#                       \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication_key\": {\n#                        \"encryption\": 7,\n#                        \"key\": \"12090404011C03162E\"\n#                    }\n#                }\n#            ],\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n#\n# \"commands\": [\n#        \"interface Ethernet1/2\",\n#        \"no ip ospf authentication key-chain test-1\",\n#        \"no ip ospf authentication\",\n#        \"no ip ospf message-digest-key 10 md5 3 abc01d272be25d29\",\n#        \"no ip ospf cost 100\",\n#        \"no ospfv3 network broadcast\",\n#        \"no ospfv3 shutdown\",\n#        \"interface Ethernet1/3\",\n#        \"no ip ospf authentication-key 7 12090404011C03162E\",\n#        \"interface Ethernet1/1\",\n#        \"ip router ospf multi-area 11.11.11.12\",\n#        \"no ip router ospf multi-area 11.11.11.11\",\n#        \"no ipv6 router ospfv3 multi-area 16.10.10.10\",\n#        \"no ipv6 router ospfv3 200 area 2.2.2.2\",\n#        \"no ipv6 router ospfv3 200 multi-area 21.0.0.0\",\n#        \"no ipv6 router ospfv3 300 multi-area 50.50.50.50\"\n# ]\n#\n# \"after\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.12\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n\n# After state:\n# -------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.12\n# interface Ethernet1/2\n#   no switchport\n# interface Ethernet1/3\n#   no switchport\n\n# Using deleted to delete OSPF config of a single interface\n\n# Before state:\n# ------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.11\n#   ipv6 router ospfv3 200 area 2.2.2.2\n#   ipv6 router ospfv3 multi-area 16.10.10.10\n#   ipv6 router ospfv3 200 multi-area 21.0.0.0\n#   ipv6 router ospfv3 300 multi-area 50.50.50.50\n# interface Ethernet1/2\n#   no switchport\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   no switchport\n#   ip ospf authentication-key 7 12090404011C03162E\n\n- name: Delete OSPF config from a single interface\n  cisco.nxos.nxos_ospf_interfaces:\n    config:\n      - name: Ethernet1/1\n    state: deleted\n\n# Task output\n# -------------\n# \"before\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.11\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"multi_areas\": [\n#                        \"16.10.10.10\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"2.2.2.2\"\n#                            },\n#                            \"multi_areas\": [\n#                                \"21.0.0.0\"\n#                            ],\n#                            \"process_id\": \"200\"\n#                        },\n#                        {\n#                            \"multi_areas\": [\n#                                \"50.50.50.50\"\n#                            ],\n#                            \"process_id\": \"300\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                       \"enable\": true,\n#                       \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication_key\": {\n#                        \"encryption\": 7,\n#                        \"key\": \"12090404011C03162E\"\n#                    }\n#                }\n#            ],\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n#\n# \"commands\": [\n#        \"interface Ethernet1/1\",\n#        \"no ip router ospf multi-area 11.11.11.11\",\n#        \"no ip router ospf 100 area 1.1.1.1 secondaries none\",\n#        \"no ipv6 router ospfv3 multi-area 16.10.10.10\",\n#        \"no ipv6 router ospfv3 200 area 2.2.2.2\",\n#        \"no ipv6 router ospfv3 200 multi-area 21.0.0.0\",\n#        \"no ipv6 router ospfv3 300 multi-area 50.50.50.50\"\n# ]\n#\n# \"before\": [\n#        {\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                       \"enable\": true,\n#                       \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication_key\": {\n#                        \"encryption\": 7,\n#                        \"key\": \"12090404011C03162E\"\n#                    }\n#                }\n#            ],\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n\n# After state:\n# ------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n# interface Ethernet1/2\n#   no switchport\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   no switchport\n#   ip ospf authentication-key 7 12090404011C03162E\n\n# Using deleted to delete OSPF config from all interfaces\n\n# Before state:\n# ------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.11\n#   ipv6 router ospfv3 200 area 2.2.2.2\n#   ipv6 router ospfv3 multi-area 16.10.10.10\n#   ipv6 router ospfv3 200 multi-area 21.0.0.0\n#   ipv6 router ospfv3 300 multi-area 50.50.50.50\n# interface Ethernet1/2\n#   no switchport\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   no switchport\n#   ip ospf authentication-key 7 12090404011C03162E\n\n- name: Delete OSPF config from all interfaces\n  cisco.nxos.nxos_ospf_interfaces:\n    state: deleted\n\n# Task output\n# -------------\n# \"before\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.11\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"multi_areas\": [\n#                        \"16.10.10.10\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"2.2.2.2\"\n#                            },\n#                            \"multi_areas\": [\n#                                \"21.0.0.0\"\n#                            ],\n#                            \"process_id\": \"200\"\n#                        },\n#                        {\n#                            \"multi_areas\": [\n#                                \"50.50.50.50\"\n#                            ],\n#                            \"process_id\": \"300\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                       \"enable\": true,\n#                       \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication_key\": {\n#                        \"encryption\": 7,\n#                        \"key\": \"12090404011C03162E\"\n#                    }\n#                }\n#            ],\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n#\n# \"commands\": [\n#        \"interface Ethernet1/1\",\n#        \"no ip router ospf multi-area 11.11.11.11\",\n#        \"no ip router ospf 100 area 1.1.1.1 secondaries none\",\n#        \"no ipv6 router ospfv3 multi-area 16.10.10.10\",\n#        \"no ipv6 router ospfv3 200 area 2.2.2.2\",\n#        \"no ipv6 router ospfv3 200 multi-area 21.0.0.0\",\n#        \"no ipv6 router ospfv3 300 multi-area 50.50.50.50\",\n#        \"interface Ethernet1/2\",\n#        \"no ip ospf authentication key-chain test-1\",\n#        \"no ip ospf authentication\",\n#        \"no ip ospf message-digest-key 10 md5 3 abc01d272be25d29\",\n#        \"no ip ospf cost 100\",\n#        \"no ospfv3 network broadcast\",\n#        \"no ospfv3 shutdown\",\n#        \"interface Ethernet1/3\",\n#        \"no ip ospf authentication-key 7 12090404011C03162E\"\n# ]\n#\n# \"after\": [\n#        {\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n\n# After state:\n# ------------\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n# interface Ethernet1/2\n#   no switchport\n# interface Ethernet1/3\n#   no switchport\n\n# Using rendered\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_ospf_interfaces:\n    config:\n      - name: Ethernet1/1\n        address_family:\n        - afi: ipv4\n          processes:\n          - process_id: \"100\"\n            area:\n              area_id: 1.1.1.1\n              secondaries: False\n          multi_areas:\n          - 11.11.11.11\n        - afi: ipv6\n          processes:\n          - process_id: \"200\"\n            area:\n              area_id: 2.2.2.2\n            multi_areas:\n            - 21.0.0.0\n          - process_id: \"300\"\n            multi_areas:\n            - 50.50.50.50\n          multi_areas:\n          - 16.10.10.10\n      - name: Ethernet1/2\n        address_family:\n        - afi: ipv4\n          authentication:\n            enable: True\n            key_chain: test-1\n          message_digest_key:\n            key_id: 10\n            encryption: 3\n            key: abc01d272be25d29\n          cost: 100\n        - afi: ipv6\n          network: broadcast\n          shutdown: True\n      - name: Ethernet1/3\n        address_family:\n        - afi: ipv4\n          authentication_key:\n            encryption: 7\n            key: 12090404011C03162E\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n# \"rendered\": [\n#        \"interface Ethernet1/1\",\n#        \"ip router ospf multi-area 11.11.11.11\",\n#        \"ip router ospf 100 area 1.1.1.1 secondaries none\",\n#        \"ipv6 router ospfv3 multi-area 16.10.10.10\",\n#        \"ipv6 router ospfv3 200 area 2.2.2.2\",\n#        \"ipv6 router ospfv3 200 multi-area 21.0.0.0\",\n#        \"ipv6 router ospfv3 300 multi-area 50.50.50.50\",\n#        \"interface Ethernet1/2\",\n#        \"ip ospf authentication key-chain test-1\",\n#        \"ip ospf authentication\",\n#        \"ip ospf message-digest-key 10 md5 3 abc01d272be25d29\",\n#        \"ip ospf cost 100\",\n#        \"ospfv3 network broadcast\",\n#        \"ospfv3 shutdown\",\n#        \"interface Ethernet1/3\",\n#        \"ip ospf authentication-key 7 12090404011C03162E\"\n# ]\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# interface Ethernet1/1\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.11\n#   ipv6 router ospfv3 200 area 2.2.2.2\n#   ipv6 router ospfv3 200 multi-area 21.0.0.0\n#   ipv6 router ospfv3 300 multi-area 50.50.50.50\n#   ipv6 router ospfv3 multi-area 16.10.10.10\n# interface Ethernet1/2\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   ip ospf authentication-key 7 12090404011C03162E\n\n- name: arse externally provided OSPF interfaces config\n  cisco.nxos.nxos_ospf_interfaces:\n    running_config: \"{{ lookup('file', 'ospf_interfaces.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# \"parsed\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.11\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"multi_areas\": [\n#                        \"16.10.10.10\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"2.2.2.2\"\n#                            },\n#                            \"multi_areas\": [\n#                                \"21.0.0.0\"\n#                            ],\n#                            \"process_id\": \"200\"\n#                        },\n#                        {\n#                            \"multi_areas\": [\n#                                \"50.50.50.50\"\n#                            ],\n#                            \"process_id\": \"300\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                       \"enable\": true,\n#                       \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication_key\": {\n#                        \"encryption\": 7,\n#                        \"key\": \"12090404011C03162E\"\n#                    }\n#                }\n#            ],\n#            \"name\": \"Ethernet1/3\"\n#        },\n# ]\n\n# Using gathered\n\n# On-box config\n\n# NXOS# show running-config | section ^interface\n# interface Ethernet1/1\n#   no switchport\n#   ip router ospf 100 area 1.1.1.1 secondaries none\n#   ip router ospf multi-area 11.11.11.12\n# interface Ethernet1/2\n#   no switchport\n#   ip ospf authentication\n#   ip ospf authentication key-chain test-1\n#   ip ospf message-digest-key 10 md5 3 abc01d272be25d29\n#   ip ospf cost 100\n#   ospfv3 network broadcast\n#   ospfv3 shutdown\n# interface Ethernet1/3\n#   no switchport\n\n# Task output (redacted)\n# -----------------------\n# \"gathered\": [\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"multi_areas\": [\n#                        \"11.11.11.12\"\n#                    ],\n#                    \"processes\": [\n#                        {\n#                            \"area\": {\n#                                \"area_id\": \"1.1.1.1\",\n#                                \"secondaries\": false\n#                            },\n#                            \"process_id\": \"100\"\n#                        }\n#                    ]\n#                }\n#            ],\n#            \"name\": \"Ethernet1/1\"\n#        },\n#        {\n#            \"address_family\": [\n#                {\n#                    \"afi\": \"ipv4\",\n#                    \"authentication\": {\n#                        \"enable\": true,\n#                        \"key_chain\": \"test-1\"\n#                    },\n#                    \"cost\": 100,\n#                    \"message_digest_key\": {\n#                        \"encryption\": 3,\n#                        \"key\": \"abc01d272be25d29\",\n#                        \"key_id\": 10\n#                    }\n#                },\n#                {\n#                    \"afi\": \"ipv6\",\n#                    \"network\": \"broadcast\",\n#                    \"shutdown\": true\n#                }\n#            ],\n#            \"name\": \"Ethernet1/2\"\n#        },\n#        {\n#            \"name\": \"Ethernet1/3\"\n#        },\n"
  },
  "cisco.nxos.nxos_ospf_vrf": {
    "doc": {
      "description": "Manages a VRF for an OSPF router.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nValue I(default) restores params default value, if any. Otherwise it removes the existing param configuration.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "auto_cost": {
          "aliases": [],
          "description": "Specifies the reference bandwidth used to assign OSPF cost. Valid values are an integer, in Mbps, or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bfd": {
          "aliases": [],
          "description": "Enables BFD on all OSPF interfaces.\nDependency: ''feature bfd''",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "default_metric": {
          "aliases": [],
          "description": "Specify the default Metric value. Valid values are an integer or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "log_adjacency": {
          "aliases": [],
          "description": "Controls the level of log messages generated whenever a neighbor changes state. Valid values are 'log', 'detail', and 'default'.",
          "type": "str",
          "required": false,
          "choices": [
            "log",
            "detail",
            "default"
          ],
          "suboptions": {}
        },
        "ospf": {
          "aliases": [],
          "description": "Name of the OSPF instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "passive_interface": {
          "aliases": [],
          "description": "Setting to C(yes) will suppress routing update on interface.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "router_id": {
          "aliases": [],
          "description": "Router Identifier (ID) of the OSPF router VRF instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of ospf vrf configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timer_throttle_lsa_hold": {
          "aliases": [],
          "description": "Specify the hold interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timer_throttle_lsa_max": {
          "aliases": [],
          "description": "Specify the max interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timer_throttle_lsa_start": {
          "aliases": [],
          "description": "Specify the start interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timer_throttle_spf_hold": {
          "aliases": [],
          "description": "Specify minimum hold time between Shortest Path First (SPF) calculations. Valid values are an integer, in milliseconds, or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timer_throttle_spf_max": {
          "aliases": [],
          "description": "Specify the maximum wait time between Shortest Path First (SPF) calculations. Valid values are an integer, in milliseconds, or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timer_throttle_spf_start": {
          "aliases": [],
          "description": "Specify initial Shortest Path First (SPF) schedule delay. Valid values are an integer, in milliseconds, or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Name of the resource instance. Valid value is a string. The name 'default' is a valid VRF representing the global OSPF.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-10-01)Manages a VRF for an OSPF router.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_ospf_vrf:\n    ospf: 1\n    timer_throttle_spf_start: 50\n    timer_throttle_spf_hold: 1000\n    timer_throttle_spf_max: 2000\n    timer_throttle_lsa_start: 60\n    timer_throttle_lsa_hold: 1100\n    timer_throttle_lsa_max: 3000\n    vrf: test\n    bfd: enable\n    state: present\n"
  },
  "cisco.nxos.nxos_ospfv2": {
    "doc": {
      "description": "This module manages OSPFv2 configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 7.0(3)I5(1).\nUnsupported for Cisco MDS\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of OSPF process configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "processes": {
              "aliases": [],
              "description": "A list of OSPF instances' configurations.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "areas": {
                  "aliases": [],
                  "description": "Configure properties of OSPF Areas.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "area_id": {
                      "aliases": [],
                      "description": "The Area ID in IP Address format.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "authentication": {
                      "aliases": [],
                      "description": "Authentication settings for the Area.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "message_digest": {
                          "aliases": [],
                          "description": "Use message-digest authentication.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set authentication for the area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "default_cost": {
                      "aliases": [],
                      "description": "Specify the default cost for default summary LSA.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "filter_list": {
                      "aliases": [],
                      "description": "Filter prefixes between OSPF areas.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "direction": {
                          "aliases": [],
                          "description": "The direction to apply the route map.",
                          "type": "str",
                          "required": true,
                          "choices": [
                            "in",
                            "out"
                          ],
                          "suboptions": {}
                        },
                        "route_map": {
                          "aliases": [],
                          "description": "The Route-map name.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        }
                      }
                    },
                    "nssa": {
                      "aliases": [],
                      "description": "NSSA settings for the area.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "default_information_originate": {
                          "aliases": [],
                          "description": "Originate Type-7 default LSA into NSSA area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "no_redistribution": {
                          "aliases": [],
                          "description": "Do not send redistributed LSAs into NSSA area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "no_summary": {
                          "aliases": [],
                          "description": "Do not send summary LSAs into NSSA area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Configure area as NSSA.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "translate": {
                          "aliases": [],
                          "description": "Translate LSA.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "type7": {
                              "aliases": [],
                              "description": "Translate from Type 7 to Type 5.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "always": {
                                  "aliases": [],
                                  "description": "Always translate LSAs",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "never": {
                                  "aliases": [],
                                  "description": "Never translate LSAs",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "supress_fa": {
                                  "aliases": [],
                                  "description": "Suppress forwarding address in translated LSAs.",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "ranges": {
                      "aliases": [],
                      "description": "Configure an address range for the area.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "cost": {
                          "aliases": [],
                          "description": "Cost to use for the range.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "not_advertise": {
                          "aliases": [],
                          "description": "Suppress advertising the specified range.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "prefix": {
                          "aliases": [],
                          "description": "IP in Prefix format (x.x.x.x/len)",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        }
                      }
                    },
                    "stub": {
                      "aliases": [],
                      "description": "Settings for configuring the area as a stub.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "no_summary": {
                          "aliases": [],
                          "description": "Prevent ABR from sending summary LSAs into stub area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Configure the area as a stub.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "auto_cost": {
                  "aliases": [],
                  "description": "Calculate OSPF cost according to bandwidth.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "reference_bandwidth": {
                      "aliases": [],
                      "description": "Reference bandwidth used to assign OSPF cost.",
                      "type": "int",
                      "required": true,
                      "suboptions": {}
                    },
                    "unit": {
                      "aliases": [],
                      "description": "Specify in which unit the reference bandwidth is specified.",
                      "type": "str",
                      "required": true,
                      "choices": [
                        "Gbps",
                        "Mbps"
                      ],
                      "suboptions": {}
                    }
                  }
                },
                "bfd": {
                  "aliases": [],
                  "description": "Enable BFD on all OSPF interfaces.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "default_information": {
                  "aliases": [],
                  "description": "Control distribution of default routes.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "originate": {
                      "aliases": [],
                      "description": "Distribute a default route.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "always": {
                          "aliases": [],
                          "description": "Always advertise a default route.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "route_map": {
                          "aliases": [],
                          "description": "Policy to control distribution of default routes",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Enable distribution of default route.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "default_metric": {
                  "aliases": [],
                  "description": "Specify default metric for redistributed routes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "distance": {
                  "aliases": [],
                  "description": "Configure the OSPF administrative distance.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "flush_routes": {
                  "aliases": [],
                  "description": "Flush routes on a non-graceful controlled restart.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "graceful_restart": {
                  "aliases": [],
                  "description": "Configure graceful restart.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "grace_period": {
                      "aliases": [],
                      "description": "Configure maximum interval to restart gracefully.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "helper_disable": {
                      "aliases": [],
                      "description": "Enable/Disable helper mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "set": {
                      "aliases": [],
                      "description": "Enable graceful-restart.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "isolate": {
                  "aliases": [],
                  "description": "Isolate this router from OSPF perspective.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "log_adjacency_changes": {
                  "aliases": [],
                  "description": "Log changes in adjacency state.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "detail": {
                      "aliases": [],
                      "description": "Notify all state changes.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "log": {
                      "aliases": [],
                      "description": "Enable/disable logging changes in adjacency state.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "max_lsa": {
                  "aliases": [],
                  "description": "Feature to limit the number of non-self-originated LSAs.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "ignore_count": {
                      "aliases": [],
                      "description": "Set count on how many times adjacencies can be suppressed.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "ignore_time": {
                      "aliases": [],
                      "description": "Set time during which all adjacencies are suppressed.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "max_non_self_generated_lsa": {
                      "aliases": [],
                      "description": "Set the maximum number of non self-generated LSAs.",
                      "type": "int",
                      "required": true,
                      "suboptions": {}
                    },
                    "reset_time": {
                      "aliases": [],
                      "description": "Set number of minutes after which ignore-count is reset to zero.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "threshold": {
                      "aliases": [],
                      "description": "Threshold value (%) at which to generate a warning message.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "warning_only": {
                      "aliases": [],
                      "description": "Log a warning message when limit is exceeded.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "max_metric": {
                  "aliases": [],
                  "description": "Maximize the cost metric.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "router_lsa": {
                      "aliases": [],
                      "description": "Router LSA configuration.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "external_lsa": {
                          "aliases": [],
                          "description": "External LSA configuration.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "max_metric_value": {
                              "aliases": [],
                              "description": "Set max metric value for external LSAs.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set external-lsa attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "include_stub": {
                          "aliases": [],
                          "description": "Advertise Max metric for Stub links as well.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "on_startup": {
                          "aliases": [],
                          "description": "Effective only at startup.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "set": {
                              "aliases": [],
                              "description": "Set on-startup attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "wait_for_bgp_asn": {
                              "aliases": [],
                              "description": "ASN of BGP to wait for.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "wait_period": {
                              "aliases": [],
                              "description": "Wait period in seconds after startup.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set router-lsa attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "summary_lsa": {
                          "aliases": [],
                          "description": "Summary LSAs configuration.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "max_metric_value": {
                              "aliases": [],
                              "description": "Max metric value for summary LSAs.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set summary-lsa attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "maximum_paths": {
                  "aliases": [],
                  "description": "Maximum paths per destination.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "mpls": {
                  "aliases": [],
                  "description": "OSPF MPLS configuration settings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "traffic_eng": {
                      "aliases": [],
                      "description": "OSPF MPLS Traffic Engineering commands.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "areas": {
                          "aliases": [],
                          "description": "List of Area IDs.",
                          "type": "list",
                          "required": false,
                          "elements": "dict",
                          "suboptions": {
                            "area_id": {
                              "aliases": [],
                              "description": "Area Id in ip address format.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "multicast_intact": {
                          "aliases": [],
                          "description": "MPLS TE multicast support.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "router_id": {
                          "aliases": [],
                          "description": "Router ID associated with TE.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "name_lookup": {
                  "aliases": [],
                  "description": "Display OSPF router ids as DNS names.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "passive_interface": {
                  "aliases": [],
                  "description": "Suppress routing updates on the interface.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "default": {
                      "aliases": [],
                      "description": "Interfaces passive by default.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "process_id": {
                  "aliases": [],
                  "description": "The OSPF process tag.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "redistribute": {
                  "aliases": [],
                  "description": "Redistribute information from another routing protocol.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "id": {
                      "aliases": [],
                      "description": "The identifier for the protocol specified.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "protocol": {
                      "aliases": [],
                      "description": "The name of the protocol.",
                      "type": "str",
                      "required": true,
                      "choices": [
                        "bgp",
                        "direct",
                        "eigrp",
                        "isis",
                        "lisp",
                        "ospf",
                        "rip",
                        "static"
                      ],
                      "suboptions": {}
                    },
                    "route_map": {
                      "aliases": [],
                      "description": "The route map policy to constrain redistribution.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                },
                "rfc1583compatibility": {
                  "aliases": [],
                  "description": "Configure 1583 compatibility for external path preferences.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "router_id": {
                  "aliases": [],
                  "description": "Set OSPF process router-id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "shutdown": {
                  "aliases": [],
                  "description": "Shutdown the OSPF protocol instance.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "summary_address": {
                  "aliases": [],
                  "description": "Configure route summarization for redistribution.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "not_advertise": {
                      "aliases": [],
                      "description": "Suppress advertising the specified summary.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "prefix": {
                      "aliases": [],
                      "description": "IP prefix in format x.x.x.x/ml.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "tag": {
                      "aliases": [],
                      "description": "A 32-bit tag value.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "table_map": {
                  "aliases": [],
                  "description": "Policy for filtering/modifying OSPF routes before sending them to RIB.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "filter": {
                      "aliases": [],
                      "description": "Block the OSPF routes from being sent to RIB.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "name": {
                      "aliases": [],
                      "description": "The Route Map name.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                },
                "timers": {
                  "aliases": [],
                  "description": "Configure timer related constants.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "lsa_arrival": {
                      "aliases": [],
                      "description": "Mimimum interval between arrival of a LSA.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "lsa_group_pacing": {
                      "aliases": [],
                      "description": "LSA group refresh/maxage interval.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "throttle": {
                      "aliases": [],
                      "description": "Configure throttle related constants.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "lsa": {
                          "aliases": [],
                          "description": "Set rate-limiting for LSA generation.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "hold_interval": {
                              "aliases": [],
                              "description": "The hold interval.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "max_interval": {
                              "aliases": [],
                              "description": "The max interval.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "start_interval": {
                              "aliases": [],
                              "description": "The start interval.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "spf": {
                          "aliases": [],
                          "description": "Set OSPF SPF timers.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "initial_spf_delay": {
                              "aliases": [],
                              "description": "Initial SPF schedule delay in milliseconds.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "max_wait_time": {
                              "aliases": [],
                              "description": "Maximum wait time between SPF calculations.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "min_hold_time": {
                              "aliases": [],
                              "description": "Minimum hold time between SPF calculations.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "vrfs": {
                  "aliases": [],
                  "description": "Configure VRF specific OSPF settings.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "areas": {
                      "aliases": [],
                      "description": "Configure properties of OSPF Areas.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "area_id": {
                          "aliases": [],
                          "description": "The Area ID in IP Address format.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        },
                        "authentication": {
                          "aliases": [],
                          "description": "Authentication settings for the Area.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "message_digest": {
                              "aliases": [],
                              "description": "Use message-digest authentication.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set authentication for the area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "default_cost": {
                          "aliases": [],
                          "description": "Specify the default cost for default summary LSA.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "filter_list": {
                          "aliases": [],
                          "description": "Filter prefixes between OSPF areas.",
                          "type": "list",
                          "required": false,
                          "elements": "dict",
                          "suboptions": {
                            "direction": {
                              "aliases": [],
                              "description": "The direction to apply the route map.",
                              "type": "str",
                              "required": true,
                              "choices": [
                                "in",
                                "out"
                              ],
                              "suboptions": {}
                            },
                            "route_map": {
                              "aliases": [],
                              "description": "The Route-map name.",
                              "type": "str",
                              "required": true,
                              "suboptions": {}
                            }
                          }
                        },
                        "nssa": {
                          "aliases": [],
                          "description": "NSSA settings for the area.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "default_information_originate": {
                              "aliases": [],
                              "description": "Originate Type-7 default LSA into NSSA area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "no_redistribution": {
                              "aliases": [],
                              "description": "Do not send redistributed LSAs into NSSA area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "no_summary": {
                              "aliases": [],
                              "description": "Do not send summary LSAs into NSSA area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Configure area as NSSA.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "translate": {
                              "aliases": [],
                              "description": "Translate LSA.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "type7": {
                                  "aliases": [],
                                  "description": "Translate from Type 7 to Type 5.",
                                  "type": "dict",
                                  "required": false,
                                  "suboptions": {
                                    "always": {
                                      "aliases": [],
                                      "description": "Always translate LSAs",
                                      "type": "bool",
                                      "required": false,
                                      "suboptions": {}
                                    },
                                    "never": {
                                      "aliases": [],
                                      "description": "Never translate LSAs",
                                      "type": "bool",
                                      "required": false,
                                      "suboptions": {}
                                    },
                                    "supress_fa": {
                                      "aliases": [],
                                      "description": "Suppress forwarding address in translated LSAs.",
                                      "type": "bool",
                                      "required": false,
                                      "suboptions": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "ranges": {
                          "aliases": [],
                          "description": "Configure an address range for the area.",
                          "type": "list",
                          "required": false,
                          "elements": "dict",
                          "suboptions": {
                            "cost": {
                              "aliases": [],
                              "description": "Cost to use for the range.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "not_advertise": {
                              "aliases": [],
                              "description": "Suppress advertising the specified range.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "prefix": {
                              "aliases": [],
                              "description": "IP in Prefix format (x.x.x.x/len)",
                              "type": "str",
                              "required": true,
                              "suboptions": {}
                            }
                          }
                        },
                        "stub": {
                          "aliases": [],
                          "description": "Settings for configuring the area as a stub.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "no_summary": {
                              "aliases": [],
                              "description": "Prevent ABR from sending summary LSAs into stub area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Configure the area as a stub.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "auto_cost": {
                      "aliases": [],
                      "description": "Calculate OSPF cost according to bandwidth.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "reference_bandwidth": {
                          "aliases": [],
                          "description": "Reference bandwidth used to assign OSPF cost.",
                          "type": "int",
                          "required": true,
                          "suboptions": {}
                        },
                        "unit": {
                          "aliases": [],
                          "description": "Specify in which unit the reference bandwidth is specified.",
                          "type": "str",
                          "required": true,
                          "choices": [
                            "Gbps",
                            "Mbps"
                          ],
                          "suboptions": {}
                        }
                      }
                    },
                    "bfd": {
                      "aliases": [],
                      "description": "Enable BFD on all OSPF interfaces.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "capability": {
                      "aliases": [],
                      "description": "OSPF capability settings.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "vrf_lite": {
                          "aliases": [],
                          "description": "Enable VRF-lite capability settings.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "evpn": {
                              "aliases": [],
                              "description": "Ethernet VPN.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Enable VRF-lite support.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "default_information": {
                      "aliases": [],
                      "description": "Control distribution of default routes.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "originate": {
                          "aliases": [],
                          "description": "Distribute a default route.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "always": {
                              "aliases": [],
                              "description": "Always advertise a default route.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "route_map": {
                              "aliases": [],
                              "description": "Policy to control distribution of default routes",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Enable distribution of default route.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "default_metric": {
                      "aliases": [],
                      "description": "Specify default metric for redistributed routes.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "distance": {
                      "aliases": [],
                      "description": "Configure the OSPF administrative distance.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "down_bit_ignore": {
                      "aliases": [],
                      "description": "Configure a PE router to ignore the DN bit for network summary, external and NSSA external LSA.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "graceful_restart": {
                      "aliases": [],
                      "description": "Configure graceful restart.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "grace_period": {
                          "aliases": [],
                          "description": "Configure maximum interval to restart gracefully.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "helper_disable": {
                          "aliases": [],
                          "description": "Enable/Disable helper mode.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Enable graceful-restart.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "log_adjacency_changes": {
                      "aliases": [],
                      "description": "Log changes in adjacency state.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "detail": {
                          "aliases": [],
                          "description": "Notify all state changes.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "log": {
                          "aliases": [],
                          "description": "Enable/disable logging changes in adjacency state.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "max_lsa": {
                      "aliases": [],
                      "description": "Feature to limit the number of non-self-originated LSAs.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "ignore_count": {
                          "aliases": [],
                          "description": "Set count on how many times adjacencies can be suppressed.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "ignore_time": {
                          "aliases": [],
                          "description": "Set time during which all adjacencies are suppressed.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "max_non_self_generated_lsa": {
                          "aliases": [],
                          "description": "Set the maximum number of non self-generated LSAs.",
                          "type": "int",
                          "required": true,
                          "suboptions": {}
                        },
                        "reset_time": {
                          "aliases": [],
                          "description": "Set number of minutes after which ignore-count is reset to zero.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "threshold": {
                          "aliases": [],
                          "description": "Threshold value (%) at which to generate a warning message.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "warning_only": {
                          "aliases": [],
                          "description": "Log a warning message when limit is exceeded.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "max_metric": {
                      "aliases": [],
                      "description": "Maximize the cost metric.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "router_lsa": {
                          "aliases": [],
                          "description": "Router LSA configuration.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "external_lsa": {
                              "aliases": [],
                              "description": "External LSA configuration.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "max_metric_value": {
                                  "aliases": [],
                                  "description": "Set max metric value for external LSAs.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "set": {
                                  "aliases": [],
                                  "description": "Set external-lsa attribute.",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "include_stub": {
                              "aliases": [],
                              "description": "Advertise Max metric for Stub links as well.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "on_startup": {
                              "aliases": [],
                              "description": "Effective only at startup.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "set": {
                                  "aliases": [],
                                  "description": "Set on-startup attribute.",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "wait_for_bgp_asn": {
                                  "aliases": [],
                                  "description": "ASN of BGP to wait for.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "wait_period": {
                                  "aliases": [],
                                  "description": "Wait period in seconds after startup.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set router-lsa attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "summary_lsa": {
                              "aliases": [],
                              "description": "Summary LSAs configuration.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "max_metric_value": {
                                  "aliases": [],
                                  "description": "Max metric value for summary LSAs.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "set": {
                                  "aliases": [],
                                  "description": "Set summary-lsa attribute.",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "maximum_paths": {
                      "aliases": [],
                      "description": "Maximum paths per destination.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "name_lookup": {
                      "aliases": [],
                      "description": "Display OSPF router ids as DNS names.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "passive_interface": {
                      "aliases": [],
                      "description": "Suppress routing updates on the interface.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "default": {
                          "aliases": [],
                          "description": "Interfaces passive by default.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "redistribute": {
                      "aliases": [],
                      "description": "Redistribute information from another routing protocol.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "id": {
                          "aliases": [],
                          "description": "The identifier for the protocol specified.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "protocol": {
                          "aliases": [],
                          "description": "The name of the protocol.",
                          "type": "str",
                          "required": true,
                          "choices": [
                            "bgp",
                            "direct",
                            "eigrp",
                            "isis",
                            "lisp",
                            "ospf",
                            "rip",
                            "static"
                          ],
                          "suboptions": {}
                        },
                        "route_map": {
                          "aliases": [],
                          "description": "The route map policy to constrain redistribution.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        }
                      }
                    },
                    "rfc1583compatibility": {
                      "aliases": [],
                      "description": "Configure 1583 compatibility for external path preferences.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "router_id": {
                      "aliases": [],
                      "description": "Set OSPF process router-id.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "shutdown": {
                      "aliases": [],
                      "description": "Shutdown the OSPF protocol instance.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "summary_address": {
                      "aliases": [],
                      "description": "Configure route summarization for redistribution.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "not_advertise": {
                          "aliases": [],
                          "description": "Suppress advertising the specified summary.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "prefix": {
                          "aliases": [],
                          "description": "IP prefix in format x.x.x.x/ml.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        },
                        "tag": {
                          "aliases": [],
                          "description": "A 32-bit tag value.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "table_map": {
                      "aliases": [],
                      "description": "Policy for filtering/modifying OSPF routes before sending them to RIB.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "filter": {
                          "aliases": [],
                          "description": "Block the OSPF routes from being sent to RIB.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "name": {
                          "aliases": [],
                          "description": "The Route Map name.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        }
                      }
                    },
                    "timers": {
                      "aliases": [],
                      "description": "Configure timer related constants.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "lsa_arrival": {
                          "aliases": [],
                          "description": "Mimimum interval between arrival of a LSA.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "lsa_group_pacing": {
                          "aliases": [],
                          "description": "LSA group refresh/maxage interval.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "throttle": {
                          "aliases": [],
                          "description": "Configure throttle related constants.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "lsa": {
                              "aliases": [],
                              "description": "Set rate-limiting for LSA generation.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "hold_interval": {
                                  "aliases": [],
                                  "description": "The hold interval.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "max_interval": {
                                  "aliases": [],
                                  "description": "The max interval.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "start_interval": {
                                  "aliases": [],
                                  "description": "The start interval.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "spf": {
                              "aliases": [],
                              "description": "Set OSPF SPF timers.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "initial_spf_delay": {
                                  "aliases": [],
                                  "description": "Initial SPF schedule delay in milliseconds.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "max_wait_time": {
                                  "aliases": [],
                                  "description": "Maximum wait time between SPF calculations.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "min_hold_time": {
                                  "aliases": [],
                                  "description": "Minimum hold time between SPF calculations.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "vrf": {
                      "aliases": [],
                      "description": "Name/Identifier of the VRF.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section \"^router ospf .*\").\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "parsed",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "OSPFv2 resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# nxos-9k-rdo#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_ospfv2:\n    config:\n      processes:\n      - process_id: 100\n        router_id: 203.0.113.20\n      - process_id: 102\n        router_id: 198.51.100.1\n        areas:\n        - area_id: 0.0.0.100\n          filter_list:\n          - route_map: rmap_1\n            direction: in\n          - route_map: rmap_2\n            direction: out\n          ranges:\n          - prefix: 198.51.100.64/27\n            not_advertise: true\n          - prefix: 198.51.100.96/27\n            cost: 120\n        - area_id: 0.0.0.101\n          authentication:\n            message_digest: true\n        redistribute:\n        - protocol: eigrp\n          id: 120\n          route_map: rmap_1\n        - protocol: direct\n          route_map: ospf102-direct-connect\n        vrfs:\n        - vrf: zone1\n          router_id: 198.51.100.129\n          redistribute:\n          - protocol: static\n            route_map: zone1-static-connect\n          summary_address:\n          - prefix: 198.51.100.128/27\n            tag: 121\n          - prefix: 198.51.100.160/27\n          areas:\n          - area_id: 0.0.0.102\n            nssa:\n              default_information_originate: true\n              no_summary: true\n          - area_id: 0.0.0.103\n            nssa:\n              no_summary: true\n              translate:\n                type7:\n                  always: true\n        - vrf: zone2\n          auto_cost:\n            reference_bandwidth: 45\n            unit: Gbps\n    state: merged\n\n# Task output\n# -------------\n# before: {}\n#\n# commands:\n#  - router ospf 102\n#  - router-id 198.51.100.1\n#  - redistribute eigrp 120 route-map rmap_1\n#  - redistribute direct route-map ospf102-direct-connect\n#  - area 0.0.0.100 filter-list route-map rmap_1 in\n#  - area 0.0.0.100 filter-list route-map rmap_2 out\n#  - area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#  - area 0.0.0.100 range 198.51.100.96/27 cost 120\n#  - area 0.0.0.101 authentication message-digest\n#  - vrf zone1\n#  - router-id 198.51.100.129\n#  - summary-address 198.51.100.128/27 tag 121\n#  - summary-address 198.51.100.160/27\n#  - redistribute static route-map zone1-static-connect\n#  - area 0.0.0.102 nssa no-summary default-information-originate\n#  - area 0.0.0.103 nssa no-summary\n#  - area 0.0.0.103 nssa translate type7 always\n#  - vrf zone2\n#  - auto-cost reference-bandwidth 45 Gbps\n#  - router ospf 100\n#  - router-id 203.0.113.20\n#\n# after:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - areas:\n#      - area_id: 0.0.0.100\n#        filter_list:\n#        - direction: out\n#          route_map: rmap_2\n#        - direction: in\n#          route_map: rmap_1\n#        ranges:\n#        - not_advertise: true\n#          prefix: 198.51.100.64/27\n#        - cost: 120\n#          prefix: 198.51.100.96/27\n#      - area_id: 0.0.0.101\n#        authentication:\n#          message_digest: true\n#      process_id: \"102\"\n#      redistribute:\n#      - protocol: direct\n#        route_map: ospf102-direct-connect\n#      - id: \"120\"\n#        protocol: eigrp\n#        route_map: rmap_1\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        redistribute:\n#        - protocol: static\n#          route_map: zone1-static-connect\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospf 100\n#   router-id 203.0.113.20\n# router ospf 102\n#   router-id 198.51.100.1\n#   redistribute direct route-map ospf102-direct-connect\n#   redistribute eigrp 120 route-map rmap_1\n#   area 0.0.0.100 filter-list route-map rmap_2 out\n#   area 0.0.0.100 filter-list route-map rmap_1 in\n#   area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#   area 0.0.0.100 range 198.51.100.96/27 cost 120\n#   area 0.0.0.101 authentication message-digest\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#     redistribute static route-map zone1-static-connect\n#     summary-address 198.51.100.128/27 tag 121\n#     summary-address 198.51.100.160/27\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n# Using replaced\n\n# Before state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospf 100\n#   router-id 203.0.113.20\n# router ospf 102\n#   router-id 198.51.100.1\n#   redistribute direct route-map ospf102-direct-connect\n#   redistribute eigrp 120 route-map rmap_1\n#   area 0.0.0.100 filter-list route-map rmap_2 out\n#   area 0.0.0.100 filter-list route-map rmap_1 in\n#   area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#   area 0.0.0.100 range 198.51.100.96/27 cost 120\n#   area 0.0.0.101 authentication message-digest\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#     redistribute static route-map zone1-static-connect\n#     summary-address 198.51.100.128/27 tag 121\n#     summary-address 198.51.100.160/27\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n- name: Replace device configurations of listed OSPF processes with provided configurations\n  cisco.nxos.nxos_ospfv2:\n    config:\n      processes:\n      - process_id: 102\n        router_id: 198.51.100.1\n        areas:\n        - area_id: 0.0.0.100\n          filter_list:\n          - route_map: rmap_8\n            direction: in\n          ranges:\n          - prefix: 198.51.100.64/27\n            not_advertise: true\n        - area_id: 0.0.0.101\n          stub:\n            no_summary: true\n        redistribute:\n        - protocol: eigrp\n          id: 130\n          route_map: rmap_1\n        - protocol: direct\n          route_map: ospf102-direct-connect\n        vrfs:\n        - vrf: zone1\n          router_id: 198.51.100.129\n          redistribute:\n          - protocol: bgp\n            id: 65563\n            route_map: zone1-bgp-connect\n          areas:\n          - area_id: 0.0.0.102\n            nssa:\n              default_information_originate: true\n              no_summary: true\n    state: replaced\n\n# Task output\n# -------------\n# before:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - areas:\n#      - area_id: 0.0.0.100\n#        filter_list:\n#        - direction: out\n#          route_map: rmap_2\n#        - direction: in\n#          route_map: rmap_1\n#        ranges:\n#        - not_advertise: true\n#          prefix: 198.51.100.64/27\n#        - cost: 120\n#          prefix: 198.51.100.96/27\n#      - area_id: 0.0.0.101\n#        authentication:\n#          message_digest: true\n#      process_id: \"102\"\n#      redistribute:\n#      - protocol: direct\n#        route_map: ospf102-direct-connect\n#      - id: \"120\"\n#        protocol: eigrp\n#        route_map: rmap_1\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        redistribute:\n#        - protocol: static\n#          route_map: zone1-static-connect\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n#  commands:\n#  - router ospf 102\n#  - redistribute eigrp 130 route-map rmap_1\n#  - no redistribute eigrp 120 route-map rmap_1\n#  - area 0.0.0.100 filter-list route-map rmap_8 in\n#  - no area 0.0.0.100 filter-list route-map rmap_2 out\n#  - no area 0.0.0.100 range 198.51.100.96/27\n#  - no area 0.0.0.101 authentication\n#  - area 0.0.0.101 stub no-summary\n#  - vrf zone1\n#  - no summary-address 198.51.100.128/27 tag 121\n#  - no summary-address 198.51.100.160/27\n#  - redistribute bgp 65563 route-map zone1-bgp-connect\n#  - no redistribute static route-map zone1-static-connect\n#  - no area 0.0.0.103 nssa\n#  - no area 0.0.0.103 nssa translate type7 always\n#  - no vrf zone2\n#\n# after:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - areas:\n#      - area_id: 0.0.0.101\n#        stub:\n#          no_summary: true\n#      - area_id: 0.0.0.100\n#        filter_list:\n#        - direction: in\n#          route_map: rmap_8\n#        ranges:\n#        - not_advertise: true\n#          prefix: 198.51.100.64/27\n#      process_id: \"102\"\n#      redistribute:\n#      - protocol: direct\n#        route_map: ospf102-direct-connect\n#      - id: \"130\"\n#        protocol: eigrp\n#        route_map: rmap_1\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        redistribute:\n#        - id: \"65563\"\n#          protocol: bgp\n#          route_map: zone1-bgp-connect\n#        router_id: 198.51.100.129\n#        vrf: zone1\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospf 100\n#   router-id 203.0.113.20\n# router ospf 102\n#   router-id 198.51.100.1\n#   area 0.0.0.101 stub no-summary\n#   redistribute direct route-map ospf102-direct-connect\n#   redistribute eigrp 130 route-map rmap_1\n#   area 0.0.0.100 filter-list route-map rmap_8 in\n#   area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     redistribute bgp 65563 route-map zone1-bgp-connect\n\n# Using overridden\n\n# Before state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospf 100\n#   router-id 203.0.113.20\n# router ospf 102\n#   router-id 198.51.100.1\n#   redistribute direct route-map ospf102-direct-connect\n#   redistribute eigrp 120 route-map rmap_1\n#   area 0.0.0.100 filter-list route-map rmap_2 out\n#   area 0.0.0.100 filter-list route-map rmap_1 in\n#   area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#   area 0.0.0.100 range 198.51.100.96/27 cost 120\n#   area 0.0.0.101 authentication message-digest\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#     redistribute static route-map zone1-static-connect\n#     summary-address 198.51.100.128/27 tag 121\n#     summary-address 198.51.100.160/27\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n- name: Override all OSPF configuration with provided configuration\n  cisco.nxos.nxos_ospfv2:\n    config:\n      processes:\n      - process_id: 104\n        router_id: 203.0.113.20\n      - process_id: 102\n        router_id: 198.51.100.1\n        shutdown: true\n    state: overridden\n\n# Task output\n# -------------\n# before:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - areas:\n#      - area_id: 0.0.0.100\n#        filter_list:\n#        - direction: out\n#          route_map: rmap_2\n#        - direction: in\n#          route_map: rmap_1\n#        ranges:\n#        - not_advertise: true\n#          prefix: 198.51.100.64/27\n#        - cost: 120\n#          prefix: 198.51.100.96/27\n#      - area_id: 0.0.0.101\n#        authentication:\n#          message_digest: true\n#      process_id: \"102\"\n#      redistribute:\n#      - protocol: direct\n#        route_map: ospf102-direct-connect\n#      - id: \"120\"\n#        protocol: eigrp\n#        route_map: rmap_1\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        redistribute:\n#        - protocol: static\n#          route_map: zone1-static-connect\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n# commands:\n#  - no router ospf 100\n#  - router ospf 104\n#  - router-id 203.0.113.20\n#  - router ospf 102\n#  - shutdown\n#  - no redistribute direct route-map ospf102-direct-connect\n#  - no redistribute eigrp 120 route-map rmap_1\n#  - no area 0.0.0.100 filter-list route-map rmap_2 out\n#  - no area 0.0.0.100 filter-list route-map rmap_1 in\n#  - no area 0.0.0.100 range 198.51.100.64/27\n#  - no area 0.0.0.100 range 198.51.100.96/27\n#  - no area 0.0.0.101 authentication\n#  - no vrf zone1\n#  - no vrf zone2\n#\n# after:\n#    processes:\n#    - process_id: \"102\"\n#      router_id: 198.51.100.1\n#      shutdown: true\n#    - process_id: \"104\"\n#      router_id: 203.0.113.20\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospf 102\n#   router-id 198.51.100.1\n#   shutdown\n# router ospf 104\n#   router-id 203.0.113.20\n\n# Using deleted to delete a single OSPF process\n\n# Before state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospf 100\n#   router-id 203.0.113.20\n# router ospf 102\n#   router-id 198.51.100.1\n#   redistribute direct route-map ospf102-direct-connect\n#   redistribute eigrp 120 route-map rmap_1\n#   area 0.0.0.100 filter-list route-map rmap_2 out\n#   area 0.0.0.100 filter-list route-map rmap_1 in\n#   area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#   area 0.0.0.100 range 198.51.100.96/27 cost 120\n#   area 0.0.0.101 authentication message-digest\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#     redistribute static route-map zone1-static-connect\n#     summary-address 198.51.100.128/27 tag 121\n#     summary-address 198.51.100.160/27\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n- name: Delete a single OSPF process\n  cisco.nxos.nxos_ospfv2:\n    config:\n      processes:\n      - process_id: 102\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - areas:\n#      - area_id: 0.0.0.100\n#        filter_list:\n#        - direction: out\n#          route_map: rmap_2\n#        - direction: in\n#          route_map: rmap_1\n#        ranges:\n#        - not_advertise: true\n#          prefix: 198.51.100.64/27\n#        - cost: 120\n#          prefix: 198.51.100.96/27\n#      - area_id: 0.0.0.101\n#        authentication:\n#          message_digest: true\n#      process_id: \"102\"\n#      redistribute:\n#      - protocol: direct\n#        route_map: ospf102-direct-connect\n#      - id: \"120\"\n#        protocol: eigrp\n#        route_map: rmap_1\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        redistribute:\n#        - protocol: static\n#          route_map: zone1-static-connect\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n# commands:\n#  - no router ospf 102\n#\n# after:\n#   processes:\n#   - process_id: \"100\"\n#     router_id: 203.0.113.20\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospf 100\n#   router-id 203.0.113.20\n\n# Using deleted all OSPF processes from the device\n\n# Before state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospf 100\n#   router-id 203.0.113.20\n# router ospf 102\n#   router-id 198.51.100.1\n#   redistribute direct route-map ospf102-direct-connect\n#   redistribute eigrp 120 route-map rmap_1\n#   area 0.0.0.100 filter-list route-map rmap_2 out\n#   area 0.0.0.100 filter-list route-map rmap_1 in\n#   area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#   area 0.0.0.100 range 198.51.100.96/27 cost 120\n#   area 0.0.0.101 authentication message-digest\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#     redistribute static route-map zone1-static-connect\n#     summary-address 198.51.100.128/27 tag 121\n#     summary-address 198.51.100.160/27\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n- name: Delete all OSPF processes from the device\n  cisco.nxos.nxos_ospfv2:\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - areas:\n#      - area_id: 0.0.0.100\n#        filter_list:\n#        - direction: out\n#          route_map: rmap_2\n#        - direction: in\n#          route_map: rmap_1\n#        ranges:\n#        - not_advertise: true\n#          prefix: 198.51.100.64/27\n#        - cost: 120\n#          prefix: 198.51.100.96/27\n#      - area_id: 0.0.0.101\n#        authentication:\n#          message_digest: true\n#      process_id: \"102\"\n#      redistribute:\n#      - protocol: direct\n#        route_map: ospf102-direct-connect\n#      - id: \"120\"\n#        protocol: eigrp\n#        route_map: rmap_1\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        redistribute:\n#        - protocol: static\n#          route_map: zone1-static-connect\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n# commands:\n#  - no router ospf 100\n#  - no router ospf 102\n#\n#  after: {}\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# nxos-9k-rdo#\n\n# Using rendered\n\n- name: Render platform specific configuration lines (without connecting to the device)\n  cisco.nxos.nxos_ospfv2:\n    config:\n      processes:\n      - process_id: 100\n        router_id: 203.0.113.20\n      - process_id: 102\n        router_id: 198.51.100.1\n        areas:\n        - area_id: 0.0.0.100\n          filter_list:\n          - route_map: rmap_1\n            direction: in\n          - route_map: rmap_2\n            direction: out\n          ranges:\n          - prefix: 198.51.100.64/27\n            not_advertise: true\n          - prefix: 198.51.100.96/27\n            cost: 120\n        - area_id: 0.0.0.101\n          authentication:\n            message_digest: true\n        redistribute:\n        - protocol: eigrp\n          id: 120\n          route_map: rmap_1\n        - protocol: direct\n          route_map: ospf102-direct-connect\n        vrfs:\n        - vrf: zone1\n          router_id: 198.51.100.129\n          redistribute:\n          - protocol: static\n            route_map: zone1-static-connect\n          summary_address:\n          - prefix: 198.51.100.128/27\n            tag: 121\n          - prefix: 198.51.100.160/27\n          areas:\n          - area_id: 0.0.0.102\n            nssa:\n              default_information_originate: true\n              no_summary: true\n          - area_id: 0.0.0.103\n            nssa:\n              no_summary: true\n              translate:\n                type7:\n                  always: true\n        - vrf: zone2\n          auto_cost:\n            reference_bandwidth: 45\n            unit: Gbps\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n# rendered:\n#  - router ospf 100\n#  - router-id 203.0.113.20\n#  - router ospf 102\n#  - router-id 198.51.100.1\n#  - redistribute eigrp 120 route-map rmap_1\n#  - redistribute direct route-map ospf102-direct-connect\n#  - area 0.0.0.100 filter-list route-map rmap_1 in\n#  - area 0.0.0.100 filter-list route-map rmap_2 out\n#  - area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#  - area 0.0.0.100 range 198.51.100.96/27 cost 120\n#  - area 0.0.0.101 authentication message-digest\n#  - vrf zone1\n#  - router-id 198.51.100.129\n#  - summary-address 198.51.100.128/27 tag 121\n#  - summary-address 198.51.100.160/27\n#  - redistribute static route-map zone1-static-connect\n#  - area 0.0.0.102 nssa no-summary default-information-originate\n#  - area 0.0.0.103 nssa no-summary\n#  - area 0.0.0.103 nssa translate type7 always\n#  - vrf zone2\n#  - auto-cost reference-bandwidth 45 Gbps\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# router ospf 100\n#   router-id 192.0.100.1\n#   area 0.0.0.101 nssa no-summary no-redistribution\n#   area 0.0.0.102 stub no-summary\n#   redistribute direct route-map ospf-direct-connect\n#   redistribute eigrp 120 route-map rmap_1\n#   area 0.0.0.100 filter-list route-map rmap_2 out\n#   area 0.0.0.100 filter-list route-map rmap_1 in\n#   area 0.0.0.100 range 192.0.2.0/24 not-advertise\n#   area 0.0.0.100 range 192.0.3.0/24 cost 120\n#   area 0.0.0.100 authentication message-digest\n#   vrf zone1\n#     router-id 192.0.100.2\n#     area 0.0.100.1 nssa no-summary no-redistribution\n#     redistribute static route-map zone1-direct-connect\n#     summary-address 10.0.0.0/24 tag 120\n#     summary-address 11.0.0.0/24 not-advertise\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n#     down-bit-ignore\n#     capability vrf-lite evpn\n#     shutdown\n# router ospf 102\n#   router-id 198.54.100.1\n#   shutdown\n#   vrf zone2\n#     summary-address 192.0.8.0/24 tag 120\n#   vrf zone4\n#     shutdown\n\n- name: Parse externally provided OSPFv2 config\n  cisco.nxos.nxos_ospfv2:\n    running_config: \"{{ lookup('file', 'ospfv2.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# parsed:\n#   processes:\n#   - process_id: \"100\"\n#     areas:\n#       - area_id: 0.0.0.101\n#         nssa:\n#           no_redistribution: true\n#           no_summary: true\n#       - area_id: 0.0.0.102\n#         stub:\n#           no_summary: true\n#       - area_id: 0.0.0.100\n#         authentication:\n#           message_digest: true\n#         filter_list:\n#           - direction: out\n#             route_map: rmap_2\n#           - direction: in\n#             route_map: rmap_1\n#         ranges:\n#           - not_advertise: true\n#             prefix: 192.0.2.0/24\n#           - cost: 120\n#             prefix: 192.0.3.0/24\n#     redistribute:\n#       - protocol: direct\n#         route_map: ospf-direct-connect\n#       - id: \"120\"\n#         protocol: eigrp\n#         route_map: rmap_1\n#     router_id: 192.0.100.1\n#     vrfs:\n#       - vrf: zone1\n#         areas:\n#           - area_id: 0.0.100.1\n#             nssa:\n#               no_redistribution: true\n#               no_summary: true\n#         redistribute:\n#           - protocol: static\n#             route_map: zone1-direct-connect\n#         router_id: 192.0.100.2\n#         summary_address:\n#           - prefix: 10.0.0.0/24\n#             tag: 120\n#           - not_advertise: true\n#             prefix: 11.0.0.0/24\n#       - vrf: zone2\n#         auto_cost:\n#           reference_bandwidth: 45\n#           unit: Gbps\n#         capability:\n#           vrf_lite:\n#             evpn: true\n#         down_bit_ignore: true\n#         shutdown: true\n#   - process_id: \"102\"\n#     router_id: 198.54.100.1\n#     shutdown: true\n#     vrfs:\n#       - vrf: zone2\n#         summary_address:\n#           - prefix: 192.0.8.0/24\n#             tag: 120\n#       - vrf: zone4\n#         shutdown: true\n\n# Using gathered\n\n- name: Gather OSPFv2 facts using gathered\n  cisco.nxos.nxos_ospfv2:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n#  gathered:\n#    processes:\n#      - process_id: \"102\"\n#        areas:\n#          - area_id: 0.0.0.101\n#            stub:\n#              no_summary: true\n#          - area_id: 0.0.0.100\n#            filter_list:\n#              - direction: in\n#                route_map: rmap_8\n#            ranges:\n#              - not_advertise: true\n#                prefix: 198.51.100.64/27\n#        redistribute:\n#          - protocol: direct\n#            route_map: ospf102-direct-connect\n#          - id: \"130\"\n#            protocol: eigrp\n#            route_map: rmap_1\n#        router_id: 198.51.100.1\n#        vrfs:\n#          - vrf: zone1\n#            areas:\n#              - area_id: 0.0.0.102\n#                nssa:\n#                  default_information_originate: true\n#                  no_summary: true\n#            redistribute:\n#             - id: \"65563\"\n#               protocol: bgp\n#               route_map: zone1-bgp-connect\n#            router_id: 198.51.100.129\n#\n"
  },
  "cisco.nxos.nxos_ospfv3": {
    "doc": {
      "description": "This module manages OSPFv3 configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 7.0(3)I5(1).\nUnsupported for Cisco MDS\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of OSPFv3 process configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "processes": {
              "aliases": [],
              "description": "A list of OSPFv3 instances' configurations.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "address_family": {
                  "aliases": [],
                  "description": "IPv6 unicast address-family OSPFv3 settings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "afi": {
                      "aliases": [],
                      "description": "Configure OSPFv3 settings under IPv6 address-family.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "ipv6"
                      ],
                      "suboptions": {}
                    },
                    "areas": {
                      "aliases": [],
                      "description": "Configure properties of OSPF Areas under address-family.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "area_id": {
                          "aliases": [],
                          "description": "The Area ID in IP Address format.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        },
                        "default_cost": {
                          "aliases": [],
                          "description": "Specify the default cost.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "filter_list": {
                          "aliases": [],
                          "description": "Filter prefixes between OSPF areas.",
                          "type": "list",
                          "required": false,
                          "elements": "dict",
                          "suboptions": {
                            "direction": {
                              "aliases": [],
                              "description": "The direction to apply the route map.",
                              "type": "str",
                              "required": true,
                              "choices": [
                                "in",
                                "out"
                              ],
                              "suboptions": {}
                            },
                            "route_map": {
                              "aliases": [],
                              "description": "The Route-map name.",
                              "type": "str",
                              "required": true,
                              "suboptions": {}
                            }
                          }
                        },
                        "ranges": {
                          "aliases": [],
                          "description": "Configure an address range for the area.",
                          "type": "list",
                          "required": false,
                          "elements": "dict",
                          "suboptions": {
                            "cost": {
                              "aliases": [],
                              "description": "Cost to use for the range.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "not_advertise": {
                              "aliases": [],
                              "description": "Suppress advertising the specified range.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "prefix": {
                              "aliases": [],
                              "description": "IP in Prefix format (x.x.x.x/len)",
                              "type": "str",
                              "required": true,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "default_information": {
                      "aliases": [],
                      "description": "Control distribution of default routes.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "originate": {
                          "aliases": [],
                          "description": "Distribute a default route.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "always": {
                              "aliases": [],
                              "description": "Always advertise a default route.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "route_map": {
                              "aliases": [],
                              "description": "Policy to control distribution of default routes",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Enable distribution of default route.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "distance": {
                      "aliases": [],
                      "description": "Configure the OSPF administrative distance.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "maximum_paths": {
                      "aliases": [],
                      "description": "Maximum paths per destination.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "redistribute": {
                      "aliases": [],
                      "description": "Redistribute information from another routing protocol.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "id": {
                          "aliases": [],
                          "description": "The identifier for the protocol specified.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "protocol": {
                          "aliases": [],
                          "description": "The name of the protocol.",
                          "type": "str",
                          "required": true,
                          "choices": [
                            "bgp",
                            "direct",
                            "eigrp",
                            "isis",
                            "lisp",
                            "ospfv3",
                            "rip",
                            "static"
                          ],
                          "suboptions": {}
                        },
                        "route_map": {
                          "aliases": [],
                          "description": "The route map policy to constrain redistribution.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        }
                      }
                    },
                    "safi": {
                      "aliases": [],
                      "description": "Configure OSPFv3 settings under IPv6 unicast address-family.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "unicast"
                      ],
                      "suboptions": {}
                    },
                    "summary_address": {
                      "aliases": [],
                      "description": "Configure route summarization for redistribution.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "not_advertise": {
                          "aliases": [],
                          "description": "Suppress advertising the specified summary.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "prefix": {
                          "aliases": [],
                          "description": "IPv6 prefix format 'xxxx:xxxx/ml', 'xxxx:xxxx::/ml' or 'xxxx::xx/128'",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        },
                        "tag": {
                          "aliases": [],
                          "description": "A 32-bit tag value.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "table_map": {
                      "aliases": [],
                      "description": "Policy for filtering/modifying OSPF routes before sending them to RIB.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "filter": {
                          "aliases": [],
                          "description": "Block the OSPF routes from being sent to RIB.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "name": {
                          "aliases": [],
                          "description": "The Route Map name.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        }
                      }
                    },
                    "timers": {
                      "aliases": [],
                      "description": "Configure timer related constants.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "throttle": {
                          "aliases": [],
                          "description": "Configure throttle related constants.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "spf": {
                              "aliases": [],
                              "description": "Set OSPF SPF timers.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "initial_spf_delay": {
                                  "aliases": [],
                                  "description": "Initial SPF schedule delay in milliseconds.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "max_wait_time": {
                                  "aliases": [],
                                  "description": "Maximum wait time between SPF calculations.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "min_hold_time": {
                                  "aliases": [],
                                  "description": "Minimum hold time between SPF calculations.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "areas": {
                  "aliases": [],
                  "description": "Configure properties of OSPF Areas.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "area_id": {
                      "aliases": [],
                      "description": "The Area ID in IP Address format.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "nssa": {
                      "aliases": [],
                      "description": "NSSA settings for the area.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "default_information_originate": {
                          "aliases": [],
                          "description": "Originate Type-7 default LSA into NSSA area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "no_redistribution": {
                          "aliases": [],
                          "description": "Do not send redistributed LSAs into NSSA area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "no_summary": {
                          "aliases": [],
                          "description": "Do not send summary LSAs into NSSA area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "route_map": {
                          "aliases": [],
                          "description": "Policy to control distribution of default route.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Configure area as NSSA.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "translate": {
                          "aliases": [],
                          "description": "Translate LSA.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "type7": {
                              "aliases": [],
                              "description": "Translate from Type 7 to Type 5.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "always": {
                                  "aliases": [],
                                  "description": "Always translate LSAs",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "never": {
                                  "aliases": [],
                                  "description": "Never translate LSAs",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "supress_fa": {
                                  "aliases": [],
                                  "description": "Suppress forwarding address in translated LSAs.",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "stub": {
                      "aliases": [],
                      "description": "Settings for configuring the area as a stub.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "no_summary": {
                          "aliases": [],
                          "description": "Prevent ABR from sending summary LSAs into stub area.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Configure the area as a stub.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "auto_cost": {
                  "aliases": [],
                  "description": "Calculate OSPF cost according to bandwidth.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "reference_bandwidth": {
                      "aliases": [],
                      "description": "Reference bandwidth used to assign OSPF cost.",
                      "type": "int",
                      "required": true,
                      "suboptions": {}
                    },
                    "unit": {
                      "aliases": [],
                      "description": "Specify in which unit the reference bandwidth is specified.",
                      "type": "str",
                      "required": true,
                      "choices": [
                        "Gbps",
                        "Mbps"
                      ],
                      "suboptions": {}
                    }
                  }
                },
                "flush_routes": {
                  "aliases": [],
                  "description": "Flush routes on a non-graceful controlled restart.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "graceful_restart": {
                  "aliases": [],
                  "description": "Configure graceful restart.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "grace_period": {
                      "aliases": [],
                      "description": "Configure maximum interval to restart gracefully.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "helper_disable": {
                      "aliases": [],
                      "description": "Enable/Disable helper mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "planned_only": {
                      "aliases": [],
                      "description": "Enable graceful restart only for a planned restart",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "set": {
                      "aliases": [],
                      "description": "Enable graceful-restart.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "isolate": {
                  "aliases": [],
                  "description": "Isolate this router from OSPF perspective.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "log_adjacency_changes": {
                  "aliases": [],
                  "description": "Log changes in adjacency state.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "detail": {
                      "aliases": [],
                      "description": "Notify all state changes.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "log": {
                      "aliases": [],
                      "description": "Enable/disable logging changes in adjacency state.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "max_lsa": {
                  "aliases": [],
                  "description": "Feature to limit the number of non-self-originated LSAs.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "ignore_count": {
                      "aliases": [],
                      "description": "Set count on how many times adjacencies can be suppressed.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "ignore_time": {
                      "aliases": [],
                      "description": "Set time during which all adjacencies are suppressed.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "max_non_self_generated_lsa": {
                      "aliases": [],
                      "description": "Set the maximum number of non self-generated LSAs.",
                      "type": "int",
                      "required": true,
                      "suboptions": {}
                    },
                    "reset_time": {
                      "aliases": [],
                      "description": "Set number of minutes after which ignore-count is reset to zero.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "threshold": {
                      "aliases": [],
                      "description": "Threshold value (%) at which to generate a warning message.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "warning_only": {
                      "aliases": [],
                      "description": "Log a warning message when limit is exceeded.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "max_metric": {
                  "aliases": [],
                  "description": "Maximize the cost metric.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "router_lsa": {
                      "aliases": [],
                      "description": "Router LSA configuration.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "external_lsa": {
                          "aliases": [],
                          "description": "External LSA configuration.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "max_metric_value": {
                              "aliases": [],
                              "description": "Set max metric value for external LSAs.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set external-lsa attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "inter_area_prefix_lsa": {
                          "aliases": [],
                          "description": "Inter-area-prefix LSAs configuration.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "max_metric_value": {
                              "aliases": [],
                              "description": "Max metric value for summary LSAs.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set summary-lsa attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "on_startup": {
                          "aliases": [],
                          "description": "Effective only at startup.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "set": {
                              "aliases": [],
                              "description": "Set on-startup attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "wait_for_bgp_asn": {
                              "aliases": [],
                              "description": "ASN of BGP to wait for.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "wait_period": {
                              "aliases": [],
                              "description": "Wait period in seconds after startup.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "set": {
                          "aliases": [],
                          "description": "Set router-lsa attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "stub_prefix_lsa": {
                          "aliases": [],
                          "description": "Advertise Max metric for Stub links as well.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "name_lookup": {
                  "aliases": [],
                  "description": "Display OSPF router ids as DNS names.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "passive_interface": {
                  "aliases": [],
                  "description": "Suppress routing updates on the interface.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "default": {
                      "aliases": [],
                      "description": "Interfaces passive by default.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "process_id": {
                  "aliases": [],
                  "description": "The OSPF process tag.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "router_id": {
                  "aliases": [],
                  "description": "Set OSPF process router-id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "shutdown": {
                  "aliases": [],
                  "description": "Shutdown the OSPF protocol instance.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "timers": {
                  "aliases": [],
                  "description": "Configure timer related constants.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "lsa_arrival": {
                      "aliases": [],
                      "description": "Mimimum interval between arrival of a LSA.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "lsa_group_pacing": {
                      "aliases": [],
                      "description": "LSA group refresh/maxage interval.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "throttle": {
                      "aliases": [],
                      "description": "Configure throttle related constants.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "lsa": {
                          "aliases": [],
                          "description": "Set rate-limiting for LSA generation.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "hold_interval": {
                              "aliases": [],
                              "description": "The hold interval.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "max_interval": {
                              "aliases": [],
                              "description": "The max interval.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            },
                            "start_interval": {
                              "aliases": [],
                              "description": "The start interval.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "vrfs": {
                  "aliases": [],
                  "description": "Configure VRF specific OSPF settings.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "areas": {
                      "aliases": [],
                      "description": "Configure properties of OSPF Areas.",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "area_id": {
                          "aliases": [],
                          "description": "The Area ID in IP Address format.",
                          "type": "str",
                          "required": true,
                          "suboptions": {}
                        },
                        "nssa": {
                          "aliases": [],
                          "description": "NSSA settings for the area.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "default_information_originate": {
                              "aliases": [],
                              "description": "Originate Type-7 default LSA into NSSA area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "no_redistribution": {
                              "aliases": [],
                              "description": "Do not send redistributed LSAs into NSSA area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "no_summary": {
                              "aliases": [],
                              "description": "Do not send summary LSAs into NSSA area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "route_map": {
                              "aliases": [],
                              "description": "Policy to control distribution of default route.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Configure area as NSSA.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "translate": {
                              "aliases": [],
                              "description": "Translate LSA.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "type7": {
                                  "aliases": [],
                                  "description": "Translate from Type 7 to Type 5.",
                                  "type": "dict",
                                  "required": false,
                                  "suboptions": {
                                    "always": {
                                      "aliases": [],
                                      "description": "Always translate LSAs",
                                      "type": "bool",
                                      "required": false,
                                      "suboptions": {}
                                    },
                                    "never": {
                                      "aliases": [],
                                      "description": "Never translate LSAs",
                                      "type": "bool",
                                      "required": false,
                                      "suboptions": {}
                                    },
                                    "supress_fa": {
                                      "aliases": [],
                                      "description": "Suppress forwarding address in translated LSAs.",
                                      "type": "bool",
                                      "required": false,
                                      "suboptions": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "stub": {
                          "aliases": [],
                          "description": "Settings for configuring the area as a stub.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "no_summary": {
                              "aliases": [],
                              "description": "Prevent ABR from sending summary LSAs into stub area.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "set": {
                              "aliases": [],
                              "description": "Configure the area as a stub.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "auto_cost": {
                      "aliases": [],
                      "description": "Calculate OSPF cost according to bandwidth.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "reference_bandwidth": {
                          "aliases": [],
                          "description": "Reference bandwidth used to assign OSPF cost.",
                          "type": "int",
                          "required": true,
                          "suboptions": {}
                        },
                        "unit": {
                          "aliases": [],
                          "description": "Specify in which unit the reference bandwidth is specified.",
                          "type": "str",
                          "required": true,
                          "choices": [
                            "Gbps",
                            "Mbps"
                          ],
                          "suboptions": {}
                        }
                      }
                    },
                    "graceful_restart": {
                      "aliases": [],
                      "description": "Configure graceful restart.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "grace_period": {
                          "aliases": [],
                          "description": "Configure maximum interval to restart gracefully.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "helper_disable": {
                          "aliases": [],
                          "description": "Enable/Disable helper mode.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "planned_only": {
                          "aliases": [],
                          "description": "Enable graceful restart only for a planned restart",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "set": {
                          "aliases": [],
                          "description": "Enable graceful-restart.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "log_adjacency_changes": {
                      "aliases": [],
                      "description": "Log changes in adjacency state.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "detail": {
                          "aliases": [],
                          "description": "Notify all state changes.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "log": {
                          "aliases": [],
                          "description": "Enable/disable logging changes in adjacency state.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "max_lsa": {
                      "aliases": [],
                      "description": "Feature to limit the number of non-self-originated LSAs.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "ignore_count": {
                          "aliases": [],
                          "description": "Set count on how many times adjacencies can be suppressed.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "ignore_time": {
                          "aliases": [],
                          "description": "Set time during which all adjacencies are suppressed.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "max_non_self_generated_lsa": {
                          "aliases": [],
                          "description": "Set the maximum number of non self-generated LSAs.",
                          "type": "int",
                          "required": true,
                          "suboptions": {}
                        },
                        "reset_time": {
                          "aliases": [],
                          "description": "Set number of minutes after which ignore-count is reset to zero.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "threshold": {
                          "aliases": [],
                          "description": "Threshold value (%) at which to generate a warning message.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "warning_only": {
                          "aliases": [],
                          "description": "Log a warning message when limit is exceeded.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "max_metric": {
                      "aliases": [],
                      "description": "Maximize the cost metric.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "router_lsa": {
                          "aliases": [],
                          "description": "Router LSA configuration.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "external_lsa": {
                              "aliases": [],
                              "description": "External LSA configuration.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "max_metric_value": {
                                  "aliases": [],
                                  "description": "Set max metric value for external LSAs.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "set": {
                                  "aliases": [],
                                  "description": "Set external-lsa attribute.",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "inter_area_prefix_lsa": {
                              "aliases": [],
                              "description": "Inter-area-prefix LSAs configuration.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "max_metric_value": {
                                  "aliases": [],
                                  "description": "Max metric value for summary LSAs.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "set": {
                                  "aliases": [],
                                  "description": "Set summary-lsa attribute.",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "on_startup": {
                              "aliases": [],
                              "description": "Effective only at startup.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "set": {
                                  "aliases": [],
                                  "description": "Set on-startup attribute.",
                                  "type": "bool",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "wait_for_bgp_asn": {
                                  "aliases": [],
                                  "description": "ASN of BGP to wait for.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "wait_period": {
                                  "aliases": [],
                                  "description": "Wait period in seconds after startup.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "set": {
                              "aliases": [],
                              "description": "Set router-lsa attribute.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "stub_prefix_lsa": {
                              "aliases": [],
                              "description": "Advertise Max metric for Stub links as well.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "name_lookup": {
                      "aliases": [],
                      "description": "Display OSPF router ids as DNS names.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "passive_interface": {
                      "aliases": [],
                      "description": "Suppress routing updates on the interface.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "default": {
                          "aliases": [],
                          "description": "Interfaces passive by default.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "router_id": {
                      "aliases": [],
                      "description": "Set OSPF process router-id.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "shutdown": {
                      "aliases": [],
                      "description": "Shutdown the OSPF protocol instance.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "timers": {
                      "aliases": [],
                      "description": "Configure timer related constants.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "lsa_arrival": {
                          "aliases": [],
                          "description": "Mimimum interval between arrival of a LSA.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "lsa_group_pacing": {
                          "aliases": [],
                          "description": "LSA group refresh/maxage interval.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "throttle": {
                          "aliases": [],
                          "description": "Configure throttle related constants.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "lsa": {
                              "aliases": [],
                              "description": "Set rate-limiting for LSA generation.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "hold_interval": {
                                  "aliases": [],
                                  "description": "The hold interval.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "max_interval": {
                                  "aliases": [],
                                  "description": "The max interval.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "start_interval": {
                                  "aliases": [],
                                  "description": "The start interval.",
                                  "type": "int",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "vrf": {
                      "aliases": [],
                      "description": "Name/Identifier of the VRF.",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    }
                  }
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section \"^router ospfv3\").\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "parsed",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "OSPFv3 resource module",
      "version_added": "1.2.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# nxos-9k-rdo#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_ospfv3:\n    config:\n      processes:\n      - process_id: 100\n        router_id: 203.0.113.20\n      - process_id: 102\n        router_id: 198.51.100.1\n        address_family:\n          afi: ipv6\n          safi: unicast\n          areas:\n          - area_id: 0.0.0.100\n            filter_list:\n            - route_map: rmap_1\n              direction: in\n            - route_map: rmap_2\n              direction: out\n            ranges:\n            - prefix: 2001:db2::/32\n              not_advertise: true\n            - prefix: 2001:db3::/32\n              cost: 120\n          redistribute:\n          - protocol: eigrp\n            id: 120\n            route_map: rmap_1\n          - protocol: direct\n            route_map: ospf102-direct-connect\n        vrfs:\n        - vrf: zone1\n          router_id: 198.51.100.129\n          areas:\n          - area_id: 0.0.0.102\n            nssa:\n              default_information_originate: true\n              no_summary: true\n          - area_id: 0.0.0.103\n            nssa:\n              no_summary: true\n              translate:\n                type7:\n                  always: true\n        - vrf: zone2\n          auto_cost:\n            reference_bandwidth: 45\n            unit: Gbps\n    state: merged\n\n# Task output\n# -------------\n# before: {}\n#\n# commands:\n#  - router ospf 102\n#  - router-id 198.51.100.1\n#  - address-family ipv6 unicast\n#  - redistribute eigrp 120 route-map rmap_1\n#  - redistribute direct route-map ospf102-direct-connect\n#  - area 0.0.0.100 filter-list route-map rmap_1 in\n#  - area 0.0.0.100 filter-list route-map rmap_2 out\n#  - area 0.0.0.100 range 2001:db2::/32 not-advertise\n#  - area 0.0.0.100 range 2001:db3::/32 cost 120\n#  - vrf zone1\n#  - router-id 198.51.100.129\n#  - area 0.0.0.102 nssa no-summary default-information-originate\n#  - area 0.0.0.103 nssa no-summary\n#  - area 0.0.0.103 nssa translate type7 always\n#  - vrf zone2\n#  - auto-cost reference-bandwidth 45 Gbps\n#  - router ospf 100\n#  - router-id 203.0.113.20\n#\n# after:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - address_family:\n#        afi: ipv4\n#        safi: unicast\n#        areas:\n#        - area_id: 0.0.0.100\n#          filter_list:\n#          - direction: out\n#            route_map: rmap_2\n#          - direction: in\n#            route_map: rmap_1\n#          ranges:\n#          - not_advertise: true\n#            prefix: 2001:db2::/32\n#          - cost: 120\n#            prefix: 2001:db3::/32\n#        redistribute:\n#        - protocol: direct\n#          route_map: ospf102-direct-connect\n#        - id: \"120\"\n#          protocol: eigrp\n#          route_map: rmap_1\n#      process_id: \"102\"\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# router ospfv3 100\n#   router-id 203.0.113.20\n# router ospfv3 102\n#   router-id 198.51.100.1\n#   address-family ipv6 unicast\n#     redistribute direct route-map ospf102-direct-connect\n#     redistribute eigrp 120 route-map rmap_1\n#     area 0.0.0.100 filter-list route-map rmap_2 out\n#     area 0.0.0.100 filter-list route-map rmap_1 in\n#     area 0.0.0.100 range 2001:db2::/32 not-advertise\n#     area 0.0.0.100 range 2001:db3::/32 cost 120\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n# Using replaced\n\n# Before state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# router ospfv3 100\n#   router-id 203.0.113.20\n# router ospfv3 102\n#   router-id 198.51.100.1\n#   address-family upv6 unicast\n#     redistribute direct route-map ospf102-direct-connect\n#     redistribute eigrp 120 route-map rmap_1\n#     area 0.0.0.100 filter-list route-map rmap_2 out\n#     area 0.0.0.100 filter-list route-map rmap_1 in\n#     area 0.0.0.100 range 2001:db2::/32 not-advertise\n#     area 0.0.0.100 range 2001:db3::/32 cost 120\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n- name: Replace device configurations of listed OSPFv3 processes with provided configurations\n  cisco.nxos.nxos_ospfv3:\n    config:\n      processes:\n      - process_id: 102\n        router_id: 198.51.100.1\n        address_family:\n          afi: ipv6\n          safi: unicast\n          areas:\n          - area_id: 0.0.0.100\n            filter_list:\n            - route_map: rmap_8\n              direction: in\n            ranges:\n            - not_advertise: true\n              prefix: 2001:db2::/32\n          redistribute:\n          - protocol: eigrp\n            id: 130\n            route_map: rmap_1\n          - protocol: direct\n            route_map: ospf102-direct-connect\n        vrfs:\n        - vrf: zone1\n          router_id: 198.51.100.129\n          areas:\n          - area_id: 0.0.0.102\n            nssa:\n              default_information_originate: True\n              no_summary: True\n    state: replaced\n\n# Task output\n# -------------\n# before:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - address_family:\n#        afi: ipv4\n#        safi: unicast\n#        areas:\n#        - area_id: 0.0.0.100\n#          filter_list:\n#          - direction: out\n#            route_map: rmap_2\n#          - direction: in\n#            route_map: rmap_1\n#          ranges:\n#          - not_advertise: true\n#            prefix: 2001:db2::/32\n#          - cost: 120\n#            prefix: 2001:db3::/32\n#        redistribute:\n#        - protocol: direct\n#          route_map: ospf102-direct-connect\n#        - id: \"120\"\n#          protocol: eigrp\n#          route_map: rmap_1\n#      process_id: \"102\"\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n#  commands:\n#  - router ospf 102\n#  - address-family ipv6 unicast\n#  - redistribute eigrp 130 route-map rmap_1\n#  - no redistribute eigrp 120 route-map rmap_1\n#  - area 0.0.0.100 filter-list route-map rmap_8 in\n#  - no area 0.0.0.100 filter-list route-map rmap_2 out\n#  - no area 0.0.0.100 range 2001:db3::/32\n#  - vrf zone1\n#  - no area 0.0.0.103 nssa\n#  - no area 0.0.0.103 nssa translate type7 always\n#  - no vrf zone2\n#\n# after:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - address_family:\n#        afi: ipv6\n#        safi: unicast\n#        areas:\n#        - area_id: 0.0.0.100\n#          filter_list:\n#          - direction: in\n#            route_map: rmap_8\n#          ranges:\n#          - not_advertise: true\n#            prefix: 2001:db2::/32\n#        redistribute:\n#        - protocol: direct\n#          route_map: ospf102-direct-connect\n#        - id: \"130\"\n#          protocol: eigrp\n#          route_map: rmap_1\n#      process_id: \"102\"\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        router_id: 198.51.100.129\n#        vrf: zone1\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# router ospfv3 100\n#   router-id 203.0.113.20\n# router ospfv3 102\n#   router-id 198.51.100.1\n#   address-family ipv6 unicast\n#     redistribute direct route-map ospf102-direct-connect\n#     redistribute eigrp 130 route-map rmap_1\n#     area 0.0.0.100 filter-list route-map rmap_8 in\n#     area 0.0.0.100 range 198.51.100.64/27 not-advertise\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n\n# Using overridden\n\n# Before state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# router ospfv3 100\n#   router-id 203.0.113.20\n# router ospfv3 102\n#   router-id 198.51.100.1\n#   address-family ipv6 unicast\n#     redistribute direct route-map ospf102-direct-connect\n#     redistribute eigrp 120 route-map rmap_1\n#     area 0.0.0.100 filter-list route-map rmap_2 out\n#     area 0.0.0.100 filter-list route-map rmap_1 in\n#     area 0.0.0.100 range 2001:db2::/32 not-advertise\n#     area 0.0.0.100 range 2001:db3::/32 cost 120\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n- name: Override all OSPFv3 configuration with provided configuration\n  cisco.nxos.nxos_ospfv3:\n    config:\n      processes:\n      - process_id: 104\n        router_id: 203.0.113.20\n      - process_id: 102\n        router_id: 198.51.100.1\n        shutdown: true\n    state: overridden\n\n# Task output\n# -------------\n# before:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - address_family:\n#        afi: ipv4\n#        safi: unicast\n#        areas:\n#        - area_id: 0.0.0.100\n#          filter_list:\n#          - direction: out\n#            route_map: rmap_2\n#          - direction: in\n#            route_map: rmap_1\n#          ranges:\n#          - not_advertise: true\n#            prefix: 2001:db2::/32\n#          - cost: 120\n#            prefix: 2001:db3::/32\n#        redistribute:\n#        - protocol: direct\n#          route_map: ospf102-direct-connect\n#        - id: \"120\"\n#          protocol: eigrp\n#          route_map: rmap_1\n#      process_id: \"102\"\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n# commands:\n#  - no router ospfv3 100\n#  - router ospfv3 104\n#  - router-id 203.0.113.20\n#  - router ospfv3 102\n#  - shutdown\n#  - address-family ipv6 unicast\n#  - no redistribute direct route-map ospf102-direct-connect\n#  - no redistribute eigrp 120 route-map rmap_1\n#  - no area 0.0.0.100 filter-list route-map rmap_2 out\n#  - no area 0.0.0.100 filter-list route-map rmap_1 in\n#  - no area 0.0.0.100 range 2001:db2::/32\n#  - no area 0.0.0.100 range 2001:db3::/32\n#  - no vrf zone1\n#  - no vrf zone2\n#\n# after:\n#    processes:\n#    - process_id: \"102\"\n#      router_id: 198.51.100.1\n#      shutdown: true\n#      address_family:\n#        afi: ipv6\n#        safi: unicast\n#    - process_id: \"104\"\n#      router_id: 203.0.113.20\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# router ospfv3 102\n#   router-id 198.51.100.1\n#   address-family ipv6 unicast\n#   shutdown\n# router ospfv3 104\n#   router-id 203.0.113.20\n\n# Using deleted to delete a single OSPF process\n\n# Before state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospf .*\"\n# router ospfv3 100\n#   router-id 203.0.113.20\n# router ospfv3 102\n#   router-id 198.51.100.1\n#   address-family ipv6 unicast\n#     redistribute direct route-map ospf102-direct-connect\n#     redistribute eigrp 120 route-map rmap_1\n#     area 0.0.0.100 filter-list route-map rmap_2 out\n#     area 0.0.0.100 filter-list route-map rmap_1 in\n#     area 0.0.0.100 range 2001:db2::/32 not-advertise\n#     area 0.0.0.100 range 2001:db3::/32 cost 120\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n- name: Delete a single OSPFv3 process\n  cisco.nxos.nxos_ospfv3:\n    config:\n      processes:\n      - process_id: 102\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - address_family:\n#        afi: ipv4\n#        safi: unicast\n#        areas:\n#        - area_id: 0.0.0.100\n#          filter_list:\n#          - direction: out\n#            route_map: rmap_2\n#          - direction: in\n#            route_map: rmap_1\n#          ranges:\n#          - not_advertise: true\n#            prefix: 2001:db2::/32\n#          - cost: 120\n#            prefix: 2001:db3::/32\n#        redistribute:\n#        - protocol: direct\n#          route_map: ospf102-direct-connect\n#        - id: \"120\"\n#          protocol: eigrp\n#          route_map: rmap_1\n#      process_id: \"102\"\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n# commands:\n#  - no router ospfv3 102\n#\n# after:\n#   processes:\n#   - process_id: \"100\"\n#     router_id: 203.0.113.20\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# router ospfv3 100\n#   router-id 203.0.113.20\n\n# Using deleted all OSPFv3 processes from the device\n\n# Before state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# router ospfv3 100\n#   router-id 203.0.113.20\n# router ospfv3 102\n#   router-id 198.51.100.1\n#   address-family ipv6 unicast\n#     redistribute direct route-map ospf102-direct-connect\n#     redistribute eigrp 120 route-map rmap_1\n#     area 0.0.0.100 filter-list route-map rmap_2 out\n#     area 0.0.0.100 filter-list route-map rmap_1 in\n#     area 0.0.0.100 range 2001:db2::/32 not-advertise\n#     area 0.0.0.100 range 2001:db3::/32 cost 120\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.0.102 nssa no-summary default-information-originate\n#     area 0.0.0.103 nssa no-summary\n#     area 0.0.0.103 nssa translate type7 always\n#   vrf zone2\n#     auto-cost reference-bandwidth 45 Gbps\n\n- name: Delete all OSPFv3 processes from the device\n  cisco.nxos.nxos_ospfv3:\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - address_family:\n#        afi: ipv4\n#        safi: unicast\n#        areas:\n#        - area_id: 0.0.0.100\n#          filter_list:\n#          - direction: out\n#            route_map: rmap_2\n#          - direction: in\n#            route_map: rmap_1\n#          ranges:\n#          - not_advertise: true\n#            prefix: 2001:db2::/32\n#          - cost: 120\n#            prefix: 2001:db3::/32\n#        redistribute:\n#        - protocol: direct\n#          route_map: ospf102-direct-connect\n#        - id: \"120\"\n#          protocol: eigrp\n#          route_map: rmap_1\n#      process_id: \"102\"\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n# commands:\n#  - no router ospfv3 100\n#  - no router ospfv3 102\n#\n#  after: {}\n\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^router ospfv3\"\n# nxos-9k-rdo#\n\n# Using rendered\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_ospfv3:\n    config:\n      processes:\n      - process_id: 100\n        router_id: 203.0.113.20\n      - process_id: 102\n        router_id: 198.51.100.1\n        address_family:\n          afi: ipv6\n          safi: unicast\n          areas:\n          - area_id: 0.0.0.100\n            filter_list:\n            - route_map: rmap_1\n              direction: in\n            - route_map: rmap_2\n              direction: out\n            ranges:\n            - prefix: 2001:db2::/32\n              not_advertise: true\n            - prefix: 2001:db3::/32\n              cost: 120\n          redistribute:\n          - protocol: eigrp\n            id: 120\n            route_map: rmap_1\n          - protocol: direct\n            route_map: ospf102-direct-connect\n        vrfs:\n        - vrf: zone1\n          router_id: 198.51.100.129\n          areas:\n          - area_id: 0.0.0.102\n            nssa:\n              default_information_originate: true\n              no_summary: true\n          - area_id: 0.0.0.103\n            nssa:\n              no_summary: true\n              translate:\n                type7:\n                  always: true\n        - vrf: zone2\n          auto_cost:\n            reference_bandwidth: 45\n            unit: Gbps\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n# rendered:\n#  - router ospfv3 100\n#  - router-id 203.0.113.20\n#  - router ospfv3 102\n#  - router-id 198.51.100.1\n#  - address-family ipv6 unicast\n#  - redistribute eigrp 120 route-map rmap_1\n#  - redistribute direct route-map ospf102-direct-connect\n#  - area 0.0.0.100 filter-list route-map rmap_1 in\n#  - area 0.0.0.100 filter-list route-map rmap_2 out\n#  - area 0.0.0.100 range 2001:db2::/32 not-advertise\n#  - area 0.0.0.100 range 2001:db3::/32 cost 120\n#  - vrf zone1\n#  - router-id 198.51.100.129\n#  - area 0.0.0.102 nssa no-summary default-information-originate\n#  - area 0.0.0.103 nssa no-summary\n#  - area 0.0.0.103 nssa translate type7 always\n#  - vrf zone2\n#  - auto-cost reference-bandwidth 45 Gbps\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# router ospfv3 100\n#   router-id 192.0.100.1\n#   address-family ipv6 unicast\n#     redistribute direct route-map ospf-direct-connect\n#     redistribute eigrp 120 route-map rmap_1\n#     area 0.0.0.100 filter-list route-map rmap_2 out\n#     area 0.0.0.100 filter-list route-map rmap_1 in\n#     area 0.0.0.100 range 2001:db2::/32 not-advertise\n#     area 0.0.0.100 range 2001:db3::/32 cost 120\n#   vrf zone1\n#     router-id 198.51.100.129\n#     area 0.0.100.1 nssa no-summary no-redistribution\n# router ospfv3 102\n#   router-id 198.54.100.1\n#   shutdown\n\n- name: Parse externally provided OSPFv3 config\n  cisco.nxos.nxos_ospfv3:\n    running_config: \"{{ lookup('file', 'ospfv2.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# parsed:\n#   processes:\n#   - process_id: \"100\"\n#     address_family:\n#       afi: ipv6\n#       safi: unicast\n#       areas:\n#       - area_id: 0.0.0.101\n#         nssa:\n#           no_redistribution: true\n#           no_summary: true\n#       - area_id: 0.0.0.102\n#         stub:\n#           no_summary: true\n#         filter_list:\n#           - direction: out\n#             route_map: rmap_2\n#           - direction: in\n#             route_map: rmap_1\n#         ranges:\n#           - not_advertise: true\n#             prefix: 192.0.2.0/24\n#           - cost: 120\n#             prefix: 192.0.3.0/24\n#       redistribute:\n#       - protocol: direct\n#         route_map: ospf-direct-connect\n#       - id: \"120\"\n#         protocol: eigrp\n#         route_map: rmap_1\n#     router_id: 192.0.100.1\n#     vrfs:\n#       - vrf: zone1\n#         areas:\n#           - area_id: 0.0.100.1\n#             nssa:\n#               no_redistribution: true\n#               no_summary: true\n#         router_id: 192.0.100.2\n#   - process_id: \"102\"\n#     router_id: 198.54.100.1\n#     shutdown: True\n\n# Using gathered\n\n- name: Gather OSPFv3 facts using gathered\n  cisco.nxos.nxos_ospfv3:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n#  gathered:\n#    processes:\n#    - process_id: \"100\"\n#      router_id: 203.0.113.20\n#    - address_family:\n#        afi: ipv4\n#        safi: unicast\n#        areas:\n#        - area_id: 0.0.0.100\n#          filter_list:\n#          - direction: out\n#            route_map: rmap_2\n#          - direction: in\n#            route_map: rmap_1\n#          ranges:\n#          - not_advertise: true\n#            prefix: 2001:db2::/32\n#          - cost: 120\n#            prefix: 2001:db3::/32\n#        redistribute:\n#        - protocol: direct\n#          route_map: ospf102-direct-connect\n#        - id: \"120\"\n#          protocol: eigrp\n#          route_map: rmap_1\n#      process_id: \"102\"\n#      router_id: 198.51.100.1\n#      vrfs:\n#      - areas:\n#        - area_id: 0.0.0.102\n#          nssa:\n#            default_information_originate: true\n#            no_summary: true\n#        - area_id: 0.0.0.103\n#          nssa:\n#            no_summary: true\n#            translate:\n#              type7:\n#                always: true\n#        router_id: 198.51.100.129\n#        vrf: zone1\n#      - auto_cost:\n#          reference_bandwidth: 45\n#          unit: Gbps\n#        vrf: zone2\n#\n"
  },
  "cisco.nxos.nxos_overlay_global": {
    "doc": {
      "description": "Configures anycast gateway MAC of the switch.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nDefault restores params default value\nSupported MAC address format are \"E.E.E\", \"EE-EE-EE-EE-EE-EE\", \"EE:EE:EE:EE:EE:EE\" and \"EEEE.EEEE.EEEE\"\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "anycast_gateway_mac": {
          "aliases": [],
          "description": "Anycast gateway mac of the switch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Configures anycast gateway MAC of the switch.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_overlay_global:\n    anycast_gateway_mac: b.b.b\n"
  },
  "cisco.nxos.nxos_pim": {
    "doc": {
      "description": "Manages configuration of a Protocol Independent Multicast (PIM) instance.",
      "has_action": true,
      "notes": "Unsupported for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "bfd": {
          "aliases": [],
          "description": "Enables BFD on all PIM interfaces.\nDependency: ''feature bfd''",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ssm_range": {
          "aliases": [],
          "description": "Configure group ranges for Source Specific Multicast (SSM). Valid values are multicast addresses or the keyword C(none) or keyword C(default). C(none) removes all SSM group ranges. C(default) will set ssm_range to the default multicast address. If you set multicast address, please ensure that it is not the same as the C(default), otherwise use the C(default) option.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "Manages configuration of a PIM instance.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure ssm_range, enable bfd\n  cisco.nxos.nxos_pim:\n    bfd: enable\n    ssm_range: 224.0.0.0/8\n\n- name: Set to default\n  cisco.nxos.nxos_pim:\n    ssm_range: default\n\n- name: Remove all ssm group ranges\n  cisco.nxos.nxos_pim:\n    ssm_range: none\n"
  },
  "cisco.nxos.nxos_pim_interface": {
    "doc": {
      "description": "Manages PIM interface configuration settings.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nWhen C(state=default), supported params will be reset to a default state. These include C(dr_prio), C(hello_auth_key), C(hello_interval), C(jp_policy_out), C(jp_policy_in), C(jp_type_in), C(jp_type_out), C(border), C(neighbor_policy), C(neighbor_type).\nThe C(hello_auth_key) param is not idempotent.\nC(hello_auth_key) only supports clear text passwords.\nWhen C(state=absent), pim interface configuration will be set to defaults and pim-sm will be disabled on the interface.\nPIM must be enabled on the device to use this module.\nThis module is for Layer 3 interfaces.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "bfd": {
          "aliases": [],
          "description": "Enables BFD for PIM at the interface level. This overrides the bfd variable set at the pim global level.\nValid values are 'enable', 'disable' or 'default'.\nDependency: ''feature bfd''",
          "type": "str",
          "required": false,
          "choices": [
            "enable",
            "disable",
            "default"
          ],
          "suboptions": {}
        },
        "border": {
          "aliases": [],
          "description": "Configures interface to be a boundary of a PIM domain.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dr_prio": {
          "aliases": [],
          "description": "Configures priority for PIM DR election on interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hello_auth_key": {
          "aliases": [],
          "description": "Authentication for hellos on this interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hello_interval": {
          "aliases": [],
          "description": "Hello interval in milliseconds or seconds for this interface.\nUse the option I(hello_interval_ms) to specify if the given value is in milliseconds or seconds. The default is seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "hello_interval_ms": {
          "aliases": [],
          "description": "Specifies that the hello_interval is in milliseconds.\nWhen set to True, this indicates that the user is providing the hello_interval in milliseconds and hence, no conversion is required.",
          "type": "bool",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Full name of the interface such as Ethernet1/33.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "jp_policy_in": {
          "aliases": [],
          "description": "Policy for join-prune messages (inbound).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "jp_policy_out": {
          "aliases": [],
          "description": "Policy for join-prune messages (outbound).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "jp_type_in": {
          "aliases": [],
          "description": "Type of policy mapped to C(jp_policy_in).",
          "type": "str",
          "required": false,
          "choices": [
            "prefix",
            "routemap"
          ],
          "suboptions": {}
        },
        "jp_type_out": {
          "aliases": [],
          "description": "Type of policy mapped to C(jp_policy_out).",
          "type": "str",
          "required": false,
          "choices": [
            "prefix",
            "routemap"
          ],
          "suboptions": {}
        },
        "neighbor_policy": {
          "aliases": [],
          "description": "Configures a neighbor policy for filtering adjacencies.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "neighbor_type": {
          "aliases": [],
          "description": "Type of policy mapped to neighbor_policy.",
          "type": "str",
          "required": false,
          "choices": [
            "prefix",
            "routemap"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "sparse": {
          "aliases": [],
          "description": "Enable/disable sparse-mode on the interface.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manages desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "default"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages PIM interface configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure PIM is not running on the interface\n  cisco.nxos.nxos_pim_interface:\n    interface: eth1/33\n    state: absent\n\n- name: Ensure the interface has pim-sm enabled with the appropriate priority and\n    hello interval\n  cisco.nxos.nxos_pim_interface:\n    interface: eth1/33\n    dr_prio: 10\n    hello_interval: 40\n    state: present\n\n- name: Ensure join-prune policies exist\n  cisco.nxos.nxos_pim_interface:\n    interface: eth1/33\n    jp_policy_in: JPIN\n    jp_policy_out: JPOUT\n    jp_type_in: routemap\n    jp_type_out: routemap\n\n- name: disable bfd on the interface\n  cisco.nxos.nxos_pim_interface:\n    interface: eth1/33\n    bfd: disable\n\n- name: Ensure defaults are in place\n  cisco.nxos.nxos_pim_interface:\n    interface: eth1/33\n    state: default\n"
  },
  "cisco.nxos.nxos_pim_rp_address": {
    "doc": {
      "description": "Manages configuration of an Protocol Independent Multicast (PIM) static rendezvous point (RP) address instance.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(state=absent) is currently not supported on all platforms.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "bidir": {
          "aliases": [],
          "description": "Group range is treated in PIM bidirectional mode.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group_list": {
          "aliases": [],
          "description": "Group range for static RP. Valid values are multicast addresses.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefix_list": {
          "aliases": [],
          "description": "Prefix list policy for static RP. Valid values are prefix-list policy names.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "route_map": {
          "aliases": [],
          "description": "Route map policy for static RP. Valid values are route-map policy names.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rp_address": {
          "aliases": [],
          "description": "Configures a Protocol Independent Multicast (PIM) static rendezvous point (RP) address. Valid values are unicast addresses.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages configuration of an PIM static RP address instance.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_pim_rp_address:\n    rp_address: 10.1.1.20\n    state: present\n"
  },
  "cisco.nxos.nxos_ping": {
    "doc": {
      "description": "Tests reachability using ping from switch to a remote destination.\nFor a general purpose network module, see the M(ansible.netcommon.net_ping) module.\nFor Windows targets, use the M(ansible.windows.win_ping) module instead.\nFor targets running Python, use the M(ansible.builtin.ping) module instead.",
      "has_action": true,
      "notes": "Unsupported for Cisco MDS\nFor a general purpose network module, see the M(ansible.netcommon.net_ping) module.\nFor Windows targets, use the M(ansible.windows.win_ping) module instead.\nFor targets running Python, use the M(ansible.builtin.ping) module instead.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "count": {
          "aliases": [],
          "description": "Number of packets to send.",
          "default": "5",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "IP address or hostname (resolvable by switch) of remote node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "df_bit": {
          "aliases": [],
          "description": "Set the DF bit.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "size": {
          "aliases": [],
          "description": "Size of packets to send.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "Source IP Address or hostname (resolvable by switch)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines if the expected result is success or fail.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Outgoing VRF.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Tests reachability using ping from Nexus switch.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Test reachability to 8.8.8.8 using mgmt vrf\n  cisco.nxos.nxos_ping:\n    dest: 8.8.8.8\n    vrf: management\n    host: 68.170.147.165\n\n- name: Test reachability to a few different public IPs using mgmt vrf\n  cisco.nxos.nxos_ping:\n    dest: \"{{ item }}\"\n    vrf: management\n    host: 68.170.147.165\n  with_items:\n    - 8.8.8.8\n    - 4.4.4.4\n    - 198.6.1.4\n\n- name: Test reachability to 8.8.8.8 using mgmt vrf, size and df-bit\n  cisco.nxos.nxos_ping:\n    dest: 8.8.8.8\n    df_bit: true\n    size: 1400\n    vrf: management\n"
  },
  "cisco.nxos.nxos_prefix_lists": {
    "doc": {
      "description": "This module manages prefix-lists configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 9.3.6.\nUnsupported for Cisco MDS\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of prefix-list configuration.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "afi": {
              "aliases": [],
              "description": "The Address Family Identifier (AFI) for the prefix-lists.",
              "type": "str",
              "required": false,
              "choices": [
                "ipv4",
                "ipv6"
              ],
              "suboptions": {}
            },
            "prefix_lists": {
              "aliases": [],
              "description": "List of prefix-list configurations.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Description of the prefix list",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "entries": {
                  "aliases": [],
                  "description": "List of configurations for the specified prefix-list",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "action": {
                      "aliases": [],
                      "description": "Prefix-List permit or deny.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "permit",
                        "deny"
                      ],
                      "suboptions": {}
                    },
                    "eq": {
                      "aliases": [],
                      "description": "Exact prefix length to be matched.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "ge": {
                      "aliases": [],
                      "description": "Minimum prefix length to be matched.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "le": {
                      "aliases": [],
                      "description": "Maximum prefix length to be matched.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "mask": {
                      "aliases": [],
                      "description": "Explicit match mask.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "prefix": {
                      "aliases": [],
                      "description": "IP or IPv6 prefix in A.B.C.D/LEN or A:B::C:D/LEN format.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "sequence": {
                      "aliases": [],
                      "description": "Sequence Number.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Name of the prefix-list.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^ip(.*) prefix-list').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nRefer to examples for more details.\nWith state I(replaced), for the listed prefix-lists, sequences that are in running-config but not in the task are negated.\nWith state I(overridden), all prefix-lists that are in running-config but not in the task are negated.\nPlease refer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Prefix-Lists resource module.",
      "version_added": "2.4.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# nxos-9k-rdo#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_prefix_lists:\n    config:\n      - afi: ipv4\n        prefix_lists:\n          - name: AllowPrefix\n            description: allows engineering IPv4 networks\n            entries:\n              - sequence: 10\n                action: permit\n                prefix: 192.0.2.0/23\n                eq: 24\n              - sequence: 20\n                action: permit\n                prefix: 198.51.100.128/26\n          - name: DenyPrefix\n            description: denies lab IPv4 networks\n            entries:\n              - sequence: 20\n                action: deny\n                prefix: 203.0.113.0/24\n                le: 25\n\n      - afi: ipv6\n        prefix_lists:\n          - name: AllowIPv6Prefix\n            description: allows engineering IPv6 networks\n            entries:\n              - sequence: 8\n                action: permit\n                prefix: \"2001:db8:400::/38\"\n              - sequence: 20\n                action: permit\n                prefix: \"2001:db8:8000::/35\"\n                le: 37\n\n# Task output\n# -------------\n# before: []\n#\n# commands:\n#   - \"ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\"\n#   - \"ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\"\n#   - \"ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\"\n#   - \"ip prefix-list AllowPrefix description allows engineering IPv4 networks\"\n#   - \"ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\"\n#   - \"ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\"\n#   - \"ip prefix-list DenyPrefix description denies lab IPv4 networks\"\n#   - \"ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\"\n#\n# after:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 192.0.2.0/23\n#             eq: 24\n#           - sequence: 20\n#             action: permit\n#             prefix: 198.51.100.128/26\n#         name: AllowPrefix\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\n# ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n# Using replaced\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\n# ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n- name: Replace prefix-lists configurations of listed prefix-lists with provided configurations\n  cisco.nxos.nxos_prefix_lists:\n    config:\n      - afi: ipv4\n        prefix_lists:\n          - name: AllowPrefix\n            description: allows engineering IPv4 networks\n            entries:\n              - sequence: 10\n                action: permit\n                prefix: 203.0.113.64/27\n\n              - sequence: 30\n                action: permit\n                prefix: 203.0.113.96/27\n          - name: AllowPrefix2Stub\n            description: allow other engineering IPv4 network\n    state: replaced\n\n# Task output\n# -------------\n# before:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 192.0.2.0/23\n#             eq: 24\n#           - sequence: 20\n#             action: permit\n#             prefix: 198.51.100.128/26\n#         name: AllowPrefix\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n#\n# commands:\n#   - \"no ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\"\n#   - \"ip prefix-list AllowPrefix seq 10 permit 203.0.113.64/27\"\n#   - \"ip prefix-list AllowPrefix seq 30 permit 203.0.113.96/27\"\n#   - \"no ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\"\n#   - \"ip prefix-list AllowPrefix2Stub description allow other engineering IPv4 network\"\n#\n# after:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 203.0.113.64/27\n#           - sequence: 30\n#             action: permit\n#             prefix: 203.0.113.96/27\n#          name: AllowPrefix\n#       - description: allow other engineering IPv4 network\n#         name: AllowPrefix2Stub\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n#\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 203.0.113.64/27\n# ip prefix-list AllowPrefix seq 30 permit 203.0.113.96/27\n# ip prefix-list AllowPrefix2Stub description allow other engineering IPv4 network\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n# Using overridden\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\n# ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n- name: Override all prefix-lists configuration with provided configuration\n  cisco.nxos.nxos_prefix_lists: &id003\n    config:\n      - afi: ipv4\n        prefix_lists:\n          - name: AllowPrefix\n            description: allows engineering IPv4 networks\n            entries:\n              - sequence: 10\n                action: permit\n                prefix: 203.0.113.64/27\n\n              - sequence: 30\n                action: permit\n                prefix: 203.0.113.96/27\n          - name: AllowPrefix2Stub\n            description: allow other engineering IPv4 network\n    state: overridden\n\n# Task output\n# -------------\n# before:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 192.0.2.0/23\n#             eq: 24\n#           - sequence: 20\n#             action: permit\n#             prefix: 198.51.100.128/26\n#         name: AllowPrefix\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n#\n# commands:\n#   - \"no ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\"\n#   - \"ip prefix-list AllowPrefix seq 10 permit 203.0.113.64/27\"\n#   - \"ip prefix-list AllowPrefix seq 30 permit 203.0.113.96/27\"\n#   - \"no ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\"\n#   - \"ip prefix-list AllowPrefix2Stub description allow other engineering IPv4 network\"\n#   - \"no ip prefix-list DenyPrefix\"\n#   - \"no ipv6 prefix-list AllowIPv6Prefix\"\n#\n# after:\n#   - afi: ipv4\n#     prefix_lists:\n#       - name: AllowPrefix\n#         description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 203.0.113.64/27\n#\n#           - sequence: 30\n#             action: permit\n#             prefix: 203.0.113.96/27\n#       - name: AllowPrefix2Stub\n#         description: allow other engineering IPv4 network\n#\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 203.0.113.64/27\n# ip prefix-list AllowPrefix seq 30 permit 203.0.113.96/27\n# ip prefix-list AllowPrefix2Stub description allow other engineering IPv4 network\n\n# Using deleted to delete a all prefix lists for an AFI\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\n# ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n- name: Delete all prefix-lists for an AFI\n  cisco.nxos.nxos_prefix_lists:\n    config:\n      - afi: ipv4\n    state: deleted\n  register: result\n\n# Task output\n# -------------\n# before:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 192.0.2.0/23\n#             eq: 24\n#           - sequence: 20\n#             action: permit\n#             prefix: 198.51.100.128/26\n#         name: AllowPrefix\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n#\n# commands:\n#   - \"no ip prefix-list AllowPrefix\"\n#   - \"no ip prefix-list DenyPrefix\"\n#\n# after:\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n#\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n# Using deleted to delete a single prefix-list\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\n# ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n- name: Delete a single prefix-list\n  cisco.nxos.nxos_prefix_lists:\n    config:\n      - afi: ipv4\n        prefix_lists:\n          - name: AllowPrefix\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 192.0.2.0/23\n#             eq: 24\n#           - sequence: 20\n#             action: permit\n#             prefix: 198.51.100.128/26\n#         name: AllowPrefix\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n#\n# commands:\n#   - \"no ip prefix-list AllowPrefix\"\n#\n# after:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n#\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n# Using deleted to delete all prefix-lists from the device\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\n# ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n- name: Delete all prefix-lists\n  cisco.nxos.nxos_prefix_lists:\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 192.0.2.0/23\n#             eq: 24\n#           - sequence: 20\n#             action: permit\n#             prefix: 198.51.100.128/26\n#         name: AllowPrefix\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n#\n# commands:\n#   - \"no ip prefix-list AllowPrefix\"\n#   - \"no ip prefix-list DenyPrefix\"\n#   - \"no ipv6 prefix-list AllowIPv6Prefix\"\n#\n# after: []\n#\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section 'ip(.*) prefix-list'\n# nxos-9k-rdo#\n\n# Using rendered\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_prefix_lists: &id001\n    config:\n      - afi: ipv4\n        prefix_lists:\n          - name: AllowPrefix\n            description: allows engineering IPv4 networks\n            entries:\n              - sequence: 10\n                action: permit\n                prefix: 192.0.2.0/23\n                eq: 24\n              - sequence: 20\n                action: permit\n                prefix: 198.51.100.128/26\n          - name: DenyPrefix\n            description: denies lab IPv4 networks\n            entries:\n              - sequence: 20\n                action: deny\n                prefix: 203.0.113.0/24\n                le: 25\n\n      - afi: ipv6\n        prefix_lists:\n          - name: AllowIPv6Prefix\n            description: allows engineering IPv6 networks\n            entries:\n              - sequence: 8\n                action: permit\n                prefix: \"2001:db8:400::/38\"\n              - sequence: 20\n                action: permit\n                prefix: \"2001:db8:8000::/35\"\n                le: 37\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n# rendered:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 192.0.2.0/23\n#             eq: 24\n#           - sequence: 20\n#             action: permit\n#             prefix: 198.51.100.128/26\n#         name: AllowPrefix\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# ip prefix-list AllowPrefix description allows engineering IPv4 networks\n# ip prefix-list AllowPrefix seq 10 permit 192.0.2.0/23 eq 24\n# ip prefix-list AllowPrefix seq 20 permit 198.51.100.128/26\n# ip prefix-list DenyPrefix description denies lab IPv4 networks\n# ip prefix-list DenyPrefix seq 20 deny 203.0.113.0/24 le 25\n# ipv6 prefix-list AllowIPv6Prefix description allows engineering IPv6 networks\n# ipv6 prefix-list AllowIPv6Prefix seq 8 permit 2001:db8:400::/38\n# ipv6 prefix-list AllowIPv6Prefix seq 20 permit 2001:db8:8000::/35 le 37\n\n- name: Parse externally provided prefix-lists configuration\n  register: result\n  cisco.nxos.nxos_prefix_lists:\n    running_config: \"{{ lookup('file', './parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n# parsed:\n#   - afi: ipv4\n#     prefix_lists:\n#       - description: allows engineering IPv4 networks\n#         entries:\n#           - sequence: 10\n#             action: permit\n#             prefix: 192.0.2.0/23\n#             eq: 24\n#           - sequence: 20\n#             action: permit\n#             prefix: 198.51.100.128/26\n#         name: AllowPrefix\n#       - description: denies lab IPv4 networks\n#         entries:\n#           - sequence: 20\n#             action: deny\n#             prefix: 203.0.113.0/24\n#             le: 25\n#         name: DenyPrefix\n#\n#   - afi: ipv6\n#     prefix_lists:\n#       - description: allows engineering IPv6 networks\n#         entries:\n#           - sequence: 8\n#             action: permit\n#             prefix: \"2001:db8:400::/38\"\n#           - sequence: 20\n#             action: permit\n#             prefix: \"2001:db8:8000::/35\"\n#             le: 37\n#         name: AllowIPv6Prefix\n"
  },
  "cisco.nxos.nxos_reboot": {
    "doc": {
      "description": "Reboot a network device.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nThe module will fail due to timeout issues, but the reboot will be performed anyway.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "confirm": {
          "aliases": [],
          "description": "Safeguard boolean. Set to true if you're sure you want to reboot.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Reboot a network device.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_reboot:\n    confirm: true\n"
  },
  "cisco.nxos.nxos_rollback": {
    "doc": {
      "description": "This module offers the ability to set a configuration checkpoint file or rollback to a configuration checkpoint file on Cisco NXOS switches.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nSometimes C(transport=nxapi) may cause a timeout error.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "checkpoint_file": {
          "aliases": [],
          "description": "Name of checkpoint file to create. Mutually exclusive with rollback_to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rollback_to": {
          "aliases": [],
          "description": "Name of checkpoint file to rollback to. Mutually exclusive with checkpoint_file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Set a checkpoint or rollback to a checkpoint.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_rollback:\n    checkpoint_file: backup.cfg\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n    host: '{{ inventory_hostname }}'\n- cisco.nxos.nxos_rollback:\n    rollback_to: backup.cfg\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n    host: '{{ inventory_hostname }}'\n"
  },
  "cisco.nxos.nxos_route_maps": {
    "doc": {
      "description": "This module manages route maps configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 9.3.6.\nUnsupported for Cisco MDS\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of route-map configuration.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "entries": {
              "aliases": [],
              "description": "List of entries (identified by sequence number) for this route-map.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "action": {
                  "aliases": [],
                  "description": "Route map denies or permits set operations.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "deny",
                    "permit"
                  ],
                  "suboptions": {}
                },
                "continue_sequence": {
                  "aliases": [],
                  "description": "Continue on a different entry within the route-map.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "description": {
                  "aliases": [],
                  "description": "Description of the route-map.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "match": {
                  "aliases": [],
                  "description": "Match values from routing table.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "as_number": {
                      "aliases": [],
                      "description": "Match BGP peer AS number.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "as_path_list": {
                          "aliases": [],
                          "description": "AS path access list name.",
                          "type": "list",
                          "required": false,
                          "elements": "str",
                          "suboptions": {}
                        },
                        "asn": {
                          "aliases": [],
                          "description": "AS number.",
                          "type": "list",
                          "required": false,
                          "elements": "str",
                          "suboptions": {}
                        }
                      }
                    },
                    "as_path": {
                      "aliases": [],
                      "description": "Match BGP AS path access-list.",
                      "type": "list",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    },
                    "community": {
                      "aliases": [],
                      "description": "Match BGP community list.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "community_list": {
                          "aliases": [],
                          "description": "Community list.",
                          "type": "list",
                          "required": false,
                          "elements": "str",
                          "suboptions": {}
                        },
                        "exact_match": {
                          "aliases": [],
                          "description": "Do exact matching of communities.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "evpn": {
                      "aliases": [],
                      "description": "Match BGP EVPN Routes.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "route_types": {
                          "aliases": [],
                          "description": "Match route type for evpn route.",
                          "type": "list",
                          "required": false,
                          "elements": "str",
                          "suboptions": {}
                        }
                      }
                    },
                    "extcommunity": {
                      "aliases": [],
                      "description": "Match BGP community list.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "exact_match": {
                          "aliases": [],
                          "description": "Do exact matching of extended communities.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "extcommunity_list": {
                          "aliases": [],
                          "description": "Extended Community list.",
                          "type": "list",
                          "required": false,
                          "elements": "str",
                          "suboptions": {}
                        }
                      }
                    },
                    "interfaces": {
                      "aliases": [],
                      "description": "Match first hop interface of route.",
                      "type": "list",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    },
                    "ip": {
                      "aliases": [],
                      "description": "Configure IP specific information.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "address": {
                          "aliases": [],
                          "description": "Match address of route or match packet.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "access_list": {
                              "aliases": [],
                              "description": "IP access-list name (for use in route-maps for PBR only).",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "prefix_lists": {
                              "aliases": [],
                              "description": "Match entries of prefix-lists.",
                              "type": "list",
                              "required": false,
                              "elements": "str",
                              "suboptions": {}
                            }
                          }
                        },
                        "multicast": {
                          "aliases": [],
                          "description": "Match multicast attributes.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "group": {
                              "aliases": [],
                              "description": "Multicast Group prefix.\nMutually exclusive with group_range.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "prefix": {
                                  "aliases": [],
                                  "description": "IPv4 group prefix.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "group_range": {
                              "aliases": [],
                              "description": "Multicast Group address range.\nMutually exclusive with group.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "first": {
                                  "aliases": [],
                                  "description": "First Group address.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "last": {
                                  "aliases": [],
                                  "description": "Last Group address.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "rp": {
                              "aliases": [],
                              "description": "Rendezvous point.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "prefix": {
                                  "aliases": [],
                                  "description": "IPv4 rendezvous prefix.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "rp_type": {
                                  "aliases": [],
                                  "description": "Multicast rendezvous point type.",
                                  "type": "str",
                                  "required": false,
                                  "choices": [
                                    "ASM",
                                    "Bidir"
                                  ],
                                  "suboptions": {}
                                }
                              }
                            },
                            "source": {
                              "aliases": [],
                              "description": "Multicast source address.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "next_hop": {
                          "aliases": [],
                          "description": "Match next-hop address of route.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "prefix_lists": {
                              "aliases": [],
                              "description": "Match entries of prefix-lists.",
                              "type": "list",
                              "required": false,
                              "elements": "str",
                              "suboptions": {}
                            }
                          }
                        },
                        "route_source": {
                          "aliases": [],
                          "description": "Match advertising source address of route.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "prefix_lists": {
                              "aliases": [],
                              "description": "Match entries of prefix-lists.",
                              "type": "list",
                              "required": false,
                              "elements": "str",
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "ipv6": {
                      "aliases": [],
                      "description": "Configure IPv6 specific information.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "address": {
                          "aliases": [],
                          "description": "Match address of route or match packet.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "access_list": {
                              "aliases": [],
                              "description": "IP access-list name (for use in route-maps for PBR only).",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "prefix_lists": {
                              "aliases": [],
                              "description": "Match entries of prefix-lists.",
                              "type": "list",
                              "required": false,
                              "elements": "str",
                              "suboptions": {}
                            }
                          }
                        },
                        "multicast": {
                          "aliases": [],
                          "description": "Match multicast attributes.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "group": {
                              "aliases": [],
                              "description": "Multicast Group prefix.\nMutually exclusive with group_range.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "prefix": {
                                  "aliases": [],
                                  "description": "IPv4 group prefix.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "group_range": {
                              "aliases": [],
                              "description": "Multicast Group address range.\nMutually exclusive with group.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "first": {
                                  "aliases": [],
                                  "description": "First Group address.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "last": {
                                  "aliases": [],
                                  "description": "Last Group address.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                }
                              }
                            },
                            "rp": {
                              "aliases": [],
                              "description": "Rendezvous point.",
                              "type": "dict",
                              "required": false,
                              "suboptions": {
                                "prefix": {
                                  "aliases": [],
                                  "description": "IPv4 rendezvous prefix.",
                                  "type": "str",
                                  "required": false,
                                  "suboptions": {}
                                },
                                "rp_type": {
                                  "aliases": [],
                                  "description": "Multicast rendezvous point type.",
                                  "type": "str",
                                  "required": false,
                                  "choices": [
                                    "ASM",
                                    "Bidir"
                                  ],
                                  "suboptions": {}
                                }
                              }
                            },
                            "source": {
                              "aliases": [],
                              "description": "Multicast source address.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "next_hop": {
                          "aliases": [],
                          "description": "Match next-hop address of route.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "prefix_lists": {
                              "aliases": [],
                              "description": "Match entries of prefix-lists.",
                              "type": "list",
                              "required": false,
                              "elements": "str",
                              "suboptions": {}
                            }
                          }
                        },
                        "route_source": {
                          "aliases": [],
                          "description": "Match advertising source address of route.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "prefix_lists": {
                              "aliases": [],
                              "description": "Match entries of prefix-lists.",
                              "type": "list",
                              "required": false,
                              "elements": "str",
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "mac_list": {
                      "aliases": [],
                      "description": "Match entries of mac-lists.",
                      "type": "list",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    },
                    "metric": {
                      "aliases": [],
                      "description": "Match metric of route.",
                      "type": "list",
                      "required": false,
                      "elements": "int",
                      "suboptions": {}
                    },
                    "ospf_area": {
                      "aliases": [],
                      "description": "Match ospf area.",
                      "type": "list",
                      "required": false,
                      "elements": "int",
                      "suboptions": {}
                    },
                    "route_types": {
                      "aliases": [],
                      "description": "Match route-type of route.",
                      "type": "list",
                      "required": false,
                      "choices": [
                        "external",
                        "inter-area",
                        "internal",
                        "intra-area",
                        "level-1",
                        "level-2",
                        "local",
                        "nssa-external",
                        "type-1",
                        "type-2"
                      ],
                      "elements": "str",
                      "suboptions": {}
                    },
                    "source_protocol": {
                      "aliases": [],
                      "description": "Match source protocol.",
                      "type": "list",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    },
                    "tags": {
                      "aliases": [],
                      "description": "Match tag of route.",
                      "type": "list",
                      "required": false,
                      "elements": "int",
                      "suboptions": {}
                    }
                  }
                },
                "sequence": {
                  "aliases": [],
                  "description": "Sequence to insert to/delete from existing route-map entry.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "set": {
                  "aliases": [],
                  "description": "Set values in destination routing protocol.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "as_path": {
                      "aliases": [],
                      "description": "Prepend string for a BGP AS-path attribute.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "prepend": {
                          "aliases": [],
                          "description": "Prepend to the AS-Path.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "as_number": {
                              "aliases": [],
                              "description": "AS number.",
                              "type": "list",
                              "required": false,
                              "elements": "str",
                              "suboptions": {}
                            },
                            "last_as": {
                              "aliases": [],
                              "description": "Number of last-AS prepends.",
                              "type": "int",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "tag": {
                          "aliases": [],
                          "description": "Set the tag as an AS-path attribute.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "comm_list": {
                      "aliases": [],
                      "description": "Set BGP community list (for deletion).",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "community": {
                      "aliases": [],
                      "description": "Set BGP community attribute.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "additive": {
                          "aliases": [],
                          "description": "Add to existing community.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "graceful_shutdown": {
                          "aliases": [],
                          "description": "Graceful Shutdown (well-known community).",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "internet": {
                          "aliases": [],
                          "description": "Internet (well-known community).",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "local_as": {
                          "aliases": [],
                          "description": "Do not send outside local AS (well-known community).",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "no_advertise": {
                          "aliases": [],
                          "description": "Do not advertise to any peer (well-known community).",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "no_export": {
                          "aliases": [],
                          "description": "Do not export to next AS (well-known community).",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "number": {
                          "aliases": [],
                          "description": "Community number aa:nn format",
                          "type": "list",
                          "required": false,
                          "elements": "str",
                          "suboptions": {}
                        }
                      }
                    },
                    "dampening": {
                      "aliases": [],
                      "description": "Set BGP route flap dampening parameters.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "half_life": {
                          "aliases": [],
                          "description": "Half-life time for the penalty.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "max_suppress_time": {
                          "aliases": [],
                          "description": "Maximum suppress time for stable route.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "start_reuse_route": {
                          "aliases": [],
                          "description": "Value to start reusing a route.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "start_suppress_route": {
                          "aliases": [],
                          "description": "Value to start suppressing a route.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "distance": {
                      "aliases": [],
                      "description": "Configure administrative distance.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "igp_ebgp_routes": {
                          "aliases": [],
                          "description": "Administrative distance for IGP or EBGP routes",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "internal_routes": {
                          "aliases": [],
                          "description": "Distance for internal routes.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "local_routes": {
                          "aliases": [],
                          "description": "Distance for local routes.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "evpn": {
                      "aliases": [],
                      "description": "Set BGP EVPN Routes.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "gateway_ip": {
                          "aliases": [],
                          "description": "Set gateway IP for type 5 EVPN routes.\nCannot set ip and use-nexthop in the same route-map sequence.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "ip": {
                              "aliases": [],
                              "description": "Gateway IP address.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            },
                            "use_nexthop": {
                              "aliases": [],
                              "description": "Use nexthop address as gateway IP.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "extcomm_list": {
                      "aliases": [],
                      "description": "Set BGP extcommunity list (for deletion).",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "forwarding_address": {
                      "aliases": [],
                      "description": "Set the forwarding address.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "ip": {
                      "aliases": [],
                      "description": "Configure IP features.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "address": {
                          "aliases": [],
                          "description": "Specify IP address.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "prefix_list": {
                              "aliases": [],
                              "description": "Name of prefix list (Max Size 63).",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "precedence": {
                          "aliases": [],
                          "description": "Set precedence field.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "ipv6": {
                      "aliases": [],
                      "description": "Configure IPv6 features.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "address": {
                          "aliases": [],
                          "description": "Specify IP address.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "prefix_list": {
                              "aliases": [],
                              "description": "Name of prefix list (Max Size 63).",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        },
                        "precedence": {
                          "aliases": [],
                          "description": "Set precedence field.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "label_index": {
                      "aliases": [],
                      "description": "Set Segment Routing (SR) label index of route.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "level": {
                      "aliases": [],
                      "description": "Where to import route.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "level-1",
                        "level-1-2",
                        "level-2"
                      ],
                      "suboptions": {}
                    },
                    "local_preference": {
                      "aliases": [],
                      "description": "BGP local preference path attribute.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "metric": {
                      "aliases": [],
                      "description": "Set metric for destination routing protocol.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "bandwidth": {
                          "aliases": [],
                          "description": "Metric value or Bandwidth in Kbits per second (Max Size 11).",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "igrp_delay_metric": {
                          "aliases": [],
                          "description": "IGRP delay metric.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "igrp_effective_bandwidth_metric": {
                          "aliases": [],
                          "description": "IGRP Effective bandwidth metric (Loading) 255 is 100%.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "igrp_mtu": {
                          "aliases": [],
                          "description": "IGRP MTU of the path.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "igrp_reliability_metric": {
                          "aliases": [],
                          "description": "IGRP reliability metric where 255 is 100 percent reliable.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "metric_type": {
                      "aliases": [],
                      "description": "Type of metric for destination routing protocol.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "external",
                        "internal",
                        "type-1",
                        "type-2"
                      ],
                      "suboptions": {}
                    },
                    "nssa_only": {
                      "aliases": [],
                      "description": "OSPF NSSA Areas.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "null_interface": {
                      "aliases": [],
                      "description": "Output Null interface.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "origin": {
                      "aliases": [],
                      "description": "BGP origin code.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "egp",
                        "igp",
                        "incomplete"
                      ],
                      "suboptions": {}
                    },
                    "path_selection": {
                      "aliases": [],
                      "description": "Path selection criteria for BGP.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "all",
                        "backup",
                        "best2",
                        "multipaths"
                      ],
                      "suboptions": {}
                    },
                    "tag": {
                      "aliases": [],
                      "description": "Tag value for destination routing protocol.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "weight": {
                      "aliases": [],
                      "description": "BGP weight for routing table.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "route_map": {
              "aliases": [],
              "description": "Route-map name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^route-map').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nWith state I(replaced), for the listed route-maps, sequences that are in running-config but not in the task are negated.\nWith state I(overridden), all route-maps that are in running-config but not in the task are negated.\nPlease refer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Route Maps resource module.",
      "version_added": "2.2.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# nxos-9k-rdo# show running-config | section \"^route-map\"\n# nxos-9k-rdo#\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_route_maps:\n    config:\n      - route_map: rmap1\n        entries:\n          - sequence: 10\n            action: permit\n            description: rmap1-10-permit\n            match:\n              ip:\n                address:\n                  access_list: acl_1\n              as_path: Allow40\n              as_number:\n                asn: 65564\n\n          - sequence: 20\n            action: deny\n            description: rmap1-20-deny\n            match:\n              community:\n                community_list:\n                  - BGPCommunity1\n                  - BGPCommunity2\n              ip:\n                address:\n                  prefix_lists:\n                    - AllowPrefix1\n                    - AllowPrefix2\n            set:\n              dampening:\n                half_life: 30\n                start_reuse_route: 1500\n                start_suppress_route: 10000\n                max_suppress_time: 120\n\n      - route_map: rmap2\n        entries:\n          - sequence: 20\n            action: permit\n            description: rmap2-20-permit\n            continue_sequence: 40\n            match:\n              ipv6:\n                address:\n                  prefix_lists: AllowIPv6Prefix\n              interfaces: \"{{ nxos_int1 }}\"\n            set:\n              as_path:\n                prepend:\n                  as_number:\n                    - 65563\n                    - 65568\n                    - 65569\n              comm_list: BGPCommunity\n\n          - sequence: 40\n            action: deny\n            description: rmap2-40-deny\n            match:\n              route_types:\n                - level-1\n                - level-2\n              tags: 2\n              ip:\n                multicast:\n                  rp:\n                    prefix: 192.0.2.0/24\n                    rp_type: ASM\n                  source: 203.0.113.0/24\n                  group_range:\n                    first: 239.0.0.1\n                    last: 239.255.255.255\n    state: merged\n\n# Task output\n# -------------\n#  before: []\n#\n#  commands:\n#    - \"route-map rmap1 permit 10\"\n#    - \"match as-number 65564\"\n#    - \"match as-path Allow40\"\n#    - \"match ip address acl_1\"\n#    - \"description rmap1-10-permit\"\n#    - \"route-map rmap1 deny 20\"\n#    - \"match community BGPCommunity1 BGPCommunity2\"\n#    - \"match ip address prefix-list AllowPrefix1 AllowPrefix2\"\n#    - \"description rmap1-20-deny\"\n#    - \"set dampening 30 1500 10000 120\"\n#    - \"route-map rmap2 permit 20\"\n#    - \"match interface Ethernet1/1\"\n#    - \"match ipv6 address prefix-list AllowIPv6Prefix\"\n#    - \"set as-path prepend 65563 65568 65569\"\n#    - \"description rmap2-20-permit\"\n#    - \"continue 40\"\n#    - \"set comm-list BGPCommunity delete\"\n#    - \"route-map rmap2 deny 40\"\n#    - \"match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\"\n#    - \"match route-type level-1 level-2\"\n#    - \"match tag 2\"\n#    - \"description rmap2-40-deny\"\n#\n#  after:\n#   - route_map: rmap1\n#     entries:\n#     - action: permit\n#       description: rmap1-10-permit\n#       match:\n#         as_number:\n#           asn:\n#           - '65564'\n#         as_path:\n#           - Allow40\n#         ip:\n#           address:\n#             access_list: acl_1\n#       sequence: 10\n#\n#     - action: deny\n#       description: rmap1-20-deny\n#       match:\n#         community:\n#           community_list:\n#           - BGPCommunity1\n#           - BGPCommunity2\n#         ip:\n#           address:\n#             prefix_lists:\n#             - AllowPrefix1\n#             - AllowPrefix2\n#       sequence: 20\n#       set:\n#         dampening:\n#           half_life: 30\n#           max_suppress_time: 120\n#           start_reuse_route: 1500\n#           start_suppress_route: 10000\n#\n#   - route_map: rmap2\n#     entries:\n#     - action: permit\n#       continue_sequence: 40\n#       description: rmap2-20-permit\n#       match:\n#         interfaces:\n#         - Ethernet1/1\n#         ipv6:\n#           address:\n#             prefix_lists:\n#             - AllowIPv6Prefix\n#         sequence: 20\n#         set:\n#           as_path:\n#             prepend:\n#               as_number:\n#               - '65563'\n#               - '65568'\n#               - '65569'\n#           comm_list: BGPCommunity\n#\n#     - action: deny\n#       description: rmap2-40-deny\n#       match:\n#         ip:\n#           multicast:\n#             group_range:\n#               first: 239.0.0.1\n#               last: 239.255.255.255\n#             rp:\n#               prefix: 192.0.2.0/24\n#               rp_type: ASM\n#             source: 203.0.113.0/24\n#         route_types:\n#         - level-1\n#         - level-2\n#         tags:\n#         - 2\n#       sequence: 40\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^route-map\"\n# route-map rmap1 permit 10\n#   match as-number 65564\n#   match as-path Allow40\n#   match ip address acl_1\n#   description rmap1-10-permit\n# route-map rmap1 deny 20\n#   match community BGPCommunity1 BGPCommunity2\n#   match ip address prefix-list AllowPrefix1 AllowPrefix2\n#   description rmap1-20-deny\n#   set dampening 30 1500 10000 120\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n# route-map rmap2 deny 40\n#   match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\n#   match route-type level-1 level-2\n#   match tag 2\n#   description rmap2-40-deny\n\n# Using replaced\n# (for the listed route-map(s), sequences that are in running-config but not in the task are negated)\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^route-map\"\n# route-map rmap1 permit 10\n#   match as-number 65564\n#   match as-path Allow40\n#   match ip address acl_1\n#   description rmap1-10-permit\n# route-map rmap1 deny 20\n#   match community BGPCommunity1 BGPCommunity2\n#   match ip address prefix-list AllowPrefix1 AllowPrefix2\n#   description rmap1-20-deny\n#   set dampening 30 1500 10000 120\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n# route-map rmap2 deny 40\n#   match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\n#   match route-type level-1 level-2\n#   match tag 2\n#   description rmap2-40-deny\n\n- name: Replace route-maps configurations of listed route-maps with provided configurations\n  cisco.nxos.nxos_route_maps:\n    config:\n      - route_map: rmap1\n        entries:\n          - sequence: 20\n            action: deny\n            description: rmap1-20-deny\n            match:\n              community:\n                community_list:\n                  - BGPCommunity4\n                  - BGPCommunity5\n              ip:\n                address:\n                  prefix_lists:\n                    - AllowPrefix1\n            set:\n              community:\n                local_as: True\n    state: replaced\n\n# Task output\n# -------------\n#  before:\n#   - route_map: rmap1\n#     entries:\n#     - action: permit\n#       description: rmap1-10-permit\n#       match:\n#         as_number:\n#           asn:\n#           - '65564'\n#         as_path:\n#           - Allow40\n#         ip:\n#           address:\n#             access_list: acl_1\n#       sequence: 10\n#\n#     - action: deny\n#       description: rmap1-20-deny\n#       match:\n#         community:\n#           community_list:\n#           - BGPCommunity1\n#           - BGPCommunity2\n#         ip:\n#           address:\n#             prefix_lists:\n#             - AllowPrefix1\n#             - AllowPrefix2\n#       sequence: 20\n#       set:\n#         dampening:\n#           half_life: 30\n#           max_suppress_time: 120\n#           start_reuse_route: 1500\n#           start_suppress_route: 10000\n#\n#   - route_map: rmap2\n#     entries:\n#     - action: permit\n#       continue_sequence: 40\n#       description: rmap2-20-permit\n#       match:\n#         interfaces:\n#         - Ethernet1/1\n#         ipv6:\n#           address:\n#             prefix_lists:\n#             - AllowIPv6Prefix\n#         sequence: 20\n#         set:\n#           as_path:\n#             prepend:\n#               as_number:\n#               - '65563'\n#               - '65568'\n#               - '65569'\n#           comm_list: BGPCommunity\n#\n#     - action: deny\n#       description: rmap2-40-deny\n#       match:\n#         ip:\n#           multicast:\n#             group_range:\n#               first: 239.0.0.1\n#               last: 239.255.255.255\n#             rp:\n#               prefix: 192.0.2.0/24\n#               rp_type: ASM\n#             source: 203.0.113.0/24\n#         route_types:\n#         - level-1\n#         - level-2\n#         tags:\n#         - 2\n#       sequence: 40\n#\n#  commands:\n#    - no route-map rmap1 permit 10\n#    - route-map rmap1 deny 20\n#    - no match community BGPCommunity1 BGPCommunity2\n#    - match community BGPCommunity4 BGPCommunity5\n#    - no match ip address prefix-list AllowPrefix1 AllowPrefix2\n#    - match ip address prefix-list AllowPrefix1\n#    - no set dampening 30 1500 10000 120\n#    - set community local-AS\n#\n#  after:\n#    - route_map: rmap1\n#      entries:\n#        - sequence: 20\n#          action: deny\n#          description: rmap1-20-deny\n#          match:\n#            community:\n#              community_list:\n#                - BGPCommunity4\n#                - BGPCommunity5\n#            ip:\n#              address:\n#                prefix_lists:\n#                  - AllowPrefix1\n#          set:\n#            community:\n#              local_as: True\n#\n#    - route_map: rmap2\n#      entries:\n#        - action: permit\n#          continue_sequence: 40\n#          description: rmap2-20-permit\n#          match:\n#            interfaces:\n#            - Ethernet1/1\n#            ipv6:\n#              address:\n#                prefix_lists:\n#                - AllowIPv6Prefix\n#          sequence: 20\n#          set:\n#            as_path:\n#              prepend:\n#                as_number:\n#                - '65563'\n#                - '65568'\n#                - '65569'\n#            comm_list: BGPCommunity\n#\n#        - action: deny\n#          description: rmap2-40-deny\n#          match:\n#            ip:\n#              multicast:\n#                group_range:\n#                  first: 239.0.0.1\n#                  last: 239.255.255.255\n#                rp:\n#                  prefix: 192.0.2.0/24\n#                  rp_type: ASM\n#                source: 203.0.113.0/24\n#            route_types:\n#            - level-1\n#            - level-2\n#            tags:\n#            - 2\n#          sequence: 40\n#\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^route-map\"\n# route-map rmap1 deny 20\n#   description rmap1-20-deny\n#   match community BGPCommunity4 BGPCommunity5\n#   match ip address prefix-list AllowPrefix1\n#   set community local-AS\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n# route-map rmap2 deny 40\n#   match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\n#   match route-type level-1 level-2\n#   match tag 2\n#   description rmap2-40-deny\n\n# Using overridden\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^route-map\"\n# route-map rmap1 permit 10\n#   match as-number 65564\n#   match as-path Allow40\n#   match ip address acl_1\n#   description rmap1-10-permit\n# route-map rmap1 deny 20\n#   match community BGPCommunity1 BGPCommunity2\n#   match ip address prefix-list AllowPrefix1 AllowPrefix2\n#   description rmap1-20-deny\n#   set dampening 30 1500 10000 120\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n# route-map rmap2 deny 40\n#   match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\n#   match route-type level-1 level-2\n#   match tag 2\n#   description rmap2-40-deny\n\n- name: Override all route-maps configuration with provided configuration\n  cisco.nxos.nxos_route_maps:\n    config:\n      - route_map: rmap1\n        entries:\n          - sequence: 20\n            action: deny\n            description: rmap1-20-deny\n            match:\n              community:\n                community_list:\n                  - BGPCommunity4\n                  - BGPCommunity5\n              ip:\n                address:\n                  prefix_lists:\n                    - AllowPrefix1\n            set:\n              community:\n                local_as: True\n    state: overridden\n\n# Task output\n# -------------\n#  before:\n#   - route_map: rmap1\n#     entries:\n#     - action: permit\n#       description: rmap1-10-permit\n#       match:\n#         as_number:\n#           asn:\n#           - '65564'\n#         as_path:\n#           - Allow40\n#         ip:\n#           address:\n#             access_list: acl_1\n#       sequence: 10\n#\n#     - action: deny\n#       description: rmap1-20-deny\n#       match:\n#         community:\n#           community_list:\n#           - BGPCommunity1\n#           - BGPCommunity2\n#         ip:\n#           address:\n#             prefix_lists:\n#             - AllowPrefix1\n#             - AllowPrefix2\n#       sequence: 20\n#       set:\n#         dampening:\n#           half_life: 30\n#           max_suppress_time: 120\n#           start_reuse_route: 1500\n#           start_suppress_route: 10000\n#\n#   - route_map: rmap2\n#     entries:\n#     - action: permit\n#       continue_sequence: 40\n#       description: rmap2-20-permit\n#       match:\n#         interfaces:\n#         - Ethernet1/1\n#         ipv6:\n#           address:\n#             prefix_lists:\n#             - AllowIPv6Prefix\n#         sequence: 20\n#         set:\n#           as_path:\n#             prepend:\n#               as_number:\n#               - '65563'\n#               - '65568'\n#               - '65569'\n#           comm_list: BGPCommunity\n#\n#     - action: deny\n#       description: rmap2-40-deny\n#       match:\n#         ip:\n#           multicast:\n#             group_range:\n#               first: 239.0.0.1\n#               last: 239.255.255.255\n#             rp:\n#               prefix: 192.0.2.0/24\n#               rp_type: ASM\n#             source: 203.0.113.0/24\n#         route_types:\n#         - level-1\n#         - level-2\n#         tags:\n#         - 2\n#       sequence: 40\n#\n#  commands:\n#    - no route-map rmap1 permit 10\n#    - route-map rmap1 deny 20\n#    - no match community BGPCommunity1 BGPCommunity2\n#    - match community BGPCommunity4 BGPCommunity5\n#    - no match ip address prefix-list AllowPrefix1 AllowPrefix2\n#    - match ip address prefix-list AllowPrefix1\n#    - no set dampening 30 1500 10000 120\n#    - set community local-AS\n#    - no route-map rmap2 permit 20\n#    - no route-map rmap2 deny 40\n#\n#  after:\n#  - route_map: rmap1\n#    entries:\n#    - sequence: 20\n#      action: deny\n#      description: rmap1-20-deny\n#      match:\n#        community:\n#          community_list:\n#          - BGPCommunity4\n#          - BGPCommunity5\n#        ip:\n#          address:\n#            prefix_lists:\n#            - AllowPrefix1\n#      set:\n#        community:\n#          local_as: True\n#\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^route-map\"\n# route-map rmap1 deny 20\n#   description rmap1-20-deny\n#   match community BGPCommunity4 BGPCommunity5\n#   match ip address prefix-list AllowPrefix1\n#   set community local-AS\n\n# Using deleted to delete a single route-map\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^route-map\"\n# route-map rmap1 permit 10\n#   match as-number 65564\n#   match as-path Allow40\n#   match ip address acl_1\n#   description rmap1-10-permit\n# route-map rmap1 deny 20\n#   match community BGPCommunity1 BGPCommunity2\n#   match ip address prefix-list AllowPrefix1 AllowPrefix2\n#   description rmap1-20-deny\n#   set dampening 30 1500 10000 120\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n# route-map rmap2 deny 40\n#   match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\n#   match route-type level-1 level-2\n#   match tag 2\n#   description rmap2-40-deny\n\n- name: Delete single route-map\n  cisco.nxos.nxos_route_maps:\n    config:\n      - route_map: rmap1\n    state: deleted\n\n# Task output\n# -------------\n#  before:\n#   - route_map: rmap1\n#     entries:\n#     - action: permit\n#       description: rmap1-10-permit\n#       match:\n#         as_number:\n#           asn:\n#           - '65564'\n#         as_path:\n#           - Allow40\n#         ip:\n#           address:\n#             access_list: acl_1\n#       sequence: 10\n#\n#     - action: deny\n#       description: rmap1-20-deny\n#       match:\n#         community:\n#           community_list:\n#           - BGPCommunity1\n#           - BGPCommunity2\n#         ip:\n#           address:\n#             prefix_lists:\n#             - AllowPrefix1\n#             - AllowPrefix2\n#       sequence: 20\n#       set:\n#         dampening:\n#           half_life: 30\n#           max_suppress_time: 120\n#           start_reuse_route: 1500\n#           start_suppress_route: 10000\n#\n#   - route_map: rmap2\n#     entries:\n#     - action: permit\n#       continue_sequence: 40\n#       description: rmap2-20-permit\n#       match:\n#         interfaces:\n#         - Ethernet1/1\n#         ipv6:\n#           address:\n#             prefix_lists:\n#             - AllowIPv6Prefix\n#         sequence: 20\n#         set:\n#           as_path:\n#             prepend:\n#               as_number:\n#               - '65563'\n#               - '65568'\n#               - '65569'\n#           comm_list: BGPCommunity\n#\n#     - action: deny\n#       description: rmap2-40-deny\n#       match:\n#         ip:\n#           multicast:\n#             group_range:\n#               first: 239.0.0.1\n#               last: 239.255.255.255\n#             rp:\n#               prefix: 192.0.2.0/24\n#               rp_type: ASM\n#             source: 203.0.113.0/24\n#         route_types:\n#         - level-1\n#         - level-2\n#         tags:\n#         - 2\n#       sequence: 40\n#\n#  commands:\n#    - no route-map rmap1 permit 10\n#    - no route-map rmap1 deny 20\n#\n#  after:\n#   - route_map: rmap2\n#     entries:\n#     - action: permit\n#       continue_sequence: 40\n#       description: rmap2-20-permit\n#       match:\n#         interfaces:\n#         - Ethernet1/1\n#         ipv6:\n#           address:\n#             prefix_lists:\n#             - AllowIPv6Prefix\n#         sequence: 20\n#         set:\n#           as_path:\n#             prepend:\n#               as_number:\n#               - '65563'\n#               - '65568'\n#               - '65569'\n#           comm_list: BGPCommunity\n#\n#     - action: deny\n#       description: rmap2-40-deny\n#       match:\n#         ip:\n#           multicast:\n#             group_range:\n#               first: 239.0.0.1\n#               last: 239.255.255.255\n#             rp:\n#               prefix: 192.0.2.0/24\n#               rp_type: ASM\n#             source: 203.0.113.0/24\n#         route_types:\n#         - level-1\n#         - level-2\n#         tags:\n#         - 2\n#       sequence: 40\n#\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^route-map\"\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n# route-map rmap2 deny 40\n#   match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\n#   match route-type level-1 level-2\n#   match tag 2\n#   description rmap2-40-deny\n\n# Using deleted to delete all route-maps from the device running-config\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^route-map\"\n# route-map rmap1 permit 10\n#   match as-number 65564\n#   match as-path Allow40\n#   match ip address acl_1\n#   description rmap1-10-permit\n# route-map rmap1 deny 20\n#   match community BGPCommunity1 BGPCommunity2\n#   match ip address prefix-list AllowPrefix1 AllowPrefix2\n#   description rmap1-20-deny\n#   set dampening 30 1500 10000 120\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n# route-map rmap2 deny 40\n#   match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\n#   match route-type level-1 level-2\n#   match tag 2\n#   description rmap2-40-deny\n\n- name: Delete all route-maps\n  cisco.nxos.nxos_route_maps:\n    state: deleted\n\n# Task output\n# -------------\n#  before:\n#   - route_map: rmap1\n#     entries:\n#     - action: permit\n#       description: rmap1-10-permit\n#       match:\n#         as_number:\n#           asn:\n#           - '65564'\n#         as_path:\n#           - Allow40\n#         ip:\n#           address:\n#             access_list: acl_1\n#       sequence: 10\n#\n#     - action: deny\n#       description: rmap1-20-deny\n#       match:\n#         community:\n#           community_list:\n#           - BGPCommunity1\n#           - BGPCommunity2\n#         ip:\n#           address:\n#             prefix_lists:\n#             - AllowPrefix1\n#             - AllowPrefix2\n#       sequence: 20\n#       set:\n#         dampening:\n#           half_life: 30\n#           max_suppress_time: 120\n#           start_reuse_route: 1500\n#           start_suppress_route: 10000\n#\n#   - route_map: rmap2\n#     entries:\n#     - action: permit\n#       continue_sequence: 40\n#       description: rmap2-20-permit\n#       match:\n#         interfaces:\n#         - Ethernet1/1\n#         ipv6:\n#           address:\n#             prefix_lists:\n#             - AllowIPv6Prefix\n#         sequence: 20\n#         set:\n#           as_path:\n#             prepend:\n#               as_number:\n#               - '65563'\n#               - '65568'\n#               - '65569'\n#           comm_list: BGPCommunity\n#\n#     - action: deny\n#       description: rmap2-40-deny\n#       match:\n#         ip:\n#           multicast:\n#             group_range:\n#               first: 239.0.0.1\n#               last: 239.255.255.255\n#             rp:\n#               prefix: 192.0.2.0/24\n#               rp_type: ASM\n#             source: 203.0.113.0/24\n#         route_types:\n#         - level-1\n#         - level-2\n#         tags:\n#         - 2\n#       sequence: 40\n#\n#  commands:\n#    - no route-map rmap1 permit 10\n#    - no route-map rmap1 deny 20\n#    - no route-map rmap2 permit 20\n#    - no route-map rmap2 deny 40\n#\n#  after: []\n#\n# After state:\n# ------------\n# nxos-9k-rdo# sh running-config | section \"^route-map\"\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_route_maps:\n    config:\n      - route_map: rmap1\n        entries:\n          - sequence: 10\n            action: permit\n            description: rmap1-10-permit\n            match:\n              ip:\n                address:\n                  access_list: acl_1\n              as_path: Allow40\n              as_number:\n                asn: 65564\n\n          - sequence: 20\n            action: deny\n            description: rmap1-20-deny\n            match:\n              community:\n                community_list:\n                  - BGPCommunity1\n                  - BGPCommunity2\n              ip:\n                address:\n                  prefix_lists:\n                    - AllowPrefix1\n                    - AllowPrefix2\n            set:\n              dampening:\n                half_life: 30\n                start_reuse_route: 1500\n                start_suppress_route: 10000\n                max_suppress_time: 120\n\n      - route_map: rmap2\n        entries:\n          - sequence: 20\n            action: permit\n            description: rmap2-20-permit\n            continue_sequence: 40\n            match:\n              ipv6:\n                address:\n                  prefix_lists: AllowIPv6Prefix\n              interfaces: \"{{ nxos_int1 }}\"\n            set:\n              as_path:\n                prepend:\n                  as_number:\n                    - 65563\n                    - 65568\n                    - 65569\n              comm_list: BGPCommunity\n\n          - sequence: 40\n            action: deny\n            description: rmap2-40-deny\n            match:\n              route_types:\n                - level-1\n                - level-2\n              tags: 2\n              ip:\n                multicast:\n                  rp:\n                    prefix: 192.0.2.0/24\n                    rp_type: ASM\n                  source: 203.0.113.0/24\n                  group_range:\n                    first: 239.0.0.1\n                    last: 239.255.255.255\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n#  rendered:\n#    - \"route-map rmap1 permit 10\"\n#    - \"match as-number 65564\"\n#    - \"match as-path Allow40\"\n#    - \"match ip address acl_1\"\n#    - \"description rmap1-10-permit\"\n#    - \"route-map rmap1 deny 20\"\n#    - \"match community BGPCommunity1 BGPCommunity2\"\n#    - \"match ip address prefix-list AllowPrefix1 AllowPrefix2\"\n#    - \"description rmap1-20-deny\"\n#    - \"set dampening 30 1500 10000 120\"\n#    - \"route-map rmap2 permit 20\"\n#    - \"match interface Ethernet1/1\"\n#    - \"match ipv6 address prefix-list AllowIPv6Prefix\"\n#    - \"set as-path prepend 65563 65568 65569\"\n#    - \"description rmap2-20-permit\"\n#    - \"continue 40\"\n#    - \"set comm-list BGPCommunity delete\"\n#    - \"route-map rmap2 deny 40\"\n#    - \"match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\"\n#    - \"match route-type level-1 level-2\"\n#    - \"match tag 2\"\n#    - \"description rmap2-40-deny\"\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# route-map rmap1 permit 10\n#   match as-number 65564\n#   match as-path Allow40\n#   match ip address acl_1\n#   description rmap1-10-permit\n# route-map rmap1 deny 20\n#   match community BGPCommunity1 BGPCommunity2\n#   match ip address prefix-list AllowPrefix1 AllowPrefix2\n#   description rmap1-20-deny\n#   set dampening 30 1500 10000 120\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n# route-map rmap2 deny 40\n#   match ip multicast source 203.0.113.0/24 group-range 239.0.0.1 to 239.255.255.255 rp 192.0.2.0/24 rp-type ASM\n#   match route-type level-1 level-2\n#   match tag 2\n#   description rmap2-40-deny\n\n- name: Parse externally provided route-maps configuration\n  cisco.nxos.nxos_route_maps:\n    running_config: \"{{ lookup('file', './fixtures/parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n#  parsed:\n#   - route_map: rmap1\n#     entries:\n#     - action: permit\n#       description: rmap1-10-permit\n#       match:\n#         as_number:\n#           asn:\n#           - '65564'\n#         as_path:\n#           - Allow40\n#         ip:\n#           address:\n#             access_list: acl_1\n#       sequence: 10\n#\n#     - action: deny\n#       description: rmap1-20-deny\n#       match:\n#         community:\n#           community_list:\n#           - BGPCommunity1\n#           - BGPCommunity2\n#         ip:\n#           address:\n#             prefix_lists:\n#             - AllowPrefix1\n#             - AllowPrefix2\n#       sequence: 20\n#       set:\n#         dampening:\n#           half_life: 30\n#           max_suppress_time: 120\n#           start_reuse_route: 1500\n#           start_suppress_route: 10000\n#\n#   - route_map: rmap2\n#     entries:\n#     - action: permit\n#       continue_sequence: 40\n#       description: rmap2-20-permit\n#       match:\n#         interfaces:\n#         - Ethernet1/1\n#         ipv6:\n#           address:\n#             prefix_lists:\n#             - AllowIPv6Prefix\n#         sequence: 20\n#         set:\n#           as_path:\n#             prepend:\n#               as_number:\n#               - '65563'\n#               - '65568'\n#               - '65569'\n#           comm_list: BGPCommunity\n#\n#     - action: deny\n#       description: rmap2-40-deny\n#       match:\n#         ip:\n#           multicast:\n#             group_range:\n#               first: 239.0.0.1\n#               last: 239.255.255.255\n#             rp:\n#               prefix: 192.0.2.0/24\n#               rp_type: ASM\n#             source: 203.0.113.0/24\n#         route_types:\n#         - level-1\n#         - level-2\n#         tags:\n#         - 2\n#       sequence: 40\n\n# Using gathered\n\n# Existing route-map config\n# ---------------------------\n# nxos-9k-rdo# show running-config | section \"^route-map\"\n# route-map rmap1 permit 10\n#   match as-number 65564\n#   match as-path Allow40\n#   match ip address acl_1\n#   description rmap1-10-permit\n# route-map rmap2 permit 20\n#   match interface Ethernet1/1\n#   match ipv6 address prefix-list AllowIPv6Prefix\n#   set as-path prepend 65563 65568 65569\n#   description rmap2-20-permit\n#   continue 40\n#   set comm-list BGPCommunity delete\n\n- name: Gather route-maps facts using gathered\n  cisco.nxos.nxos_route_maps:\n    state: gathered\n\n#  gathered:\n#   - route_map: rmap1\n#     entries:\n#     - action: permit\n#       description: rmap1-10-permit\n#       match:\n#         as_number:\n#           asn:\n#           - '65564'\n#         as_path:\n#           - Allow40\n#         ip:\n#           address:\n#             access_list: acl_1\n#       sequence: 10\n#\n#   - route_map: rmap2\n#     entries:\n#     - action: permit\n#       continue_sequence: 40\n#       description: rmap2-20-permit\n#       match:\n#         interfaces:\n#         - Ethernet1/1\n#         ipv6:\n#           address:\n#             prefix_lists:\n#             - AllowIPv6Prefix\n#         sequence: 20\n#         set:\n#           as_path:\n#             prepend:\n#               as_number:\n#               - '65563'\n#               - '65568'\n#               - '65569'\n#           comm_list: BGPCommunity\n#\n"
  },
  "cisco.nxos.nxos_rpm": {
    "doc": {
      "description": "Install software maintenance upgrade (smu) RPMS and 3rd party RPMS on Cisco NX-OS devices.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.0(3)I2(5), 7.0(3)I4(6), 7.0(3)I5(3), 7.0(3)I6(1), 7.0(3)I7(3)\nUnsupported for Cisco MDS\nFor patches, the minimum platform version needed is 7.0(3)I2(5)\nFor feature rpms, the minimum platform version needed is 7.0(3)I6(1)\nThe module manages the entire RPM lifecycle (Add, activate, commit, deactivate, remove)\nFor reload patches, this module is NOT idempotent until the patch is committed.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of RPM/patch definitions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "file_system": {
              "aliases": [],
              "description": "The remote file system of the device. If omitted, devices that support a file_system parameter will use their default values.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "pkg": {
              "aliases": [],
              "description": "Name of the RPM package.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "If the state is present, the rpm will be installed, If the state is absent, it will be removed.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            }
          }
        },
        "file_system": {
          "aliases": [],
          "description": "The remote file system of the device. If omitted, devices that support a file_system parameter will use their default values.",
          "default": "bootflash",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pkg": {
          "aliases": [],
          "description": "Name of the RPM package.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "If the state is present, the rpm will be installed, If the state is absent, it will be removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Install patch or feature rpms on Cisco NX-OS devices.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_rpm:\n    pkg: nxos.sample-n9k_ALL-1.0.0-7.0.3.I7.3.lib32_n9000.rpm\n"
  },
  "cisco.nxos.nxos_smu": {
    "doc": {
      "description": "Perform software maintenance upgrades (SMUs) on Cisco NX-OS devices.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nThe module can only activate and commit a package, not remove or deactivate it.\nUse C(transport=nxapi) to avoid connection timeout\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "file_system": {
          "aliases": [],
          "description": "The remote file system of the device. If omitted, devices that support a file_system parameter will use their default values.",
          "default": "bootflash:",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pkg": {
          "aliases": [],
          "description": "Name of the remote package.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "(deprecated, removed after 2022-10-01) Perform SMUs on Cisco NX-OS devices.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_smu:\n    pkg: nxos.CSCuz65185-n9k_EOR-1.0.0-7.0.3.I2.2d.lib32_n9000.rpm\n"
  },
  "cisco.nxos.nxos_snapshot": {
    "doc": {
      "description": "Create snapshots of the running states of selected features, add new show commands for snapshot creation, delete and compare existing snapshots.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nC(transport=cli) may cause timeout errors.\nThe C(element_key1) and C(element_key2) parameter specify the tags used to distinguish among row entries. In most cases, only the element_key1 parameter needs to specified to be able to distinguish among row entries.\nC(action=compare) will always store a comparison report on a local file.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "action": {
          "aliases": [],
          "description": "Define what snapshot action the module would perform.",
          "type": "str",
          "required": true,
          "choices": [
            "add",
            "compare",
            "create",
            "delete",
            "delete_all"
          ],
          "suboptions": {}
        },
        "compare_option": {
          "aliases": [],
          "description": "Snapshot options to be used when C(action=compare).",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "ipv4routes",
            "ipv6routes"
          ],
          "suboptions": {}
        },
        "comparison_results_file": {
          "aliases": [],
          "description": "Name of the file where snapshots comparison will be stored when C(action=compare).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Snapshot description to be used when C(action=create).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "element_key1": {
          "aliases": [],
          "description": "Specify the tags used to distinguish among row entries, to be used when C(action=add).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "element_key2": {
          "aliases": [],
          "description": "Specify the tags used to distinguish among row entries, to be used when C(action=add).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Specify the path of the file where new created snapshot or snapshots comparison will be stored, to be used when C(action=create) and C(save_snapshot_locally=true) or C(action=compare).",
          "default": "./",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "row_id": {
          "aliases": [],
          "description": "Specifies the tag of each row entry of the show command's XML output, to be used when C(action=add).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "save_snapshot_locally": {
          "aliases": [],
          "description": "Specify to locally store a new created snapshot, to be used when C(action=create).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "section": {
          "aliases": [],
          "description": "Used to name the show command output, to be used when C(action=add).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "show_command": {
          "aliases": [],
          "description": "Specify a new show command, to be used when C(action=add).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot1": {
          "aliases": [],
          "description": "First snapshot to be used when C(action=compare).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot2": {
          "aliases": [],
          "description": "Second snapshot to be used when C(action=compare).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot_name": {
          "aliases": [],
          "description": "Snapshot name, to be used when C(action=create) or C(action=delete).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage snapshots of the running states of selected features.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Create a snapshot and store it locally\n- cisco.nxos.nxos_snapshot:\n    action: create\n    snapshot_name: test_snapshot\n    description: Done with Ansible\n    save_snapshot_locally: true\n    path: /home/user/snapshots/\n\n# Delete a snapshot\n- cisco.nxos.nxos_snapshot:\n    action: delete\n    snapshot_name: test_snapshot\n\n# Delete all existing snapshots\n- cisco.nxos.nxos_snapshot:\n    action: delete_all\n\n# Add a show command for snapshots creation\n- cisco.nxos.nxos_snapshot:\n    section: myshow\n    show_command: show ip interface brief\n    row_id: ROW_intf\n    element_key1: intf-name\n\n# Compare two snapshots\n- cisco.nxos.nxos_snapshot:\n    action: compare\n    snapshot1: pre_snapshot\n    snapshot2: post_snapshot\n    comparison_results_file: compare_snapshots.txt\n    compare_option: summary\n    path: ../snapshot_reports/\n"
  },
  "cisco.nxos.nxos_snmp_community": {
    "doc": {
      "description": "Manages SNMP community configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "access": {
          "aliases": [],
          "description": "Access type for community.",
          "type": "str",
          "required": false,
          "choices": [
            "ro",
            "rw"
          ],
          "suboptions": {}
        },
        "acl": {
          "aliases": [],
          "description": "ACL name to filter snmp requests or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "community": {
          "aliases": [],
          "description": "Case-sensitive community string.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Group to which the community belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2024-01-01) Manages SNMP community configs.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ensure snmp community is configured\n- cisco.nxos.nxos_snmp_community:\n    community: TESTING7\n    group: network-operator\n    state: present\n"
  },
  "cisco.nxos.nxos_snmp_contact": {
    "doc": {
      "description": "Manages SNMP contact information.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nC(state=absent) removes the contact configuration if it is configured.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "contact": {
          "aliases": [],
          "description": "Contact information.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2024-01-01) Manages SNMP contact info.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ensure snmp contact is configured\n- cisco.nxos.nxos_snmp_contact:\n    contact: Test\n    state: present\n"
  },
  "cisco.nxos.nxos_snmp_host": {
    "doc": {
      "description": "Manages SNMP host configuration parameters.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nC(state=absent) removes the host configuration if it is configured.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "community": {
          "aliases": [],
          "description": "Community string or v3 username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "snmp_host": {
          "aliases": [],
          "description": "IP address of hostname of target host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "snmp_type": {
          "aliases": [],
          "description": "type of message to send to host. If this is not specified, trap type is used.",
          "type": "str",
          "required": false,
          "choices": [
            "trap",
            "inform"
          ],
          "suboptions": {}
        },
        "src_intf": {
          "aliases": [],
          "description": "Source interface. Must be fully qualified interface name. If state = absent, the interface is removed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource. If state = present, the host is added to the configuration. If only vrf and/or vrf_filter and/or src_intf are given, they will be added to the existing host configuration. If state = absent, the host is removed if community parameter is given. It is possible to remove only vrf and/or src_int and/or vrf_filter by providing only those parameters and no community parameter.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "udp": {
          "aliases": [],
          "description": "UDP port number (0-65535).",
          "default": "162",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "v3": {
          "aliases": [],
          "description": "Use this when verion is v3. SNMPv3 Security level.",
          "type": "str",
          "required": false,
          "choices": [
            "noauth",
            "auth",
            "priv"
          ],
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "SNMP version. If this is not specified, v1 is used.",
          "type": "str",
          "required": false,
          "choices": [
            "v1",
            "v2c",
            "v3"
          ],
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "VRF to use to source traffic to source. If state = absent, the vrf is removed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vrf_filter": {
          "aliases": [],
          "description": "Name of VRF to filter. If state = absent, the vrf is removed from the filter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2024-01-01) Manages SNMP host configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ensure snmp host is configured\n- cisco.nxos.nxos_snmp_host:\n    snmp_host: 192.0.2.3\n    community: TESTING\n    state: present\n"
  },
  "cisco.nxos.nxos_snmp_location": {
    "doc": {
      "description": "Manages SNMP location configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "location": {
          "aliases": [],
          "description": "Location information.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2024-01-01) Manages SNMP location information.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ensure snmp location is configured\n- cisco.nxos.nxos_snmp_location:\n    location: Test\n    state: present\n\n# ensure snmp location is not configured\n- cisco.nxos.nxos_snmp_location:\n    location: Test\n    state: absent\n"
  },
  "cisco.nxos.nxos_snmp_server": {
    "doc": {
      "description": "This module manages SNMP server configuration on devices running Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NX-OS 9.3.6.\nThis module works with connection C(network_cli) and C(httpapi).",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dict of SNMP server configuration",
          "type": "dict",
          "required": false,
          "suboptions": {
            "aaa_user": {
              "aliases": [],
              "description": "Set duration for which aaa-cached snmp user exists.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "cache_timeout": {
                  "aliases": [],
                  "description": "Timeout for which aaa-cached user exists(in secs).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "communities": {
              "aliases": [],
              "description": "Set community string and access privs.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "community": {
                  "aliases": [],
                  "description": "SNMP community string (Max Size 32).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "group": {
                  "aliases": [],
                  "description": "Group to which the community belongs.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "ro": {
                  "aliases": [],
                  "description": "Read-only access with this community string.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "rw": {
                  "aliases": [],
                  "description": "Read-write access with this community string.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "use_ipv4acl": {
                  "aliases": [],
                  "description": "Specify IPv4 ACL, the ACL name specified must be IPv4 ACL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "use_ipv6acl": {
                  "aliases": [],
                  "description": "Specify IPv6 ACL, the ACL name specified after must be IPv6 ACL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "contact": {
              "aliases": [],
              "description": "Modify sysContact.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "context": {
              "aliases": [],
              "description": "SNMP context to be mapped.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "instance": {
                  "aliases": [],
                  "description": "Name of the protocol instance (Max Size 32).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "Name of the SNMP context (Max Size 32).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "topology": {
                  "aliases": [],
                  "description": "Topology associated with the SNMP context.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "vrf": {
                  "aliases": [],
                  "description": "VRF associated with the SNMP context.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "counter": {
              "aliases": [],
              "description": "Configure port counter configuration.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "cache": {
                  "aliases": [],
                  "description": "Port stats cache.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable port stats cache.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "timeout": {
                      "aliases": [],
                      "description": "Timeout for which cached port stats exists(in secs).",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "drop": {
              "aliases": [],
              "description": "Silently drop unknown v3 user packets.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "unknown_engine_id": {
                  "aliases": [],
                  "description": "Unknown v3 engine id.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "unknown_user": {
                  "aliases": [],
                  "description": "Unknown v3 user.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "engine_id": {
              "aliases": [],
              "description": "Configure a local SNMPv3 engineID.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "local": {
                  "aliases": [],
                  "description": "EngineID of the local agent.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "global_enforce_priv": {
              "aliases": [],
              "description": "Globally enforce privacy for all the users.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hosts": {
              "aliases": [],
              "description": "Specify hosts to receive SNMP notifications.\nSNMP hosts config lines that appear separately in running-config must be added as individual dictionaries.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "auth": {
                  "aliases": [],
                  "description": "Use the SNMPv3 authNoPriv Security Level.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "community": {
                  "aliases": [],
                  "description": "SNMP community string or SNMPv3 user name (Max Size 32).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "filter_vrf": {
                  "aliases": [],
                  "description": "Filters notifications to the notification host receiver based on the configured VRF.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "host": {
                  "aliases": [],
                  "description": "IPv4 or IPv6 address or DNS Name of SNMP notification host.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "informs": {
                  "aliases": [],
                  "description": "Send Inform messages to this host.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "priv": {
                  "aliases": [],
                  "description": "Use the SNMPv3 authPriv Security Level.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "source_interface": {
                  "aliases": [],
                  "description": "Source interface to be used for sending out SNMP notifications to this host.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "traps": {
                  "aliases": [],
                  "description": "Send Traps messages to this host.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "udp_port": {
                  "aliases": [],
                  "description": "The notification host's UDP port number.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "use_vrf": {
                  "aliases": [],
                  "description": "Configures SNMP to use the selected VRF to communicate with the host receiver.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "version": {
                  "aliases": [],
                  "description": "SNMP version to use for notification messages.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "1",
                    "2c",
                    "3"
                  ],
                  "suboptions": {}
                }
              }
            },
            "location": {
              "aliases": [],
              "description": "Modify sysLocation.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mib": {
              "aliases": [],
              "description": "Mib access parameters.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "community_map": {
                  "aliases": [],
                  "description": "SNMP community.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "community": {
                      "aliases": [],
                      "description": "SNMP community string (Max Size 32).",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "context": {
                      "aliases": [],
                      "description": "Name of the SNMP context (Max Size 32).",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "packetsize": {
              "aliases": [],
              "description": "Largest SNMP packet size",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Snmp protocol operations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "enable": {
                  "aliases": [],
                  "description": "Enable/Disable snmp protocol operations.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "source_interface": {
              "aliases": [],
              "description": "Source interface to be used for sending out SNMP notifications.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "informs": {
                  "aliases": [],
                  "description": "SNMP Inform notifications for which this source interface needs to be used.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "traps": {
                  "aliases": [],
                  "description": "SNMP Trap notifications for which this source interface needs to be used.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "system_shutdown": {
              "aliases": [],
              "description": "Configure snmp-server for reload(2).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "tcp_session": {
              "aliases": [],
              "description": "Enable one time authentication for snmp over tcp session.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "auth": {
                  "aliases": [],
                  "description": "Enable one time authentication for snmp over tcp session.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "enable": {
                  "aliases": [],
                  "description": "Enable tcp-session.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "traps": {
              "aliases": [],
              "description": "Enable SNMP Traps",
              "type": "dict",
              "required": false,
              "suboptions": {
                "aaa": {
                  "aliases": [],
                  "description": "AAA traps",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable AAA traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "server_state_change": {
                      "aliases": [],
                      "description": "AAA server state change notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bridge": {
                  "aliases": [],
                  "description": "Bridge traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable bridge traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "newroot": {
                      "aliases": [],
                      "description": "Enable SNMP STP Bridge MIB newroot traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "topologychange": {
                      "aliases": [],
                      "description": "Enable SNMP STP Bridge MIB topologychange traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "callhome": {
                  "aliases": [],
                  "description": "Callhome traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable callhome traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "event_notify": {
                      "aliases": [],
                      "description": "Callhome External Event Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "smtp_send_fail": {
                      "aliases": [],
                      "description": "SMTP Message Send Fail notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "cfs": {
                  "aliases": [],
                  "description": "CFS traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable cfs traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "merge_failure": {
                      "aliases": [],
                      "description": "Merge failure notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "state_change_notif": {
                      "aliases": [],
                      "description": "State change notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "config": {
                  "aliases": [],
                  "description": "Config traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "ccmCLIRunningConfigChanged": {
                      "aliases": [],
                      "description": "Running config change trap.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable config traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "entity": {
                  "aliases": [],
                  "description": "Entity traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "cefcMIBEnableStatusNotification": {
                      "aliases": [],
                      "description": "CefcMIBEnableStatusNotification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable entity traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_fan_status_change": {
                      "aliases": [],
                      "description": "Entity Fan Status Change.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_mib_change": {
                      "aliases": [],
                      "description": "Entity MIB change.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_module_inserted": {
                      "aliases": [],
                      "description": "Entity Module Inserted.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_module_removed": {
                      "aliases": [],
                      "description": "Entity Module Removed.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_module_status_change": {
                      "aliases": [],
                      "description": "Entity Module Status Change.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_power_out_change": {
                      "aliases": [],
                      "description": "Entity Power Out Change.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_power_status_change": {
                      "aliases": [],
                      "description": "Entity Power Status Change.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_sensor": {
                      "aliases": [],
                      "description": "Entity sensor.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "entity_unrecognised_module": {
                      "aliases": [],
                      "description": "Entity Unrecognised Module.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "feature_control": {
                  "aliases": [],
                  "description": "Feature-Control traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "ciscoFeatOpStatusChange": {
                      "aliases": [],
                      "description": "Feature operation status change Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable feature-control traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "featureOpStatusChange": {
                      "aliases": [],
                      "description": "Feature operation status change notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "generic": {
                  "aliases": [],
                  "description": "Generic traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "coldStart": {
                      "aliases": [],
                      "description": "Generic coldStart trap.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable generic traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "warmStart": {
                      "aliases": [],
                      "description": "Generic warmStart trap.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "license": {
                  "aliases": [],
                  "description": "License traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable license traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "notify_license_expiry": {
                      "aliases": [],
                      "description": "License Expiry Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "notify_license_expiry_warning": {
                      "aliases": [],
                      "description": "License Expiry Warning Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "notify_licensefile_missing": {
                      "aliases": [],
                      "description": "License File Missing Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "notify_no_license_for_feature": {
                      "aliases": [],
                      "description": "No License installed for feature Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "link": {
                  "aliases": [],
                  "description": "Link traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "cErrDisableInterfaceEventRev1": {
                      "aliases": [],
                      "description": "Err-disable state notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "cieLinkDown": {
                      "aliases": [],
                      "description": "Cisco extended link state down notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "cieLinkUp": {
                      "aliases": [],
                      "description": "Cisco extended link state up notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "cisco_xcvr_mon_status_chg": {
                      "aliases": [],
                      "description": "Cisco interface transceiver monitor status change notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "cmn_mac_move_notification": {
                      "aliases": [],
                      "description": "Mac addr move trap.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "delayed_link_state_change": {
                      "aliases": [],
                      "description": "Delayed link state change.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable link traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "extended_linkDown": {
                      "aliases": [],
                      "description": "IETF extended link state down notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "extended_linkUp": {
                      "aliases": [],
                      "description": "IETF extended link state up notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "linkDown": {
                      "aliases": [],
                      "description": "IETF Link state down notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "linkUp": {
                      "aliases": [],
                      "description": "IETF Link state up notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "mmode": {
                  "aliases": [],
                  "description": "MMode traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "cseMaintModeChangeNotify": {
                      "aliases": [],
                      "description": "Maint Mode Change Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "cseNormalModeChangeNotify": {
                      "aliases": [],
                      "description": "Normal Mode Change Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable mmode traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "rf": {
                  "aliases": [],
                  "description": "RF traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable rf traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "redundancy_framework": {
                      "aliases": [],
                      "description": "Redundancy_Framework (RF) Sup switchover MIB.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "rmon": {
                  "aliases": [],
                  "description": "RMON traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable rmon traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "fallingAlarm": {
                      "aliases": [],
                      "description": "Rmon falling alarm.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "hcFallingAlarm": {
                      "aliases": [],
                      "description": "High capacity Rmon falling alarm.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "hcRisingAlarm": {
                      "aliases": [],
                      "description": "High capacity Rmon rising alarm.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "risingAlarm": {
                      "aliases": [],
                      "description": "Rmon rising alarm.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "snmp": {
                  "aliases": [],
                  "description": "SNMP traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "authentication": {
                      "aliases": [],
                      "description": "SNMP authentication trap.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable snmp traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "storm_control": {
                  "aliases": [],
                  "description": "Storm-Control traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "cpscEventRev1": {
                      "aliases": [],
                      "description": "Port-Storm-Control-Event.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable storm-control traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "trap_rate": {
                      "aliases": [],
                      "description": "Number of traps per minute.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "stpx": {
                  "aliases": [],
                  "description": "Stpx traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable stpx traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "inconsistency": {
                      "aliases": [],
                      "description": "Enable SNMP STPX MIB InconsistencyUpdate traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "loop_inconsistency": {
                      "aliases": [],
                      "description": "Enable SNMP STPX MIB LoopInconsistencyUpdate traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "root_inconsistency": {
                      "aliases": [],
                      "description": "Enable SNMP STPX MIB RootInconsistencyUpdate traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "syslog": {
                  "aliases": [],
                  "description": "Enable syslog traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable syslog traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "message_generated": {
                      "aliases": [],
                      "description": "Message Generated Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "sysmgr": {
                  "aliases": [],
                  "description": "Sysmgr traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "cseFailSwCoreNotifyExtended": {
                      "aliases": [],
                      "description": "Software Core Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable sysmgr traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "system": {
                  "aliases": [],
                  "description": "System traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "clock_change_notification": {
                      "aliases": [],
                      "description": "Clock-change-notification traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enable": {
                      "aliases": [],
                      "description": "Enable system traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "upgrade": {
                  "aliases": [],
                  "description": "Upgrade traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable upgrade traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "upgradeJobStatusNotify": {
                      "aliases": [],
                      "description": "Upgrade Job Status Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "upgradeOpNotifyOnCompletion": {
                      "aliases": [],
                      "description": "Upgrade Global Status Notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "vtp": {
                  "aliases": [],
                  "description": "VTP traps.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enable": {
                      "aliases": [],
                      "description": "Enable VTP traps.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "notifs": {
                      "aliases": [],
                      "description": "Enable vtpConfigRevNumberError vtpConfigDigestEnable vtpConfigRevNumberError vtpConfigDigestError vtpServerDisabled vtpVersionOneDeviceDetected vlanTrunkPortDynamicStatusChange vtpLocalModeChanged vtpVersionInUseChanged notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "vlancreate": {
                      "aliases": [],
                      "description": "Enable vtpVlanCreated notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "vlandelete": {
                      "aliases": [],
                      "description": "Enable vtpVlanDeleted notification.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "users": {
              "aliases": [],
              "description": "Define users who can access the SNMP engine.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "auth": {
                  "aliases": [],
                  "description": "SNMP User authentication related settings",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "authentication": {
                      "aliases": [],
                      "description": "Authentication parameters for the user.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "algorithm": {
                          "aliases": [],
                          "description": "Select algorithm for authentication.",
                          "type": "str",
                          "required": false,
                          "choices": [
                            "md5",
                            "sha"
                          ],
                          "suboptions": {}
                        },
                        "engine_id": {
                          "aliases": [],
                          "description": "EngineID for configuring notif target user (for V3 informs).\nThis value needs to be enclosed in quotes in the task.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "localized_key": {
                          "aliases": [],
                          "description": "Specifies whether the passwords are in localized key format.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "password": {
                          "aliases": [],
                          "description": "Authentication password for user (Max Size 127).\nIf this value is localized, it has to be enclosed in quotes in the task.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "priv": {
                          "aliases": [],
                          "description": "Encryption parameters for the user.",
                          "type": "dict",
                          "required": false,
                          "suboptions": {
                            "aes_128": {
                              "aliases": [],
                              "description": "Use 128-bit AES algorithm for privacy.",
                              "type": "bool",
                              "required": false,
                              "suboptions": {}
                            },
                            "privacy_password": {
                              "aliases": [],
                              "description": "Privacy password for user (Max Size 130).\nIf this value is localized, it has to be enclosed in quotes in the task.",
                              "type": "str",
                              "required": false,
                              "suboptions": {}
                            }
                          }
                        }
                      }
                    },
                    "group": {
                      "aliases": [],
                      "description": "Group name (ignored for notif target user) (Max Size 28).",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "user": {
                      "aliases": [],
                      "description": "Name of the user (Max Size 28).",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "use_acls": {
                  "aliases": [],
                  "description": "Set IPv4 and IPv6 ACL to use.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "ipv4": {
                      "aliases": [],
                      "description": "Specify IPv4 ACL, the ACL name specified after must be IPv4 ACL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "ipv6": {
                      "aliases": [],
                      "description": "Specify IPv6 ACL, the ACL name specified after must be IPv6 ACL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "user": {
                      "aliases": [],
                      "description": "Name of the user (Max Size 28).",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the command B(show running-config | section '^snmp-server').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in.\nThe states C(replaced) and C(overridden) have identical behaviour for this module.\nPlease refer to examples for more details.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "parsed",
            "gathered",
            "rendered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "SNMP Server resource module.",
      "version_added": "2.8.0"
    },
    "examples": "\n\n# Using merged\n\n# Before state:\n# -------------\n# nxos-9k-rdo# show running-config | section \"^snmp-server\"\n# snmp-server user admin network-admin auth md5 0xcbde46b02c46e0bcd3ac5af6a8b13da9 priv 0xcbde46b02c46e0bcd3ac5af6a8b13da9 localizedkey\n\n- name: Merge the provided configuration with the existing running configuration\n  cisco.nxos.nxos_snmp_server:\n    config:\n      aaa_user:\n        cache_timeout: 36000\n      communities:\n        - community: public\n          group: network-operator\n        - community: private\n          group: network-admin\n      contact: nxosswitchadmin@localhost\n      location: serverroom-1\n      traps:\n        aaa:\n          server_state_change: True\n        system:\n          clock_change_notification: True\n      hosts:\n        - host: 192.0.2.1\n          traps: True\n          version: '1'\n          community: public\n        - host: 192.0.2.1\n          source_interface: Ethernet1/1\n        - host: 192.0.2.2\n          informs: True\n          version: '3'\n          auth: NMS\n      users:\n        auth:\n          - user: snmp_user_1\n            group: network-operator\n            authentication:\n              algorithm: md5\n              password: '0x5632724fb8ac3699296af26281e1d0f1'\n              localized_key: True\n          - user: snmp_user_2\n            group: network-operator\n            authentication:\n              algorithm: md5\n              password: '0x5632724fb8ac3699296af26281e1d0f1'\n              localized_key: True\n              priv:\n                privacy_password: '0x5632724fb8ac3699296af26281e1d0f1'\n                aes_128: True\n        use_acls:\n          - user: snmp_user_1\n            ipv4: acl1\n            ipv6: acl2\n          - user: snmp_user_2\n            ipv4: acl3\n            ipv6: acl4\n\n# Task output\n# -------------\n# before:\n#   users:\n#     auth:\n#       - user: admin\n#         group: network-admin\n#         authentication:\n#           algorithm: md5\n#           password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#           localized_key: True\n#           priv:\n#             privacy_password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#\n# commands:\n#   - snmp-server contact nxosswitchadmin@localhost\n#   - snmp-server location serverroom-1\n#   - snmp-server aaa-user cache-timeout 36000\n#   - snmp-server user snmp_user_1 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n#   - snmp-server user snmp_user_2 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 priv aes-128 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n#   - snmp-server user snmp_user_1 use-ipv4acl acl1 use-ipv6acl acl2\n#   - snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n#   - snmp-server host 192.0.2.1 traps version 1 public\n#   - snmp-server host 192.0.2.1 source-interface Ethernet1/1\n#   - snmp-server host 192.0.2.2 informs version 3 auth NMS\n#   - snmp-server community private group network-admin\n#   - snmp-server community public group network-operator\n#   - snmp-server enable traps aaa server-state-change\n#   - snmp-server enable traps system Clock-change-notification\n#\n# after:\n#   aaa_user:\n#      cache_timeout: 36000\n#    communities:\n#      - community: private\n#        group: network-admin\n#      - community: public\n#        group: network-operator\n#    contact: nxosswitchadmin@localhost\n#    location: serverroom-1\n#    traps:\n#      aaa:\n#        server_state_change: True\n#      system:\n#        clock_change_notification: True\n#    hosts:\n#      - host: 192.0.2.1\n#        traps: true\n#        version: \"1\"\n#        community: public\n#\n#      - host: 192.0.2.1\n#        source_interface: Ethernet1/1\n#\n#      - host: 192.0.2.2\n#        informs: true\n#        version: \"3\"\n#        auth: NMS\n#    users:\n#      auth:\n#        - user: admin\n#          group: network-admin\n#          authentication:\n#            algorithm: md5\n#            password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#            localized_key: True\n#            priv:\n#              privacy_password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#\n#        - user: snmp_user_1\n#          group: network-operator\n#          authentication:\n#            algorithm: md5\n#            password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#            localized_key: True\n#\n#        - authentication:\n#            algorithm: md5\n#            localized_key: true\n#            password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#            priv:\n#              aes_128: true\n#              privacy_password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#          group: network-operator\n#          user: snmp_user_2\n#\n#      use_acls:\n#        - user: snmp_user_1\n#          ipv4: acl1\n#          ipv6: acl2\n#        - user: snmp_user_2\n#          ipv4: acl3\n#          ipv6: acl4\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^snmp-server\"\n# snmp-server contact nxosswitchadmin@localhost\n# snmp-server location serverroom-1\n# snmp-server aaa-user cache-timeout 36000\n# snmp-server user admin network-admin auth md5 0xcbde46b02c46e0bcd3ac5af6a8b13da9 priv 0xcbde46b02c46e0bcd3ac5af6a8b13da9 localizedkey\n# snmp-server user snmp_user_1 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_2 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 priv aes-128 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_1 use-ipv4acl acl1 use-ipv6acl acl2\n# snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n# snmp-server host 192.0.2.1 traps version 1 public\n# snmp-server host 192.0.2.1 source-interface Ethernet1/1\n# snmp-server host 192.0.2.2 informs version 3 auth NMS\n# snmp-server community private group network-admin\n# snmp-server community public group network-operator\n# snmp-server enable traps aaa server-state-change\n# snmp-server enable traps system Clock-change-notification\n\n# Using replaced\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^snmp-server\"\n# snmp-server contact nxosswitchadmin@localhost\n# snmp-server location serverroom-1\n# snmp-server aaa-user cache-timeout 36000\n# snmp-server user admin network-admin auth md5 0xcbde46b02c46e0bcd3ac5af6a8b13da9 priv 0xcbde46b02c46e0bcd3ac5af6a8b13da9 localizedkey\n# snmp-server user snmp_user_1 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_2 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 priv aes-128 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_1 use-ipv4acl acl1 use-ipv6acl acl2\n# snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n# snmp-server host 192.0.2.1 traps version 1 public\n# snmp-server host 192.0.2.1 source-interface Ethernet1/1\n# snmp-server host 192.0.2.2 informs version 3 auth NMS\n# snmp-server community private group network-admin\n# snmp-server community public group network-operator\n# snmp-server enable traps aaa server-state-change\n# snmp-server enable traps system Clock-change-notification\n\n- name: Replace snmp-server configurations of listed snmp-server with provided configurations\n  cisco.nxos.nxos_snmp_server:\n    config:\n      aaa_user:\n        cache_timeout: 36000\n      communities:\n        - community: public\n          group: network-operator\n        - community: secret\n          group: network-operator\n      contact: nxosswitchadmin2@localhost\n      location: serverroom-2\n      traps:\n        aaa:\n          server_state_change: True\n      hosts:\n        - host: 192.0.2.1\n          traps: True\n          version: '1'\n          community: public\n        - host: 192.0.2.1\n          source_interface: Ethernet1/1\n        - host: 192.0.3.2\n          informs: True\n          version: '3'\n          auth: NMS\n      users:\n        auth:\n          - user: admin\n            group: network-admin\n            authentication:\n              algorithm: md5\n              password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n              localized_key: True\n              priv:\n                privacy_password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n\n          - user: snmp_user_1\n            group: network-operator\n            authentication:\n              algorithm: md5\n              password: '0x5632724fb8ac3699296af26281e1d0f1'\n              localized_key: True\n\n          - user: snmp_user_2\n            group: network-operator\n            authentication:\n              algorithm: md5\n              password: '0x5632724fb8ac3699296af26281e1d0f1'\n              localized_key: True\n              priv:\n                privacy_password: '0x5632724fb8ac3699296af26281e1d0f1'\n                aes_128: True\n        use_acls:\n          - user: snmp_user_1\n            ipv4: acl1\n            ipv6: acl2\n    state: replaced\n\n# Task output\n# -------------\n# before:\n#   aaa_user:\n#      cache_timeout: 36000\n#    communities:\n#      - community: private\n#        group: network-admin\n#      - community: public\n#        group: network-operator\n#    contact: nxosswitchadmin@localhost\n#    location: serverroom-1\n#    traps:\n#      aaa:\n#        server_state_change: True\n#      system:\n#        clock_change_notification: True\n#    hosts:\n#      - host: 192.0.2.1\n#        traps: true\n#        version: \"1\"\n#        community: public\n#\n#      - host: 192.0.2.1\n#        source_interface: Ethernet1/1\n#\n#      - host: 192.0.2.2\n#        informs: true\n#        version: \"3\"\n#        auth: NMS\n#    users:\n#      auth:\n#        - user: admin\n#          group: network-admin\n#          authentication:\n#            algorithm: md5\n#            password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#            localized_key: True\n#            priv:\n#              privacy_password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#\n#        - user: snmp_user_1\n#          group: network-operator\n#          authentication:\n#            algorithm: md5\n#            password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#            localized_key: True\n#\n#        - authentication:\n#            algorithm: md5\n#            localized_key: true\n#            password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#            priv:\n#              aes_128: true\n#              privacy_password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#          group: network-operator\n#          user: snmp_user_2\n#\n#      use_acls:\n#        - user: snmp_user_1\n#          ipv4: acl1\n#          ipv6: acl2\n#        - user: snmp_user_2\n#          ipv4: acl3\n#          ipv6: acl4\n#\n# commands:\n#   - snmp-server contact nxosswitchadmin2@localhost\n#   - no snmp-server enable traps system Clock-change-notification\n#   - snmp-server location serverroom-2\n#   - no snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n#   - no snmp-server host 192.0.2.2 informs version 3 auth NMS\n#   - snmp-server host 192.0.3.2 informs version 3 auth NMS\n#   - no snmp-server community private group network-admin\n#   - snmp-server community secret group network-operator\n#\n# after:\n#   aaa_user:\n#      cache_timeout: 36000\n#    communities:\n#      - community: public\n#        group: network-operator\n#      - community: secret\n#        group: network-operator\n#    contact: nxosswitchadmin2@localhost\n#    location: serverroom-2\n#    traps:\n#      aaa:\n#        server_state_change: True\n#    hosts:\n#      - host: 192.0.2.1\n#        traps: True\n#        version: '1'\n#        community: public\n#      - host: 192.0.2.1\n#        source_interface: Ethernet1/1\n#      - host: 192.0.3.2\n#        informs: True\n#        version: '3'\n#        auth: NMS\n#    users:\n#      auth:\n#        - user: admin\n#          group: network-admin\n#          authentication:\n#            algorithm: md5\n#            password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#            localized_key: True\n#            priv:\n#              privacy_password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#\n#        - user: snmp_user_1\n#          group: network-operator\n#          authentication:\n#            algorithm: md5\n#            password: '0x5632724fb8ac3699296af26281e1d0f1'\n#            localized_key: True\n#\n#        - user: snmp_user_2\n#          group: network-operator\n#          authentication:\n#            algorithm: md5\n#            password: '0x5632724fb8ac3699296af26281e1d0f1'\n#            localized_key: True\n#            priv:\n#              privacy_password: '0x5632724fb8ac3699296af26281e1d0f1'\n#              aes_128: True\n#\n#      use_acls:\n#        - user: snmp_user_1\n#          ipv4: acl1\n#          ipv6: acl2\n#\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^snmp-server\"\n# snmp-server contact nxosswitchadmin2@localhost\n# snmp-server location serverroom-2\n# snmp-server aaa-user cache-timeout 36000\n# snmp-server user admin network-admin auth md5 0xcbde46b02c46e0bcd3ac5af6a8b13da9 priv 0xcbde46b02c46e0bcd3ac5af6a8b13da9 localizedkey\n# snmp-server user snmp_user_1 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_2 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 priv aes-128 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_1 use-ipv4acl acl1 use-ipv6acl acl2\n# snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n# snmp-server host 192.0.2.1 traps version 1 public\n# snmp-server host 192.0.2.1 source-interface Ethernet1/1\n# snmp-server host 192.0.2.2 informs version 3 auth NMS\n# snmp-server community secret group network-operator\n# snmp-server community public group network-operator\n# snmp-server enable traps aaa server-state-change\n# snmp-server enable traps system Clock-change-notification\n\n# Using deleted\n\n# Before state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^snmp-server\"\n# snmp-server contact nxosswitchadmin@localhost\n# snmp-server location serverroom-1\n# snmp-server aaa-user cache-timeout 36000\n# snmp-server user admin network-admin auth md5 0xcbde46b02c46e0bcd3ac5af6a8b13da9 priv 0xcbde46b02c46e0bcd3ac5af6a8b13da9 localizedkey\n# snmp-server user snmp_user_1 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_2 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 priv aes-128 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_1 use-ipv4acl acl1 use-ipv6acl acl2\n# snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n# snmp-server host 192.0.2.1 traps version 1 public\n# snmp-server host 192.0.2.1 source-interface Ethernet1/1\n# snmp-server host 192.0.2.2 informs version 3 auth NMS\n# snmp-server community private group network-admin\n# snmp-server community public group network-operator\n# snmp-server enable traps aaa server-state-change\n# snmp-server enable traps system Clock-change-notification\n\n- name: Delete SNMP Server configurations from the device (admin user will not be deleted)\n  cisco.nxos.nxos_snmp_server:\n    state: deleted\n\n# Task output\n# -------------\n# before:\n#   aaa_user:\n#      cache_timeout: 36000\n#    communities:\n#      - community: private\n#        group: network-admin\n#      - community: public\n#        group: network-operator\n#    contact: nxosswitchadmin@localhost\n#    location: serverroom-1\n#    traps:\n#      aaa:\n#        server_state_change: True\n#      system:\n#        clock_change_notification: True\n#    hosts:\n#      - host: 192.0.2.1\n#        traps: true\n#        version: \"1\"\n#        community: public\n#\n#      - host: 192.0.2.1\n#        source_interface: Ethernet1/1\n#\n#      - host: 192.0.2.2\n#        informs: true\n#        version: \"3\"\n#        auth: NMS\n#    users:\n#      auth:\n#        - user: admin\n#          group: network-admin\n#          authentication:\n#            algorithm: md5\n#            password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#            localized_key: True\n#            priv:\n#              privacy_password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#\n#        - user: snmp_user_1\n#          group: network-operator\n#          authentication:\n#            algorithm: md5\n#            password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#            localized_key: True\n#\n#        - authentication:\n#            algorithm: md5\n#            localized_key: true\n#            password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#            priv:\n#              aes_128: true\n#              privacy_password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#          group: network-operator\n#          user: snmp_user_2\n#\n#      use_acls:\n#        - user: snmp_user_1\n#          ipv4: acl1\n#          ipv6: acl2\n#        - user: snmp_user_2\n#          ipv4: acl3\n#          ipv6: acl4\n#\n# commands:\n#   - no snmp-server contact nxosswitchadmin@localhost\n#   - no snmp-server location serverroom-1\n#   - no snmp-server aaa-user cache-timeout 36000\n#   - no snmp-server user admin network-admin auth md5 0xcbde46b02c46e0bcd3ac5af6a8b13da9 priv 0xcbde46b02c46e0bcd3ac5af6a8b13da9 localizedkey\n#   - no snmp-server user snmp_user_1 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n#   - no snmp-server user snmp_user_2 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 priv aes-128 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n#   - no snmp-server user snmp_user_1 use-ipv4acl acl1 use-ipv6acl acl2\n#   - no snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n#   - no snmp-server host 192.0.2.1 traps version 1 public\n#   - no snmp-server host 192.0.2.1 source-interface Ethernet1/1\n#   - no snmp-server host 192.0.2.2 informs version 3 auth NMS\n#   - no snmp-server community private group network-admin\n#   - no snmp-server community public group network-operator\n#   - no snmp-server enable traps aaa server-state-change\n#   - no snmp-server enable traps system Clock-change-notification\n#\n# after:\n#   users:\n#     auth:\n#       - user: admin\n#         group: network-admin\n#         authentication:\n#           algorithm: md5\n#           password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n#           localized_key: True\n#           priv:\n#             privacy_password: \"0xcbde46b02c46e0bcd3ac5af6a8b13da9\"\n\n# After state:\n# ------------\n# nxos-9k-rdo# show running-config | section \"^snmp-server\"\n# snmp-server user admin network-admin auth md5 0xcbde46b02c46e0bcd3ac5af6a8b13da9 priv 0xcbde46b02c46e0bcd3ac5af6a8b13da9 localizedkey\n\n# Using rendered\n# ---------------\n\n- name: Render platform specific configuration lines with state rendered (without connecting to the device)\n  cisco.nxos.nxos_snmp_server:\n    config:\n      aaa_user:\n        cache_timeout: 36000\n      communities:\n        - community: public\n          group: network-operator\n        - community: private\n          group: network-admin\n      contact: nxosswitchadmin@localhost\n      location: serverroom-1\n      traps:\n        aaa:\n          server_state_change: True\n        system:\n          clock_change_notification: True\n      hosts:\n        - host: 192.0.2.1\n          traps: True\n          version: '1'\n          community: public\n        - host: 192.0.2.1\n          source_interface: Ethernet1/1\n        - host: 192.0.2.2\n          informs: True\n          version: '3'\n          auth: NMS\n      users:\n        auth:\n          - user: snmp_user_1\n            group: network-operator\n            authentication:\n              algorithm: md5\n              password: '0x5632724fb8ac3699296af26281e1d0f1'\n              localized_key: True\n          - user: snmp_user_2\n            group: network-operator\n            authentication:\n              algorithm: md5\n              password: '0x5632724fb8ac3699296af26281e1d0f1'\n              localized_key: True\n              priv:\n                privacy_password: '0x5632724fb8ac3699296af26281e1d0f1'\n                aes_128: True\n        use_acls:\n          - user: snmp_user_1\n            ipv4: acl1\n            ipv6: acl2\n          - user: snmp_user_2\n            ipv4: acl3\n            ipv6: acl4\n    state: rendered\n\n\n# Task Output (redacted)\n# -----------------------\n#  rendered:\n#    - snmp-server contact nxosswitchadmin@localhost\n#    - snmp-server location serverroom-1\n#    - snmp-server aaa-user cache-timeout 36000\n#    - snmp-server user snmp_user_1 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n#    - snmp-server user snmp_user_2 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 priv aes-128 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n#    - snmp-server user snmp_user_1 use-ipv4acl acl1 use-ipv6acl acl2\n#    - snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n#    - snmp-server host 192.0.2.1 traps version 1 public\n#    - snmp-server host 192.0.2.1 source-interface Ethernet1/1\n#    - snmp-server host 192.0.2.2 informs version 3 auth NMS\n#    - snmp-server community private group network-admin\n#    - snmp-server community public group network-operator\n#    - snmp-server enable traps aaa server-state-change\n#    - snmp-server enable traps system Clock-change-notification\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# snmp-server contact nxosswitchadmin@localhost\n# snmp-server location serverroom-1\n# snmp-server aaa-user cache-timeout 36000\n# snmp-server user snmp_user_1 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_2 network-operator auth md5 0x5632724fb8ac3699296af26281e1d0f1 priv aes-128 0x5632724fb8ac3699296af26281e1d0f1 localizedkey\n# snmp-server user snmp_user_1 use-ipv4acl acl1 use-ipv6acl acl2\n# snmp-server user snmp_user_2 use-ipv4acl acl3 use-ipv6acl acl4\n# snmp-server host 192.0.2.1 traps version 1 public\n# snmp-server host 192.0.2.1 source-interface Ethernet1/1\n# snmp-server host 192.0.2.2 informs version 3 auth NMS\n# snmp-server community private group network-admin\n# snmp-server community public group network-operator\n# snmp-server enable traps aaa server-state-change\n# snmp-server enable traps system Clock-change-notification\n\n- name: Parse externally provided snmp-server configuration\n  cisco.nxos.nxos_snmp_server:\n    running_config: \"{{ lookup('file', './parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n#  parsed:\n#   aaa_user:\n#      cache_timeout: 36000\n#    communities:\n#      - community: private\n#        group: network-admin\n#      - community: public\n#        group: network-operator\n#    contact: nxosswitchadmin@localhost\n#    location: serverroom-1\n#    traps:\n#      aaa:\n#        server_state_change: True\n#      system:\n#        clock_change_notification: True\n#    hosts:\n#      - host: 192.0.2.1\n#        traps: true\n#        version: \"1\"\n#        community: public\n#\n#      - host: 192.0.2.1\n#        source_interface: Ethernet1/1\n#\n#      - host: 192.0.2.2\n#        informs: true\n#        version: \"3\"\n#        auth: NMS\n#    users:\n#      auth:\n#        - user: snmp_user_1\n#          group: network-operator\n#          authentication:\n#            algorithm: md5\n#            password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#            localized_key: True\n#\n#        - authentication:\n#            algorithm: md5\n#            localized_key: true\n#            password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#            priv:\n#              aes_128: true\n#              privacy_password: \"0x5632724fb8ac3699296af26281e1d0f1\"\n#          group: network-operator\n#          user: snmp_user_2\n#\n#      use_acls:\n#        - user: snmp_user_1\n#          ipv4: acl1\n#          ipv6: acl2\n#        - user: snmp_user_2\n#          ipv4: acl3\n#          ipv6: acl4\n#\n"
  },
  "cisco.nxos.nxos_snmp_traps": {
    "doc": {
      "description": "Manages SNMP traps configurations.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nThis module works at the group level for traps.  If you need to only enable/disable 1 specific trap within a group, use the M(cisco.nxos.nxos_command) module.\nBe aware that you can set a trap only for an enabled feature.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "group": {
          "aliases": [],
          "description": "Case sensitive group.",
          "type": "str",
          "required": true,
          "choices": [
            "aaa",
            "bfd",
            "bgp",
            "bridge",
            "callhome",
            "cfs",
            "config",
            "eigrp",
            "entity",
            "feature-control",
            "generic",
            "hsrp",
            "license",
            "link",
            "lldp",
            "mmode",
            "ospf",
            "pim",
            "rf",
            "rmon",
            "snmp",
            "storm-control",
            "stpx",
            "switchfabric",
            "syslog",
            "sysmgr",
            "system",
            "upgrade",
            "vtp",
            "all"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2024-01-01) Manages SNMP traps.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ensure lldp trap configured\n- cisco.nxos.nxos_snmp_traps:\n    group: lldp\n    state: enabled\n\n# ensure lldp trap is not configured\n- cisco.nxos.nxos_snmp_traps:\n    group: lldp\n    state: disabled\n"
  },
  "cisco.nxos.nxos_snmp_user": {
    "doc": {
      "description": "Manages SNMP user configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nLimited Support for Cisco MDS\nAuthentication parameters not idempotent.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "authentication": {
          "aliases": [],
          "description": "Authentication parameters for the user.",
          "type": "str",
          "required": false,
          "choices": [
            "md5",
            "sha"
          ],
          "suboptions": {}
        },
        "encrypt": {
          "aliases": [],
          "description": "Enables AES-128 bit encryption when using privacy password.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Group to which the user will belong to. If state = present, and the user is existing, the group is added to the user. If the user is not existing, user entry is created with this group argument. If state = absent, only the group is removed from the user entry. However, to maintain backward compatibility, if the existing user belongs to only one group, and if group argument is same as the existing user's group, then the user entry also is deleted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "privacy": {
          "aliases": [],
          "description": "Privacy password for the user. This is not idempotent",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "pwd": {
          "aliases": [],
          "description": "Authentication password when using md5 or sha. This is not idempotent",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Name of the user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2024-01-01) Manages SNMP users for monitoring.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_snmp_user:\n    user: ntc\n    group: network-operator\n    authentication: md5\n    pwd: test_password\n"
  },
  "cisco.nxos.nxos_static_route": {
    "doc": {
      "description": "Manages static route configuration",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nIf no vrf is supplied, vrf is set to default.\nIf C(state=absent), the route will be removed, regardless of the non-required parameters.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "aggregate": {
          "aliases": [],
          "description": "List of static route definitions",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "next_hop": {
              "aliases": [],
              "description": "Next hop address or interface of static route. If interface, it must be the fully-qualified interface name.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "pref": {
              "aliases": [
                "admin_distance"
              ],
              "description": "Preference or administrative difference of route (range 1-255) or keyword 'default'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "prefix": {
              "aliases": [],
              "description": "Destination prefix of static route.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "route_name": {
              "aliases": [],
              "description": "Name of the route or keyword 'default'. Used with the name parameter on the CLI.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Manage the state of the resource.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "tag": {
              "aliases": [],
              "description": "Route tag value (numeric) or keyword 'default'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "track": {
              "aliases": [],
              "description": "Track value (range 1 - 512). Track must already be configured on the device before adding the route.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "vrf": {
              "aliases": [],
              "description": "VRF for static route.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "next_hop": {
          "aliases": [],
          "description": "Next hop address or interface of static route. If interface, it must be the fully-qualified interface name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pref": {
          "aliases": [
            "admin_distance"
          ],
          "description": "Preference or administrative difference of route (range 1-255) or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefix": {
          "aliases": [
            "address"
          ],
          "description": "Destination prefix of static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "route_name": {
          "aliases": [],
          "description": "Name of the route or keyword 'default'. Used with the name parameter on the CLI.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Route tag value (numeric) or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "track": {
          "aliases": [],
          "description": "Track value (range 1 - 512). Track must already be configured on the device before adding the route.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "VRF for static route.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manages static route configuration",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_static_route:\n    prefix: 192.168.20.64/24\n    next_hop: 192.0.2.3\n    route_name: testing\n    pref: 100\n"
  },
  "cisco.nxos.nxos_static_routes": {
    "doc": {
      "description": "This module configures and manages the attributes of static routes on Cisco NX-OS platforms.",
      "has_action": true,
      "notes": "Tested against NX-OS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nWhen a route is configured for a non-existent VRF, the VRF is created and the route is added to it.\nWhen deleting routes for a VRF, all routes inside the VRF are deleted, but the VRF is not deleted.",
      "options": {
        "config": {
          "aliases": [],
          "description": "A list of configurations for static routes",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "address_families": {
              "aliases": [],
              "description": "A dictionary specifying the address family to which the static route(s) belong.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "afi": {
                  "aliases": [],
                  "description": "Specifies the top level address family indicator.",
                  "type": "str",
                  "required": true,
                  "choices": [
                    "ipv4",
                    "ipv6"
                  ],
                  "suboptions": {}
                },
                "routes": {
                  "aliases": [],
                  "description": "A dictionary that specifies the static route configurations",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "dest": {
                      "aliases": [],
                      "description": "Destination prefix of static route\nThe address format is <ipv4/v6 address>/<mask>\nThe mask is number in range 0-32 for IPv4 and in range 0-128 for IPv6",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "next_hops": {
                      "aliases": [],
                      "description": "Details of route to be taken",
                      "type": "list",
                      "required": false,
                      "elements": "dict",
                      "suboptions": {
                        "admin_distance": {
                          "aliases": [],
                          "description": "Preference or administrative distance of route (range 1-255)",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "dest_vrf": {
                          "aliases": [],
                          "description": "VRF of the destination",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "forward_router_address": {
                          "aliases": [],
                          "description": "IP address of the next hop router",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "interface": {
                          "aliases": [],
                          "description": "Outgoing interface to take. For anything except 'Null0', then next hop IP address should also be configured.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "route_name": {
                          "aliases": [],
                          "description": "Name of the static route",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "tag": {
                          "aliases": [],
                          "description": "Route tag value (numeric)",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        },
                        "track": {
                          "aliases": [],
                          "description": "Track value (range 1 - 512). Track must already be configured on the device before adding the route.",
                          "type": "int",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "vrf": {
              "aliases": [],
              "description": "The VRF to which the static route(s) belong",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the following commands in order B(show running-config | include '^ip(v6)* route') and B(show running-config | section '^vrf context').\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state the configuration should be left in",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "deleted",
            "merged",
            "overridden",
            "replaced",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Static routes resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using deleted:\n\n# Before state:\n# -------------\n#\n# ip route 192.0.2.32/28 192.0.2.12 name new_route\n# ip route 192.0.2.26/24 192.0.2.13 tag 12\n\n- name: Delete all routes\n  cisco.nxos.nxos_static_routes:\n    state: deleted\n\n# After state:\n# ------------\n#\n\n\n# Before state:\n# ------------\n#\n# ip route 192.0.2.16/28 192.0.2.24 name new_route\n# ip route 192.0.2.80/28 192.0.2.26 tag 12\n# vrf context trial_vrf\n# ip route 192.0.2.64/28 192.0.2.22 tag 4\n# ip route 192.0.2.64/28 192.0.2.23 name merged_route 1\n# ipv6 route 2200:10::/36 2048:ae12::1 vrf dest 5\n\n- name: Delete routes based on VRF\n  cisco.nxos.nxos_static_routes:\n    config:\n    - vrf: trial_vrf\n    state: deleted\n\n# After state:\n# -----------\n# ip route 192.0.2.16/28 192.0.2.24 name new_route\n# ip route 192.0.2.80/28 192.0.2.26 tag 12\n# vrf context trial_vrf\n\n\n# Before state:\n# ------------\n#\n# ip route 192.0.2.16/28 192.0.2.24 name new_route\n# ip route 192.0.2.80/28 192.0.2.26 tag 12\n# vrf context trial_vrf\n# ip route 192.0.2.64/28 192.0.2.22 tag 4\n# ip route 192.0.2.64/28 192.0.2.23 name merged_route 1\n# ipv6 route 2200:10::/36 2048:ae12::1 vrf dest 5\n\n- name: Delete routes based on AFI in a VRF\n  cisco.nxos.nxos_static_routes:\n    config:\n    - vrf: trial_vrf\n      address_families:\n      - afi: ipv4\n    state: deleted\n\n# After state:\n# -----------\n# ip route 192.0.2.16/28 192.0.2.24 name new_route\n# ip route 192.0.2.80/28 192.0.2.26 tag 12\n# vrf context trial_vrf\n# ipv6 route 2200:10::/36 2048:ae12::1 vrf dest 5\n\n\n# Before state:\n# -----------\n# ip route 192.0.2.16/28 192.0.2.24 name new_route\n# vrf context trial_vrf\n# ipv6 route 2200:10::/36 2048:ae12::1 vrf dest 5\n\n\n# Using merged\n\n# Before state:\n# -------------\n#\n\n- name: Merge new static route configuration\n  cisco.nxos.nxos_static_routes:\n    config:\n    - vrf: trial_vrf\n      address_families:\n      - afi: ipv4\n        routes:\n        - dest: 192.0.2.64/24\n          next_hops:\n          - forward_router_address: 192.0.2.22\n            tag: 4\n            admin_distance: 2\n\n    - address_families:\n      - afi: ipv4\n        routes:\n        - dest: 192.0.2.16/24\n          next_hops:\n          - forward_router_address: 192.0.2.24\n            route_name: new_route\n      - afi: ipv6\n        routes:\n        - dest: 2001:db8::/64\n          next_hops:\n          - interface: eth1/3\n            forward_router_address: 2001:db8::12\n    state: merged\n\n# After state:\n# ------------\n#\n# ip route 192.0.2.16/24 192.0.2.24 name new_route\n# ipv6 route 2001:db8::/64 Ethernet1/3 2001:db8::12\n# vrf context trial_vrf\n#   ip route 192.0.2.0/24 192.0.2.22 tag 4 2\n\n\n# Using overridden:\n\n# Before state:\n# -------------\n#\n# ip route 192.0.2.16/28 192.0.2.24 name new_route\n# ip route 192.0.2.80/28 192.0.2.26 tag 12\n# vrf context trial_vrf\n# ip route 192.0.2.64/28 192.0.2.22 tag 4\n# ip route 192.0.2.64/28 192.0.2.23 name merged_route 1\n\n- name: Overriden existing static route configuration with new configuration\n  cisco.nxos.nxos_static_routes:\n    config:\n    - vrf: trial_vrf\n      address_families:\n      - afi: ipv4\n        routes:\n        - dest: 192.0.2.16/28\n          next_hops:\n          - forward_router_address: 192.0.2.23\n            route_name: overridden_route1\n            admin_distance: 3\n\n          - forward_router_address: 192.0.2.45\n            route_name: overridden_route2\n            dest_vrf: destinationVRF\n            interface: Ethernet1/2\n    state: overridden\n\n# After state:\n# ------------\n#\n# ip route 192.0.2.16/28 192.0.2.23 name replaced_route1 3\n# ip route 192.0.2.16/28 Ethernet1/2 192.0.2.45 vrf destinationVRF name replaced_route2\n\n\n# Using replaced:\n\n# Before state:\n# ------------\n# ip route 192.0.2.16/28 192.0.2.24 name new_route\n# ip route 192.0.2.80/28 192.0.2.26 tag 12\n# vrf context trial_vrf\n# ip route 192.0.2.64/28 192.0.2.22 tag 4\n# ip route 192.0.2.64/28 192.0.2.23 name merged_route 1\n\n- name: Replaced the existing static configuration of a prefix with new configuration\n  cisco.nxos.nxos_static_routes:\n    config:\n    - address_families:\n      - afi: ipv4\n        routes:\n        - dest: 192.0.2.16/28\n          next_hops:\n          - forward_router_address: 192.0.2.23\n            route_name: replaced_route1\n            admin_distance: 3\n\n          - forward_router_address: 192.0.2.45\n            route_name: replaced_route2\n            dest_vrf: destinationVRF\n            interface: Ethernet1/2\n    state: replaced\n\n# After state:\n# -----------\n# ip route 192.0.2.16/28 192.0.2.23 name replaced_route1 3\n# ip route 192.0.2.16/28 Ethernet1/2 192.0.2.45 vrf destinationVRF name replaced_route2\n# ip route 192.0.2.80/28 192.0.2.26 tag 12\n# vrf context trial_vrf\n# ip route 192.0.2.64/28 192.0.2.22 tag 4\n# ip route 192.0.2.64/28 192.0.2.23 name merged_route 1\n\n\n# Using gathered:\n\n# Before state:\n# -------------\n# ipv6 route 2001:db8:12::/32  2001:db8::12\n# vrf context Test\n#    ip route 192.0.2.48/28 192.0.2.13\n#    ip route 192.0.2.48/28 192.0.2.14 5\n\n- name: Gather the exisitng condiguration\n  cisco.nxos.nxos_static_routes:\n    state: gathered\n\n# returns:\n# gathered:\n#     - vrf: Test\n#       address_families:\n#         - afi: ipv4\n#           routes:\n#             - dest: 192.0.2.48/28\n#               next_hops:\n#                 - forward_router_address: 192.0.2.13\n#\n#                 - forward_router_address: 192.0.2.14\n#                   admin_distance: 5\n#\n#     - address_families:\n#         - afi: ipv6\n#           routes:\n#             - dest: 2001:db8:12::/32\n#               next_hops:\n#                 - forward_router_address: 2001:db8::12\n\n\n# Using rendered:\n\n- name: Render required configuration to be pushed to the device\n  cisco.nxos.nxos_static_routes:\n    config:\n    - address_families:\n      - afi: ipv4\n        routes:\n        - dest: 192.0.2.48/28\n          next_hops:\n          - forward_router_address: 192.0.2.13\n\n      - afi: ipv6\n        routes:\n        - dest: 2001:db8::/64\n          next_hops:\n          - interface: eth1/3\n            forward_router_address: 2001:db8::12\n    state: rendered\n\n# returns\n# rendered:\n#   vrf context default\n#   ip route 192.0.2.48/28 192.0.2.13\n#   ipv6 route 2001:db8::/64 Ethernet1/3 2001:db8::12\n\n\n# Using parsed\n\n- name: Parse the config to structured data\n  cisco.nxos.nxos_static_routes:\n    running_config: |\n      ipv6 route 2002:db8:12::/32 2002:db8:12::1\n      vrf context Test\n        ip route 192.0.2.48/28 192.0.2.13\n        ip route 192.0.2.48/28 192.0.2.14 5\n\n# returns:\n# parsed:\n#     - vrf: Test\n#       address_families:\n#         - afi: ipv4\n#           routes:\n#             - dest: 192.0.2.48/28\n#               next_hops:\n#                 - forward_router_address: 192.0.2.13\n#\n#                 - forward_router_address: 192.0.2.14\n#                   admin_distance: 5\n#\n#     - address_families:\n#         - afi: ipv6\n#           routes:\n#             - dest: 2002:db8:12::/32\n#               next_hops:\n#                 - forward_router_address: 2002:db8:12::1\n\n\n"
  },
  "cisco.nxos.nxos_system": {
    "doc": {
      "description": "This module provides declarative management of node system attributes on Cisco NXOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.",
      "has_action": true,
      "notes": "Unsupported for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "domain_lookup": {
          "aliases": [],
          "description": "Enables or disables the DNS lookup feature in Cisco NXOS.  This argument accepts boolean values.  When enabled, the system will try to resolve hostnames using DNS and when disabled, hostnames will not be resolved.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "domain_name": {
          "aliases": [],
          "description": "Configures the default domain name suffix to be used when referencing this node by its FQDN.  This argument accepts either a list of domain names or a list of dicts that configure the domain name and VRF name or keyword 'default'. See examples.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "domain_search": {
          "aliases": [],
          "description": "Configures a list of domain name suffixes to search when performing DNS name resolution. This argument accepts either a list of domain names or a list of dicts that configure the domain name and VRF name or keyword 'default'. See examples.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Configure the device hostname parameter. This option takes an ASCII string value or keyword 'default'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_servers": {
          "aliases": [],
          "description": "List of DNS name servers by IP address to use to perform name resolution lookups.  This argument accepts either a list of DNS servers or a list of hashes that configure the name server and VRF name or keyword 'default'. See examples.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "State of the configuration values in the device's current active configuration.  When set to I(present), the values should be configured in the device active configuration and when set to I(absent) the values should not be in the device active configuration",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "system_mtu": {
          "aliases": [],
          "description": "Specifies the mtu, must be an integer or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage the system attributes on Cisco NXOS devices",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: configure hostname and domain-name\n  cisco.nxos.nxos_system:\n    hostname: nxos01\n    domain_name: test.example.com\n\n- name: remove configuration\n  cisco.nxos.nxos_system:\n    state: absent\n\n- name: configure name servers\n  cisco.nxos.nxos_system:\n    name_servers:\n    - 8.8.8.8\n    - 8.8.4.4\n\n- name: configure name servers with VRF support\n  cisco.nxos.nxos_system:\n    name_servers:\n    - {server: 8.8.8.8, vrf: mgmt}\n    - {server: 8.8.4.4, vrf: mgmt}\n"
  },
  "cisco.nxos.nxos_telemetry": {
    "doc": {
      "description": "Manages Telemetry Monitoring Service (TMS) configuration",
      "has_action": true,
      "notes": "Supported on N9k Version 7.0(3)I7(5) and later.\nUnsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "The provided configuration",
          "type": "dict",
          "required": false,
          "suboptions": {
            "certificate": {
              "aliases": [],
              "description": "Certificate SSL/TLS and hostname values.\nValue must be a dict defining values for keys (key and hostname).",
              "type": "dict",
              "required": false,
              "suboptions": {
                "hostname": {
                  "aliases": [],
                  "description": "Certificate hostname",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "key": {
                  "aliases": [],
                  "description": "Certificate key",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "compression": {
              "aliases": [],
              "description": "Destination profile compression method.",
              "type": "str",
              "required": false,
              "choices": [
                "gzip"
              ],
              "suboptions": {}
            },
            "destination_groups": {
              "aliases": [],
              "description": "List of telemetry destination groups.",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {
                "destination": {
                  "aliases": [],
                  "description": "Group destination ipv4, port, protocol and encoding values.\nValue must be a dict defining values for keys (ip, port, protocol, encoding).",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "encoding": {
                      "aliases": [],
                      "description": "Destination group encoding.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "GPB",
                        "JSON"
                      ],
                      "suboptions": {}
                    },
                    "ip": {
                      "aliases": [],
                      "description": "Destination group IP address.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "port": {
                      "aliases": [],
                      "description": "Destination group port number.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "protocol": {
                      "aliases": [],
                      "description": "Destination group protocol.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "HTTP",
                        "TCP",
                        "UDP",
                        "gRPC"
                      ],
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Destination group identifier.\nValue must be a int representing the destination group identifier.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "sensor_groups": {
              "aliases": [],
              "description": "List of telemetry sensor groups.",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {
                "data_source": {
                  "aliases": [],
                  "description": "Telemetry data source.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "NX-API",
                    "DME",
                    "YANG"
                  ],
                  "suboptions": {}
                },
                "id": {
                  "aliases": [],
                  "description": "Sensor group identifier.\nValue must be a int representing the sensor group identifier.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "path": {
                  "aliases": [],
                  "description": "Telemetry sensor path.\nValue must be a dict defining values for keys (name, depth, filter_condition, query_condition).\nMandatory Keys (name)\nOptional Keys  (depth, filter_condition, query_condition)",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "depth": {
                      "aliases": [],
                      "description": "Sensor group depth.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "filter_condition": {
                      "aliases": [],
                      "description": "Sensor group filter condition.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "name": {
                      "aliases": [],
                      "description": "Sensor group path name.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "query_condition": {
                      "aliases": [],
                      "description": "Sensor group query condition.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "source_interface": {
              "aliases": [],
              "description": "Destination profile source interface.\nValid value is a str representing the source interface name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "subscriptions": {
              "aliases": [],
              "description": "List of telemetry subscriptions.",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {
                "destination_group": {
                  "aliases": [],
                  "description": "Associated destination group.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "id": {
                  "aliases": [],
                  "description": "Subscription identifier.\nValue must be a int representing the subscription identifier.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "sensor_group": {
                  "aliases": [],
                  "description": "Associated sensor group.\nValue must be a dict defining values for keys (id, sample_interval).",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "id": {
                      "aliases": [],
                      "description": "Associated sensor group id.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    },
                    "sample_interval": {
                      "aliases": [],
                      "description": "Associated sensor group id sample interval.",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "vrf": {
              "aliases": [],
              "description": "Destination profile vrf.\nValid value is a str representing the vrf name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Final configuration state",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "deleted",
            "gathered"
          ],
          "suboptions": {}
        }
      },
      "short_description": "TELEMETRY resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using deleted\n# This action will delete all telemetry configuration on the device\n\n- name: Delete Telemetry Configuration\n  cisco.nxos.nxos_telemetry:\n    state: deleted\n\n\n# Using merged\n# This action will merge telemetry configuration defined in the playbook with\n# telemetry configuration that is already on the device.\n\n- name: Merge Telemetry Configuration\n  cisco.nxos.nxos_telemetry:\n    config:\n      certificate:\n        key: /bootflash/server.key\n        hostname: localhost\n      compression: gzip\n      source_interface: Ethernet1/1\n      vrf: management\n      destination_groups:\n      - id: 2\n        destination:\n          ip: 192.168.0.2\n          port: 50001\n          protocol: gPRC\n          encoding: GPB\n      - id: 55\n        destination:\n          ip: 192.168.0.55\n          port: 60001\n          protocol: gPRC\n          encoding: GPB\n      sensor_groups:\n      - id: 1\n        data_source: NX-API\n        path:\n          name: '\"show lldp neighbors detail\"'\n          depth: 0\n      - id: 55\n        data_source: DME\n        path:\n          name: sys/ch\n          depth: unbounded\n          filter_condition: ne(eqptFt.operSt,\"ok\")\n      subscriptions:\n      - id: 5\n        destination_group: 55\n        sensor_group:\n          id: 1\n          sample_interval: 1000\n      - id: 6\n        destination_group: 2\n        sensor_group:\n          id: 55\n          sample_interval: 2000\n    state: merged\n\n\n# Using replaced\n# This action will replace telemetry configuration on the device with the\n# telemetry configuration defined in the playbook.\n\n- name: Override Telemetry Configuration\n  cisco.nxos.nxos_telemetry:\n    config:\n      certificate:\n        key: /bootflash/server.key\n        hostname: localhost\n      compression: gzip\n      source_interface: Ethernet1/1\n      vrf: management\n      destination_groups:\n      - id: 2\n        destination:\n          ip: 192.168.0.2\n          port: 50001\n          protocol: gPRC\n          encoding: GPB\n      subscriptions:\n      - id: 5\n        destination_group: 55\n    state: replaced\n\n\n"
  },
  "cisco.nxos.nxos_udld": {
    "doc": {
      "description": "Manages UDLD global configuration params.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nModule will fail if the udld feature has not been previously enabled.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "aggressive": {
          "aliases": [],
          "description": "Toggles aggressive mode.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "msg_time": {
          "aliases": [],
          "description": "Message time in seconds for UDLD packets or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "reset": {
          "aliases": [],
          "description": "Ability to reset all ports shut down by UDLD. 'state' parameter cannot be 'absent' when this is present.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource. When set to 'absent', aggressive and msg_time are set to their default values.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages UDLD global configuration params.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ensure udld aggressive mode is globally disabled and se global message interval is 20\n- cisco.nxos.nxos_udld:\n    aggressive: disabled\n    msg_time: 20\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n\n# Ensure agg mode is globally enabled and msg time is 15\n- cisco.nxos.nxos_udld:\n    aggressive: enabled\n    msg_time: 15\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n"
  },
  "cisco.nxos.nxos_udld_interface": {
    "doc": {
      "description": "Manages UDLD interface configuration params.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nFeature UDLD must be enabled on the device to use this module.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "interface": {
          "aliases": [],
          "description": "FULL name of the interface, i.e. Ethernet1/1-",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Manages UDLD mode for an interface.",
          "type": "str",
          "required": true,
          "choices": [
            "enabled",
            "disabled",
            "aggressive"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages UDLD interface configuration params.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ensure Ethernet1/1 is configured to be in aggressive mode\n- cisco.nxos.nxos_udld_interface:\n    interface: Ethernet1/1\n    mode: aggressive\n    state: present\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n\n# Remove the aggressive config only if it's currently in aggressive mode and then disable udld (switch default)\n- cisco.nxos.nxos_udld_interface:\n    interface: Ethernet1/1\n    mode: aggressive\n    state: absent\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n\n# ensure Ethernet1/1 has aggressive mode enabled\n- cisco.nxos.nxos_udld_interface:\n    interface: Ethernet1/1\n    mode: enabled\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n"
  },
  "cisco.nxos.nxos_user": {
    "doc": {
      "description": "This module provides declarative management of the local usernames configured on Cisco Nexus devices.  It allows playbooks to manage either individual usernames or the collection of usernames in the current running config.  It also supports purging usernames from the configuration that are not explicitly defined.",
      "has_action": true,
      "notes": "Limited Support for Cisco MDS\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "aggregate": {
          "aliases": [
            "users",
            "collection"
          ],
          "description": "The set of username objects to be configured on the remote Cisco Nexus device.  The list entries can either be the username or a hash of username and properties.  This argument is mutually exclusive with the C(name) argument.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "configured_password": {
              "aliases": [],
              "description": "The password to be configured on the network device. The password needs to be provided in cleartext and it will be encrypted on the device. Please note that this option is not same as C(provider password).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The username to be configured on the remote Cisco Nexus device.  This argument accepts a string value and is mutually exclusive with the C(aggregate) argument.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "roles": {
              "aliases": [
                "role"
              ],
              "description": "The C(role) argument configures the role for the username in the device running configuration.  The argument accepts a string value defining the role name.  This argument does not check if the role has been configured on the device.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "sshkey": {
              "aliases": [],
              "description": "The C(sshkey) argument defines the SSH public key to configure for the username.  This argument accepts a valid SSH key value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The C(state) argument configures the state of the username definition as it relates to the device operational configuration.  When set to I(present), the username(s) should be configured in the device active configuration and when set to I(absent) the username(s) should not be in the device active configuration",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "update_password": {
              "aliases": [],
              "description": "Since passwords are encrypted in the device running config, this argument will instruct the module when to change the password.  When set to C(always), the password will always be updated in the device and when set to C(on_create) the password will be updated only if the username is created.",
              "type": "str",
              "required": false,
              "choices": [
                "on_create",
                "always"
              ],
              "suboptions": {}
            }
          }
        },
        "configured_password": {
          "aliases": [],
          "description": "The password to be configured on the network device. The password needs to be provided in cleartext and it will be encrypted on the device. Please note that this option is not same as C(provider password).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The username to be configured on the remote Cisco Nexus device.  This argument accepts a string value and is mutually exclusive with the C(aggregate) argument.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "purge": {
          "aliases": [],
          "description": "The C(purge) argument instructs the module to consider the resource definition absolute.  It will remove any previously configured usernames on the device with the exception of the `admin` user which cannot be deleted per nxos constraints.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "roles": {
          "aliases": [
            "role"
          ],
          "description": "The C(role) argument configures the role for the username in the device running configuration.  The argument accepts a string value defining the role name.  This argument does not check if the role has been configured on the device.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sshkey": {
          "aliases": [],
          "description": "The C(sshkey) argument defines the SSH public key to configure for the username.  This argument accepts a valid SSH key value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The C(state) argument configures the state of the username definition as it relates to the device operational configuration.  When set to I(present), the username(s) should be configured in the device active configuration and when set to I(absent) the username(s) should not be in the device active configuration",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "Since passwords are encrypted in the device running config, this argument will instruct the module when to change the password.  When set to C(always), the password will always be updated in the device and when set to C(on_create) the password will be updated only if the username is created.",
          "default": "always",
          "type": "str",
          "required": false,
          "choices": [
            "on_create",
            "always"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage the collection of local users on Nexus devices",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: create a new user\n  cisco.nxos.nxos_user:\n    name: ansible\n    sshkey: \"{{ lookup('file', '~/.ssh/id_rsa.pub') }}\"\n    state: present\n\n- name: remove all users except admin\n  cisco.nxos.nxos_user:\n    purge: yes\n\n- name: set multiple users role\n  cisco.nxos.nxos_user:\n    aggregate:\n    - name: netop\n    - name: netend\n    role: network-operator\n  state: present\n"
  },
  "cisco.nxos.nxos_vlan": {
    "doc": {
      "description": "Manages VLAN configurations on NX-OS switches.",
      "has_action": true,
      "notes": "For information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "admin_state": {
          "aliases": [],
          "description": "Manage the VLAN administrative state of the VLAN equivalent to shut/no shut in VLAN config mode.",
          "default": "up",
          "type": "str",
          "required": false,
          "choices": [
            "up",
            "down"
          ],
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [],
          "description": "List of VLANs definitions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "admin_state": {
              "aliases": [],
              "description": "Manage the VLAN administrative state of the VLAN equivalent to shut/no shut in VLAN config mode.",
              "type": "str",
              "required": false,
              "choices": [
                "up",
                "down"
              ],
              "suboptions": {}
            },
            "associated_interfaces": {
              "aliases": [],
              "description": "This is a intent option and checks the operational state of the for given vlan C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vlan interfaces on device it will result in failure.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "delay": {
              "aliases": [],
              "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "interfaces": {
              "aliases": [],
              "description": "List of interfaces that should be associated to the VLAN or keyword 'default'.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "mapped_vni": {
              "aliases": [],
              "description": "The Virtual Network Identifier (VNI) ID that is mapped to the VLAN. Valid values are integer and keyword 'default'. Range 4096-16773119.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Set VLAN mode to classical ethernet or fabricpath. This is a valid option for Nexus 5000 and 7000 series.",
              "type": "str",
              "required": false,
              "choices": [
                "ce",
                "fabricpath"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of VLAN or keyword 'default'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Manage the state of the resource.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "vlan_id": {
              "aliases": [],
              "description": "Single VLAN ID.",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "vlan_range": {
              "aliases": [],
              "description": "Range of VLANs such as 2-10 or 2,5,10-15, etc.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vlan_state": {
              "aliases": [],
              "description": "Manage the vlan operational state of the VLAN",
              "type": "str",
              "required": false,
              "choices": [
                "active",
                "suspend"
              ],
              "suboptions": {}
            }
          }
        },
        "associated_interfaces": {
          "aliases": [],
          "description": "This is a intent option and checks the operational state of the for given vlan C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vlan interfaces on device it will result in failure.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of interfaces that should be associated to the VLAN or keyword 'default'.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "mapped_vni": {
          "aliases": [],
          "description": "The Virtual Network Identifier (VNI) ID that is mapped to the VLAN. Valid values are integer and keyword 'default'. Range 4096-16773119.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Set VLAN mode to classical ethernet or fabricpath. This is a valid option for Nexus 5000 and 7000 series.",
          "default": "ce",
          "type": "str",
          "required": false,
          "choices": [
            "ce",
            "fabricpath"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of VLAN or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "purge": {
          "aliases": [],
          "description": "Purge VLANs not defined in the I(aggregate) parameter. This parameter can be used without aggregate as well.\nRemoval of Vlan 1 is not allowed and will be ignored by purge.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "Single VLAN ID.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vlan_range": {
          "aliases": [],
          "description": "Range of VLANs such as 2-10 or 2,5,10-15, etc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vlan_state": {
          "aliases": [],
          "description": "Manage the vlan operational state of the VLAN",
          "default": "active",
          "type": "str",
          "required": false,
          "choices": [
            "active",
            "suspend"
          ],
          "suboptions": {}
        }
      },
      "short_description": "(deprecated, removed after 2022-06-01) Manages VLAN resources and attributes.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure a range of VLANs are not present on the switch\n  cisco.nxos.nxos_vlan:\n    vlan_range: 2-10,20,50,55-60,100-150\n    state: absent\n\n- name: Ensure VLAN 50 exists with the name WEB and is in the shutdown state\n  cisco.nxos.nxos_vlan:\n    vlan_id: 50\n    admin_state: down\n    name: WEB\n\n- name: Ensure VLAN is NOT on the device\n  cisco.nxos.nxos_vlan:\n    vlan_id: 50\n    state: absent\n\n- name: Add interfaces to VLAN and check intent (config + intent)\n  cisco.nxos.nxos_vlan:\n    vlan_id: 100\n    interfaces:\n    - Ethernet2/1\n    - Ethernet2/5\n    associated_interfaces:\n    - Ethernet2/1\n    - Ethernet2/5\n\n- name: Check interfaces assigned to VLAN\n  cisco.nxos.nxos_vlan:\n    vlan_id: 100\n    associated_interfaces:\n    - Ethernet2/1\n    - Ethernet2/5\n\n- name: Create aggregate of vlans\n  cisco.nxos.nxos_vlan:\n    aggregate:\n    - {vlan_id: 4000, mode: ce}\n    - {vlan_id: 4001, name: vlan-4001}\n\n- name: purge vlans - removes all other vlans except the ones mentioned in aggregate)\n  cisco.nxos.nxos_vlan:\n    aggregate:\n    - vlan_id: 1\n    - vlan_id: 4001\n    purge: yes\n\n"
  },
  "cisco.nxos.nxos_vlans": {
    "doc": {
      "description": "This module creates and manages VLAN configurations on Cisco NX-OS.",
      "has_action": true,
      "notes": "Tested against NXOS 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS",
      "options": {
        "config": {
          "aliases": [],
          "description": "A dictionary of Vlan options",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Manage administrative state of the vlan.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mapped_vni": {
              "aliases": [],
              "description": "The Virtual Network Identifier (VNI) ID that is mapped to the VLAN.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "Set vlan mode to classical ethernet or fabricpath. This is a valid option for Nexus 5000, 6000 and 7000 series.",
              "type": "str",
              "required": false,
              "choices": [
                "ce",
                "fabricpath"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of VLAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Manage operational state of the vlan.",
              "type": "str",
              "required": false,
              "choices": [
                "active",
                "suspend"
              ],
              "suboptions": {}
            },
            "vlan_id": {
              "aliases": [],
              "description": "Vlan ID.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "running_config": {
          "aliases": [],
          "description": "This option is used only with state I(parsed).\nThe value of this option should be the output received from the NX-OS device by executing the commands B(show vlans | json-pretty) and B(show running-config | section ^vlan) in order and delimited by a line.\nThe state I(parsed) reads the configuration from C(running_config) option and transforms it into Ansible structured data as per the resource module's argspec and the value is then returned in the I(parsed) key within the result.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the configuration after module completion.\nThe state I(overridden) would override the configuration of all the VLANs on the device (including VLAN 1) with the provided configuration in the task. Use caution with this state.",
          "default": "merged",
          "type": "str",
          "required": false,
          "choices": [
            "merged",
            "replaced",
            "overridden",
            "deleted",
            "gathered",
            "rendered",
            "parsed"
          ],
          "suboptions": {}
        }
      },
      "short_description": "VLANs resource module",
      "version_added": "1.0.0"
    },
    "examples": "\n# Using merged\n\n# Before state:\n# -------------\n# vlan 1\n\n- name: Merge provided configuration with device configuration.\n  cisco.nxos.nxos_vlans:\n    config:\n    - vlan_id: 5\n      name: test-vlan5\n    - vlan_id: 10\n      enabled: false\n    state: merged\n\n# After state:\n# ------------\n# vlan 5\n#   name test-vlan5\n#   state active\n#   no shutdown\n# vlan 10\n#   state active\n#   shutdown\n\n\n# Using replaced\n\n# Before state:\n# -------------\n# vlan 1\n# vlan 5\n#   name test-vlan5\n# vlan 10\n#   shutdown\n\n- name: Replace device configuration of specified vlan with provided configuration.\n  cisco.nxos.nxos_vlans:\n    config:\n    - vlan_id: 5\n      name: test-vlan\n      enabled: false\n    - vlan_id: 10\n      enabled: false\n    state: replaced\n\n# After state:\n# ------------\n# vlan 1\n# vlan 5\n#   name test-vlan\n#   state active\n#   shutdown\n# vlan 10\n#   state active\n#   shutdown\n\n\n# Using overridden\n\n# Before state:\n# -------------\n# vlan 1\n# vlan 3\n#   name testing\n# vlan 5\n#   name test-vlan5\n#   shutdown\n# vlan 10\n#   shutdown\n\n- name: Override device configuration of all vlans with provided configuration.\n  cisco.nxos.nxos_vlans:\n    config:\n    - vlan_id: 5\n      name: test-vlan\n    - vlan_id: 10\n      state: active\n    state: overridden\n\n# After state:\n# ------------\n# vlan 5\n#   name test-vlan\n#   state active\n#   no shutdown\n# vlan 10\n#   state active\n#   no shutdown\n\n\n# Using deleted\n\n# Before state:\n# -------------\n# vlan 1\n# vlan 5\n# vlan 10\n\n- name: Delete vlans.\n  cisco.nxos.nxos_vlans:\n    config:\n    - vlan_id: 5\n    - vlan_id: 10\n    state: deleted\n\n# After state:\n# ------------\n#\n\n# Using rendered\n\n- name: Use rendered state to convert task input to device specific commands\n  cisco.nxos.nxos_vlans:\n    config:\n    - vlan_id: 5\n      name: vlan5\n      mapped_vni: 100\n\n    - vlan_id: 6\n      name: vlan6\n      state: suspend\n    state: rendered\n\n# Task Output (redacted)\n# -----------------------\n\n# rendered:\n#   - vlan 5\n#   - name vlan5\n#   - vn-segment 100\n#   - vlan 6\n#   - name vlan6\n#   - state suspend\n\n# Using parsed\n\n# parsed.cfg\n# ------------\n# {\n#     \"TABLE_vlanbrief\": {\n#        \"ROW_vlanbrief\": [\n#            {\n#                \"vlanshowbr-vlanid\": \"1\",\n#                \"vlanshowbr-vlanid-utf\": \"1\",\n#                \"vlanshowbr-vlanname\": \"default\",\n#                \"vlanshowbr-vlanstate\": \"active\",\n#                \"vlanshowbr-shutstate\": \"noshutdown\"\n#            },\n#            {\n#                \"vlanshowbr-vlanid\": \"5\",\n#                \"vlanshowbr-vlanid-utf\": \"5\",\n#                \"vlanshowbr-vlanname\": \"vlan5\",\n#                \"vlanshowbr-vlanstate\": \"suspend\",\n#                \"vlanshowbr-shutstate\": \"noshutdown\"\n#            },\n#            {\n#                \"vlanshowbr-vlanid\": \"6\",\n#                \"vlanshowbr-vlanid-utf\": \"6\",\n#                \"vlanshowbr-vlanname\": \"VLAN0006\",\n#                \"vlanshowbr-vlanstate\": \"active\",\n#                \"vlanshowbr-shutstate\": \"noshutdown\"\n#            },\n#            {\n#                \"vlanshowbr-vlanid\": \"7\",\n#                \"vlanshowbr-vlanid-utf\": \"7\",\n#                \"vlanshowbr-vlanname\": \"vlan7\",\n#                \"vlanshowbr-vlanstate\": \"active\",\n#                \"vlanshowbr-shutstate\": \"noshutdown\"\n#            }\n#        ]\n#    },\n#    \"TABLE_mtuinfo\": {\n#        \"ROW_mtuinfo\": [\n#            {\n#                \"vlanshowinfo-vlanid\": \"1\",\n#                \"vlanshowinfo-media-type\": \"enet\",\n#                \"vlanshowinfo-vlanmode\": \"ce-vlan\"\n#            },\n#            {\n#                \"vlanshowinfo-vlanid\": \"5\",\n#                \"vlanshowinfo-media-type\": \"enet\",\n#                \"vlanshowinfo-vlanmode\": \"ce-vlan\"\n#            },\n#            {\n#                \"vlanshowinfo-vlanid\": \"6\",\n#                \"vlanshowinfo-media-type\": \"enet\",\n#                \"vlanshowinfo-vlanmode\": \"ce-vlan\"\n#            },\n#            {\n#                \"vlanshowinfo-vlanid\": \"7\",\n#                \"vlanshowinfo-media-type\": \"enet\",\n#                \"vlanshowinfo-vlanmode\": \"ce-vlan\"\n#             }\n#        ]\n#    }\n# }\n#\n# vlan 1,5-7\n# vlan 5\n#   state suspend\n#   name vlan5\n# vlan 7\n#   name vlan7\n#   vn-segment 100\n\n- name: Use parsed state to convert externally supplied config to structured format\n  cisco.nxos.nxos_vlans:\n    running_config: \"{{ lookup('file', 'parsed.cfg') }}\"\n    state: parsed\n\n# Task output (redacted)\n# -----------------------\n\n# parsed:\n#   - vlan_id: 5\n#     enabled: True\n#     mode: \"ce\"\n#     name: \"vlan5\"\n#     state: suspend\n#\n#   - vlan_id: 6\n#     enabled: True\n#     mode: \"ce\"\n#     state: active\n#\n#   - vlan_id: 7\n#     enabled: True\n#     mode: \"ce\"\n#     name: \"vlan7\"\n#     state: active\n#     mapped_vni: 100\n\n# Using gathered\n\n# Existing device config state\n# -------------------------------\n# nxos-9k# show vlan | json\n# {\"TABLE_vlanbrief\": {\"ROW_vlanbrief\": [{\"vlanshowbr-vlanid\": \"1\", \"vlanshowbr-vlanid-utf\": \"1\", \"vlanshowbr-vlanname\": \"default\", \"vlanshowbr-vlanstate\n# \": \"active\", \"vlanshowbr-shutstate\": \"noshutdown\"}, {\"vlanshowbr-vlanid\": \"5\", \"vlanshowbr-vlanid-utf\": \"5\", \"vlanshowbr-vlanname\": \"vlan5\", \"vlanshowb\n# r-vlanstate\": \"suspend\", \"vlanshowbr-shutstate\": \"noshutdown\"}, {\"vlanshowbr-vlanid\": \"6\", \"vlanshowbr-vlanid-utf\": \"6\", \"vlanshowbr-vlanname\": \"VLAN00\n# 06\", \"vlanshowbr-vlanstate\": \"active\", \"vlanshowbr-shutstate\": \"noshutdown\"}, {\"vlanshowbr-vlanid\": \"7\", \"vlanshowbr-vlanid-utf\": \"7\", \"vlanshowbr-vlan\n# name\": \"vlan7\", \"vlanshowbr-vlanstate\": \"active\", \"vlanshowbr-shutstate\": \"shutdown\"}]}, \"TABLE_mtuinfo\": {\"ROW_mtuinfo\": [{\"vlanshowinfo-vlanid\": \"1\",\n# \"vlanshowinfo-media-type\": \"enet\", \"vlanshowinfo-vlanmode\": \"ce-vlan\"}, {\"vlanshowinfo-vlanid\": \"5\", \"vlanshowinfo-media-type\": \"enet\", \"vlanshowinfo-\n# vlanmode\": \"ce-vlan\"}, {\"vlanshowinfo-vlanid\": \"6\", \"vlanshowinfo-media-type\": \"enet\", \"vlanshowinfo-vlanmode\": \"ce-vlan\"}, {\"vlanshowinfo-vlanid\": \"7\"\n# , \"vlanshowinfo-media-type\": \"enet\", \"vlanshowinfo-vlanmode\": \"ce-vlan\"}]}}\n#\n# nxos-9k#  show running-config | section ^vlan\n# vlan 1,5-7\n# vlan 5\n#   state suspend\n#   name vlan5\n# vlan 7\n#   shutdown\n#   name vlan7\n#   vn-segment 190\n\n- name: Gather vlans facts from the device using nxos_vlans\n  cisco.nxos.nxos_vlans:\n    state: gathered\n\n# Task output (redacted)\n# -----------------------\n# gathered:\n#   - vlan_id: 5\n#     enabled: True\n#     mode: \"ce\"\n#     name: \"vlan5\"\n#     state: suspend\n#\n#   - vlan_id: 6\n#     enabled: True\n#     mode: \"ce\"\n#     state: active\n#\n#   - vlan_id: 7\n#     enabled: False\n#     mode: \"ce\"\n#     name: \"vlan7\"\n#     state: active\n#     mapped_vni: 190\n"
  },
  "cisco.nxos.nxos_vpc": {
    "doc": {
      "description": "Manages global VPC configuration",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nThe feature vpc must be enabled before this module can be used\nIf not using management vrf, vrf must be globally on the device before using in the pkl config\nAlthough source IP isn't required on the command line it is required when using this module.  The PKL VRF must also be configured prior to using this module.\nBoth pkl_src and pkl_dest are needed when changing PKL VRF.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "auto_recovery": {
          "aliases": [],
          "description": "Enables/Disables auto recovery on platforms that support disable\ntimers are not modifiable with this attribute\nmutually exclusive with auto_recovery_reload_delay",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auto_recovery_reload_delay": {
          "aliases": [],
          "description": "Manages auto-recovery reload-delay timer in seconds\nmutually exclusive with auto_recovery",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "delay_restore": {
          "aliases": [],
          "description": "manages delay restore command and config value in seconds",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "delay_restore_interface_vlan": {
          "aliases": [],
          "description": "manages delay restore interface-vlan command and config value in seconds\nnot supported on all platforms",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "delay_restore_orphan_port": {
          "aliases": [],
          "description": "manages delay restore orphan-port command and config value in seconds\nnot supported on all platforms",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "VPC domain",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "peer_gw": {
          "aliases": [],
          "description": "Enables/Disables peer gateway",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pkl_dest": {
          "aliases": [],
          "description": "Destination (remote) IP address used for peer keepalive link\npkl_dest is required whenever pkl options are used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pkl_src": {
          "aliases": [],
          "description": "Source IP address used for peer keepalive link",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pkl_vrf": {
          "aliases": [],
          "description": "VRF used for peer keepalive link\nThe VRF must exist on the device before using pkl_vrf.\n(Note) 'default' is an overloaded term: Default vrf context for pkl_vrf is 'management'; 'pkl_vrf: default' refers to the literal 'default' rib.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "role_priority": {
          "aliases": [],
          "description": "Role priority for device. Remember lower is better.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manages desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "system_priority": {
          "aliases": [],
          "description": "System priority device.  Remember they must match between peers.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages global VPC configuration",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: configure a simple asn\n  cisco.nxos.nxos_vpc:\n    domain: 100\n    role_priority: 1000\n    system_priority: 2000\n    pkl_dest: 192.168.100.4\n    pkl_src: 10.1.100.20\n    peer_gw: true\n    auto_recovery: true\n\n- name: configure\n  cisco.nxos.nxos_vpc:\n    domain: 100\n    role_priority: 32667\n    system_priority: 2000\n    peer_gw: true\n    pkl_src: 10.1.100.2\n    pkl_dest: 192.168.100.4\n    auto_recovery: true\n\n- name: Configure VPC with delay restore and existing keepalive VRF\n  cisco.nxos.nxos_vpc:\n    domain: 10\n    role_priority: 28672\n    system_priority: 2000\n    delay_restore: 180\n    peer_gw: true\n    pkl_src: 1.1.1.2\n    pkl_dest: 1.1.1.1\n    pkl_vrf: vpckeepalive\n    auto_recovery: true\n"
  },
  "cisco.nxos.nxos_vpc_interface": {
    "doc": {
      "description": "Manages interface VPC configuration",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nEither vpc or peer_link param is required, but not both.\nC(state=absent) removes whatever VPC config is on a port-channel if one exists.\nRe-assigning a vpc or peerlink from one portchannel to another is not supported.  The module will force the user to unconfigure an existing vpc/pl before configuring the same value on a new portchannel\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "peer_link": {
          "aliases": [],
          "description": "Set to true/false for peer link config on associated portchannel.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "portchannel": {
          "aliases": [],
          "description": "Group number of the portchannel that will be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manages desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "VPC group/id that will be configured on associated portchannel.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages interface VPC configuration",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_vpc_interface:\n    portchannel: 10\n    vpc: 100\n"
  },
  "cisco.nxos.nxos_vrf": {
    "doc": {
      "description": "This module provides declarative management of VRFs on CISCO NXOS network devices.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nCisco NX-OS creates the default VRF by itself. Therefore, you're not allowed to use default as I(vrf) name in this module.\nC(vrf) name must be shorter than 32 chars.\nVRF names are not case sensible in NX-OS. Anyway, the name is stored just like it's inserted by the user and it'll not be changed again unless the VRF is removed and re-created. i.e. C(vrf=NTC) will create a VRF named NTC, but running it again with C(vrf=ntc) will not cause a configuration change.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "admin_state": {
          "aliases": [],
          "description": "Administrative state of the VRF.",
          "default": "up",
          "type": "str",
          "required": false,
          "choices": [
            "up",
            "down"
          ],
          "suboptions": {}
        },
        "aggregate": {
          "aliases": [],
          "description": "List of VRFs definitions.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "admin_state": {
              "aliases": [],
              "description": "Administrative state of the VRF.",
              "type": "str",
              "required": false,
              "choices": [
                "up",
                "down"
              ],
              "suboptions": {}
            },
            "associated_interfaces": {
              "aliases": [],
              "description": "This is a intent option and checks the operational state of the for given vrf C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vrf interfaces on device it will result in failure.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "delay": {
              "aliases": [],
              "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Description of the VRF or keyword 'default'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "interfaces": {
              "aliases": [],
              "description": "List of interfaces to check the VRF has been configured correctly or keyword 'default'.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "name": {
              "aliases": [
                "vrf"
              ],
              "description": "Name of VRF to be managed.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rd": {
              "aliases": [],
              "description": "VPN Route Distinguisher (RD). Valid values are a string in one of the route-distinguisher formats (ASN2:NN, ASN4:NN, or IPV4:NN); the keyword 'auto', or the keyword 'default'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Manages desired state of the resource.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "vni": {
              "aliases": [],
              "description": "Specify virtual network identifier. Valid values are Integer or keyword 'default'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "associated_interfaces": {
          "aliases": [],
          "description": "This is a intent option and checks the operational state of the for given vrf C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vrf interfaces on device it will result in failure.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the VRF or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of interfaces to check the VRF has been configured correctly or keyword 'default'.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "vrf"
          ],
          "description": "Name of VRF to be managed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "purge": {
          "aliases": [],
          "description": "Purge VRFs not defined in the I(aggregate) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rd": {
          "aliases": [],
          "description": "VPN Route Distinguisher (RD). Valid values are a string in one of the route-distinguisher formats (ASN2:NN, ASN4:NN, or IPV4:NN); the keyword 'auto', or the keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manages desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vni": {
          "aliases": [],
          "description": "Specify virtual network identifier. Valid values are Integer or keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages global VRF configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure ntc VRF exists on switch\n  cisco.nxos.nxos_vrf:\n    name: ntc\n    description: testing\n    state: present\n\n- name: Aggregate definition of VRFs\n  cisco.nxos.nxos_vrf:\n    aggregate:\n    - {name: test1, description: Testing, admin_state: down}\n    - {name: test2, interfaces: Ethernet1/2}\n\n- name: Aggregate definitions of VRFs with Purge\n  cisco.nxos.nxos_vrf:\n    aggregate:\n    - {name: ntc1, description: purge test1}\n    - {name: ntc2, description: purge test2}\n    state: present\n    purge: yes\n\n- name: Delete VRFs exist on switch\n  cisco.nxos.nxos_vrf:\n    aggregate:\n    - {name: ntc1}\n    - {name: ntc2}\n    state: absent\n\n- name: Assign interfaces to VRF declaratively\n  cisco.nxos.nxos_vrf:\n    name: test1\n    interfaces:\n    - Ethernet2/3\n    - Ethernet2/5\n\n- name: Check interfaces assigned to VRF\n  cisco.nxos.nxos_vrf:\n    name: test1\n    associated_interfaces:\n    - Ethernet2/3\n    - Ethernet2/5\n\n- name: Ensure VRF is tagged with interface Ethernet2/5 only (Removes from Ethernet2/3)\n  cisco.nxos.nxos_vrf:\n    name: test1\n    interfaces:\n    - Ethernet2/5\n\n- name: Delete VRF\n  cisco.nxos.nxos_vrf:\n    name: ntc\n    state: absent\n"
  },
  "cisco.nxos.nxos_vrf_af": {
    "doc": {
      "description": "Manages VRF AF",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nDefault, where supported, restores params default value.\nIn case of C(state=absent) the address-family configuration will be absent. Therefore the options C(route_target_both_auto_evpn) and C(route_targets) are ignored.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "afi": {
          "aliases": [],
          "description": "Address-Family Identifier (AFI).",
          "type": "str",
          "required": true,
          "choices": [
            "ipv4",
            "ipv6"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "route_target_both_auto_evpn": {
          "aliases": [],
          "description": "Enable/Disable the EVPN route-target 'auto' setting for both import and export target communities.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "route_targets": {
          "aliases": [],
          "description": "Specify the route-targets which should be imported and/or exported under the AF. This argument accepts a list of dicts that specify the route-target, the direction (import|export|both) and state of each route-target. Default direction is C(direction=both). See examples.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "direction": {
              "aliases": [],
              "description": "Indicates the direction of the route-target (import|export|both)",
              "default": "both",
              "type": "str",
              "required": false,
              "choices": [
                "import",
                "export",
                "both"
              ],
              "suboptions": {}
            },
            "rt": {
              "aliases": [],
              "description": "Defines the route-target itself",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Determines whether the route-target with the given direction should be present or not on the device.",
              "default": "present",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Name of the VRF.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages VRF AF.",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_vrf_af:\n    vrf: ntc\n    afi: ipv4\n    route_target_both_auto_evpn: true\n    state: present\n\n- cisco.nxos.nxos_vrf_af:\n    vrf: ntc\n    afi: ipv4\n    route_targets:\n    - rt: 65000:1000\n      direction: import\n    - rt: 65001:1000\n      direction: import\n\n- cisco.nxos.nxos_vrf_af:\n    vrf: ntc\n    afi: ipv4\n    route_targets:\n    - rt: 65000:1000\n      direction: import\n    - rt: 65001:1000\n      state: absent\n\n- cisco.nxos.nxos_vrf_af:\n    vrf: ntc\n    afi: ipv4\n    route_targets:\n    - rt: 65000:1000\n      direction: export\n    - rt: 65001:1000\n      direction: export\n\n- cisco.nxos.nxos_vrf_af:\n    vrf: ntc\n    afi: ipv4\n    route_targets:\n    - rt: 65000:1000\n      direction: export\n      state: absent\n\n- cisco.nxos.nxos_vrf_af:\n    vrf: ntc\n    afi: ipv4\n    route_targets:\n    - rt: 65000:1000\n      direction: both\n      state: present\n    - rt: 65001:1000\n      direction: import\n      state: present\n    - rt: 65002:1000\n      direction: both\n      state: absent\n"
  },
  "cisco.nxos.nxos_vrf_interface": {
    "doc": {
      "description": "Manages interface specific VRF configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nVRF needs to be added globally with M(cisco.nxos.nxos_vrf) before adding a VRF to an interface.\nRemove a VRF from an interface will still remove all L3 attributes just as it does from CLI.\nVRF is not read from an interface until IP address is configured on that interface.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "interface": {
          "aliases": [],
          "description": "Full name of interface to be managed, i.e. Ethernet1/1.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manages desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vrf": {
          "aliases": [],
          "description": "Name of VRF to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages interface specific VRF configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure vrf ntc exists on Eth1/1\n  cisco.nxos.nxos_vrf_interface:\n    vrf: ntc\n    interface: Ethernet1/1\n    state: present\n\n- name: Ensure ntc VRF does not exist on Eth1/1\n  cisco.nxos.nxos_vrf_interface:\n    vrf: ntc\n    interface: Ethernet1/1\n    state: absent\n"
  },
  "cisco.nxos.nxos_vrrp": {
    "doc": {
      "description": "Manages VRRP configuration on NX-OS switches.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nVRRP feature needs to be enabled first on the system.\nSVIs must exist before using this module.\nInterface must be a L3 port before using this module.\nC(state=absent) removes the VRRP group if it exists on the device.\nVRRP cannot be configured on loopback interfaces.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "admin_state": {
          "aliases": [],
          "description": "Used to enable or disable the VRRP process.",
          "default": "shutdown",
          "type": "str",
          "required": false,
          "choices": [
            "shutdown",
            "no shutdown",
            "default"
          ],
          "suboptions": {}
        },
        "authentication": {
          "aliases": [],
          "description": "Clear text authentication string or 'default' keyword",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "VRRP group number.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Full name of interface that is being managed for VRRP.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "Time interval between advertisement or 'default' keyword",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "preempt": {
          "aliases": [],
          "description": "Enable/Disable preempt.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "VRRP priority or 'default' keyword",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specify desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vip": {
          "aliases": [],
          "description": "VRRP virtual IP address or 'default' keyword",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages VRRP configuration on NX-OS switches.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Ensure vrrp group 100 and vip 10.1.100.1 is on vlan10\n  cisco.nxos.nxos_vrrp:\n    interface: vlan10\n    group: 100\n    vip: 10.1.100.1\n\n- name: Ensure removal of the vrrp group config\n  cisco.nxos.nxos_vrrp:\n    interface: vlan10\n    group: 100\n    vip: 10.1.100.1\n    state: absent\n\n- name: Re-config with more params\n  cisco.nxos.nxos_vrrp:\n    interface: vlan10\n    group: 100\n    vip: 10.1.100.1\n    preempt: false\n    priority: 130\n    authentication: AUTHKEY\n"
  },
  "cisco.nxos.nxos_vsan": {
    "doc": {
      "description": "Configuration of vsan for Cisco MDS NXOS.",
      "has_action": true,
      "notes": "Tested against Cisco MDS NX-OS 8.4(1)",
      "options": {
        "vsan": {
          "aliases": [],
          "description": "List of vsan details to be added or removed",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "id": {
              "aliases": [],
              "description": "Vsan id",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "interface": {
              "aliases": [],
              "description": "List of vsan's interfaces to be added",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the vsan",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "remove": {
              "aliases": [],
              "description": "Removes the vsan if True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "suspend": {
              "aliases": [],
              "description": "suspend the vsan if True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Configuration of vsan for Cisco NXOS MDS Switches.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Test that vsan module works\n  cisco.nxos.nxos_vsan:\n    vsan:\n    - id: 922\n      interface:\n      - fc1/1\n      - fc1/2\n      - port-channel 1\n      name: vsan-SAN-A\n      remove: false\n      suspend: false\n    - id: 923\n      interface:\n      - fc1/11\n      - fc1/21\n      - port-channel 2\n      name: vsan-SAN-B\n      remove: false\n      suspend: true\n    - id: 1923\n      name: vsan-SAN-Old\n      remove: true\n"
  },
  "cisco.nxos.nxos_vtp_domain": {
    "doc": {
      "description": "Manages VTP domain configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nVTP feature must be active on the device to use this module.\nThis module is used to manage only VTP domain names.\nVTP domain names are case-sensible.\nIf it's never been configured before, VTP version is set to 1 by default. Otherwise, it leaves the previous configured version untouched. Use M(cisco.nxos.nxos_vtp_version) to change it.\nUse this in combination with M(cisco.nxos.nxos_vtp_password) and M(cisco.nxos.nxos_vtp_version) to fully manage VTP operations.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "domain": {
          "aliases": [],
          "description": "VTP domain name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Manages VTP domain configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ENSURE VTP DOMAIN IS CONFIGURED\n- cisco.nxos.nxos_vtp_domain:\n    domain: ntc\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n"
  },
  "cisco.nxos.nxos_vtp_password": {
    "doc": {
      "description": "Manages VTP password configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nVTP feature must be active on the device to use this module.\nThis module is used to manage only VTP passwords.\nUse this in combination with M(cisco.nxos.nxos_vtp_domain) and M(cisco.nxos.nxos_vtp_version) to fully manage VTP operations.\nYou can set/remove password only if a VTP domain already exist.\nIf C(state=absent) and no C(vtp_password) is provided, it remove the current VTP password.\nIf C(state=absent) and C(vtp_password) is provided, the proposed C(vtp_password) has to match the existing one in order to remove it.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Manage the state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vtp_password": {
          "aliases": [],
          "description": "VTP password",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages VTP password configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ENSURE VTP PASSWORD IS SET\n- cisco.nxos.nxos_vtp_password:\n    state: present\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n\n# ENSURE VTP PASSWORD IS REMOVED\n- cisco.nxos.nxos_vtp_password:\n    state: absent\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n"
  },
  "cisco.nxos.nxos_vtp_version": {
    "doc": {
      "description": "Manages VTP version configuration.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nVTP feature must be active on the device to use this module.\nThis module is used to manage only VTP version.\nUse this in combination with M(cisco.nxos.nxos_vtp_password) and M(cisco.nxos.nxos_vtp_version) to fully manage VTP operations.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "version": {
          "aliases": [],
          "description": "VTP version number.",
          "type": "str",
          "required": true,
          "choices": [
            "1",
            "2"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages VTP version configuration.",
      "version_added": "1.0.0"
    },
    "examples": "\n# ENSURE VTP VERSION IS 2\n- cisco.nxos.nxos_vtp_version:\n    version: 2\n    host: '{{ inventory_hostname }}'\n    username: '{{ un }}'\n    password: '{{ pwd }}'\n"
  },
  "cisco.nxos.nxos_vxlan_vtep": {
    "doc": {
      "description": "Manages VXLAN Network Virtualization Endpoint (NVE) overlay interface that terminates VXLAN tunnels.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\nThe module is used to manage NVE properties, not to create NVE interfaces. Use M(cisco.nxos.nxos_interface) if you wish to do so.\nC(state=absent) removes the interface.\nDefault, where supported, restores params default value.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "description": {
          "aliases": [],
          "description": "Description of the NVE interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "global_ingress_replication_bgp": {
          "aliases": [],
          "description": "Configures ingress replication protocol as bgp for all VNIs. This is available on Nexus 9000 series switches running NX-OS software release 9.2(x) or higher.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "global_mcast_group_L2": {
          "aliases": [],
          "description": "Global multicast IP prefix for L2 VNIs or the keyword 'default'. This is available on Nexus 9000 series switches running NX-OS software release 9.2(x) or higher.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "global_mcast_group_L3": {
          "aliases": [],
          "description": "Global multicast IP prefix for L3 VNIs or the keyword 'default'. This is available on Nexus 9000 series switches running NX-OS software release 9.2(x) or higher.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "global_suppress_arp": {
          "aliases": [],
          "description": "Enables ARP suppression for all VNIs. This is available on NX-OS 9K series running 9.2.x or higher.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host_reachability": {
          "aliases": [],
          "description": "Specify mechanism for host reachability advertisement.  A Boolean value of 'true' indicates that BGP will be used for host reachability advertisement. A Boolean value of 'false' indicates that no protocol is used for host reachability advertisement. Other host reachability advertisement protocols (e.g. OpenFlow, controller, etc.) are not supported.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Interface name for the VXLAN Network Virtualization Endpoint.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "multisite_border_gateway_interface": {
          "aliases": [],
          "description": "Specify the loopback interface whose IP address should be used for the NVE Multisite Border-gateway Interface. This is available on specific Nexus 9000 series switches running NX-OS 7.0(3)I7(x) or higher. Specify \"default\" to remove an existing gateway config.",
          "type": "str",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "shutdown": {
          "aliases": [],
          "description": "Administratively shutdown the NVE interface.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "source_interface": {
          "aliases": [],
          "description": "Specify the loopback interface whose IP address should be used for the NVE interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_interface_hold_down_time": {
          "aliases": [],
          "description": "Suppresses advertisement of the NVE loopback address until the overlay has converged.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages VXLAN Network Virtualization Endpoint (NVE).",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_vxlan_vtep:\n    interface: nve1\n    description: default\n    host_reachability: true\n    source_interface: Loopback0\n    source_interface_hold_down_time: 30\n    shutdown: default\n    multisite_border_gateway_interface: Loopback0\n"
  },
  "cisco.nxos.nxos_vxlan_vtep_vni": {
    "doc": {
      "description": "Creates a Virtual Network Identifier member (VNI) for an NVE overlay interface.",
      "has_action": true,
      "notes": "Tested against NXOSv 7.3.(0)D1(1) on VIRL\nUnsupported for Cisco MDS\ndefault, where supported, restores params default value.\nFor information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`\nFor more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`\nFor more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.",
      "options": {
        "assoc_vrf": {
          "aliases": [],
          "description": "This attribute is used to identify and separate processing VNIs that are associated with a VRF and used for routing. The VRF and VNI specified with this command must match the configuration of the VNI under the VRF.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ingress_replication": {
          "aliases": [],
          "description": "Specifies mechanism for host reachability advertisement.",
          "type": "str",
          "required": false,
          "choices": [
            "bgp",
            "static",
            "default"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Interface name for the VXLAN Network Virtualization Endpoint.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "multicast_group": {
          "aliases": [],
          "description": "The multicast group (range) of the VNI. Valid values are string and keyword 'default'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "multisite_ingress_replication": {
          "aliases": [],
          "description": "Enables multisite ingress replication.",
          "type": "str",
          "required": false,
          "choices": [
            "disable",
            "enable",
            "optimized"
          ],
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "peer_list": {
          "aliases": [],
          "description": "Set the ingress-replication static peer list. Valid values are an array, a space-separated string of ip addresses, or the keyword 'default'.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "B(Deprecated)\nStarting with Ansible 2.5 we recommend using C(connection: network_cli).\nStarting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.\nThis option will be removed in a release after 2022-06-01.\nFor more information please see the U(https://docs.ansible.com/ansible/latest/network/user_guide/platform_nxos.html).\nHORIZONTALLINE\nA dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auth_pass": {
              "aliases": [],
              "description": "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authorize": {
              "aliases": [],
              "description": "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ssh_keyfile": {
              "aliases": [],
              "description": "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "transport": {
              "aliases": [],
              "description": "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi.",
              "default": "cli",
              "type": "str",
              "required": false,
              "choices": [
                "cli",
                "nxapi"
              ],
              "suboptions": {}
            },
            "use_proxy": {
              "aliases": [],
              "description": "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "use_ssl": {
              "aliases": [],
              "description": "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [],
              "description": "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Determines whether the config should be present or not on the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "suppress_arp": {
          "aliases": [],
          "description": "Suppress arp under layer 2 VNI.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "suppress_arp_disable": {
          "aliases": [],
          "description": "Overrides the global ARP suppression config. This is available on NX-OS 9K series running 9.2.x or higher.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vni": {
          "aliases": [],
          "description": "ID of the Virtual Network Identifier.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Creates a Virtual Network Identifier member (VNI)",
      "version_added": "1.0.0"
    },
    "examples": "\n- cisco.nxos.nxos_vxlan_vtep_vni:\n    interface: nve1\n    vni: 6000\n    ingress_replication: default\n    multisite_ingress_replication: enable\n"
  },
  "cisco.nxos.nxos_zone_zoneset": {
    "doc": {
      "description": "Configuration of zone/zoneset for Cisco MDS NXOS.",
      "has_action": true,
      "notes": "Tested against Cisco MDS NX-OS 8.4(1)",
      "options": {
        "zone_zoneset_details": {
          "aliases": [],
          "description": "List of zone/zoneset details to be added or removed",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "default_zone": {
              "aliases": [],
              "description": "default zone behaviour for the vsan",
              "type": "str",
              "required": false,
              "choices": [
                "permit",
                "deny"
              ],
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "mode of the zone for the vsan",
              "type": "str",
              "required": false,
              "choices": [
                "enhanced",
                "basic"
              ],
              "suboptions": {}
            },
            "smart_zoning": {
              "aliases": [],
              "description": "Removes the vsan if True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vsan": {
              "aliases": [],
              "description": "vsan id",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "zone": {
              "aliases": [],
              "description": "List of zone options for that vsan",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "members": {
                  "aliases": [],
                  "description": "Members of the zone that needs to be removed or added",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "devtype": {
                      "aliases": [],
                      "description": "devtype of the zone member used along with Smart zoning config",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "initiator",
                        "target",
                        "both"
                      ],
                      "suboptions": {}
                    },
                    "pwwn": {
                      "aliases": [
                        "device_alias"
                      ],
                      "description": "pwwn member of the zone, use alias 'device_alias' as option for device_alias member",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "remove": {
                      "aliases": [],
                      "description": "Removes member from the zone if True",
                      "default": "False",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "name of the zone",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "remove": {
                  "aliases": [],
                  "description": "Deletes the zone if True",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "zoneset": {
              "aliases": [],
              "description": "List of zoneset options for the vsan",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "action": {
                  "aliases": [],
                  "description": "activates/de-activates the zoneset",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "activate",
                    "deactivate"
                  ],
                  "suboptions": {}
                },
                "members": {
                  "aliases": [],
                  "description": "Members of the zoneset that needs to be removed or added",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "name": {
                      "aliases": [],
                      "description": "name of the zone that needs to be added to the zoneset or removed from the zoneset",
                      "type": "str",
                      "required": true,
                      "suboptions": {}
                    },
                    "remove": {
                      "aliases": [],
                      "description": "Removes zone member from the zoneset",
                      "default": "False",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "name of the zoneset",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "remove": {
                  "aliases": [],
                  "description": "Removes zoneset if True",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "short_description": "Configuration of zone/zoneset for Cisco NXOS MDS Switches.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Test that zone/zoneset module works\n  cisco.nxos.nxos_zone_zoneset:\n    zone_zoneset_details:\n    - mode: enhanced\n      vsan: 22\n      zone:\n      - members:\n        - pwwn: 11:11:11:11:11:11:11:11\n        - device_alias: test123\n        - pwwn: 61:61:62:62:12:12:12:12\n          remove: true\n        name: zoneA\n      - members:\n        - pwwn: 10:11:11:11:11:11:11:11\n        - pwwn: 62:62:62:62:21:21:21:21\n        name: zoneB\n      - name: zoneC\n        remove: true\n      zoneset:\n      - action: activate\n        members:\n        - name: zoneA\n        - name: zoneB\n        - name: zoneC\n          remove: true\n        name: zsetname1\n      - action: deactivate\n        name: zsetTestExtra\n        remove: true\n    - mode: basic\n      smart_zoning: true\n      vsan: 21\n      zone:\n      - members:\n        - devtype: both\n          pwwn: 11:11:11:11:11:11:11:11\n        - pwwn: 62:62:62:62:12:12:12:12\n        - devtype: both\n          pwwn: 92:62:62:62:12:12:1a:1a\n          remove: true\n        name: zone21A\n      - members:\n        - pwwn: 10:11:11:11:11:11:11:11\n        - pwwn: 62:62:62:62:21:21:21:21\n        name: zone21B\n      zoneset:\n      - action: activate\n        members:\n        - name: zone21A\n        - name: zone21B\n        name: zsetname212\n\n"
  }
}