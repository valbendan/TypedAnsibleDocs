{
  "cisco.meraki.meraki_admin": {
    "doc": {
      "description": "Allows for creation, management, and visibility into administrators within Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email address for the dashboard administrator.\nEmail cannot be updated.\nRequired when creating or editing an administrator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the dashboard administrator.\nRequired when creating a new administrator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "List of networks the administrator has privileges on.\nWhen creating a new administrator, C(org_name), C(network), or C(tags) must be specified.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "access": {
              "aliases": [],
              "description": "The privilege of the dashboard administrator on the network.\nValid options are C(full), C(read-only), or C(none).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "Network ID for which administrator should have privileges assigned.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "network": {
              "aliases": [],
              "description": "Network name for which administrator should have privileges assigned.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "org_access": {
          "aliases": [
            "orgAccess"
          ],
          "description": "Privileges assigned to the administrator in the organization.",
          "type": "str",
          "required": false,
          "choices": [
            "full",
            "none",
            "read-only"
          ],
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.\nUsed when C(name) should refer to another object.\nWhen creating a new administrator, C(org_name), C(network), or C(tags) must be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify, or delete an organization\nIf C(state) is C(absent), name takes priority over email if both are specified.",
          "type": "str",
          "required": true,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Tags the administrator has privileges on.\nWhen creating a new administrator, C(org_name), C(network), or C(tags) must be specified.\nIf C(none) is specified, C(network) or C(tags) must be specified.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "access": {
              "aliases": [],
              "description": "The privilege of the dashboard administrator for the tag.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tag": {
              "aliases": [],
              "description": "Object tag which privileges should be assigned.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage administrators in the Meraki cloud",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Query information about all administrators associated to the organization\n  meraki_admin:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: query\n  delegate_to: localhost\n\n- name: Query information about a single administrator by name\n  meraki_admin:\n    auth_key: abc12345\n    org_id: 12345\n    state: query\n    name: Jane Doe\n\n- name: Query information about a single administrator by email\n  meraki_admin:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: query\n    email: jane@doe.com\n\n- name: Create new administrator with organization access\n  meraki_admin:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n    name: Jane Doe\n    org_access: read-only\n    email: jane@doe.com\n\n- name: Create new administrator with organization access\n  meraki_admin:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n    name: Jane Doe\n    org_access: read-only\n    email: jane@doe.com\n\n- name: Create a new administrator with organization access\n  meraki_admin:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n    name: Jane Doe\n    org_access: read-only\n    email: jane@doe.com\n\n- name: Revoke access to an organization for an administrator\n  meraki_admin:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: absent\n    email: jane@doe.com\n\n- name: Create a new administrator with full access to two tags\n  meraki_admin:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n    name: Jane Doe\n    orgAccess: read-only\n    email: jane@doe.com\n    tags:\n        - tag: tenant\n          access: full\n        - tag: corporate\n          access: read-only\n\n- name: Create a new administrator with full access to a network\n  meraki_admin:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n    name: Jane Doe\n    orgAccess: read-only\n    email: jane@doe.com\n    networks:\n        - id: N_12345\n          access: full\n"
  },
  "cisco.meraki.meraki_alert": {
    "doc": {
      "description": "Allows for creation, management, and visibility into alert settings within Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "alerts": {
          "aliases": [],
          "description": "Alert-specific configuration for each type.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "alert_destinations": {
              "aliases": [],
              "description": "A hash of destinations for this specific alert.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "all_admins": {
                  "aliases": [],
                  "description": "If true, all network admins will receive emails.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "emails": {
                  "aliases": [],
                  "description": "A list of emails that will recieve the alert(s).",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "http_server_ids": {
                  "aliases": [],
                  "description": "A list of HTTP server IDs to send a Webhook to.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "snmp": {
                  "aliases": [],
                  "description": "If true, then an SNMP trap will be sent if there is an SNMP trap server configured for this network.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "alert_type": {
              "aliases": [],
              "description": "The type of alert.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "A boolean depicting if the alert is turned on or off.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "filters": {
              "aliases": [],
              "description": "A hash of specific configuration data for the alert. Only filters specific to the alert will be updated.\nNo validation checks occur against C(filters).",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "default_destinations": {
          "aliases": [],
          "description": "Properties for destinations when alert specific destinations aren't specified.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "all_admins": {
              "aliases": [],
              "description": "If true, all network admins will receive emails.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "emails": {
              "aliases": [],
              "description": "A list of emails that will recieve the alert(s).",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "http_server_ids": {
              "aliases": [],
              "description": "A list of HTTP server IDs to send a Webhook to.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "snmp": {
              "aliases": [],
              "description": "If true, then an SNMP trap will be sent if there is an SNMP trap server configured for this network.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an alert.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage alerts in the Meraki cloud",
      "version_added": "2.1.0"
    },
    "examples": "\n- name: Update settings\n  meraki_alert:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    default_destinations:\n      emails:\n      - 'youremail@yourcorp'\n      - 'youremail2@yourcorp'\n      all_admins: yes\n      snmp: no\n    alerts:\n      - type: \"gatewayDown\"\n        enabled: yes\n        filters:\n          timeout: 60\n        alert_destinations:\n          emails:\n          - 'youremail@yourcorp'\n          - 'youremail2@yourcorp'\n          all_admins: yes\n          snmp: no\n      - type: \"usageAlert\"\n        enabled: yes\n        filters:\n          period: 1200\n          threshold: 104857600\n        alert_destinations:\n          emails:\n          - 'youremail@yourcorp'\n          - 'youremail2@yourcorp'\n          all_admins: yes\n          snmp: no\n\n- name: Query all settings\n  meraki_alert:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_config_template": {
    "doc": {
      "description": "Allows for querying, deleting, binding, and unbinding of configuration templates.",
      "has_action": false,
      "notes": "Module is not idempotent as the Meraki API is limited in what information it provides about configuration templates.\nMeraki's API does not support creating new configuration templates.\nTo use the configuration template, simply pass its ID via C(net_id) parameters in Meraki modules.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auto_bind": {
          "aliases": [],
          "description": "Optional boolean indicating whether the network's switches should automatically bind to profiles of the same model.\nThis option only affects switch networks and switch templates.\nAuto-bind is not valid unless the switch template has at least one profile and has at most one profile per switch model.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "config_template": {
          "aliases": [
            "name"
          ],
          "description": "Name of the configuration template within an organization to manipulate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of the network to bind or unbind configuration template to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of the network to bind or unbind configuration template to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization associated to a configuration template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization containing the configuration template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether configuration template information should be queried, modified, or deleted.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage configuration templates in the Meraki cloud",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Query configuration templates\n  meraki_config_template:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: query\n  delegate_to: localhost\n\n- name: Bind a template from a network\n  meraki_config_template:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    config_template: DevConfigTemplate\n  delegate_to: localhost\n\n- name: Unbind a template from a network\n  meraki_config_template:\n    auth_key: abc123\n    state: absent\n    org_name: YourOrg\n    net_name: YourNet\n    config_template: DevConfigTemplate\n  delegate_to: localhost\n\n- name: Delete a configuration template\n  meraki_config_template:\n    auth_key: abc123\n    state: absent\n    org_name: YourOrg\n    config_template: DevConfigTemplate\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_content_filtering": {
    "doc": {
      "description": "Allows for setting policy on content filtering.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "allowed_urls": {
          "aliases": [],
          "description": "List of URL patterns which should be allowed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable MERAKI_KEY is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "blocked_categories": {
          "aliases": [],
          "description": "List of content categories which should be blocked.\nUse the C(meraki_content_filtering_facts) module for a full list of categories.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "blocked_urls": {
          "aliases": [],
          "description": "List of URL patterns which should be blocked.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "category_list_size": {
          "aliases": [],
          "description": "Determines whether a network filters fo rall URLs in a category or only the list of top blocked sites.",
          "type": "str",
          "required": false,
          "choices": [
            "top sites",
            "full list"
          ],
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "States that a policy should be created or modified.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "subset": {
          "aliases": [],
          "description": "Display only certain facts.",
          "type": "str",
          "required": false,
          "choices": [
            "categories",
            "policy"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Edit Meraki MX content filtering policies"
    },
    "examples": "\n  - name: Set single allowed URL pattern\n    meraki_content_filtering:\n      auth_key: abc123\n      org_name: YourOrg\n      net_name: YourMXNet\n      allowed_urls:\n        - \"http://www.ansible.com/*\"\n\n  - name: Set blocked URL category\n    meraki_content_filtering:\n      auth_key: abc123\n      org_name: YourOrg\n      net_name: YourMXNet\n      state: present\n      category_list_size: full list\n      blocked_categories:\n        - \"Adult and Pornography\"\n\n  - name: Remove match patterns and categories\n    meraki_content_filtering:\n      auth_key: abc123\n      org_name: YourOrg\n      net_name: YourMXNet\n      state: present\n      category_list_size: full list\n      allowed_urls: []\n      blocked_urls: []\n"
  },
  "cisco.meraki.meraki_device": {
    "doc": {
      "description": "Visibility into devices associated to a Meraki environment.",
      "has_action": false,
      "notes": "This module does not support claiming of devices or licenses into a Meraki organization.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "address": {
          "aliases": [],
          "description": "Postal address of device's location.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [
            "name"
          ],
          "description": "Hostname of network device to search for.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "lat": {
          "aliases": [
            "latitude"
          ],
          "description": "Latitude of device's geographic location.\nUse negative number for southern hemisphere.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "lldp_cdp_timespan": {
          "aliases": [],
          "description": "Timespan, in seconds, used to query LLDP and CDP information.\nMust be less than 1 month.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "lng": {
          "aliases": [
            "longitude"
          ],
          "description": "Longitude of device's geographic location.\nUse negative number for western hemisphere.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "model": {
          "aliases": [],
          "description": "Model of network device to search for.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "move_map_marker": {
          "aliases": [],
          "description": "Whether or not to set the latitude and longitude of a device based on the new address.\nOnly applies when C(lat) and C(lng) are not specified.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "note": {
          "aliases": [],
          "description": "Informational notes about a device.\nLimited to 255 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "Specifies what information should be queried.",
          "type": "str",
          "required": false,
          "choices": [
            "lldp_cdp",
            "uplink"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "serial": {
          "aliases": [],
          "description": "Serial number of a device to query.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Query an organization.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Space delimited list of tags to assign to device.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage devices in the Meraki cloud"
    },
    "examples": "\n- name: Query all devices in an organization.\n  meraki_device:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: query\n  delegate_to: localhost\n\n- name: Query all devices in a network.\n  meraki_device:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n\n- name: Query a device by serial number.\n  meraki_device:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    serial: ABC-123\n    state: query\n  delegate_to: localhost\n\n- name: Lookup uplink information about a device.\n  meraki_device:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    serial_uplink: ABC-123\n    state: query\n  delegate_to: localhost\n\n- name: Lookup LLDP and CDP information about devices connected to specified device.\n  meraki_device:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    serial_lldp_cdp: ABC-123\n    state: query\n  delegate_to: localhost\n\n- name: Lookup a device by hostname.\n  meraki_device:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    hostname: main-switch\n    state: query\n  delegate_to: localhost\n\n- name: Query all devices of a specific model.\n  meraki_device:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    model: MR26\n    state: query\n  delegate_to: localhost\n\n- name: Update information about a device.\n  meraki_device:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    serial: '{{serial}}'\n    name: mr26\n    address: 1060 W. Addison St., Chicago, IL\n    lat: 41.948038\n    lng: -87.65568\n    tags: recently-added\n  delegate_to: localhost\n\n- name: Claim a device into a network.\n  meraki_device:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    serial: ABC-123\n    state: present\n  delegate_to: localhost\n\n- name: Remove a device from a network.\n  meraki_device:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    serial: ABC-123\n    state: absent\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_firewalled_services": {
    "doc": {
      "description": "Allows for setting policy firewalled services for Meraki network devices.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "access": {
          "aliases": [],
          "description": "Network service to query or modify.",
          "type": "str",
          "required": false,
          "choices": [
            "blocked",
            "restricted",
            "unrestricted"
          ],
          "suboptions": {}
        },
        "allowed_ips": {
          "aliases": [],
          "description": "List of IP addresses allowed to access a service.\nOnly used when C(access) is set to restricted.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable MERAKI_KEY is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "Network service to query or modify.",
          "type": "str",
          "required": false,
          "choices": [
            "ICMP",
            "SNMP",
            "web"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "States that a policy should be created or modified.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Edit firewall policies for administrative network services"
    },
    "examples": "\n- name: Set icmp service to blocked\n  meraki_firewalled_services:\n    auth_key: '{{ auth_key }}'\n    state: present\n    org_name: '{{test_org_name}}'\n    net_name: IntTestNetworkAppliance\n    service: ICMP\n    access: blocked\n  delegate_to: localhost\n\n- name: Set icmp service to restricted\n  meraki_firewalled_services:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    service: web\n    access: restricted\n    allowed_ips:\n      - 192.0.1.1\n      - 192.0.1.2\n  delegate_to: localhost\n\n- name: Query appliance services\n  meraki_firewalled_services:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n  delegate_to: localhost\n\n- name: Query services\n  meraki_firewalled_services:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n    service: ICMP\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_intrusion_prevention": {
    "doc": {
      "description": "Allows for management of intrusion prevention rules networks within Meraki MX networks.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "allowed_rules": {
          "aliases": [],
          "description": "List of IDs related to rules which are allowed for the organization.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "rule_id": {
              "aliases": [],
              "description": "ID of rule as defined by Snort.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rule_message": {
              "aliases": [
                "message"
              ],
              "description": "Description of rule.\nThis is overwritten by the API.\nFormerly C(message) which was deprecated but still maintained as an alias.",
              "type": "str",
              "required": false,
              "version_added": "2.3.0",
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ids_rulesets": {
          "aliases": [],
          "description": "Ruleset complexity setting.",
          "type": "str",
          "required": false,
          "choices": [
            "connectivity",
            "balanced",
            "security"
          ],
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Operational mode of Intrusion Prevention system.",
          "type": "str",
          "required": false,
          "choices": [
            "detection",
            "disabled",
            "prevention"
          ],
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "protected_networks": {
          "aliases": [],
          "description": "Set included/excluded networks for Intrusion Prevention.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "excluded_cidr": {
              "aliases": [],
              "description": "List of network IP ranges to exclude from scanning.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "included_cidr": {
              "aliases": [],
              "description": "List of network IP ranges to include in scanning.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "use_default": {
              "aliases": [],
              "description": "Whether to use special IPv4 addresses per RFC 5735.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage intrustion prevention in the Meraki cloud"
    },
    "examples": "\n- name: Set whitelist for organization\n  meraki_intrusion_prevention:\n    auth_key: '{{auth_key}}'\n    state: present\n    org_id: '{{test_org_id}}'\n    allowed_rules:\n      - rule_id: \"meraki:intrusion/snort/GID/01/SID/5805\"\n        rule_message: Test rule\n  delegate_to: localhost\n\n- name: Query IPS info for organization\n  meraki_intrusion_prevention:\n    auth_key: '{{auth_key}}'\n    state: query\n    org_name: '{{test_org_name}}'\n  delegate_to: localhost\n  register: query_org\n\n- name: Set full ruleset with check mode\n  meraki_intrusion_prevention:\n    auth_key: '{{auth_key}}'\n    state: present\n    org_name: '{{test_org_name}}'\n    net_name: '{{test_net_name}} - IPS'\n    mode: prevention\n    ids_rulesets: security\n    protected_networks:\n      use_default: true\n      included_cidr:\n        - 192.0.1.0/24\n      excluded_cidr:\n        - 10.0.1.0/24\n  delegate_to: localhost\n\n- name: Clear rules from organization\n  meraki_intrusion_prevention:\n    auth_key: '{{auth_key}}'\n    state: absent\n    org_name: '{{test_org_name}}'\n    allowed_rules: []\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_malware": {
    "doc": {
      "description": "Fully configure malware protection in a Meraki environment.",
      "has_action": false,
      "notes": "Some of the options are likely only used for developers within Meraki.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "allowed_files": {
          "aliases": [],
          "description": "List of files to whitelist.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Human readable information about file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "sha256": {
              "aliases": [
                "hash"
              ],
              "description": "256-bit hash of file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "allowed_urls": {
          "aliases": [],
          "description": "List of URLs to whitelist.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Human readable information about URL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "URL string to allow.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Enabled or disabled state of malware protection.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Malware Protection in the Meraki cloud"
    },
    "examples": "\n  - name: Enable malware protection\n    meraki_malware:\n      auth_key: abc123\n      state: present\n      org_name: YourOrg\n      net_name: YourNet\n      mode: enabled\n    delegate_to: localhost\n\n  - name: Set whitelisted url\n    meraki_malware:\n      auth_key: abc123\n      state: present\n      org_name: YourOrg\n      net_name: YourNet\n      mode: enabled\n      allowed_urls:\n        - url: www.ansible.com\n          comment: Ansible\n        - url: www.google.com\n          comment: Google\n    delegate_to: localhost\n\n  - name: Set whitelisted file\n    meraki_malware:\n      auth_key: abc123\n      state: present\n      org_name: YourOrg\n      net_name: YourNet\n      mode: enabled\n      allowed_files:\n        - sha256: e82c5f7d75004727e1f3b94426b9a11c8bc4c312a9170ac9a73abace40aef503\n          comment: random zip\n    delegate_to: localhost\n\n  - name: Get malware settings\n    meraki_malware:\n      auth_key: abc123\n      state: query\n      org_name: YourNet\n      net_name: YourOrg\n    delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_management_interface": {
    "doc": {
      "description": "Allows for configuration of management interfaces on Meraki MX, MS, and MR devices.",
      "has_action": false,
      "notes": "C(WAN2) parameter is only valid for MX appliances.\nC(wan_enabled) should not be provided for non-MX devies.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of the network to bind or unbind configuration template to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of the network to bind or unbind configuration template to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization associated to a configuration template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization containing the configuration template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "serial": {
          "aliases": [],
          "description": "serial number of the device to configure.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether configuration template information should be queried, modified, or deleted.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wan1": {
          "aliases": [
            "mgmt1"
          ],
          "description": "Management interface details for management interface.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "static_dns": {
              "aliases": [],
              "description": "DNS servers to use.\nAllows for a maximum of 2 addresses.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "static_gateway_ip": {
              "aliases": [],
              "description": "IP address for default gateway.\nValid only if C(using_static_ip) is C(True).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_ip": {
              "aliases": [],
              "description": "IP address assigned to Management interface.\nValid only if C(using_static_ip) is C(True).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_subnet_mask": {
              "aliases": [],
              "description": "Netmask for static IP address.\nValid only if C(using_static_ip) is C(True).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "using_static_ip": {
              "aliases": [],
              "description": "Configures the interface to use static IP or DHCP.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vlan": {
              "aliases": [],
              "description": "VLAN number to use for the management network.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "wan_enabled": {
              "aliases": [],
              "description": "States whether the management interface is enabled.\nOnly valid for MX devices.",
              "type": "str",
              "required": false,
              "choices": [
                "disabled",
                "enabled",
                "not configured"
              ],
              "suboptions": {}
            }
          }
        },
        "wan2": {
          "aliases": [
            "mgmt2"
          ],
          "description": "Management interface details for management interface.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "static_dns": {
              "aliases": [],
              "description": "DNS servers to use.\nAllows for a maximum of 2 addresses.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "static_gateway_ip": {
              "aliases": [],
              "description": "IP address for default gateway.\nValid only if C(using_static_ip) is C(True).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_ip": {
              "aliases": [],
              "description": "IP address assigned to Management interface.\nValid only if C(using_static_ip) is C(True).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "static_subnet_mask": {
              "aliases": [],
              "description": "Netmask for static IP address.\nValid only if C(using_static_ip) is C(True).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "using_static_ip": {
              "aliases": [],
              "description": "Configures the interface to use static IP or DHCP.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vlan": {
              "aliases": [],
              "description": "VLAN number to use for the management network.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "wan_enabled": {
              "aliases": [],
              "description": "States whether the management interface is enabled.\nOnly valid for MX devices.",
              "type": "str",
              "required": false,
              "choices": [
                "disabled",
                "enabled",
                "not configured"
              ],
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Configure Meraki management interfaces",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Set WAN2 as static IP\n  meraki_management_interface:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_id: YourNetId\n    serial: AAAA-BBBB-CCCC\n    wan2:\n      wan_enabled: enabled\n      using_static_ip: yes\n      static_ip: 192.168.16.195\n      static_gateway_ip: 192.168.16.1\n      static_subnet_mask: 255.255.255.0\n      static_dns:\n        - 1.1.1.1\n      vlan: 1\n  delegate_to: localhost\n\n- name: Query management information\n  meraki_management_interface:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_id: YourNetId\n    serial: AAAA-BBBB-CCCC\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mr_l3_firewall": {
    "doc": {
      "description": "Allows for creation, management, and visibility into layer 3 firewalls implemented on Meraki MR access points.\nModule is not idempotent as of current release.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "allow_lan_access": {
          "aliases": [],
          "description": "Sets whether devices can talk to other devices on the same LAN.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network containing access points.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network containing access points.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number": {
          "aliases": [
            "ssid_number"
          ],
          "description": "Number of SSID to apply firewall rule to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "List of firewall rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Optional comment describing the firewall rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dest_cidr": {
              "aliases": [],
              "description": "Comma-separated list of CIDR notation networks to match.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dest_port": {
              "aliases": [],
              "description": "Comma-seperated list of destination ports to match.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "policy": {
              "aliases": [],
              "description": "Specifies the action that should be taken when rule is hit.",
              "type": "str",
              "required": false,
              "choices": [
                "allow",
                "deny"
              ],
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Specifies protocol to match against.",
              "type": "str",
              "required": false,
              "choices": [
                "any",
                "icmp",
                "tcp",
                "udp"
              ],
              "suboptions": {}
            }
          }
        },
        "ssid_name": {
          "aliases": [
            "ssid"
          ],
          "description": "Name of SSID to apply firewall rule to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage MR access point layer 3 firewalls in the Meraki cloud"
    },
    "examples": "\n- name: Create single firewall rule\n  meraki_mr_l3_firewall:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_id: 12345\n    number: 1\n    rules:\n      - comment: Integration test rule\n        policy: allow\n        protocol: tcp\n        dest_port: 80\n        dest_cidr: 192.0.2.0/24\n    allow_lan_access: no\n  delegate_to: localhost\n\n- name: Enable local LAN access\n  meraki_mr_l3_firewall:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_id: 123\n    number: 1\n    rules:\n    allow_lan_access: yes\n  delegate_to: localhost\n\n- name: Query firewall rules\n  meraki_mr_l3_firewall:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n    number: 1\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mr_radio": {
    "doc": {
      "description": "Allows for configuration of radio settings in Meraki MR wireless networks.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "five_ghz_settings": {
          "aliases": [],
          "description": "Manual radio settings for 5 GHz.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "channel": {
              "aliases": [],
              "description": "Sets a manual channel for 5 GHz.",
              "type": "int",
              "required": false,
              "choices": [
                "36",
                "40",
                "44",
                "48",
                "52",
                "56",
                "60",
                "64",
                "100",
                "104",
                "108",
                "112",
                "116",
                "120",
                "124",
                "128",
                "132",
                "136",
                "140",
                "144",
                "149",
                "153",
                "157",
                "161",
                "165"
              ],
              "suboptions": {}
            },
            "channel_width": {
              "aliases": [],
              "description": "Sets a manual channel for 5 GHz.\nCan be '0', '20', '40', or '80' or null for using auto channel width.",
              "type": "str",
              "required": false,
              "choices": [
                "auto",
                "20",
                "40",
                "80"
              ],
              "suboptions": {}
            },
            "target_power": {
              "aliases": [],
              "description": "Set a manual target power for 5 GHz.\nCan be between '8' or '30' or null for using auto power range.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rf_profile_id": {
          "aliases": [],
          "description": "The ID of an RF profile to assign to the device.\nIf the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device.\nAssigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rf_profile_name": {
          "aliases": [],
          "description": "The name of an RF profile to assign to the device.\nSimilar to ``rf_profile_id``, but requires ``net_id`` (preferred) or ``net_name``.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serial": {
          "aliases": [],
          "description": "Serial number of a device to query.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Query or edit radio settings on a device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "two_four_ghz_settings": {
          "aliases": [],
          "description": "Manual radio settings for 2.4 GHz.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "channel": {
              "aliases": [],
              "description": "Sets a manual channel for 2.4 GHz.\nCan be '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13' or '14' or null for using auto channel.",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14"
              ],
              "suboptions": {}
            },
            "target_power": {
              "aliases": [],
              "description": "Set a manual target power for 2.4 GHz.\nCan be between '5' or '30' or null for using auto power range.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage device radio settings for Meraki wireless networks"
    },
    "examples": "\n- name: Query a device's radio configuration\n  meraki_mr_radio:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    serial: YourSerialNumber\n    state: query\n  delegate_to: localhost\n- name: Configure a device's radios\n  meraki_mr_radio:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    serial: YourSerialNumber\n    state: present\n    five_ghz_settings:\n      channel: 56\n      channel_width: 20\n      target_power: 10\n    two_four_ghz_settings:\n      channel: 6\n      target_power: 12\n    rf_profile_name: Test Profile\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mr_rf_profile": {
    "doc": {
      "description": "Allows for configuration of radio frequency (RF)  profiles in Meraki MR wireless networks.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "ap_band_settings": {
          "aliases": [],
          "description": "Settings that will be enabled if selectionType is set to 'ap'.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "band_steering_enabled": {
              "aliases": [],
              "description": "Steers client to most open band.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [
                "band_operation_mode"
              ],
              "description": "Sets which RF band the AP will support.",
              "type": "str",
              "required": false,
              "choices": [
                "2.4ghz",
                "5ghz",
                "dual"
              ],
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "band_selection_type": {
          "aliases": [],
          "description": "Sets whether band selection is assigned per access point or SSID.\nThis param is required on creation.",
          "type": "str",
          "required": false,
          "choices": [
            "ssid",
            "ap"
          ],
          "suboptions": {}
        },
        "client_balancing_enabled": {
          "aliases": [],
          "description": "Steers client to best available access point.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "five_ghz_settings": {
          "aliases": [],
          "description": "Settings related to 5Ghz band.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "channel_width": {
              "aliases": [],
              "description": "Sets channel width (MHz) for 5Ghz band.",
              "type": "str",
              "required": false,
              "choices": [
                "auto",
                "20",
                "40",
                "80"
              ],
              "suboptions": {}
            },
            "max_power": {
              "aliases": [],
              "description": "Sets max power (dBm) of 5Ghz band.\nCan be integer between 8 and 30.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "min_bitrate": {
              "aliases": [],
              "description": "Sets minimum bitrate (Mbps) of 5Ghz band.",
              "type": "int",
              "required": false,
              "choices": [
                "6",
                "9",
                "12",
                "18",
                "24",
                "36",
                "48",
                "54"
              ],
              "suboptions": {}
            },
            "min_power": {
              "aliases": [],
              "description": "Sets minmimum power (dBm) of 5Ghz band.\nCan be integer between 8 and 30.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "rxsop": {
              "aliases": [],
              "description": "The RX-SOP level controls the sensitivity of the radio.\nIt is strongly recommended to use RX-SOP only after consulting a wireless expert.\nRX-SOP can be configured in the range of -65 to -95 (dBm).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "valid_auto_channels": {
              "aliases": [],
              "description": "Sets valid auto channels for 5Ghz band.",
              "type": "list",
              "required": false,
              "choices": [
                "36",
                "40",
                "44",
                "48",
                "52",
                "56",
                "60",
                "64",
                "100",
                "104",
                "108",
                "112",
                "116",
                "120",
                "124",
                "128",
                "132",
                "136",
                "140",
                "144",
                "149",
                "153",
                "157",
                "161",
                "165"
              ],
              "elements": "int",
              "suboptions": {}
            }
          }
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "min_bitrate_type": {
          "aliases": [],
          "description": "Type of minimum bitrate.",
          "type": "str",
          "required": false,
          "choices": [
            "band",
            "ssid"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The unique name of the new profile.\nThis param is required on creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "profile_id": {
          "aliases": [
            "id"
          ],
          "description": "Unique identifier of existing RF profile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Query, edit, or delete wireless RF profile settings.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "two_four_ghz_settings": {
          "aliases": [],
          "description": "Settings related to 2.4Ghz band",
          "type": "dict",
          "required": false,
          "suboptions": {
            "ax_enabled": {
              "aliases": [],
              "description": "Determines whether ax radio on 2.4Ghz band is on or off.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "max_power": {
              "aliases": [],
              "description": "Sets max power (dBm) of 2.4Ghz band.\nCan be integer between 5 and 30.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "min_bitrate": {
              "aliases": [],
              "description": "Sets minimum bitrate (Mbps) of 2.4Ghz band.",
              "type": "float",
              "required": false,
              "choices": [
                "1",
                "2",
                "5.5",
                "6",
                "9",
                "11",
                "12",
                "18",
                "24",
                "36",
                "48",
                "54"
              ],
              "suboptions": {}
            },
            "min_power": {
              "aliases": [],
              "description": "Sets minmimum power (dBm) of 2.4Ghz band.\nCan be integer between 5 and 30.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "rxsop": {
              "aliases": [],
              "description": "The RX-SOP level controls the sensitivity of the radio.\nIt is strongly recommended to use RX-SOP only after consulting a wireless expert.\nRX-SOP can be configured in the range of -65 to -95 (dBm).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "valid_auto_channels": {
              "aliases": [],
              "description": "Sets valid auto channels for 2.4Ghz band.",
              "type": "list",
              "required": false,
              "choices": [
                "1",
                "6",
                "11"
              ],
              "elements": "int",
              "suboptions": {}
            }
          }
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage RF profiles for Meraki wireless networks"
    },
    "examples": "\n- name: Create RF profile in check mode\n  meraki_mr_rf_profile:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    name: Test Profile\n    band_selection_type: ap\n    client_balancing_enabled: True\n    ap_band_settings:\n        mode: dual\n        band_steering_enabled: true\n    five_ghz_settings:\n      max_power: 10\n      min_bitrate: 12\n      min_power: 8\n      rxsop: -65\n      channel_width: 20\n      valid_auto_channels:\n        - 36\n        - 40\n        - 44\n    two_four_ghz_settings:\n      max_power: 10\n      min_bitrate: 12\n      min_power: 8\n      rxsop: -65\n      ax_enabled: false\n      valid_auto_channels:\n        - 1\n  delegate_to: localhost\n\n- name: Query all RF profiles\n  meraki_mr_rf_profile:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n\n- name: Query one RF profile by ID\n  meraki_mr_rf_profile:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n    profile_id: '{{ profile_id }}'\n  delegate_to: localhost\n\n- name: Update profile\n  meraki_mr_rf_profile:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    profile_id: 12345\n    band_selection_type: ap\n    client_balancing_enabled: True\n    ap_band_settings:\n        mode: dual\n        band_steering_enabled: true\n    five_ghz_settings:\n      max_power: 10\n      min_bitrate: 12\n      min_power: 8\n      rxsop: -65\n      channel_width: 20\n      valid_auto_channels:\n        - 36\n        - 44\n    two_four_ghz_settings:\n      max_power: 10\n      min_bitrate: 12\n      min_power: 8\n      rxsop: -75\n      ax_enabled: false\n      valid_auto_channels:\n        - 1\n  delegate_to: localhost\n\n- name: Delete RF profile\n  meraki_mr_rf_profile:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: absent\n    profile_id: 12345\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mr_settings": {
    "doc": {
      "description": "Allows for configuration of general settings in Meraki MR wireless networks.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ipv6_bridge_enabled": {
          "aliases": [],
          "description": "Toggle for enabling or disabling IPv6 bridging in a network.\nIf enabled, SSIDs must also be configured to use bridge mode.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "led_lights_on": {
          "aliases": [],
          "description": "Toggle for enabling or disabling LED lights on all APs in the network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "location_analytics_enabled": {
          "aliases": [],
          "description": "Toggle for enabling or disabling location analytics for your network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "meshing_enabled": {
          "aliases": [],
          "description": "Toggle for enabling or disabling meshing in a network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Query or edit wireless settings.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "upgrade_strategy": {
          "aliases": [],
          "description": "The upgrade strategy to apply to the network.\nRequires firmware version MR 26.8 or higher.",
          "type": "str",
          "required": false,
          "choices": [
            "minimize_upgrade_time",
            "minimize_client_downtime"
          ],
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage general settings for Meraki wireless networks"
    },
    "examples": "\n- name: Query all settings\n  meraki_mr_settings:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n- name: Configure settings\n  meraki_mr_settings:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    upgrade_strategy: minimize_upgrade_time\n    ipv6_bridge_enabled: false\n    led_lights_on: true\n    location_analytics_enabled: true\n    meshing_enabled: true\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mr_ssid": {
    "doc": {
      "description": "Allows for management of SSIDs in a Meraki wireless environment.",
      "has_action": false,
      "notes": "Deleting an SSID does not delete RADIUS servers.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "ap_tags_vlan_ids": {
          "aliases": [],
          "description": "List of VLAN tags.\nRequires C(ip_assignment_mode) to be C(Bridge mode) or C(Layer 3 roaming).\nRequires C(use_vlan_tagging) to be C(True).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "tags": {
              "aliases": [],
              "description": "List of AP tags.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "vlan_id": {
              "aliases": [],
              "description": "Numerical identifier that is assigned to the VLAN.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_mode": {
          "aliases": [],
          "description": "Set authentication mode of network.",
          "type": "str",
          "required": false,
          "choices": [
            "open",
            "psk",
            "open-with-radius",
            "8021x-meraki",
            "8021x-radius"
          ],
          "suboptions": {}
        },
        "band_selection": {
          "aliases": [],
          "description": "Set band selection mode.",
          "type": "str",
          "required": false,
          "choices": [
            "Dual band operation",
            "5 GHz band only",
            "Dual band operation with Band Steering"
          ],
          "suboptions": {}
        },
        "concentrator_network_id": {
          "aliases": [],
          "description": "The concentrator to use for 'Layer 3 roaming with a concentrator' or 'VPN'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_vlan_id": {
          "aliases": [],
          "description": "Default VLAN ID.\nRequires C(ip_assignment_mode) to be C(Bridge mode) or C(Layer 3 roaming).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable or disable SSID network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "encryption_mode": {
          "aliases": [],
          "description": "Set encryption mode of network.",
          "type": "str",
          "required": false,
          "choices": [
            "wpa",
            "eap",
            "wpa-eap"
          ],
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ip_assignment_mode": {
          "aliases": [],
          "description": "Method of which SSID uses to assign IP addresses.",
          "type": "str",
          "required": false,
          "choices": [
            "NAT mode",
            "Bridge mode",
            "Layer 3 roaming",
            "Layer 3 roaming with a concentrator",
            "VPN"
          ],
          "suboptions": {}
        },
        "min_bitrate": {
          "aliases": [],
          "description": "Minimum bitrate (Mbps) allowed on SSID.",
          "type": "float",
          "required": false,
          "choices": [
            "1",
            "2",
            "5.5",
            "6",
            "9",
            "11",
            "12",
            "18",
            "24",
            "36",
            "48",
            "54"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of SSID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number": {
          "aliases": [
            "ssid_number"
          ],
          "description": "SSID number within network.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "per_client_bandwidth_limit_down": {
          "aliases": [],
          "description": "Maximum bandwidth in Mbps devices on SSID can download.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "per_client_bandwidth_limit_up": {
          "aliases": [],
          "description": "Maximum bandwidth in Mbps devices on SSID can upload.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "psk": {
          "aliases": [],
          "description": "Password for wireless network.\nRequires auth_mode to be set to psk.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "radius_accounting_enabled": {
          "aliases": [],
          "description": "Enable or disable RADIUS accounting.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius_accounting_servers": {
          "aliases": [],
          "description": "List of RADIUS servers for RADIUS accounting.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "IP address or hostname of RADIUS server.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port number RADIUS server is listening to.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "secret": {
              "aliases": [],
              "description": "RADIUS password.\nSetting password is not idempotent.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "radius_coa_enabled": {
          "aliases": [],
          "description": "Enable or disable RADIUS CoA (Change of Authorization) on SSID.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius_failover_policy": {
          "aliases": [],
          "description": "Set client access policy in case RADIUS servers aren't available.",
          "type": "str",
          "required": false,
          "choices": [
            "Deny access",
            "Allow access"
          ],
          "suboptions": {}
        },
        "radius_load_balancing_policy": {
          "aliases": [],
          "description": "Set load balancing policy when multiple RADIUS servers are specified.",
          "type": "str",
          "required": false,
          "choices": [
            "Strict priority order",
            "Round robin"
          ],
          "suboptions": {}
        },
        "radius_proxy_enabled": {
          "aliases": [],
          "description": "Enable or disable RADIUS Proxy on SSID.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius_servers": {
          "aliases": [],
          "description": "List of RADIUS servers.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "IP address or hostname of RADIUS server.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port number RADIUS server is listening to.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "secret": {
              "aliases": [],
              "description": "RADIUS password.\nSetting password is not idempotent.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "splash_page": {
          "aliases": [],
          "description": "Set to enable splash page and specify type of splash.",
          "type": "str",
          "required": false,
          "choices": [
            "None",
            "Click-through splash page",
            "Billing",
            "Password-protected with Meraki RADIUS",
            "Password-protected with custom RADIUS",
            "Password-protected with Active Directory",
            "Password-protected with LDAP",
            "SMS authentication",
            "Systems Manager Sentry",
            "Facebook Wi-Fi",
            "Google OAuth",
            "Sponsored guest",
            "Cisco ISE"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether SNMP information should be queried or modified.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_vlan_tagging": {
          "aliases": [],
          "description": "Set whether to use VLAN tagging.\nRequires C(default_vlan_id) to be set.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "ID number of VLAN on SSID.\nRequires C(ip_assignment_mode) to be C(ayer 3 roaming with a concentrator) or C(VPN).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "walled_garden_enabled": {
          "aliases": [],
          "description": "Enable or disable walled garden functionality.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "walled_garden_ranges": {
          "aliases": [],
          "description": "List of walled garden ranges.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "wpa_encryption_mode": {
          "aliases": [],
          "description": "Encryption mode within WPA specification.",
          "type": "str",
          "required": false,
          "choices": [
            "WPA1 and WPA2",
            "WPA2 only",
            "WPA3 Transition Mode",
            "WPA3 only"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage wireless SSIDs in the Meraki cloud"
    },
    "examples": "\n- name: Enable and name SSID\n  meraki_ssid:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: WiFi\n    name: GuestSSID\n    enabled: true\n  delegate_to: localhost\n\n- name: Set PSK with invalid encryption mode\n  meraki_ssid:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: WiFi\n    name: GuestSSID\n    auth_mode: psk\n    psk: abc1234\n    encryption_mode: eap\n  ignore_errors: yes\n  delegate_to: localhost\n\n- name: Configure RADIUS servers\n  meraki_ssid:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: WiFi\n    name: GuestSSID\n    auth_mode: open-with-radius\n    radius_servers:\n      - host: 192.0.1.200\n        port: 1234\n        secret: abc98765\n  delegate_to: localhost\n\n- name: Enable click-through splash page\n  meraki_ssid:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: WiFi\n    name: GuestSSID\n    splash_page: Click-through splash page\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_ms_access_list": {
    "doc": {
      "description": "Configure and query information about access lists on Meraki switches within the Meraki cloud.",
      "has_action": false,
      "notes": "Some of the options are likely only used for developers within Meraki.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "List of access control rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Description of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dst_cidr": {
              "aliases": [],
              "description": "CIDR notation of source IP address to match.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dst_port": {
              "aliases": [],
              "description": "Port number of destination port to match.\nMay be a port number or 'any'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ip_version": {
              "aliases": [],
              "description": "Type of IP packets to match.",
              "type": "str",
              "required": false,
              "choices": [
                "any",
                "ipv4",
                "ipv6"
              ],
              "suboptions": {}
            },
            "policy": {
              "aliases": [],
              "description": "Action to take on matching traffic.",
              "type": "str",
              "required": false,
              "choices": [
                "allow",
                "deny"
              ],
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Type of protocol to match.",
              "type": "str",
              "required": false,
              "choices": [
                "any",
                "tcp",
                "udp"
              ],
              "suboptions": {}
            },
            "src_cidr": {
              "aliases": [],
              "description": "CIDR notation of source IP address to match.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "src_port": {
              "aliases": [],
              "description": "Port number of source port to match.\nMay be a port number or 'any'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vlan": {
              "aliases": [],
              "description": "Incoming traffic VLAN.\nMay be any port between 1-4095 or 'any'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage access lists for Meraki switches in the Meraki cloud",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Set access list\n  meraki_switch_access_list:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    rules:\n      - comment: Fake rule\n        policy: allow\n        ip_version: ipv4\n        protocol: udp\n        src_cidr: 192.0.1.0/24\n        src_port: \"4242\"\n        dst_cidr: 1.2.3.4/32\n        dst_port: \"80\"\n        vlan: \"100\"\n  delegate_to: localhost\n\n- name: Query access lists\n  meraki_switch_access_list:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_ms_l3_interface": {
    "doc": {
      "description": "Allows for creation, management, and visibility into routed interfaces on Meraki MS switches.",
      "has_action": false,
      "notes": "Once a layer 3 interface is created, the API does not allow updating the interface and specifying C(default_gateway).\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "default_gateway": {
          "aliases": [],
          "description": "The next hop for any traffic that isn't going to a directly connected subnet or over a static route.\nThis IP address must exist in a subnet with a routed interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface_id": {
          "aliases": [],
          "description": "Uniqiue identification number for layer 3 interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface_ip": {
          "aliases": [],
          "description": "The IP address this switch will use for layer 3 routing on this VLAN or subnet.\nThis cannot be the same as the switch's management IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "multicast_routing": {
          "aliases": [],
          "description": "Enable multicast support if multicast routing between VLANs is required.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled",
            "IGMP snooping querier"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A friendly name or description for the interface or VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ospf_settings": {
          "aliases": [],
          "description": "The OSPF routing settings of the interface.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "area": {
              "aliases": [],
              "description": "The OSPF area to which this interface should belong.\nCan be either 'disabled' or the identifier of an existing OSPF area.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "cost": {
              "aliases": [],
              "description": "The path cost for this interface.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "is_passive_enabled": {
              "aliases": [],
              "description": "When enabled, OSPF will not run on the interface, but the subnet will still be advertised.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "serial": {
          "aliases": [],
          "description": "Serial number of MS switch hosting the layer 3 interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query",
            "absent"
          ],
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "The network that this routed interface is on, in CIDR notation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "The VLAN this routed interface is on.\nVLAN must be between 1 and 4094.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage routed interfaces on MS switches"
    },
    "examples": "\n- name: Query all l3 interfaces\n  meraki_ms_l3_interface:\n    auth_key: abc123\n    state: query\n    serial: aaa-bbb-ccc\n\n- name: Query one l3 interface\n  meraki_ms_l3_interface:\n    auth_key: abc123\n    state: query\n    serial: aaa-bbb-ccc\n    name: Test L3 interface\n\n- name: Create l3 interface\n  meraki_ms_l3_interface:\n    auth_key: abc123\n    state: present\n    serial: aaa-bbb-ccc\n    name: \"Test L3 interface 2\"\n    subnet: \"192.168.3.0/24\"\n    interface_ip: \"192.168.3.2\"\n    multicast_routing: disabled\n    vlan_id: 11\n    ospf_settings:\n      area: 0\n      cost: 1\n      is_passive_enabled: true\n\n- name: Update l3 interface\n  meraki_ms_l3_interface:\n    auth_key: abc123\n    state: present\n    serial: aaa-bbb-ccc\n    name: \"Test L3 interface 2\"\n    subnet: \"192.168.3.0/24\"\n    interface_ip: \"192.168.3.2\"\n    multicast_routing: disabled\n    vlan_id: 11\n    ospf_settings:\n      area: 0\n      cost: 2\n      is_passive_enabled: true\n\n- name: Delete l3 interface\n  meraki_ms_l3_interface:\n    auth_key: abc123\n    state: absent\n    serial: aaa-bbb-ccc\n    interface_id: abc123344566\n"
  },
  "cisco.meraki.meraki_ms_link_aggregation": {
    "doc": {
      "description": "Allows for management of MS switch link aggregations in a Meraki environment.",
      "has_action": false,
      "notes": "Switch profile ports are not supported in this module.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "lag_id": {
          "aliases": [],
          "description": "ID of lag to query or modify.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether SNMP information should be queried or modified.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "switch_ports": {
          "aliases": [],
          "description": "List of switchports to include in link aggregation.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "port_id": {
              "aliases": [],
              "description": "Port number which should be included in link aggregation.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "serial": {
              "aliases": [],
              "description": "Serial number of switch to own link aggregation.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage link aggregations on MS switches",
      "version_added": "1.2.0"
    },
    "examples": "\n- name: Create LAG\n  meraki_ms_link_aggregation:\n    auth_key: '{{auth_key}}'\n    state: present\n    org_name: '{{test_org_name}}'\n    net_name: '{{test_switch_net_name}}'\n    switch_ports:\n      - serial: '{{serial_switch}}'\n        port_id: \"1\"\n      - serial: '{{serial_switch}}'\n        port_id: \"2\"\n  delegate_to: localhost\n\n- name: Update LAG\n  meraki_ms_link_aggregation:\n    auth_key: '{{auth_key}}'\n    state: present\n    org_name: '{{test_org_name}}'\n    net_name: '{{test_switch_net_name}}'\n    lag_id: '{{lag_id}}'\n    switch_ports:\n      - serial: '{{serial_switch}}'\n        port_id: \"1\"\n      - serial: '{{serial_switch}}'\n        port_id: \"2\"\n      - serial: '{{serial_switch}}'\n        port_id: \"3\"\n      - serial: '{{serial_switch}}'\n        port_id: \"4\"\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_ms_ospf": {
    "doc": {
      "description": "Configure OSPF for compatible Meraki MS switches.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "areas": {
          "aliases": [],
          "description": "List of areas in OSPF network.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "area_id": {
              "aliases": [
                "id"
              ],
              "description": "OSPF area ID",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "area_name": {
              "aliases": [
                "name"
              ],
              "description": "Descriptive name of OSPF area.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "area_type": {
              "aliases": [
                "type"
              ],
              "description": "OSPF area type.",
              "type": "str",
              "required": false,
              "choices": [
                "normal",
                "stub",
                "nssa"
              ],
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dead_timer": {
          "aliases": [],
          "description": "Time interval to determine when the peer will be declared inactive.\nValue must be between 1 and 65535.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable or disable OSPF on the network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hello_timer": {
          "aliases": [],
          "description": "Time interval, in seconds, at which hello packets will be sent to OSPF neighbors to maintain connectivity.\nValue must be between 1 and 255.\nDefault is 10 seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "md5_authentication_enabled": {
          "aliases": [],
          "description": "Whether to enable or disable MD5 authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "md5_authentication_key": {
          "aliases": [],
          "description": "MD5 authentication credentials.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "id": {
              "aliases": [],
              "description": "MD5 authentication key index.\nMust be between 1 and 255.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "passphrase": {
              "aliases": [],
              "description": "Plain text authentication passphrase",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network containing OSPF configuration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of network containing OSPF configuration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Read or edit OSPF settings.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage OSPF configuration on MS switches"
    },
    "examples": "\n  - name: Query OSPF settings\n    meraki_ms_ospf:\n      auth_key: abc123\n      org_name: YourOrg\n      net_name: YourNet\n      state: query\n    delegate_to: localhost\n\n  - name: Enable OSPF with check mode\n    meraki_ms_ospf:\n      auth_key: abc123\n      org_name: YourOrg\n      net_name: YourNet\n      state: present\n      enabled: true\n      hello_timer: 20\n      dead_timer: 60\n      areas:\n        - area_id: 0\n          area_name: Backbone\n          area_type: normal\n        - area_id: 1\n          area_name: Office\n          area_type: nssa\n      md5_authentication_enabled: false\n"
  },
  "cisco.meraki.meraki_ms_stack": {
    "doc": {
      "description": "Allows for modification of Meraki MS switch stacks.",
      "has_action": false,
      "notes": "Not all actions are idempotent. Specifically, creating a new stack will error if any switch is already in a stack.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of stack.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "serials": {
          "aliases": [],
          "description": "List of switch serial numbers which should be included or removed from a stack.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "stack_id": {
          "aliases": [],
          "description": "ID of stack which is to be modified or deleted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Modify switch stacking configuration in Meraki.",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Create new stack\n  meraki_switch_stack:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    name: Test stack\n    serials:\n    - \"ABCD-1231-4579\"\n    - \"ASDF-4321-0987\"\n\n- name: Add switch to stack\n  meraki_switch_stack:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    stack_id: ABC12340987\n    serials:\n    - \"ABCD-1231-4579\"\n\n- name: Remove switch from stack\n  meraki_switch_stack:\n    auth_key: abc123\n    state: absent\n    org_name: YourOrg\n    net_name: YourNet\n    stack_id: ABC12340987\n    serials:\n    - \"ABCD-1231-4579\"\n\n- name: Query one stack\n  meraki_switch_stack:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n    stack_id: ABC12340987\n"
  },
  "cisco.meraki.meraki_ms_stack_l3_interface": {
    "doc": {
      "description": "Allows for creation, management, and visibility into routed interfaces on Meraki MS switches.",
      "has_action": false,
      "notes": "Once a layer 3 interface is created, the API does not allow updating the interface and specifying C(default_gateway).\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "default_gateway": {
          "aliases": [],
          "description": "The next hop for any traffic that isn't going to a directly connected subnet or over a static route.\nThis IP address must exist in a subnet with a routed interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface_id": {
          "aliases": [],
          "description": "Uniqiue identification number for layer 3 interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface_ip": {
          "aliases": [],
          "description": "The IP address this switch will use for layer 3 routing on this VLAN or subnet.\nThis cannot be the same as the switch's management IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "multicast_routing": {
          "aliases": [],
          "description": "Enable multicast support if multicast routing between VLANs is required.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled",
            "IGMP snooping querier"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A friendly name or description for the interface or VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ospf_settings": {
          "aliases": [],
          "description": "The OSPF routing settings of the interface.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "area": {
              "aliases": [],
              "description": "The OSPF area to which this interface should belong.\nCan be either 'disabled' or the identifier of an existing OSPF area.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "cost": {
              "aliases": [],
              "description": "The path cost for this interface.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "is_passive_enabled": {
              "aliases": [],
              "description": "When enabled, OSPF will not run on the interface, but the subnet will still be advertised.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "stack_id": {
          "aliases": [],
          "description": "The unique identifier of the stack.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query",
            "absent"
          ],
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "The network that this routed interface is on, in CIDR notation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "The VLAN this routed interface is on.\nVLAN must be between 1 and 4094.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage routed interfaces on MS switches"
    },
    "examples": "\n- name: Query all l3 interfaces\n  meraki_ms_stack_l3_interface:\n    auth_key: abc123\n    state: query\n    serial: aaa-bbb-ccc\n\n- name: Query one l3 interface\n  meraki_ms_stack_l3_interface:\n    auth_key: abc123\n    state: query\n    serial: aaa-bbb-ccc\n    name: Test L3 interface\n\n- name: Create l3 interface\n  meraki_ms_stack_l3_interface:\n    auth_key: abc123\n    state: present\n    serial: aaa-bbb-ccc\n    name: \"Test L3 interface 2\"\n    subnet: \"192.168.3.0/24\"\n    interface_ip: \"192.168.3.2\"\n    multicast_routing: disabled\n    vlan_id: 11\n    ospf_settings:\n      area: 0\n      cost: 1\n      is_passive_enabled: true\n\n- name: Update l3 interface\n  meraki_ms_stack_l3_interface:\n    auth_key: abc123\n    state: present\n    serial: aaa-bbb-ccc\n    name: \"Test L3 interface 2\"\n    subnet: \"192.168.3.0/24\"\n    interface_ip: \"192.168.3.2\"\n    multicast_routing: disabled\n    vlan_id: 11\n    ospf_settings:\n      area: 0\n      cost: 2\n      is_passive_enabled: true\n\n- name: Delete l3 interface\n  meraki_ms_stack_l3_interface:\n    auth_key: abc123\n    state: absent\n    serial: aaa-bbb-ccc\n    interface_id: abc123344566\n"
  },
  "cisco.meraki.meraki_ms_storm_control": {
    "doc": {
      "description": "Allows for management of storm control settings for Meraki MS switches.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "broadcast_threshold": {
          "aliases": [],
          "description": "Percentage (1 to 99) of total available port bandwidth for broadcast traffic type.\nDefault value 100 percent rate is to clear the configuration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "multicast_threshold": {
          "aliases": [],
          "description": "Percentage (1 to 99) of total available port bandwidth for multicast traffic type.\nDefault value 100 percent rate is to clear the configuration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether storm control configuration should be queried or modified.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "unknown_unicast_threshold": {
          "aliases": [],
          "description": "Percentage (1 to 99) of total available port bandwidth for unknown unicast traffic type.\nDefault value 100 percent rate is to clear the configuration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage storm control configuration on a switch in the Meraki cloud",
      "version_added": "0.0.1"
    },
    "examples": "\n- name: Set broadcast settings\n  meraki_switch_storm_control:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    broadcast_threshold: 75\n    multicast_threshold: 70\n    unknown_unicast_threshold: 65\n  delegate_to: localhost\n\n- name: Query storm control settings\n  meraki_switch_storm_control:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_ms_switchport": {
    "doc": {
      "description": "Allows for management of switchports settings for Meraki MS switches.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "access_policy_number": {
          "aliases": [],
          "description": "Number of the access policy to apply.\nOnly applicable to access port types.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "access_policy_type": {
          "aliases": [],
          "description": "Type of access policy to apply to port.",
          "type": "str",
          "required": false,
          "choices": [
            "Open",
            "Custom access policy",
            "MAC allow list",
            "Sticky MAC allow list"
          ],
          "suboptions": {}
        },
        "allowed_vlans": {
          "aliases": [],
          "description": "List of VLAN numbers to be allowed on switchport.",
          "default": "all",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Whether a switchport should be enabled or disabled.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "isolation_enabled": {
          "aliases": [],
          "description": "Isolation status of switchport.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link_negotiation": {
          "aliases": [],
          "description": "Link speed for the switchport.",
          "default": "Auto negotiate",
          "type": "str",
          "required": false,
          "choices": [
            "Auto negotiate",
            "100 Megabit (auto)",
            "100 Megabit full duplex (forced)"
          ],
          "suboptions": {}
        },
        "mac_allow_list": {
          "aliases": [],
          "description": "MAC addresses list that are allowed on a port.\nOnly applicable to access port type.\nOnly applicable to access_policy_type \"MAC allow list\".",
          "type": "dict",
          "required": false,
          "suboptions": {
            "macs": {
              "aliases": [],
              "description": "List of MAC addresses to update with based on state option.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state the configuration should be left in.\nMerged, MAC addresses provided will be added to the current allow list.\nReplaced, All MAC addresses are overwritten, only the MAC addresses provided with exist in the allow list.\nDeleted, Remove the MAC addresses provided from the current allow list.",
              "default": "replaced",
              "type": "str",
              "required": false,
              "choices": [
                "merged",
                "replaced",
                "deleted"
              ],
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [
            "description"
          ],
          "description": "Switchport description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number": {
          "aliases": [],
          "description": "Port number.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "poe_enabled": {
          "aliases": [],
          "description": "Enable or disable Power Over Ethernet on a port.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rstp_enabled": {
          "aliases": [],
          "description": "Enable or disable Rapid Spanning Tree Protocol on a port.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "serial": {
          "aliases": [],
          "description": "Serial nubmer of the switch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether a switchport should be queried or modified.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "sticky_mac_allow_list": {
          "aliases": [],
          "description": "MAC addresses list that are allowed on a port.\nOnly applicable to access port type.\nOnly applicable to access_policy_type \"Sticky MAC allow list\".",
          "type": "dict",
          "required": false,
          "suboptions": {
            "macs": {
              "aliases": [],
              "description": "List of MAC addresses to update with based on state option.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state the configuration should be left in.\nMerged, MAC addresses provided will be added to the current allow list.\nReplaced, All MAC addresses are overwritten, only the MAC addresses provided with exist in the allow list.\nDeleted, Remove the MAC addresses provided from the current allow list.",
              "default": "replaced",
              "type": "str",
              "required": false,
              "choices": [
                "merged",
                "replaced",
                "deleted"
              ],
              "suboptions": {}
            }
          }
        },
        "sticky_mac_allow_list_limit": {
          "aliases": [],
          "description": "The number of MAC addresses allowed in the sticky port allow list.\nOnly applicable to access port type.\nOnly applicable to access_policy_type \"Sticky MAC allow list\".\nThe value must be equal to or greater then the list size of sticky_mac_allow_list. Value will be checked for validity, during processing.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "stp_guard": {
          "aliases": [],
          "description": "Set state of STP guard.",
          "default": "disabled",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "root guard",
            "bpdu guard",
            "loop guard"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tags to assign to a port.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Set port type.",
          "default": "access",
          "type": "str",
          "required": false,
          "choices": [
            "access",
            "trunk"
          ],
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "VLAN number assigned to port.\nIf a port is of type trunk, the specified VLAN is the native VLAN.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "voice_vlan": {
          "aliases": [],
          "description": "VLAN number assigned to a port for voice traffic.\nOnly applicable to access port type.\nOnly applicable if voice_vlan_state is set to present.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "voice_vlan_state": {
          "aliases": [],
          "description": "Specifies whether voice vlan configuration should be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage switchports on a switch in the Meraki cloud"
    },
    "examples": "\n- name: Query information about all switchports on a switch\n  meraki_switchport:\n    auth_key: abc12345\n    state: query\n    serial: ABC-123\n  delegate_to: localhost\n\n- name: Query information about all switchports on a switch\n  meraki_switchport:\n    auth_key: abc12345\n    state: query\n    serial: ABC-123\n    number: 2\n  delegate_to: localhost\n\n- name: Name switchport\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 7\n    name: Test Port\n  delegate_to: localhost\n\n- name: Configure access port with voice VLAN\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 7\n    enabled: true\n    name: Test Port\n    tags: desktop\n    type: access\n    vlan: 10\n    voice_vlan: 11\n  delegate_to: localhost\n\n- name: Check access port for idempotency\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 7\n    enabled: true\n    name: Test Port\n    tags: desktop\n    type: access\n    vlan: 10\n    voice_vlan: 11\n  delegate_to: localhost\n\n- name: Configure trunk port with specific VLANs\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 7\n    enabled: true\n    name: Server port\n    tags: server\n    type: trunk\n    allowed_vlans:\n      - 10\n      - 15\n      - 20\n  delegate_to: localhost\n\n- name: Configure access port with sticky MAC allow list and limit.\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 5\n    sticky_mac_allow_limit: 3\n    sticky_mac_allow_list:\n        macs:\n          - aa:aa:bb:bb:cc:cc\n          - bb:bb:aa:aa:cc:cc\n          - 11:aa:bb:bb:cc:cc\n        state: replaced\n    delegate_to: localhost\n\n- name: Delete an existing MAC address from the sticky MAC allow list.\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 5\n    sticky_mac_allow_list:\n        macs:\n          - aa:aa:bb:bb:cc:cc\n        state: deleted\n    delegate_to: localhost\n\n- name: Add a MAC address to sticky MAC allow list.\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 5\n    sticky_mac_allow_list:\n        macs:\n          - 22:22:bb:bb:cc:cc\n        state: merged\n    delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_content_filtering": {
    "doc": {
      "description": "Allows for setting policy on content filtering.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "allowed_urls": {
          "aliases": [],
          "description": "List of URL patterns which should be allowed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable MERAKI_KEY is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "blocked_categories": {
          "aliases": [],
          "description": "List of content categories which should be blocked.\nUse the C(meraki_content_filtering_facts) module for a full list of categories.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "blocked_urls": {
          "aliases": [],
          "description": "List of URL patterns which should be blocked.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "category_list_size": {
          "aliases": [],
          "description": "Determines whether a network filters fo rall URLs in a category or only the list of top blocked sites.",
          "type": "str",
          "required": false,
          "choices": [
            "top sites",
            "full list"
          ],
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "States that a policy should be created or modified.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "subset": {
          "aliases": [],
          "description": "Display only certain facts.",
          "type": "str",
          "required": false,
          "choices": [
            "categories",
            "policy"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Edit Meraki MX content filtering policies"
    },
    "examples": "\n  - name: Set single allowed URL pattern\n    meraki_content_filtering:\n      auth_key: abc123\n      org_name: YourOrg\n      net_name: YourMXNet\n      allowed_urls:\n        - \"http://www.ansible.com/*\"\n\n  - name: Set blocked URL category\n    meraki_content_filtering:\n      auth_key: abc123\n      org_name: YourOrg\n      net_name: YourMXNet\n      state: present\n      category_list_size: full list\n      blocked_categories:\n        - \"Adult and Pornography\"\n\n  - name: Remove match patterns and categories\n    meraki_content_filtering:\n      auth_key: abc123\n      org_name: YourOrg\n      net_name: YourMXNet\n      state: present\n      category_list_size: full list\n      allowed_urls: []\n      blocked_urls: []\n"
  },
  "cisco.meraki.meraki_mx_intrusion_prevention": {
    "doc": {
      "description": "Allows for management of intrusion prevention rules networks within Meraki MX networks.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "allowed_rules": {
          "aliases": [],
          "description": "List of IDs related to rules which are allowed for the organization.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "rule_id": {
              "aliases": [],
              "description": "ID of rule as defined by Snort.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rule_message": {
              "aliases": [
                "message"
              ],
              "description": "Description of rule.\nThis is overwritten by the API.\nFormerly C(message) which was deprecated but still maintained as an alias.",
              "type": "str",
              "required": false,
              "version_added": "2.3.0",
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ids_rulesets": {
          "aliases": [],
          "description": "Ruleset complexity setting.",
          "type": "str",
          "required": false,
          "choices": [
            "connectivity",
            "balanced",
            "security"
          ],
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Operational mode of Intrusion Prevention system.",
          "type": "str",
          "required": false,
          "choices": [
            "detection",
            "disabled",
            "prevention"
          ],
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "protected_networks": {
          "aliases": [],
          "description": "Set included/excluded networks for Intrusion Prevention.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "excluded_cidr": {
              "aliases": [],
              "description": "List of network IP ranges to exclude from scanning.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "included_cidr": {
              "aliases": [],
              "description": "List of network IP ranges to include in scanning.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "use_default": {
              "aliases": [],
              "description": "Whether to use special IPv4 addresses per RFC 5735.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage intrustion prevention in the Meraki cloud"
    },
    "examples": "\n- name: Set whitelist for organization\n  meraki_intrusion_prevention:\n    auth_key: '{{auth_key}}'\n    state: present\n    org_id: '{{test_org_id}}'\n    allowed_rules:\n      - rule_id: \"meraki:intrusion/snort/GID/01/SID/5805\"\n        rule_message: Test rule\n  delegate_to: localhost\n\n- name: Query IPS info for organization\n  meraki_intrusion_prevention:\n    auth_key: '{{auth_key}}'\n    state: query\n    org_name: '{{test_org_name}}'\n  delegate_to: localhost\n  register: query_org\n\n- name: Set full ruleset with check mode\n  meraki_intrusion_prevention:\n    auth_key: '{{auth_key}}'\n    state: present\n    org_name: '{{test_org_name}}'\n    net_name: '{{test_net_name}} - IPS'\n    mode: prevention\n    ids_rulesets: security\n    protected_networks:\n      use_default: true\n      included_cidr:\n        - 192.0.1.0/24\n      excluded_cidr:\n        - 10.0.1.0/24\n  delegate_to: localhost\n\n- name: Clear rules from organization\n  meraki_intrusion_prevention:\n    auth_key: '{{auth_key}}'\n    state: absent\n    org_name: '{{test_org_name}}'\n    allowed_rules: []\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_l2_interface": {
    "doc": {
      "description": "Allows for management and visibility of Merkai MX layer 2 ports.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "access_policy": {
          "aliases": [],
          "description": "The name of the policy. Only applicable to access ports.",
          "type": "str",
          "required": false,
          "choices": [
            "open",
            "8021x-radius",
            "mac-radius",
            "hybris-radius"
          ],
          "suboptions": {}
        },
        "allowed_vlans": {
          "aliases": [],
          "description": "Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "drop_untagged_traffic": {
          "aliases": [],
          "description": "Trunk port can Drop all Untagged traffic. When true, no VLAN is required.\nAccess ports cannot have dropUntaggedTraffic set to true.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enabled state of port.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number": {
          "aliases": [
            "port",
            "port_id"
          ],
          "description": "ID number of MX port.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "port_type": {
          "aliases": [],
          "description": "Type of port.",
          "type": "str",
          "required": false,
          "choices": [
            "access",
            "trunk"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Modify or query an port.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "Native VLAN when the port is in Trunk mode.\nAccess VLAN when the port is in Access mode.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Configure MX layer 2 interfaces",
      "version_added": "2.1.0"
    },
    "examples": "\n- name: Query layer 2 interface settings\n  meraki_mx_l2_interface:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n\n- name: Query a single layer 2 interface settings\n  meraki_mx_l2_interface:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n    number: 2\n  delegate_to: localhost\n\n- name: Update interface configuration\n  meraki_mx_l2_interface:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    number: 2\n    port_type: access\n    vlan: 10\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_l3_firewall": {
    "doc": {
      "description": "Allows for creation, management, and visibility into layer 3 firewalls implemented on Meraki MX firewalls.",
      "has_action": false,
      "notes": "Module assumes a complete list of firewall rules are passed as a parameter.\nIf there is interest in this module allowing manipulation of a single firewall rule, please submit an issue against this module.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "List of firewall rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Optional comment to describe the firewall rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dest_cidr": {
              "aliases": [],
              "description": "Comma separated list of CIDR notation destination networks.\nC(Any) must be capitalized.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dest_port": {
              "aliases": [],
              "description": "Comma separated list of destination port numbers to match against.\nC(Any) must be capitalized.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "policy": {
              "aliases": [],
              "description": "Policy to apply if rule is hit.",
              "type": "str",
              "required": false,
              "choices": [
                "allow",
                "deny"
              ],
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Protocol to match against.",
              "type": "str",
              "required": false,
              "choices": [
                "any",
                "icmp",
                "tcp",
                "udp"
              ],
              "suboptions": {}
            },
            "src_cidr": {
              "aliases": [],
              "description": "Comma separated list of CIDR notation source networks.\nC(Any) must be capitalized.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "src_port": {
              "aliases": [],
              "description": "Comma separated list of source port numbers to match against.\nC(Any) must be capitalized.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "syslog_enabled": {
              "aliases": [],
              "description": "Whether to log hints against the firewall rule.\nOnly applicable if a syslog server is specified against the network.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "syslog_default_rule": {
          "aliases": [],
          "description": "Whether to log hits against the default firewall rule.\nOnly applicable if a syslog server is specified against the network.\nThis is not shown in response from Meraki. Instead, refer to the C(syslog_enabled) value in the default rule.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage MX appliance layer 3 firewalls in the Meraki cloud"
    },
    "examples": "\n- name: Query firewall rules\n  meraki_mx_l3_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n\n- name: Set two firewall rules\n  meraki_mx_l3_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    rules:\n      - comment: Block traffic to server\n        src_cidr: 192.0.1.0/24\n        src_port: any\n        dest_cidr: 192.0.2.2/32\n        dest_port: any\n        protocol: any\n        policy: deny\n      - comment: Allow traffic to group of servers\n        src_cidr: 192.0.1.0/24\n        src_port: any\n        dest_cidr: 192.0.2.0/24\n        dest_port: any\n        protocol: any\n        policy: allow\n  delegate_to: localhost\n\n- name: Set one firewall rule and enable logging of the default rule\n  meraki_mx_l3_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    rules:\n      - comment: Block traffic to server\n        src_cidr: 192.0.1.0/24\n        src_port: any\n        dest_cidr: 192.0.2.2/32\n        dest_port: any\n        protocol: any\n        policy: deny\n    syslog_default_rule: yes\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_l7_firewall": {
    "doc": {
      "description": "Allows for creation, management, and visibility into layer 7 firewalls implemented on Meraki MX firewalls.",
      "has_action": false,
      "notes": "Module assumes a complete list of firewall rules are passed as a parameter.\nIf there is interest in this module allowing manipulation of a single firewall rule, please submit an issue against this module.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "categories": {
          "aliases": [],
          "description": "When C(True), specifies that applications and application categories should be queried instead of firewall rules.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "List of layer 7 firewall rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "application": {
              "aliases": [],
              "description": "Application to filter.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "id": {
                  "aliases": [],
                  "description": "URI of application as defined by Meraki.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "Name of application to filter as defined by Meraki.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "countries": {
              "aliases": [],
              "description": "List of countries to whitelist or blacklist.\nThe countries follow the two-letter ISO 3166-1 alpha-2 format.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "host": {
              "aliases": [],
              "description": "FQDN of host to filter.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ip_range": {
              "aliases": [],
              "description": "CIDR notation range of IP addresses to apply rule to.\nPort can be appended to range with a C(\":\").",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "policy": {
              "aliases": [],
              "description": "Policy to apply if rule is hit.",
              "default": "deny",
              "type": "str",
              "required": false,
              "choices": [
                "deny"
              ],
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "TCP or UDP based port to filter.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Type of policy to apply.",
              "type": "str",
              "required": false,
              "choices": [
                "application",
                "application_category",
                "blocked_countries",
                "host",
                "ip_range",
                "port",
                "allowed_countries"
              ],
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Query or modify a firewall rule.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage MX appliance layer 7 firewalls in the Meraki cloud"
    },
    "examples": "\n- name: Query firewall rules\n  meraki_mx_l7_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n\n- name: Query applications and application categories\n  meraki_mx_l7_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    categories: yes\n    state: query\n  delegate_to: localhost\n\n- name: Set firewall rules\n  meraki_mx_l7_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    rules:\n      - type: allowed_countries\n        countries:\n          - US\n          - FR\n      - type: blocked_countries\n        countries:\n          - CN\n      - policy: deny\n        type: port\n        port: 8080\n      - type: port\n        port: 1234\n      - type: host\n        host: asdf.com\n      - type: application\n        application:\n          id: meraki:layer7/application/205\n      - type: application_category\n        application:\n          id: meraki:layer7/category/24\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_malware": {
    "doc": {
      "description": "Fully configure malware protection in a Meraki environment.",
      "has_action": false,
      "notes": "Some of the options are likely only used for developers within Meraki.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "allowed_files": {
          "aliases": [],
          "description": "List of files to whitelist.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Human readable information about file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "sha256": {
              "aliases": [
                "hash"
              ],
              "description": "256-bit hash of file.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "allowed_urls": {
          "aliases": [],
          "description": "List of URLs to whitelist.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Human readable information about URL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "url": {
              "aliases": [],
              "description": "URL string to allow.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Enabled or disabled state of malware protection.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage Malware Protection in the Meraki cloud"
    },
    "examples": "\n  - name: Enable malware protection\n    meraki_malware:\n      auth_key: abc123\n      state: present\n      org_name: YourOrg\n      net_name: YourNet\n      mode: enabled\n    delegate_to: localhost\n\n  - name: Set whitelisted url\n    meraki_malware:\n      auth_key: abc123\n      state: present\n      org_name: YourOrg\n      net_name: YourNet\n      mode: enabled\n      allowed_urls:\n        - url: www.ansible.com\n          comment: Ansible\n        - url: www.google.com\n          comment: Google\n    delegate_to: localhost\n\n  - name: Set whitelisted file\n    meraki_malware:\n      auth_key: abc123\n      state: present\n      org_name: YourOrg\n      net_name: YourNet\n      mode: enabled\n      allowed_files:\n        - sha256: e82c5f7d75004727e1f3b94426b9a11c8bc4c312a9170ac9a73abace40aef503\n          comment: random zip\n    delegate_to: localhost\n\n  - name: Get malware settings\n    meraki_malware:\n      auth_key: abc123\n      state: query\n      org_name: YourNet\n      net_name: YourOrg\n    delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_nat": {
    "doc": {
      "description": "Allows for creation, management, and visibility of NAT rules (1:1, 1:many, port forwarding) within Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "one_to_many": {
          "aliases": [],
          "description": "List of 1:many NAT rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "port_rules": {
              "aliases": [],
              "description": "List of associated port rules.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "allowed_ips": {
                  "aliases": [],
                  "description": "Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or 'any'.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "local_ip": {
                  "aliases": [],
                  "description": "Local IP address to which traffic will be forwarded.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "local_port": {
                  "aliases": [],
                  "description": "Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN.\nIf you simply wish to forward the traffic without translating the port, this should be the same as the Public port.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "A description of the rule.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "protocol": {
                  "aliases": [],
                  "description": "Protocol to apply NAT rule to.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "tcp",
                    "udp"
                  ],
                  "suboptions": {}
                },
                "public_port": {
                  "aliases": [],
                  "description": "Destination port of the traffic that is arriving on the WAN.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "public_ip": {
              "aliases": [],
              "description": "The IP address that will be used to access the internal resource from the WAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "uplink": {
              "aliases": [],
              "description": "The physical WAN interface on which the traffic will arrive.",
              "type": "str",
              "required": false,
              "choices": [
                "both",
                "internet1",
                "internet2"
              ],
              "suboptions": {}
            }
          }
        },
        "one_to_one": {
          "aliases": [],
          "description": "List of 1:1 NAT rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "allowed_inbound": {
              "aliases": [],
              "description": "The ports this mapping will provide access on, and the remote IPs that will be allowed access to the resource.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "allowed_ips": {
                  "aliases": [],
                  "description": "ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges, or 'any'.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "destination_ports": {
                  "aliases": [],
                  "description": "List of ports or port ranges that will be forwarded to the host on the LAN.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "protocol": {
                  "aliases": [],
                  "description": "Protocol to apply NAT rule to.",
                  "default": "any",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "any",
                    "icmp-ping",
                    "tcp",
                    "udp"
                  ],
                  "suboptions": {}
                }
              }
            },
            "lan_ip": {
              "aliases": [],
              "description": "The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "A descriptive name for the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "public_ip": {
              "aliases": [],
              "description": "The IP address that will be used to access the internal resource from the WAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "uplink": {
              "aliases": [],
              "description": "The physical WAN interface on which the traffic will arrive.",
              "type": "str",
              "required": false,
              "choices": [
                "both",
                "internet1",
                "internet2"
              ],
              "suboptions": {}
            }
          }
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "port_forwarding": {
          "aliases": [],
          "description": "List of port forwarding rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "allowed_ips": {
              "aliases": [],
              "description": "List of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any).",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "lan_ip": {
              "aliases": [],
              "description": "The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "local_port": {
              "aliases": [],
              "description": "A port or port ranges that will receive the forwarded traffic from the WAN.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "A descriptive name for the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Protocol to forward traffic for.",
              "type": "str",
              "required": false,
              "choices": [
                "tcp",
                "udp"
              ],
              "suboptions": {}
            },
            "public_port": {
              "aliases": [],
              "description": "A port or port ranges that will be forwarded to the host on the LAN.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "uplink": {
              "aliases": [],
              "description": "The physical WAN interface on which the traffic will arrive.",
              "type": "str",
              "required": false,
              "choices": [
                "both",
                "internet1",
                "internet2"
              ],
              "suboptions": {}
            }
          }
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "subset": {
          "aliases": [],
          "description": "Specifies which NAT components to query.",
          "default": "all",
          "type": "list",
          "required": false,
          "choices": [
            "1:1",
            "1:many",
            "all",
            "port_forwarding"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage NAT rules in Meraki cloud"
    },
    "examples": "\n- name: Query all NAT rules\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n    subset: all\n  delegate_to: localhost\n\n- name: Query 1:1 NAT rules\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n    subset: '1:1'\n  delegate_to: localhost\n\n- name: Create 1:1 rule\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    one_to_one:\n      - name: Service behind NAT\n        public_ip: 1.2.1.2\n        lan_ip: 192.168.128.1\n        uplink: internet1\n        allowed_inbound:\n          - protocol: tcp\n            destination_ports:\n              - 80\n            allowed_ips:\n              - 10.10.10.10\n  delegate_to: localhost\n\n- name: Create 1:many rule\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    one_to_many:\n      - public_ip: 1.1.1.1\n        uplink: internet1\n        port_rules:\n          - name: Test rule\n            protocol: tcp\n            public_port: 10\n            local_ip: 192.168.128.1\n            local_port: 11\n            allowed_ips:\n              - any\n  delegate_to: localhost\n\n- name: Create port forwarding rule\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    port_forwarding:\n      - name: Test map\n        lan_ip: 192.168.128.1\n        uplink: both\n        protocol: tcp\n        allowed_ips:\n          - 1.1.1.1\n        public_port: 10\n        local_port: 11\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_site_to_site_firewall": {
    "doc": {
      "description": "Allows for creation, management, and visibility into firewall rules for site-to-site VPNs implemented on Meraki MX firewalls.",
      "has_action": false,
      "notes": "Module assumes a complete list of firewall rules are passed as a parameter.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "List of firewall rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Optional comment to describe the firewall rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dest_cidr": {
              "aliases": [],
              "description": "Comma separated list of CIDR notation destination networks.\nC(Any) must be capitalized.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dest_port": {
              "aliases": [],
              "description": "Comma separated list of destination port numbers to match against.\nC(Any) must be capitalized.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "policy": {
              "aliases": [],
              "description": "Policy to apply if rule is hit.",
              "type": "str",
              "required": false,
              "choices": [
                "allow",
                "deny"
              ],
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Protocol to match against.",
              "type": "str",
              "required": false,
              "choices": [
                "any",
                "icmp",
                "tcp",
                "udp"
              ],
              "suboptions": {}
            },
            "src_cidr": {
              "aliases": [],
              "description": "Comma separated list of CIDR notation source networks.\nC(Any) must be capitalized.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "src_port": {
              "aliases": [],
              "description": "Comma separated list of source port numbers to match against.\nC(Any) must be capitalized.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "syslog_enabled": {
              "aliases": [],
              "description": "Whether to log hints against the firewall rule.\nOnly applicable if a syslog server is specified against the network.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "syslog_default_rule": {
          "aliases": [],
          "description": "Whether to log hits against the default firewall rule.\nOnly applicable if a syslog server is specified against the network.\nThis is not shown in response from Meraki. Instead, refer to the C(syslog_enabled) value in the default rule.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage MX appliance firewall rules for site-to-site VPNs",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Query firewall rules\n  meraki_mx_site_to_site_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    state: query\n  delegate_to: localhost\n\n- name: Set two firewall rules\n  meraki_mx_site_to_site_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    state: present\n    rules:\n      - comment: Block traffic to server\n        src_cidr: 192.0.1.0/24\n        src_port: any\n        dest_cidr: 192.0.2.2/32\n        dest_port: any\n        protocol: any\n        policy: deny\n      - comment: Allow traffic to group of servers\n        src_cidr: 192.0.1.0/24\n        src_port: any\n        dest_cidr: 192.0.2.0/24\n        dest_port: any\n        protocol: any\n        policy: permit\n  delegate_to: localhost\n\n- name: Set one firewall rule and enable logging of the default rule\n  meraki_mx_site_to_site_firewall:\n    auth_key: abc123\n    org_name: YourOrg\n    state: present\n    rules:\n      - comment: Block traffic to server\n        src_cidr: 192.0.1.0/24\n        src_port: any\n        dest_cidr: 192.0.2.2/32\n        dest_port: any\n        protocol: any\n        policy: deny\n    syslog_default_rule: yes\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_site_to_site_vpn": {
    "doc": {
      "description": "Allows for creation, management, and visibility into AutoVPNs implemented on Meraki MX firewalls.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hubs": {
          "aliases": [],
          "description": "List of hubs to assign to a spoke.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "hub_id": {
              "aliases": [],
              "description": "Network ID of hub",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "use_default_route": {
              "aliases": [],
              "description": "Indicates whether deafult troute traffic should be sent to this hub.\nOnly valid in spoke mode.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Set VPN mode for network",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "hub",
            "spoke"
          ],
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "subnets": {
          "aliases": [],
          "description": "List of subnets to advertise over VPN.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "local_subnet": {
              "aliases": [],
              "description": "CIDR formatted subnet.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "use_vpn": {
              "aliases": [],
              "description": "Whether to advertise over VPN.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage AutoVPN connections in Meraki",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Set hub mode\n  meraki_site_to_site_vpn:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: hub_network\n    mode: hub\n  delegate_to: localhost\n  register: set_hub\n\n- name: Set spoke mode\n  meraki_site_to_site_vpn:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: spoke_network\n    mode: spoke\n    hubs:\n      - hub_id: N_1234\n        use_default_route: false\n  delegate_to: localhost\n  register: set_spoke\n\n- name: Query rules for hub\n  meraki_site_to_site_vpn:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: hub_network\n  delegate_to: localhost\n  register: query_all_hub\n"
  },
  "cisco.meraki.meraki_mx_static_route": {
    "doc": {
      "description": "Allows for creation, management, and visibility into static routes within Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Indicates whether static route is enabled within a network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fixed_ip_assignments": {
          "aliases": [],
          "description": "List of fixed MAC to IP bindings for DHCP.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip": {
              "aliases": [],
              "description": "IP address of endpoint.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac": {
              "aliases": [],
              "description": "MAC address of endpoint.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Hostname of endpoint.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "gateway_ip": {
          "aliases": [],
          "description": "IP address of the gateway for the subnet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Descriptive name of the static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reserved_ip_ranges": {
          "aliases": [],
          "description": "List of IP ranges reserved for static IP assignments.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Human readable description of reservation range.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "end": {
              "aliases": [],
              "description": "Last IP address of reserved range.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "start": {
              "aliases": [],
              "description": "First IP address of reserved range.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "route_id": {
          "aliases": [],
          "description": "Unique ID of static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "CIDR notation based subnet for static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage static routes in the Meraki cloud"
    },
    "examples": "\n- name: Create static_route\n  meraki_static_route:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    name: Test Route\n    subnet: 192.0.1.0/24\n    gateway_ip: 192.168.128.1\n  delegate_to: localhost\n\n- name: Update static route with fixed IP assignment\n  meraki_static_route:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    route_id: d6fa4821-1234-4dfa-af6b-ae8b16c20c39\n    fixed_ip_assignments:\n      - mac: aa:bb:cc:dd:ee:ff\n        ip: 192.0.1.11\n        comment: Server\n  delegate_to: localhost\n\n- name: Query static routes\n  meraki_static_route:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n  delegate_to: localhost\n\n- name: Delete static routes\n  meraki_static_route:\n    auth_key: abc123\n    state: absent\n    org_name: YourOrg\n    net_name: YourNet\n    route_id: '{{item}}'\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_mx_uplink": {
    "doc": {
      "description": "Configure and query information about uplinks on Meraki MX appliances.",
      "has_action": false,
      "notes": "Some of the options are likely only used for developers within Meraki.\nModule was formerly named M(cisco.meraki.meraki_mx_uplink).\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "cellular": {
          "aliases": [],
          "description": "Configuration of cellular uplink",
          "type": "dict",
          "required": false,
          "suboptions": {
            "bandwidth_limits": {
              "aliases": [],
              "description": "Structure for configuring bandwidth limits",
              "type": "dict",
              "required": false,
              "suboptions": {
                "limit_down": {
                  "aliases": [],
                  "description": "Maximum download speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "limit_up": {
                  "aliases": [],
                  "description": "Maximum upload speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which VLAN is in or should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which VLAN is in or should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wan1": {
          "aliases": [],
          "description": "Configuration of WAN1 uplink",
          "type": "dict",
          "required": false,
          "suboptions": {
            "bandwidth_limits": {
              "aliases": [],
              "description": "Structure for configuring bandwidth limits",
              "type": "dict",
              "required": false,
              "suboptions": {
                "limit_down": {
                  "aliases": [],
                  "description": "Maximum download speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "limit_up": {
                  "aliases": [],
                  "description": "Maximum upload speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "wan2": {
          "aliases": [],
          "description": "Configuration of WAN2 uplink",
          "type": "dict",
          "required": false,
          "suboptions": {
            "bandwidth_limits": {
              "aliases": [],
              "description": "Structure for configuring bandwidth limits",
              "type": "dict",
              "required": false,
              "suboptions": {
                "limit_down": {
                  "aliases": [],
                  "description": "Maximum download speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "limit_up": {
                  "aliases": [],
                  "description": "Maximum upload speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "short_description": "Manage uplinks on Meraki MX appliances",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Set MX uplink settings\n  meraki_mx_uplink_bandwidth:\n    auth_key: '{{auth_key}}'\n    state: present\n    org_name: '{{test_org_name}}'\n    net_name: '{{test_net_name}} - Uplink'\n    wan1:\n      bandwidth_limits:\n        limit_down: 1000000\n        limit_up: 1000\n    cellular:\n      bandwidth_limits:\n        limit_down: 0\n        limit_up: 0\n  delegate_to: localhost\n\n- name: Query MX uplink settings\n  meraki_mx_uplink_bandwidth:\n    auth_key: '{{auth_key}}'\n    state: query\n    org_name: '{{test_org_name}}'\n    net_name: '{{test_net_name}} - Uplink'\n  delegate_to: localhost\n\n"
  },
  "cisco.meraki.meraki_mx_uplink_bandwidth": {
    "doc": {
      "description": "Configure and query information about uplinks on Meraki MX appliances.",
      "has_action": false,
      "notes": "Some of the options are likely only used for developers within Meraki.\nModule was formerly named M(cisco.meraki.meraki_mx_uplink).\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "cellular": {
          "aliases": [],
          "description": "Configuration of cellular uplink",
          "type": "dict",
          "required": false,
          "suboptions": {
            "bandwidth_limits": {
              "aliases": [],
              "description": "Structure for configuring bandwidth limits",
              "type": "dict",
              "required": false,
              "suboptions": {
                "limit_down": {
                  "aliases": [],
                  "description": "Maximum download speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "limit_up": {
                  "aliases": [],
                  "description": "Maximum upload speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which VLAN is in or should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which VLAN is in or should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wan1": {
          "aliases": [],
          "description": "Configuration of WAN1 uplink",
          "type": "dict",
          "required": false,
          "suboptions": {
            "bandwidth_limits": {
              "aliases": [],
              "description": "Structure for configuring bandwidth limits",
              "type": "dict",
              "required": false,
              "suboptions": {
                "limit_down": {
                  "aliases": [],
                  "description": "Maximum download speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "limit_up": {
                  "aliases": [],
                  "description": "Maximum upload speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "wan2": {
          "aliases": [],
          "description": "Configuration of WAN2 uplink",
          "type": "dict",
          "required": false,
          "suboptions": {
            "bandwidth_limits": {
              "aliases": [],
              "description": "Structure for configuring bandwidth limits",
              "type": "dict",
              "required": false,
              "suboptions": {
                "limit_down": {
                  "aliases": [],
                  "description": "Maximum download speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "limit_up": {
                  "aliases": [],
                  "description": "Maximum upload speed for interface",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "short_description": "Manage uplinks on Meraki MX appliances",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Set MX uplink settings\n  meraki_mx_uplink_bandwidth:\n    auth_key: '{{auth_key}}'\n    state: present\n    org_name: '{{test_org_name}}'\n    net_name: '{{test_net_name}} - Uplink'\n    wan1:\n      bandwidth_limits:\n        limit_down: 1000000\n        limit_up: 1000\n    cellular:\n      bandwidth_limits:\n        limit_down: 0\n        limit_up: 0\n  delegate_to: localhost\n\n- name: Query MX uplink settings\n  meraki_mx_uplink_bandwidth:\n    auth_key: '{{auth_key}}'\n    state: query\n    org_name: '{{test_org_name}}'\n    net_name: '{{test_net_name}} - Uplink'\n  delegate_to: localhost\n\n"
  },
  "cisco.meraki.meraki_mx_vlan": {
    "doc": {
      "description": "Create, edit, query, or delete VLANs in a Meraki environment.",
      "has_action": false,
      "notes": "Meraki's API will return an error if VLANs aren't enabled on a network. VLANs are returned properly if VLANs are enabled on a network.\nSome of the options are likely only used for developers within Meraki.\nMeraki's API defaults to networks having VLAN support disabled and there is no way to enable VLANs support in the API. VLAN support must be enabled manually.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "appliance_ip": {
          "aliases": [],
          "description": "IP address of appliance.\nAddress must be within subnet specified in C(subnet) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dhcp_boot_filename": {
          "aliases": [],
          "description": "Filename to boot from for DHCP boot",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dhcp_boot_next_server": {
          "aliases": [],
          "description": "DHCP boot option to direct boot clients to the server to load boot file from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dhcp_boot_options_enabled": {
          "aliases": [],
          "description": "Enable DHCP boot options",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dhcp_handling": {
          "aliases": [],
          "description": "How to handle DHCP packets on network.",
          "type": "str",
          "required": false,
          "choices": [
            "Run a DHCP server",
            "Relay DHCP to another server",
            "Do not respond to DHCP requests",
            "none",
            "server",
            "relay"
          ],
          "suboptions": {}
        },
        "dhcp_lease_time": {
          "aliases": [],
          "description": "DHCP lease timer setting",
          "type": "str",
          "required": false,
          "choices": [
            "30 minutes",
            "1 hour",
            "4 hours",
            "12 hours",
            "1 day",
            "1 week"
          ],
          "suboptions": {}
        },
        "dhcp_options": {
          "aliases": [],
          "description": "List of DHCP option values",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "code": {
              "aliases": [],
              "description": "DHCP option number.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Type of value for DHCP option.",
              "type": "str",
              "required": false,
              "choices": [
                "text",
                "ip",
                "hex",
                "integer"
              ],
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Value for DHCP option.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "dhcp_relay_server_ips": {
          "aliases": [],
          "description": "IP addresses to forward DHCP packets to.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns_nameservers": {
          "aliases": [],
          "description": "Semi-colon delimited list of DNS IP addresses.\nSpecify one of the following options for preprogrammed DNS entries opendns, google_dns, upstream_dns",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fixed_ip_assignments": {
          "aliases": [],
          "description": "Static IP address assignments to be distributed via DHCP by MAC address.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip": {
              "aliases": [],
              "description": "IP address for fixed IP assignment binding.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac": {
              "aliases": [],
              "description": "MAC address for fixed IP assignment binding.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Descriptive name of IP assignment binding.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "vlan_name"
          ],
          "description": "Name of VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which VLAN is in or should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which VLAN is in or should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reserved_ip_range": {
          "aliases": [],
          "description": "IP address ranges which should be reserve and not distributed via DHCP.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Description of IP addresses reservation",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "end": {
              "aliases": [],
              "description": "Last IP address of reserved IP address range, inclusive.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "start": {
              "aliases": [],
              "description": "First IP address of reserved IP address range, inclusive.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "CIDR notation of network subnet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "ID number of VLAN.\nID should be between 1-4096.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vpn_nat_subnet": {
          "aliases": [],
          "description": "The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage VLANs in the Meraki cloud"
    },
    "examples": "\n- name: Query all VLANs in a network.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n\n- name: Query information about a single VLAN by ID.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    vlan_id: 2\n    state: query\n  delegate_to: localhost\n\n- name: Create a VLAN.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    vlan_id: 2\n    name: TestVLAN\n    subnet: 192.0.1.0/24\n    appliance_ip: 192.0.1.1\n  delegate_to: localhost\n\n- name: Update a VLAN.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    vlan_id: 2\n    name: TestVLAN\n    subnet: 192.0.1.0/24\n    appliance_ip: 192.168.250.2\n    fixed_ip_assignments:\n      - mac: \"13:37:de:ad:be:ef\"\n        ip: 192.168.250.10\n        name: fixed_ip\n    reserved_ip_range:\n      - start: 192.168.250.10\n        end: 192.168.250.20\n        comment: reserved_range\n    dns_nameservers: opendns\n  delegate_to: localhost\n\n- name: Enable DHCP on VLAN with options\n  meraki_vlan:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    vlan_id: 2\n    name: TestVLAN\n    subnet: 192.168.250.0/24\n    appliance_ip: 192.168.250.2\n    dhcp_handling: server\n    dhcp_lease_time: 1 hour\n    dhcp_boot_options_enabled: false\n    dhcp_options:\n      - code: 5\n        type: ip\n        value: 192.0.1.1\n  delegate_to: localhost\n\n- name: Delete a VLAN.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: absent\n    vlan_id: 2\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_nat": {
    "doc": {
      "description": "Allows for creation, management, and visibility of NAT rules (1:1, 1:many, port forwarding) within Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "one_to_many": {
          "aliases": [],
          "description": "List of 1:many NAT rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "port_rules": {
              "aliases": [],
              "description": "List of associated port rules.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "allowed_ips": {
                  "aliases": [],
                  "description": "Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or 'any'.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "local_ip": {
                  "aliases": [],
                  "description": "Local IP address to which traffic will be forwarded.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "local_port": {
                  "aliases": [],
                  "description": "Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN.\nIf you simply wish to forward the traffic without translating the port, this should be the same as the Public port.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "A description of the rule.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "protocol": {
                  "aliases": [],
                  "description": "Protocol to apply NAT rule to.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "tcp",
                    "udp"
                  ],
                  "suboptions": {}
                },
                "public_port": {
                  "aliases": [],
                  "description": "Destination port of the traffic that is arriving on the WAN.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "public_ip": {
              "aliases": [],
              "description": "The IP address that will be used to access the internal resource from the WAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "uplink": {
              "aliases": [],
              "description": "The physical WAN interface on which the traffic will arrive.",
              "type": "str",
              "required": false,
              "choices": [
                "both",
                "internet1",
                "internet2"
              ],
              "suboptions": {}
            }
          }
        },
        "one_to_one": {
          "aliases": [],
          "description": "List of 1:1 NAT rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "allowed_inbound": {
              "aliases": [],
              "description": "The ports this mapping will provide access on, and the remote IPs that will be allowed access to the resource.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "allowed_ips": {
                  "aliases": [],
                  "description": "ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges, or 'any'.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "destination_ports": {
                  "aliases": [],
                  "description": "List of ports or port ranges that will be forwarded to the host on the LAN.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "protocol": {
                  "aliases": [],
                  "description": "Protocol to apply NAT rule to.",
                  "default": "any",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "any",
                    "icmp-ping",
                    "tcp",
                    "udp"
                  ],
                  "suboptions": {}
                }
              }
            },
            "lan_ip": {
              "aliases": [],
              "description": "The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "A descriptive name for the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "public_ip": {
              "aliases": [],
              "description": "The IP address that will be used to access the internal resource from the WAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "uplink": {
              "aliases": [],
              "description": "The physical WAN interface on which the traffic will arrive.",
              "type": "str",
              "required": false,
              "choices": [
                "both",
                "internet1",
                "internet2"
              ],
              "suboptions": {}
            }
          }
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization associated to a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "port_forwarding": {
          "aliases": [],
          "description": "List of port forwarding rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "allowed_ips": {
              "aliases": [],
              "description": "List of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any).",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "lan_ip": {
              "aliases": [],
              "description": "The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "local_port": {
              "aliases": [],
              "description": "A port or port ranges that will receive the forwarded traffic from the WAN.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "A descriptive name for the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Protocol to forward traffic for.",
              "type": "str",
              "required": false,
              "choices": [
                "tcp",
                "udp"
              ],
              "suboptions": {}
            },
            "public_port": {
              "aliases": [],
              "description": "A port or port ranges that will be forwarded to the host on the LAN.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "uplink": {
              "aliases": [],
              "description": "The physical WAN interface on which the traffic will arrive.",
              "type": "str",
              "required": false,
              "choices": [
                "both",
                "internet1",
                "internet2"
              ],
              "suboptions": {}
            }
          }
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "subset": {
          "aliases": [],
          "description": "Specifies which NAT components to query.",
          "default": "all",
          "type": "list",
          "required": false,
          "choices": [
            "1:1",
            "1:many",
            "all",
            "port_forwarding"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage NAT rules in Meraki cloud"
    },
    "examples": "\n- name: Query all NAT rules\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n    subset: all\n  delegate_to: localhost\n\n- name: Query 1:1 NAT rules\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n    subset: '1:1'\n  delegate_to: localhost\n\n- name: Create 1:1 rule\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    one_to_one:\n      - name: Service behind NAT\n        public_ip: 1.2.1.2\n        lan_ip: 192.168.128.1\n        uplink: internet1\n        allowed_inbound:\n          - protocol: tcp\n            destination_ports:\n              - 80\n            allowed_ips:\n              - 10.10.10.10\n  delegate_to: localhost\n\n- name: Create 1:many rule\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    one_to_many:\n      - public_ip: 1.1.1.1\n        uplink: internet1\n        port_rules:\n          - name: Test rule\n            protocol: tcp\n            public_port: 10\n            local_ip: 192.168.128.1\n            local_port: 11\n            allowed_ips:\n              - any\n  delegate_to: localhost\n\n- name: Create port forwarding rule\n  meraki_nat:\n    auth_key: abc123\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    port_forwarding:\n      - name: Test map\n        lan_ip: 192.168.128.1\n        uplink: both\n        protocol: tcp\n        allowed_ips:\n          - 1.1.1.1\n        public_port: 10\n        local_port: 11\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_network": {
    "doc": {
      "description": "Allows for creation, management, and visibility into networks within Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enable_vlans": {
          "aliases": [],
          "description": "Boolean value specifying whether VLANs should be supported on a network.\nRequires C(net_name) or C(net_id) to be specified.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "local_status_page_enabled": {
          "aliases": [],
          "description": "- Enables the local device status pages (U[my.meraki.com](my.meraki.com), U[ap.meraki.com](ap.meraki.com), U[switch.meraki.com](switch.meraki.com), U[wired.meraki.com](wired.meraki.com)). - Only can be specified on its own or with C(remote_status_page_enabled).\n",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "remote_status_page_enabled": {
          "aliases": [],
          "description": "Enables access to the device status page (U(http://device LAN IP)).\nCan only be set if C(local_status_page_enabled:) is set to C(yes).\nOnly can be specified on its own or with C(local_status_page_enabled).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tags to assign to network.\nC(tags) name conflicts with the tags parameter in Ansible. Indentation problems may cause unexpected behaviors.\nAnsible 2.8 converts this to a list from a comma separated list.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timezone": {
          "aliases": [],
          "description": "Timezone associated to network.\nSee U(https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for a list of valid timezones.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [
            "net_type"
          ],
          "description": "Type of network device network manages.\nRequired when creating a network.\nAs of Ansible 2.8, C(combined) type is no longer accepted.\nAs of Ansible 2.8, changes to this parameter are no longer idempotent.",
          "type": "list",
          "required": false,
          "choices": [
            "appliance",
            "switch",
            "wireless"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage networks in the Meraki cloud"
    },
    "examples": "\n- delegate_to: localhost\n  block:\n    - name: List all networks associated to the YourOrg organization\n      meraki_network:\n        auth_key: abc12345\n        state: query\n        org_name: YourOrg\n    - name: Query network named MyNet in the YourOrg organization\n      meraki_network:\n        auth_key: abc12345\n        state: query\n        org_name: YourOrg\n        net_name: MyNet\n    - name: Create network named MyNet in the YourOrg organization\n      meraki_network:\n        auth_key: abc12345\n        state: present\n        org_name: YourOrg\n        net_name: MyNet\n        type: switch\n        timezone: America/Chicago\n        tags: production, chicago\n    - name: Create combined network named MyNet in the YourOrg organization\n      meraki_network:\n        auth_key: abc12345\n        state: present\n        org_name: YourOrg\n        net_name: MyNet\n        type:\n          - switch\n          - appliance\n        timezone: America/Chicago\n        tags: production, chicago\n    - name: Enable VLANs on a network\n      meraki_network:\n        auth_key: abc12345\n        state: query\n        org_name: YourOrg\n        net_name: MyNet\n        enable_vlans: yes\n    - name: Modify local status page enabled state\n      meraki_network:\n        auth_key: abc12345\n        state: query\n        org_name: YourOrg\n        net_name: MyNet\n        local_status_page_enabled: yes\n"
  },
  "cisco.meraki.meraki_organization": {
    "doc": {
      "description": "Allows for creation, management, and visibility into organizations within Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "clone": {
          "aliases": [],
          "description": "Organization to clone to a new organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "delete_confirm": {
          "aliases": [],
          "description": "ID of organization required for confirmation before deletion.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [
            "id"
          ],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "name",
            "organization"
          ],
          "description": "Name of organization.\nIf C(clone) is specified, C(org_name) is the name of the new organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.\nC(org_id) must be specified if multiple organizations of the same name exist.\nC(absent) WILL DELETE YOUR ENTIRE ORGANIZATION, AND ALL ASSOCIATED OBJECTS, WITHOUT CONFIRMATION. USE WITH CAUTION.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage organizations in the Meraki cloud"
    },
    "examples": "\n- name: Create a new organization named YourOrg\n  meraki_organization:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n  delegate_to: localhost\n\n- name: Delete an organization named YourOrg\n  meraki_organization:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: absent\n  delegate_to: localhost\n\n- name: Query information about all organizations associated to the user\n  meraki_organization:\n    auth_key: abc12345\n    state: query\n  delegate_to: localhost\n\n- name: Query information about a single organization named YourOrg\n  meraki_organization:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: query\n  delegate_to: localhost\n\n- name: Rename an organization to RenamedOrg\n  meraki_organization:\n    auth_key: abc12345\n    org_id: 987654321\n    org_name: RenamedOrg\n    state: present\n  delegate_to: localhost\n\n- name: Clone an organization named Org to a new one called ClonedOrg\n  meraki_organization:\n    auth_key: abc12345\n    clone: Org\n    org_name: ClonedOrg\n    state: present\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_site_to_site_vpn": {
    "doc": {
      "description": "Allows for creation, management, and visibility into AutoVPNs implemented on Meraki MX firewalls.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hubs": {
          "aliases": [],
          "description": "List of hubs to assign to a spoke.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "hub_id": {
              "aliases": [],
              "description": "Network ID of hub",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "use_default_route": {
              "aliases": [],
              "description": "Indicates whether deafult troute traffic should be sent to this hub.\nOnly valid in spoke mode.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Set VPN mode for network",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "hub",
            "spoke"
          ],
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "subnets": {
          "aliases": [],
          "description": "List of subnets to advertise over VPN.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "local_subnet": {
              "aliases": [],
              "description": "CIDR formatted subnet.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "use_vpn": {
              "aliases": [],
              "description": "Whether to advertise over VPN.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage AutoVPN connections in Meraki",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Set hub mode\n  meraki_site_to_site_vpn:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: hub_network\n    mode: hub\n  delegate_to: localhost\n  register: set_hub\n\n- name: Set spoke mode\n  meraki_site_to_site_vpn:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: spoke_network\n    mode: spoke\n    hubs:\n      - hub_id: N_1234\n        use_default_route: false\n  delegate_to: localhost\n  register: set_spoke\n\n- name: Query rules for hub\n  meraki_site_to_site_vpn:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: hub_network\n  delegate_to: localhost\n  register: query_all_hub\n"
  },
  "cisco.meraki.meraki_snmp": {
    "doc": {
      "description": "Allows for management of SNMP settings for Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "access": {
          "aliases": [],
          "description": "Type of SNMP access.",
          "type": "str",
          "required": false,
          "choices": [
            "community",
            "none",
            "users"
          ],
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "community_string": {
          "aliases": [],
          "description": "SNMP community string.\nOnly relevant if C(access) is set to C(community).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "peer_ips": {
          "aliases": [],
          "description": "List of IP addresses which can perform SNMP queries.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether SNMP information should be queried or modified.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "users": {
          "aliases": [],
          "description": "Information about users with access to SNMP.\nOnly relevant if C(access) is set to C(users).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "passphrase": {
              "aliases": [],
              "description": "Passphrase for user SNMP access.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Username of user with access.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "v2c_enabled": {
          "aliases": [],
          "description": "Specifies whether SNMPv2c is enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "v3_auth_mode": {
          "aliases": [],
          "description": "Sets authentication mode for SNMPv3.",
          "type": "str",
          "required": false,
          "choices": [
            "MD5",
            "SHA"
          ],
          "suboptions": {}
        },
        "v3_auth_pass": {
          "aliases": [],
          "description": "Authentication password for SNMPv3.\nMust be at least 8 characters long.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "v3_enabled": {
          "aliases": [],
          "description": "Specifies whether SNMPv3 is enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "v3_priv_mode": {
          "aliases": [],
          "description": "Specifies privacy mode for SNMPv3.",
          "type": "str",
          "required": false,
          "choices": [
            "DES",
            "AES128"
          ],
          "suboptions": {}
        },
        "v3_priv_pass": {
          "aliases": [],
          "description": "Privacy password for SNMPv3.\nMust be at least 8 characters long.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage organizations in the Meraki cloud"
    },
    "examples": "\n- name: Query SNMP values\n  meraki_snmp:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: query\n  delegate_to: localhost\n\n- name: Enable SNMPv2\n  meraki_snmp:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n    v2c_enabled: yes\n  delegate_to: localhost\n\n- name: Disable SNMPv2\n  meraki_snmp:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n    v2c_enabled: no\n  delegate_to: localhost\n\n- name: Enable SNMPv3\n  meraki_snmp:\n    auth_key: abc12345\n    org_name: YourOrg\n    state: present\n    v3_enabled: true\n    v3_auth_mode: SHA\n    v3_auth_pass: ansiblepass\n    v3_priv_mode: AES128\n    v3_priv_pass: ansiblepass\n    peer_ips: 192.0.1.1;192.0.1.2\n  delegate_to: localhost\n\n- name: Set network access type to community string\n  meraki_snmp:\n    auth_key: abc1235\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    access: community\n    community_string: abc123\n  delegate_to: localhost\n\n- name: Set network access type to username\n  meraki_snmp:\n    auth_key: abc1235\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    access: users\n    users:\n      - username: ansibleuser\n        passphrase: ansiblepass\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_ssid": {
    "doc": {
      "description": "Allows for management of SSIDs in a Meraki wireless environment.",
      "has_action": false,
      "notes": "Deleting an SSID does not delete RADIUS servers.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "ap_tags_vlan_ids": {
          "aliases": [],
          "description": "List of VLAN tags.\nRequires C(ip_assignment_mode) to be C(Bridge mode) or C(Layer 3 roaming).\nRequires C(use_vlan_tagging) to be C(True).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "tags": {
              "aliases": [],
              "description": "List of AP tags.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "vlan_id": {
              "aliases": [],
              "description": "Numerical identifier that is assigned to the VLAN.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "auth_mode": {
          "aliases": [],
          "description": "Set authentication mode of network.",
          "type": "str",
          "required": false,
          "choices": [
            "open",
            "psk",
            "open-with-radius",
            "8021x-meraki",
            "8021x-radius"
          ],
          "suboptions": {}
        },
        "band_selection": {
          "aliases": [],
          "description": "Set band selection mode.",
          "type": "str",
          "required": false,
          "choices": [
            "Dual band operation",
            "5 GHz band only",
            "Dual band operation with Band Steering"
          ],
          "suboptions": {}
        },
        "concentrator_network_id": {
          "aliases": [],
          "description": "The concentrator to use for 'Layer 3 roaming with a concentrator' or 'VPN'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_vlan_id": {
          "aliases": [],
          "description": "Default VLAN ID.\nRequires C(ip_assignment_mode) to be C(Bridge mode) or C(Layer 3 roaming).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enable or disable SSID network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "encryption_mode": {
          "aliases": [],
          "description": "Set encryption mode of network.",
          "type": "str",
          "required": false,
          "choices": [
            "wpa",
            "eap",
            "wpa-eap"
          ],
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ip_assignment_mode": {
          "aliases": [],
          "description": "Method of which SSID uses to assign IP addresses.",
          "type": "str",
          "required": false,
          "choices": [
            "NAT mode",
            "Bridge mode",
            "Layer 3 roaming",
            "Layer 3 roaming with a concentrator",
            "VPN"
          ],
          "suboptions": {}
        },
        "min_bitrate": {
          "aliases": [],
          "description": "Minimum bitrate (Mbps) allowed on SSID.",
          "type": "float",
          "required": false,
          "choices": [
            "1",
            "2",
            "5.5",
            "6",
            "9",
            "11",
            "12",
            "18",
            "24",
            "36",
            "48",
            "54"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of SSID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number": {
          "aliases": [
            "ssid_number"
          ],
          "description": "SSID number within network.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "per_client_bandwidth_limit_down": {
          "aliases": [],
          "description": "Maximum bandwidth in Mbps devices on SSID can download.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "per_client_bandwidth_limit_up": {
          "aliases": [],
          "description": "Maximum bandwidth in Mbps devices on SSID can upload.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "psk": {
          "aliases": [],
          "description": "Password for wireless network.\nRequires auth_mode to be set to psk.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "radius_accounting_enabled": {
          "aliases": [],
          "description": "Enable or disable RADIUS accounting.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius_accounting_servers": {
          "aliases": [],
          "description": "List of RADIUS servers for RADIUS accounting.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "IP address or hostname of RADIUS server.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port number RADIUS server is listening to.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "secret": {
              "aliases": [],
              "description": "RADIUS password.\nSetting password is not idempotent.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "radius_coa_enabled": {
          "aliases": [],
          "description": "Enable or disable RADIUS CoA (Change of Authorization) on SSID.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius_failover_policy": {
          "aliases": [],
          "description": "Set client access policy in case RADIUS servers aren't available.",
          "type": "str",
          "required": false,
          "choices": [
            "Deny access",
            "Allow access"
          ],
          "suboptions": {}
        },
        "radius_load_balancing_policy": {
          "aliases": [],
          "description": "Set load balancing policy when multiple RADIUS servers are specified.",
          "type": "str",
          "required": false,
          "choices": [
            "Strict priority order",
            "Round robin"
          ],
          "suboptions": {}
        },
        "radius_proxy_enabled": {
          "aliases": [],
          "description": "Enable or disable RADIUS Proxy on SSID.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius_servers": {
          "aliases": [],
          "description": "List of RADIUS servers.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "IP address or hostname of RADIUS server.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port number RADIUS server is listening to.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "secret": {
              "aliases": [],
              "description": "RADIUS password.\nSetting password is not idempotent.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "splash_page": {
          "aliases": [],
          "description": "Set to enable splash page and specify type of splash.",
          "type": "str",
          "required": false,
          "choices": [
            "None",
            "Click-through splash page",
            "Billing",
            "Password-protected with Meraki RADIUS",
            "Password-protected with custom RADIUS",
            "Password-protected with Active Directory",
            "Password-protected with LDAP",
            "SMS authentication",
            "Systems Manager Sentry",
            "Facebook Wi-Fi",
            "Google OAuth",
            "Sponsored guest",
            "Cisco ISE"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether SNMP information should be queried or modified.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_vlan_tagging": {
          "aliases": [],
          "description": "Set whether to use VLAN tagging.\nRequires C(default_vlan_id) to be set.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "ID number of VLAN on SSID.\nRequires C(ip_assignment_mode) to be C(ayer 3 roaming with a concentrator) or C(VPN).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "walled_garden_enabled": {
          "aliases": [],
          "description": "Enable or disable walled garden functionality.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "walled_garden_ranges": {
          "aliases": [],
          "description": "List of walled garden ranges.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "wpa_encryption_mode": {
          "aliases": [],
          "description": "Encryption mode within WPA specification.",
          "type": "str",
          "required": false,
          "choices": [
            "WPA1 and WPA2",
            "WPA2 only",
            "WPA3 Transition Mode",
            "WPA3 only"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage wireless SSIDs in the Meraki cloud"
    },
    "examples": "\n- name: Enable and name SSID\n  meraki_ssid:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: WiFi\n    name: GuestSSID\n    enabled: true\n  delegate_to: localhost\n\n- name: Set PSK with invalid encryption mode\n  meraki_ssid:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: WiFi\n    name: GuestSSID\n    auth_mode: psk\n    psk: abc1234\n    encryption_mode: eap\n  ignore_errors: yes\n  delegate_to: localhost\n\n- name: Configure RADIUS servers\n  meraki_ssid:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: WiFi\n    name: GuestSSID\n    auth_mode: open-with-radius\n    radius_servers:\n      - host: 192.0.1.200\n        port: 1234\n        secret: abc98765\n  delegate_to: localhost\n\n- name: Enable click-through splash page\n  meraki_ssid:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: WiFi\n    name: GuestSSID\n    splash_page: Click-through splash page\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_static_route": {
    "doc": {
      "description": "Allows for creation, management, and visibility into static routes within Meraki.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Indicates whether static route is enabled within a network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fixed_ip_assignments": {
          "aliases": [],
          "description": "List of fixed MAC to IP bindings for DHCP.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip": {
              "aliases": [],
              "description": "IP address of endpoint.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac": {
              "aliases": [],
              "description": "MAC address of endpoint.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Hostname of endpoint.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "gateway_ip": {
          "aliases": [],
          "description": "IP address of the gateway for the subnet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Descriptive name of the static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reserved_ip_ranges": {
          "aliases": [],
          "description": "List of IP ranges reserved for static IP assignments.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Human readable description of reservation range.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "end": {
              "aliases": [],
              "description": "Last IP address of reserved range.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "start": {
              "aliases": [],
              "description": "First IP address of reserved range.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "route_id": {
          "aliases": [],
          "description": "Unique ID of static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "CIDR notation based subnet for static route.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage static routes in the Meraki cloud"
    },
    "examples": "\n- name: Create static_route\n  meraki_static_route:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    name: Test Route\n    subnet: 192.0.1.0/24\n    gateway_ip: 192.168.128.1\n  delegate_to: localhost\n\n- name: Update static route with fixed IP assignment\n  meraki_static_route:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    route_id: d6fa4821-1234-4dfa-af6b-ae8b16c20c39\n    fixed_ip_assignments:\n      - mac: aa:bb:cc:dd:ee:ff\n        ip: 192.0.1.11\n        comment: Server\n  delegate_to: localhost\n\n- name: Query static routes\n  meraki_static_route:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n  delegate_to: localhost\n\n- name: Delete static routes\n  meraki_static_route:\n    auth_key: abc123\n    state: absent\n    org_name: YourOrg\n    net_name: YourNet\n    route_id: '{{item}}'\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_switch_access_list": {
    "doc": {
      "description": "Configure and query information about access lists on Meraki switches within the Meraki cloud.",
      "has_action": false,
      "notes": "Some of the options are likely only used for developers within Meraki.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "List of access control rules.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Description of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dst_cidr": {
              "aliases": [],
              "description": "CIDR notation of source IP address to match.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dst_port": {
              "aliases": [],
              "description": "Port number of destination port to match.\nMay be a port number or 'any'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ip_version": {
              "aliases": [],
              "description": "Type of IP packets to match.",
              "type": "str",
              "required": false,
              "choices": [
                "any",
                "ipv4",
                "ipv6"
              ],
              "suboptions": {}
            },
            "policy": {
              "aliases": [],
              "description": "Action to take on matching traffic.",
              "type": "str",
              "required": false,
              "choices": [
                "allow",
                "deny"
              ],
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Type of protocol to match.",
              "type": "str",
              "required": false,
              "choices": [
                "any",
                "tcp",
                "udp"
              ],
              "suboptions": {}
            },
            "src_cidr": {
              "aliases": [],
              "description": "CIDR notation of source IP address to match.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "src_port": {
              "aliases": [],
              "description": "Port number of source port to match.\nMay be a port number or 'any'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vlan": {
              "aliases": [],
              "description": "Incoming traffic VLAN.\nMay be any port between 1-4095 or 'any'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage access lists for Meraki switches in the Meraki cloud",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Set access list\n  meraki_switch_access_list:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    rules:\n      - comment: Fake rule\n        policy: allow\n        ip_version: ipv4\n        protocol: udp\n        src_cidr: 192.0.1.0/24\n        src_port: \"4242\"\n        dst_cidr: 1.2.3.4/32\n        dst_port: \"80\"\n        vlan: \"100\"\n  delegate_to: localhost\n\n- name: Query access lists\n  meraki_switch_access_list:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_switch_stack": {
    "doc": {
      "description": "Allows for modification of Meraki MS switch stacks.",
      "has_action": false,
      "notes": "Not all actions are idempotent. Specifically, creating a new stack will error if any switch is already in a stack.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of stack.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network which MX firewall is in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "serials": {
          "aliases": [],
          "description": "List of switch serial numbers which should be included or removed from a stack.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "stack_id": {
          "aliases": [],
          "description": "ID of stack which is to be modified or deleted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or modify an organization.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Modify switch stacking configuration in Meraki.",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Create new stack\n  meraki_switch_stack:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    name: Test stack\n    serials:\n    - \"ABCD-1231-4579\"\n    - \"ASDF-4321-0987\"\n\n- name: Add switch to stack\n  meraki_switch_stack:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    stack_id: ABC12340987\n    serials:\n    - \"ABCD-1231-4579\"\n\n- name: Remove switch from stack\n  meraki_switch_stack:\n    auth_key: abc123\n    state: absent\n    org_name: YourOrg\n    net_name: YourNet\n    stack_id: ABC12340987\n    serials:\n    - \"ABCD-1231-4579\"\n\n- name: Query one stack\n  meraki_switch_stack:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n    stack_id: ABC12340987\n"
  },
  "cisco.meraki.meraki_switch_storm_control": {
    "doc": {
      "description": "Allows for management of storm control settings for Meraki MS switches.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "broadcast_threshold": {
          "aliases": [],
          "description": "Percentage (1 to 99) of total available port bandwidth for broadcast traffic type.\nDefault value 100 percent rate is to clear the configuration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "multicast_threshold": {
          "aliases": [],
          "description": "Percentage (1 to 99) of total available port bandwidth for multicast traffic type.\nDefault value 100 percent rate is to clear the configuration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [],
          "description": "Name of network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether storm control configuration should be queried or modified.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "unknown_unicast_threshold": {
          "aliases": [],
          "description": "Percentage (1 to 99) of total available port bandwidth for unknown unicast traffic type.\nDefault value 100 percent rate is to clear the configuration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage storm control configuration on a switch in the Meraki cloud",
      "version_added": "0.0.1"
    },
    "examples": "\n- name: Set broadcast settings\n  meraki_switch_storm_control:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    broadcast_threshold: 75\n    multicast_threshold: 70\n    unknown_unicast_threshold: 65\n  delegate_to: localhost\n\n- name: Query storm control settings\n  meraki_switch_storm_control:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_switchport": {
    "doc": {
      "description": "Allows for management of switchports settings for Meraki MS switches.",
      "has_action": false,
      "notes": "More information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "access_policy_number": {
          "aliases": [],
          "description": "Number of the access policy to apply.\nOnly applicable to access port types.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "access_policy_type": {
          "aliases": [],
          "description": "Type of access policy to apply to port.",
          "type": "str",
          "required": false,
          "choices": [
            "Open",
            "Custom access policy",
            "MAC allow list",
            "Sticky MAC allow list"
          ],
          "suboptions": {}
        },
        "allowed_vlans": {
          "aliases": [],
          "description": "List of VLAN numbers to be allowed on switchport.",
          "default": "all",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Whether a switchport should be enabled or disabled.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "isolation_enabled": {
          "aliases": [],
          "description": "Isolation status of switchport.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link_negotiation": {
          "aliases": [],
          "description": "Link speed for the switchport.",
          "default": "Auto negotiate",
          "type": "str",
          "required": false,
          "choices": [
            "Auto negotiate",
            "100 Megabit (auto)",
            "100 Megabit full duplex (forced)"
          ],
          "suboptions": {}
        },
        "mac_allow_list": {
          "aliases": [],
          "description": "MAC addresses list that are allowed on a port.\nOnly applicable to access port type.\nOnly applicable to access_policy_type \"MAC allow list\".",
          "type": "dict",
          "required": false,
          "suboptions": {
            "macs": {
              "aliases": [],
              "description": "List of MAC addresses to update with based on state option.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state the configuration should be left in.\nMerged, MAC addresses provided will be added to the current allow list.\nReplaced, All MAC addresses are overwritten, only the MAC addresses provided with exist in the allow list.\nDeleted, Remove the MAC addresses provided from the current allow list.",
              "default": "replaced",
              "type": "str",
              "required": false,
              "choices": [
                "merged",
                "replaced",
                "deleted"
              ],
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [
            "description"
          ],
          "description": "Switchport description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "number": {
          "aliases": [],
          "description": "Port number.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "poe_enabled": {
          "aliases": [],
          "description": "Enable or disable Power Over Ethernet on a port.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rstp_enabled": {
          "aliases": [],
          "description": "Enable or disable Rapid Spanning Tree Protocol on a port.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "serial": {
          "aliases": [],
          "description": "Serial nubmer of the switch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether a switchport should be queried or modified.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "query",
            "present"
          ],
          "suboptions": {}
        },
        "sticky_mac_allow_list": {
          "aliases": [],
          "description": "MAC addresses list that are allowed on a port.\nOnly applicable to access port type.\nOnly applicable to access_policy_type \"Sticky MAC allow list\".",
          "type": "dict",
          "required": false,
          "suboptions": {
            "macs": {
              "aliases": [],
              "description": "List of MAC addresses to update with based on state option.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state the configuration should be left in.\nMerged, MAC addresses provided will be added to the current allow list.\nReplaced, All MAC addresses are overwritten, only the MAC addresses provided with exist in the allow list.\nDeleted, Remove the MAC addresses provided from the current allow list.",
              "default": "replaced",
              "type": "str",
              "required": false,
              "choices": [
                "merged",
                "replaced",
                "deleted"
              ],
              "suboptions": {}
            }
          }
        },
        "sticky_mac_allow_list_limit": {
          "aliases": [],
          "description": "The number of MAC addresses allowed in the sticky port allow list.\nOnly applicable to access port type.\nOnly applicable to access_policy_type \"Sticky MAC allow list\".\nThe value must be equal to or greater then the list size of sticky_mac_allow_list. Value will be checked for validity, during processing.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "stp_guard": {
          "aliases": [],
          "description": "Set state of STP guard.",
          "default": "disabled",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "root guard",
            "bpdu guard",
            "loop guard"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tags to assign to a port.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Set port type.",
          "default": "access",
          "type": "str",
          "required": false,
          "choices": [
            "access",
            "trunk"
          ],
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "VLAN number assigned to port.\nIf a port is of type trunk, the specified VLAN is the native VLAN.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "voice_vlan": {
          "aliases": [],
          "description": "VLAN number assigned to a port for voice traffic.\nOnly applicable to access port type.\nOnly applicable if voice_vlan_state is set to present.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "voice_vlan_state": {
          "aliases": [],
          "description": "Specifies whether voice vlan configuration should be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage switchports on a switch in the Meraki cloud"
    },
    "examples": "\n- name: Query information about all switchports on a switch\n  meraki_switchport:\n    auth_key: abc12345\n    state: query\n    serial: ABC-123\n  delegate_to: localhost\n\n- name: Query information about all switchports on a switch\n  meraki_switchport:\n    auth_key: abc12345\n    state: query\n    serial: ABC-123\n    number: 2\n  delegate_to: localhost\n\n- name: Name switchport\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 7\n    name: Test Port\n  delegate_to: localhost\n\n- name: Configure access port with voice VLAN\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 7\n    enabled: true\n    name: Test Port\n    tags: desktop\n    type: access\n    vlan: 10\n    voice_vlan: 11\n  delegate_to: localhost\n\n- name: Check access port for idempotency\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 7\n    enabled: true\n    name: Test Port\n    tags: desktop\n    type: access\n    vlan: 10\n    voice_vlan: 11\n  delegate_to: localhost\n\n- name: Configure trunk port with specific VLANs\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 7\n    enabled: true\n    name: Server port\n    tags: server\n    type: trunk\n    allowed_vlans:\n      - 10\n      - 15\n      - 20\n  delegate_to: localhost\n\n- name: Configure access port with sticky MAC allow list and limit.\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 5\n    sticky_mac_allow_limit: 3\n    sticky_mac_allow_list:\n        macs:\n          - aa:aa:bb:bb:cc:cc\n          - bb:bb:aa:aa:cc:cc\n          - 11:aa:bb:bb:cc:cc\n        state: replaced\n    delegate_to: localhost\n\n- name: Delete an existing MAC address from the sticky MAC allow list.\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 5\n    sticky_mac_allow_list:\n        macs:\n          - aa:aa:bb:bb:cc:cc\n        state: deleted\n    delegate_to: localhost\n\n- name: Add a MAC address to sticky MAC allow list.\n  meraki_switchport:\n    auth_key: abc12345\n    state: present\n    serial: ABC-123\n    number: 5\n    sticky_mac_allow_list:\n        macs:\n          - 22:22:bb:bb:cc:cc\n        state: merged\n    delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_syslog": {
    "doc": {
      "description": "Allows for creation and management of Syslog servers within Meraki.",
      "has_action": false,
      "notes": "Changes to existing syslog servers replaces existing configuration. If you need to add to an existing configuration set state to query to gather the existing configuration and then modify or add.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable MERAKI_KEY is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID number of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "name",
            "network"
          ],
          "description": "Name of a network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "servers": {
          "aliases": [],
          "description": "List of syslog server settings",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "IP address or hostname of Syslog server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Port number Syslog server is listening on.",
              "default": "514",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "roles": {
              "aliases": [],
              "description": "List of applicable Syslog server roles.",
              "type": "list",
              "required": false,
              "choices": [
                "Wireless Event log",
                "Appliance event log",
                "Switch event log",
                "Air Marshal events",
                "Flows",
                "URLs",
                "IDS alerts",
                "Security events"
              ],
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Query or edit syslog servers\nTo delete a syslog server, do not include server in list of servers",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage syslog server settings in the Meraki cloud."
    },
    "examples": "\n- name: Query syslog configurations on network named MyNet in the YourOrg organization\n  meraki_syslog:\n    auth_key: abc12345\n    status: query\n    org_name: YourOrg\n    net_name: MyNet\n  delegate_to: localhost\n\n- name: Add single syslog server with Appliance event log role\n  meraki_syslog:\n    auth_key: abc12345\n    status: query\n    org_name: YourOrg\n    net_name: MyNet\n    servers:\n      - host: 192.0.1.2\n        port: 514\n        roles:\n          - Appliance event log\n  delegate_to: localhost\n\n- name: Add multiple syslog servers\n  meraki_syslog:\n    auth_key: abc12345\n    status: query\n    org_name: YourOrg\n    net_name: MyNet\n    servers:\n      - host: 192.0.1.2\n        port: 514\n        roles:\n          - Appliance event log\n      - host: 192.0.1.3\n        port: 514\n        roles:\n          - Appliance event log\n          - Flows\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_vlan": {
    "doc": {
      "description": "Create, edit, query, or delete VLANs in a Meraki environment.",
      "has_action": false,
      "notes": "Meraki's API will return an error if VLANs aren't enabled on a network. VLANs are returned properly if VLANs are enabled on a network.\nSome of the options are likely only used for developers within Meraki.\nMeraki's API defaults to networks having VLAN support disabled and there is no way to enable VLANs support in the API. VLAN support must be enabled manually.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "appliance_ip": {
          "aliases": [],
          "description": "IP address of appliance.\nAddress must be within subnet specified in C(subnet) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dhcp_boot_filename": {
          "aliases": [],
          "description": "Filename to boot from for DHCP boot",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dhcp_boot_next_server": {
          "aliases": [],
          "description": "DHCP boot option to direct boot clients to the server to load boot file from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dhcp_boot_options_enabled": {
          "aliases": [],
          "description": "Enable DHCP boot options",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dhcp_handling": {
          "aliases": [],
          "description": "How to handle DHCP packets on network.",
          "type": "str",
          "required": false,
          "choices": [
            "Run a DHCP server",
            "Relay DHCP to another server",
            "Do not respond to DHCP requests",
            "none",
            "server",
            "relay"
          ],
          "suboptions": {}
        },
        "dhcp_lease_time": {
          "aliases": [],
          "description": "DHCP lease timer setting",
          "type": "str",
          "required": false,
          "choices": [
            "30 minutes",
            "1 hour",
            "4 hours",
            "12 hours",
            "1 day",
            "1 week"
          ],
          "suboptions": {}
        },
        "dhcp_options": {
          "aliases": [],
          "description": "List of DHCP option values",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "code": {
              "aliases": [],
              "description": "DHCP option number.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Type of value for DHCP option.",
              "type": "str",
              "required": false,
              "choices": [
                "text",
                "ip",
                "hex",
                "integer"
              ],
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Value for DHCP option.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "dhcp_relay_server_ips": {
          "aliases": [],
          "description": "IP addresses to forward DHCP packets to.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns_nameservers": {
          "aliases": [],
          "description": "Semi-colon delimited list of DNS IP addresses.\nSpecify one of the following options for preprogrammed DNS entries opendns, google_dns, upstream_dns",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fixed_ip_assignments": {
          "aliases": [],
          "description": "Static IP address assignments to be distributed via DHCP by MAC address.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip": {
              "aliases": [],
              "description": "IP address for fixed IP assignment binding.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac": {
              "aliases": [],
              "description": "MAC address for fixed IP assignment binding.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Descriptive name of IP assignment binding.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "vlan_name"
          ],
          "description": "Name of VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which VLAN is in or should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which VLAN is in or should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reserved_ip_range": {
          "aliases": [],
          "description": "IP address ranges which should be reserve and not distributed via DHCP.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "comment": {
              "aliases": [],
              "description": "Description of IP addresses reservation",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "end": {
              "aliases": [],
              "description": "Last IP address of reserved IP address range, inclusive.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "start": {
              "aliases": [],
              "description": "First IP address of reserved IP address range, inclusive.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "CIDR notation of network subnet.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "ID number of VLAN.\nID should be between 1-4096.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "vpn_nat_subnet": {
          "aliases": [],
          "description": "The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage VLANs in the Meraki cloud"
    },
    "examples": "\n- name: Query all VLANs in a network.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: query\n  delegate_to: localhost\n\n- name: Query information about a single VLAN by ID.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    vlan_id: 2\n    state: query\n  delegate_to: localhost\n\n- name: Create a VLAN.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    vlan_id: 2\n    name: TestVLAN\n    subnet: 192.0.1.0/24\n    appliance_ip: 192.0.1.1\n  delegate_to: localhost\n\n- name: Update a VLAN.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: present\n    vlan_id: 2\n    name: TestVLAN\n    subnet: 192.0.1.0/24\n    appliance_ip: 192.168.250.2\n    fixed_ip_assignments:\n      - mac: \"13:37:de:ad:be:ef\"\n        ip: 192.168.250.10\n        name: fixed_ip\n    reserved_ip_range:\n      - start: 192.168.250.10\n        end: 192.168.250.20\n        comment: reserved_range\n    dns_nameservers: opendns\n  delegate_to: localhost\n\n- name: Enable DHCP on VLAN with options\n  meraki_vlan:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    vlan_id: 2\n    name: TestVLAN\n    subnet: 192.168.250.0/24\n    appliance_ip: 192.168.250.2\n    dhcp_handling: server\n    dhcp_lease_time: 1 hour\n    dhcp_boot_options_enabled: false\n    dhcp_options:\n      - code: 5\n        type: ip\n        value: 192.0.1.1\n  delegate_to: localhost\n\n- name: Delete a VLAN.\n  meraki_vlan:\n    auth_key: abc12345\n    org_name: YourOrg\n    net_name: YourNet\n    state: absent\n    vlan_id: 2\n  delegate_to: localhost\n"
  },
  "cisco.meraki.meraki_webhook": {
    "doc": {
      "description": "Configure and query information about webhooks within the Meraki cloud.",
      "has_action": false,
      "notes": "Some of the options are likely only used for developers within Meraki.\nMore information about the Meraki API can be found at U(https://dashboard.meraki.com/api_docs).\nSome of the options are likely only used for developers within Meraki.\nAs of Ansible 2.9, Meraki modules output keys as snake case. To use camel case, set the C(ANSIBLE_MERAKI_FORMAT) environment variable to C(camelcase).\nAnsible's Meraki modules will stop supporting camel case output in Ansible 2.13. Please update your playbooks.\nCheck Mode downloads the current configuration from the dashboard, then compares changes against this download. Check Mode will report changed if there are differences in the configurations, but does not submit changes to the API for validation of change.",
      "options": {
        "auth_key": {
          "aliases": [],
          "description": "Authentication key provided by the dashboard. Required if environmental variable C(MERAKI_KEY) is not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Hostname for Meraki dashboard.\nCan be used to access regional Meraki environments, such as China.",
          "default": "api.meraki.com",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_error_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if server returns an internal server error.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of webhook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_id": {
          "aliases": [],
          "description": "ID of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "net_name": {
          "aliases": [
            "network"
          ],
          "description": "Name of network which configuration is applied to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_id": {
          "aliases": [],
          "description": "ID of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org_name": {
          "aliases": [
            "organization"
          ],
          "description": "Name of organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Instructs module whether response keys should be snake case (ex. C(net_id)) or camel case (ex. C(netId)).",
          "default": "snakecase",
          "type": "str",
          "required": false,
          "choices": [
            "snakecase",
            "camelcase"
          ],
          "suboptions": {}
        },
        "output_level": {
          "aliases": [],
          "description": "Set amount of debug output during module execution.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "normal"
          ],
          "suboptions": {}
        },
        "rate_limit_retry_time": {
          "aliases": [],
          "description": "Number of seconds to retry if rate limiter is triggered.",
          "default": "165",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "shared_secret": {
          "aliases": [],
          "description": "Secret password to use when accessing webhook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies whether object should be queried, created/modified, or removed.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "test": {
          "aliases": [],
          "description": "Indicates whether to test or query status.",
          "type": "str",
          "required": false,
          "choices": [
            "test"
          ],
          "suboptions": {}
        },
        "test_id": {
          "aliases": [],
          "description": "ID of webhook test query.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to timeout for HTTP requests.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL to access when calling webhook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_https": {
          "aliases": [],
          "description": "If C(no), it will use HTTP. Otherwise it will use HTTPS.\nOnly useful for internal Meraki developers.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_proxy": {
          "aliases": [],
          "description": "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Whether to validate HTTP certificates.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "webhook_id": {
          "aliases": [],
          "description": "Unique ID of webhook.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage webhooks configured in the Meraki cloud"
    },
    "examples": "\n- name: Create webhook\n  meraki_webhook:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    name: Test_Hook\n    url: https://webhook.url/\n    shared_secret: shhhdonttellanyone\n  delegate_to: localhost\n\n- name: Query one webhook\n  meraki_webhook:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n    name: Test_Hook\n  delegate_to: localhost\n\n- name: Query all webhooks\n  meraki_webhook:\n    auth_key: abc123\n    state: query\n    org_name: YourOrg\n    net_name: YourNet\n  delegate_to: localhost\n\n- name: Delete webhook\n  meraki_webhook:\n    auth_key: abc123\n    state: absent\n    org_name: YourOrg\n    net_name: YourNet\n    name: Test_Hook\n  delegate_to: localhost\n\n- name: Test webhook\n  meraki_webhook:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    test: test\n    url: https://webhook.url/abc123\n  delegate_to: localhost\n\n- name: Get webhook status\n  meraki_webhook:\n    auth_key: abc123\n    state: present\n    org_name: YourOrg\n    net_name: YourNet\n    test: status\n    test_id: abc123531234\n  delegate_to: localhost\n"
  }
}