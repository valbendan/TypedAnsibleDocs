{
  "community.hashi_vault.vault_read": {
    "doc": {
      "description": "Performs a generic read operation against a given path in HashiCorp Vault.",
      "has_action": false,
      "options": {
        "auth_method": {
          "aliases": [],
          "description": "Authentication method to be used.\nC(none) auth method was added in collection version C(1.2.0).\nC(cert) auth method was added in collection version C(1.4.0).\nC(aws_iam_login) was renamed C(aws_iam) in collection version C(2.1.0). The old name will be removed in C(3.0.0).",
          "default": "token",
          "type": "str",
          "required": false,
          "choices": [
            "token",
            "userpass",
            "ldap",
            "approle",
            "aws_iam",
            "aws_iam_login",
            "jwt",
            "cert",
            "none"
          ],
          "suboptions": {}
        },
        "aws_access_key": {
          "aliases": [
            "aws_access_key_id"
          ],
          "description": "The AWS access key to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "aws_iam_server_id": {
          "aliases": [],
          "description": "If specified, sets the value to use for the C(X-Vault-AWS-IAM-Server-ID) header as part of C(GetCallerIdentity) request.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "aws_profile": {
          "aliases": [
            "boto_profile"
          ],
          "description": "The AWS profile",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "aws_secret_key": {
          "aliases": [
            "aws_secret_access_key"
          ],
          "description": "The AWS secret key that corresponds to the access key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "aws_security_token": {
          "aliases": [],
          "description": "The AWS security token if using temporary access and secret keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "Path to certificate to use for authentication.\nIf not specified by any other means, the C(VAULT_CACERT) environment variable will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cert_auth_private_key": {
          "aliases": [],
          "description": "For C(cert) auth, path to the private key file to authenticate with, in PEM format.",
          "type": "path",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "cert_auth_public_key": {
          "aliases": [],
          "description": "For C(cert) auth, path to the certificate file to authenticate with, in PEM format.",
          "type": "path",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "jwt": {
          "aliases": [],
          "description": "The JSON Web Token (JWT) to use for JWT authentication to Vault.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mount_point": {
          "aliases": [],
          "description": "Vault mount point.\nIf not specified, the default mount point for a given auth method is used.\nDoes not apply to token authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Vault namespace where secrets reside. This option requires HVAC 0.7.0+ and Vault 0.11+.\nOptionally, this may be achieved by prefixing the authentication mount point and/or secret path with the namespace (e.g C(mynamespace/secret/mysecret)).\nIf environment variable C(VAULT_NAMESPACE) is set, its value will be used last among all ways to specify I(namespace).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Authentication password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Vault path to be read.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "proxies": {
          "aliases": [],
          "description": "URL(s) to the proxies used to access the Vault service.\nIt can be a string or a dict.\nIf it's a dict, provide the scheme (eg. C(http) or C(https)) as the key, and the URL as the value.\nIf it's a string, provide a single URL that will be used as the proxy for both C(http) and C(https) schemes.\nA string that can be interpreted as a dictionary will be converted to one (see examples).\nYou can specify a different proxy for HTTP and HTTPS resources.\nIf not specified, L(environment variables from the Requests library,https://requests.readthedocs.io/en/master/user/advanced/#proxies) are used.",
          "type": "raw",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "The AWS region for which to create the connection.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Allows for retrying on errors, based on the L(Retry class in the urllib3 library,https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html#urllib3.util.Retry).\nThis collection defines recommended defaults for retrying connections to Vault.\nThis option can be specified as a positive number (integer) or dictionary.\nIf this option is not specified or the number is C(0), then retries are disabled.\nA number sets the total number of retries, and uses collection defaults for the other settings.\nA dictionary value is used directly to initialize the C(Retry) class, so it can be used to fully customize retries.\nFor detailed information on retries, see the collection User Guide.",
          "type": "raw",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "retry_action": {
          "aliases": [],
          "description": "Controls whether and how to show messages on I(retries).\nThis has no effect if a request is not retried.",
          "default": "warn",
          "type": "str",
          "required": false,
          "choices": [
            "ignore",
            "warn"
          ],
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "role_id": {
          "aliases": [],
          "description": "Vault Role ID or name. Used in C(approle), C(aws_iam), and C(cert) auth methods.\nFor C(cert) auth, if no I(role_id) is supplied, the default behavior is to try all certificate roles and return any one that matches.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secret_id": {
          "aliases": [],
          "description": "Secret ID to be used for Vault AppRole authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Sets the connection timeout in seconds.\nIf not set, then the C(hvac) library's default is used.",
          "type": "int",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "token": {
          "aliases": [],
          "description": "Vault token. Token may be specified explicitly, through the listed [env] vars, and also through the C(VAULT_TOKEN) env var.\nIf no token is supplied, explicitly or through env, then the plugin will check for a token file, as determined by I(token_path) and I(token_file).\nThe order of token loading (first found wins) is C(token param -> ansible var -> ANSIBLE_HASHI_VAULT_TOKEN -> VAULT_TOKEN -> token file).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token_file": {
          "aliases": [],
          "description": "If no token is specified, will try to read the token from this file in I(token_path).",
          "default": ".vault-token",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token_path": {
          "aliases": [],
          "description": "If no token is specified, will try to read the I(token_file) from this path.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "token_validate": {
          "aliases": [],
          "description": "For token auth, will perform a C(lookup-self) operation to determine the token's validity before using it.\nDisable if your token does not have the C(lookup-self) capability.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL to the Vault service.\nIf not specified by any other means, the value of the C(VAULT_ADDR) environment variable will be used.\nIf C(VAULT_ADDR) is also not defined then an error will be raised.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Authentication user name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Controls verification and validation of SSL certificates, mostly you only want to turn off with self signed ones.\nWill be populated with the inverse of C(VAULT_SKIP_VERIFY) if that is set and I(validate_certs) is not explicitly provided.\nWill default to C(true) if neither I(validate_certs) or C(VAULT_SKIP_VERIFY) are set.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "C(hvac) (L(Python library,https://hvac.readthedocs.io/en/stable/overview.html))",
        "For detailed requirements, see R(the collection requirements page,ansible_collections.community.hashi_vault.docsite.user_guide.requirements)."
      ],
      "short_description": "Perform a read operation against HashiCorp Vault",
      "version_added": "1.4.0"
    },
    "examples": "\n- name: Read a kv2 secret from Vault via the remote host with userpass auth\n  community.hashi_vault.vault_read:\n    url: https://vault:8201\n    path: secret/data/hello\n    auth_method: userpass\n    username: user\n    password: '{{ passwd }}'\n  register: secret\n\n- name: Display the secret data\n  ansible.builtin.debug:\n    msg: \"{{ secret.data.data.data }}\"\n\n- name: Retrieve an approle role ID from Vault via the remote host\n  community.hashi_vault.vault_read:\n    url: https://vault:8201\n    path: auth/approle/role/role-name/role-id\n  register: approle_id\n\n- name: Display the role ID\n  ansible.builtin.debug:\n    msg: \"{{ approle_id.data.data.role_id }}\"\n"
  }
}