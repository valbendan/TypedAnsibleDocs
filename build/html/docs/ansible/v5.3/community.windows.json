{
  "community.windows.psexec": {
    "doc": {
      "description": "Runs a remote command from a Linux host to a Windows host without WinRM being set up.\nCan be run on the Ansible controller to bootstrap Windows hosts to get them ready for WinRM.",
      "has_action": false,
      "notes": "This module requires the Windows host to have SMB configured and enabled, and port 445 opened on the firewall.\nThis module will wait until the process is finished unless I(asynchronous) is C(yes), ensure the process is run as a non-interactive command to avoid infinite hangs waiting for input.\nThe I(connection_username) must be a member of the local Administrator group of the Windows host. For non-domain joined hosts, the C(LocalAccountTokenFilterPolicy) should be set to C(1) to ensure this works, see U(https://support.microsoft.com/en-us/help/951016/description-of-user-account-control-and-remote-restrictions-in-windows).\nFor more information on this module and the various host requirements, see U(https://github.com/jborean93/pypsexec).",
      "options": {
        "arguments": {
          "aliases": [],
          "description": "Any arguments as a single string to use when running the executable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "asynchronous": {
          "aliases": [],
          "description": "Will run the command as a detached process and the module returns immediately after starting the process while the process continues to run in the background.\nThe I(stdout) and I(stderr) return values will be null when this is set to C(yes).\nThe I(stdin) option does not work with this type of process.\nThe I(rc) return value is not set when this is C(yes)",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "connection_password": {
          "aliases": [],
          "description": "The password for I(connection_user).\nRequired if the Kerberos requirements are not installed or the username is a local account to the Windows host.\nCan be omitted to use a Kerberos principal ticket for the principal set by I(connection_user) if the Kerberos library is installed and the ticket has already been retrieved with the C(kinit) command before.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "connection_timeout": {
          "aliases": [],
          "description": "The timeout in seconds to wait when receiving the initial SMB negotiate response from the server.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "connection_username": {
          "aliases": [],
          "description": "The username to use when connecting to the remote Windows host.\nThis user must be a member of the C(Administrators) group of the Windows host.\nRequired if the Kerberos requirements are not installed or the username is a local account to the Windows host.\nCan be omitted to use the default Kerberos principal ticket in the local credential cache if the Kerberos library is installed.\nIf I(process_username) is not specified, then the remote process will run under a Network Logon under this account.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "encrypt": {
          "aliases": [],
          "description": "Will use SMB encryption to encrypt the SMB messages sent to and from the host.\nThis requires the SMB 3 protocol which is only supported from Windows Server 2012 or Windows 8, older versions like Windows 7 or Windows Server 2008 (R2) must set this to C(no) and use no encryption.\nWhen setting to C(no), the packets are in plaintext and can be seen by anyone sniffing the network, any process options are included in this.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "The executable to run on the Windows host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The remote Windows host to connect to, can be either an IP address or a hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "integrity_level": {
          "aliases": [],
          "description": "The integrity level of the process when I(process_username) is defined and is not equal to C(System).\nWhen C(default), the default integrity level based on the system setup.\nWhen C(elevated), the command will be run with Administrative rights.\nWhen C(limited), the command will be forced to run with non-Administrative rights.",
          "default": "default",
          "type": "str",
          "required": false,
          "choices": [
            "limited",
            "default",
            "elevated"
          ],
          "suboptions": {}
        },
        "interactive": {
          "aliases": [],
          "description": "Will run the process as an interactive process that shows a process Window of the Windows session specified by I(interactive_session).\nThe I(stdout) and I(stderr) return values will be null when this is set to C(yes).\nThe I(stdin) option does not work with this type of process.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interactive_session": {
          "aliases": [],
          "description": "The Windows session ID to use when displaying the interactive process on the remote Windows host.\nThis is only valid when I(interactive) is C(yes).\nThe default is C(0) which is the console session of the Windows host.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "load_profile": {
          "aliases": [],
          "description": "Runs the remote command with the user's profile loaded.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port that the remote SMB service is listening on.",
          "default": "445",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Set the command's priority on the Windows host.\nSee U(https://msdn.microsoft.com/en-us/library/windows/desktop/ms683211.aspx) for more details.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "above_normal",
            "below_normal",
            "high",
            "idle",
            "normal",
            "realtime"
          ],
          "suboptions": {}
        },
        "process_password": {
          "aliases": [],
          "description": "The password for I(process_username).\nRequired if I(process_username) is defined and not C(System).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "process_timeout": {
          "aliases": [],
          "description": "The timeout in seconds that is placed upon the running process.\nA value of C(0) means no timeout.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "process_username": {
          "aliases": [],
          "description": "The user to run the process as.\nThis can be set to run the process under an Interactive logon of the specified account which bypasses limitations of a Network logon used when this isn't specified.\nIf omitted then the process is run under the same account as I(connection_username) with a Network logon.\nSet to C(System) to run as the builtin SYSTEM account, no password is required with this account.\nIf I(encrypt) is C(no), the username and password are sent as a simple XOR scrambled byte string that is not encrypted. No special tools are required to get the username and password just knowledge of the protocol.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "show_ui_on_logon_screen": {
          "aliases": [],
          "description": "Shows the process UI on the Winlogon secure desktop when I(process_username) is C(System).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "stdin": {
          "aliases": [],
          "description": "Data to send on the stdin pipe once the process has started.\nThis option has no effect when I(interactive) or I(asynchronous) is C(yes).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "working_directory": {
          "aliases": [],
          "description": "Changes the working directory set when starting the process.",
          "default": "C:\\Windows\\System32",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pypsexec",
        "smbprotocol[kerberos] for optional Kerberos authentication"
      ],
      "short_description": "Runs commands on a remote Windows host based on the PsExec model"
    },
    "examples": "\n- name: Run a cmd.exe command\n  community.windows.psexec:\n    hostname: server\n    connection_username: username\n    connection_password: password\n    executable: cmd.exe\n    arguments: /c echo Hello World\n\n- name: Run a PowerShell command\n  community.windows.psexec:\n    hostname: server.domain.local\n    connection_username: username@DOMAIN.LOCAL\n    connection_password: password\n    executable: powershell.exe\n    arguments: Write-Host Hello World\n\n- name: Send data through stdin\n  community.windows.psexec:\n    hostname: 192.168.1.2\n    connection_username: username\n    connection_password: password\n    executable: powershell.exe\n    arguments: '-'\n    stdin: |\n      Write-Host Hello World\n      Write-Error Error Message\n      exit 0\n\n- name: Run the process as a different user\n  community.windows.psexec:\n    hostname: server\n    connection_user: username\n    connection_password: password\n    executable: whoami.exe\n    arguments: /all\n    process_username: anotheruser\n    process_password: anotherpassword\n\n- name: Run the process asynchronously\n  community.windows.psexec:\n    hostname: server\n    connection_username: username\n    connection_password: password\n    executable: cmd.exe\n    arguments: /c rmdir C:\\temp\n    asynchronous: yes\n\n- name: Use Kerberos authentication for the connection (requires smbprotocol[kerberos])\n  community.windows.psexec:\n    hostname: host.domain.local\n    connection_username: user@DOMAIN.LOCAL\n    executable: C:\\some\\path\\to\\executable.exe\n    arguments: /s\n\n- name: Disable encryption to work with WIndows 7/Server 2008 (R2)\n  community.windows.psexec:\n    hostanme: windows-pc\n    connection_username: Administrator\n    connection_password: Password01\n    encrypt: no\n    integrity_level: elevated\n    process_username: Administrator\n    process_password: Password01\n    executable: powershell.exe\n    arguments: (New-Object -ComObject Microsoft.Update.Session).CreateUpdateInstaller().IsBusy\n\n- name: Download and run ConfigureRemotingForAnsible.ps1 to setup WinRM\n  community.windows.psexec:\n    hostname: '{{ hostvars[inventory_hostname][\"ansible_host\"] | default(inventory_hostname) }}'\n    connection_username: '{{ ansible_user }}'\n    connection_password: '{{ ansible_password }}'\n    encrypt: yes\n    executable: powershell.exe\n    arguments: '-'\n    stdin: |\n      $ErrorActionPreference = \"Stop\"\n      $sec_protocols = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::SystemDefault\n      $sec_protocols = $sec_protocols -bor [Net.SecurityProtocolType]::Tls12\n      [Net.ServicePointManager]::SecurityProtocol = $sec_protocols\n      $url = \"https://github.com/ansible/ansible/raw/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\"\n      Invoke-Expression ((New-Object Net.WebClient).DownloadString($url))\n      exit\n  delegate_to: localhost\n"
  },
  "community.windows.win_audit_policy_system": {
    "doc": {
      "description": "Used to make changes to the system wide Audit Policy.",
      "has_action": false,
      "notes": "It is recommended to take a backup of the policies before adjusting them for the first time.\nSee this page for in depth information U(https://technet.microsoft.com/en-us/library/cc766468.aspx).",
      "options": {
        "audit_type": {
          "aliases": [],
          "description": "The type of event you would like to audit for.\nAccepts a list. See examples.",
          "type": "list",
          "required": true,
          "choices": [
            "failure",
            "none",
            "success"
          ],
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "Single string value for the category you would like to adjust the policy on.\nCannot be used with I(subcategory). You must define one or the other.\nChanging this setting causes all subcategories to be adjusted to the defined I(audit_type).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subcategory": {
          "aliases": [],
          "description": "Single string value for the subcategory you would like to adjust the policy on.\nCannot be used with I(category). You must define one or the other.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Used to make changes to the system wide Audit Policy"
    },
    "examples": "\n- name: Enable failure auditing for the subcategory \"File System\"\n  community.windows.win_audit_policy_system:\n    subcategory: File System\n    audit_type: failure\n\n- name: Enable all auditing types for the category \"Account logon events\"\n  community.windows.win_audit_policy_system:\n    category: Account logon events\n    audit_type: success, failure\n\n- name: Disable auditing for the subcategory \"File System\"\n  community.windows.win_audit_policy_system:\n    subcategory: File System\n    audit_type: none\n"
  },
  "community.windows.win_audit_rule": {
    "doc": {
      "description": "Used to apply audit rules to files, folders or registry keys.\nOnce applied, it will begin recording the user who performed the operation defined into the Security Log in the Event viewer.\nThe behavior is designed to ignore inherited rules since those cannot be adjusted without first disabling the inheritance behavior. It will still print inherited rules in the output though for debugging purposes.",
      "has_action": false,
      "options": {
        "audit_flags": {
          "aliases": [],
          "description": "Defines whether to log on failure, success, or both.\nTo log both define as comma separated list \"Success, Failure\".",
          "type": "list",
          "required": true,
          "choices": [
            "Failure",
            "Success"
          ],
          "suboptions": {}
        },
        "inheritance_flags": {
          "aliases": [],
          "description": "Defines what objects inside of a folder or registry key will inherit the settings.\nIf you are setting a rule on a file, this value has to be changed to C(none).\nFor more information on the choices see MSDN PropagationFlags enumeration at U(https://msdn.microsoft.com/en-us/library/system.security.accesscontrol.inheritanceflags.aspx).",
          "default": "ContainerInherit,ObjectInherit",
          "type": "list",
          "required": false,
          "choices": [
            "ContainerInherit",
            "ObjectInherit"
          ],
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest",
            "destination"
          ],
          "description": "Path to the file, folder, or registry key.\nRegistry paths should be in Powershell format, beginning with an abbreviation for the root such as, C(HKLM:\\Software).",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "propagation_flags": {
          "aliases": [],
          "description": "Propagation flag on the audit rules.\nThis value is ignored when the path type is a file.\nFor more information on the choices see MSDN PropagationFlags enumeration at U(https://msdn.microsoft.com/en-us/library/system.security.accesscontrol.propagationflags.aspx).",
          "default": "None",
          "required": false,
          "choices": [
            "None",
            "InherityOnly",
            "NoPropagateInherit"
          ],
          "suboptions": {}
        },
        "rights": {
          "aliases": [],
          "description": "Comma separated list of the rights desired. Only required for adding a rule.\nIf I(path) is a file or directory, rights can be any right under MSDN FileSystemRights U(https://msdn.microsoft.com/en-us/library/system.security.accesscontrol.filesystemrights.aspx).\nIf I(path) is a registry key, rights can be any right under MSDN RegistryRights U(https://msdn.microsoft.com/en-us/library/system.security.accesscontrol.registryrights.aspx).",
          "type": "list",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the rule should be C(present) or C(absent).\nFor absent, only I(path), I(user), and I(state) are required.\nSpecifying C(absent) will remove all rules matching the defined I(user).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "The user or group to adjust rules for.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Adds an audit rule to files, folders, or registry keys"
    },
    "examples": "\n- name: Add filesystem audit rule for a folder\n  community.windows.win_audit_rule:\n    path: C:\\inetpub\\wwwroot\\website\n    user: BUILTIN\\Users\n    rights: write,delete,changepermissions\n    audit_flags: success,failure\n    inheritance_flags: ContainerInherit,ObjectInherit\n\n- name: Add filesystem audit rule for a file\n  community.windows.win_audit_rule:\n    path: C:\\inetpub\\wwwroot\\website\\web.config\n    user: BUILTIN\\Users\n    rights: write,delete,changepermissions\n    audit_flags: success,failure\n    inheritance_flags: None\n\n- name: Add registry audit rule\n  community.windows.win_audit_rule:\n    path: HKLM:\\software\n    user: BUILTIN\\Users\n    rights: delete\n    audit_flags: 'success'\n\n- name: Remove filesystem audit rule\n  community.windows.win_audit_rule:\n    path: C:\\inetpub\\wwwroot\\website\n    user: BUILTIN\\Users\n    state: absent\n\n- name: Remove registry audit rule\n  community.windows.win_audit_rule:\n    path: HKLM:\\software\n    user: BUILTIN\\Users\n    state: absent\n"
  },
  "community.windows.win_auto_logon": {
    "doc": {
      "description": "Used to apply auto logon registry setting.",
      "has_action": false,
      "options": {
        "logon_count": {
          "aliases": [],
          "description": "The number of times to do an automatic logon.\nThis count is deremented by Windows everytime an automatic logon is performed.\nOnce the count reaches C(0) then the automatic logon process is disabled.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to be used for automatic login.\nMust be set when C(state=present).\nValue of this input will be used as password for I(username).\nWhile this value is encrypted by LSA it is decryptable to any user who is an Administrator on the remote host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the registry key should be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username to login automatically.\nMust be set when C(state=present).\nThis can be the Netlogon or UPN of a domain account and is automatically parsed to the C(DefaultUserName) and C(DefaultDomainName) registry properties.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Adds or Sets auto logon registry keys."
    },
    "examples": "\n- name: Set autologon for user1\n  community.windows.win_auto_logon:\n    username: User1\n    password: str0ngp@ssword\n\n- name: Set autologon for abc.com\\user1\n  community.windows.win_auto_logon:\n    username: abc.com\\User1\n    password: str0ngp@ssword\n\n- name: Remove autologon for user1\n  community.windows.win_auto_logon:\n    state: absent\n\n- name: Set autologon for user1 with a limited logon count\n  community.windows.win_auto_logon:\n    username: User1\n    password: str0ngp@ssword\n    logon_count: 5\n"
  },
  "community.windows.win_certificate_info": {
    "doc": {
      "description": "Returns information about certificates in a Windows Certificate Store.",
      "has_action": false,
      "options": {
        "store_location": {
          "aliases": [],
          "description": "The location of the store to search.",
          "default": "LocalMachine",
          "type": "str",
          "required": false,
          "choices": [
            "CurrentUser",
            "LocalMachine"
          ],
          "suboptions": {}
        },
        "store_name": {
          "aliases": [],
          "description": "The name of the store to search.\nSee U(https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.storename) for a list of built-in store names.",
          "default": "My",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "thumbprint": {
          "aliases": [],
          "description": "The thumbprint as a hex string of a certificate to find.\nWhen specified, filters the I(certificates) return value to a single certificate\nSee the examples for how to format the thumbprint.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Get information on certificates from a Windows Certificate Store"
    },
    "examples": "\n- name: Obtain information about a particular certificate in the computer's personal store\n  community.windows.win_certificate_info:\n    thumbprint: BD7AF104CF1872BDB518D95C9534EA941665FD27\n  register: mycert\n\n# thumbprint can also be lower case\n- name: Obtain information about a particular certificate in the computer's personal store\n  community.windows.win_certificate_info:\n    thumbprint: bd7af104cf1872bdb518d95c9534ea941665fd27\n  register: mycert\n\n- name: Obtain information about all certificates in the root store\n  community.windows.win_certificate_info:\n    store_name: Root\n  register: ca\n\n# Import a pfx and then get information on the certificates\n- name: Import pfx certificate that is password protected\n  ansible.windows.win_certificate_store:\n    path: C:\\Temp\\cert.pfx\n    state: present\n    password: VeryStrongPasswordHere!\n  become: yes\n  become_method: runas\n  register: mycert\n\n- name: Obtain information on each certificate that was touched\n  community.windows.win_certificate_info:\n    thumbprint: \"{{ item }}\"\n  register: mycert_stats\n  loop: \"{{ mycert.thumbprints }}\"\n"
  },
  "community.windows.win_computer_description": {
    "doc": {
      "description": "This module sets Windows description that is shown under My Computer properties. Module also sets Windows license owner and organization. License information can be viewed by running winver commad.",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "String value to apply to Windows descripton. Specify value of \"\" to clear the value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "String value of organization that the Windows is licensed to. Specify value of \"\" to clear the value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "String value of the persona that the Windows is licensed to. Specify value of \"\" to clear the value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Set windows description, owner and organization"
    },
    "examples": "\n- name: Set Windows description, owner and organization\n  community.windows.win_computer_description:\n   description: Best Box\n   owner: RusoSova\n   organization: MyOrg\n  register: result\n\n- name: Set Windows description only\n  community.windows.win_computer_description:\n   description: This is my Windows machine\n  register: result\n\n- name: Set organization and clear owner field\n  community.windows.win_computer_description:\n   owner: ''\n   organization: Black Mesa\n\n- name: Clear organization, description and owner\n  community.windows.win_computer_description:\n   organization: \"\"\n   owner: \"\"\n   description: \"\"\n  register: result\n"
  },
  "community.windows.win_credential": {
    "doc": {
      "description": "Used to create and remove Windows Credentials in the Credential Manager.\nThis module can manage both standard username/password credentials as well as certificate credentials.",
      "has_action": false,
      "notes": "This module requires to be run with C(become) so it can access the user's credential store.\nThere can only be one credential per host and type. if a second credential is defined that uses the same host and type, then the original credential is overwritten.",
      "options": {
        "alias": {
          "aliases": [],
          "description": "Adds an alias for the credential.\nTypically this is the NetBIOS name of a host if I(name) is set to the DNS name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [],
          "description": "A list of dicts that set application specific attributes for a credential.\nWhen set, existing attributes will be compared to the list as a whole, any differences means all attributes will be replaced.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "data": {
              "aliases": [],
              "description": "The value for the attribute.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "data_format": {
              "aliases": [],
              "description": "Controls the input type for I(data).\nIf C(text), I(data) is a text string that is UTF-16LE encoded to bytes.\nIf C(base64), I(data) is a base64 string that is base64 decoded to bytes.",
              "default": "text",
              "type": "str",
              "required": false,
              "choices": [
                "base64",
                "text"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The key for the attribute.\nThis is not a unique identifier as multiple attributes can have the same key.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "comment": {
          "aliases": [],
          "description": "A user defined comment for the credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The target that identifies the server or servers that the credential is to be used for.\nIf the value can be a NetBIOS name, DNS server name, DNS host name suffix with a wildcard character (C(*)), a NetBIOS of DNS domain name that contains a wildcard character sequence, or an asterisk.\nSee C(TargetName) in U(https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credentiala) for more details on what this value can be.\nThis is used with I(type) to produce a unique credential.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "persistence": {
          "aliases": [],
          "description": "Defines the persistence of the credential.\nIf C(local), the credential will persist for all logons of the same user on the same host.\nC(enterprise) is the same as C(local) but the credential is visible to the same domain user when running on other hosts and not just localhost.",
          "default": "local",
          "type": "str",
          "required": false,
          "choices": [
            "enterprise",
            "local"
          ],
          "suboptions": {}
        },
        "secret": {
          "aliases": [],
          "description": "The secret for the credential.\nWhen omitted, then no secret is used for the credential if a new credentials is created.\nWhen I(type) is a password type, this is the password for I(username).\nWhen I(type) is a certificate type, this is the pin for the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secret_format": {
          "aliases": [],
          "description": "Controls the input type for I(secret).\nIf C(text), I(secret) is a text string that is UTF-16LE encoded to bytes.\nIf C(base64), I(secret) is a base64 string that is base64 decoded to bytes.",
          "default": "text",
          "type": "str",
          "required": false,
          "choices": [
            "base64",
            "text"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When C(absent), the credential specified by I(name) and I(type) is removed.\nWhen C(present), the credential specified by I(name) and I(type) is removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of credential to store.\nThis is used with I(name) to produce a unique credential.\nWhen the type is a C(domain) type, the credential is used by Microsoft authentication packages like Negotiate.\nWhen the type is a C(generic) type, the credential is not used by any particular authentication package.\nIt is recommended to use a C(domain) type as only authentication providers can access the secret.",
          "type": "str",
          "required": true,
          "choices": [
            "domain_certificate",
            "domain_password",
            "generic_certificate",
            "generic_password"
          ],
          "suboptions": {}
        },
        "update_secret": {
          "aliases": [],
          "description": "When C(always), the secret will always be updated if they differ.\nWhen C(on_create), the secret will only be checked/updated when it is first created.\nIf the secret cannot be retrieved and this is set to C(always), the module will always result in a change.",
          "default": "always",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "on_create"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "When I(type) is a password type, then this is the username to store for the credential.\nWhen I(type) is a credential type, then this is the thumbprint as a hex string of the certificate to use.\nWhen C(type=domain_password), this should be in the form of a Netlogon (DOMAIN\\Username) or a UPN (username@DOMAIN).\nIf using a certificate thumbprint, the certificate must exist in the C(CurrentUser\\My) certificate store for the executing user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Windows Credentials in the Credential Manager"
    },
    "examples": "\n- name: Create a local only credential\n  community.windows.win_credential:\n    name: server.domain.com\n    type: domain_password\n    username: DOMAIN\\username\n    secret: Password01\n    state: present\n\n- name: Remove a credential\n  community.windows.win_credential:\n    name: server.domain.com\n    type: domain_password\n    state: absent\n\n- name: Create a credential with full values\n  community.windows.win_credential:\n    name: server.domain.com\n    type: domain_password\n    alias: server\n    username: username@DOMAIN.COM\n    secret: Password01\n    comment: Credential for server.domain.com\n    persistence: enterprise\n    attributes:\n    - name: Source\n      data: Ansible\n    - name: Unique Identifier\n      data: Y3VzdG9tIGF0dHJpYnV0ZQ==\n      data_format: base64\n\n- name: Create a certificate credential\n  community.windows.win_credential:\n    name: '*.domain.com'\n    type: domain_certificate\n    username: 0074CC4F200D27DC3877C24A92BA8EA21E6C7AF4\n    state: present\n\n- name: Create a generic credential\n  community.windows.win_credential:\n    name: smbhost\n    type: generic_password\n    username: smbuser\n    secret: smbuser\n    state: present\n\n- name: Remove a generic credential\n  community.windows.win_credential:\n    name: smbhost\n    type: generic_password\n    state: absent\n"
  },
  "community.windows.win_data_deduplication": {
    "doc": {
      "description": "This module can be used to enable Data Deduplication on a Windows volume.\nThe module will install the FS-Data-Deduplication feature (a reboot will be necessary).",
      "has_action": false,
      "options": {
        "drive_letter": {
          "aliases": [],
          "description": "Windows drive letter on which to enable data deduplication.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "Dictionary of settings to pass to the Set-DedupVolume powershell command.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "minimum_file_age_days": {
              "aliases": [],
              "description": "Minimum file age you want to target for deduplication.",
              "default": "2",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "minimum_file_size": {
              "aliases": [],
              "description": "Minimum file size you want to target for deduplication.\nIt will default to 32768 if not defined or if the value is less than 32768.",
              "default": "32768",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "no_compress": {
              "aliases": [],
              "description": "Wether you want to enabled filesystem compression or not.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "optimize_in_use_files": {
              "aliases": [],
              "description": "Indicates that the server attempts to optimize currently open files.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "verify": {
              "aliases": [],
              "description": "Indicates whether the deduplication engine performs a byte-for-byte verification for each duplicate chunk that optimization creates, rather than relying on a cryptographically strong hash.\nThis option is not recommend.\nSetting this parameter to True can degrade optimization performance.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Wether to enable or disable data deduplication on the selected volume.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Module to enable Data Deduplication on a volume."
    },
    "examples": "\n- name: Enable Data Deduplication on D\n  community.windows.win_data_deduplication:\n    drive_letter: 'D'\n    state: present\n\n- name: Enable Data Deduplication on D\n  community.windows.win_data_deduplication:\n    drive_letter: 'D'\n    state: present\n    settings:\n      no_compress: true\n      minimum_file_age_days: 1\n      minimum_file_size: 0\n"
  },
  "community.windows.win_defrag": {
    "doc": {
      "description": "Locates and consolidates fragmented files on local volumes to improve system performance.\nMore information regarding C(win_defrag) is available from: U(https://technet.microsoft.com/en-us/library/cc731650(v=ws.11).aspx)",
      "has_action": false,
      "options": {
        "exclude_volumes": {
          "aliases": [],
          "description": "A list of drive letters or mount point paths to exclude from defragmentation.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "freespace_consolidation": {
          "aliases": [],
          "description": "Perform free space consolidation on the specified volumes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "include_volumes": {
          "aliases": [],
          "description": "A list of drive letters or mount point paths of the volumes to be defragmented.\nIf this parameter is omitted, all volumes (not excluded) will be fragmented.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "parallel": {
          "aliases": [],
          "description": "Run the operation on each volume in parallel in the background.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Run the operation at low or normal priority.",
          "default": "low",
          "type": "str",
          "required": false,
          "choices": [
            "low",
            "normal"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "defrag.exe"
      ],
      "short_description": "Consolidate fragmented files on local volumes"
    },
    "examples": "\n- name: Defragment all local volumes (in parallel)\n  community.windows.win_defrag:\n    parallel: yes\n\n- name: 'Defragment all local volumes, except C: and D:'\n  community.windows.win_defrag:\n    exclude_volumes: [ C, D ]\n\n- name: 'Defragment volume D: with normal priority'\n  community.windows.win_defrag:\n    include_volumes: D\n    priority: normal\n\n- name: Consolidate free space (useful when reducing volumes)\n  community.windows.win_defrag:\n    freespace_consolidation: yes\n"
  },
  "community.windows.win_dhcp_lease": {
    "doc": {
      "description": "Manage Windows Server DHCP Leases (IPv4 Only)\nAdds, Removes and Modifies DHCP Leases and Reservations\nTask should be delegated to a Windows DHCP Server",
      "has_action": false,
      "options": {
        "description": {
          "aliases": [],
          "description": "Specifies the description for reservation being created.\nOnly applicable to l(type=reservation).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_hostname": {
          "aliases": [],
          "description": "Specifies the DNS hostname of the client for which the IP address lease is to be added.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_regtype": {
          "aliases": [],
          "description": "Indicates the type of DNS record to be registered by the DHCP. server service for this lease.\nl(a) results in an A record being registered.\nl(aptr) results in both A and PTR records to be registered.\nl(noreg) results in no DNS records being registered.",
          "default": "aptr",
          "type": "str",
          "required": false,
          "choices": [
            "aptr",
            "a",
            "noreg"
          ],
          "suboptions": {}
        },
        "duration": {
          "aliases": [],
          "description": "Specifies the duration of the DHCP lease in days.\nThe duration value only applies to l(type=lease).\nDefaults to the duration specified by the DHCP server configuration.\nOnly applicable to l(type=lease).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ip": {
          "aliases": [],
          "description": "The IPv4 address of the client server/computer.\nThis is a required parameter, if l(mac) is not set.\nCan be used to identify an existing lease/reservation, instead of l(mac).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "Specifies the client identifier to be set on the IPv4 address.\nThis is a required parameter, if l(ip) is not set.\nWindows clients use the MAC address as the client ID.\nLinux and other operating systems can use other types of identifiers.\nCan be used to identify an existing lease/reservation, instead of l(ip).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reservation_name": {
          "aliases": [],
          "description": "Specifies the name of the reservation being created.\nOnly applicable to l(type=reservation).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scope_id": {
          "aliases": [],
          "description": "Specifies the scope identifier as defined by the DHCP server.\nThis is a required parameter, if l(state=present) and the reservation or lease doesn't already exist. Not required if updating an existing lease or reservation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies the desired state of the DHCP lease or reservation.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of DHCP address.\nLeases expire as defined by l(duration).\nWhen l(duration) is not specified, the server default is used.\nReservations are permanent.",
          "default": "reservation",
          "type": "str",
          "required": false,
          "choices": [
            "reservation",
            "lease"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "This module requires Windows Server 2012 or Newer"
      ],
      "short_description": "Manage Windows Server DHCP Leases"
    },
    "examples": "\n- name: Ensure DHCP reservation exists\n  community.windows.win_dhcp_lease:\n    type: reservation\n    ip: 192.168.100.205\n    scope_id: 192.168.100.0\n    mac: 00:B1:8A:D1:5A:1F\n    dns_hostname: \"{{ ansible_inventory }}\"\n    description: Testing Server\n\n- name: Ensure DHCP lease or reservation does not exist\n  community.windows.win_dhcp_lease:\n    mac: 00:B1:8A:D1:5A:1F\n    state: absent\n\n- name: Ensure DHCP lease or reservation does not exist\n  community.windows.win_dhcp_lease:\n    ip: 192.168.100.205\n    state: absent\n\n- name: Convert DHCP lease to reservation & update description\n  community.windows.win_dhcp_lease:\n    type: reservation\n    ip: 192.168.100.205\n    description: Testing Server\n\n- name: Convert DHCP reservation to lease\n  community.windows.win_dhcp_lease:\n    type: lease\n    ip: 192.168.100.205\n"
  },
  "community.windows.win_disk_facts": {
    "doc": {
      "description": "With the module you can retrieve and output detailed information about the attached disks of the target and its volumes and partitions if existent.",
      "has_action": false,
      "notes": "In order to understand all the returned properties and values please visit the following site and open the respective MSFT class U(https://msdn.microsoft.com/en-us/library/windows/desktop/hh830612.aspx)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Allows to filter returned facts by type of disk information.\nIf volumes are selected partitions will be returned as well.",
          "default": "['physical_disk', 'virtual_disk', 'win32_disk_drive', 'partitions', 'volumes']",
          "type": "list",
          "required": false,
          "choices": [
            "physical_disk",
            "virtual_disk",
            "win32_disk_drive",
            "partitions",
            "volumes"
          ],
          "elements": "str",
          "version_added": "1.9.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "Windows 8.1 / Windows 2012 (NT 6.2)"
      ],
      "short_description": "Show the attached disks and disk information of the target host"
    },
    "examples": "\n- name: Get disk facts\n  community.windows.win_disk_facts:\n\n- name: Output first disk size\n  debug:\n    var: ansible_facts.disks[0].size\n\n- name: Convert first system disk into various formats\n  debug:\n    msg: '{{ disksize_gib }} vs {{ disksize_gib_human }}'\n  vars:\n    # Get first system disk\n    disk: '{{ ansible_facts.disks|selectattr(\"system_disk\")|first }}'\n\n    # Show disk size in Gibibytes\n    disksize_gib_human: '{{ disk.size|filesizeformat(true) }}'   # returns \"223.6 GiB\" (human readable)\n    disksize_gib: '{{ (disk.size/1024|pow(3))|round|int }} GiB'  # returns \"224 GiB\" (value in GiB)\n\n    # Show disk size in Gigabytes\n    disksize_gb_human: '{{ disk.size|filesizeformat }}'        # returns \"240.1 GB\" (human readable)\n    disksize_gb: '{{ (disk.size/1000|pow(3))|round|int }} GB'  # returns \"240 GB\" (value in GB)\n\n- name: Output second disk serial number\n  debug:\n    var: ansible_facts.disks[1].serial_number\n\n- name: get disk physical_disk and partition facts on the target\n  win_disk_facts:\n    filter:\n      - physical_disk\n      - partitions\n"
  },
  "community.windows.win_disk_image": {
    "doc": {
      "description": "Manages mount behavior for a specified ISO, VHD, or VHDX image on a Windows host. When C(state) is C(present), the image will be mounted under a system-assigned drive letter, which will be returned in the C(mount_path) value of the module result.\nRequires Windows 8+ or Windows Server 2012+.",
      "has_action": false,
      "options": {
        "image_path": {
          "aliases": [],
          "description": "Path to an ISO, VHD, or VHDX image on the target Windows host (the file cannot reside on a network share)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the image should be present as a drive-letter mount or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage ISO/VHD/VHDX mounts on Windows hosts"
    },
    "examples": "\n# Run installer from mounted ISO, then unmount\n- name: Ensure an ISO is mounted\n  community.windows.win_disk_image:\n    image_path: C:\\install.iso\n    state: present\n  register: disk_image_out\n\n- name: Run installer from mounted ISO\n  ansible.windows.win_package:\n    path: '{{ disk_image_out.mount_paths[0] }}setup\\setup.exe'\n    product_id: 35a4e767-0161-46b0-979f-e61f282fee21\n    state: present\n\n- name: Unmount ISO\n  community.windows.win_disk_image:\n    image_path: C:\\install.iso\n    state: absent\n"
  },
  "community.windows.win_dns_record": {
    "doc": {
      "description": "Manage DNS records within an existing Windows Server DNS zone.",
      "has_action": false,
      "options": {
        "computer_name": {
          "aliases": [],
          "description": "Specifies a DNS server.\nYou can specify an IP address or any value that resolves to an IP address, such as a fully qualified domain name (FQDN), host name, or NETBIOS name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the record.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the record.\nRequired when C(type=SRV).\nSupported only for C(type=SRV).",
          "type": "int",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "The priority number for each service in SRV record.\nRequired when C(type=SRV).\nSupported only for C(type=SRV).",
          "type": "int",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the record should exist or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "The \"time to live\" of the record, in seconds.\nIgnored when C(state=absent).\nValid range is 1 - 31557600.\nNote that an Active Directory forest can specify a minimum TTL, and will dynamically \"round up\" other values to that minimum.",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of DNS record to manage.\nC(SRV) was added in the 1.0.0 release of this collection.\nC(NS) was added in the 1.1.0 release of this collection.\nC(TXT) was added in the 1.6.0 release of this collection.",
          "type": "str",
          "required": true,
          "choices": [
            "A",
            "AAAA",
            "CNAME",
            "NS",
            "PTR",
            "SRV",
            "TXT"
          ],
          "suboptions": {}
        },
        "value": {
          "aliases": [
            "values"
          ],
          "description": "The value(s) to specify. Required when C(state=present).\nWhen C(type=PTR) only the partial part of the IP should be given.\nMultiple values can be passed when C(type=NS)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "Weightage given to each service record in SRV record.\nRequired when C(type=SRV).\nSupported only for C(type=SRV).",
          "type": "int",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "The name of the zone to manage (eg C(example.com)).\nThe zone must already exist.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "This module requires Windows 8, Server 2012, or newer."
      ],
      "short_description": "Manage Windows Server DNS records"
    },
    "examples": "\n# Demonstrate creating a matching A and PTR record.\n\n- name: Create database server record\n  community.windows.win_dns_record:\n    name: \"cgyl1404p.amer.example.com\"\n    type: \"A\"\n    value: \"10.1.1.1\"\n    zone: \"amer.example.com\"\n\n- name: Create matching PTR record\n  community.windows.win_dns_record:\n    name: \"1.1.1\"\n    type: \"PTR\"\n    value: \"db1\"\n    zone: \"10.in-addr.arpa\"\n\n# Demonstrate replacing an A record with a CNAME\n\n- name: Remove static record\n  community.windows.win_dns_record:\n    name: \"db1\"\n    type: \"A\"\n    state: absent\n    zone: \"amer.example.com\"\n\n- name: Create database server alias\n  community.windows.win_dns_record:\n    name: \"db1\"\n    type: \"CNAME\"\n    value: \"cgyl1404p.amer.example.com\"\n    zone: \"amer.example.com\"\n\n# Demonstrate creating multiple A records for the same name\n\n- name: Create multiple A record values for www\n  community.windows.win_dns_record:\n    name: \"www\"\n    type: \"A\"\n    values:\n      - 10.0.42.5\n      - 10.0.42.6\n      - 10.0.42.7\n    zone: \"example.com\"\n\n# Demonstrates a partial update (replace some existing values with new ones)\n# for a pre-existing name\n\n- name: Update www host with new addresses\n  community.windows.win_dns_record:\n    name: \"www\"\n    type: \"A\"\n    values:\n      - 10.0.42.5  # this old value was kept (others removed)\n      - 10.0.42.12  # this new value was added\n    zone: \"example.com\"\n\n# Demonstrate creating a SRV record\n\n- name: Creating a SRV record with port number and priority\n  community.windows.win_dns_record:\n    name: \"test\"\n    priority: 5\n    port: 995\n    state: present\n    type: \"SRV\"\n    weight: 2\n    value: \"amer.example.com\"\n    zone: \"example.com\"\n\n# Demonstrate creating a NS record with multiple values\n\n- name: Creating NS record\n  community.windows.win_dns_record:\n    name: \"ansible.prog\"\n    state: present\n    type: \"NS\"\n    values:\n      - 10.0.0.1\n      - 10.0.0.2\n      - 10.0.0.3\n      - 10.0.0.4\n    zone: \"example.com\"\n\n# Demonstrate creating a TXT record\n\n- name: Creating a TXT record with descriptive Text\n  community.windows.win_dns_record:\n    name: \"test\"\n    state: present\n    type: \"TXT\"\n    value: \"justavalue\"\n    zone: \"example.com\"\n"
  },
  "community.windows.win_dns_zone": {
    "doc": {
      "description": "Manage Windows Server DNS Zones\nAdds, Removes and Modifies DNS Zones - Primary, Secondary, Forwarder & Stub\nTask should be delegated to a Windows DNS Server",
      "has_action": false,
      "options": {
        "dns_servers": {
          "aliases": [],
          "description": "Specifies an list of IP addresses of the primary servers of the zone.\nDNS queries for a forwarded zone are sent to primary servers.\nRequired if l(type=secondary), l(type=forwarder) or l(type=stub), otherwise ignored.\nAt least one server is required.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dynamic_update": {
          "aliases": [],
          "description": "Specifies how a zone handles dynamic updates.\nSecure DNS updates are available only for Active Directory-integrated zones.\nWhen not specified during new zone creation, Windows will default this to l(none).",
          "type": "str",
          "required": false,
          "choices": [
            "secure",
            "none",
            "nonsecureandsecure"
          ],
          "suboptions": {}
        },
        "forwarder_timeout": {
          "aliases": [],
          "description": "Specifies a length of time, in seconds, that a DNS server waits for a remote DNS server to resolve a query.\nAccepts integer values between 0 and 15.\nIf the provided value is not valid, it will be omitted and a warning will be issued.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Fully qualified name of the DNS zone.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "replication": {
          "aliases": [],
          "description": "Specifies the replication scope for the DNS zone.\nl(replication=forest) will replicate the DNS zone to all domain controllers in the Active Directory forest.\nl(replication=domain) will replicate the DNS zone to all domain controllers in the Active Directory domain.\nl(replication=none) disables Active Directory integration and creates a local file with the name of the zone.\nThis is the equivalent of selecting l(store the zone in Active Directory) in the GUI.",
          "type": "str",
          "required": false,
          "choices": [
            "forest",
            "domain",
            "legacy",
            "none"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies the desired state of the DNS zone.\nWhen l(state=present) the module will attempt to create the specified DNS zone if it does not already exist.\nWhen l(state=absent), the module will remove the specified DNS zone and all subsequent DNS records.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Specifies the type of DNS zone.\nWhen l(type=secondary), the DNS server will immediately attempt to perform a zone transfer from the servers in this list. If this initial transfer fails, then the zone will be left in an unworkable state. This module does not verify the initial transfer.",
          "type": "str",
          "required": false,
          "choices": [
            "primary",
            "secondary",
            "stub",
            "forwarder"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "This module requires Windows Server 2012R2 or Newer"
      ],
      "short_description": "Manage Windows Server DNS Zones"
    },
    "examples": "\n- name: Ensure primary zone is present\n  community.windows.win_dns_zone:\n    name: wpinner.euc.vmware.com\n    replication: domain\n    type: primary\n    state: present\n\n- name: Ensure DNS zone is absent\n  community.windows.win_dns_zone:\n    name: jamals.euc.vmware.com\n    state: absent\n\n- name: Ensure forwarder has specific DNS servers\n  community.windows.win_dns_zone:\n    name: jamals.euc.vmware.com\n    type: forwarder\n    dns_servers:\n      - 10.245.51.100\n      - 10.245.51.101\n      - 10.245.51.102\n\n- name: Ensure stub zone has specific DNS servers\n  community.windows.win_dns_zone:\n    name: virajp.euc.vmware.com\n    type: stub\n    dns_servers:\n      - 10.58.2.100\n      - 10.58.2.101\n\n- name: Ensure stub zone is converted to a secondary zone\n  community.windows.win_dns_zone:\n    name: virajp.euc.vmware.com\n    type: secondary\n\n- name: Ensure secondary zone is present with no replication\n  community.windows.win_dns_zone:\n    name: dgemzer.euc.vmware.com\n    type: secondary\n    replication: none\n    dns_servers:\n      - 10.19.20.1\n\n- name: Ensure secondary zone is converted to a primary zone\n  community.windows.win_dns_zone:\n    name: dgemzer.euc.vmware.com\n    type: primary\n    replication: none\n    dns_servers:\n      - 10.19.20.1\n\n- name: Ensure primary DNS zone is present without replication\n  community.windows.win_dns_zone:\n    name: basavaraju.euc.vmware.com\n    replication: none\n    type: primary\n\n- name: Ensure primary DNS zone has nonsecureandsecure dynamic updates enabled\n  community.windows.win_dns_zone:\n    name: basavaraju.euc.vmware.com\n    replication: none\n    dynamic_update: nonsecureandsecure\n    type: primary\n\n- name: Ensure DNS zone is absent\n  community.windows.win_dns_zone:\n    name: marshallb.euc.vmware.com\n    state: absent\n\n- name: Ensure DNS zones are absent\n  community.windows.win_dns_zone:\n    name: \"{{ item }}\"\n    state: absent\n  loop:\n    - jamals.euc.vmware.com\n    - dgemzer.euc.vmware.com\n    - wpinner.euc.vmware.com\n    - marshallb.euc.vmware.com\n    - basavaraju.euc.vmware.com\n"
  },
  "community.windows.win_domain_computer": {
    "doc": {
      "description": "Create, read, update and delete computers in Active Directory using a windows bridge computer to launch New-ADComputer, Get-ADComputer, Set-ADComputer, Remove-ADComputer and Move-ADObject powershell commands.",
      "has_action": false,
      "notes": "For more information on Offline Domain Join see L(the step-by-step guide,https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd392267%28v=ws.10%29).\nWhen using the ODJ BLOB to join a computer to the domain, it must be written out to a file.\nThe file must be UTF-16 encoded (in PowerShell this encoding is called C(Unicode)), and it must end in a null character. See examples.\nThe C(djoin.exe) part of the offline domain join process will not use I(domain_server), I(domain_username), or I(domain_password).",
      "options": {
        "description": {
          "aliases": [],
          "description": "Specifies a description of the object.\nThis parameter sets the value of the Description property for the object.\nThe LDAP display name (ldapDisplayName) for this property is description.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_hostname": {
          "aliases": [],
          "description": "Specifies the fully qualified domain name (FQDN) of the computer.\nThis parameter sets the DNSHostName property for a computer object.\nThe LDAP display name for this property is dNSHostName.\nRequired when I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_password": {
          "aliases": [],
          "description": "The password for I(username).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_server": {
          "aliases": [],
          "description": "Specifies the Active Directory Domain Services instance to connect to.\nCan be in the form of an FQDN or NetBIOS name.\nIf not specified then the value is based on the domain of the computer running PowerShell.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_username": {
          "aliases": [],
          "description": "The username to use when interacting with AD.\nIf this is not set then the user Ansible used to log in with will be used instead when using CredSSP or Kerberos with credential delegation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Specifies if an account is enabled.\nAn enabled account requires a password.\nThis parameter sets the Enabled property for an account object.\nThis parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "managed_by": {
          "aliases": [],
          "description": "The value to be assigned to the LDAP C(managedBy) attribute.\nThis value can be in the forms C(Distinguished Name), C(objectGUID), C(objectSid) or C(sAMAccountName), see examples for more details.",
          "type": "str",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the name of the object.\nThis parameter sets the Name property of the Active Directory object.\nThe LDAP display name (ldapDisplayName) of this property is name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "odj_blob_path": {
          "aliases": [],
          "description": "The path to the file where the BLOB will be saved. If omitted, a temporary file will be used.\nIf I(offline_domain_join=output) the file will be deleted after its contents are returned.\nThe parent directory for the BLOB file must exist; intermediate directories will not be created.",
          "required": false,
          "suboptions": {}
        },
        "offline_domain_join": {
          "aliases": [],
          "description": "Provisions a computer in the directory and provides a BLOB file that can be used on the target computer/image to join it to the domain while offline.\nThe C(none) value doesn't do any offline join operations.\nC(output) returns the BLOB in output. The BLOB should be treated as secret (it contains the machine password) so use C(no_log) when using this option.\nC(path) preserves the offline domain join BLOB file on the target machine for later use. The path will be returned.\nIf the computer already exists, no BLOB will be created/returned, and the module will operate as it would have without offline domain join.",
          "default": "none",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "output",
            "path"
          ],
          "suboptions": {}
        },
        "ou": {
          "aliases": [],
          "description": "Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created. Required when I(state=present).\nSpecial characters must be escaped, see L(Distinguished Names,https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ldap/distinguished-names) for details.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sam_account_name": {
          "aliases": [],
          "description": "Specifies the Security Account Manager (SAM) account name of the computer.\nIt maximum is 256 characters, 15 is advised for older operating systems compatibility.\nThe LDAP display name (ldapDisplayName) for this property is sAMAccountName.\nIf ommitted the value is the same as C(name).\nNote that all computer SAMAccountNames need to end with a C($).\nIf C($) is omitted, it will be added to the end.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specified whether the computer should be C(present) or C(absent) in Active Directory.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage computers in Active Directory"
    },
    "examples": "\n  - name: Add linux computer to Active Directory OU using a windows machine\n    community.windows.win_domain_computer:\n      name: one_linux_server\n      sam_account_name: linux_server$\n      dns_hostname: one_linux_server.my_org.local\n      ou: \"OU=servers,DC=my_org,DC=local\"\n      description: Example of linux server\n      enabled: yes\n      state: present\n    delegate_to: my_windows_bridge.my_org.local\n\n  - name: Remove linux computer from Active Directory using a windows machine\n    community.windows.win_domain_computer:\n      name: one_linux_server\n      state: absent\n    delegate_to: my_windows_bridge.my_org.local\n\n  - name: Provision a computer for offline domain join\n    community.windows.win_domain_computer:\n      name: newhost\n      dns_hostname: newhost.ansible.local\n      ou: 'OU=A great\\, big organizational unit name,DC=ansible,DC=local'\n      state: present\n      offline_domain_join: yes\n      odj_return_blob: yes\n    register: computer_status\n    delegate_to: windc.ansible.local\n\n  - name: Join a workgroup computer to the domain\n    vars:\n      target_blob_file: 'C:\\ODJ\\blob.txt'\n    ansible.windows.win_shell: |\n      $blob = [Convert]::FromBase64String('{{ computer_status.odj_blob }}')\n      [IO.File]::WriteAllBytes('{{ target_blob_file }}', $blob)\n      & djoin.exe --% /RequestODJ /LoadFile '{{ target_blob_file }}' /LocalOS /WindowsPath \"%SystemRoot%\"\n\n  - name: Restart to complete domain join\n    ansible.windows.win_restart:\n"
  },
  "community.windows.win_domain_group": {
    "doc": {
      "description": "Creates, modifies or removes groups in Active Directory.\nFor local groups, use the M(ansible.windows.win_group) module instead.",
      "has_action": false,
      "notes": "This must be run on a host that has the ActiveDirectory powershell module installed.",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A dict of custom LDAP attributes to set on the group.\nThis can be used to set custom attributes that are not exposed as module parameters, e.g. C(mail).\nSee the examples on how to format this parameter.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "category": {
          "aliases": [],
          "description": "The category of the group, this is the value to assign to the LDAP C(groupType) attribute.\nIf a new group is created then C(security) will be used by default.",
          "type": "str",
          "required": false,
          "choices": [
            "distribution",
            "security"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The value to be assigned to the LDAP C(description) attribute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [],
          "description": "The value to assign to the LDAP C(displayName) attribute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_password": {
          "aliases": [],
          "description": "The password for C(username).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_server": {
          "aliases": [],
          "description": "Specifies the Active Directory Domain Services instance to connect to.\nCan be in the form of an FQDN or NetBIOS name.\nIf not specified then the value is based on the domain of the computer running PowerShell.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_username": {
          "aliases": [],
          "description": "The username to use when interacting with AD.\nIf this is not set then the user Ansible used to log in with will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ignore_protection": {
          "aliases": [],
          "description": "Will ignore the C(ProtectedFromAccidentalDeletion) flag when deleting or moving a group.\nThe module will fail if one of these actions need to occur and this value is set to C(no).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "managed_by": {
          "aliases": [],
          "description": "The value to be assigned to the LDAP C(managedBy) attribute.\nThis value can be in the forms C(Distinguished Name), C(objectGUID), C(objectSid) or C(sAMAccountName), see examples for more details.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the group to create, modify or remove.\nThis value can be in the forms C(Distinguished Name), C(objectGUID), C(objectSid) or C(sAMAccountName), see examples for more details.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organizational_unit": {
          "aliases": [
            "ou",
            "path"
          ],
          "description": "The full LDAP path to create or move the group to.\nThis should be the path to the parent object to create or move the group to.\nSee examples for details of how this path is formed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protect": {
          "aliases": [],
          "description": "Will set the C(ProtectedFromAccidentalDeletion) flag based on this value.\nThis flag stops a user from deleting or moving a group to a different path.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "The scope of the group.\nIf C(state=present) and the group doesn't exist then this must be set.",
          "type": "str",
          "required": false,
          "choices": [
            "domainlocal",
            "global",
            "universal"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(state=present) this module will ensure the group is created and is configured accordingly.\nIf C(state=absent) this module will delete the group if it exists",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Creates, modifies or removes domain groups"
    },
    "examples": "\n- name: Ensure the group Cow exists using sAMAccountName\n  community.windows.win_domain_group:\n    name: Cow\n    scope: global\n    path: OU=groups,DC=ansible,DC=local\n\n- name: Ensure the group Cow doesn't exist using the Distinguished Name\n  community.windows.win_domain_group:\n    name: CN=Cow,OU=groups,DC=ansible,DC=local\n    state: absent\n\n- name: Delete group ignoring the protection flag\n  community.windows.win_domain_group:\n    name: Cow\n    state: absent\n    ignore_protection: yes\n\n- name: Create group with delete protection enabled and custom attributes\n  community.windows.win_domain_group:\n    name: Ansible Users\n    scope: domainlocal\n    category: security\n    attributes:\n      mail: helpdesk@ansible.com\n      wWWHomePage: www.ansible.com\n    ignore_protection: yes\n\n- name: Change the OU of a group using the SID and ignore the protection flag\n  community.windows.win_domain_group:\n    name: S-1-5-21-2171456218-3732823212-122182344-1189\n    scope: global\n    organizational_unit: OU=groups,DC=ansible,DC=local\n    ignore_protection: yes\n\n- name: Add managed_by user\n  community.windows.win_domain_group:\n    name: Group Name Here\n    managed_by: Domain Admins\n\n- name: Add group and specify the AD domain services to use for the create\n  community.windows.win_domain_group:\n    name: Test Group\n    domain_username: user@CORP.ANSIBLE.COM\n    domain_password: Password01!\n    domain_server: corp-DC12.corp.ansible.com\n    scope: domainlocal\n"
  },
  "community.windows.win_domain_group_membership": {
    "doc": {
      "description": "Allows the addition and removal of domain users and domain groups from/to a domain group.",
      "has_action": false,
      "notes": "This must be run on a host that has the ActiveDirectory powershell module installed.",
      "options": {
        "domain_password": {
          "aliases": [],
          "description": "The password for I(username).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_server": {
          "aliases": [],
          "description": "Specifies the Active Directory Domain Services instance to connect to.\nCan be in the form of an FQDN or NetBIOS name.\nIf not specified then the value is based on the domain of the computer running PowerShell.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_username": {
          "aliases": [],
          "description": "The username to use when interacting with AD.\nIf this is not set then the user Ansible used to log in with will be used instead when using CredSSP or Kerberos with credential delegation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "A list of members to ensure are present/absent from the group.\nThe given names must be a SamAccountName of a user, group, service account, or computer.\nFor computers, you must add \"$\" after the name; for example, to add \"Mycomputer\" to a group, use \"Mycomputer$\" as the member.\nIf the member object is part of another domain in a multi-domain forest, you must add the domain and \"\\\" in front of the name.",
          "type": "list",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the domain group to manage membership on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the members in the group.\nWhen C(state) is C(pure), only the members specified will exist, and all other existing members not specified are removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "pure"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage Windows domain group membership"
    },
    "examples": "\n- name: Add a domain user/group to a domain group\n  community.windows.win_domain_group_membership:\n    name: Foo\n    members:\n      - Bar\n    state: present\n\n- name: Remove a domain user/group from a domain group\n  community.windows.win_domain_group_membership:\n    name: Foo\n    members:\n      - Bar\n    state: absent\n\n- name: Ensure only a domain user/group exists in a domain group\n  community.windows.win_domain_group_membership:\n    name: Foo\n    members:\n      - Bar\n    state: pure\n\n- name: Add a computer to a domain group\n  community.windows.win_domain_group_membership:\n    name: Foo\n    members:\n      - DESKTOP$\n    state: present\n\n- name: Add a domain user/group from another Domain in the multi-domain forest to a domain group\n  community.windows.win_domain_group_membership:\n    domain_server: DomainAAA.cloud\n    name: GroupinDomainAAA\n    members:\n      - DomainBBB.cloud\\UserInDomainBBB\n    state: Present\n\n"
  },
  "community.windows.win_domain_object_info": {
    "doc": {
      "description": "Gather information about multiple Active Directory object(s).",
      "has_action": false,
      "notes": "The C(sAMAccountType_AnsibleFlags) and C(userAccountControl_AnsibleFlags) return property is something set by the module itself as an easy way to view what those flags represent. These properties cannot be used as part of the I(filter) or I(ldap_filter) and are automatically added if those properties were requested.",
      "options": {
        "domain_password": {
          "aliases": [],
          "description": "The password for C(domain_username).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_server": {
          "aliases": [],
          "description": "Specified the Active Directory Domain Services instance to connect to.\nCan be in the form of an FQDN or NetBIOS name.\nIf not specified then the value is based on the default domain of the computer running PowerShell.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_username": {
          "aliases": [],
          "description": "The username to use when interacting with AD.\nIf this is not set then the user that is used for authentication will be the connection user.\nAnsible will be unable to use the connection user unless auth is Kerberos with credential delegation or CredSSP, or become is used on the task.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "Specifies a query string using the PowerShell Expression Language syntax.\nThis follows the same rules and formatting as the C(-Filter) parameter for the PowerShell AD cmdlets exception there is no variable substitutions.\nThis is mutually exclusive with I(identity) and I(ldap_filter).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identity": {
          "aliases": [],
          "description": "Specifies a single Active Directory object by its distinguished name or its object GUID.\nThis is mutually exclusive with I(filter) and I(ldap_filter).\nThis cannot be used with either the I(search_base) or I(search_scope) options.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "include_deleted": {
          "aliases": [],
          "description": "Also search for deleted Active Directory objects.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ldap_filter": {
          "aliases": [],
          "description": "Like I(filter) but this is a tradiitional LDAP query string to filter the objects to return.\nThis is mutually exclusive with I(filter) and I(identity).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "A list of properties to return.\nIf a property is C(*), all properties that have a set value on the AD object will be returned.\nIf a property is valid on the object but not set, it is only returned if defined explicitly in this option list.\nThe properties C(DistinguishedName), C(Name), C(ObjectClass), and C(ObjectGUID) are always returned.\nSpecifying multiple properties can have a performance impact, it is best to only return what is needed.\nIf an invalid property is specified then the module will display a warning for each object it is invalid on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "search_base": {
          "aliases": [],
          "description": "Specify the Active Directory path to search for objects in.\nThis cannot be set with I(identity).\nBy default the search base is the default naming context of the target AD instance which is the DN returned by \"(Get-ADRootDSE).defaultNamingContext\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "search_scope": {
          "aliases": [],
          "description": "Specify the scope of when searching for an object in the C(search_base).\nC(base) will limit the search to the base object so the maximum number of objects returned is always one. This will not search any objects inside a container..\nC(one_level) will search the current path and any immediate objects in that path.\nC(subtree) will search the current path and all objects of that path recursively.\nThis cannot be set with I(identity).",
          "type": "str",
          "required": false,
          "choices": [
            "base",
            "one_level",
            "subtree"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Gather information an Active Directory object"
    },
    "examples": "\n- name: Get all properties for the specified account using its DistinguishedName\n  community.windows.win_domain_object_info:\n    identity: CN=Username,CN=Users,DC=domain,DC=com\n    properties: '*'\n\n- name: Get the SID for all user accounts as a filter\n  community.windows.win_domain_object_info:\n    filter: ObjectClass -eq 'user' -and objectCategory -eq 'Person'\n    properties:\n    - objectSid\n\n- name: Get the SID for all user accounts as a LDAP filter\n  community.windows.win_domain_object_info:\n    ldap_filter: (&(objectClass=user)(objectCategory=Person))\n    properties:\n    - objectSid\n\n- name: Search all computer accounts in a specific path that were added after February 1st\n  community.windows.win_domain_object_info:\n    filter: objectClass -eq 'computer' -and whenCreated -gt '20200201000000.0Z'\n    properties: '*'\n    search_scope: one_level\n    search_base: CN=Computers,DC=domain,DC=com\n"
  },
  "community.windows.win_domain_ou": {
    "doc": {
      "description": "Manage Active Directory Organizational Units\nAdds, Removes and Modifies Active Directory Organizational Units\nTask should be delegated to a Windows Active Directory Domain Controller",
      "has_action": false,
      "options": {
        "domain_password": {
          "aliases": [],
          "description": "The password for the domain you are accessing",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_server": {
          "aliases": [],
          "description": "Specifies the Active Directory Domain Services instance to connect to.\nCan be in the form of an FQDN or NetBIOS name.\nIf not specified then the value is based on the domain of the computer running PowerShell.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_username": {
          "aliases": [],
          "description": "The username to use when interacting with AD.\nIf this is not set then the user Ansible used to log in with will be used instead when using CredSSP or Kerberos with credential delegation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "filter for lookup of ou.",
          "default": "*",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the Organizational Unit",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Specifies the X.500 path of the OU or container where the new object is created.\ndefaults to adding ou at base of domain connected to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Free form dict of properties for the organizational unit. Follows LDAP property names, like C(StreetAddress) or C(PostalCode).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "protected": {
          "aliases": [],
          "description": "Indicates whether to prevent the object from being deleted. When this I(protected=true), you cannot delete the corresponding object without changing the value of the property.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "recursive": {
          "aliases": [],
          "description": "Removes the OU and any child items it contains.\nYou must specify this parameter to remove an OU that is not empty.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specifies the desired state of the OU.\nWhen I(state=present) the module will attempt to create the specified OU if it does not already exist.\nWhen I(state=absent), the module will remove the specified OU.\nWhen I(state=absent) and I(recursive=true), the module will remove all the OU and all child OU's.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "This module requires Windows Server 2012 or Newer",
        "Powershell ActiveDirectory Module"
      ],
      "short_description": "Manage Active Directory Organizational Units",
      "version_added": "1.8.0"
    },
    "examples": "\n---\n- name: Ensure OU is present & protected\n  community.windows.win_domain_ou:\n    name: AnsibleFest\n    state: present\n\n- name: Ensure OU is present & protected\n  community.windows.win_domain_ou:\n    name: EUC Users\n    path: \"DC=euc,DC=vmware,DC=lan\"\n    state: present\n    protected: true\n  delegate_to: win-ad1.euc.vmware.lab\n\n- name: Ensure OU is absent\n  community.windows.win_domain_ou:\n    name: EUC Users\n    path: \"DC=euc,DC=vmware,DC=lan\"\n    state: absent\n  delegate_to: win-ad1.euc.vmware.lab\n\n- name: Ensure OU is present with specific properties\n  community.windows.win_domain_ou:\n    name: WS1Users\n    path: \"CN=EUC Users,DC=euc,DC=vmware,DC=lan\"\n    protected: true\n    properties:\n      city: Sandy Springs\n      state: Georgia\n      StreetAddress: 1155 Perimeter Center West\n      country: US\n      description: EUC Business Unit\n      PostalCode: 30189\n  delegate_to: win-ad1.euc.vmware.lab\n\n- name: Ensure OU updated with new properties\n  community.windows.win_domain_ou:\n    name: WS1Users\n    path: DC=euc,DC=vmware,DC=lan\n    protected: false\n    properties:\n      city: Atlanta\n      state: Georgia\n      managedBy: jzollo@vmware.com\n  delegate_to: win-ad1.euc.vmware.lab\n"
  },
  "community.windows.win_domain_user": {
    "doc": {
      "description": "Manages Windows Active Directory user accounts.",
      "has_action": false,
      "notes": "Works with Windows 2012R2 and newer.\nIf running on a server that is not a Domain Controller, credential delegation through CredSSP or Kerberos with delegation must be used or the I(domain_username), I(domain_password) must be set.\nNote that some individuals have confirmed successful operation on Windows 2008R2 servers with AD and AD Web Services enabled, but this has not received the same degree of testing as Windows 2012R2.",
      "options": {
        "account_locked": {
          "aliases": [],
          "description": "C(no) will unlock the user account if locked.\nNote that there is not a way to lock an account as an administrator.\nAccounts are locked due to user actions; as an admin, you may only unlock a locked account.\nIf you wish to administratively disable an account, set I(enabled) to C(no).",
          "required": false,
          "choices": [
            "False"
          ],
          "suboptions": {}
        },
        "attributes": {
          "aliases": [],
          "description": "A dict of custom LDAP attributes to set on the user.\nThis can be used to set custom attributes that are not exposed as module parameters, e.g. C(telephoneNumber).\nSee the examples on how to format this parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "city": {
          "aliases": [],
          "description": "Configures the user's city.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "company": {
          "aliases": [],
          "description": "Configures the user's company name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "country": {
          "aliases": [],
          "description": "Configures the user's country code.\nNote that this is a two-character ISO 3166 code.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_password": {
          "aliases": [],
          "description": "The password for I(username).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_server": {
          "aliases": [],
          "description": "Specifies the Active Directory Domain Services instance to connect to.\nCan be in the form of an FQDN or NetBIOS name.\nIf not specified then the value is based on the domain of the computer running PowerShell.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_username": {
          "aliases": [],
          "description": "The username to use when interacting with AD.\nIf this is not set then the user Ansible used to log in with will be used instead when using CredSSP or Kerberos with credential delegation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Configures the user's email address.\nThis is a record in AD and does not do anything to configure any email servers or systems.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "C(yes) will enable the user account.\nC(no) will disable the account.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "firstname": {
          "aliases": [],
          "description": "Configures the user's first name (given name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "Adds or removes the user from this list of groups, depending on the value of I(groups_action).\nTo remove all but the Principal Group, set C(groups=<principal group name>) and I(groups_action=replace).\nNote that users cannot be removed from their principal group (for example, \"Domain Users\").",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "groups_action": {
          "aliases": [],
          "description": "If C(add), the user is added to each group in I(groups) where not already a member.\nIf C(remove), the user is removed from each group in I(groups).\nIf C(replace), the user is added as a member of each group in I(groups) and removed from any other groups.",
          "default": "replace",
          "type": "str",
          "required": false,
          "choices": [
            "add",
            "remove",
            "replace"
          ],
          "suboptions": {}
        },
        "identity": {
          "aliases": [],
          "description": "Identity parameter used to find the User in the Active Directory.\nThis value can be in the forms C(Distinguished Name), C(objectGUID), C(objectSid) or C(sAMAccountName).\nDefault to C(name) if not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the user to create, remove or modify.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Optionally set the user's password to this (plain text) value.\nTo enable an account - I(enabled) - a password must already be configured on the account, or you must provide a password here.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password_expired": {
          "aliases": [],
          "description": "C(yes) will require the user to change their password at next login.\nC(no) will clear the expired password flag.\nThis is mutually exclusive with I(password_never_expires).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password_never_expires": {
          "aliases": [],
          "description": "C(yes) will set the password to never expire.\nC(no) will allow the password to expire.\nThis is mutually exclusive with I(password_expired).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Container or OU for the new user; if you do not specify this, the user will be placed in the default container for users in the domain.\nSetting the path is only available when a new user is created; if you specify a path on an existing user, the user's path will not be updated - you must delete (e.g., C(state=absent)) the user and then re-add the user with the appropriate path.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "postal_code": {
          "aliases": [],
          "description": "Configures the user's postal code / zip code.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sam_account_name": {
          "aliases": [],
          "description": "Configures the SAM Account Name (C(sAMAccountName)) for the account.\nThis is allowed to a maximum of 20 characters due to pre-Windows 2000 restrictions.\nDefault to the C(<username>) specified in C(upn) or C(name) if not set.",
          "type": "str",
          "required": false,
          "version_added": "1.7.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When C(present), creates or updates the user account.\nWhen C(absent), removes the user account if it exists.\nWhen C(query), retrieves the user account details without making any changes.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "state_province": {
          "aliases": [],
          "description": "Configures the user's state or province.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "street": {
          "aliases": [],
          "description": "Configures the user's street address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "surname": {
          "aliases": [],
          "description": "Configures the user's last name (surname).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "C(always) will always update passwords.\nC(on_create) will only set the password for newly created users.\nC(when_changed) will only set the password when changed.",
          "default": "always",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "on_create",
            "when_changed"
          ],
          "suboptions": {}
        },
        "upn": {
          "aliases": [],
          "description": "Configures the User Principal Name (UPN) for the account.\nThis is not required, but is best practice to configure for modern versions of Active Directory.\nThe format is C(<username>@<domain>).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user_cannot_change_password": {
          "aliases": [],
          "description": "C(yes) will prevent the user from changing their password.\nC(no) will allow the user to change their password.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages Windows Active Directory user accounts"
    },
    "examples": "\n- name: Ensure user bob is present with address information\n  community.windows.win_domain_user:\n    name: bob\n    firstname: Bob\n    surname: Smith\n    company: BobCo\n    password: B0bP4ssw0rd\n    state: present\n    groups:\n      - Domain Admins\n    street: 123 4th St.\n    city: Sometown\n    state_province: IN\n    postal_code: 12345\n    country: US\n    attributes:\n      telephoneNumber: 555-123456\n\n- name: Ensure user bob is created and use custom credentials to create the user\n  community.windows.win_domain_user:\n    name: bob\n    firstname: Bob\n    surname: Smith\n    password: B0bP4ssw0rd\n    state: present\n    domain_username: DOMAIN\\admin-account\n    domain_password: SomePas2w0rd\n    domain_server: domain@DOMAIN.COM\n\n- name: Ensure user bob is present in OU ou=test,dc=domain,dc=local\n  community.windows.win_domain_user:\n    name: bob\n    password: B0bP4ssw0rd\n    state: present\n    path: ou=test,dc=domain,dc=local\n    groups:\n      - Domain Admins\n\n- name: Ensure user bob is absent\n  community.windows.win_domain_user:\n    name: bob\n    state: absent\n"
  },
  "community.windows.win_dotnet_ngen": {
    "doc": {
      "description": "After .NET framework is installed/updated, Windows will probably want to recompile things to optimise for the host.\nThis happens via scheduled task, usually at some inopportune time.\nThis module allows you to run this task on your own schedule, so you incur the CPU hit at some more convenient and controlled time.\nU(https://docs.microsoft.com/en-us/dotnet/framework/tools/ngen-exe-native-image-generator#native-image-service)\nU(http://blogs.msdn.com/b/dotnet/archive/2013/08/06/wondering-why-mscorsvw-exe-has-high-cpu-usage-you-can-speed-it-up.aspx)",
      "has_action": false,
      "notes": "There are in fact two scheduled tasks for ngen but they have no triggers so aren't a problem.\nThere's no way to test if they've been completed.\nThe stdout is quite likely to be several megabytes.",
      "options": {},
      "short_description": "Runs ngen to recompile DLLs after .NET  updates"
    },
    "examples": "\n- name: Run ngen tasks\n  community.windows.win_dotnet_ngen:\n"
  },
  "community.windows.win_eventlog": {
    "doc": {
      "description": "Allows the addition, clearing and removal of local Windows event logs, and the creation and removal of sources from a given event log.  Also allows the specification of settings per log and source.",
      "has_action": false,
      "options": {
        "category_file": {
          "aliases": [],
          "description": "For one or more sources specified, the path to a custom category resource file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "maximum_size": {
          "aliases": [],
          "description": "The maximum size of the event log.\nValue must be between 64KB and 4GB, and divisible by 64KB.\nSize can be specified in KB, MB or GB (e.g. 128KB, 16MB, 2.5GB).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "message_file": {
          "aliases": [],
          "description": "For one or more sources specified, the path to a custom event message resource file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the event log to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "overflow_action": {
          "aliases": [],
          "description": "The action for the log to take once it reaches its maximum size.\nFor C(DoNotOverwrite), all existing entries are kept and new entries are not retained.\nFor C(OverwriteAsNeeded), each new entry overwrites the oldest entry.\nFor C(OverwriteOlder), new log entries overwrite those older than the C(retention_days) value.",
          "type": "str",
          "required": false,
          "choices": [
            "DoNotOverwrite",
            "OverwriteAsNeeded",
            "OverwriteOlder"
          ],
          "suboptions": {}
        },
        "parameter_file": {
          "aliases": [],
          "description": "For one or more sources specified, the path to a custom parameter resource file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "retention_days": {
          "aliases": [],
          "description": "The minimum number of days event entries must remain in the log.\nThis option is only used when C(overflow_action) is C(OverwriteOlder).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sources": {
          "aliases": [],
          "description": "A list of one or more sources to ensure are present/absent in the log.\nWhen C(category_file), C(message_file) and/or C(parameter_file) are specified, these values are applied across all sources.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the log and/or sources.\nWhen C(sources) is populated, state is checked for sources.\nWhen C(sources) is not populated, state is checked for the specified log itself.\nIf C(state) is C(clear), event log entries are cleared for the target log.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "clear",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage Windows event logs"
    },
    "examples": "\n- name: Add a new event log with two custom sources\n  community.windows.win_eventlog:\n    name: MyNewLog\n    sources:\n      - NewLogSource1\n      - NewLogSource2\n    state: present\n\n- name: Change the category and message resource files used for NewLogSource1\n  community.windows.win_eventlog:\n    name: MyNewLog\n    sources:\n      - NewLogSource1\n    category_file: C:\\NewApp\\CustomCategories.dll\n    message_file: C:\\NewApp\\CustomMessages.dll\n    state: present\n\n- name: Change the maximum size and overflow action for MyNewLog\n  community.windows.win_eventlog:\n    name: MyNewLog\n    maximum_size: 16MB\n    overflow_action: DoNotOverwrite\n    state: present\n\n- name: Clear event entries for MyNewLog\n  community.windows.win_eventlog:\n    name: MyNewLog\n    state: clear\n\n- name: Remove NewLogSource2 from MyNewLog\n  community.windows.win_eventlog:\n    name: MyNewLog\n    sources:\n      - NewLogSource2\n    state: absent\n\n- name: Remove MyNewLog and all remaining sources\n  community.windows.win_eventlog:\n    name: MyNewLog\n    state: absent\n"
  },
  "community.windows.win_eventlog_entry": {
    "doc": {
      "description": "Write log entries to a given event log from a specified source.",
      "has_action": false,
      "notes": "This module will always report a change when writing an event entry.",
      "options": {
        "category": {
          "aliases": [],
          "description": "A numeric task category associated with the category message file for the log source.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "entry_type": {
          "aliases": [],
          "description": "Indicates the entry being written to the log is of a specific type.",
          "type": "str",
          "required": false,
          "choices": [
            "Error",
            "FailureAudit",
            "Information",
            "SuccessAudit",
            "Warning"
          ],
          "suboptions": {}
        },
        "event_id": {
          "aliases": [],
          "description": "The numeric event identifier for the entry.\nValue must be between 0 and 65535.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "log": {
          "aliases": [],
          "description": "Name of the event log to write an entry to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "message": {
          "aliases": [],
          "description": "The message for the given log entry.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "raw_data": {
          "aliases": [],
          "description": "Binary data associated with the log entry.\nValue must be a comma-separated array of 8-bit unsigned integers (0 to 255).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "Name of the log source to indicate where the entry is from.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Write entries to Windows event logs"
    },
    "examples": "\n- name: Write an entry to a Windows event log\n  community.windows.win_eventlog_entry:\n    log: MyNewLog\n    source: NewLogSource1\n    event_id: 1234\n    message: This is a test log entry.\n\n- name: Write another entry to a different Windows event log\n  community.windows.win_eventlog_entry:\n    log: AnotherLog\n    source: MyAppSource\n    event_id: 5000\n    message: An error has occurred.\n    entry_type: Error\n    category: 5\n    raw_data: 10,20\n"
  },
  "community.windows.win_feature_info": {
    "doc": {
      "description": "Gather information about all or a specific installed Windows feature(s).",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "If specified, this is used to match the C(name) of the Windows feature to get the info for.\nCan be a wildcard to match multiple features but the wildcard will only be matched on the C(name) of the feature.\nIf omitted then all features will returned.",
          "default": "*",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Gather information about Windows features",
      "version_added": "1.4.0"
    },
    "examples": "\n- name: Get info for all installed features\n  community.windows.win_feature_info:\n  register: feature_info\n- name: Get info for a single feature\n  community.windows.win_feature_info:\n    name: DNS\n  register: feature_info\n- name: Find all features that start with 'FS'\n  ansible.windows.win_feature_info:\n    name: FS*\n"
  },
  "community.windows.win_file_compression": {
    "doc": {
      "description": "This module sets the compressed attribute for files and directories on a filesystem that supports it like NTFS.\nNTFS compression can be used to save disk space.",
      "has_action": false,
      "notes": "M(community.windows.win_file_compression) sets the file system's compression state, it does not create a zip archive file.\nFor more about NTFS Compression, see U(http://www.ntfs.com/ntfs-compressed.htm)",
      "options": {
        "force": {
          "aliases": [],
          "description": "This option only has an effect when I(recurse) is C(true)\nIf C(true), will check the compressed state of all subdirectories and files and make a change if any are different from I(compressed).\nIf C(false), will only make a change if the compressed state of I(path) is different from I(compressed).\nIf the folder structure is complex or contains a lot of files, it is recommended to set this option to C(false) so that not every file has to be checked.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The full path of the file or directory to modify.\nThe path must exist on file system that supports compression like NTFS.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "recurse": {
          "aliases": [],
          "description": "Whether to recursively apply changes to all subdirectories and files.\nThis option only has an effect when I(path) is a directory.\nWhen set to C(false), only applies changes to I(path).\nWhen set to C(true), applies changes to I(path) and all subdirectories and files.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set to C(present) to ensure the I(path) is compressed.\nSet to C(absent) to ensure the I(path) is not compressed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Alters the compression of files and directories on NTFS partitions."
    },
    "examples": "\n- name: Compress log files directory\n  community.windows.win_file_compression:\n    path: C:\\Logs\n    state: present\n\n- name: Decompress log files directory\n  community.windows.win_file_compression:\n    path: C:\\Logs\n    state: absent\n\n- name: Compress reports directory and all subdirectories\n  community.windows.win_file_compression:\n    path: C:\\business\\reports\n    state: present\n    recurse: yes\n\n# This will only check C:\\business\\reports for the compressed state\n# If C:\\business\\reports is compressed, it will not make a change\n# even if one of the child items is uncompressed\n\n- name: Compress reports directory and all subdirectories (quick)\n  community.windows.win_file_compression:\n    path: C:\\business\\reports\n    compressed: yes\n    recurse: yes\n    force: no\n"
  },
  "community.windows.win_file_version": {
    "doc": {
      "description": "Get DLL or EXE file build version.",
      "has_action": false,
      "notes": "This module will always return no change.",
      "options": {
        "path": {
          "aliases": [],
          "description": "File to get version.\nAlways provide absolute path.",
          "type": "path",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Get DLL or EXE file build version"
    },
    "examples": "\n- name: Get acm instance version\n  community.windows.win_file_version:\n    path: C:\\Windows\\System32\\cmd.exe\n  register: exe_file_version\n\n- debug:\n    msg: '{{ exe_file_version }}'\n"
  },
  "community.windows.win_firewall": {
    "doc": {
      "description": "Enable or Disable Windows Firewall profiles.",
      "has_action": false,
      "options": {
        "inbound_action": {
          "aliases": [],
          "description": "Set to C(allow) or C(block) inbound network traffic in the profile.\nC(not_configured) is valid when configuring a GPO.",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "block",
            "not_configured"
          ],
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "outbound_action": {
          "aliases": [],
          "description": "Set to C(allow) or C(block) inbound network traffic in the profile.\nC(not_configured) is valid when configuring a GPO.",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "block",
            "not_configured"
          ],
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "profiles": {
          "aliases": [],
          "description": "Specify one or more profiles to change.",
          "default": "['Domain', 'Private', 'Public']",
          "type": "list",
          "required": false,
          "choices": [
            "Domain",
            "Private",
            "Public"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set state of firewall for given profile.",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "This module requires Windows Management Framework 5 or later."
      ],
      "short_description": "Enable or disable the Windows Firewall"
    },
    "examples": "\n- name: Enable firewall for Domain, Public and Private profiles\n  community.windows.win_firewall:\n    state: enabled\n    profiles:\n    - Domain\n    - Private\n    - Public\n  tags: enable_firewall\n\n- name: Disable Domain firewall\n  community.windows.win_firewall:\n    state: disabled\n    profiles:\n    - Domain\n  tags: disable_firewall\n\n- name: Enable firewall for Domain profile and block outbound connections\n  community.windows.win_firewall:\n    profiles: Domain\n    state: enabled\n    outbound_action: block\n  tags: block_connection\n"
  },
  "community.windows.win_firewall_rule": {
    "doc": {
      "description": "Allows you to create/remove/update firewall rules.",
      "has_action": false,
      "notes": "Multiple firewall rules can share the same I(name), if there are multiple matches then the module will set the user defined options for each matching rule.",
      "options": {
        "action": {
          "aliases": [],
          "description": "What to do with the items this rule is for.\nDefaults to C(allow) when creating a new rule.",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "block"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description for the firewall rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "direction": {
          "aliases": [],
          "description": "Whether this rule is for inbound or outbound traffic.\nDefaults to C(in) when creating a new rule.",
          "type": "str",
          "required": false,
          "choices": [
            "in",
            "out"
          ],
          "suboptions": {}
        },
        "enabled": {
          "aliases": [
            "enable"
          ],
          "description": "Whether this firewall rule is enabled or disabled.\nDefaults to C(true) when creating a new rule.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "The group name for the rule.\nIf I(name) is not specified then the module will set the firewall options for all the rules in this group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "icmp_type_code": {
          "aliases": [],
          "description": "The ICMP types and codes for the rule.\nThis is only valid when I(protocol) is C(icmpv4) or C(icmpv6).\nEach entry follows the format C(type:code) where C(type) is the type number and C(code) is the code number for that type or C(*) for all codes.\nSet the value to just C(*) to apply the rule for all ICMP type codes.\nSee U(https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) for a list of ICMP types and the codes that apply to them.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "localip": {
          "aliases": [],
          "description": "The local ip address this rule applies to.\nSet to C(any) to apply to all local ip addresses.\nDefaults to C(any) when creating a new rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "localport": {
          "aliases": [],
          "description": "The local port this rule applies to.\nSet to C(any) to apply to all local ports.\nDefaults to C(any) when creating a new rule.\nMust have I(protocol) set",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The rule's display name.\nThis is required unless I(group) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profiles": {
          "aliases": [
            "profile"
          ],
          "description": "The profile this rule applies to.\nDefaults to C(domain,private,public) when creating a new rule.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "program": {
          "aliases": [],
          "description": "The program this rule applies to.\nSet to C(any) to apply to all programs.\nDefaults to C(any) when creating a new rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol this rule applies to.\nSet to C(any) to apply to all services.\nDefaults to C(any) when creating a new rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remoteip": {
          "aliases": [],
          "description": "The remote ip address/range this rule applies to.\nSet to C(any) to apply to all remote ip addresses.\nDefaults to C(any) when creating a new rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remoteport": {
          "aliases": [],
          "description": "The remote port this rule applies to.\nSet to C(any) to apply to all remote ports.\nDefaults to C(any) when creating a new rule.\nMust have I(protocol) set",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "The service this rule applies to.\nSet to C(any) to apply to all services.\nDefaults to C(any) when creating a new rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should this rule be added or removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Windows firewall automation"
    },
    "examples": "\n- name: Firewall rule to allow SMTP on TCP port 25\n  community.windows.win_firewall_rule:\n    name: SMTP\n    localport: 25\n    action: allow\n    direction: in\n    protocol: tcp\n    state: present\n    enabled: yes\n\n- name: Firewall rule to allow RDP on TCP port 3389\n  community.windows.win_firewall_rule:\n    name: Remote Desktop\n    localport: 3389\n    action: allow\n    direction: in\n    protocol: tcp\n    profiles: private\n    state: present\n    enabled: yes\n\n- name: Firewall rule to be created for application group\n  community.windows.win_firewall_rule:\n    name: SMTP\n    group: application\n    localport: 25\n    action: allow\n    direction: in\n    protocol: tcp\n    state: present\n    enabled: yes\n\n- name: Enable all the Firewall rules in application group\n  win_firewall_rule:\n    group: application\n    enabled: yes\n\n- name: Firewall rule to allow port range\n  community.windows.win_firewall_rule:\n    name: Sample port range\n    localport: 5000-5010\n    action: allow\n    direction: in\n    protocol: tcp\n    state: present\n    enabled: yes\n\n- name: Firewall rule to allow ICMP v4 echo (ping)\n  community.windows.win_firewall_rule:\n    name: ICMP Allow incoming V4 echo request\n    enabled: yes\n    state: present\n    profiles: private\n    action: allow\n    direction: in\n    protocol: icmpv4\n    icmp_type_code:\n    - '8:*'\n\n- name: Firewall rule to alloc ICMP v4 on all type codes\n  community.windows.win_firewall_rule:\n    name: ICMP Allow incoming V4 echo request\n    enabled: yes\n    state: present\n    profiles: private\n    action: allow\n    direction: in\n    protocol: icmpv4\n    icmp_type_code: '*'\n"
  },
  "community.windows.win_format": {
    "doc": {
      "description": "The M(community.windows.win_format) module formats an existing volume or a new volume on an existing partition on Windows",
      "has_action": false,
      "notes": "Microsoft Windows Server 2012 or Microsoft Windows 8 or newer is required to use this module. To check if your system is compatible, see U(https://docs.microsoft.com/en-us/windows/desktop/sysinfo/operating-system-version).\nOne of three parameters (I(drive_letter), I(path) and I(label)) are mandatory to identify the target volume but more than one cannot be specified at the same time.\nThis module is idempotent if I(force) is not specified and file system labels remain preserved.\nFor more information, see U(https://docs.microsoft.com/en-us/previous-versions/windows/desktop/stormgmt/format-msft-volume)",
      "options": {
        "allocation_unit_size": {
          "aliases": [],
          "description": "Specifies the cluster size to use when formatting the volume.\nIf no cluster size is specified when you format a partition, defaults are selected based on the size of the partition.\nThis value must be a multiple of the physical sector size of the disk.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "compress": {
          "aliases": [],
          "description": "Enable compression on the resulting NTFS volume.\nNTFS compression is not supported where I(allocation_unit_size) is more than 4096.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "drive_letter": {
          "aliases": [],
          "description": "Used to specify the drive letter of the volume to be formatted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "file_system": {
          "aliases": [],
          "description": "Used to specify the file system to be used when formatting the target volume.",
          "type": "str",
          "required": false,
          "choices": [
            "ntfs",
            "refs",
            "exfat",
            "fat32",
            "fat"
          ],
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Specify if formatting should be forced for volumes that are not created from new partitions or if the source and target file system are different.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "full": {
          "aliases": [],
          "description": "A full format writes to every sector of the disk, takes much longer to perform than the default (quick) format, and is not recommended on storage that is thinly provisioned.\nSpecify C(true) for full format.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "integrity_streams": {
          "aliases": [],
          "description": "Enable integrity streams on the resulting ReFS volume.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Used to specify the label of the volume to be formatted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "large_frs": {
          "aliases": [],
          "description": "Specifies that large File Record System (FRS) should be used.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "new_label": {
          "aliases": [],
          "description": "Used to specify the new file system label of the formatted volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Used to specify the path to the volume to be formatted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Formats an existing volume or a new volume on an existing partition on Windows"
    },
    "examples": "\n- name: Create a partition with drive letter D and size 5 GiB\n  community.windows.win_partition:\n    drive_letter: D\n    partition_size: 5 GiB\n    disk_number: 1\n\n- name: Full format the newly created partition as NTFS and label it\n  community.windows.win_format:\n    drive_letter: D\n    file_system: NTFS\n    new_label: Formatted\n    full: True\n"
  },
  "community.windows.win_hosts": {
    "doc": {
      "description": "Manages hosts file entries on Windows.\nMaps IPv4 or IPv6 addresses to canonical names.\nAdds, removes, or sets cname records for ip and hostname pairs.\nModifies %windir%\\\\system32\\\\drivers\\\\etc\\\\hosts.",
      "has_action": false,
      "notes": "Each canonical name can only be mapped to one IPv4 and one IPv6 address. If I(canonical_name) is provided with C(state=present) and is found to be mapped to another IP address that is the same type as, but unique from I(ip_address), then I(canonical_name) and all I(aliases) will be removed from the entry and added to an entry with the provided IP address.\nEach alias can only be mapped to one canonical name. If I(aliases) is provided with C(state=present) and an alias is found to be mapped to another canonical name, then the alias will be removed from the entry and either added to or removed from (depending on I(action)) an entry with the provided canonical name.",
      "options": {
        "action": {
          "aliases": [],
          "description": "Controls the behavior of I(aliases).\nOnly applicable when C(state=present).\nIf C(add), each alias in I(aliases) will be added to the host entry.\nIf C(set), each alias in I(aliases) will be added to the host entry, and other aliases will be removed from the entry.",
          "default": "set",
          "type": "str",
          "required": false,
          "choices": [
            "add",
            "remove",
            "set"
          ],
          "suboptions": {}
        },
        "aliases": {
          "aliases": [],
          "description": "A list of additional names (cname records) for the host entry.\nOnly applicable when C(state=present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "canonical_name": {
          "aliases": [],
          "description": "A canonical name for the host entry.\nrequired for C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "The ip address for the host entry.\nCan be either IPv4 (A record) or IPv6 (AAAA record).\nRequired for C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the entry should be present or absent.\nIf only I(canonical_name) is provided when C(state=absent), then all hosts entries with the canonical name of I(canonical_name) will be removed.\nIf only I(ip_address) is provided when C(state=absent), then all hosts entries with the ip address of I(ip_address) will be removed.\nIf I(ip_address) and I(canonical_name) are both omitted when C(state=absent), then all hosts entries will be removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages hosts file entries on Windows."
    },
    "examples": "\n- name: Add 127.0.0.1 as an A record for localhost\n  community.windows.win_hosts:\n    state: present\n    canonical_name: localhost\n    ip_address: 127.0.0.1\n\n- name: Add ::1 as an AAAA record for localhost\n  community.windows.win_hosts:\n    state: present\n    canonical_name: localhost\n    ip_address: '::1'\n\n- name: Remove 'bar' and 'zed' from the list of aliases for foo (192.168.1.100)\n  community.windows.win_hosts:\n    state: present\n    canonical_name: foo\n    ip_address: 192.168.1.100\n    action: remove\n    aliases:\n      - bar\n      - zed\n\n- name: Remove hosts entries with canonical name 'bar'\n  community.windows.win_hosts:\n    state: absent\n    canonical_name: bar\n\n- name: Remove 10.2.0.1 from the list of hosts\n  community.windows.win_hosts:\n    state: absent\n    ip_address: 10.2.0.1\n\n- name: Ensure all name resolution is handled by DNS\n  community.windows.win_hosts:\n    state: absent\n"
  },
  "community.windows.win_hotfix": {
    "doc": {
      "description": "Install, uninstall a Windows hotfix.",
      "has_action": false,
      "notes": "This must be run on a host that has the DISM powershell module installed and a Powershell version >= 4.\nThis module is installed by default on Windows 8 and Server 2012 and newer.\nYou can manually install this module on Windows 7 and Server 2008 R2 by installing the Windows ADK U(https://developer.microsoft.com/en-us/windows/hardware/windows-assessment-deployment-kit), see examples to see how to do it with chocolatey.\nYou can download hotfixes from U(https://www.catalog.update.microsoft.com/Home.aspx).",
      "options": {
        "hotfix_identifier": {
          "aliases": [],
          "description": "The name of the hotfix as shown in DISM, see examples for details.\nThis or C(hotfix_kb) MUST be set when C(state=absent).\nIf C(state=present) then the hotfix at C(source) will be validated against this value, if it does not match an error will occur.\nYou can get the identifier by running 'Get-WindowsPackage -Online -PackagePath path-to-cab-in-msu' after expanding the msu file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hotfix_kb": {
          "aliases": [],
          "description": "The name of the KB the hotfix relates to, see examples for details.\nThis or C(hotfix_identifier) MUST be set when C(state=absent).\nIf C(state=present) then the hotfix at C(source) will be validated against this value, if it does not match an error will occur.\nBecause DISM uses the identifier as a key and doesn't refer to a KB in all cases it is recommended to use C(hotfix_identifier) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The path to the downloaded hotfix .msu file.\nThis MUST be set if C(state=present) and MUST be a .msu hotfix file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to install or uninstall the hotfix.\nWhen C(present), C(source) MUST be set.\nWhen C(absent), C(hotfix_identifier) or C(hotfix_kb) MUST be set.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Install and uninstalls Windows hotfixes"
    },
    "examples": "\n- name: Install Windows ADK with DISM for Server 2008 R2\n  chocolatey.chocolatey.win_chocolatey:\n    name: windows-adk\n    version: 8.100.26866.0\n    state: present\n    install_args: /features OptionId.DeploymentTools\n\n- name: Install hotfix without validating the KB and Identifier\n  community.windows.win_hotfix:\n    source: C:\\temp\\windows8.1-kb3172729-x64_e8003822a7ef4705cbb65623b72fd3cec73fe222.msu\n    state: present\n  register: hotfix_install\n\n- ansible.windows.win_reboot:\n  when: hotfix_install.reboot_required\n\n- name: Install hotfix validating KB\n  community.windows.win_hotfix:\n    hotfix_kb: KB3172729\n    source: C:\\temp\\windows8.1-kb3172729-x64_e8003822a7ef4705cbb65623b72fd3cec73fe222.msu\n    state: present\n  register: hotfix_install\n\n- ansible.windows.win_reboot:\n  when: hotfix_install.reboot_required\n\n- name: Install hotfix validating Identifier\n  community.windows.win_hotfix:\n    hotfix_identifier: Package_for_KB3172729~31bf3856ad364e35~amd64~~6.3.1.0\n    source: C:\\temp\\windows8.1-kb3172729-x64_e8003822a7ef4705cbb65623b72fd3cec73fe222.msu\n    state: present\n  register: hotfix_install\n\n- ansible.windows.win_reboot:\n  when: hotfix_install.reboot_required\n\n- name: Uninstall hotfix with Identifier\n  community.windows.win_hotfix:\n    hotfix_identifier: Package_for_KB3172729~31bf3856ad364e35~amd64~~6.3.1.0\n    state: absent\n  register: hotfix_uninstall\n\n- ansible.windows.win_reboot:\n  when: hotfix_uninstall.reboot_required\n\n- name: Uninstall hotfix with KB (not recommended)\n  community.windows.win_hotfix:\n    hotfix_kb: KB3172729\n    state: absent\n  register: hotfix_uninstall\n\n- ansible.windows.win_reboot:\n  when: hotfix_uninstall.reboot_required\n"
  },
  "community.windows.win_http_proxy": {
    "doc": {
      "description": "Used to set, remove, or import proxy settings for Windows HTTP Services C(WinHTTP).\nWinHTTP is a framework used by applications or services, typically .NET applications or non-interactive services, to make web requests.",
      "has_action": false,
      "notes": "This is not the same as the proxy settings set in Internet Explorer, also known as C(WinINet); use the M(community.windows.win_inet_proxy) module to manage that instead.\nThese settings are set system wide and not per user, it will require Administrative privileges to run.",
      "options": {
        "bypass": {
          "aliases": [],
          "description": "A list of hosts that will bypass the set proxy when being accessed.\nUse C(<local>) to match hostnames that are not fully qualified domain names. This is useful when needing to connect to intranet sites using just the hostname.\nOmit, set to null or an empty string/list to remove the bypass list.\nIf this is set then I(proxy) must also be set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "A string or dict that specifies the proxy to be set.\nIf setting a string, should be in the form C(hostname), C(hostname:port), or C(protocol=hostname:port).\nIf the port is undefined, the default port for the protocol in use is used.\nIf setting a dict, the keys should be the protocol and the values should be the hostname and/or port for that protocol.\nValid protocols are C(http), C(https), C(ftp), and C(socks).\nOmit, set to null or an empty string to remove the proxy settings.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "Instead of manually specifying the I(proxy) and/or I(bypass), set this to import the proxy from a set source like Internet Explorer.\nUsing C(ie) will import the Internet Explorer proxy settings for the current active network connection of the current user.\nOnly IE's proxy URL and bypass list will be imported into WinHTTP.\nThis is like running C(netsh winhttp import proxy source=ie).\nThe value is imported when the module runs and will not automatically be updated if the IE configuration changes in the future. The module will have to be run again to sync the latest changes.",
          "type": "str",
          "required": false,
          "choices": [
            "ie"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manages proxy settings for WinHTTP"
    },
    "examples": "\n- name: Set a proxy to use for all protocols\n  community.windows.win_http_proxy:\n    proxy: hostname\n\n- name: Set a proxy with a specific port with a bypass list\n  community.windows.win_http_proxy:\n    proxy: hostname:8080\n    bypass:\n    - server1\n    - server2\n    - <local>\n\n- name: Set the proxy based on the IE proxy settings\n  community.windows.win_http_proxy:\n    source: ie\n\n- name: Set a proxy for specific protocols\n  community.windows.win_http_proxy:\n    proxy:\n      http: hostname:8080\n      https: hostname:8443\n\n- name: Set a proxy for specific protocols using a string\n  community.windows.win_http_proxy:\n    proxy: http=hostname:8080;https=hostname:8443\n    bypass: server1,server2,<local>\n\n- name: Remove any proxy settings\n  community.windows.win_http_proxy:\n    proxy: ''\n    bypass: ''\n"
  },
  "community.windows.win_iis_virtualdirectory": {
    "doc": {
      "description": "Creates, Removes and configures a virtual directory in IIS.",
      "has_action": false,
      "options": {
        "application": {
          "aliases": [],
          "description": "The application under which the virtual directory is created or exists.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "connect_as": {
          "aliases": [],
          "description": "The type of authentication to use for the virtual directory. Either C(pass_through) or C(specific_user)\nIf C(pass_through), IIS will use the identity of the user or application pool identity to access the physical path.\nIf C(specific_user), IIS will use the credentials provided in I(username) and I(password) to access the physical path.",
          "type": "str",
          "required": false,
          "choices": [
            "pass_through",
            "specific_user"
          ],
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the virtual directory to create or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password associated with I(username).\nRequired when I(connect_as) is set to C(specific_user).",
          "type": "str",
          "required": false,
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "physical_path": {
          "aliases": [],
          "description": "The physical path to the folder in which the new virtual directory is created.\nThe specified folder must already exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "site": {
          "aliases": [],
          "description": "The site name under which the virtual directory is created or exists.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to add or remove the specified virtual directory.\nRemoving will remove the virtual directory and all under it (Recursively).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Specifies the user name of an account that can access configuration files and content for the virtual directory.\nRequired when I(connect_as) is set to C(specific_user).",
          "type": "str",
          "required": false,
          "version_added": "1.9.0",
          "suboptions": {}
        }
      },
      "short_description": "Configures a virtual directory in IIS"
    },
    "examples": "\n- name: Create a virtual directory if it does not exist\n  community.windows.win_iis_virtualdirectory:\n    name: somedirectory\n    site: somesite\n    state: present\n    physical_path: C:\\virtualdirectory\\some\n\n- name: Remove a virtual directory if it exists\n  community.windows.win_iis_virtualdirectory:\n    name: somedirectory\n    site: somesite\n    state: absent\n\n- name: Create a virtual directory on an application if it does not exist\n  community.windows.win_iis_virtualdirectory:\n    name: somedirectory\n    site: somesite\n    application: someapp\n    state: present\n    physical_path: C:\\virtualdirectory\\some\n"
  },
  "community.windows.win_iis_webapplication": {
    "doc": {
      "description": "Creates, removes, and configures IIS web applications.",
      "has_action": false,
      "options": {
        "application_pool": {
          "aliases": [],
          "description": "The application pool in which the new site executes.\nIf not specified, the application pool of the current website will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "connect_as": {
          "aliases": [],
          "description": "The type of authentication to use for this application. Either C(pass_through) or C(specific_user)\nIf C(pass_through), IIS will use the identity of the user or application pool identity to access the file system or network.\nIf C(specific_user), IIS will use the credentials provided in I(username) and I(password) to access the file system or network.",
          "type": "str",
          "required": false,
          "choices": [
            "pass_through",
            "specific_user"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the web application.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password associated with I(username).\nRequired when I(connect_as) is set to C(specific_user).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "physical_path": {
          "aliases": [],
          "description": "The physical path on the remote host to use for the new application.\nThe specified folder must already exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "site": {
          "aliases": [],
          "description": "Name of the site on which the application is created.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the web application.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Specifies the user name of an account that can access configuration files and content for this application.\nRequired when I(connect_as) is set to C(specific_user).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Configures IIS web applications"
    },
    "examples": "\n- name: Add ACME webapplication on IIS.\n  community.windows.win_iis_webapplication:\n    name: api\n    site: acme\n    state: present\n    physical_path: C:\\apps\\acme\\api\n"
  },
  "community.windows.win_iis_webapppool": {
    "doc": {
      "description": "Creates, removes and configures an IIS Web Application Pool.",
      "has_action": false,
      "options": {
        "attributes": {
          "aliases": [],
          "description": "This field is a free form dictionary value for the application pool attributes.\nThese attributes are based on the naming standard at U(https://www.iis.net/configreference/system.applicationhost/applicationpools/add#005), see the examples section for more details on how to set this.\nYou can also set the attributes of child elements like cpu and processModel, see the examples to see how it is done.\nWhile you can use the numeric values for enums it is recommended to use the enum name itself, e.g. use SpecificUser instead of 3 for processModel.identityType.\nmanagedPipelineMode may be either \"Integrated\" or \"Classic\".\nstartMode may be either \"OnDemand\" or \"AlwaysRunning\".\nUse C(state) module parameter to modify the state of the app pool.\nWhen trying to set 'processModel.password' and you receive a 'Value does fall within the expected range' error, you have a corrupted keystore. Please follow U(http://structuredsight.com/2014/10/26/im-out-of-range-youre-out-of-range/) to help fix your host.",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the application pool.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the application pool.\nIf C(absent) will ensure the app pool is removed.\nIf C(present) will ensure the app pool is configured and exists.\nIf C(restarted) will ensure the app pool exists and will restart, this is never idempotent.\nIf C(started) will ensure the app pool exists and is started.\nIf C(stopped) will ensure the app pool exists and is stopped.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "restarted",
            "started",
            "stopped"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Configure IIS Web Application Pools"
    },
    "examples": "\n- name: Return information about an existing application pool\n  community.windows.win_iis_webapppool:\n    name: DefaultAppPool\n    state: present\n\n- name: Create a new application pool in 'Started' state\n  community.windows.win_iis_webapppool:\n    name: AppPool\n    state: started\n\n- name: Stop an application pool\n  community.windows.win_iis_webapppool:\n    name: AppPool\n    state: stopped\n\n- name: Restart an application pool (non-idempotent)\n  community.windows.win_iis_webapppool:\n    name: AppPool\n    state: restarted\n\n- name: Change application pool attributes using new dict style\n  community.windows.win_iis_webapppool:\n    name: AppPool\n    attributes:\n      managedRuntimeVersion: v4.0\n      autoStart: no\n\n- name: Creates an application pool, sets attributes and starts it\n  community.windows.win_iis_webapppool:\n    name: AnotherAppPool\n    state: started\n    attributes:\n      managedRuntimeVersion: v4.0\n      autoStart: no\n\n# In the below example we are setting attributes in child element processModel\n# https://www.iis.net/configreference/system.applicationhost/applicationpools/add/processmodel\n- name: Manage child element and set identity of application pool\n  community.windows.win_iis_webapppool:\n    name: IdentitiyAppPool\n    state: started\n    attributes:\n      managedPipelineMode: Classic\n      processModel.identityType: SpecificUser\n      processModel.userName: '{{ansible_user}}'\n      processModel.password: '{{ansible_password}}'\n      processModel.loadUserProfile: true\n\n- name: Manage a timespan attribute\n  community.windows.win_iis_webapppool:\n    name: TimespanAppPool\n    state: started\n    attributes:\n      # Timespan with full string \"day:hour:minute:second.millisecond\"\n      recycling.periodicRestart.time: \"00:00:05:00.000000\"\n      recycling.periodicRestart.schedule: [\"00:10:00\", \"05:30:00\"]\n      # Shortened timespan \"hour:minute:second\"\n      processModel.pingResponseTime: \"00:03:00\"\n"
  },
  "community.windows.win_iis_webbinding": {
    "doc": {
      "description": "Creates, removes and configures a binding to an existing IIS Web site.",
      "has_action": false,
      "options": {
        "certificate_hash": {
          "aliases": [],
          "description": "Certificate hash (thumbprint) for the SSL binding. The certificate hash is the unique identifier for the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "certificate_store_name": {
          "aliases": [],
          "description": "Name of the certificate store where the certificate for the binding is located.",
          "default": "my",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_header": {
          "aliases": [],
          "description": "The host header to bind to / use for the new site.\nIf you are creating/removing a catch-all binding, omit this parameter rather than defining it as '*'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip": {
          "aliases": [],
          "description": "The IP address to bind to / use for the new site.",
          "default": "*",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "website"
          ],
          "description": "Names of web site.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port to bind to / use for the new site.",
          "default": "80",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol to be used for the Web binding (usually HTTP, HTTPS, or FTP).",
          "default": "http",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_flags": {
          "aliases": [],
          "description": "This parameter is only valid on Server 2012 and newer.\nPrimarily used for enabling and disabling server name indication (SNI).\nSet to C(0) to disable SNI.\nSet to C(1) to enable SNI.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the binding.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Configures a IIS Web site binding"
    },
    "examples": "\n- name: Add a HTTP binding on port 9090\n  community.windows.win_iis_webbinding:\n    name: Default Web Site\n    port: 9090\n    state: present\n\n- name: Remove the HTTP binding on port 9090\n  community.windows.win_iis_webbinding:\n    name: Default Web Site\n    port: 9090\n    state: absent\n\n- name: Remove the default http binding\n  community.windows.win_iis_webbinding:\n    name: Default Web Site\n    port: 80\n    ip: '*'\n    state: absent\n\n- name: Add a HTTPS binding\n  community.windows.win_iis_webbinding:\n    name: Default Web Site\n    protocol: https\n    port: 443\n    ip: 127.0.0.1\n    certificate_hash: B0D0FA8408FC67B230338FCA584D03792DA73F4C\n    state: present\n\n- name: Add a HTTPS binding with host header and SNI enabled\n  community.windows.win_iis_webbinding:\n    name: Default Web Site\n    protocol: https\n    port: 443\n    host_header: test.com\n    ssl_flags: 1\n    certificate_hash: D1A3AF8988FD32D1A3AF8988FD323792DA73F4C\n    state: present\n"
  },
  "community.windows.win_iis_website": {
    "doc": {
      "description": "Creates, Removes and configures a IIS Web site.",
      "has_action": false,
      "options": {
        "application_pool": {
          "aliases": [],
          "description": "The application pool in which the new site executes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The host header to bind to / use for the new site.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip": {
          "aliases": [],
          "description": "The IP address to bind to / use for the new site.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Names of web site.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parameters": {
          "aliases": [],
          "description": "Custom site Parameters from string where properties are separated by a pipe and property name/values by colon Ex. \"foo:1|bar:2\"\nSome custom parameters that you can use are listed below, this isn't a definitive list but some common parameters.\nC(logfile.directory) - Physical path to store Logs, e.g. C(D:\\IIS-LOGs\\).\nC(logfile.period) - Log file rollover scheduled accepting these values, how frequently the log file should be rolled-over, e.g. C(Hourly, Daily, Weekly, Monthly).\nC(logfile.LogFormat) - Log file format, by default IIS uses C(W3C).\nC(logfile.truncateSize) - The size at which the log file contents will be trunsted, expressed in bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "physical_path": {
          "aliases": [],
          "description": "The physical path on the remote host to use for the new site.\nThe specified folder must already exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port to bind to / use for the new site.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "site_id": {
          "aliases": [],
          "description": "Explicitly set the IIS numeric ID for a site.\nNote that this value cannot be changed after the website has been created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the web site",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "started",
            "stopped",
            "restarted"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Configures a IIS Web site"
    },
    "examples": "\n\n# Start a website\n\n- name: Acme IIS site\n  community.windows.win_iis_website:\n    name: Acme\n    state: started\n    port: 80\n    ip: 127.0.0.1\n    hostname: acme.local\n    application_pool: acme\n    physical_path: C:\\sites\\acme\n    parameters: logfile.directory:C:\\sites\\logs\n  register: website\n\n# Remove Default Web Site and the standard port 80 binding\n- name: Remove Default Web Site\n  community.windows.win_iis_website:\n    name: \"Default Web Site\"\n    state: absent\n\n# Create a WebSite with custom Logging configuration (Logs Location, Format and Rolling Over).\n\n- name: Creating WebSite with Custom Log location, Format 3WC and rolling over every hour.\n  community.windows.win_iis_website:\n    name: MyCustom_Web_Shop_Site\n    state: started\n    port: 80\n    ip: '*'\n    hostname: '*'\n    physical_path: D:\\wwwroot\\websites\\my-shop-site\n    parameters: logfile.directory:D:\\IIS-LOGS\\websites\\my-shop-site|logfile.period:Hourly|logFile.logFormat:W3C\n    application_pool: my-shop-site\n\n# Some commandline examples:\n\n# This return information about an existing host\n# $ ansible -i vagrant-inventory -m community.windows.win_iis_website -a \"name='Default Web Site'\" window\n# host | success >> {\n#     \"changed\": false,\n#     \"site\": {\n#         \"ApplicationPool\": \"DefaultAppPool\",\n#         \"Bindings\": [\n#             \"*:80:\"\n#         ],\n#         \"ID\": 1,\n#         \"Name\": \"Default Web Site\",\n#         \"PhysicalPath\": \"%SystemDrive%\\\\inetpub\\\\wwwroot\",\n#         \"State\": \"Stopped\"\n#     }\n# }\n\n# This stops an existing site.\n# $ ansible -i hosts -m community.windows.win_iis_website -a \"name='Default Web Site' state=stopped\" host\n\n# This creates a new site.\n# $ ansible -i hosts -m community.windows.win_iis_website -a \"name=acme physical_path=C:\\\\sites\\\\acme\" host\n\n# Change logfile.\n# $ ansible -i hosts -m community.windows.win_iis_website -a \"name=acme physical_path=C:\\\\sites\\\\acme\" host\n"
  },
  "community.windows.win_inet_proxy": {
    "doc": {
      "description": "Used to set or remove proxy settings for Windows INet which includes Internet Explorer.\nWinINet is a framework used by interactive applications to submit web requests through.\nThe proxy settings can also be used by other applications like Firefox, Chrome, and others but there is no definitive list.",
      "has_action": false,
      "notes": "This is not the same as the proxy settings set in WinHTTP through the C(netsh) command. Use the M(community.windows.win_http_proxy) module to manage that instead.\nThese settings are by default set per user and not system wide. A registry property must be set independently from this module if you wish to apply the proxy for all users. See examples for more detail.\nIf per user proxy settings are desired, use I(become) to become any local user on the host. No password is needed to be set for this to work.\nIf the proxy requires authentication, set the credentials using the M(community.windows.win_credential) module. This requires I(become) to be used so the credential store can be accessed.",
      "options": {
        "auto_config_url": {
          "aliases": [],
          "description": "The URL of a proxy configuration script.\nProxy configuration scripts are typically JavaScript files with the C(.pac) extension that implement the C(FindProxyForURL(url, host) function.\nOmit, set to null or an empty string to remove the auto config URL.\nThis corresponds to the checkbox I(Use automatic configuration script) in the connection settings window.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_detect": {
          "aliases": [],
          "description": "Whether to configure WinINet to automatically detect proxy settings through Web Proxy Auto-Detection C(WPAD).\nThis corresponds to the checkbox I(Automatically detect settings) in the connection settings window.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "bypass": {
          "aliases": [],
          "description": "A list of hosts that will bypass the set proxy when being accessed.\nUse C(<local>) to match hostnames that are not fully qualified domain names. This is useful when needing to connect to intranet sites using just the hostname. If defined, this should be the last entry in the bypass list.\nUse C(<-loopback>) to stop automatically bypassing the proxy when connecting through any loopback address like C(127.0.0.1), C(localhost), or the local hostname.\nOmit, set to null or an empty string/list to remove the bypass list.\nIf this is set then I(proxy) must also be set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "connection": {
          "aliases": [],
          "description": "The name of the IE connection to set the proxy settings for.\nThese are the connections under the I(Dial-up and Virtual Private Network) header in the IE settings.\nWhen omitted, the default LAN connection is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "A string or dict that specifies the proxy to be set.\nIf setting a string, should be in the form C(hostname), C(hostname:port), or C(protocol=hostname:port).\nIf the port is undefined, the default port for the protocol in use is used.\nIf setting a dict, the keys should be the protocol and the values should be the hostname and/or port for that protocol.\nValid protocols are C(http), C(https), C(ftp), and C(socks).\nOmit, set to null or an empty string to remove the proxy settings.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages proxy settings for WinINet and Internet Explorer"
    },
    "examples": "\n# This should be set before running the win_inet_proxy module\n- name: Configure IE proxy settings to apply to all users\n  ansible.windows.win_regedit:\n    path: HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\n    name: ProxySettingsPerUser\n    data: 0\n    type: dword\n    state: present\n\n# This should be set before running the win_inet_proxy module\n- name: Configure IE proxy settings to apply per user\n  ansible.windows.win_regedit:\n    path: HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\n    name: ProxySettingsPerUser\n    data: 1\n    type: dword\n    state: present\n\n- name: Configure IE proxy to use auto detected settings without an explicit proxy\n  win_inet_proxy:\n    auto_detect: yes\n\n- name: Configure IE proxy to use auto detected settings with a configuration script\n  win_inet_proxy:\n    auto_detect: yes\n    auto_config_url: http://proxy.ansible.com/proxy.pac\n\n- name: Configure IE to use explicit proxy host\n  win_inet_proxy:\n    auto_detect: yes\n    proxy: ansible.proxy\n\n- name: Configure IE to use explicit proxy host with port and without auto detection\n  win_inet_proxy:\n    auto_detect: no\n    proxy: ansible.proxy:8080\n\n- name: Configure IE to use a specific proxy per protocol\n  win_inet_proxy:\n    proxy:\n      http: ansible.proxy:8080\n      https: ansible.proxy:8443\n\n- name: Configure IE to use a specific proxy per protocol using a string\n  win_inet_proxy:\n    proxy: http=ansible.proxy:8080;https=ansible.proxy:8443\n\n- name: Set a proxy with a bypass list\n  win_inet_proxy:\n    proxy: ansible.proxy\n    bypass:\n    - server1\n    - server2\n    - <-loopback>\n    - <local>\n\n- name: Remove any explicit proxies that are set\n  win_inet_proxy:\n    proxy: ''\n    bypass: ''\n\n# This should be done after setting the IE proxy with win_inet_proxy\n- name: Import IE proxy configuration to WinHTTP\n  win_http_proxy:\n    source: ie\n\n# Explicit credentials can only be set per user and require become to work\n- name: Set credential to use for proxy auth\n  win_credential:\n    name: ansible.proxy  # The name should be the FQDN of the proxy host\n    type: generic_password\n    username: proxyuser\n    secret: proxypass\n    state: present\n  become: yes\n  become_user: '{{ ansible_user }}'\n  become_method: runas\n"
  },
  "community.windows.win_initialize_disk": {
    "doc": {
      "description": "The M(community.windows.win_initialize_disk) module initializes disks",
      "has_action": false,
      "notes": "One of three parameters (I(disk_number), I(uniqueid), and I(path)) are mandatory to identify the target disk, but more than one cannot be specified at the same time.\nA minimum Operating System Version of Server 2012 or Windows 8 is required to use this module.\nThis module is idempotent if I(force) is not specified.",
      "options": {
        "disk_number": {
          "aliases": [],
          "description": "Used to specify the disk number of the disk to be initialized.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Specify if initializing should be forced for disks that are already initialized.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "online": {
          "aliases": [],
          "description": "If the disk is offline and/or readonly update the disk to be online and not readonly.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Used to specify the path to the disk to be initialized.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "style": {
          "aliases": [],
          "description": "The partition style to use for the disk. Valid options are mbr or gpt.",
          "default": "gpt",
          "type": "str",
          "required": false,
          "choices": [
            "gpt",
            "mbr"
          ],
          "suboptions": {}
        },
        "uniqueid": {
          "aliases": [],
          "description": "Used to specify the uniqueid of the disk to be initialized.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Initializes disks on Windows Server"
    },
    "examples": "\n- name: Initialize a disk\n  community.windows.win_initialize_disk:\n    disk_number: 1\n\n- name: Initialize a disk with an MBR partition style\n  community.windows.win_initialize_disk:\n    disk_number: 1\n    style: mbr\n\n- name: Forcefully initiallize a disk\n  community.windows.win_initialize_disk:\n    disk_number: 2\n    force: yes\n"
  },
  "community.windows.win_lineinfile": {
    "doc": {
      "description": "This module will search a file for a line, and ensure that it is present or absent.\nThis is primarily useful when you want to change a single line in a file only.",
      "has_action": false,
      "options": {
        "backrefs": {
          "aliases": [],
          "description": "Used with C(state=present). If set, line can contain backreferences (both positional and named) that will get populated if the C(regexp) matches. This flag changes the operation of the module slightly; C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp) doesn't match anywhere in the file, the file will be left unchanged.\nIf the C(regexp) does match, the last matching line will be replaced by the expanded line parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "Determine whether a backup should be created.\nWhen set to C(yes), create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "create": {
          "aliases": [],
          "description": "Used with C(state=present). If specified, the file will be created if it does not already exist. By default it will fail if the file is missing.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "encoding": {
          "aliases": [],
          "description": "Specifies the encoding of the source text file to operate on (and thus what the output encoding will be). The default of C(auto) will cause the module to auto-detect the encoding of the source file and ensure that the modified file is written with the same encoding.\nAn explicit encoding can be passed as a string that is a valid value to pass to the .NET framework System.Text.Encoding.GetEncoding() method - see U(https://msdn.microsoft.com/en-us/library/system.text.encoding%28v=vs.110%29.aspx).\nThis is mostly useful with C(create=yes) if you want to create a new file with a specific encoding. If C(create=yes) is specified without a specific encoding, the default encoding (UTF-8, no BOM) will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "insertafter": {
          "aliases": [],
          "description": "Used with C(state=present). If specified, the line will be inserted after the last match of specified regular expression. A special value is available; C(EOF) for inserting the line at the end of the file.\nIf specified regular expression has no matches, EOF will be used instead. May not be used with C(backrefs).",
          "default": "EOF",
          "type": "str",
          "required": false,
          "choices": [
            "EOF",
            "*regex*"
          ],
          "suboptions": {}
        },
        "insertbefore": {
          "aliases": [],
          "description": "Used with C(state=present). If specified, the line will be inserted before the last match of specified regular expression. A value is available; C(BOF) for inserting the line at the beginning of the file.\nIf specified regular expression has no matches, the line will be inserted at the end of the file. May not be used with C(backrefs).",
          "type": "str",
          "required": false,
          "choices": [
            "BOF",
            "*regex*"
          ],
          "suboptions": {}
        },
        "line": {
          "aliases": [],
          "description": "Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches.\nBe aware that the line is processed first on the controller and thus is dependent on yaml quoting rules. Any double quoted line will have control characters, such as '\\r\\n', expanded. To print such characters literally, use single or no quotes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "newline": {
          "aliases": [],
          "description": "Specifies the line separator style to use for the modified file. This defaults to the windows line separator (C(\\r\\n)). Note that the indicated line separator will be used for file output regardless of the original line separator that appears in the input file.",
          "default": "windows",
          "type": "str",
          "required": false,
          "choices": [
            "unix",
            "windows"
          ],
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest",
            "destfile",
            "name"
          ],
          "description": "The path of the file to modify.\nNote that the Windows path delimiter C(\\) must be escaped as C(\\\\) when the line is double quoted.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "regex": {
          "aliases": [
            "regexp"
          ],
          "description": "The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line to remove. Uses .NET compatible regular expressions; see U(https://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx).",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the line should be there or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "validate": {
          "aliases": [],
          "description": "Validation to run before copying into place. Use %s in the command to indicate the current file to validate.\nThe command is passed securely so shell features like expansion and pipes won't work.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Ensure a particular line is in a file, or replace an existing line using a back-referenced regular expression"
    },
    "examples": "\n- name: Insert path without converting \\r\\n\n  community.windows.win_lineinfile:\n    path: c:\\file.txt\n    line: c:\\return\\new\n\n- community.windows.win_lineinfile:\n    path: C:\\Temp\\example.conf\n    regex: '^name='\n    line: 'name=JohnDoe'\n\n- community.windows.win_lineinfile:\n    path: C:\\Temp\\example.conf\n    regex: '^name='\n    state: absent\n\n- community.windows.win_lineinfile:\n    path: C:\\Temp\\example.conf\n    regex: '^127\\.0\\.0\\.1'\n    line: '127.0.0.1 localhost'\n\n- community.windows.win_lineinfile:\n    path: C:\\Temp\\httpd.conf\n    regex: '^Listen '\n    insertafter: '^#Listen '\n    line: Listen 8080\n\n- community.windows.win_lineinfile:\n    path: C:\\Temp\\services\n    regex: '^# port for http'\n    insertbefore: '^www.*80/tcp'\n    line: '# port for http by default'\n\n- name: Create file if it doesn't exist with a specific encoding\n  community.windows.win_lineinfile:\n    path: C:\\Temp\\utf16.txt\n    create: yes\n    encoding: utf-16\n    line: This is a utf-16 encoded file\n\n- name: Add a line to a file and ensure the resulting file uses unix line separators\n  community.windows.win_lineinfile:\n    path: C:\\Temp\\testfile.txt\n    line: Line added to file\n    newline: unix\n\n- name: Update a line using backrefs\n  community.windows.win_lineinfile:\n    path: C:\\Temp\\example.conf\n    backrefs: yes\n    regex: '(^name=)'\n    line: '$1JohnDoe'\n"
  },
  "community.windows.win_mapped_drive": {
    "doc": {
      "description": "Allows you to modify mapped network drives for individual users.\nAlso support WebDAV endpoints in the UNC form.",
      "has_action": false,
      "notes": "You cannot use this module to access a mapped drive in another Ansible task, drives mapped with this module are only accessible when logging in interactively with the user through the console or RDP.\nIt is recommend to run this module with become or CredSSP when the remote path requires authentication.\nWhen using become or CredSSP, the task will have access to any local credentials stored in the user's vault.\nIf become or CredSSP is not available, the I(username) and I(password) options can be used for the initial authentication but these are not persisted.\nWebDAV paths must have the WebDAV client feature installed for this module to map those paths. This is installed by default on desktop Windows editions but Windows Server hosts need to install the C(WebDAV-Redirector) feature using M(ansible.windows.win_feature).",
      "options": {
        "letter": {
          "aliases": [],
          "description": "The letter of the network path to map to.\nThis letter must not already be in use with Windows.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password for C(username) that is used when testing the initial connection.\nThis is never saved with a mapped drive, use the M(community.windows.win_credential) module to persist a username and password for a host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The UNC path to map the drive to.\nIf pointing to a WebDAV location this must still be in a UNC path in the format C(\\\\hostname\\path) and not a URL, see examples for more details.\nTo specify a C(https) WebDAV path, add C(@SSL) after the hostname. To specify a custom WebDAV port add C(@<port num>) after the C(@SSL) or hostname portion of the UNC path, e.g. C(\\\\server@SSL@1234) or C(\\\\server@1234).\nThis is required if C(state=present).\nIf C(state=absent) and I(path) is not set, the module will delete the mapped drive regardless of the target.\nIf C(state=absent) and the I(path) is set, the module will throw an error if path does not match the target of the mapped drive.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(present) will ensure the mapped drive exists.\nIf C(absent) will ensure the mapped drive does not exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username that is used when testing the initial connection.\nThis is never saved with a mapped drive, the M(community.windows.win_credential) module to persist a username and password for a host.\nThis is required if the mapped drive requires authentication with custom credentials and become, or CredSSP cannot be used.\nIf become or CredSSP is used, any credentials saved with M(community.windows.win_credential) will automatically be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Map network drives for users"
    },
    "examples": "\n- name: Create a mapped drive under Z\n  community.windows.win_mapped_drive:\n    letter: Z\n    path: \\\\domain\\appdata\\accounting\n\n- name: Delete any mapped drives under Z\n  community.windows.win_mapped_drive:\n    letter: Z\n    state: absent\n\n- name: Only delete the mapped drive Z if the paths match (error is thrown otherwise)\n  community.windows.win_mapped_drive:\n    letter: Z\n    path: \\\\domain\\appdata\\accounting\n    state: absent\n\n- name: Create mapped drive with credentials and save the username and password\n  block:\n  - name: Save the network credentials required for the mapped drive\n    community.windows.win_credential:\n      name: server\n      type: domain_password\n      username: username@DOMAIN\n      secret: Password01\n      state: present\n\n  - name: Create a mapped drive that requires authentication\n    community.windows.win_mapped_drive:\n      letter: M\n      path: \\\\SERVER\\C$\n      state: present\n  vars:\n    # become is required to save and retrieve the credentials in the tasks\n    ansible_become: yes\n    ansible_become_method: runas\n    ansible_become_user: '{{ ansible_user }}'\n    ansible_become_pass: '{{ ansible_password }}'\n\n- name: Create mapped drive with credentials that do not persist on the next logon\n  community.windows.win_mapped_drive:\n    letter: M\n    path: \\\\SERVER\\C$\n    state: present\n    username: '{{ ansible_user }}'\n    password: '{{ ansible_password }}'\n\n# This should only be required for Windows Server OS'\n- name: Ensure WebDAV client feature is installed\n  ansible.windows.win_feature:\n    name: WebDAV-Redirector\n    state: present\n  register: webdav_feature\n\n- name: Reboot after installing WebDAV client feature\n  ansible.windows.win_reboot:\n  when: webdav_feature.reboot_required\n\n- name: Map the HTTPS WebDAV location\n  community.windows.win_mapped_drive:\n    letter: W\n    path: \\\\live.sysinternals.com@SSL\\tools  # https://live.sysinternals.com/tools\n    state: present\n"
  },
  "community.windows.win_msg": {
    "doc": {
      "description": "Wraps the msg.exe command in order to send messages to Windows hosts.",
      "has_action": false,
      "notes": "This module must run on a windows host, so ensure your play targets windows hosts, or delegates to a windows host.\nMessages are only sent to the local host where the module is run.\nThe module does not support sending to users listed in a file.\nSetting wait to C(yes) can result in long run times on systems with many logged in users.",
      "options": {
        "display_seconds": {
          "aliases": [],
          "description": "How long to wait for receiver to acknowledge message, in seconds.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The text of the message to be displayed.\nThe message must be less than 256 characters.",
          "default": "Hello world!",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "to": {
          "aliases": [],
          "description": "Who to send the message to. Can be a username, sessionname or sessionid.",
          "default": "*",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Whether to wait for users to respond.  Module will only wait for the number of seconds specified in display_seconds or 10 seconds if not specified. However, if I(wait) is C(yes), the message is sent to each logged on user in turn, waiting for the user to either press 'ok' or for the timeout to elapse before moving on to the next user.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Sends a message to logged in users on Windows hosts"
    },
    "examples": "\n- name: Warn logged in users of impending upgrade\n  community.windows.win_msg:\n    display_seconds: 60\n    msg: Automated upgrade about to start.  Please save your work and log off before {{ deployment_start_time }}\n"
  },
  "community.windows.win_net_adapter_feature": {
    "doc": {
      "description": "Enable or disable some network components of a certain network adapter or all the network adapters.",
      "has_action": false,
      "options": {
        "component_id": {
          "aliases": [],
          "description": "Specify the below component_id of network adapters.\ncomponent_id (DisplayName)\nC(ms_implat) (Microsoft Network Adapter Multiplexor Protocol)\nC(ms_lltdio) (Link-Layer Topology Discovery Mapper I/O Driver)\nC(ms_tcpip6) (Internet Protocol Version 6 (TCP/IPv6))\nC(ms_tcpip) (Internet Protocol Version 4 (TCP/IPv4))\nC(ms_lldp) (Microsoft LLDP Protocol Driver)\nC(ms_rspndr) (Link-Layer Topology Discovery Responder)\nC(ms_msclient) (Client for Microsoft Networks)\nC(ms_pacer) (QoS Packet Scheduler)\nIf you'd like to set custom adapters like 'Juniper Network Service', get the I(component_id) by running the C(Get-NetAdapterBinding) cmdlet.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "interface": {
          "aliases": [],
          "description": "Name of Network Adapter Interface. For example, C(Ethernet0) or C(*).",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify the state of ms_tcpip6 of interfaces.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Enable or disable certain network adapters.",
      "version_added": "1.2.0"
    },
    "examples": "\n- name: enable multiple interfaces of multiple interfaces\n  community.windows.win_net_adapter_feature:\n    interface:\n    - 'Ethernet0'\n    - 'Ethernet1'\n    state: enabled\n    component_id:\n    - ms_tcpip6\n    - ms_server\n\n- name: Enable ms_tcpip6 of all the Interface\n  community.windows.win_net_adapter_feature:\n    interface: '*'\n    state: enabled\n    component_id:\n    - ms_tcpip6\n\n"
  },
  "community.windows.win_netbios": {
    "doc": {
      "description": "Enables or disables NetBIOS on Windows network adapters.\nCan be used to protect a system against NBT-NS poisoning and avoid NBNS broadcast storms.\nSettings can be applied system wide or per adapter.",
      "has_action": false,
      "notes": "Changing NetBIOS settings does not usually require a reboot and will take effect immediately.\nUDP port 137/138/139 will no longer be listening once NetBIOS is disabled.",
      "options": {
        "adapter_names": {
          "aliases": [],
          "description": "List of adapter names for which to manage NetBIOS settings. If this option is omitted then configuration is applied to all adapters on the system.\nThe adapter name used is the connection caption in the Network Control Panel or via C(Get-NetAdapter), eg C(Ethernet 2).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether NetBIOS should be enabled, disabled, or default (use setting from DHCP server or if static IP address is assigned enable NetBIOS).",
          "type": "str",
          "required": true,
          "choices": [
            "enabled",
            "disabled",
            "default"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage NetBIOS over TCP/IP settings on Windows."
    },
    "examples": "\n- name: Disable NetBIOS system wide\n  community.windows.win_netbios:\n    state: disabled\n\n- name: Disable NetBIOS on Ethernet2\n  community.windows.win_netbios:\n    state: disabled\n    adapter_names:\n      - Ethernet2\n\n- name: Enable NetBIOS on Public and Backup adapters\n  community.windows.win_netbios:\n    state: enabled\n    adapter_names:\n      - Public\n      - Backup\n\n- name: Set NetBIOS to system default on all adapters\n  community.windows.win_netbios:\n    state: default\n"
  },
  "community.windows.win_nssm": {
    "doc": {
      "description": "Install a Windows service using the NSSM wrapper.\nNSSM is a service helper which doesn't suck. See U(https://nssm.cc/) for more information.",
      "has_action": false,
      "notes": "The service will NOT be started after its creation when C(state=present).\nOnce the service is created, you can use the M(ansible.windows.win_service) module to start it or configure some additionals properties, such as its startup type, dependencies, service account, and so on.",
      "options": {
        "app_environment": {
          "aliases": [],
          "description": "Key/Value pairs which will be added to the environment of the service application.",
          "type": "dict",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "app_parameters": {
          "aliases": [],
          "description": "A string representing a dictionary of parameters to be passed to the application when it starts.\nDEPRECATED since v2.8, please use I(arguments) instead.\nThis is mutually exclusive with I(arguments).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "app_rotate_bytes": {
          "aliases": [],
          "description": "NSSM will not rotate any file which is smaller than the configured number of bytes.",
          "default": "104858",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "app_rotate_online": {
          "aliases": [],
          "description": "If set to 1, nssm can rotate files which grow to the configured file size limit while the service is running.",
          "default": "0",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1"
          ],
          "suboptions": {}
        },
        "app_stop_method_console": {
          "aliases": [],
          "description": "Time to wait after sending Control-C.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "app_stop_method_skip": {
          "aliases": [],
          "description": "To disable service shutdown methods, set to the sum of one or more of the numbers\n1 - Don't send Control-C to the console.\n2 - Don't send WM_CLOSE to windows.\n4 - Don't send WM_QUIT to threads.\n8 - Don't call TerminateProcess().",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15"
          ],
          "suboptions": {}
        },
        "application": {
          "aliases": [],
          "description": "The application binary to run as a service\nRequired when I(state) is C(present), C(started), C(stopped), or C(restarted).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "arguments": {
          "aliases": [
            "app_parameters_free_form"
          ],
          "description": "Parameters to be passed to the application when it starts.\nThis can be either a simple string or a list.\nThis is mutually exclusive with I(app_parameters).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dependencies": {
          "aliases": [],
          "description": "Service dependencies that has to be started to trigger startup, separated by comma.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to set for the service.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [],
          "description": "The display name to set for the service.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "The location of the NSSM utility (in case it is not located in your PATH).",
          "default": "nssm.exe",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the service to operate on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password to be used for service startup.\nThis is not required for the well known service accounts and group managed service accounts.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_mode": {
          "aliases": [],
          "description": "If C(auto) is selected, the service will start at bootup.\nC(delayed) causes a delayed but automatic start after boot.\nC(manual) means that the service will start only when another service needs it.\nC(disabled) means that the service will stay off, regardless if it is needed or not.",
          "default": "auto",
          "type": "str",
          "required": false,
          "choices": [
            "auto",
            "delayed",
            "disabled",
            "manual"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the service on the system.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "started",
            "stopped",
            "restarted"
          ],
          "suboptions": {}
        },
        "stderr_file": {
          "aliases": [],
          "description": "Path to receive error output.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "stdout_file": {
          "aliases": [],
          "description": "Path to receive output.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "user"
          ],
          "description": "User to be used for service startup.\nGroup managed service accounts must end with C($).\nBefore C(1.8.0), this parameter was just C(user).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "working_directory": {
          "aliases": [
            "app_directory",
            "chdir"
          ],
          "description": "The working directory to run the service executable from (defaults to the directory containing the application binary)",
          "type": "path",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "nssm >= 2.24.0 # (install via M(chocolatey.chocolatey.win_chocolatey)) C(win_chocolatey: name=nssm)"
      ],
      "short_description": "Install a service using NSSM"
    },
    "examples": "\n- name: Install the foo service\n  community.windows.win_nssm:\n    name: foo\n    application: C:\\windows\\foo.exe\n\n# This will yield the following command: C:\\windows\\foo.exe bar \"true\"\n- name: Install the Consul service with a list of parameters\n  community.windows.win_nssm:\n    name: Consul\n    application: C:\\consul\\consul.exe\n    arguments:\n      - agent\n      - -config-dir=C:\\consul\\config\n\n# This is strictly equivalent to the previous example\n- name: Install the Consul service with an arbitrary string of parameters\n  community.windows.win_nssm:\n    name: Consul\n    application: C:\\consul\\consul.exe\n    arguments: agent -config-dir=C:\\consul\\config\n\n\n# Install the foo service, and then configure and start it with win_service\n- name: Install the foo service, redirecting stdout and stderr to the same file\n  community.windows.win_nssm:\n    name: foo\n    application: C:\\windows\\foo.exe\n    stdout_file: C:\\windows\\foo.log\n    stderr_file: C:\\windows\\foo.log\n\n- name: Configure and start the foo service using win_service\n  ansible.windows.win_service:\n    name: foo\n    dependencies: [ adf, tcpip ]\n    username: foouser\n    password: secret\n    start_mode: manual\n    state: started\n\n- name: Install a script based service and define custom environment variables\n  community.windows.win_nssm:\n    name: <ServiceName>\n    application: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    arguments:\n      - <path-to-script>\n      - <script arg>\n    app_environment:\n      AUTH_TOKEN: <token value>\n      SERVER_URL: https://example.com\n      PATH: \"<path-prepends>;{{ ansible_env.PATH }};<path-appends>\"\n\n- name: Remove the foo service\n  community.windows.win_nssm:\n    name: foo\n    state: absent\n"
  },
  "community.windows.win_pagefile": {
    "doc": {
      "description": "Query current pagefile configuration.\nEnable/Disable AutomaticManagedPagefile.\nCreate new or override pagefile configuration.",
      "has_action": false,
      "notes": "There is difference between automatic managed pagefiles that configured once for the entire system and system managed pagefile that configured per pagefile.\nInitialSize 0 and MaximumSize 0 means the pagefile is managed by the system.\nValue out of range exception may be caused by several different issues, two common problems - No such drive, Pagefile size is too small.\nSetting a pagefile when AutomaticManagedPagefile is on will disable the AutomaticManagedPagefile.",
      "options": {
        "automatic": {
          "aliases": [],
          "description": "Configures AutomaticManagedPagefile for the entire system.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "drive": {
          "aliases": [],
          "description": "The drive of the pagefile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "initial_size": {
          "aliases": [],
          "description": "The initial size of the pagefile in megabytes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "maximum_size": {
          "aliases": [],
          "description": "The maximum size of the pagefile in megabytes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "override": {
          "aliases": [],
          "description": "Override the current pagefile on the drive.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "remove_all": {
          "aliases": [],
          "description": "Remove all pagefiles in the system, not including automatic managed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the pagefile.",
          "default": "query",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "query"
          ],
          "suboptions": {}
        },
        "system_managed": {
          "aliases": [],
          "description": "Configures current pagefile to be managed by the system.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "test_path": {
          "aliases": [],
          "description": "Use Test-Path on the drive to make sure the drive is accessible before creating the pagefile.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Query or change pagefile configuration"
    },
    "examples": "\n- name: Query pagefiles configuration\n  community.windows.win_pagefile:\n\n- name: Query C pagefile\n  community.windows.win_pagefile:\n    drive: C\n\n- name: Set C pagefile, don't override if exists\n  community.windows.win_pagefile:\n    drive: C\n    initial_size: 1024\n    maximum_size: 1024\n    override: no\n    state: present\n\n- name: Set C pagefile, override if exists\n  community.windows.win_pagefile:\n    drive: C\n    initial_size: 1024\n    maximum_size: 1024\n    state: present\n\n- name: Remove C pagefile\n  community.windows.win_pagefile:\n    drive: C\n    state: absent\n\n- name: Remove all current pagefiles, enable AutomaticManagedPagefile and query at the end\n  community.windows.win_pagefile:\n    remove_all: yes\n    automatic: yes\n\n- name: Remove all pagefiles disable AutomaticManagedPagefile and set C pagefile\n  community.windows.win_pagefile:\n    drive: C\n    initial_size: 2048\n    maximum_size: 2048\n    remove_all: yes\n    automatic: no\n    state: present\n\n- name: Set D pagefile, override if exists\n  community.windows.win_pagefile:\n    drive: d\n    initial_size: 1024\n    maximum_size: 1024\n    state: present\n"
  },
  "community.windows.win_partition": {
    "doc": {
      "description": "The M(community.windows.win_partition) module can create, modify or delete a partition on a disk",
      "has_action": false,
      "notes": "A minimum Operating System Version of 6.2 is required to use this module. To check if your OS is compatible, see U(https://docs.microsoft.com/en-us/windows/desktop/sysinfo/operating-system-version).\nThis module cannot be used for removing the drive letter associated with a partition, initializing a disk or, file system formatting.\nIdempotence works only if you're specifying a drive letter or other unique attributes such as a combination of disk number and partition number.\nFor more information, see U(https://msdn.microsoft.com/en-us/library/windows/desktop/hh830524.aspx).",
      "options": {
        "active": {
          "aliases": [],
          "description": "Specifies if the partition is active and can be used to start the system. This property is only valid when the disk's partition style is MBR.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disk_number": {
          "aliases": [],
          "description": "Disk number is mandatory for creating new partitions.\nA combination of I(disk_number) and I(partition_number) can be used to specify the partition instead of I(drive_letter) if required.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "drive_letter": {
          "aliases": [],
          "description": "Used for accessing partitions if I(disk_number) and I(partition_number) are not provided.\nUse C(auto) for automatically assigning a drive letter, or a letter A-Z for manually assigning a drive letter to a new partition. If not specified, no drive letter is assigned when creating a new partition.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gpt_type": {
          "aliases": [],
          "description": "Specify the partition's GPT type if the disk's partition style is GPT.\nThis only applies to new partitions.\nThis does not relate to the partitions file system formatting.",
          "type": "str",
          "required": false,
          "choices": [
            "system_partition",
            "microsoft_reserved",
            "basic_data",
            "microsoft_recovery"
          ],
          "suboptions": {}
        },
        "hidden": {
          "aliases": [],
          "description": "Hides the target partition, making it undetectable by the mount manager.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mbr_type": {
          "aliases": [],
          "description": "Specify the partition's MBR type if the disk's partition style is MBR.\nThis only applies to new partitions.\nThis does not relate to the partitions file system formatting.",
          "type": "str",
          "required": false,
          "choices": [
            "fat12",
            "fat16",
            "extended",
            "huge",
            "ifs",
            "fat32"
          ],
          "suboptions": {}
        },
        "offline": {
          "aliases": [],
          "description": "Sets the partition offline.\nAdding a mount point (such as a drive letter) will cause the partition to go online again.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "partition_number": {
          "aliases": [],
          "description": "Used in conjunction with I(disk_number) to uniquely identify a partition.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "partition_size": {
          "aliases": [],
          "description": "Specify size of the partition in B, KB, KiB, MB, MiB, GB, GiB, TB or TiB. Use -1 to specify maximum supported size.\nPartition size is mandatory for creating a new partition but not for updating or deleting a partition.\nThe decimal SI prefixes kilo, mega, giga, tera, etc., are powers of 10^3 = 1000. The binary prefixes kibi, mebi, gibi, tebi, etc. respectively refer to the corresponding power of 2^10 = 1024. Thus, a gigabyte (GB) is 1000000000 (1000^3) bytes while 1 gibibyte (GiB) is 1073741824 (1024^3) bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "read_only": {
          "aliases": [],
          "description": "Make the partition read only, restricting changes from being made to the partition.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Used to specify the state of the partition. Use C(absent) to specify if a partition should be removed and C(present) to specify if the partition should be created or updated.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Creates, changes and removes partitions on Windows Server"
    },
    "examples": "\n- name: Create a partition with drive letter D and size 5 GiB\n  community.windows.win_partition:\n    drive_letter: D\n    partition_size: 5 GiB\n    disk_number: 1\n\n- name: Resize previously created partition to it's maximum size and change it's drive letter to E\n  community.windows.win_partition:\n    drive_letter: E\n    partition_size: -1\n    partition_number: 1\n    disk_number: 1\n\n- name: Delete partition\n  community.windows.win_partition:\n    disk_number: 1\n    partition_number: 1\n    state: absent\n"
  },
  "community.windows.win_pester": {
    "doc": {
      "description": "Run Pester tests on Windows hosts.\nTest files have to be available on the remote host.",
      "has_action": false,
      "options": {
        "output_file": {
          "aliases": [],
          "description": "Generates an output test report.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "output_format": {
          "aliases": [],
          "description": "Format of the test report to be generated.\nThis parameter is to be used with output_file option.",
          "default": "NunitXML",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path to a pester test file or a folder where tests can be found.\nIf the path is a folder, the module will consider all ps1 files as Pester tests.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Runs only tests in Describe blocks with specified Tags values.\nAccepts multiple comma separated tags.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "test_parameters": {
          "aliases": [],
          "description": "Allows to specify parameters to the test script.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [
            "minimum_version"
          ],
          "description": "Minimum version of the pester module that has to be available on the remote host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Pester"
      ],
      "short_description": "Run Pester tests on Windows hosts"
    },
    "examples": "\n- name: Get facts\n  ansible.windows.setup:\n\n- name: Add Pester module\n  action:\n    module_name: \"{{ 'community.windows.win_psmodule' if ansible_powershell_version >= 5 else 'chocolatey.chocolatey.win_chocolatey' }}\"\n    name: Pester\n    state: present\n\n- name: Run the pester test provided in the path parameter.\n  community.windows.win_pester:\n    path: C:\\Pester\n\n- name: Run the pester tests only for the tags specified.\n  community.windows.win_pester:\n    path: C:\\Pester\\TestScript.tests\n    tags: CI,UnitTests\n\n# Run pesters tests files that are present in the specified folder\n# ensure that the pester module version available is greater or equal to the version parameter.\n- name: Run the pester test present in a folder and check the Pester module version.\n  community.windows.win_pester:\n    path: C:\\Pester\\test01.test.ps1\n    version: 4.1.0\n\n- name: Run the pester test present in a folder with given script parameters.\n  community.windows.win_pester:\n    path: C:\\Pester\\test04.test.ps1\n    test_parameters:\n      Process: lsass\n      Service: bits\n\n- name: Run the pester test present in a folder and generate NunitXML test result..\n  community.windows.win_pester:\n    path: C:\\Pester\\test04.test.ps1\n    output_file: c:\\Pester\\resullt\\testresult.xml\n"
  },
  "community.windows.win_power_plan": {
    "doc": {
      "description": "This module will change the power plan of a Windows system to the defined string.\nWindows defaults to C(balanced) which will cause CPU throttling. In some cases it can be preferable to change the mode to C(high performance) to increase CPU performance.\nOne of I(name) or I(guid) must be provided.",
      "has_action": false,
      "options": {
        "guid": {
          "aliases": [],
          "description": "String value that indicates the desired power plan by guid.\nThe power plan must already be present on the system.\nFor out of box guids see U(https://docs.microsoft.com/en-us/windows/win32/power/power-policy-settings).",
          "type": "str",
          "required": false,
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "String value that indicates the desired power plan by name.\nThe power plan must already be present on the system.\nCommonly there will be options for C(balanced) and C(high performance).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Changes the power plan of a Windows system"
    },
    "examples": "\n- name: Change power plan to high performance\n  community.windows.win_power_plan:\n    name: high performance\n\n- name: Change power plan to high performance\n  community.windows.win_power_plan:\n    guid: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\n"
  },
  "community.windows.win_product_facts": {
    "doc": {
      "description": "Provides Windows product and license information.",
      "has_action": false,
      "short_description": "Provides Windows product and license information"
    },
    "examples": "\n- name: Get product id and product key\n  community.windows.win_product_facts:\n\n- name: Display Windows edition\n  debug:\n    var: ansible_os_license_edition\n\n- name: Display Windows license status\n  debug:\n    var: ansible_os_license_status\n"
  },
  "community.windows.win_psexec": {
    "doc": {
      "description": "Run commands (remotely) through the PsExec service.\nRun commands as another (domain) user (with elevated privileges).",
      "has_action": false,
      "notes": "More information related to Microsoft PsExec is available from U(https://technet.microsoft.com/en-us/sysinternals/bb897553.aspx)",
      "options": {
        "chdir": {
          "aliases": [],
          "description": "Run the command from this (remote) directory.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "The command line to run through PsExec (limited to 260 characters).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "elevated": {
          "aliases": [],
          "description": "Run the command with elevated privileges.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "executable": {
          "aliases": [],
          "description": "The location of the PsExec utility (in case it is not located in your PATH).",
          "default": "psexec.exe",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hostnames": {
          "aliases": [],
          "description": "The hostnames to run the command.\nIf not provided, the command is run locally.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "interactive": {
          "aliases": [],
          "description": "Run the program so that it interacts with the desktop on the remote system.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "limited": {
          "aliases": [],
          "description": "Run the command as limited user (strips the Administrators group and allows only privileges assigned to the Users group).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nobanner": {
          "aliases": [],
          "description": "Do not display the startup banner and copyright message.\nThis only works for specific versions of the PsExec binary.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "noprofile": {
          "aliases": [],
          "description": "Run the command without loading the account's profile.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password for the (remote) user to run the command as.\nThis is mandatory in order authenticate yourself.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Used to run the command at a different priority.",
          "type": "str",
          "required": false,
          "choices": [
            "abovenormal",
            "background",
            "belownormal",
            "high",
            "low",
            "realtime"
          ],
          "suboptions": {}
        },
        "session": {
          "aliases": [],
          "description": "Specifies the session ID to use.\nThis parameter works in conjunction with I(interactive).\nIt has no effect when I(interactive) is set to C(no).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "system": {
          "aliases": [],
          "description": "Run the remote command in the System account.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The connection timeout in seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The (remote) user to run the command as.\nIf not provided, the current user is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the application to terminate.\nOnly use for non-interactive applications.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Microsoft PsExec"
      ],
      "short_description": "Runs commands (remotely) as another (privileged) user"
    },
    "examples": "\n- name: Test the PsExec connection to the local system (target node) with your user\n  community.windows.win_psexec:\n    command: whoami.exe\n\n- name: Run regedit.exe locally (on target node) as SYSTEM and interactively\n  community.windows.win_psexec:\n    command: regedit.exe\n    interactive: yes\n    system: yes\n\n- name: Run the setup.exe installer on multiple servers using the Domain Administrator\n  community.windows.win_psexec:\n    command: E:\\setup.exe /i /IACCEPTEULA\n    hostnames:\n    - remote_server1\n    - remote_server2\n    username: DOMAIN\\Administrator\n    password: some_password\n    priority: high\n\n- name: Run PsExec from custom location C:\\Program Files\\sysinternals\\\n  community.windows.win_psexec:\n    command: netsh advfirewall set allprofiles state off\n    executable: C:\\Program Files\\sysinternals\\psexec.exe\n    hostnames: [ remote_server ]\n    password: some_password\n    priority: low\n"
  },
  "community.windows.win_psmodule": {
    "doc": {
      "description": "This module helps to install Windows PowerShell modules and register custom modules repository on Windows-based systems.",
      "has_action": false,
      "notes": "PowerShell modules needed - PowerShellGet >= 1.6.0 - PackageManagement >= 1.1.7\nPowerShell package provider needed - NuGet >= 2.8.5.201\nOn PowerShell 5.x required modules and a package provider will be updated under the first run of the win_psmodule module.\nOn PowerShell 3.x and 4.x you have to install them before using the win_psmodule.",
      "options": {
        "allow_clobber": {
          "aliases": [],
          "description": "If C(yes) allows install modules that contains commands those have the same names as commands that already exists.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allow_prerelease": {
          "aliases": [],
          "description": "If C(yes) installs modules marked as prereleases.\nIt doesn't work with the parameters C(minimum_version) and/or C(maximum_version).\nIt doesn't work with the C(state) set to absent.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maximum_version": {
          "aliases": [],
          "description": "The maximum version of the PowerShell module that has to be installed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "minimum_version": {
          "aliases": [],
          "description": "The minimum version of the PowerShell module that has to be installed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Windows PowerShell module that has to be installed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "Name of the custom repository to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "required_version": {
          "aliases": [],
          "description": "The exact version of the PowerShell module that has to be installed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_publisher_check": {
          "aliases": [],
          "description": "If C(yes), allows you to install a different version of a module that already exists on your computer in the case when a different one is not digitally signed by a trusted publisher and the newest existing module is digitally signed by a trusted publisher.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(present) a new module is installed.\nIf C(absent) a module is removed.\nIf C(latest) a module is updated to the newest version.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "latest",
            "present"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL of the custom repository to register.\nDEPRECATED, will be removed in a major release after C(2021-07-01), please use the M(community.windows.win_psrepository) module instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Adds or removes a Windows PowerShell module"
    },
    "examples": "\n---\n- name: Add a PowerShell module\n  community.windows.win_psmodule:\n    name: PowerShellModule\n    state: present\n\n- name: Add an exact version of PowerShell module\n  community.windows.win_psmodule:\n    name: PowerShellModule\n    required_version: \"4.0.2\"\n    state: present\n\n- name: Install or update an existing PowerShell module to the newest version\n  community.windows.win_psmodule:\n    name: PowerShellModule\n    state: latest\n\n- name: Install newer version of built-in Windows module\n  community.windows.win_psmodule:\n    name: Pester\n    skip_publisher_check: yes\n    state: present\n\n- name: Add a PowerShell module and register a repository\n  community.windows.win_psmodule:\n    name: MyCustomModule\n    repository: MyRepository\n    state: present\n\n- name: Add a PowerShell module from a specific repository\n  community.windows.win_psmodule:\n    name: PowerShellModule\n    repository: MyRepository\n    state: present\n\n- name: Remove a PowerShell module\n  community.windows.win_psmodule:\n    name: PowerShellModule\n    state: absent\n"
  },
  "community.windows.win_psmodule_info": {
    "doc": {
      "description": "Gather information about PowerShell Modules including information from PowerShellGet.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "The name of the module to retrieve.\nSupports any wildcard pattern supported by C(Get-Module).\nIf omitted then all modules will returned.",
          "default": "*",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "The name of the PSRepository the modules were installed from.\nThis acts as a filter against the modules that would be returned based on the I(name) option.\nModules that were not installed from a repository will not be returned if this option is set.\nOnly modules installed from a registered repository will be returned.\nIf the repository was re-registered after module installation with a new C(SourceLocation), this will not match.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "C(PowerShellGet) module"
      ],
      "short_description": "Gather information about PowerShell Modules"
    },
    "examples": "\n- name: Get info about all modules on the system\n  community.windows.win_psmodule_info:\n\n- name: Get info about the ScheduledTasks module\n  community.windows.win_psmodule_info:\n    name: ScheduledTasks\n\n- name: Get info about networking modules\n  community.windows.win_psmodule_info:\n    name: Net*\n\n- name: Get info about all modules installed from the PSGallery repository\n  community.windows.win_psmodule_info:\n    repository: PSGallery\n  register: gallery_modules\n\n- name: Update all modules retrieved from above example\n  community.windows.win_psmodule:\n    name: \"{{ item }}\"\n    state: latest\n  loop: \"{{ gallery_modules.modules | map(attribute=name) }}\"\n\n- name: Get info about all modules on the system\n  community.windows.win_psmodule_info:\n  register: all_modules\n\n- name: Find modules installed from a repository that isn't registered now\n  set_fact:\n    missing_repository_modules: \"{{\n      all_modules\n      | json_query('modules[?repository!=null && repository==repository_source_location].{name: name, version: version, repository: repository}')\n      | list\n    }}\"\n\n- debug:\n    var: missing_repository_modules\n"
  },
  "community.windows.win_psrepository": {
    "doc": {
      "description": "This module helps to add, remove and update Windows PowerShell repository on Windows-based systems.",
      "has_action": false,
      "notes": "See the examples on how to update the NuGet package provider.\nYou can not use C(win_psrepository) to re-register (add) removed PSGallery, use the command C(Register-PSRepository -Default) instead.\nWhen registering or setting I(source_location), PowerShellGet will transform the location according to internal rules, such as following HTTP/S redirects.\nThis can result in a C(CHANGED) status on each run as the values will never match and will be \"reset\" each time.\nTo work around that, find the true destination value with M(community.windows.win_psrepository_info) or C(Get-PSRepository) and update the playbook to match.\nWhen updating an existing repository, all options except I(name) are optional. Only supplied options will be updated. Use I(force=True) to exactly match.\nI(script_location), I(publish_location), and I(script_publish_location) are optional but once set can only be cleared with I(force=True).\nUsing I(force=True) will unregister and re-register the repository if there are any changes, so that it exactly matches the options specified.",
      "options": {
        "force": {
          "aliases": [],
          "description": "If C(True), any differences from the desired state will result in the repository being unregistered, and then re-registered.\nI(force) has no effect when I(state=absent). See notes for additional context.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "installation_policy": {
          "aliases": [],
          "description": "Sets the C(InstallationPolicy) of a repository.\nWill default to C(trusted) when creating a new repository or used with I(force=True).",
          "type": "str",
          "required": false,
          "choices": [
            "trusted",
            "untrusted"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the repository to work with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "Proxy to use for repository.",
          "type": "str",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "publish_location": {
          "aliases": [],
          "description": "Specifies the URI for publishing modules to this repository.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "script_publish_location": {
          "aliases": [],
          "description": "Specifies the URI for publishing scripts to this repository.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "script_source_location": {
          "aliases": [],
          "description": "Specifies the URI for discovering and installing scripts from this repository.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_location": {
          "aliases": [
            "source"
          ],
          "description": "Specifies the URI for discovering and installing modules from this repository.\nA URI can be a NuGet server feed (most common situation), HTTP, HTTPS, FTP or file location.\nRequired when registering a new repository or using I(force=True).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(present) a new repository is added or updated.\nIf C(absent) a repository is removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "PowerShell Module L(PowerShellGet >= 1.6.0,https://www.powershellgallery.com/packages/PowerShellGet/)",
        "PowerShell Module L(PackageManagement >= 1.1.7,https://www.powershellgallery.com/packages/PackageManagement/)",
        "PowerShell Package Provider C(NuGet) >= 2.8.5.201"
      ],
      "short_description": "Adds, removes or updates a Windows PowerShell repository."
    },
    "examples": "\n---\n- name: Ensure the required NuGet package provider version is installed\n  ansible.windows.win_shell: Find-PackageProvider -Name Nuget -ForceBootstrap -IncludeDependencies -Force\n\n- name: Register a PowerShell repository\n  community.windows.win_psrepository:\n    name: MyRepository\n    source_location: https://myrepo.com\n    state: present\n\n- name: Remove a PowerShell repository\n  community.windows.win_psrepository:\n    name: MyRepository\n    state: absent\n\n- name: Add an untrusted repository\n  community.windows.win_psrepository:\n    name: MyRepository\n    installation_policy: untrusted\n\n- name: Add a repository with different locations\n  community.windows.win_psrepository:\n    name: NewRepo\n    source_location: https://myrepo.example/module/feed\n    script_source_location: https://myrepo.example/script/feed\n    publish_location: https://myrepo.example/api/module/publish\n    script_publish_location: https://myrepo.example/api/script/publish\n\n- name: Update only two properties on the above repository\n  community.windows.win_psrepository:\n    name: NewRepo\n    installation_policy: untrusted\n    script_publish_location: https://scriptprocessor.example/publish\n\n- name: Clear script locations from the above repository by re-registering it\n  community.windows.win_psrepository:\n    name: NewRepo\n    installation_policy: untrusted\n    source_location: https://myrepo.example/module/feed\n    publish_location: https://myrepo.example/api/module/publish\n    force: True\n"
  },
  "community.windows.win_psrepository_copy": {
    "doc": {
      "description": "Copies specified registered PSRepositories to other user profiles on the system.\nCan include the C(Default) profile so that new users start with the selected repositories.\nCan include special service accounts like the local SYSTEM user, LocalService, NetworkService.",
      "has_action": false,
      "notes": "Does not require the C(PowerShellGet) module or any other external dependencies.\nUser profiles are loaded from the registry. If a given path does not exist (like if the profile directory was deleted), it is silently skipped.\nIf setting service account profiles, you may need C(become=yes). See examples.\nWhen PowerShellGet first sets up a repositories file, it always adds C(PSGallery), however if this module creates a new repos file and your selected repositories don't include C(PSGallery), it won't be in your destination.\nThe values searched in I(profiles) (and I(exclude_profiles)) are profile names, not necessarily user names. This can happen when the profile path is deliberately changed or when domain user names conflict with users from the local computer or another domain. In this case the second+ user may have the domain name or local computer name appended, like C(JoeUser.Contoso) vs. C(JoeUser). If you intend to filter user profiles, ensure your filters catch the right names.\nIn the case of the service accounts, the specific profiles are C(systemprofile) (for the C(SYSTEM) user), and C(LocalService) or C(NetworkService) for those accounts respectively.\nRepositories with credentials (requiring authentication) or proxy information will copy, but the credentials and proxy details will not as that information is not stored with repository.",
      "options": {
        "exclude": {
          "aliases": [],
          "description": "The names of repositories to exclude.\nNames are interpreted as wildcards.\nIf a name matches both an include (I(name)) and I(exclude), it will be excluded.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "exclude_profiles": {
          "aliases": [],
          "description": "The names of user profiles to exclude.\nIf a profile matches both an include (I(profiles)) and I(exclude_profiles), it will be excluded.\nBy default, the service account profiles are excluded.\nTo explcitly exclude nothing, set I(exclude_profiles=[]).",
          "default": "['systemprofile', 'LocalService', 'NetworkService']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The names of repositories to copy.\nNames are interpreted as wildcards.",
          "default": "['*']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "profiles": {
          "aliases": [],
          "description": "The names of user profiles to populate with repositories.\nNames are interpreted as wildcards.\nThe C(Default) profile can also be matched.\nThe C(Public) and C(All Users) profiles cannot be targeted, as PSRepositories are not loaded from them.",
          "default": "['*']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The full path to the source repositories XML file.\nDefaults to the repositories registered to the current user.",
          "default": "%LOCALAPPDATA%\\Microsoft\\Windows\\PowerShell\\PowerShellGet\\PSRepositories.xml",
          "type": "path",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Copies registered PSRepositories to other user profiles",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Copy the current user's PSRepositories to all non-service account profiles and Default profile\n  community.windows.win_psrepository_copy:\n\n- name: Copy the current user's PSRepositories to all profiles and Default profile\n  community.windows.win_psrepository_copy:\n    exclude_profiles: []\n\n- name: Copy the current user's PSRepositories to all profiles beginning with A, B, or C\n  community.windows.win_psrepository_copy:\n    profiles:\n      - 'A*'\n      - 'B*'\n      - 'C*'\n\n- name: Copy the current user's PSRepositories to all profiles beginning B except Brian and Brianna\n  community.windows.win_psrepository_copy:\n    profiles: 'B*'\n    exclude_profiles:\n      - Brian\n      - Brianna\n\n- name: Copy a specific set of repositories to profiles beginning with 'svc' with exceptions\n  community.windows.win_psrepository_copy:\n    name:\n      - CompanyRepo1\n      - CompanyRepo2\n      - PSGallery\n    profiles: 'svc*'\n    exclude_profiles: 'svc-restricted'\n\n- name: Copy repos matching a pattern with exceptions\n  community.windows.win_psrepository_copy:\n    name: 'CompanyRepo*'\n    exclude: 'CompanyRepo*-Beta'\n\n- name: Copy repositories from a custom XML file on the target host\n  community.windows.win_psrepository_copy:\n    source: 'C:\\data\\CustomRepostories.xml'\n\n### A sample workflow of seeding a system with a custom repository\n\n# A playbook that does initial host setup or builds system images\n\n- name: Register custom respository\n  community.windows.win_psrepository:\n    name: PrivateRepo\n    source_location: https://example.com/nuget/feed/etc\n    installation_policy: trusted\n\n- name: Ensure all current and new users have this repository registered\n  community.windows.win_psrepository_copy:\n    name: PrivateRepo\n\n# In another playbook, run by other users (who may have been created later)\n\n- name: Install a module\n  community.windows.win_psmodule:\n    name: CompanyModule\n    repository: PrivateRepo\n    state: present\n"
  },
  "community.windows.win_psrepository_info": {
    "doc": {
      "description": "Gather information about all or a specific PSRepository.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "The name of the repository to retrieve.\nSupports any wildcard pattern supported by C(Get-PSRepository).\nIf omitted then all repositories will returned.",
          "default": "*",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "C(PowerShellGet) module"
      ],
      "short_description": "Gather information about PSRepositories"
    },
    "examples": "\n- name: Get info for a single repository\n  community.windows.win_psrepository_info:\n    name: PSGallery\n  register: repo_info\n\n- name: Find all repositories that start with 'MyCompany'\n  community.windows.win_psrepository_info:\n    name: MyCompany*\n\n- name: Get info for all repositories\n  community.windows.win_psrepository_info:\n  register: repo_info\n\n- name: Remove all repositories that don't have a publish_location set\n  community.windows.win_psrepository:\n    name: \"{{ item }}\"\n    state: absent\n  loop: \"{{ repo_info.repositories | rejectattr('publish_location', 'none') | list }}\"\n"
  },
  "community.windows.win_psscript": {
    "doc": {
      "description": "Add or remove PowerShell scripts from registered PSRepositories.",
      "has_action": false,
      "notes": "Unlike PowerShell modules, scripts do not support side-by-side installations of multiple versions. Installing a new version will replace the existing one.",
      "options": {
        "allow_prerelease": {
          "aliases": [],
          "description": "If C(yes) installs scripts flagged as prereleases.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "maximum_version": {
          "aliases": [],
          "description": "The maximum version of the script to install.\nCannot be used when I(state=latest).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "minimum_version": {
          "aliases": [],
          "description": "The minimum version of the script to install.\nCannot be used when I(state=latest).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the script you want to install or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "The registered name of the repository you want to install from.\nCannot be used when I(state=absent).\nIf ommitted, all repositories will be searched.\nTo register a repository, use M(community.windows.win_psrepository).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "required_version": {
          "aliases": [],
          "description": "The exact version of the script to install.\nCannot be used with I(minimum_version) or I(maximum_version).\nCannot be used when I(state=latest).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "Determines whether the script is installed for only the C(current_user) or for C(all_users).",
          "default": "all_users",
          "type": "str",
          "required": false,
          "choices": [
            "current_user",
            "all_users"
          ],
          "suboptions": {}
        },
        "source_password": {
          "aliases": [],
          "description": "The password portion of the credential required to access the repository.\nMust be used together with I(source_username).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_username": {
          "aliases": [],
          "description": "The username portion of the credential required to access the repository.\nMust be used together with I(source_password).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the script. C(absent) removes the script.\nC(latest) will ensure the most recent version available is installed.\nC(present) only installs if the script is missing.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "latest"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "C(PowerShellGet) module v1.6.0+"
      ],
      "short_description": "Install and manage PowerShell scripts from a PSRepository"
    },
    "examples": "\n- name: Install a script from PSGallery\n  community.windows.win_psscript:\n    name: Test-RPC\n    repository: PSGallery\n\n- name: Find and install the latest version of a script from any repository\n  community.windows.win_psscript:\n    name: Get-WindowsAutoPilotInfo\n    state: latest\n\n- name: Remove a script that isn't needed\n  community.windows.win_psscript:\n    name: Defrag-Partition\n    state: absent\n\n- name: Install a specific version of a script for the current user\n  community.windows.win_psscript:\n    name: CleanOldFiles\n    scope: current_user\n    required_version: 3.10.2\n\n- name: Install a script below a certain version\n  community.windows.win_psscript:\n    name: New-FeatureEnable\n    maximum_version: 2.99.99\n\n- name: Ensure a minimum version of a script is present\n  community.windows.win_psscript:\n    name: OldStandby\n    minimum_version: 3.0.0\n\n- name: Install any available version that fits a specific range\n  community.windows.win_psscript:\n    name: FinickyScript\n    minimum_version: 2.5.1\n    maximum_version: 2.6.19\n"
  },
  "community.windows.win_psscript_info": {
    "doc": {
      "description": "Gather information about PowerShell Scripts installed via PowerShellGet.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "The name of the script.\nSupports any wildcard pattern supported by C(Get-InstalledScript).\nIf omitted then all scripts will returned.",
          "default": "*",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "The name of the PSRepository the scripts were installed from.\nThis acts as a filter against the scripts that would be returned based on the I(name) option.\nOnly scripts installed from a registered repository will be returned.\nIf the repository was re-registered after script installation with a new C(SourceLocation), this will not match.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "C(PowerShellGet) module"
      ],
      "short_description": "Gather information about installed PowerShell Scripts"
    },
    "examples": "\n- name: Get info about all script on the system\n  community.windows.win_psscript_info:\n\n- name: Get info about the Test-RPC script\n  community.windows.win_psscript_info:\n    name: Test-RPC\n\n- name: Get info about test scripts\n  community.windows.win_psscript_info:\n    name: Test*\n\n- name: Get info about all scripts installed from the PSGallery repository\n  community.windows.win_psscript_info:\n    repository: PSGallery\n  register: gallery_scripts\n\n- name: Update all scripts retrieved from above example\n  community.windows.win_psscript:\n    name: \"{{ item }}\"\n    state: latest\n  loop: \"{{ gallery_scripts.scripts | map(attribute=name) }}\"\n\n- name: Get info about all scripts on the system\n  community.windows.win_psscript_info:\n  register: all_scripts\n\n- name: Find scripts installed from a repository that isn't registered now\n  set_fact:\n    missing_repository_scripts: \"{{\n      all_scripts\n      | json_query('scripts[?repository!=null && repository==repository_source_location].{name: name, version: version, repository: repository}')\n      | list\n    }}\"\n\n- debug:\n    var: missing_repository_scripts\n"
  },
  "community.windows.win_pssession_configuration": {
    "doc": {
      "description": "Register, unregister, and modify PSSession Configurations for PowerShell remoting.",
      "has_action": true,
      "notes": "This module will restart the WinRM service on any change. This will terminate all WinRM connections including those by other Ansible runs.\nInternally this module uses C(async) when not in check mode to ensure things go smoothly when restarting the WinRM service.\nThe standard C(async) and C(poll) keywords cannot be used; instead use the I(async_timeout) and I(async_poll) options to control asynchronous execution.\nOptions that don't list a default value here will use the defaults of C(New-PSSessionConfigurationFile) and C(Register-PSSessionConfiguration).\nIf a value can be specified in both a session config file and directly in the session options, this module will prefer the setting be in the config file.",
      "options": {
        "access_mode": {
          "aliases": [],
          "description": "Controls whether the session configuration allows connection from the C(local) machine only, both local and C(remote), or none (C(disabled)).",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "local",
            "remote"
          ],
          "suboptions": {}
        },
        "alias_definitions": {
          "aliases": [],
          "description": "A dict that defines aliases for each session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "assemblies_to_load": {
          "aliases": [],
          "description": "The assemblies that should be loaded into each session.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "async_poll": {
          "aliases": [],
          "description": "Sets a delay in seconds between each check of the asynchronous execution status.\nReplicates the functionality of the C(poll) keyword.\nHas no effect in check mode.\nI(async_poll=0) is not supported.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "async_timeout": {
          "aliases": [],
          "description": "Sets a timeout for how long in seconds to wait for asynchronous module execution and waiting for the connection to recover.\nReplicates the functionality of the C(async) keyword.\nHas no effect in check mode.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "author": {
          "aliases": [],
          "description": "The author of the session configuration.\nThis value is metadata and does not affect the functionality of the session configuration.\nIf not set, a value may be generated automatically.\nSee also I(lenient_config_fields).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "company_name": {
          "aliases": [],
          "description": "The company that authored the session configuration.\nThis value is metadata and does not affect the functionality of the session configuration.\nIf not set, a value may be generated automatically.\nSee also I(lenient_config_fields).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copyright": {
          "aliases": [],
          "description": "The copyright statement of the session configuration.\nThis value is metadata and does not affect the functionality of the session configuration.\nIf not set, a value may be generated automatically.\nSee also I(lenient_config_fields).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the session configuration.\nThis value is metadata and does not affect the functionality of the session configuration.\nSee also I(lenient_config_fields).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "environment_variables": {
          "aliases": [],
          "description": "A dict that defines environment variables for each session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "execution_policy": {
          "aliases": [],
          "description": "The execution policy controlling script execution in the PowerShell session.",
          "type": "str",
          "required": false,
          "choices": [
            "default",
            "remote_signed",
            "restricted",
            "undefined",
            "unrestricted"
          ],
          "suboptions": {}
        },
        "formats_to_process": {
          "aliases": [],
          "description": "Paths to format definition files to process for each session.",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "function_definitions": {
          "aliases": [],
          "description": "A dict that defines functions for each session.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "group_managed_service_account": {
          "aliases": [],
          "description": "If the session will run as a group managed service account (gMSA) then this is the name.\nDo not use I(run_as_credential_username) and I(run_as_credential_password) to specify a gMSA.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "guid": {
          "aliases": [],
          "description": "The GUID (UUID) of the session configuration file.\nThis value is metadata, so it only matters if you use it externally.\nIf not set, a value will be generated automatically.\nAcceptable GUID formats are flexible. Any string of 32 hexadecimal digits will be accepted, with all hyphens C(-) and opening/closing C({}) ignored.\nSee also I(lenient_config_fields).",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "language_mode": {
          "aliases": [],
          "description": "Determines the language mode of the PowerShell session.",
          "type": "str",
          "required": false,
          "choices": [
            "no_language",
            "restricted_language",
            "constrained_language",
            "full_language"
          ],
          "suboptions": {}
        },
        "lenient_config_fields": {
          "aliases": [],
          "description": "Some fields used in the session configuration do not affect its function, and are sometimes auto-generated when not specified.\nTo avoid unnecessarily changing the configuration on each run, the values of these options will only be enforced when they are explicitly specified.",
          "default": "['guid', 'author', 'company_name', 'copyright', 'description']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "maximum_received_data_size_per_command_mb": {
          "aliases": [],
          "description": "Sets the maximum received data size per command in MB.\nMust fit into a double precision floating point value.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "maximum_received_object_size_mb": {
          "aliases": [],
          "description": "Sets the maximum object size in MB.\nMust fit into a double precision floating point value.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "modules_to_import": {
          "aliases": [],
          "description": "A list of modules that should be imported into the session.\nAny valid PowerShell module spec can be used here, so simple str names or dicts can be used.\nIf a dict is used, no snake_case conversion is done, so the original PowerShell names must be used.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "mount_user_drive": {
          "aliases": [],
          "description": "If C(yes) the session creates and mounts a user-specific PSDrive for use with file transfers.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the session configuration to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "powershell_version": {
          "aliases": [],
          "description": "The minimum required PowerShell version for this session.\nMust be a valid .Net System.Version string.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "processor_architecure": {
          "aliases": [],
          "description": "The processor architecture of the session (32 bit vs. 64 bit).",
          "type": "str",
          "required": false,
          "choices": [
            "amd64",
            "x86"
          ],
          "suboptions": {}
        },
        "required_groups": {
          "aliases": [],
          "description": "For JEA sessions, defines conditional access rules about which groups a connecting user must belong to.\nFor more information see U(https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/jea/session-configurations#conditional-access-rules).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "role_definitions": {
          "aliases": [],
          "description": "A dict defining the roles for JEA sessions.\nFor more information see U(https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/jea/session-configurations#role-definitions).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "run_as_credential_password": {
          "aliases": [],
          "description": "The password for I(run_as_credential_username).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "run_as_credential_username": {
          "aliases": [],
          "description": "Used to set a RunAs account for the session. All commands executed in the session will be run as this user.\nTo use a gMSA, see I(group_managed_service_account).\nTo use a virtual account, see I(run_as_virtual_account) and I(run_as_virtual_account_groups).\nStatus will always be C(changed) when a RunAs credential is set because the password cannot be retrieved for comparison.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "run_as_virtual_account": {
          "aliases": [],
          "description": "If C(yes) the session runs as a virtual account.\nDo not use I(run_as_credential_username) and I(run_as_credential_password) to specify a virtual account.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "run_as_virtual_account_groups": {
          "aliases": [],
          "description": "If I(run_as_virtual_account=yes) this is a list of groups to add the virtual account to.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "schema_version": {
          "aliases": [],
          "description": "The schema version of the session configuration file.\nIf not set, a value will be generated automatically.\nMust be a valid .Net System.Version string.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "scripts_to_process": {
          "aliases": [],
          "description": "A list of paths to script files ending in C(.ps1) that should be applied to the session.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "security_descriptor_sddl": {
          "aliases": [],
          "description": "An SDDL string that controls which users and groups can connect to the session.\nIf I(role_definitions) is specified the security descriptor will be set based on that.\nIf this option is not specified the default security descriptor will be applied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_type": {
          "aliases": [],
          "description": "Controls what type of session this is.",
          "type": "str",
          "required": false,
          "choices": [
            "default",
            "empty",
            "restricted_remote_server"
          ],
          "suboptions": {}
        },
        "startup_script": {
          "aliases": [],
          "description": "A script that gets run on session startup.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The desired state of the configuration.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "thread_apartment_state": {
          "aliases": [],
          "description": "The apartment state for the PowerShell session.",
          "type": "str",
          "required": false,
          "choices": [
            "mta",
            "sta"
          ],
          "suboptions": {}
        },
        "thread_options": {
          "aliases": [],
          "description": "Sets thread options for the session.",
          "type": "str",
          "required": false,
          "choices": [
            "default",
            "reuse_thread",
            "use_current_thread",
            "use_new_thread"
          ],
          "suboptions": {}
        },
        "transcript_directory": {
          "aliases": [],
          "description": "Automatic session transcripts will be written to this directory.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "types_to_process": {
          "aliases": [],
          "description": "Paths to type definition files to process for each session.",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "use_shared_process": {
          "aliases": [],
          "description": "If C(yes) then the session shares a process for each session.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user_drive_maximum_size": {
          "aliases": [],
          "description": "The maximum size of the user drive in bytes.\nMust fit into an Int64.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "variable_definitions": {
          "aliases": [],
          "description": "A list of dicts where each elements defines a variable for each session.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "visible_aliases": {
          "aliases": [],
          "description": "The aliases that can be used in the session.\nFor more information see U(https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/jea/role-capabilities).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "visible_cmdlets": {
          "aliases": [],
          "description": "The cmdlets that can be used in the session.\nThe elements can be simple names or complex command specifications.\nFor more information see U(https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/jea/role-capabilities).",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "visible_external_commands": {
          "aliases": [],
          "description": "The external commands and scripts that can be used in the session.\nFor more information see U(https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/jea/role-capabilities).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "visible_functions": {
          "aliases": [],
          "description": "The functions that can be used in the session.\nThe elements can be simple names or complex command specifications.\nFor more information see U(https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/jea/role-capabilities).",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        }
      },
      "short_description": "Manage PSSession Configurations"
    },
    "examples": "\n- name: Register a session configuration that loads modules automatically\n  community.windows.win_pssession_configuration:\n    name: WebAdmin\n    modules_to_import:\n      - WebAdministration\n      - IISAdministration\n    description: This endpoint has IIS modules pre-loaded\n\n- name: Set up an admin endpoint with a restricted execution policy\n  community.windows.win_pssession_configuration:\n    name: GloboCorp.Admin\n    company_name: Globo Corp\n    description: Admin Endpoint\n    execution_policy: restricted\n\n- name: Create a complex JEA endpoint\n  community.windows.win_pssession_configuration:\n    name: RBAC.Endpoint\n    session_type: restricted_remote_server\n    run_as_virtual_account: True\n    transcript_directory: '\\\\server\\share\\Transcripts'\n    language_mode: no_language\n    execution_policy: restricted\n    role_definitions:\n      'CORP\\IT Support':\n        RoleCapabilities:\n          - PasswordResetter\n          - EmployeeOffboarder\n      'CORP\\Webhosts':\n        RoleCapabilities: IISAdmin\n    visible_functions:\n      - tabexpansion2\n      - help\n    visible_cmdlets:\n      - Get-Help\n      - Name: Get-Service\n        Parameters:\n          - Name: DependentServices\n          - Name: RequiredServices\n          - Name: Name\n            ValidateSet:\n              - WinRM\n              - W3SVC\n              - WAS\n    visible_aliases:\n      - gsv\n    state: present\n\n- name: Remove a session configuration\n  community.windows.win_pssession_configuration:\n    name: UnusedEndpoint\n    state: absent\n\n- name: Set a sessions configuration with tweaked async values\n  community.windows.win_pssession_configuration:\n    name: MySession\n    description: A sample session\n    async_timeout: 500\n    async_poll: 5\n"
  },
  "community.windows.win_rabbitmq_plugin": {
    "doc": {
      "description": "Manage RabbitMQ plugins.",
      "has_action": false,
      "options": {
        "names": {
          "aliases": [
            "name"
          ],
          "description": "Comma-separated list of plugin names.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_only": {
          "aliases": [],
          "description": "Only enable missing plugins.\nDoes not disable plugins that are not in the names list.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "prefix": {
          "aliases": [],
          "description": "Specify a custom install prefix to a Rabbit.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify if plugins are to be enabled or disabled.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage RabbitMQ plugins"
    },
    "examples": "\n- name: Enables the rabbitmq_management plugin\n  community.windows.win_rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n"
  },
  "community.windows.win_rds_cap": {
    "doc": {
      "description": "Creates, removes and configures a Remote Desktop connection authorization policy (RD CAP).\nA RD CAP allows you to specify the users who can connect to a Remote Desktop Gateway server.",
      "has_action": false,
      "options": {
        "allow_only_sdrts_servers": {
          "aliases": [],
          "description": "Specifies whether connections are allowed only to Remote Desktop Session Host servers that enforce Remote Desktop Gateway redirection policy.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "auth_method": {
          "aliases": [],
          "description": "Specifies how the RD Gateway server authenticates users.\nWhen a new CAP is created, the default value is C(password).",
          "type": "str",
          "required": false,
          "choices": [
            "both",
            "none",
            "password",
            "smartcard"
          ],
          "suboptions": {}
        },
        "computer_groups": {
          "aliases": [],
          "description": "A list of computer groups that is allowed to connect to the Remote Gateway server.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "idle_timeout": {
          "aliases": [],
          "description": "Specifies the time interval, in minutes, after which an idle session is disconnected.\nA value of zero disables idle timeout.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the connection authorization policy.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "order": {
          "aliases": [],
          "description": "Evaluation order of the policy.\nThe CAP in which I(order) is set to a value of '1' is evaluated first.\nBy default, a newly created CAP will take the first position.\nIf the given value exceed the total number of existing policies, the policy will take the last position but the evaluation order will be capped to this number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "redirect_clipboard": {
          "aliases": [],
          "description": "Allow clipboard redirection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "redirect_drives": {
          "aliases": [],
          "description": "Allow disk drive redirection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "redirect_pnp": {
          "aliases": [],
          "description": "Allow Plug and Play devices redirection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "redirect_printers": {
          "aliases": [],
          "description": "Allow printers redirection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "redirect_serial": {
          "aliases": [],
          "description": "Allow serial port redirection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "session_timeout": {
          "aliases": [],
          "description": "The maximum time, in minutes, that a session can be idle.\nA value of zero disables session timeout.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_timeout_action": {
          "aliases": [],
          "description": "The action the server takes when a session times out.\nC(disconnect): disconnect the session.\nC(reauth): silently reauthenticate and reauthorize the session.",
          "default": "disconnect",
          "type": "str",
          "required": false,
          "choices": [
            "disconnect",
            "reauth"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of connection authorization policy.\nIf C(absent) will ensure the policy is removed.\nIf C(present) will ensure the policy is configured and exists.\nIf C(enabled) will ensure the policy is configured, exists and enabled.\nIf C(disabled) will ensure the policy is configured, exists, but disabled.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "enabled",
            "disabled",
            "present"
          ],
          "suboptions": {}
        },
        "user_groups": {
          "aliases": [],
          "description": "A list of user groups that is allowed to connect to the Remote Gateway server.\nRequired when a new CAP is created.",
          "type": "list",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Windows Server 2008R2 (6.1) or higher.",
        "The Windows Feature \"RDS-Gateway\" must be enabled."
      ],
      "short_description": "Manage Connection Authorization Policies (CAP) on a Remote Desktop Gateway server"
    },
    "examples": "\n- name: Create a new RDS CAP with a 30 minutes timeout and clipboard redirection enabled\n  community.windows.win_rds_cap:\n    name: My CAP\n    user_groups:\n      - BUILTIN\\users\n    session_timeout: 30\n    session_timeout_action: disconnect\n    allow_only_sdrts_servers: yes\n    redirect_clipboard: yes\n    redirect_drives: no\n    redirect_printers: no\n    redirect_serial: no\n    redirect_pnp: no\n    state: enabled\n"
  },
  "community.windows.win_rds_rap": {
    "doc": {
      "description": "Creates, removes and configures a Remote Desktop resource authorization policy (RD RAP).\nA RD RAP allows you to specify the network resources (computers) that users can connect to remotely through a Remote Desktop Gateway server.",
      "has_action": false,
      "options": {
        "allowed_ports": {
          "aliases": [],
          "description": "List of port numbers through which connections are allowed for this policy.\nTo allow connections through any port, specify 'any'.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "computer_group": {
          "aliases": [],
          "description": "The computer group name that is associated with this resource authorization policy (RAP).\nThis is required when I(computer_group_type) is C(rdg_group) or C(ad_network_resource_group).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "computer_group_type": {
          "aliases": [],
          "description": "The computer group type:\nC(rdg_group): RD Gateway-managed group\nC(ad_network_resource_group): Active Directory Domain Services network resource group\nC(allow_any): Allow users to connect to any network resource.",
          "type": "str",
          "required": false,
          "choices": [
            "rdg_group",
            "ad_network_resource_group",
            "allow_any"
          ],
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Optional description of the resource authorization policy.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the resource authorization policy.",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of resource authorization policy.\nIf C(absent) will ensure the policy is removed.\nIf C(present) will ensure the policy is configured and exists.\nIf C(enabled) will ensure the policy is configured, exists and enabled.\nIf C(disabled) will ensure the policy is configured, exists, but disabled.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "disabled",
            "enabled",
            "present"
          ],
          "suboptions": {}
        },
        "user_groups": {
          "aliases": [],
          "description": "List of user groups that are associated with this resource authorization policy (RAP). A user must belong to one of these groups to access the RD Gateway server.\nRequired when a new RAP is created.",
          "type": "list",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Windows Server 2008R2 (6.1) or higher.",
        "The Windows Feature \"RDS-Gateway\" must be enabled."
      ],
      "short_description": "Manage Resource Authorization Policies (RAP) on a Remote Desktop Gateway server"
    },
    "examples": "\n- name: Create a new RDS RAP\n  community.windows.win_rds_rap:\n    name: My RAP\n    description: Allow all users to connect to any resource through ports 3389 and 3390\n    user_groups:\n      - BUILTIN\\users\n    computer_group_type: allow_any\n    allowed_ports:\n      - 3389\n      - 3390\n    state: enabled\n"
  },
  "community.windows.win_rds_settings": {
    "doc": {
      "description": "Configure general settings of a Remote Desktop Gateway server.",
      "has_action": false,
      "options": {
        "certificate_hash": {
          "aliases": [],
          "description": "Certificate hash (thumbprint) for the Remote Desktop Gateway server. The certificate hash is the unique identifier for the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enable_only_messaging_capable_clients": {
          "aliases": [],
          "description": "If enabled, only clients that support logon messages and administrator messages can connect.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "max_connections": {
          "aliases": [],
          "description": "The maximum number of connections allowed.\nIf set to C(0), no new connections are allowed.\nIf set to C(-1), the number of connections is unlimited.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssl_bridging": {
          "aliases": [],
          "description": "Specifies whether to use SSL Bridging.\nC(none): no SSL bridging.\nC(https_http): HTTPS-HTTP bridging.\nC(https_https): HTTPS-HTTPS bridging.",
          "type": "str",
          "required": false,
          "choices": [
            "https_http",
            "https_https",
            "none"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "Windows Server 2008R2 (6.1) or higher.",
        "The Windows Feature \"RDS-Gateway\" must be enabled."
      ],
      "short_description": "Manage main settings of a Remote Desktop Gateway server"
    },
    "examples": "\n- name: Configure the Remote Desktop Gateway\n  community.windows.win_rds_settings:\n    certificate_hash: B0D0FA8408FC67B230338FCA584D03792DA73F4C\n    max_connections: 50\n  notify:\n    - Restart TSGateway service\n"
  },
  "community.windows.win_region": {
    "doc": {
      "description": "Set the location settings of a Windows Server.\nSet the format settings of a Windows Server.\nSet the unicode language settings of a Windows Server.\nCopy across these settings to the default profile.",
      "has_action": false,
      "options": {
        "copy_settings": {
          "aliases": [],
          "description": "This will copy the current format and location values to new user profiles and the welcome screen. This will only run if C(location), C(format) or C(unicode_language) has resulted in a change. If this process runs then it will always result in a change.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "The language format to set for the current user, see U(https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx) for a list of culture names to use.\nThis needs to be set if C(location) or C(unicode_language) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [],
          "description": "The location to set for the current user, see U(https://msdn.microsoft.com/en-us/library/dd374073.aspx) for a list of GeoIDs you can use and what location it relates to.\nThis needs to be set if C(format) or C(unicode_language) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unicode_language": {
          "aliases": [],
          "description": "The unicode language format to set for all users, see U(https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx) for a list of culture names to use.\nThis needs to be set if C(location) or C(format) is not set. After setting this value a reboot is required for it to take effect.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Set the region and format settings"
    },
    "examples": "\n- name: Set the region format to English United States\n  community.windows.win_region:\n    format: en-US\n\n- name: Set the region format to English Australia and copy settings to new profiles\n  community.windows.win_region:\n    format: en-AU\n    copy_settings: yes\n\n- name: Set the location to United States\n  community.windows.win_region:\n    location: 244\n\n# Reboot when region settings change\n- name: Set the unicode language to English Great Britain, reboot if required\n  community.windows.win_region:\n    unicode_language: en-GB\n  register: result\n\n- ansible.windows.win_reboot:\n  when: result.restart_required\n\n# Reboot when format, location or unicode has changed\n- name: Set format, location and unicode to English Australia and copy settings, reboot if required\n  community.windows.win_region:\n    location: 12\n    format: en-AU\n    unicode_language: en-AU\n  register: result\n\n- ansible.windows.win_reboot:\n  when: result.restart_required\n"
  },
  "community.windows.win_regmerge": {
    "doc": {
      "description": "Wraps the reg.exe command to import the contents of a registry file.\nSuitable for use with registry files created using M(ansible.windows.win_template).\nWindows registry files have a specific format and must be constructed correctly with carriage return and line feed line endings otherwise they will not be merged.\nExported registry files often start with a Byte Order Mark which must be removed if the file is to templated using M(ansible.windows.win_template).\nRegistry file format is described at U(https://support.microsoft.com/en-us/kb/310516)\nSee also M(ansible.windows.win_template), M(ansible.windows.win_regedit)",
      "has_action": false,
      "notes": "Organise your registry files so that they contain a single root registry key if you want to use the compare_to functionality.\nThis module does not force registry settings to be in the state described in the file.  If registry settings have been modified externally the module will merge the contents of the file but continue to report differences on subsequent runs.\nTo force registry change, use M(ansible.windows.win_regedit) with C(state=absent) before using C(community.windows.win_regmerge).",
      "options": {
        "compare_key": {
          "aliases": [],
          "description": "The parent key to use when comparing the contents of the registry to the contents of the file.  Needs to be in HKLM or HKCU part of registry. Use a PS-Drive style path for example HKLM:\\SOFTWARE not HKEY_LOCAL_MACHINE\\SOFTWARE If not supplied, or the registry key is not found, no comparison will be made, and the module will report changed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The full path including file name to the registry file on the remote machine to be merged",
          "type": "path",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Merges the contents of a registry file into the Windows registry"
    },
    "examples": "\n- name: Merge in a registry file without comparing to current registry\n  community.windows.win_regmerge:\n    path: C:\\autodeploy\\myCompany-settings.reg\n\n- name: Compare and merge registry file\n  community.windows.win_regmerge:\n    path: C:\\autodeploy\\myCompany-settings.reg\n    compare_to: HKLM:\\SOFTWARE\\myCompany\n"
  },
  "community.windows.win_robocopy": {
    "doc": {
      "description": "Synchronizes the contents of files/directories from a source to destination.\nUnder the hood this just calls out to RoboCopy, since that should be available on most modern Windows systems.",
      "has_action": false,
      "notes": "This is not a complete port of the M(ansible.posix.synchronize) module. Unlike the M(ansible.posix.synchronize) module this only performs the sync/copy on the remote machine, not from the Ansible controller to the remote machine.\nThis module does not currently support all Robocopy flags.",
      "options": {
        "dest": {
          "aliases": [],
          "description": "Destination file/directory to sync (Will receive contents of src).",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "flags": {
          "aliases": [],
          "description": "Directly supply Robocopy flags.\nIf set, C(purge) and C(recurse) will be ignored.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Deletes any files/directories found in the destination that do not exist in the source.\nToggles the C(/purge) flag to RoboCopy.\nIf C(flags) is set, this will be ignored.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "recurse": {
          "aliases": [],
          "description": "Includes all subdirectories (Toggles the C(/e) flag to RoboCopy).\nIf C(flags) is set, this will be ignored.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Source file/directory to sync.",
          "type": "path",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Synchronizes the contents of two directories using Robocopy"
    },
    "examples": "\n- name: Sync the contents of one directory to another\n  community.windows.win_robocopy:\n    src: C:\\DirectoryOne\n    dest: C:\\DirectoryTwo\n\n- name: Sync the contents of one directory to another, including subdirectories\n  community.windows.win_robocopy:\n    src: C:\\DirectoryOne\n    dest: C:\\DirectoryTwo\n    recurse: yes\n\n- name: Sync the contents of one directory to another, and remove any files/directories found in destination that do not exist in the source\n  community.windows.win_robocopy:\n    src: C:\\DirectoryOne\n    dest: C:\\DirectoryTwo\n    purge: yes\n\n- name: Sync content in recursive mode, removing any files/directories found in destination that do not exist in the source\n  community.windows.win_robocopy:\n    src: C:\\DirectoryOne\n    dest: C:\\DirectoryTwo\n    recurse: yes\n    purge: yes\n\n- name: Sync two directories in recursive and purging mode, specifying additional special flags\n  community.windows.win_robocopy:\n    src: C:\\DirectoryOne\n    dest: C:\\DirectoryTwo\n    flags: /E /PURGE /XD SOME_DIR /XF SOME_FILE /MT:32\n\n- name: Sync one file from a remote UNC path in recursive and purging mode, specifying additional special flags\n  community.windows.win_robocopy:\n    src: \\\\Server1\\Directory One\n    dest: C:\\DirectoryTwo\n    flags: file.zip /E /PURGE /XD SOME_DIR /XF SOME_FILE /MT:32\n"
  },
  "community.windows.win_route": {
    "doc": {
      "description": "Add or remove a static route.",
      "has_action": false,
      "notes": "Works only with Windows 2012 R2 and newer.",
      "options": {
        "destination": {
          "aliases": [],
          "description": "Destination IP address in CIDR format (ip address/prefix length).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "gateway": {
          "aliases": [],
          "description": "The gateway used by the static route.\nIf C(gateway) is not provided it will be set to C(0.0.0.0).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "metric": {
          "aliases": [],
          "description": "Metric used by the static route.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(absent), it removes a network static route.\nIf C(present), it adds a network static route.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Add or remove a static route"
    },
    "examples": "\n---\n- name: Add a network static route\n  community.windows.win_route:\n    destination: 192.168.2.10/32\n    gateway: 192.168.1.1\n    metric: 1\n    state: present\n\n- name: Remove a network static route\n  community.windows.win_route:\n    destination: 192.168.2.10/32\n    state: absent\n"
  },
  "community.windows.win_say": {
    "doc": {
      "description": "Uses .NET libraries to convert text to speech and optionally play .wav sounds.  Audio Service needs to be running and some kind of speakers or headphones need to be attached to the windows target(s) for the speech to be audible.",
      "has_action": false,
      "notes": "Needs speakers or headphones to do anything useful.\nTo find which voices are installed, run the following Powershell commands.\n\n            Add-Type -AssemblyName System.Speech\n            $speech = New-Object -TypeName System.Speech.Synthesis.SpeechSynthesizer\n            $speech.GetInstalledVoices() | ForEach-Object { $_.VoiceInfo }\n            $speech.Dispose()\n\nSpeech can be surprisingly slow, so it's best to keep message text short.",
      "options": {
        "end_sound_path": {
          "aliases": [],
          "description": "Full path to a C(.wav) file containing a sound to play after the text has been spoken.\nUseful on conference calls to alert other speakers that ansible has finished speaking.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The text to be spoken.\nUse either C(msg) or C(msg_file).\nOptional so that you can use this module just to play sounds.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg_file": {
          "aliases": [],
          "description": "Full path to a windows format text file containing the text to be spoken.\nUse either C(msg) or C(msg_file).\nOptional so that you can use this module just to play sounds.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "speech_speed": {
          "aliases": [],
          "description": "How fast or slow to speak the text.\nMust be an integer value in the range -10 to 10.\n-10 is slowest, 10 is fastest.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "start_sound_path": {
          "aliases": [],
          "description": "Full path to a C(.wav) file containing a sound to play before the text is spoken.\nUseful on conference calls to alert other speakers that ansible has something to say.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "voice": {
          "aliases": [],
          "description": "Which voice to use. See notes for how to discover installed voices.\nIf the requested voice is not available the default voice will be used. Example voice names from Windows 10 are C(Microsoft Zira Desktop) and C(Microsoft Hazel Desktop).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Text to speech module for Windows to speak messages and optionally play sounds"
    },
    "examples": "\n- name: Warn of impending deployment\n  community.windows.win_say:\n    msg: Warning, deployment commencing in 5 minutes, please log out.\n\n- name: Using a different voice and a start sound\n  community.windows.win_say:\n    start_sound_path: C:\\Windows\\Media\\ding.wav\n    msg: Warning, deployment commencing in 5 minutes, please log out.\n    voice: Microsoft Hazel Desktop\n\n- name: With start and end sound\n  community.windows.win_say:\n    start_sound_path: C:\\Windows\\Media\\Windows Balloon.wav\n    msg: New software installed\n    end_sound_path: C:\\Windows\\Media\\chimes.wav\n\n- name: Text from file example\n  community.windows.win_say:\n    start_sound_path: C:\\Windows\\Media\\Windows Balloon.wav\n    msg_file: AppData\\Local\\Temp\\morning_report.txt\n    end_sound_path: C:\\Windows\\Media\\chimes.wav\n"
  },
  "community.windows.win_scheduled_task": {
    "doc": {
      "description": "Creates/modifies or removes Windows scheduled tasks.",
      "has_action": false,
      "notes": "The option names and structure for actions and triggers of a service follow the C(RegisteredTask) naming standard and requirements, it would be useful to read up on this guide if coming across any issues U(https://msdn.microsoft.com/en-us/library/windows/desktop/aa382542.aspx).\nA Group Managed Service Account (gMSA) can be used by setting C(logon_type) to C(password) and omitting the password parameter. For more information on gMSAs, see U(https://techcommunity.microsoft.com/t5/Core-Infrastructure-and-Security/Windows-Server-2012-Group-Managed-Service-Accounts/ba-p/255910)",
      "options": {
        "actions": {
          "aliases": [],
          "description": "A list of action to configure for the task.\nSee suboptions for details on how to construct each list entry.\nWhen creating a task there MUST be at least one action but when deleting a task this can be a null or an empty list.\nThe ordering of this list is important, the module will ensure the order is kept when modifying the task.\nThis module only supports the C(ExecAction) type but can still delete the older legacy types.",
          "type": "list",
          "required": false,
          "suboptions": {
            "arguments": {
              "aliases": [],
              "description": "An argument string to supply for the executable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "path": {
              "aliases": [],
              "description": "The path to the executable for the ExecAction.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "working_directory": {
              "aliases": [],
              "description": "The working directory to run the executable from.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "allow_demand_start": {
          "aliases": [],
          "description": "Whether the task can be started by using either the Run command or the Context menu.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allow_hard_terminate": {
          "aliases": [],
          "description": "Whether the task can be terminated by using TerminateProcess.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "author": {
          "aliases": [],
          "description": "The author of the task.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "compatibility": {
          "aliases": [],
          "description": "The integer value with indicates which version of Task Scheduler a task is compatible with.\nC(0) means the task is compatible with the AT command.\nC(1) means the task is compatible with Task Scheduler 1.0(Windows Vista, Windows Server 2008 and older).\nC(2) means the task is compatible with Task Scheduler 2.0(Windows Vista, Windows Server 2008).\nC(3) means the task is compatible with Task Scheduler 2.0(Windows 7, Windows Server 2008 R2).\nC(4) means the task is compatible with Task Scheduler 2.0(Windows 10, Windows Server 2016, Windows Server 2019).",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "suboptions": {}
        },
        "date": {
          "aliases": [],
          "description": "The date when the task was registered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "delete_expired_task_after": {
          "aliases": [],
          "description": "The amount of time that the Task Scheduler will wait before deleting the task after it expires.\nA task expires after the end_boundary has been exceeded for all triggers associated with the task.\nThis is in the ISO 8601 Duration format C(P[n]Y[n]M[n]DT[n]H[n]M[n]S).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the task.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disallow_start_if_on_batteries": {
          "aliases": [],
          "description": "Whether the task will not be started if the computer is running on battery power.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [],
          "description": "The name of the user/group that is displayed in the Task Scheduler UI.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Whether the task is enabled, the task can only run when C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "execution_time_limit": {
          "aliases": [],
          "description": "The amount of time allowed to complete the task.\nWhen set to `PT0S`, the time limit is infinite.\nWhen omitted, the default time limit is 72 hours.\nThis is in the ISO 8601 Duration format C(P[n]Y[n]M[n]DT[n]H[n]M[n]S).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "The group that will run the task.\nC(group) and C(username) are exclusive to each other and cannot be set at the same time.\nC(logon_type) can either be not set or equal C(group).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hidden": {
          "aliases": [],
          "description": "Whether the task will be hidden in the UI.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "logon_type": {
          "aliases": [],
          "description": "The logon method that the task will run with.\nC(password) means the password will be stored and the task has access to network resources.\nC(s4u) means the existing token will be used to run the task and no password will be stored with the task. Means no network or encrypted files access.\nC(interactive_token) means the user must already be logged on interactively and will run in an existing interactive session.\nC(group) means that the task will run as a group.\nC(service_account) means that a service account like System, Local Service or Network Service will run the task.",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "password",
            "s4u",
            "interactive_token",
            "group",
            "service_account",
            "token_or_password"
          ],
          "suboptions": {}
        },
        "multiple_instances": {
          "aliases": [],
          "description": "An integer that indicates the behaviour when starting a task that is already running.\nC(0) will start a new instance in parallel with existing instances of that task.\nC(1) will wait until other instances of that task to finish running before starting itself.\nC(2) will not start a new instance if another is running.\nC(3) will stop other instances of the task and start the new one.",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the scheduled task without the path.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password for the user account to run the scheduled task as.\nThis is required when running a task without the user being logged in, excluding the builtin service accounts and Group Managed Service Accounts (gMSA).\nIf set, will always result in a change unless C(update_password) is set to C(no) and no other changes are required for the service.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Task folder in which this task will be stored.\nWill create the folder when C(state=present) and the folder does not already exist.\nWill remove the folder when C(state=absent) and there are no tasks left in the folder.",
          "default": "\\",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "The priority level (0-10) of the task.\nWhen creating a new task the default is C(7).\nSee U(https://msdn.microsoft.com/en-us/library/windows/desktop/aa383512.aspx) for details on the priority levels.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "restart_count": {
          "aliases": [],
          "description": "The number of times that the Task Scheduler will attempt to restart the task.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "restart_interval": {
          "aliases": [],
          "description": "How long the Task Scheduler will attempt to restart the task.\nIf this is set then C(restart_count) must also be set.\nThe maximum allowed time is 31 days.\nThe minimum allowed time is 1 minute.\nThis is in the ISO 8601 Duration format C(P[n]Y[n]M[n]DT[n]H[n]M[n]S).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "run_level": {
          "aliases": [
            "runlevel"
          ],
          "description": "The level of user rights used to run the task.\nIf not specified the task will be created with limited rights.",
          "type": "str",
          "required": false,
          "choices": [
            "limited",
            "highest"
          ],
          "suboptions": {}
        },
        "run_only_if_idle": {
          "aliases": [],
          "description": "Whether the task will run the task only if the computer is in an idle state.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "run_only_if_network_available": {
          "aliases": [],
          "description": "Whether the task will run only when a network is available.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The source of the task.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_when_available": {
          "aliases": [],
          "description": "Whether the task can start at any time after its scheduled time has passed.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When C(state=present) will ensure the task exists.\nWhen C(state=absent) will ensure the task does not exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "stop_if_going_on_batteries": {
          "aliases": [],
          "description": "Whether the task will be stopped if the computer begins to run on battery power.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "triggers": {
          "aliases": [],
          "description": "A list of triggers to configure for the task.\nSee suboptions for details on how to construct each list entry.\nThe ordering of this list is important, the module will ensure the order is kept when modifying the task.\nThere are multiple types of triggers, see U(https://msdn.microsoft.com/en-us/library/windows/desktop/aa383868.aspx) for a list of trigger types and their options.\nThe suboption options listed below are not required for all trigger types, read the description for more details.",
          "type": "list",
          "required": false,
          "suboptions": {
            "days_of_month": {
              "aliases": [],
              "description": "The days of the month from 1 to 31 for the triggers.\nIf you wish to set the trigger for the last day of any month use C(run_on_last_day_of_month).\nCan be a list or comma separated string of day numbers.\nRequired when C(type=monthly).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "days_of_week": {
              "aliases": [],
              "description": "The days of the week for the trigger.\nCan be a list or comma separated string of full day names e.g. monday instead of mon.\nRequired when C(type) is C(weekly).\nOptional when C(type=monthlydow).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "delay": {
              "aliases": [],
              "description": "The time to delay the task from running once the trigger has been fired.\nOptional when C(type) is C(boot), C(event), C(logon), C(registration), C(session_state_change).\nIs in the ISO 8601 Duration format C(P[n]Y[n]M[n]DT[n]H[n]M[n]S).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Whether to set the trigger to enabled or disabled\nUsed in all trigger types.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "end_boundary": {
              "aliases": [],
              "description": "The end time for when the trigger is deactivated.\nThis is in ISO 8601 DateTime format C(YYYY-MM-DDThh:mm:ss).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "execution_time_limit": {
              "aliases": [],
              "description": "The maximum amount of time that the task is allowed to run for.\nOptional for all the trigger types.\nIs in the ISO 8601 Duration format C(P[n]Y[n]M[n]DT[n]H[n]M[n]S).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "months_of_year": {
              "aliases": [],
              "description": "The months of the year for the trigger.\nCan be a list or comma separated string of full month names e.g. march instead of mar.\nOptional when C(type) is C(monthlydow), C(monthly).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "random_delay": {
              "aliases": [],
              "description": "The delay time that is randomly added to the start time of the trigger.\nOptional when C(type) is C(daily), C(monthlydow), C(monthly), C(time), C(weekly).\nIs in the ISO 8601 Duration format C(P[n]Y[n]M[n]DT[n]H[n]M[n]S).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "repetition": {
              "aliases": [],
              "description": "Allows you to define the repetition action of the trigger that defines how often the task is run and how long the repetition pattern is repeated after the task is started.\nIt takes in the following keys, C(duration), C(interval), C(stop_at_duration_end)",
              "required": false,
              "suboptions": {
                "duration": {
                  "aliases": [],
                  "description": "Defines how long the pattern is repeated.\nThe value is in the ISO 8601 Duration format C(P[n]Y[n]M[n]DT[n]H[n]M[n]S).\nBy default this is not set which means it will repeat indefinitely.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "interval": {
                  "aliases": [],
                  "description": "The amount of time between each restart of the task.\nThe value is written in the ISO 8601 Duration format C(P[n]Y[n]M[n]DT[n]H[n]M[n]S).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "stop_at_duration_end": {
                  "aliases": [],
                  "description": "Whether a running instance of the task is stopped at the end of the repetition pattern.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "run_on_last_day_of_month": {
              "aliases": [],
              "description": "Boolean value that sets whether the task runs on the last day of the month.\nOptional when C(type) is C(monthly).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "run_on_last_week_of_month": {
              "aliases": [],
              "description": "Boolean value that sets whether the task runs on the last week of the month.\nOptional when C(type) is C(monthlydow).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "start_boundary": {
              "aliases": [],
              "description": "The start time for the task, even if the trigger meets the other start criteria, it won't start until this time is met.\nIf you wish to run a task at 9am on a day you still need to specify the date on which the trigger is activated, you can set any date even ones in the past.\nRequired when C(type) is C(daily), C(monthlydow), C(monthly), C(time), C(weekly).\nOptional for the rest of the trigger types.\nThis is in ISO 8601 DateTime format C(YYYY-MM-DDThh:mm:ss).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state_change": {
              "aliases": [],
              "description": "Allows you to define the kind of Terminal Server session change that triggers a task.\nOptional when C(type=session_state_change)",
              "type": "str",
              "required": false,
              "choices": [
                "console_connect",
                "console_disconnect",
                "remote_connect",
                "remote_disconnect",
                "session_lock",
                "session_unlock"
              ],
              "version_added": "1.6.0",
              "suboptions": {}
            },
            "subscription": {
              "aliases": [],
              "description": "Only used and is required for C(type=event).\nThe XML query string that identifies the event that fires the trigger.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The trigger type, this value controls what below options are required.",
              "type": "str",
              "required": true,
              "choices": [
                "boot",
                "daily",
                "event",
                "idle",
                "logon",
                "monthlydow",
                "monthly",
                "registration",
                "time",
                "weekly",
                "session_state_change"
              ],
              "suboptions": {}
            },
            "user_id": {
              "aliases": [],
              "description": "The username that the trigger will target.\nOptional when C(type) is C(logon), C(session_state_change).\nCan be the username or SID of a user.\nWhen C(type=logon) and you want the trigger to fire when a user in a group logs on, leave this as null and set C(group) to the group you wish to trigger.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "weeks_interval": {
              "aliases": [],
              "description": "The interval of weeks to run on, e.g. C(1) means every week while C(2) means every other week.\nOptional when C(type=weekly).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "weeks_of_month": {
              "aliases": [],
              "description": "The weeks of the month for the trigger.\nCan be a list or comma separated string of the numbers 1 to 4 representing the first to 4th week of the month.\nOptional when C(type=monthlydow).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "update_password": {
          "aliases": [],
          "description": "Whether to update the password even when not other changes have occurred.\nWhen C(yes) will always result in a change when executing the module.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "user"
          ],
          "description": "The user to run the scheduled task as.\nWill default to the current user under an interactive token if not specified during creation.\nThe user account specified must have the C(SeBatchLogonRight) logon right which can be added with M(ansible.windows.win_user_right).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The version number of the task.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wake_to_run": {
          "aliases": [],
          "description": "Whether the task will wake the computer when it is time to run the task.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage scheduled tasks"
    },
    "examples": "\n- name: Create a task to open 2 command prompts as SYSTEM\n  community.windows.win_scheduled_task:\n    name: TaskName\n    description: open command prompt\n    actions:\n    - path: cmd.exe\n      arguments: /c hostname\n    - path: cmd.exe\n      arguments: /c whoami\n    triggers:\n    - type: daily\n      start_boundary: '2017-10-09T09:00:00'\n    username: SYSTEM\n    state: present\n    enabled: yes\n\n- name: Create task to run a PS script as NETWORK service on boot\n  community.windows.win_scheduled_task:\n    name: TaskName2\n    description: Run a PowerShell script\n    actions:\n    - path: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n      arguments: -ExecutionPolicy Unrestricted -NonInteractive -File C:\\TestDir\\Test.ps1\n    triggers:\n    - type: boot\n    username: NETWORK SERVICE\n    run_level: highest\n    state: present\n\n- name: Update Local Security Policy to allow users to run scheduled tasks\n  ansible.windows.win_user_right:\n    name: SeBatchLogonRight\n    users:\n    - LocalUser\n    - DOMAIN\\NetworkUser\n    action: add\n\n- name: Change above task to run under a domain user account, storing the passwords\n  community.windows.win_scheduled_task:\n    name: TaskName2\n    username: DOMAIN\\User\n    password: Password\n    logon_type: password\n\n- name: Change the above task again, choosing not to store the password\n  community.windows.win_scheduled_task:\n    name: TaskName2\n    username: DOMAIN\\User\n    logon_type: s4u\n\n- name: Change above task to use a gMSA, where the password is managed automatically\n  community.windows.win_scheduled_task:\n    name: TaskName2\n    username: DOMAIN\\gMsaSvcAcct$\n    logon_type: password\n\n- name: Create task with multiple triggers\n  community.windows.win_scheduled_task:\n    name: TriggerTask\n    path: \\Custom\n    actions:\n    - path: cmd.exe\n    triggers:\n    - type: daily\n    - type: monthlydow\n    username: SYSTEM\n\n- name: Set logon type to password but don't force update the password\n  community.windows.win_scheduled_task:\n    name: TriggerTask\n    path: \\Custom\n    actions:\n    - path: cmd.exe\n    username: Administrator\n    password: password\n    update_password: no\n\n- name: Disable a task that already exists\n  community.windows.win_scheduled_task:\n    name: TaskToDisable\n    enabled: no\n\n- name: Create a task that will be repeated every minute for five minutes\n  community.windows.win_scheduled_task:\n    name: RepeatedTask\n    description: open command prompt\n    actions:\n    - path: cmd.exe\n      arguments: /c hostname\n    triggers:\n    - type: registration\n      repetition:\n        interval: PT1M\n        duration: PT5M\n        stop_at_duration_end: yes\n\n- name: Create task to run a PS script in Windows 10 compatibility on boot with a delay of 1min\n  community.windows.win_scheduled_task:\n    name: TriggerTask\n    path: \\Custom\n    actions:\n    - path: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n      arguments: -ExecutionPolicy Unrestricted -NonInteractive -File C:\\TestDir\\Test.ps1\n    triggers:\n    - type: boot\n      delay: PT1M\n    username: SYSTEM\n    compatibility: 4\n"
  },
  "community.windows.win_scheduled_task_stat": {
    "doc": {
      "description": "Will return whether the folder and task exists.\nReturns the names of tasks in the folder specified.\nUse M(community.windows.win_scheduled_task) to configure a scheduled task.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "The name of the scheduled task to get information for.\nIf C(name) is set and exists, will return information on the task itself.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The folder path where the task lives.",
          "default": "\\",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Get information about Windows Scheduled Tasks"
    },
    "examples": "\n- name: Get information about a folder\n  community.windows.win_scheduled_task_stat:\n    path: \\folder name\n  register: task_folder_stat\n\n- name: Get information about a task in the root folder\n  community.windows.win_scheduled_task_stat:\n    name: task name\n  register: task_stat\n\n- name: Get information about a task in a custom folder\n  community.windows.win_scheduled_task_stat:\n    path: \\folder name\n    name: task name\n  register: task_stat\n"
  },
  "community.windows.win_scoop": {
    "doc": {
      "description": "Manage packages using Scoop.\nIf Scoop is missing from the system, the module will install it.",
      "has_action": false,
      "options": {
        "architecture": {
          "aliases": [
            "arch"
          ],
          "description": "Force Scoop to install the package of a specific process architecture.",
          "type": "str",
          "required": false,
          "choices": [
            "32bit",
            "64bit"
          ],
          "suboptions": {}
        },
        "global": {
          "aliases": [],
          "description": "Install the app globally",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "independent": {
          "aliases": [],
          "description": "Don't install dependencies automatically",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the package(s) to be installed.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "no_cache": {
          "aliases": [],
          "description": "Don't use the download cache",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "Remove all persistent data",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "skip_checksum": {
          "aliases": [],
          "description": "Skip hash validation",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the package on the system.\nWhen C(absent), will ensure the package is not installed.\nWhen C(present), will ensure the package is installed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage packages using Scoop"
    },
    "examples": "\n- name: Install jq.\n  community.windows.win_scoop:\n    name: jq\n"
  },
  "community.windows.win_scoop_bucket": {
    "doc": {
      "description": "Manage Scoop buckets",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "Name of the Scoop bucket.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "repo": {
          "aliases": [],
          "description": "Git repository that contains the scoop bucket",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the Scoop bucket.\nWhen C(absent), will ensure the package is not installed.\nWhen C(present), will ensure the package is installed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "git"
      ],
      "short_description": "Manage Scoop buckets",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Add the extras bucket\n  community.windows.win_scoop_bucket:\n    name: extras\n\n- name: Remove the versions bucket\n  community.windows.win_scoop_bucket:\n    name: versions\n    state: absent\n\n- name: Add a custom bucket\n  community.windows.win_scoop_bucket:\n    name: my-bucket\n    repo: https://github.com/example/my-bucket\n"
  },
  "community.windows.win_security_policy": {
    "doc": {
      "description": "Allows you to set the local security policies that are configured by SecEdit.exe.",
      "has_action": false,
      "notes": "This module uses the SecEdit.exe tool to configure the values, more details of the areas and keys that can be configured can be found here U(https://msdn.microsoft.com/en-us/library/bb742512.aspx).\nIf you are in a domain environment these policies may be set by a GPO policy, this module can temporarily change these values but the GPO will override it if the value differs.\nYou can also run C(SecEdit.exe /export /cfg C:\\temp\\output.ini) to view the current policies set on your system.\nWhen assigning user rights, use the M(ansible.windows.win_user_right) module instead.",
      "options": {
        "key": {
          "aliases": [],
          "description": "The ini key of the section or policy name to modify.\nThe module will return an error if this key is invalid.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "section": {
          "aliases": [],
          "description": "The ini section the key exists in.\nIf the section does not exist then the module will return an error.\nExample sections to use are 'Account Policies', 'Local Policies', 'Event Log', 'Restricted Groups', 'System Services', 'Registry' and 'File System'\nIf wanting to edit the C(Privilege Rights) section, use the M(ansible.windows.win_user_right) module instead.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "The value for the ini key or policy name.\nIf the key takes in a boolean value then 0 = False and 1 = True.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Change local security policy settings"
    },
    "examples": "\n- name: Change the guest account name\n  community.windows.win_security_policy:\n    section: System Access\n    key: NewGuestName\n    value: Guest Account\n\n- name: Set the maximum password age\n  community.windows.win_security_policy:\n    section: System Access\n    key: MaximumPasswordAge\n    value: 15\n\n- name: Do not store passwords using reversible encryption\n  community.windows.win_security_policy:\n    section: System Access\n    key: ClearTextPassword\n    value: 0\n\n- name: Enable system events\n  community.windows.win_security_policy:\n    section: Event Audit\n    key: AuditSystemEvents\n    value: 1\n"
  },
  "community.windows.win_shortcut": {
    "doc": {
      "description": "Create, manage and delete Windows shortcuts",
      "has_action": false,
      "notes": "The following options can include Windows environment variables: C(dest), C(args), C(description), C(dest), C(directory), C(icon) C(src)\nWindows has two types of shortcuts: Application and URL shortcuts. URL shortcuts only consists of C(dest) and C(src)",
      "options": {
        "arguments": {
          "aliases": [
            "args"
          ],
          "description": "Additional arguments for the executable defined in C(src).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description for the shortcut.\nThis is usually shown when hoovering the icon.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Destination file for the shortcuting file.\nFile name should have a C(.lnk) or C(.url) extension.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "directory": {
          "aliases": [],
          "description": "Working directory for executable defined in C(src).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "hotkey": {
          "aliases": [],
          "description": "Key combination for the shortcut.\nThis is a combination of one or more modifiers and a key.\nPossible modifiers are Alt, Ctrl, Shift, Ext.\nPossible keys are [A-Z] and [0-9].",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "icon": {
          "aliases": [],
          "description": "Icon used for the shortcut.\nFile name should have a C(.ico) extension.\nThe file name is followed by a comma and the number in the library file (.dll) or use 0 for an image file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "run_as_admin": {
          "aliases": [],
          "description": "When C(src) is an executable, this can control whether the shortcut will be opened as an administrator or not.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "Executable or URL the shortcut points to.\nThe executable needs to be in your PATH, or has to be an absolute path to the executable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When C(absent), removes the shortcut if it exists.\nWhen C(present), creates or updates the shortcut.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "windowstyle": {
          "aliases": [],
          "description": "Influences how the application is displayed when it is launched.",
          "type": "str",
          "required": false,
          "choices": [
            "maximized",
            "minimized",
            "normal"
          ],
          "suboptions": {}
        }
      },
      "short_description": "Manage shortcuts on Windows"
    },
    "examples": "\n- name: Create an application shortcut on the desktop\n  community.windows.win_shortcut:\n    src: C:\\Program Files\\Mozilla Firefox\\Firefox.exe\n    dest: C:\\Users\\Public\\Desktop\\Mozilla Firefox.lnk\n    icon: C:\\Program Files\\Mozilla Firefox\\Firefox.exe,0\n\n- name: Create the same shortcut using environment variables\n  community.windows.win_shortcut:\n    description: The Mozilla Firefox web browser\n    src: '%ProgramFiles%\\Mozilla Firefox\\Firefox.exe'\n    dest: '%Public%\\Desktop\\Mozilla Firefox.lnk'\n    icon: '%ProgramFiles\\Mozilla Firefox\\Firefox.exe,0'\n    directory: '%ProgramFiles%\\Mozilla Firefox'\n    hotkey: Ctrl+Alt+F\n\n- name: Create an application shortcut for an executable in PATH to your desktop\n  community.windows.win_shortcut:\n    src: cmd.exe\n    dest: Desktop\\Command prompt.lnk\n\n- name: Create an application shortcut for the Ansible website\n  community.windows.win_shortcut:\n    src: '%ProgramFiles%\\Google\\Chrome\\Application\\chrome.exe'\n    dest: '%UserProfile%\\Desktop\\Ansible website.lnk'\n    arguments: --new-window https://ansible.com/\n    directory: '%ProgramFiles%\\Google\\Chrome\\Application'\n    icon: '%ProgramFiles%\\Google\\Chrome\\Application\\chrome.exe,0'\n    hotkey: Ctrl+Alt+A\n\n- name: Create a URL shortcut for the Ansible website\n  community.windows.win_shortcut:\n    src: https://ansible.com/\n    dest: '%Public%\\Desktop\\Ansible website.url'\n"
  },
  "community.windows.win_snmp": {
    "doc": {
      "description": "This module configures the Windows SNMP service.",
      "has_action": false,
      "options": {
        "action": {
          "aliases": [],
          "description": "C(add) will add new SNMP community strings and/or SNMP managers\nC(set) will replace SNMP community strings and/or SNMP managers. An empty list for either C(community_strings) or C(permitted_managers) will result in the respective lists being removed entirely.\nC(remove) will remove SNMP community strings and/or SNMP managers",
          "default": "set",
          "type": "str",
          "required": false,
          "choices": [
            "add",
            "set",
            "remove"
          ],
          "suboptions": {}
        },
        "community_strings": {
          "aliases": [],
          "description": "The list of read-only SNMP community strings.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "permitted_managers": {
          "aliases": [],
          "description": "The list of permitted SNMP managers.",
          "type": "list",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Configures the Windows SNMP service"
    },
    "examples": "\n- name: Replace SNMP communities and managers\n  community.windows.win_snmp:\n    community_strings:\n    - public\n    permitted_managers:\n    - 192.168.1.2\n    action: set\n\n- name: Replace SNMP communities and clear managers\n  community.windows.win_snmp:\n    community_strings:\n    - public\n    permitted_managers: []\n    action: set\n"
  },
  "community.windows.win_timezone": {
    "doc": {
      "description": "Sets machine time to the specified timezone.",
      "has_action": false,
      "notes": "The module will check if the provided timezone is supported on the machine.\nA list of possible timezones is available from C(tzutil.exe /l) and from U(https://msdn.microsoft.com/en-us/library/ms912391.aspx)\nIf running on Server 2008 the hotfix U(https://support.microsoft.com/en-us/help/2556308/tzutil-command-line-tool-is-added-to-windows-vista-and-to-windows-server-2008) needs to be installed to be able to run this module.",
      "options": {
        "timezone": {
          "aliases": [],
          "description": "Timezone to set to.\nExample: Central Standard Time\nTo disable Daylight Saving time, add the suffix C(_dstoff) on timezones that support this.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Sets Windows machine timezone"
    },
    "examples": "\n- name: Set timezone to 'Romance Standard Time' (GMT+01:00)\n  community.windows.win_timezone:\n    timezone: Romance Standard Time\n\n- name: Set timezone to 'GMT Standard Time' (GMT)\n  community.windows.win_timezone:\n    timezone: GMT Standard Time\n\n- name: Set timezone to 'Central Standard Time' (GMT-06:00)\n  community.windows.win_timezone:\n    timezone: Central Standard Time\n\n- name: Set timezime to Pacific Standard time and disable Daylight Saving time adjustments\n  community.windows.win_timezone:\n    timezone: Pacific Standard Time_dstoff\n"
  },
  "community.windows.win_toast": {
    "doc": {
      "description": "Sends alerts which appear in the Action Center area of the windows desktop.",
      "has_action": false,
      "notes": "This module must run on a windows 10 or Server 2016 host, so ensure your play targets windows hosts, or delegates to a windows host.\nThe module does not fail if there are no logged in users to notify.\nMessages are only sent to the local host where the module is run.\nYou must run this module with async, otherwise it will hang until the expire period has passed.",
      "options": {
        "expire": {
          "aliases": [],
          "description": "How long in seconds before the notification expires.",
          "default": "45",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Which notification group to add the notification to.",
          "default": "Powershell",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "msg": {
          "aliases": [],
          "description": "The message to appear inside the notification.\nMay include \\n to format the message to appear within the Action Center.",
          "default": "Hello, World!",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "popup": {
          "aliases": [],
          "description": "If C(no), the notification will not pop up and will only appear in the Action Center.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "The tag to add to the notification.",
          "default": "Ansible",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "title": {
          "aliases": [],
          "description": "The notification title, which appears in the pop up..",
          "default": "Notification HH:mm",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Sends Toast windows notification to logged in users on Windows 10 or later hosts"
    },
    "examples": "\n- name: Warn logged in users of impending upgrade (note use of async to stop the module from waiting until notification expires).\n  community.windows.win_toast:\n    expire: 60\n    title: System Upgrade Notification\n    msg: Automated upgrade about to start.  Please save your work and log off before {{ deployment_start_time }}\n  async: 60\n  poll: 0\n"
  },
  "community.windows.win_unzip": {
    "doc": {
      "description": "Unzips compressed files and archives.\nSupports .zip files natively.\nSupports other formats supported by the Powershell Community Extensions (PSCX) module (basically everything 7zip supports).\nFor non-Windows targets, use the M(ansible.builtin.unarchive) module instead.",
      "has_action": false,
      "notes": "This module is not really idempotent, it will extract the archive every time, and report a change.\nFor extracting any compression types other than .zip, the PowerShellCommunityExtensions (PSCX) Module is required.  This module (in conjunction with PSCX) has the ability to recursively unzip files within the src zip file provided and also functionality for many other compression types. If the destination directory does not exist, it will be created before unzipping the file.  Specifying rm parameter will force removal of the src file after extraction.",
      "options": {
        "creates": {
          "aliases": [],
          "description": "If this file or directory exists the specified src will not be extracted.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "delete_archive": {
          "aliases": [
            "rm"
          ],
          "description": "Remove the zip file, after unzipping.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Destination of zip file (provide absolute path of directory). If it does not exist, the directory will be created.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "If a zip file is encrypted with password.\nPassing a value to a password parameter requires the PSCX module to be installed.",
          "required": false,
          "suboptions": {}
        },
        "recurse": {
          "aliases": [],
          "description": "Recursively expand zipped files within the src file.\nSetting to a value of C(yes) requires the PSCX module to be installed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "File to be unzipped (provide absolute path).",
          "type": "path",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "PSCX"
      ],
      "short_description": "Unzips compressed files and archives on the Windows node"
    },
    "examples": "\n# This unzips a library that was downloaded with win_get_url, and removes the file after extraction\n# $ ansible -i hosts -m win_unzip -a \"src=C:\\LibraryToUnzip.zip dest=C:\\Lib remove=yes\" all\n\n- name: Unzip a bz2 (BZip) file\n  community.windows.win_unzip:\n    src: C:\\Users\\Phil\\Logs.bz2\n    dest: C:\\Users\\Phil\\OldLogs\n    creates: C:\\Users\\Phil\\OldLogs\n\n- name: Unzip gz log\n  community.windows.win_unzip:\n    src: C:\\Logs\\application-error-logs.gz\n    dest: C:\\ExtractedLogs\\application-error-logs\n\n# Unzip .zip file, recursively decompresses the contained .gz files and removes all unneeded compressed files after completion.\n- name: Recursively decompress GZ files in ApplicationLogs.zip\n  community.windows.win_unzip:\n    src: C:\\Downloads\\ApplicationLogs.zip\n    dest: C:\\Application\\Logs\n    recurse: yes\n    delete_archive: yes\n\n- name: Install PSCX\n  community.windows.win_psmodule:\n    name: Pscx\n    state: present\n\n- name: Unzip .7z file which is password encrypted\n  community.windows.win_unzip:\n    src: C:\\Downloads\\ApplicationLogs.7z\n    dest: C:\\Application\\Logs\n    password: abcd\n    delete_archive: yes\n"
  },
  "community.windows.win_user_profile": {
    "doc": {
      "description": "Used to create or remove user profiles on a Windows host.\nThis can be used to create a profile before a user logs on or delete a profile when removing a user account.\nA profile can be created for both a local or domain account.",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "Specifies the base name for the profile path.\nWhen I(state) is C(present) this is used to create the profile for I(username) at a specific path within the profile directory.\nThis cannot be used to specify a path outside of the profile directory but rather it specifies a folder(s) within this directory.\nIf a profile for another user already exists at the same path, then a 3 digit incremental number is appended by Windows automatically.\nWhen I(state) is C(absent) and I(username) is not set, then the module will remove all profiles that point to the profile path derived by this value.\nThis is useful if the account no longer exists but the profile still remains.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remove_multiple": {
          "aliases": [],
          "description": "When I(state) is C(absent) and the value for I(name) matches multiple profiles the module will fail.\nSet this value to C(yes) to force the module to delete all the profiles found.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Will ensure the profile exists when set to C(present).\nWhen creating a profile the I(username) option must be set to a valid account.\nWill remove the profile(s) when set to C(absent).\nWhen removing a profile either I(username) must be set to a valid account, or I(name) is set to the profile's base name.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The account name of security identifier (SID) for the profile.\nThis must be set when I(state) is C(present) and must be a valid account or the SID of a valid account.\nWhen I(state) is C(absent) then this must still be a valid account number but the SID can be a deleted user's SID.",
          "type": "sid",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manages the Windows user profiles."
    },
    "examples": "\n- name: Create a profile for an account\n  community.windows.win_user_profile:\n    username: ansible-account\n    state: present\n\n- name: Create a profile for an account at C:\\Users\\ansible\n  community.windows.win_user_profile:\n    username: ansible-account\n    name: ansible\n    state: present\n\n- name: Remove a profile for a still valid account\n  community.windows.win_user_profile:\n    username: ansible-account\n    state: absent\n\n- name: Remove a profile for a deleted account\n  community.windows.win_user_profile:\n    name: ansible\n    state: absent\n\n- name: Remove a profile for a deleted account based on the SID\n  community.windows.win_user_profile:\n    username: S-1-5-21-3233007181-2234767541-1895602582-1305\n    state: absent\n\n- name: Remove multiple profiles that exist at the basename path\n  community.windows.win_user_profile:\n    name: ansible\n    state: absent\n    remove_multiple: yes\n"
  },
  "community.windows.win_wait_for_process": {
    "doc": {
      "description": "Waiting for a process to start or stop.\nThis is useful when Windows services behave poorly and do not enumerate external dependencies in their manifest.",
      "has_action": false,
      "options": {
        "owner": {
          "aliases": [],
          "description": "The owner of the process.\nRequires PowerShell version 4.0 or newer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pid": {
          "aliases": [],
          "description": "The PID of the process.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "post_wait_delay": {
          "aliases": [],
          "description": "Seconds to wait after checking for processes.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "pre_wait_delay": {
          "aliases": [],
          "description": "Seconds to wait before checking processes.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "process_min_count": {
          "aliases": [],
          "description": "Minimum number of process matching the supplied pattern to satisfy C(present) condition.\nOnly applies to C(present).",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "process_name_exact": {
          "aliases": [],
          "description": "The name of the process(es) for which to wait.  The name of the process(es) should not include the file extension suffix.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "process_name_pattern": {
          "aliases": [],
          "description": "RegEx pattern matching desired process(es).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sleep": {
          "aliases": [],
          "description": "Number of seconds to sleep between checks.\nOnly applies when waiting for a process to start.  Waiting for a process to start does not have a native non-polling mechanism. Waiting for a stop uses native PowerShell and does not require polling.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "When checking for a running process C(present) will block execution until the process exists, or until the timeout has been reached. C(absent) will block execution until the process no longer exists, or until the timeout has been reached.\nWhen waiting for C(present), the module will return changed only if the process was not present on the initial check but became present on subsequent checks.\nIf, while waiting for C(absent), new processes matching the supplied pattern are started, these new processes will not be included in the action.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum number of seconds to wait for a for a process to start or stop before erroring out.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Waits for a process to exist or not exist before continuing."
    },
    "examples": "\n- name: Wait 300 seconds for all Oracle VirtualBox processes to stop. (VBoxHeadless, VirtualBox, VBoxSVC)\n  community.windows.win_wait_for_process:\n    process_name_pattern: 'v(irtual)?box(headless|svc)?'\n    state: absent\n    timeout: 500\n\n- name: Wait 300 seconds for 3 instances of cmd to start, waiting 5 seconds between each check\n  community.windows.win_wait_for_process:\n    process_name_exact: cmd\n    state: present\n    timeout: 500\n    sleep: 5\n    process_min_count: 3\n"
  },
  "community.windows.win_wakeonlan": {
    "doc": {
      "description": "The C(win_wakeonlan) module sends magic Wake-on-LAN (WoL) broadcast packets.\nFor non-Windows targets, use the M(community.general.wakeonlan) module instead.",
      "has_action": false,
      "notes": "This module sends a magic packet, without knowing whether it worked. It always report a change.\nOnly works if the target system was properly configured for Wake-on-LAN (in the BIOS and/or the OS).\nSome BIOSes have a different (configurable) Wake-on-LAN boot order (i.e. PXE first).",
      "options": {
        "broadcast": {
          "aliases": [],
          "description": "Network broadcast address to use for broadcasting magic Wake-on-LAN packet.",
          "default": "255.255.255.255",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "MAC address to send Wake-on-LAN broadcast packet for.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "UDP port to use for magic Wake-on-LAN packet.",
          "default": "7",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Send a magic Wake-on-LAN (WoL) broadcast packet"
    },
    "examples": "\n- name: Send a magic Wake-on-LAN packet to 00:00:5E:00:53:66\n  community.windows.win_wakeonlan:\n    mac: 00:00:5E:00:53:66\n    broadcast: 192.0.2.23\n\n- name: Send a magic Wake-On-LAN packet on port 9 to 00-00-5E-00-53-66\n  community.windows.win_wakeonlan:\n    mac: 00-00-5E-00-53-66\n    port: 9\n  delegate_to: remote_system\n"
  },
  "community.windows.win_webpicmd": {
    "doc": {
      "description": "Installs packages using Web Platform Installer command-line (U(http://www.iis.net/learn/install/web-platform-installer/web-platform-installer-v4-command-line-webpicmdexe-rtw-release)).\nMust be installed and present in PATH (see M(chocolatey.chocolatey.win_chocolatey) module; 'webpicmd' is the package name, and you must install 'lessmsi' first too)?\nInstall IIS first (see M(ansible.windows.win_feature) module).",
      "has_action": false,
      "notes": "Accepts EULAs and suppresses reboot - you will need to check manage reboots yourself (see M(ansible.windows.win_reboot) module)",
      "options": {
        "name": {
          "aliases": [],
          "description": "Name of the package to be installed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Installs packages using Web Platform Installer command-line"
    },
    "examples": "\n- name: Install URLRewrite2.\n  community.windows.win_webpicmd:\n    name: URLRewrite2\n"
  },
  "community.windows.win_xml": {
    "doc": {
      "description": "Manages XML nodes, attributes and text, using xpath to select which xml nodes need to be managed.\nXML fragments, formatted as strings, are used to specify the desired state of a part or parts of XML files on remote Windows servers.\nFor non-Windows targets, use the M(community.general.xml) module instead.",
      "has_action": false,
      "notes": "Only supports operating on xml elements, attributes and text.\nNamespace, processing-instruction, command and document node types cannot be modified with this module.",
      "options": {
        "attribute": {
          "aliases": [],
          "description": "The attribute name if the type is 'attribute'.\nRequired if C(type=attribute).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "Determine whether a backup should be created.\nWhen set to C(yes), create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "count": {
          "aliases": [],
          "description": "When set to C(yes), return the number of nodes matched by I(xpath).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "fragment": {
          "aliases": [
            "xmlstring"
          ],
          "description": "The string representation of the XML fragment expected at xpath.  Since ansible 2.9 not required when I(state=absent), or when I(count=yes).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest",
            "file"
          ],
          "description": "Path to the file to operate on.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set or remove the nodes (or attributes) matched by I(xpath).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "The type of XML node you are working with.",
          "default": "element",
          "type": "str",
          "required": true,
          "choices": [
            "attribute",
            "element",
            "text"
          ],
          "suboptions": {}
        },
        "xpath": {
          "aliases": [],
          "description": "Xpath to select the node or nodes to operate on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Manages XML file content on Windows hosts"
    },
    "examples": "\n- name: Apply our filter to Tomcat web.xml\n  community.windows.win_xml:\n   path: C:\\apache-tomcat\\webapps\\myapp\\WEB-INF\\web.xml\n   fragment: '<filter><filter-name>MyFilter</filter-name><filter-class>com.example.MyFilter</filter-class></filter>'\n   xpath: '/*'\n\n- name: Apply sslEnabledProtocols to Tomcat's server.xml\n  community.windows.win_xml:\n   path: C:\\Tomcat\\conf\\server.xml\n   xpath: '//Server/Service[@name=\"Catalina\"]/Connector[@port=\"9443\"]'\n   attribute: 'sslEnabledProtocols'\n   fragment: 'TLSv1,TLSv1.1,TLSv1.2'\n   type: attribute\n\n- name: remove debug configuration nodes from nlog.conf\n  community.windows.win_xml:\n   path: C:\\IISApplication\\nlog.conf\n   xpath: /nlog/rules/logger[@name=\"debug\"]/descendant::*\n   state: absent\n\n- name: count configured connectors in Tomcat's server.xml\n  community.windows.win_xml:\n   path: C:\\Tomcat\\conf\\server.xml\n   xpath: //Server/Service/Connector\n   count: yes\n  register: connector_count\n\n- name: show connector count\n  debug:\n    msg=\"Connector count is {{connector_count.count}}\"\n\n- name: ensure all lang=en attributes to lang=nl\n  community.windows.win_xml:\n   path: C:\\Data\\Books.xml\n   xpath: //@[lang=\"en\"]\n   attribute: lang\n   fragment: nl\n   type: attribute\n\n"
  },
  "community.windows.win_zip": {
    "doc": {
      "description": "Compress file or directory as zip archive.\nFor non-Windows targets, use the M(ansible.builtin.archive) module instead.",
      "has_action": false,
      "notes": "The filenames in the zip are encoded using UTF-8.",
      "options": {
        "dest": {
          "aliases": [],
          "description": "Destination path of zip file (provide absolute path of zip file on the target node).",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "File or directory path to be zipped (provide absolute path on the target node).\nWhen a directory path the directory is zipped as the root entry in the archive.\nSpecify C(\\*) to the end of I(src) to zip the contents of the directory and not the directory itself.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        ".NET Framework 4.5 or later"
      ],
      "short_description": "Compress file or directory as zip archive on the Windows node"
    },
    "examples": "\n- name: Compress a file\n  community.windows.win_zip:\n    src: C:\\Users\\hiyoko\\log.txt\n    dest: C:\\Users\\hiyoko\\log.zip\n\n- name: Compress a directory as the root of the archive\n  community.windows.win_zip:\n    src: C:\\Users\\hiyoko\\log\n    dest: C:\\Users\\hiyoko\\log.zip\n\n- name: Compress the directories contents\n  community.windows.win_zip:\n    src: C:\\Users\\hiyoko\\log\\*\n    dest: C:\\Users\\hiyoko\\log.zip\n\n"
  }
}