{
  "community.postgresql.postgresql_copy": {
    "doc": {
      "description": "Copy data between a file/program and a PostgreSQL table.",
      "has_action": false,
      "notes": "Supports PostgreSQL version 9.4+.\nCOPY command is only allowed to database superusers.\nIf I(check_mode=yes), we just check the src/dst table availability and return the COPY query that actually has not been executed.\nIf i(check_mode=yes) and the source has been passed as SQL, the module will execute it and rolled the transaction back but pay attention it can affect database performance (e.g., if SQL collects a lot of data).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "columns": {
          "aliases": [
            "column"
          ],
          "description": "List of column names for the src/dst table to COPY FROM/TO.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [
            "from"
          ],
          "description": "Copy data from a file to a table (appending the data to whatever is in the table already).\nMutually exclusive with I(copy_to) and I(src).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "copy_to": {
          "aliases": [
            "to"
          ],
          "description": "Copy the contents of a table to a file.\nCan also copy the results of a SELECT query.\nMutually exclusive with I(copy_from) and I(dst).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dst": {
          "aliases": [
            "destination"
          ],
          "description": "Copy data to I(dst=tablename) from I(copy_from=/path/to/data.file).\nUsed with I(copy_from) only.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "Options of COPY command.\nSee the full list of available options U(https://www.postgresql.org/docs/current/sql-copy.html).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "program": {
          "aliases": [],
          "description": "Mark I(src)/I(dst) as a program. Data will be copied to/from a program.\nSee block Examples and PROGRAM arg description U(https://www.postgresql.org/docs/current/sql-copy.html).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [
            "source"
          ],
          "description": "Copy data from I(copy_from) to I(src=tablename).\nUsed with I(copy_to) only.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Copy data between a file/program and a PostgreSQL table"
    },
    "examples": "\n- name: Copy text TAB-separated data from file /tmp/data.txt to acme table\n  community.postgresql.postgresql_copy:\n    copy_from: /tmp/data.txt\n    dst: acme\n\n- name: Copy CSV (comma-separated) data from file /tmp/data.csv to columns id, name of table acme\n  community.postgresql.postgresql_copy:\n    copy_from: /tmp/data.csv\n    dst: acme\n    columns: id,name\n    options:\n      format: csv\n\n- name: >\n    Copy text vertical-bar-separated data from file /tmp/data.txt to bar table.\n    The NULL values are specified as N\n  community.postgresql.postgresql_copy:\n    copy_from: /tmp/data.csv\n    dst: bar\n    options:\n      delimiter: '|'\n      null: 'N'\n\n- name: Copy data from acme table to file /tmp/data.txt in text format, TAB-separated\n  community.postgresql.postgresql_copy:\n    src: acme\n    copy_to: /tmp/data.txt\n\n- name: Copy data from SELECT query to/tmp/data.csv in CSV format\n  community.postgresql.postgresql_copy:\n    src: 'SELECT * FROM acme'\n    copy_to: /tmp/data.csv\n    options:\n      format: csv\n\n- name: Copy CSV data from my_table to gzip\n  community.postgresql.postgresql_copy:\n    src: my_table\n    copy_to: 'gzip > /tmp/data.csv.gz'\n    program: yes\n    options:\n      format: csv\n\n- name: >\n    Copy data from columns id, name of table bar to /tmp/data.txt.\n    Output format is text, vertical-bar-separated, NULL as N\n  community.postgresql.postgresql_copy:\n    src: bar\n    columns:\n    - id\n    - name\n    copy_to: /tmp/data.csv\n    options:\n      delimiter: '|'\n      null: 'N'\n"
  },
  "community.postgresql.postgresql_db": {
    "doc": {
      "description": "Add or remove PostgreSQL databases from a remote host.",
      "has_action": false,
      "notes": "State C(dump) and C(restore) don't require I(psycopg2) since version 2.8.\nSupports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "conn_limit": {
          "aliases": [],
          "description": "Specifies the database connection limit.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dump_extra_args": {
          "aliases": [],
          "description": "Provides additional arguments when I(state) is C(dump).\nCannot be used with dump-file-format-related arguments like ``--format=d``.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "encoding": {
          "aliases": [],
          "description": "Encoding of the database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Used to forcefully drop a database when the I(state) is C(absent), ignored otherwise.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lc_collate": {
          "aliases": [],
          "description": "Collation order (LC_COLLATE) to use in the database must match collation order of template database unless C(template0) is used as template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lc_ctype": {
          "aliases": [],
          "description": "Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...).\nMust match LC_CTYPE of template database unless C(template0) is used as template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintenance_db": {
          "aliases": [],
          "description": "The value specifies the initial database (which is also called as maintenance DB) that Ansible connects to.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "db"
          ],
          "description": "Name of the database to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the role to set as owner of the database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect (if needed).",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting.\nThe specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The database state.\nC(present) implies that the database should be created if necessary.\nC(absent) implies that the database should be removed if present.\nC(dump) requires a target definition to which the database will be backed up. (Added in Ansible 2.4) Note that in some PostgreSQL versions of pg_dump, which is an embedded PostgreSQL utility and is used by the module, returns rc 0 even when errors occurred (e.g. the connection is forbidden by pg_hba.conf, etc.), so the module returns changed=True but the dump has not actually been done. Please, be sure that your version of pg_dump returns rc 1 in this case.\nC(restore) also requires a target definition from which the database will be restored. (Added in Ansible 2.4).\nThe format of the backup will be detected based on the target name.\nSupported compression formats for dump and restore include C(.pgc), C(.bz2), C(.gz) and C(.xz).\nSupported formats for dump and restore include C(.sql), C(.tar), and C(.dir) (for the directory format which is supported since collection version 1.4.0).\nRestore program is selected by target file format: C(.tar), C(.pgc), and C(.dir) are handled by pg_restore, other with pgsql.\n.\nC(rename) is used to rename the database C(name) to C(target).\nIf the database C(name) exists, it will be renamed to C(target).\nIf the database C(name) does not exist and the C(target) database exists, the module will report that nothing has changed.\nIf both the databases exist as well as when they have the same value, an error will be raised.\nWhen I(state=rename), in addition to the C(name) option, the module requires the C(target) option. Other options are ignored. Supported since collection version 1.4.0.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "dump",
            "present",
            "rename",
            "restore"
          ],
          "suboptions": {}
        },
        "tablespace": {
          "aliases": [],
          "description": "The tablespace to set for the database U(https://www.postgresql.org/docs/current/sql-alterdatabase.html).\nIf you want to move the database back to the default tablespace, explicitly set this to pg_default.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "File to back up or restore from.\nUsed when I(state) is C(dump) or C(restore).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "target_opts": {
          "aliases": [],
          "description": "Additional arguments for pg_dump or restore program (pg_restore or psql, depending on target's format).\nUsed when I(state) is C(dump) or C(restore).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Template used to create the database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(owner), I(conn_limit), I(encoding), I(db), I(template), I(tablespace), I(session_role) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Add or remove PostgreSQL databases from a remote host"
    },
    "examples": "\n- name: Create a new database with name \"acme\"\n  community.postgresql.postgresql_db:\n    name: acme\n\n# Note: If a template different from \"template0\" is specified,\n# encoding and locale settings must match those of the template.\n- name: Create a new database with name \"acme\" and specific encoding and locale # settings\n  community.postgresql.postgresql_db:\n    name: acme\n    encoding: UTF-8\n    lc_collate: de_DE.UTF-8\n    lc_ctype: de_DE.UTF-8\n    template: template0\n\n# Note: Default limit for the number of concurrent connections to\n# a specific database is \"-1\", which means \"unlimited\"\n- name: Create a new database with name \"acme\" which has a limit of 100 concurrent connections\n  community.postgresql.postgresql_db:\n    name: acme\n    conn_limit: \"100\"\n\n- name: Dump an existing database to a file\n  community.postgresql.postgresql_db:\n    name: acme\n    state: dump\n    target: /tmp/acme.sql\n\n- name: Dump an existing database to a file excluding the test table\n  community.postgresql.postgresql_db:\n    name: acme\n    state: dump\n    target: /tmp/acme.sql\n    dump_extra_args: --exclude-table=test\n\n- name: Dump an existing database to a file (with compression)\n  community.postgresql.postgresql_db:\n    name: acme\n    state: dump\n    target: /tmp/acme.sql.gz\n\n- name: Dump a single schema for an existing database\n  community.postgresql.postgresql_db:\n    name: acme\n    state: dump\n    target: /tmp/acme.sql\n    target_opts: \"-n public\"\n\n- name: Dump only table1 and table2 from the acme database\n  community.postgresql.postgresql_db:\n    name: acme\n    state: dump\n    target: /tmp/table1_table2.sql\n    target_opts: \"-t table1 -t table2\"\n\n- name: Dump an existing database using the directory format\n  community.postgresql.postgresql_db:\n    name: acme\n    state: dump\n    target: /tmp/acme.dir\n\n# Note: In the example below, if database foo exists and has another tablespace\n# the tablespace will be changed to foo. Access to the database will be locked\n# until the copying of database files is finished.\n- name: Create a new database called foo in tablespace bar\n  community.postgresql.postgresql_db:\n    name: foo\n    tablespace: bar\n\n# Rename the database foo to bar.\n# If the database foo exists, it will be renamed to bar.\n# If the database foo does not exist and the bar database exists,\n# the module will report that nothing has changed.\n# If both the databases exist, an error will be raised.\n- name: Rename the database foo to bar\n  community.postgresql.postgresql_db:\n    name: foo\n    state: rename\n    target: bar\n"
  },
  "community.postgresql.postgresql_ext": {
    "doc": {
      "description": "Add or remove PostgreSQL extensions from a database.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nThis module uses I(psycopg2), a Python PostgreSQL database adapter.\nYou must ensure that C(psycopg2) is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the C(postgresql), C(libpq-dev), and C(python-psycopg2) packages on the remote host before using this module.\nIncomparable versions, for example PostGIS ``unpackaged``, cannot be installed.\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cascade": {
          "aliases": [],
          "description": "Automatically install/remove any extensions that this extension depends on that are not already installed/removed (supported since PostgreSQL 9.6).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of the database to add or remove the extension to/from.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "ext"
          ],
          "description": "Name of the extension to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Name of the schema to add the extension to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting.\nThe specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The database extension state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(ext), I(schema), I(version), I(session_role) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Extension version to add or update to. Has effect with I(state=present) only.\nIf not specified and extension is not installed in the database, the latest version available will be created.\nIf extension is already installed, will update to the given version if a valid update path exists.\nDowngrading is only supported if the extension provides a downgrade path otherwise the extension must be removed and a lower version of the extension must be made available.\nSet I(version=latest) to always update the extension to the latest available version.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Add or remove PostgreSQL extensions from a database"
    },
    "examples": "\n- name: Adds postgis extension to the database acme in the schema foo\n  community.postgresql.postgresql_ext:\n    name: postgis\n    db: acme\n    schema: foo\n\n- name: Removes postgis extension to the database acme\n  community.postgresql.postgresql_ext:\n    name: postgis\n    db: acme\n    state: absent\n\n- name: Adds earthdistance extension to the database template1 cascade\n  community.postgresql.postgresql_ext:\n    name: earthdistance\n    db: template1\n    cascade: true\n\n# In the example below, if earthdistance extension is installed,\n# it will be removed too because it depends on cube:\n- name: Removes cube extension from the database acme cascade\n  community.postgresql.postgresql_ext:\n    name: cube\n    db: acme\n    cascade: yes\n    state: absent\n\n- name: Create extension foo of version 1.2 or update it to that version if it's already created and a valid update path exists\n  community.postgresql.postgresql_ext:\n    db: acme\n    name: foo\n    version: 1.2\n\n- name: Create the latest available version of extension foo. If already installed, update it to the latest version\n  community.postgresql.postgresql_ext:\n    db: acme\n    name: foo\n    version: latest\n"
  },
  "community.postgresql.postgresql_idx": {
    "doc": {
      "description": "Create or drop indexes from a PostgreSQL database.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe index building process can affect database performance.\nTo avoid table locks on production databases, use I(concurrent=yes) (default behavior).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cascade": {
          "aliases": [],
          "description": "Automatically drop objects that depend on the index, and in turn all objects that depend on those objects.\nIt used only with I(state=absent).\nMutually exclusive with I(concurrent=yes).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "columns": {
          "aliases": [
            "column"
          ],
          "description": "List of index columns that need to be covered by index.\nMutually exclusive with I(state=absent).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "concurrent": {
          "aliases": [],
          "description": "Enable or disable concurrent mode (CREATE / DROP INDEX CONCURRENTLY).\nPay attention, if I(concurrent=no), the table will be locked (ACCESS EXCLUSIVE) during the building process. For more information about the lock levels see U(https://www.postgresql.org/docs/current/explicit-locking.html).\nIf the building process was interrupted for any reason when I(cuncurrent=yes), the index becomes invalid. In this case it should be dropped and created again.\nMutually exclusive with I(cascade=yes).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cond": {
          "aliases": [],
          "description": "Index conditions.\nMutually exclusive with I(state=absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to and where the index will be created/dropped.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "idxname": {
          "aliases": [
            "name"
          ],
          "description": "Name of the index to create or drop.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "idxtype": {
          "aliases": [
            "type"
          ],
          "description": "Index type (like btree, gist, gin, etc.).\nMutually exclusive with I(state=absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Name of a database schema where the index will be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Index state.\nC(present) implies the index will be created if it does not exist.\nC(absent) implies the index will be dropped if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "storage_params": {
          "aliases": [],
          "description": "Storage parameters like fillfactor, vacuum_cleanup_index_scale_factor, etc.\nMutually exclusive with I(state=absent).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "table": {
          "aliases": [],
          "description": "Table to create index on it.\nMutually exclusive with I(state=absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tablespace": {
          "aliases": [],
          "description": "Set a tablespace for the index.\nMutually exclusive with I(state=absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(idxname), I(session_role), I(schema), I(table), I(columns), I(tablespace), I(storage_params), I(cond) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "unique": {
          "aliases": [],
          "description": "Enable unique index.\nOnly btree currently supports unique indexes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Create or drop indexes from a PostgreSQL database"
    },
    "examples": "\n- name: Create btree index if not exists test_idx concurrently covering columns id and name of table products\n  community.postgresql.postgresql_idx:\n    db: acme\n    table: products\n    columns: id,name\n    name: test_idx\n\n- name: Create btree index test_idx concurrently with tablespace called ssd and storage parameter\n  community.postgresql.postgresql_idx:\n    db: acme\n    table: products\n    columns:\n    - id\n    - name\n    idxname: test_idx\n    tablespace: ssd\n    storage_params:\n    - fillfactor=90\n\n- name: Create gist index test_gist_idx concurrently on column geo_data of table map\n  community.postgresql.postgresql_idx:\n    db: somedb\n    table: map\n    idxtype: gist\n    columns: geo_data\n    idxname: test_gist_idx\n\n# Note: for the example below pg_trgm extension must be installed for gin_trgm_ops\n- name: Create gin index gin0_idx not concurrently on column comment of table test\n  community.postgresql.postgresql_idx:\n    idxname: gin0_idx\n    table: test\n    columns: comment gin_trgm_ops\n    concurrent: no\n    idxtype: gin\n\n- name: Drop btree test_idx concurrently\n  community.postgresql.postgresql_idx:\n    db: mydb\n    idxname: test_idx\n    state: absent\n\n- name: Drop test_idx cascade\n  community.postgresql.postgresql_idx:\n    db: mydb\n    idxname: test_idx\n    state: absent\n    cascade: yes\n    concurrent: no\n\n- name: Create btree index test_idx concurrently on columns id,comment where column id > 1\n  community.postgresql.postgresql_idx:\n    db: mydb\n    table: test\n    columns: id,comment\n    idxname: test_idx\n    cond: id > 1\n\n- name: Create unique btree index if not exists test_unique_idx on column name of table products\n  community.postgresql.postgresql_idx:\n    db: acme\n    table: products\n    columns: name\n    name: test_unique_idx\n    unique: yes\n    concurrent: no\n"
  },
  "community.postgresql.postgresql_info": {
    "doc": {
      "description": "Gathers information about PostgreSQL servers.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "Limit the collected information by comma separated string or YAML list.\nAllowable values are C(version), C(databases), C(in_recovery), C(settings), C(tablespaces), C(roles), C(replications), C(repl_slots).\nBy default, collects all subsets.\nYou can use shell-style (fnmatch) wildcard to pass groups of values (see Examples).\nYou can use '!' before value (for example, C(!settings)) to exclude it from the information.\nIf you pass including and excluding values to the filter, for example, I(filter=!settings,ver), the excluding values will be ignored.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether a value of I(session_role) is potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via I(session_role) are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Gather information about PostgreSQL servers"
    },
    "examples": "\n# Display info from postgres hosts.\n# ansible postgres -m postgresql_info\n\n# Display only databases and roles info from all hosts using shell-style wildcards:\n# ansible all -m postgresql_info -a 'filter=dat*,rol*'\n\n# Display only replications and repl_slots info from standby hosts using shell-style wildcards:\n# ansible standby -m postgresql_info -a 'filter=repl*'\n\n# Display all info from databases hosts except settings:\n# ansible databases -m postgresql_info -a 'filter=!settings'\n\n- name: Collect PostgreSQL version and extensions\n  become: yes\n  become_user: postgres\n  community.postgresql.postgresql_info:\n    filter: ver*,ext*\n\n- name: Collect all info except settings and roles\n  become: yes\n  become_user: postgres\n  community.postgresql.postgresql_info:\n    filter: \"!settings,!roles\"\n\n# On FreeBSD with PostgreSQL 9.5 version and lower use pgsql user to become\n# and pass \"postgres\" as a database to connect to\n- name: Collect tablespaces and repl_slots info\n  become: yes\n  become_user: pgsql\n  community.postgresql.postgresql_info:\n    db: postgres\n    filter:\n    - tablesp*\n    - repl_sl*\n\n- name: Collect all info except databases\n  become: yes\n  become_user: postgres\n  community.postgresql.postgresql_info:\n    filter:\n    - \"!databases\"\n"
  },
  "community.postgresql.postgresql_lang": {
    "doc": {
      "description": "Adds, removes or changes procedural languages with a PostgreSQL database.\nThis module allows you to add a language, remote a language or change the trust relationship with a PostgreSQL database.\nThe module can be used on the machine where executed or on a remote host.\nWhen removing a language from a database, it is possible that dependencies prevent the database from being removed. In that case, you can specify I(cascade=yes) to automatically drop objects that depend on the language (such as functions in the language).\nIn case the language can't be deleted because it is required by the database system, you can specify I(fail_on_drop=no) to ignore the error.\nBe careful when marking a language as trusted since this could be a potential security breach. Untrusted languages allow only users with the PostgreSQL superuser privilege to use this language to create new functions.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cascade": {
          "aliases": [],
          "description": "When dropping a language, also delete object that depend on this language.\nOnly used when I(state=absent).",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to and where the language will be added, removed or changed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fail_on_drop": {
          "aliases": [],
          "description": "If C(yes), fail when removing a language. Otherwise just log and continue.\nIn some cases, it is not possible to remove a language (used by the db-system).\nWhen dependencies block the removal, consider using I(cascade).",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_trust": {
          "aliases": [],
          "description": "Marks the language as trusted, even if it's marked as untrusted in pg_pltemplate.\nUse with care!",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lang": {
          "aliases": [
            "name"
          ],
          "description": "Name of the procedural language to add, remove or change.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Set an owner for the language.\nIgnored when I(state=absent).",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting.\nThe specified I(session_role) must be a role that the current I(login_user) is a member of.\nPermissions checking for SQL commands is carried out as though the I(session_role) were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the language for the selected database.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "trust": {
          "aliases": [],
          "description": "Make this language trusted for the selected db.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(lang), I(session_role), I(owner) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Adds, removes or changes procedural languages with a PostgreSQL database"
    },
    "examples": "\n- name: Add language pltclu to database testdb if it doesn't exist\n  community.postgresql.postgresql_lang: db=testdb lang=pltclu state=present\n\n# Add language pltclu to database testdb if it doesn't exist and mark it as trusted.\n# Marks the language as trusted if it exists but isn't trusted yet.\n# force_trust makes sure that the language will be marked as trusted\n- name: Add language pltclu to database testdb if it doesn't exist and mark it as trusted\n  community.postgresql.postgresql_lang:\n    db: testdb\n    lang: pltclu\n    state: present\n    trust: yes\n    force_trust: yes\n\n- name: Remove language pltclu from database testdb\n  community.postgresql.postgresql_lang:\n    db: testdb\n    lang: pltclu\n    state: absent\n\n- name: Remove language pltclu from database testdb and remove all dependencies\n  community.postgresql.postgresql_lang:\n    db: testdb\n    lang: pltclu\n    state: absent\n    cascade: yes\n\n- name: Remove language c from database testdb but ignore errors if something prevents the removal\n  community.postgresql.postgresql_lang:\n    db: testdb\n    lang: pltclu\n    state: absent\n    fail_on_drop: no\n\n- name: In testdb change owner of mylang to alice\n  community.postgresql.postgresql_lang:\n    db: testdb\n    lang: mylang\n    owner: alice\n"
  },
  "community.postgresql.postgresql_membership": {
    "doc": {
      "description": "Adds or removes PostgreSQL roles from groups (other roles).\nUsers are roles with login privilege.\nGroups are PostgreSQL roles usually without LOGIN privilege.\nCommon use case:\n1) add a new group (groups) by M(community.postgresql.postgresql_user) module with I(role_attr_flags=NOLOGIN)\n2) grant them desired privileges by M(community.postgresql.postgresql_privs) module\n3) add desired PostgreSQL users to the new group (groups) by this module",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fail_on_role": {
          "aliases": [],
          "description": "If C(yes), fail when group or target_role doesn't exist. If C(no), just warn and continue.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [
            "group",
            "source_role",
            "source_roles"
          ],
          "description": "The list of groups (roles) that need to be granted to or revoked from I(target_roles).",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Membership state.\nI(state=present) implies the I(groups)must be granted to I(target_roles).\nI(state=absent) implies the I(groups) must be revoked from I(target_roles).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "target_roles": {
          "aliases": [
            "target_role",
            "users",
            "user"
          ],
          "description": "The list of target roles (groups will be granted to them).",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(groups), I(target_roles), I(session_role) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Add or remove PostgreSQL roles from groups"
    },
    "examples": "\n- name: Grant role read_only to alice and bob\n  community.postgresql.postgresql_membership:\n    group: read_only\n    target_roles:\n    - alice\n    - bob\n    state: present\n\n# you can also use target_roles: alice,bob,etc to pass the role list\n\n- name: Revoke role read_only and exec_func from bob. Ignore if roles don't exist\n  community.postgresql.postgresql_membership:\n    groups:\n    - read_only\n    - exec_func\n    target_role: bob\n    fail_on_role: no\n    state: absent\n"
  },
  "community.postgresql.postgresql_owner": {
    "doc": {
      "description": "Change an owner of PostgreSQL database object.\nAlso allows to reassign the ownership of database objects owned by a database role to another role.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fail_on_role": {
          "aliases": [],
          "description": "If C(yes), fail when I(reassign_owned_by) role does not exist. Otherwise just warn and continue.\nMutually exclusive with I(obj_name) and I(obj_type).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_owner": {
          "aliases": [],
          "description": "Role (user/group) to set as an I(obj_name) owner.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "obj_name": {
          "aliases": [],
          "description": "Name of a database object to change ownership.\nMutually exclusive with I(reassign_owned_by).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "obj_type": {
          "aliases": [
            "type"
          ],
          "description": "Type of a database object.\nMutually exclusive with I(reassign_owned_by).",
          "type": "str",
          "required": false,
          "choices": [
            "database",
            "function",
            "matview",
            "sequence",
            "schema",
            "table",
            "tablespace",
            "view"
          ],
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reassign_owned_by": {
          "aliases": [],
          "description": "The list of role names. The ownership of all the objects within the current database, and of all shared objects (databases, tablespaces), owned by this role(s) will be reassigned to I(owner).\nPay attention - it reassigns all objects owned by this role(s) in the I(db)!\nIf role(s) exists, always returns changed True.\nCannot reassign ownership of objects that are required by the database system.\nMutually exclusive with C(obj_type).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(new_owner), I(obj_name), I(reassign_owned_by), I(session_role) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Change an owner of PostgreSQL database object"
    },
    "examples": "\n# Set owner as alice for function myfunc in database bar by ansible ad-hoc command:\n# ansible -m postgresql_owner -a \"db=bar new_owner=alice obj_name=myfunc obj_type=function\"\n\n- name: The same as above by playbook\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: alice\n    obj_name: myfunc\n    obj_type: function\n\n- name: Set owner as bob for table acme in database bar\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: bob\n    obj_name: acme\n    obj_type: table\n\n- name: Set owner as alice for view test_view in database bar\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: alice\n    obj_name: test_view\n    obj_type: view\n\n- name: Set owner as bob for tablespace ssd in database foo\n  community.postgresql.postgresql_owner:\n    db: foo\n    new_owner: bob\n    obj_name: ssd\n    obj_type: tablespace\n\n- name: Reassign all object in database bar owned by bob to alice\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: alice\n    reassign_owned_by: bob\n\n- name: Reassign all object in database bar owned by bob and bill to alice\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: alice\n    reassign_owned_by:\n    - bob\n    - bill\n"
  },
  "community.postgresql.postgresql_pg_hba": {
    "doc": {
      "description": "The fundamental function of the module is to create, or delete lines in pg_hba files.\nThe lines in the file should be in a typical pg_hba form and lines should be unique per key (type, databases, users, source). If they are not unique and the SID is 'the one to change', only one for I(state=present) or none for I(state=absent) of the SID's will remain.",
      "has_action": false,
      "notes": "The default authentication assumes that on the host, you are either logging in as or sudo'ing to an account with appropriate permissions to read and modify the file.\nThis module also returns the pg_hba info. You can use this module to only retrieve it by only specifying I(dest). The info can be found in the returned data under key pg_hba, being a list, containing a dict per rule.\nThis module will sort resulting C(pg_hba) files if a rule change is required. This could give unexpected results with manual created hba files, if it was improperly sorted. For example a rule was created for a net first and for a ip in that net range next. In that situation, the 'ip specific rule' will never hit, it is in the C(pg_hba) file obsolete. After the C(pg_hba) file is rewritten by the M(community.postgresql.postgresql_pg_hba) module, the ip specific rule will be sorted above the range rule. And then it will hit, which will give unexpected results.\nWith the 'order' parameter you can control which field is used to sort first, next and last.\nThe module supports a check mode and a diff mode.",
      "options": {
        "address": {
          "aliases": [
            "source",
            "src"
          ],
          "description": "The source address/net where the connections could come from.\nWill not be used for entries of I(type)=C(local).\nYou can also use keywords C(all), C(samehost), and C(samenet).",
          "default": "samehost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributes": {
          "aliases": [
            "attr"
          ],
          "description": "The attributes the resulting filesystem object should have.\nTo get supported flags look at the man page for I(chattr) on the target system.\nThis string should contain the attributes in the same order as the one displayed by I(lsattr).\nThe C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.",
          "type": "str",
          "required": false,
          "version_added": "2.3",
          "suboptions": {}
        },
        "backup": {
          "aliases": [],
          "description": "If set, create a backup of the C(pg_hba) file before it is modified. The location of the backup is returned in the (backup) variable by this module.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "backup_file": {
          "aliases": [],
          "description": "Write backup to a specific backupfile rather than a temp file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "A comment that will be placed in the same line behind the rule. See also the I(keep_comments_at_rules) parameter.",
          "type": "str",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "contype": {
          "aliases": [],
          "description": "Type of the rule. If not set, C(postgresql_pg_hba) will only return contents.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "host",
            "hostnossl",
            "hostssl"
          ],
          "suboptions": {}
        },
        "create": {
          "aliases": [],
          "description": "Create an C(pg_hba) file if none exists.\nWhen set to false, an error is raised when the C(pg_hba) file doesn't exist.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "databases": {
          "aliases": [],
          "description": "Databases this line applies to.",
          "default": "all",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dest": {
          "aliases": [],
          "description": "Path to C(pg_hba) file to modify.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name of the group that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keep_comments_at_rules": {
          "aliases": [],
          "description": "If C(true), comments that stand together with a rule in one line are kept behind that line.\nIf C(false), such comments are moved to the beginning of the file, like all other comments.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "method": {
          "aliases": [],
          "description": "Authentication method to be used.",
          "default": "md5",
          "type": "str",
          "required": false,
          "choices": [
            "cert",
            "gss",
            "ident",
            "krb5",
            "ldap",
            "md5",
            "pam",
            "password",
            "peer",
            "radius",
            "reject",
            "scram-sha-256",
            "sspi",
            "trust"
          ],
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The permissions the resulting filesystem object should have.\nFor those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.\nGiving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.\nAs of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).\nIf C(mode) is not specified and the destination filesystem object B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created filesystem object.\nIf C(mode) is not specified and the destination filesystem object B(does) exist, the mode of the existing filesystem object will be used.\nSpecifying C(mode) is the best way to ensure filesystem objects are created with the correct permissions. See CVE-2020-1736 for further details.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "netmask": {
          "aliases": [],
          "description": "The netmask of the source address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "Additional options for the authentication I(method).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "order": {
          "aliases": [],
          "description": "The entries will be written out in a specific order. With this option you can control by which field they are ordered first, second and last. s=source, d=databases, u=users. This option is deprecated since 2.9 and will be removed in community.postgresql 3.0.0. Sortorder is now hardcoded to sdu.",
          "default": "sdu",
          "type": "str",
          "required": false,
          "choices": [
            "sdu",
            "sud",
            "dsu",
            "dus",
            "usd",
            "uds"
          ],
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the user that should own the filesystem object, as would be fed to I(chown).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "selevel": {
          "aliases": [],
          "description": "The level part of the SELinux filesystem object context.\nThis is the MLS/MCS attribute, sometimes known as the C(range).\nWhen set to C(_default), it will use the C(level) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serole": {
          "aliases": [],
          "description": "The role part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(role) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "setype": {
          "aliases": [],
          "description": "The type part of the SELinux filesystem object context.\nWhen set to C(_default), it will use the C(type) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "seuser": {
          "aliases": [],
          "description": "The user part of the SELinux filesystem object context.\nBy default it uses the C(system) policy, where applicable.\nWhen set to C(_default), it will use the C(user) portion of the policy if available.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The lines will be added/modified when C(state=present) and removed when C(state=absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "unsafe_writes": {
          "aliases": [],
          "description": "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object.\nBy default this module uses atomic operations to prevent data corruption or inconsistent reads from the target filesystem objecs, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted filesystem objects, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.\nThis option allows Ansible to fall back to unsafe methods of updating filesystem objects when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).\nIMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2",
          "suboptions": {}
        },
        "users": {
          "aliases": [],
          "description": "Users this line applies to.",
          "default": "all",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ipaddress"
      ],
      "short_description": "Add, remove or modify a rule in a pg_hba file"
    },
    "examples": "\n- name: Grant users joe and simon access to databases sales and logistics from ipv6 localhost ::1/128 using peer authentication\n  community.postgresql.postgresql_pg_hba:\n    dest: /var/lib/postgres/data/pg_hba.conf\n    contype: host\n    users: joe,simon\n    source: ::1\n    databases: sales,logistics\n    method: peer\n    create: true\n\n- name: Grant user replication from network 192.168.0.100/24 access for replication with client cert authentication\n  community.postgresql.postgresql_pg_hba:\n    dest: /var/lib/postgres/data/pg_hba.conf\n    contype: host\n    users: replication\n    source: 192.168.0.100/24\n    databases: replication\n    method: cert\n\n- name: Revoke access from local user mary on database mydb\n  community.postgresql.postgresql_pg_hba:\n    dest: /var/lib/postgres/data/pg_hba.conf\n    contype: local\n    users: mary\n    databases: mydb\n    state: absent\n\n- name: Grant some_user access to some_db, comment that and keep other rule-specific comments attached to their rules\n  community.postgresql.postgresql_pg_hba:\n    dest: /var/lib/postgres/data/pg_hba.conf\n    contype: host\n    users: some_user\n    databases: some_db\n    method: md5\n    source: ::/0\n    keep_comments_at_rules: true\n    comment: \"this rule is an example\"\n"
  },
  "community.postgresql.postgresql_ping": {
    "doc": {
      "description": "Simple module to check remote PostgreSQL server availability.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of a database to connect to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether a value of I(session_role) is potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via I(session_role) are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Check remote PostgreSQL server availability"
    },
    "examples": "\n# PostgreSQL ping dbsrv server from the shell:\n# ansible dbsrv -m postgresql_ping\n\n# In the example below you need to generate certificates previously.\n# See https://www.postgresql.org/docs/current/libpq-ssl.html for more information.\n- name: PostgreSQL ping dbsrv server using not default credentials and ssl\n  community.postgresql.postgresql_ping:\n    db: protected_db\n    login_host: dbsrv\n    login_user: secret\n    login_password: secret_pass\n    ca_cert: /root/root.crt\n    ssl_mode: verify-full\n"
  },
  "community.postgresql.postgresql_privs": {
    "doc": {
      "description": "Grant or revoke privileges on PostgreSQL database objects.\nThis module is basically a wrapper around most of the functionality of PostgreSQL's GRANT and REVOKE statements with detection of changes (GRANT/REVOKE I(privs) ON I(type) I(objs) TO/FROM I(roles)).",
      "has_action": false,
      "notes": "Supports C(check_mode).\nParameters that accept comma separated lists (I(privs), I(objs), I(roles)) have singular alias names (I(priv), I(obj), I(role)).\nTo revoke only C(GRANT OPTION) for a specific object, set I(state) to C(present) and I(grant_option) to C(no) (see examples).\nNote that when revoking privileges from a role R, this role  may still have access via privileges granted to any role R is a member of including C(PUBLIC).\nNote that when you use C(PUBLIC) role, the module always reports that the state has been changed.\nNote that when revoking privileges from a role R, you do so as the user specified via I(login). If R has been granted the same privileges by another user also, R can still access database objects via these privileges.\nWhen revoking privileges, C(RESTRICT) is assumed (see PostgreSQL docs).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "database": {
          "aliases": [
            "db",
            "login_db"
          ],
          "description": "Name of database to connect to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "fail_on_role": {
          "aliases": [],
          "description": "If C(yes), fail when target role (for whom privs need to be granted) does not exist. Otherwise just warn and continue.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "grant_option": {
          "aliases": [
            "admin_option"
          ],
          "description": "Whether C(role) may grant/revoke the specified privileges/group memberships to others.\nSet to C(no) to revoke GRANT OPTION, leave unspecified to make no changes.\nI(grant_option) only has an effect if I(state) is C(present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [
            "login_host"
          ],
          "description": "Database host address. If unspecified, connect via Unix socket.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login": {
          "aliases": [
            "login_user"
          ],
          "description": "The username to authenticate with.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "objs": {
          "aliases": [
            "obj"
          ],
          "description": "Comma separated list of database objects to set privileges on.\nIf I(type) is C(table), C(partition table), C(sequence), C(function) or C(procedure), the special value C(ALL_IN_SCHEMA) can be provided instead to specify all database objects of I(type) in the schema specified via I(schema). (This also works with PostgreSQL < 9.0.) (C(ALL_IN_SCHEMA) is available for C(function) and C(partition table) since Ansible 2.8).\nC(procedure) is supported since PostgreSQL 11 and community.postgresql collection 1.3.0.\nIf I(type) is C(database), this parameter can be omitted, in which case privileges are set for the database specified via I(database).\nIf I(type) is C(function) or C(procedure), colons (\":\") in object names will be replaced with commas (needed to specify signatures, see examples).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "login_password"
          ],
          "description": "The password to authenticate with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "privs": {
          "aliases": [
            "priv"
          ],
          "description": "Comma separated list of privileges to grant/revoke.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "roles": {
          "aliases": [
            "role"
          ],
          "description": "Comma separated list of role (user/group) names to set permissions for.\nThe special value C(PUBLIC) can be provided instead to set permissions for the implicitly defined PUBLIC group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Schema that contains the database objects specified via I(objs).\nMay only be provided if I(type) is C(table), C(sequence), C(function), C(procedure), C(type), or C(default_privs). Defaults to C(public) in these cases.\nPay attention, for embedded types when I(type=type) I(schema) can be C(pg_catalog) or C(information_schema) respectively.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting.\nThe specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(present), the specified privileges are granted, if C(absent) they are revoked.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "target_roles": {
          "aliases": [],
          "description": "A list of existing role (user/group) names to set as the default permissions for database objects subsequently created by them.\nParameter I(target_roles) is only available with C(type=default_privs).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(roles), I(target_roles), I(session_role), I(schema) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of database object to set privileges on.\nThe C(default_privs) choice is available starting at version 2.7.\nThe C(foreign_data_wrapper) and C(foreign_server) object types are available since Ansible version 2.8.\nThe C(type) choice is available since Ansible version 2.10.\nThe C(procedure) is supported since collection version 1.3.0 and PostgreSQL 11.",
          "default": "table",
          "type": "str",
          "required": false,
          "choices": [
            "database",
            "default_privs",
            "foreign_data_wrapper",
            "foreign_server",
            "function",
            "group",
            "language",
            "table",
            "tablespace",
            "schema",
            "sequence",
            "type",
            "procedure"
          ],
          "suboptions": {}
        },
        "unix_socket": {
          "aliases": [
            "login_unix_socket"
          ],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "usage_on_types": {
          "aliases": [],
          "description": "When adding default privileges, the module always implicitly adds ``USAGE ON TYPES``.\nTo avoid this behavior, set I(usage_on_types) to C(no).\nAdded to save backwards compatibility.\nUsed only when adding default privileges, ignored otherwise.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Grant or revoke privileges on PostgreSQL database objects"
    },
    "examples": "\n# On database \"library\":\n# GRANT SELECT, INSERT, UPDATE ON TABLE public.books, public.authors\n# TO librarian, reader WITH GRANT OPTION\n- name: Grant privs to librarian and reader on database library\n  community.postgresql.postgresql_privs:\n    database: library\n    state: present\n    privs: SELECT,INSERT,UPDATE\n    type: table\n    objs: books,authors\n    schema: public\n    roles: librarian,reader\n    grant_option: yes\n\n- name: Same as above leveraging default values\n  community.postgresql.postgresql_privs:\n    db: library\n    privs: SELECT,INSERT,UPDATE\n    objs: books,authors\n    roles: librarian,reader\n    grant_option: yes\n\n# REVOKE GRANT OPTION FOR INSERT ON TABLE books FROM reader\n# Note that role \"reader\" will be *granted* INSERT privilege itself if this\n# isn't already the case (since state: present).\n- name: Revoke privs from reader\n  community.postgresql.postgresql_privs:\n    db: library\n    state: present\n    priv: INSERT\n    obj: books\n    role: reader\n    grant_option: no\n\n# \"public\" is the default schema. This also works for PostgreSQL 8.x.\n- name: REVOKE INSERT, UPDATE ON ALL TABLES IN SCHEMA public FROM reader\n  community.postgresql.postgresql_privs:\n    db: library\n    state: absent\n    privs: INSERT,UPDATE\n    objs: ALL_IN_SCHEMA\n    role: reader\n\n- name: GRANT ALL PRIVILEGES ON SCHEMA public, math TO librarian\n  community.postgresql.postgresql_privs:\n    db: library\n    privs: ALL\n    type: schema\n    objs: public,math\n    role: librarian\n\n# Note the separation of arguments with colons.\n- name: GRANT ALL PRIVILEGES ON FUNCTION math.add(int, int) TO librarian, reader\n  community.postgresql.postgresql_privs:\n    db: library\n    privs: ALL\n    type: function\n    obj: add(int:int)\n    schema: math\n    roles: librarian,reader\n\n# Note that group role memberships apply cluster-wide and therefore are not\n# restricted to database \"library\" here.\n- name: GRANT librarian, reader TO alice, bob WITH ADMIN OPTION\n  community.postgresql.postgresql_privs:\n    db: library\n    type: group\n    objs: librarian,reader\n    roles: alice,bob\n    admin_option: yes\n\n# Note that here \"db: postgres\" specifies the database to connect to, not the\n# database to grant privileges on (which is specified via the \"objs\" param)\n- name: GRANT ALL PRIVILEGES ON DATABASE library TO librarian\n  community.postgresql.postgresql_privs:\n    db: postgres\n    privs: ALL\n    type: database\n    obj: library\n    role: librarian\n\n# If objs is omitted for type \"database\", it defaults to the database\n# to which the connection is established\n- name: GRANT ALL PRIVILEGES ON DATABASE library TO librarian\n  community.postgresql.postgresql_privs:\n    db: library\n    privs: ALL\n    type: database\n    role: librarian\n\n# Available since version 2.7\n# Objs must be set, ALL_DEFAULT to TABLES/SEQUENCES/TYPES/FUNCTIONS\n# ALL_DEFAULT works only with privs=ALL\n# For specific\n- name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO librarian\n  community.postgresql.postgresql_privs:\n    db: library\n    objs: ALL_DEFAULT\n    privs: ALL\n    type: default_privs\n    role: librarian\n    grant_option: yes\n\n# Available since version 2.7\n# Objs must be set, ALL_DEFAULT to TABLES/SEQUENCES/TYPES/FUNCTIONS\n# ALL_DEFAULT works only with privs=ALL\n# For specific\n- name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO reader, step 1\n  community.postgresql.postgresql_privs:\n    db: library\n    objs: TABLES,SEQUENCES\n    privs: SELECT\n    type: default_privs\n    role: reader\n\n- name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO reader, step 2\n  community.postgresql.postgresql_privs:\n    db: library\n    objs: TYPES\n    privs: USAGE\n    type: default_privs\n    role: reader\n\n# Available since version 2.8\n- name: GRANT ALL PRIVILEGES ON FOREIGN DATA WRAPPER fdw TO reader\n  community.postgresql.postgresql_privs:\n    db: test\n    objs: fdw\n    privs: ALL\n    type: foreign_data_wrapper\n    role: reader\n\n# Available since community.postgresql 0.2.0\n- name: GRANT ALL PRIVILEGES ON TYPE customtype TO reader\n  community.postgresql.postgresql_privs:\n    db: test\n    objs: customtype\n    privs: ALL\n    type: type\n    role: reader\n\n# Available since version 2.8\n- name: GRANT ALL PRIVILEGES ON FOREIGN SERVER fdw_server TO reader\n  community.postgresql.postgresql_privs:\n    db: test\n    objs: fdw_server\n    privs: ALL\n    type: foreign_server\n    role: reader\n\n# Available since version 2.8\n# Grant 'execute' permissions on all functions in schema 'common' to role 'caller'\n- name: GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA common TO caller\n  community.postgresql.postgresql_privs:\n    type: function\n    state: present\n    privs: EXECUTE\n    roles: caller\n    objs: ALL_IN_SCHEMA\n    schema: common\n\n# Available since collection version 1.3.0\n# Grant 'execute' permissions on all procedures in schema 'common' to role 'caller'\n# Needs PostreSQL 11 or higher and community.postgresql 1.3.0 or higher\n- name: GRANT EXECUTE ON ALL PROCEDURES IN SCHEMA common TO caller\n  community.postgresql.postgresql_privs:\n    type: prucedure\n    state: present\n    privs: EXECUTE\n    roles: caller\n    objs: ALL_IN_SCHEMA\n    schema: common\n\n# Available since version 2.8\n# ALTER DEFAULT PRIVILEGES FOR ROLE librarian IN SCHEMA library GRANT SELECT ON TABLES TO reader\n# GRANT SELECT privileges for new TABLES objects created by librarian as\n# default to the role reader.\n# For specific\n- name: ALTER privs\n  community.postgresql.postgresql_privs:\n    db: library\n    schema: library\n    objs: TABLES\n    privs: SELECT\n    type: default_privs\n    role: reader\n    target_roles: librarian\n\n# Available since version 2.8\n# ALTER DEFAULT PRIVILEGES FOR ROLE librarian IN SCHEMA library REVOKE SELECT ON TABLES FROM reader\n# REVOKE SELECT privileges for new TABLES objects created by librarian as\n# default from the role reader.\n# For specific\n- name: ALTER privs\n  community.postgresql.postgresql_privs:\n    db: library\n    state: absent\n    schema: library\n    objs: TABLES\n    privs: SELECT\n    type: default_privs\n    role: reader\n    target_roles: librarian\n\n# Available since community.postgresql 0.2.0\n- name: Grant type privileges for pg_catalog.numeric type to alice\n  community.postgresql.postgresql_privs:\n    type: type\n    roles: alice\n    privs: ALL\n    objs: numeric\n    schema: pg_catalog\n    db: acme\n"
  },
  "community.postgresql.postgresql_publication": {
    "doc": {
      "description": "Add, update, or remove PostgreSQL publication.",
      "has_action": false,
      "notes": "PostgreSQL version must be 10 or greater.\nSupports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cascade": {
          "aliases": [],
          "description": "Drop publication dependencies. Has effect with I(state=absent) only.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of the database to connect to and where the publication state will be changed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the publication to add, update, or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Publication owner.\nIf I(owner) is not defined, the owner will be set as I(login_user) or I(session_role).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parameters": {
          "aliases": [],
          "description": "Dictionary with optional publication parameters.\nAvailable parameters depend on PostgreSQL version.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The publication state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tables": {
          "aliases": [],
          "description": "List of tables to add to the publication.\nIf no value is set all tables are targeted.\nIf the publication already exists for specific tables and I(tables) is not passed, nothing will be changed.\nIf you need to add all tables to the publication with the same name, drop existent and create new without passing I(tables).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(name), I(tables), I(owner), I(session_role), I(params) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Add, update, or remove PostgreSQL publication"
    },
    "examples": "\n- name: Create a new publication with name \"acme\" targeting all tables in database \"test\"\n  community.postgresql.postgresql_publication:\n    db: test\n    name: acme\n\n- name: Create publication \"acme\" publishing only prices and vehicles tables\n  community.postgresql.postgresql_publication:\n    name: acme\n    tables:\n    - prices\n    - vehicles\n\n- name: >\n    Create publication \"acme\", set user alice as an owner, targeting all tables\n    Allowable DML operations are INSERT and UPDATE only\n  community.postgresql.postgresql_publication:\n    name: acme\n    owner: alice\n    parameters:\n      publish: 'insert,update'\n\n- name: >\n    Assuming publication \"acme\" exists and there are targeted\n    tables \"prices\" and \"vehicles\", add table \"stores\" to the publication\n  community.postgresql.postgresql_publication:\n    name: acme\n    tables:\n    - prices\n    - vehicles\n    - stores\n\n- name: Remove publication \"acme\" if exists in database \"test\"\n  community.postgresql.postgresql_publication:\n    db: test\n    name: acme\n    state: absent\n"
  },
  "community.postgresql.postgresql_query": {
    "doc": {
      "description": "Runs arbitrary PostgreSQL queries.\nCan run queries from SQL script files.\nDoes not run against backup files. Use M(community.postgresql.postgresql_db) with I(state=restore) to run queries on files made by pg_dump/pg_dumpall utilities.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "as_single_query": {
          "aliases": [],
          "description": "If C(yes), when reading from the I(path_to_script) file, executes its whole content in a single query.\nWhen C(yes), the C(query_all_results) return value contains only the result of the last statement.\nWhether the state is reported as changed or not is determined by the last statement of the file.\nUsed only when I(path_to_script) is specified, otherwise ignored.\nIf set to C(no), the script can contain only semicolon-separated queries. (see the I(path_to_script) option documentation).\nThe default value is C(no).",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "autocommit": {
          "aliases": [],
          "description": "Execute in autocommit mode when the query can't be run inside a transaction block (e.g., VACUUM).\nMutually exclusive with I(check_mode).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to and run queries against.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "encoding": {
          "aliases": [],
          "description": "Set the client encoding for the current session (e.g. C(UTF-8)).\nThe default is the encoding defined by the database.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "named_args": {
          "aliases": [],
          "description": "Dictionary of key-value arguments to pass to the query. When the value is a list, it will be converted to PostgreSQL array.\nMutually exclusive with I(positional_args).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "path_to_script": {
          "aliases": [],
          "description": "Path to a SQL script on the target machine.\nIf the script contains several queries, they must be semicolon-separated.\nTo run scripts containing objects with semicolons (for example, function and procedure definitions), use I(as_single_query=yes).\nTo upload dumps or to execute other complex scripts, the preferable way is to use the M(community.postgresql.postgresql_db) module with I(state=restore).\nMutually exclusive with I(query).",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "positional_args": {
          "aliases": [],
          "description": "List of values to be passed as positional arguments to the query. When the value is a list, it will be converted to PostgreSQL array.\nMutually exclusive with I(named_args).",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "SQL query to run. Variables can be escaped with psycopg2 syntax U(http://initd.org/psycopg/docs/usage.html).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "search_path": {
          "aliases": [],
          "description": "List of schema names to look in.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether a value of I(session_role) is potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via I(session_role) are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Run PostgreSQL queries"
    },
    "examples": "\n- name: Simple select query to acme db\n  community.postgresql.postgresql_query:\n    db: acme\n    query: SELECT version()\n\n- name: Select query to db acme with positional arguments and non-default credentials\n  community.postgresql.postgresql_query:\n    db: acme\n    login_user: django\n    login_password: mysecretpass\n    query: SELECT * FROM acme WHERE id = %s AND story = %s\n    positional_args:\n    - 1\n    - test\n\n- name: Select query to test_db with named_args\n  community.postgresql.postgresql_query:\n    db: test_db\n    query: SELECT * FROM test WHERE id = %(id_val)s AND story = %(story_val)s\n    named_args:\n      id_val: 1\n      story_val: test\n\n- name: Insert query to test_table in db test_db\n  community.postgresql.postgresql_query:\n    db: test_db\n    query: INSERT INTO test_table (id, story) VALUES (2, 'my_long_story')\n\n# If your script contains semicolons as parts of separate objects\n# like functions, procedures, and so on, use \"as_single_query: yes\"\n- name: Run queries from SQL script using UTF-8 client encoding for session\n  community.postgresql.postgresql_query:\n    db: test_db\n    path_to_script: /var/lib/pgsql/test.sql\n    positional_args:\n    - 1\n    encoding: UTF-8\n\n- name: Example of using autocommit parameter\n  community.postgresql.postgresql_query:\n    db: test_db\n    query: VACUUM\n    autocommit: yes\n\n- name: >\n    Insert data to the column of array type using positional_args.\n    Note that we use quotes here, the same as for passing JSON, etc.\n  community.postgresql.postgresql_query:\n    query: INSERT INTO test_table (array_column) VALUES (%s)\n    positional_args:\n    - '{1,2,3}'\n\n# Pass list and string vars as positional_args\n- name: Set vars\n  ansible.builtin.set_fact:\n    my_list:\n    - 1\n    - 2\n    - 3\n    my_arr: '{1, 2, 3}'\n\n- name: Select from test table by passing positional_args as arrays\n  community.postgresql.postgresql_query:\n    query: SELECT * FROM test_array_table WHERE arr_col1 = %s AND arr_col2 = %s\n    positional_args:\n    - '{{ my_list }}'\n    - '{{ my_arr|string }}'\n\n# Select from test table looking into app1 schema first, then,\n# if the schema doesn't exist or the table hasn't been found there,\n# try to find it in the schema public\n- name: Select from test using search_path\n  community.postgresql.postgresql_query:\n    query: SELECT * FROM test_array_table\n    search_path:\n    - app1\n    - public\n\n# If you use a variable in positional_args / named_args that can\n# be undefined and you wish to set it as NULL, the constructions like\n# \"{{ my_var if (my_var is defined) else none | default(none) }}\"\n# will not work as expected substituting an empty string instead of NULL.\n# If possible, we suggest to use Ansible's DEFAULT_JINJA2_NATIVE configuration\n# (https://docs.ansible.com/ansible/latest/reference_appendices/config.html#default-jinja2-native).\n# Enabling it fixes this problem. If you cannot enable it, the following workaround\n# can be used.\n# You should precheck such a value and define it as NULL when undefined.\n# For example:\n- name: When undefined, set to NULL\n  set_fact:\n    my_var: NULL\n  when: my_var is undefined\n\n# Then:\n- name: Insert a value using positional arguments\n  community.postgresql.postgresql_query:\n    query: INSERT INTO test_table (col1) VALUES (%s)\n    positional_args:\n    - '{{ my_var }}'\n"
  },
  "community.postgresql.postgresql_schema": {
    "doc": {
      "description": "Add or remove PostgreSQL schema.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cascade_drop": {
          "aliases": [],
          "description": "Drop schema with CASCADE to remove child objects.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "database": {
          "aliases": [
            "db",
            "login_db"
          ],
          "description": "Name of the database to connect to and add or remove the schema.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "schema"
          ],
          "description": "Name of the schema to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the role to set as owner of the schema.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting.\nThe specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The schema state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(schema), I(owner), I(session_role) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Add or remove PostgreSQL schema"
    },
    "examples": "\n- name: Create a new schema with name acme in test database\n  community.postgresql.postgresql_schema:\n    db: test\n    name: acme\n\n- name: Create a new schema acme with a user bob who will own it\n  community.postgresql.postgresql_schema:\n    name: acme\n    owner: bob\n\n- name: Drop schema \"acme\" with cascade\n  community.postgresql.postgresql_schema:\n    name: acme\n    state: absent\n    cascade_drop: yes\n"
  },
  "community.postgresql.postgresql_sequence": {
    "doc": {
      "description": "Allows to create, drop or change the definition of a sequence generator.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nIf you do not pass db parameter, sequence will be created in the database named postgres.\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cache": {
          "aliases": [],
          "description": "Cache specifies how many sequence numbers are to be preallocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cascade": {
          "aliases": [],
          "description": "Automatically drop objects that depend on the sequence, and in turn all objects that depend on those objects.\nIgnored if I(state=present).\nOnly used with I(state=absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cycle": {
          "aliases": [],
          "description": "The cycle option allows the sequence to wrap around when the I(maxvalue) or I(minvalue) has been reached by an ascending or descending sequence respectively. If the limit is reached, the next number generated will be the minvalue or maxvalue, respectively.\nIf C(false) (NO CYCLE) is specified, any calls to nextval after the sequence has reached its maximum value will return an error. False (NO CYCLE) is the default.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "data_type": {
          "aliases": [],
          "description": "Specifies the data type of the sequence. Valid types are bigint, integer, and smallint. bigint is the default. The data type determines the default minimum and maximum values of the sequence. For more info see the documentation U(https://www.postgresql.org/docs/current/sql-createsequence.html).\nSupported from PostgreSQL 10.",
          "type": "str",
          "required": false,
          "choices": [
            "bigint",
            "integer",
            "smallint"
          ],
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "database",
            "login_db"
          ],
          "description": "Name of database to connect to and run queries against.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "increment": {
          "aliases": [],
          "description": "Increment specifies which value is added to the current sequence value to create a new value.\nA positive value will make an ascending sequence, a negative one a descending sequence. The default value is 1.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maxvalue": {
          "aliases": [
            "max"
          ],
          "description": "Maxvalue determines the maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "minvalue": {
          "aliases": [
            "min"
          ],
          "description": "Minvalue determines the minimum value a sequence can generate. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "newschema": {
          "aliases": [],
          "description": "The new schema for the I(sequence). Will be used for moving a I(sequence) to another I(schema).\nWorks only for existing sequences.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Set the owner for the I(sequence).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rename_to": {
          "aliases": [],
          "description": "The new name for the I(sequence).\nWorks only for existing sequences.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "The schema of the I(sequence). This is be used to create and relocate a I(sequence) in the given schema.",
          "default": "public",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sequence": {
          "aliases": [
            "name"
          ],
          "description": "The name of the sequence.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified I(session_role) must be a role that the current I(login_user) is a member of.\nPermissions checking for SQL commands is carried out as though the I(session_role) were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "start": {
          "aliases": [],
          "description": "Start allows the sequence to begin anywhere. The default starting value is I(minvalue) for ascending sequences and I(maxvalue) for descending ones.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The sequence state.\nIf I(state=absent) other options will be ignored except of I(name) and I(schema).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(sequence), I(schema), I(rename_to), I(owner), I(newschema), I(session_role) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Create, drop, or alter a PostgreSQL sequence"
    },
    "examples": "\n- name: Create an ascending bigint sequence called foobar in the default\n        database\n  community.postgresql.postgresql_sequence:\n    name: foobar\n\n- name: Create an ascending integer sequence called foobar, starting at 101\n  community.postgresql.postgresql_sequence:\n    name: foobar\n    data_type: integer\n    start: 101\n\n- name: Create an descending sequence called foobar, starting at 101 and\n        preallocated 10 sequence numbers in cache\n  community.postgresql.postgresql_sequence:\n    name: foobar\n    increment: -1\n    cache: 10\n    start: 101\n\n- name: Create an ascending sequence called foobar, which cycle between 1 to 10\n  community.postgresql.postgresql_sequence:\n    name: foobar\n    cycle: yes\n    min: 1\n    max: 10\n\n- name: Create an ascending bigint sequence called foobar in the default\n        database with owner foobar\n  community.postgresql.postgresql_sequence:\n    name: foobar\n    owner: foobar\n\n- name: Rename an existing sequence named foo to bar\n  community.postgresql.postgresql_sequence:\n    name: foo\n    rename_to: bar\n\n- name: Change the schema of an existing sequence to foobar\n  community.postgresql.postgresql_sequence:\n    name: foobar\n    newschema: foobar\n\n- name: Change the owner of an existing sequence to foobar\n  community.postgresql.postgresql_sequence:\n    name: foobar\n    owner: foobar\n\n- name: Drop a sequence called foobar\n  community.postgresql.postgresql_sequence:\n    name: foobar\n    state: absent\n\n- name: Drop a sequence called foobar with cascade\n  community.postgresql.postgresql_sequence:\n    name: foobar\n    cascade: yes\n    state: absent\n"
  },
  "community.postgresql.postgresql_set": {
    "doc": {
      "description": "Allows to change a PostgreSQL server configuration parameter.\nThe module uses ALTER SYSTEM command and applies changes by reload server configuration.\nALTER SYSTEM is used for changing server configuration parameters across the entire database cluster.\nIt can be more convenient and safe than the traditional method of manually editing the postgresql.conf file.\nALTER SYSTEM writes the given parameter setting to the $PGDATA/postgresql.auto.conf file, which is read in addition to postgresql.conf.\nThe module allows to reset parameter to boot_val (cluster initial value) by I(reset=yes) or remove parameter string from postgresql.auto.conf and reload I(value=default) (for settings with postmaster context restart is required).\nAfter change you can see in the ansible output the previous and the new parameter value and other information using returned values and M(ansible.builtin.debug) module.",
      "has_action": false,
      "notes": "Supported version of PostgreSQL is 9.4 and later.\nSupports C(check_mode).\nPay attention, change setting with 'postmaster' context can return changed is true when actually nothing changes because the same value may be presented in several different form, for example, 1024MB, 1GB, etc. However in pg_settings system view it can be defined like 131072 number of 8kB pages. The final check of the parameter value cannot compare it because the server was not restarted and the value in pg_settings is not updated yet.\nFor some parameters restart of PostgreSQL server is required. See official documentation U(https://www.postgresql.org/docs/current/view-pg-settings.html).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of PostgreSQL server parameter. Pay attention that parameters are case sensitive (see examples below).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reset": {
          "aliases": [],
          "description": "Restore parameter to initial state (boot_val). Mutually exclusive with I(value).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Parameter value to set.\nTo remove parameter string from postgresql.auto.conf and reload the server configuration you must pass I(value=default). With I(value=default) the playbook always returns changed is true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Change a PostgreSQL server configuration parameter"
    },
    "examples": "\n- name: Restore wal_keep_segments parameter to initial state\n  community.postgresql.postgresql_set:\n    name: wal_keep_segments\n    reset: yes\n\n# Set work_mem parameter to 32MB and show what's been changed and restart is required or not\n# (output example: \"msg\": \"work_mem 4MB >> 64MB restart_req: False\")\n- name: Set work mem parameter\n  community.postgresql.postgresql_set:\n    name: work_mem\n    value: 32mb\n  register: set\n\n- name: Print the result if the setting changed\n  ansible.builtin.debug:\n    msg: \"{{ set.name }} {{ set.prev_val_pretty }} >> {{ set.value_pretty }} restart_req: {{ set.restart_required }}\"\n  when: set.changed\n# Ensure that the restart of PostgreSQL server must be required for some parameters.\n# In this situation you see the same parameter in prev_val_pretty and value_pretty, but 'changed=True'\n# (If you passed the value that was different from the current server setting).\n\n- name: Set log_min_duration_statement parameter to 1 second\n  community.postgresql.postgresql_set:\n    name: log_min_duration_statement\n    value: 1s\n\n- name: Set wal_log_hints parameter to default value (remove parameter from postgresql.auto.conf)\n  community.postgresql.postgresql_set:\n    name: wal_log_hints\n    value: default\n\n- name: Set TimeZone parameter (careful, case sensitive)\n  community.postgresql.postgresql_set:\n    name: TimeZone\n    value: 'Europe/Paris'\n\n"
  },
  "community.postgresql.postgresql_slot": {
    "doc": {
      "description": "Add or remove physical or logical replication slots from a PostgreSQL database.",
      "has_action": false,
      "notes": "Physical replication slots were introduced to PostgreSQL with version 9.4, while logical replication slots were added beginning with version 10.0.\nSupports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "immediately_reserve": {
          "aliases": [],
          "description": "Optional parameter that when C(yes) specifies that the LSN for this replication slot be reserved immediately, otherwise the default, C(no), specifies that the LSN is reserved on the first connection from a streaming replication client.\nIs available from PostgreSQL version 9.6.\nUses only with I(slot_type=physical).\nMutually exclusive with I(slot_type=logical).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "slot_name"
          ],
          "description": "Name of the replication slot to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "output_plugin": {
          "aliases": [],
          "description": "All logical slots must indicate which output plugin decoder they're using.\nThis parameter does not apply to physical slots.\nIt will be ignored with I(slot_type=physical).",
          "default": "test_decoding",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "slot_type": {
          "aliases": [],
          "description": "Slot type.",
          "default": "physical",
          "type": "str",
          "required": false,
          "choices": [
            "logical",
            "physical"
          ],
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The slot state.\nI(state=present) implies the slot must be present in the system.\nI(state=absent) implies the I(groups) must be revoked from I(target_roles).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check the value of I(session_role) is potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via I(session_role) are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Add or remove replication slots from a PostgreSQL database"
    },
    "examples": "\n- name: Create physical_one physical slot if doesn't exist\n  become_user: postgres\n  community.postgresql.postgresql_slot:\n    slot_name: physical_one\n    db: ansible\n\n- name: Remove physical_one slot if exists\n  become_user: postgres\n  community.postgresql.postgresql_slot:\n    slot_name: physical_one\n    db: ansible\n    state: absent\n\n- name: Create logical_one logical slot to the database acme if doesn't exist\n  community.postgresql.postgresql_slot:\n    name: logical_slot_one\n    slot_type: logical\n    state: present\n    output_plugin: custom_decoder_one\n    db: \"acme\"\n\n- name: Remove logical_one slot if exists from the cluster running on another host and non-standard port\n  community.postgresql.postgresql_slot:\n    name: logical_one\n    login_host: mydatabase.example.org\n    port: 5433\n    login_user: ourSuperuser\n    login_password: thePassword\n    state: absent\n"
  },
  "community.postgresql.postgresql_subscription": {
    "doc": {
      "description": "Add, update, or remove PostgreSQL subscription.",
      "has_action": false,
      "notes": "PostgreSQL version must be 10 or greater.\nSupports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cascade": {
          "aliases": [],
          "description": "Drop subscription dependencies. Has effect with I(state=absent) only.\nIgnored when I(state) is not C(absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "connparams": {
          "aliases": [],
          "description": "The connection dict param-value to connect to the publisher.\nFor more information see U(https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).\nIgnored when I(state) is not C(present).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of the database to connect to and where the subscription state will be changed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the subscription to add, update, or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Subscription owner.\nIf I(owner) is not defined, the owner will be set as I(login_user) or I(session_role).\nIgnored when I(state) is not C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "publications": {
          "aliases": [],
          "description": "The publication names on the publisher to use for the subscription.\nIgnored when I(state) is not C(present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The subscription state.\nC(present) implies that if I(name) subscription doesn't exist, it will be created.\nC(absent) implies that if I(name) subscription exists, it will be removed.\nC(refresh) implies that if I(name) subscription exists, it will be refreshed. Fetch missing table information from publisher. Always returns ``changed`` is ``True``. This will start replication of tables that were added to the subscribed-to publications since the last invocation of REFRESH PUBLICATION or since CREATE SUBSCRIPTION. The existing data in the publications that are being subscribed to should be copied once the replication starts.\nFor more information about C(refresh) see U(https://www.postgresql.org/docs/current/sql-altersubscription.html).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "refresh"
          ],
          "suboptions": {}
        },
        "subsparams": {
          "aliases": [],
          "description": "Dictionary of optional parameters for a subscription, e.g. copy_data, enabled, create_slot, etc.\nFor update the subscription allowed keys are C(enabled), C(slot_name), C(synchronous_commit), C(publication_name).\nSee available parameters to create a new subscription on U(https://www.postgresql.org/docs/current/sql-createsubscription.html).\nIgnored when I(state) is not C(present).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(name), I(publications), I(owner), I(session_role), I(connparams), I(subsparams) are potentially dangerous.\nIt makes sense to use C(yes) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Add, update, or remove PostgreSQL subscription",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: >\n    Create acme subscription in mydb database using acme_publication and\n    the following connection parameters to connect to the publisher.\n    Set the subscription owner as alice.\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    state: present\n    publications: acme_publication\n    owner: alice\n    connparams:\n      host: 127.0.0.1\n      port: 5432\n      user: repl\n      password: replpass\n      dbname: mydb\n\n- name: Assuming that acme subscription exists, try to change conn parameters\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    connparams:\n      host: 127.0.0.1\n      port: 5432\n      user: repl\n      password: replpass\n      connect_timeout: 100\n\n- name: Refresh acme publication\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    state: refresh\n\n- name: Drop acme subscription from mydb with dependencies (cascade=yes)\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    state: absent\n    cascade: yes\n\n- name: Assuming that acme subscription exists and enabled, disable the subscription\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    state: present\n    subsparams:\n      enabled: no\n"
  },
  "community.postgresql.postgresql_table": {
    "doc": {
      "description": "Allows to create, drop, rename, truncate a table, or change some table attributes.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nIf you do not pass db parameter, tables will be created in the database named postgres.\nPostgreSQL allows to create columnless table, so columns param is optional.\nUnlogged tables are available from PostgreSQL server version 9.1.\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cascade": {
          "aliases": [],
          "description": "Automatically drop objects that depend on the table (such as views). Used with I(state=absent) only.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "columns": {
          "aliases": [],
          "description": "Columns that are needed.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect and where the table will be created.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "including": {
          "aliases": [],
          "description": "Keywords that are used with like parameter, may be DEFAULTS, CONSTRAINTS, INDEXES, STORAGE, COMMENTS or ALL. Needs I(like) specified. Mutually exclusive with I(columns), I(rename), and I(truncate).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "like": {
          "aliases": [],
          "description": "Create a table like another table (with similar DDL). Mutually exclusive with I(columns), I(rename), and I(truncate).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Set a table owner.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rename": {
          "aliases": [],
          "description": "New table name. Mutually exclusive with I(tablespace), I(owner), I(unlogged), I(like), I(including), I(columns), I(truncate), and I(storage_params).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The table state. I(state=absent) is mutually exclusive with I(tablespace), I(owner), I(unlogged), I(like), I(including), I(columns), I(truncate), I(storage_params) and, I(rename).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "storage_params": {
          "aliases": [],
          "description": "Storage parameters like fillfactor, autovacuum_vacuum_treshold, etc. Mutually exclusive with I(rename) and I(truncate).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "table": {
          "aliases": [
            "name"
          ],
          "description": "Table name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "tablespace": {
          "aliases": [],
          "description": "Set a tablespace for the table.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "truncate": {
          "aliases": [],
          "description": "Truncate a table. Mutually exclusive with I(tablespace), I(owner), I(unlogged), I(like), I(including), I(columns), I(rename), and I(storage_params).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "unlogged": {
          "aliases": [],
          "description": "Create an unlogged table.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Create, drop, or modify a PostgreSQL table"
    },
    "examples": "\n- name: Create tbl2 in the acme database with the DDL like tbl1 with testuser as an owner\n  community.postgresql.postgresql_table:\n    db: acme\n    name: tbl2\n    like: tbl1\n    owner: testuser\n\n- name: Create tbl2 in the acme database and tablespace ssd with the DDL like tbl1 including comments and indexes\n  community.postgresql.postgresql_table:\n    db: acme\n    table: tbl2\n    like: tbl1\n    including: comments, indexes\n    tablespace: ssd\n\n- name: Create test_table with several columns in ssd tablespace with fillfactor=10 and autovacuum_analyze_threshold=1\n  community.postgresql.postgresql_table:\n    name: test_table\n    columns:\n    - id bigserial primary key\n    - num bigint\n    - stories text\n    tablespace: ssd\n    storage_params:\n    - fillfactor=10\n    - autovacuum_analyze_threshold=1\n\n- name: Create an unlogged table in schema acme\n  community.postgresql.postgresql_table:\n    name: acme.useless_data\n    columns: waste_id int\n    unlogged: true\n\n- name: Rename table foo to bar\n  community.postgresql.postgresql_table:\n    table: foo\n    rename: bar\n\n- name: Rename table foo from schema acme to bar\n  community.postgresql.postgresql_table:\n    name: acme.foo\n    rename: bar\n\n- name: Set owner to someuser\n  community.postgresql.postgresql_table:\n    name: foo\n    owner: someuser\n\n- name: Change tablespace of foo table to new_tablespace and set owner to new_user\n  community.postgresql.postgresql_table:\n    name: foo\n    tablespace: new_tablespace\n    owner: new_user\n\n- name: Truncate table foo\n  community.postgresql.postgresql_table:\n    name: foo\n    truncate: yes\n\n- name: Drop table foo from schema acme\n  community.postgresql.postgresql_table:\n    name: acme.foo\n    state: absent\n\n- name: Drop table bar cascade\n  community.postgresql.postgresql_table:\n    name: bar\n    state: absent\n    cascade: yes\n"
  },
  "community.postgresql.postgresql_tablespace": {
    "doc": {
      "description": "Adds or removes PostgreSQL tablespaces from remote hosts.",
      "has_action": false,
      "notes": "I(state=absent) and I(state=present) (the second one if the tablespace doesn't exist) do not support check mode because the corresponding PostgreSQL DROP and CREATE TABLESPACE commands can not be run inside the transaction block.\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to and run queries against.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "location": {
          "aliases": [
            "path"
          ],
          "description": "Path to the tablespace directory in the file system.\nEnsure that the location exists and has right privileges.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "Name of the role to set as an owner of the tablespace.\nIf this option is not specified, the tablespace owner is a role that creates the tablespace.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rename_to": {
          "aliases": [],
          "description": "New name of the tablespace.\nThe new name cannot begin with pg_, as such names are reserved for system tablespaces.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "set": {
          "aliases": [],
          "description": "Dict of tablespace options to set. Supported from PostgreSQL 9.0.\nFor more information see U(https://www.postgresql.org/docs/current/sql-createtablespace.html).\nWhen reset is passed as an option's value, if the option was set previously, it will be removed.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Tablespace state.\nI(state=present) implies the tablespace must be created if it doesn't exist.\nI(state=absent) implies the tablespace must be removed if present. I(state=absent) is mutually exclusive with I(location), I(owner), i(set).\nSee the Notes section for information about check mode restrictions.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tablespace": {
          "aliases": [
            "name"
          ],
          "description": "Name of the tablespace to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check whether values of parameters I(tablespace), I(location), I(owner), I(rename_to), I(session_role), I(settings_list) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via the parameters are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Add or remove PostgreSQL tablespaces from remote hosts"
    },
    "examples": "\n- name: Create a new tablespace called acme and set bob as an its owner\n  community.postgresql.postgresql_tablespace:\n    name: acme\n    owner: bob\n    location: /data/foo\n\n- name: Create a new tablespace called bar with tablespace options\n  community.postgresql.postgresql_tablespace:\n    name: bar\n    set:\n      random_page_cost: 1\n      seq_page_cost: 1\n\n- name: Reset random_page_cost option\n  community.postgresql.postgresql_tablespace:\n    name: bar\n    set:\n      random_page_cost: reset\n\n- name: Rename the tablespace from bar to pcie_ssd\n  community.postgresql.postgresql_tablespace:\n    name: bar\n    rename_to: pcie_ssd\n\n- name: Drop tablespace called bloat\n  community.postgresql.postgresql_tablespace:\n    name: bloat\n    state: absent\n"
  },
  "community.postgresql.postgresql_user": {
    "doc": {
      "description": "Creates, alters, or removes a user (role) from a PostgreSQL server instance (\"cluster\" in PostgreSQL terminology) and, optionally, grants the user access to an existing database or tables.\nA user is a role with login privilege.\nYou can also use it to grant or revoke user's privileges in a particular database.\nYou cannot remove a user while it still has any privileges granted to it in any database.\nSet I(fail_on_user) to C(no) to make the module ignore failures when trying to remove a user. In this case, the module reports if changes happened as usual and separately reports whether the user has been removed or not.",
      "has_action": false,
      "notes": "The module creates a user (role) with login privilege by default. Use C(NOLOGIN) I(role_attr_flags) to change this behaviour.\nIf you specify C(PUBLIC) as the user (role), then the privilege changes apply to all users (roles). You may not specify password or role_attr_flags when the C(PUBLIC) user is specified.\nSCRAM-SHA-256-hashed passwords (SASL Authentication) require PostgreSQL version 10 or newer. On the previous versions the whole hashed string is used as a password.\nWorking with SCRAM-SHA-256-hashed passwords, be sure you use the I(environment:) variable C(PGOPTIONS: \"-c password_encryption=scram-sha-256\") (see the provided example).\nOn some systems (such as AWS RDS), C(pg_authid) is not accessible, thus, the module cannot compare the current and desired C(password). In this case, the module assumes that the passwords are different and changes it reporting that the state has been changed. To skip all password related checks for existing users, use I(no_password_changes=yes).\nSupports ``check_mode``.\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, verifies that the server's certificate is signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Adds a comment on the user (equivalent to the C(COMMENT ON ROLE) statement).",
          "type": "str",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        },
        "conn_limit": {
          "aliases": [],
          "description": "Specifies the user (role) connection limit.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect to and where user's permissions are granted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "encrypted": {
          "aliases": [],
          "description": "Whether the password is stored hashed in the database.\nYou can specify an unhashed password, and PostgreSQL ensures the stored password is hashed when I(encrypted=yes) is set. If you specify a hashed password, the module uses it as-is, regardless of the setting of I(encrypted).\nNote: Postgresql 10 and newer does not support unhashed passwords.\nPrevious to Ansible 2.6, this was C(no) by default.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "expires": {
          "aliases": [],
          "description": "The date at which the user's password is to expire.\nIf set to C('infinity'), user's password never expires.\nNote that this value must be a valid SQL date and time type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fail_on_user": {
          "aliases": [
            "fail_on_role"
          ],
          "description": "If C(yes), fails when the user (role) cannot be removed. Otherwise just log and continue.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "The list of groups (roles) that you want to grant to the user.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "user"
          ],
          "description": "Name of the user (role) to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "no_password_changes": {
          "aliases": [],
          "description": "If C(yes), does not inspect the database for password changes. If the user already exists, skips all password related checks. Useful when C(pg_authid) is not accessible (such as in AWS RDS). Otherwise, makes password changes as necessary.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Set the user's password, before 1.4 this was required.\nPassword can be passed unhashed or hashed (MD5-hashed).\nAn unhashed password is automatically hashed when saved into the database if I(encrypted) is set, otherwise it is saved in plain text format.\nWhen passing an MD5-hashed password, you must generate it with the format C('str[\"md5\"] + md5[ password + username ]'), resulting in a total of 35 characters. An easy way to do this is C(echo \"md5`echo -n 'verysecretpasswordJOE' | md5sum | awk '{print $1}'`\").\nNote that if the provided password string is already in MD5-hashed format, then it is used as-is, regardless of I(encrypted) option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "priv": {
          "aliases": [],
          "description": "Slash-separated PostgreSQL privileges string: C(priv1/priv2), where you can define the user's privileges for the database ( allowed options - 'CREATE', 'CONNECT', 'TEMPORARY', 'TEMP', 'ALL'. For example C(CONNECT) ) or for table ( allowed options - 'SELECT', 'INSERT', 'UPDATE', 'DELETE', 'TRUNCATE', 'REFERENCES', 'TRIGGER', 'ALL'. For example C(table:SELECT) ). Mixed example of this string: C(CONNECT/CREATE/table1:SELECT/table2:INSERT).\nWhen I(priv) contains tables, the module uses the schema C(public) by default. If you need to specify a different schema, use the C(schema_name.table_name) notation, for example, C(pg_catalog.pg_stat_database:SELECT).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "role_attr_flags": {
          "aliases": [],
          "description": "PostgreSQL user attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER.\nNote that '[NO]CREATEUSER' is deprecated.\nTo create a simple role for using it like a group, use C(NOLOGIN) flag.\nSee the full list of supported flags in documentation for your PostgreSQL version.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session role after connecting.\nThe specified session role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines how an SSL session is negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The user (role) state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), checks whether values of options I(name), I(password), I(privs), I(expires), I(role_attr_flags), I(groups), I(comment), I(session_role) are potentially dangerous.\nIt makes sense to use C(no) only when SQL injections through the options are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Create, alter, or remove a user (role) from a PostgreSQL server instance"
    },
    "examples": "\n- name: Connect to acme database, create django user, and grant access to database and products table\n  community.postgresql.postgresql_user:\n    db: acme\n    name: django\n    password: ceec4eif7ya\n    priv: \"CONNECT/products:ALL\"\n    expires: \"Jan 31 2020\"\n\n- name: Add a comment on django user\n  community.postgresql.postgresql_user:\n    db: acme\n    name: django\n    comment: This is a test user\n\n# Connect to default database, create rails user, set its password (MD5-hashed),\n# and grant privilege to create other databases and demote rails from super user status if user exists\n- name: Create rails user, set MD5-hashed password, grant privs\n  community.postgresql.postgresql_user:\n    name: rails\n    password: md59543f1d82624df2b31672ec0f7050460\n    role_attr_flags: CREATEDB,NOSUPERUSER\n\n- name: Connect to acme database and remove test user privileges from there\n  community.postgresql.postgresql_user:\n    db: acme\n    name: test\n    priv: \"ALL/products:ALL\"\n    state: absent\n    fail_on_user: no\n\n- name: Connect to test database, remove test user from cluster\n  community.postgresql.postgresql_user:\n    db: test\n    name: test\n    priv: ALL\n    state: absent\n\n- name: Connect to acme database and set user's password with no expire date\n  community.postgresql.postgresql_user:\n    db: acme\n    name: django\n    password: mysupersecretword\n    priv: \"CONNECT/products:ALL\"\n    expires: infinity\n\n# Example privileges string format\n# INSERT,UPDATE/table:SELECT/anothertable:ALL\n\n- name: Connect to test database and remove an existing user's password\n  community.postgresql.postgresql_user:\n    db: test\n    user: test\n    password: \"\"\n\n- name: Create user test and grant group user_ro and user_rw to it\n  community.postgresql.postgresql_user:\n    name: test\n    groups:\n    - user_ro\n    - user_rw\n\n# Create user with a cleartext password if it does not exist or update its password.\n# The password will be encrypted with SCRAM algorithm (available since PostgreSQL 10)\n- name: Create appclient user with SCRAM-hashed password\n  community.postgresql.postgresql_user:\n    name: appclient\n    password: \"secret123\"\n  environment:\n    PGOPTIONS: \"-c password_encryption=scram-sha-256\"\n\n- name: Create a user, grant SELECT on pg_catalog.pg_stat_database\n  community.postgresql.postgresql_user:\n    name: monitoring\n    priv: 'pg_catalog.pg_stat_database:SELECT'\n"
  },
  "community.postgresql.postgresql_user_obj_stat_info": {
    "doc": {
      "description": "Gathers statistics about PostgreSQL user objects.",
      "has_action": false,
      "notes": "C(size) and C(total_size) returned values are presented in bytes.\nFor tracking function statistics the PostgreSQL C(track_functions) parameter must be enabled. See U(https://www.postgresql.org/docs/current/runtime-config-statistics.html) for more information.\nSupports C(check_mode).\nThe default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.\nTo avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).\nThis module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.\nIf the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.\nFor Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.\nThe ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3.",
      "options": {
        "ca_cert": {
          "aliases": [
            "ssl_rootcert"
          ],
          "description": "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).\nIf the file exists, the server's certificate will be verified to be signed by one of these authorities.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [
            "login_db"
          ],
          "description": "Name of database to connect.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "Limit the collected information by comma separated string or YAML list.\nAllowable values are C(functions), C(indexes), C(tables).\nBy default, collects all subsets.\nUnsupported values are ignored.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "Host running the database.\nIf you have connection issues when using C(localhost), try to use C(127.0.0.1) instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password this module should use to establish its PostgreSQL session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_unix_socket": {
          "aliases": [],
          "description": "Path to a Unix domain socket for local connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The username this module should use to establish its PostgreSQL session.",
          "default": "postgres",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [
            "login_port"
          ],
          "description": "Database port to connect to.",
          "default": "5432",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Restrict the output by certain schema.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "session_role": {
          "aliases": [],
          "description": "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.\nPermissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_mode": {
          "aliases": [],
          "description": "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.\nSee U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.\nDefault of C(prefer) matches libpq default.",
          "default": "prefer",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "disable",
            "prefer",
            "require",
            "verify-ca",
            "verify-full"
          ],
          "suboptions": {}
        },
        "trust_input": {
          "aliases": [],
          "description": "If C(no), check the value of I(session_role) is potentially dangerous.\nIt makes sense to use C(no) only when SQL injections via I(session_role) are possible.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "0.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "psycopg2"
      ],
      "short_description": "Gather statistics about PostgreSQL user objects",
      "version_added": "0.2.0"
    },
    "examples": "\n- name: Collect information about all supported user objects of the acme database\n  community.postgresql.postgresql_user_obj_stat_info:\n    db: acme\n\n- name: Collect information about all supported user objects in the custom schema of the acme database\n  community.postgresql.postgresql_user_obj_stat_info:\n    db: acme\n    schema: custom\n\n- name: Collect information about user tables and indexes in the acme database\n  community.postgresql.postgresql_user_obj_stat_info:\n    db: acme\n    filter: tables, indexes\n"
  }
}