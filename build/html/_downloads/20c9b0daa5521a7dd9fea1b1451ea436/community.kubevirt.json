{
  "community.kubevirt.kubevirt_cdi_upload": {
    "doc": {
      "description": "Use Openshift Python SDK to create UploadTokenRequest objects.\nTransfer contents of local files to the CDI Upload Proxy.",
      "has_action": false,
      "notes": "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file.",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "ssl_ca_cert"
          ],
          "description": "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert_file"
          ],
          "description": "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key_file"
          ],
          "description": "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "context": {
          "aliases": [],
          "description": "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kubeconfig": {
          "aliases": [],
          "description": "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the Kubernetes client will attempt to load the default configuration file from I(~/.kube/config). Can also be specified via K8S_AUTH_KUBECONFIG environment variable.\nThe kubernetes configuration can be provided as dictionary. This feature requires a python kubernetes client version >= 17.17.0. Added in version 2.2.0.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "merge_type": {
          "aliases": [],
          "description": "Whether to override the default patch merge approach with a specific type. By default, the strategic merge will typically be used.",
          "type": "list",
          "required": false,
          "choices": [
            "json",
            "merge",
            "strategic-merge"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.\nPlease read the description of the C(username) option for a discussion of when this option is applicable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path of local image file to transfer.",
          "required": false,
          "suboptions": {}
        },
        "persist_config": {
          "aliases": [],
          "description": "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.\nWhen the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.\nDefault to false.\nPlease note that the current version of the k8s python client library does not support setting this flag to True yet.\nThe fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.\nPlease note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_headers": {
          "aliases": [],
          "description": "The Header used for the HTTP proxy.\nDocumentation can be found here U(https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html?highlight=proxy_headers#urllib3.util.make_headers).",
          "type": "dict",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {
            "basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "proxy_basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for proxy basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_PROXY_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user_agent": {
              "aliases": [],
              "description": "String representing the user-agent you want, such as foo/1.0.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_USER_AGENT environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "pvc_name": {
          "aliases": [],
          "description": "Use to specify the name of the target PersistentVolumeClaim.",
          "required": true,
          "suboptions": {}
        },
        "pvc_namespace": {
          "aliases": [],
          "description": "Use to specify the namespace of the target PersistentVolumeClaim.",
          "required": true,
          "suboptions": {}
        },
        "upload_host": {
          "aliases": [],
          "description": "URL containing the host and port on which the CDI Upload Proxy is available.\nMore info: U(https://github.com/kubevirt/containerized-data-importer/blob/master/doc/upload.md#expose-cdi-uploadproxy-service)",
          "required": false,
          "suboptions": {}
        },
        "upload_host_validate_certs": {
          "aliases": [
            "upload_host_verify_ssl"
          ],
          "description": "Whether or not to verify the CDI Upload Proxy's SSL certificates against your system's CA trust store.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.\nPlease note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the M(community.okd.k8s_auth) module, as that might do what you need.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "openshift >= 0.8.2",
        "requests >= 2.0.0"
      ],
      "short_description": "Upload local VM images to CDI Upload Proxy."
    },
    "examples": "\n- name: Upload local image to pvc-vm1\n  community.kubevirt.kubevirt_cdi_upload:\n    pvc_namespace: default\n    pvc_name: pvc-vm1\n    upload_host: https://localhost:8443\n    upload_host_validate_certs: false\n    path: /tmp/cirros-0.4.0-x86_64-disk.img\n"
  },
  "community.kubevirt.kubevirt_preset": {
    "doc": {
      "description": "Use Openshift Python SDK to manage the state of KubeVirt virtual machine presets.",
      "has_action": false,
      "notes": "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file.\nIn order to use this module you have to install Openshift Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=openshift>=0.8.2)",
      "options": {
        "affinity": {
          "aliases": [],
          "description": "Describes node affinity scheduling rules for the vm.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to a vm label update), the system may or may not try to eventually evict the vm from its node. When there are multiple elements, the lists of nodes corresponding to each C(term) are intersected, i.e. all terms must be satisfied.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node has vms which matches the corresponding C(term); the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "anti_affinity": {
          "aliases": [],
          "description": "Describes vm anti-affinity scheduling rules e.g. avoid putting this vm in the same node, zone, etc. as some other vms.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to a vm label update), the system may or may not try to eventually evict the vm from its node. When there are multiple elements, the lists of nodes corresponding to each C(term) are intersected, i.e. all terms must be satisfied.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node has vms which matches the corresponding C(term); the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "api_key": {
          "aliases": [],
          "description": "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bootloader": {
          "aliases": [],
          "description": "Specify the bootloader of the virtual machine.\nAll virtual machines use BIOS by default for booting.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "ssl_ca_cert"
          ],
          "description": "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert_file"
          ],
          "description": "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key_file"
          ],
          "description": "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "cloud_init_nocloud": {
          "aliases": [],
          "description": "Represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the virtual machine. A proper cloud-init installation is required inside the guest. More information U(https://kubevirt.io/api-reference/master/definitions.html#_v1_cloudinitnocloudsource)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "context": {
          "aliases": [],
          "description": "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_cores": {
          "aliases": [],
          "description": "Number of CPU cores.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_features": {
          "aliases": [],
          "description": "List of dictionary to fine-tune features provided by the selected CPU model.\nI(Note): Policy attribute can either be omitted or contain one of the following policies: force, require, optional, disable, forbid.\nI(Note): In case a policy is omitted for a feature, it will default to require.\nMore information about policies: U(https://libvirt.org/formatdomain.html#elementsCPU)",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "cpu_limit": {
          "aliases": [],
          "description": "Is converted to its millicore value and multiplied by 100. The resulting value is the total amount of CPU time that a container can use every 100ms. A virtual machine cannot use more than its share of CPU time during this interval.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_model": {
          "aliases": [],
          "description": "CPU model.\nYou can check list of available models here: U(https://github.com/libvirt/libvirt/blob/master/src/cpu_map/index.xml).\nI(Note:) User can define default CPU model via as I(default-cpu-model) in I(kubevirt-config) I(ConfigMap), if not set I(host-model) is used.\nI(Note:) Be sure that node CPU model where you run a VM, has the same or higher CPU family.\nI(Note:) If CPU model wasn't defined, the VM will have CPU model closest to one that used on the node where the VM is running.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_shares": {
          "aliases": [],
          "description": "Specify CPU shares.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "disks": {
          "aliases": [],
          "description": "List of dictionaries which specify disks of the virtual machine.\nA disk can be made accessible via four different types: I(disk), I(lun), I(cdrom), I(floppy).\nAll possible configuration options are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_disk)\nEach disk must have specified a I(volume) that declares which volume type of the disk All possible configuration options of volume are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_volume).",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If set to C(no), and I(state) is C(present), an existing object will be replaced.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "headless": {
          "aliases": [],
          "description": "Specify if the virtual machine should have attached a  minimal Video and Graphics device configuration.\nBy default a minimal Video and Graphics device configuration will be applied to the VirtualMachineInstance. The video device is vga compatible and comes with a memory size of 16 MB.",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Specifies the hostname of the virtual machine. The hostname will be set either by dhcp, cloud-init if configured or virtual machine name will be used.",
          "required": false,
          "suboptions": {}
        },
        "hugepage_size": {
          "aliases": [],
          "description": "Specify huge page size.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "An interface defines a virtual network interface of a virtual machine (also called a frontend).\nAll possible configuration options interfaces are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_interface)\nEach interface must have specified a I(network) that declares which logical or physical device it is connected to (also called as backend). All possible configuration options of network are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_network).",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "kubeconfig": {
          "aliases": [],
          "description": "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the Kubernetes client will attempt to load the default configuration file from I(~/.kube/config). Can also be specified via K8S_AUTH_KUBECONFIG environment variable.\nThe kubernetes configuration can be provided as dictionary. This feature requires a python kubernetes client version >= 17.17.0. Added in version 2.2.0.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Labels are key/value pairs that are attached to virtual machines. Labels are intended to be used to specify identifying attributes of virtual machines that are meaningful and relevant to users, but do not directly imply semantics to the core system. Labels can be used to organize and to select subsets of virtual machines. Labels can be attached to virtual machines at creation time and subsequently added and modified at any time.\nMore on labels that are used for internal implementation U(https://kubevirt.io/user-guide/#/misc/annotations_and_labels)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "machine_type": {
          "aliases": [],
          "description": "QEMU machine type is the actual chipset of the virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "The amount of memory to be requested by virtual machine.\nFor example 1024Mi.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_limit": {
          "aliases": [],
          "description": "The maximum memory to be used by virtual machine.\nFor example 1024Mi.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "merge_type": {
          "aliases": [],
          "description": "Whether to override the default patch merge approach with a specific type.\nIf more than one merge type is given, the merge types will be tried in order.\nDefaults to C(['strategic-merge', 'merge']), which is ideal for using the same parameters on resource kinds that combine Custom Resources and built-in resources, as Custom Resource Definitions typically aren't updatable by the usual strategic merge.\nSee U(https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment)",
          "type": "list",
          "required": false,
          "choices": [
            "json",
            "merge",
            "strategic-merge"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine preset.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace where the virtual machine preset exists.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "node_affinity": {
          "aliases": [],
          "description": "Describes vm affinity scheduling rules e.g. co-locate this vm in the same node, zone, etc. as some other vms",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to an update), the system may or may not try to eventually evict the vm from its node.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node matches the corresponding match_expressions; the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [],
          "description": "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.\nPlease read the description of the C(username) option for a discussion of when this option is applicable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "persist_config": {
          "aliases": [],
          "description": "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.\nWhen the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.\nDefault to false.\nPlease note that the current version of the k8s python client library does not support setting this flag to True yet.\nThe fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.\nPlease note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_headers": {
          "aliases": [],
          "description": "The Header used for the HTTP proxy.\nDocumentation can be found here U(https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html?highlight=proxy_headers#urllib3.util.make_headers).",
          "type": "dict",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {
            "basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "proxy_basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for proxy basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_PROXY_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user_agent": {
              "aliases": [],
              "description": "String representing the user-agent you want, such as foo/1.0.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_USER_AGENT environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "resource_definition": {
          "aliases": [
            "definition",
            "inline"
          ],
          "description": "A partial YAML definition of the object being created/updated. Here you can define Kubernetes resource parameters not covered by this module's parameters.\nNOTE: I(resource_definition) has lower priority than module parameters. If you try to define e.g. I(metadata.namespace) here, that value will be ignored and I(namespace) used instead.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "selector": {
          "aliases": [],
          "description": "Selector is a label query over a set of virtual machine preset.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "smbios_uuid": {
          "aliases": [],
          "description": "In order to provide a consistent view on the virtualized hardware for the guest OS, the SMBIOS UUID can be set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete virtual machine presets.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subdomain": {
          "aliases": [],
          "description": "If specified, the fully qualified virtual machine hostname will be hostname.subdomain.namespace.svc.cluster_domain. If not specified, the virtual machine will not have a domain name at all. The DNS entry will resolve to the virtual machine, no matter if the virtual machine itself can pick up a hostname.",
          "required": false,
          "suboptions": {}
        },
        "tablets": {
          "aliases": [],
          "description": "Specify tablets to be used as input devices",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.\nPlease note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the M(community.okd.k8s_auth) module, as that might do what you need.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "I(True) if the module should wait for the resource to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_sleep": {
          "aliases": [],
          "description": "Number of seconds to sleep between checks.",
          "default": "5",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the resource to get into desired state.",
          "default": "120",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openshift >= 0.8.2",
        "python >= 2.7"
      ],
      "short_description": "Manage KubeVirt virtual machine presets"
    },
    "examples": "\n- name: Create virtual machine preset 'vmi-preset-small'\n  community.kubevirt.kubevirt_preset:\n      state: present\n      name: vmi-preset-small\n      namespace: vms\n      memory: 64M\n      selector:\n        matchLabels:\n            kubevirt.io/vmPreset: vmi-preset-small\n\n- name: Remove virtual machine preset 'vmi-preset-small'\n  community.kubevirt.kubevirt_preset:\n      state: absent\n      name: vmi-preset-small\n      namespace: vms\n"
  },
  "community.kubevirt.kubevirt_pvc": {
    "doc": {
      "description": "Use Openshift Python SDK to manage PVCs on Kubernetes\nSupport Containerized Data Importer out of the box",
      "has_action": false,
      "notes": "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file.",
      "options": {
        "access_modes": {
          "aliases": [],
          "description": "Contains the desired access modes the volume should have.\nMore info: U(https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes)",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "annotations": {
          "aliases": [],
          "description": "Annotations attached to this object.\nU(https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "ssl_ca_cert"
          ],
          "description": "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "cdi_source": {
          "aliases": [],
          "description": "If data is to be copied onto the PVC using the Containerized Data Importer you can specify the source of the data (along with any additional configuration) as well as it's format.\nValid source types are: blank, http, s3, registry, pvc and upload. The last one requires using the M(community.kubevirt.kubevirt_cdi_upload) module to actually perform an upload.\nSource data format is specified using the optional I(content_type). Valid options are C(kubevirt) (default; raw image) and C(archive) (tar.gz).\nThis uses the DataVolume source syntax: U(https://github.com/kubevirt/containerized-data-importer/blob/master/doc/datavolumes.md#https3registry-source)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert_file"
          ],
          "description": "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key_file"
          ],
          "description": "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "context": {
          "aliases": [],
          "description": "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If set to C(True), and I(state) is C(present), an existing object will be replaced.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kubeconfig": {
          "aliases": [],
          "description": "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the Kubernetes client will attempt to load the default configuration file from I(~/.kube/config). Can also be specified via K8S_AUTH_KUBECONFIG environment variable.\nThe kubernetes configuration can be provided as dictionary. This feature requires a python kubernetes client version >= 17.17.0. Added in version 2.2.0.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Labels attached to this object.\nU(https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "merge_type": {
          "aliases": [],
          "description": "Whether to override the default patch merge approach with a specific type.\nThis defaults to C(['strategic-merge', 'merge']), which is ideal for using the same parameters on resource kinds that combine Custom Resources and built-in resources.\nSee U(https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment)\nIf more than one merge_type is given, the merge_types will be tried in order",
          "type": "list",
          "required": false,
          "choices": [
            "json",
            "merge",
            "strategic-merge"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Use to specify a PVC object name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Use to specify a PVC object namespace.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.\nPlease read the description of the C(username) option for a discussion of when this option is applicable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "persist_config": {
          "aliases": [],
          "description": "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.\nWhen the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.\nDefault to false.\nPlease note that the current version of the k8s python client library does not support setting this flag to True yet.\nThe fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.\nPlease note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_headers": {
          "aliases": [],
          "description": "The Header used for the HTTP proxy.\nDocumentation can be found here U(https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html?highlight=proxy_headers#urllib3.util.make_headers).",
          "type": "dict",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {
            "basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "proxy_basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for proxy basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_PROXY_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user_agent": {
              "aliases": [],
              "description": "String representing the user-agent you want, such as foo/1.0.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_USER_AGENT environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "resource_definition": {
          "aliases": [
            "definition",
            "inline"
          ],
          "description": "A partial YAML definition of the PVC object being created/updated. Here you can define Kubernetes PVC Resource parameters not covered by this module's parameters.\nNOTE: I(resource_definition) has lower priority than module parameters. If you try to define e.g. I(metadata.namespace) here, that value will be ignored and I(namespace) used instead.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "selector": {
          "aliases": [],
          "description": "A label query over volumes to consider for binding.\nU(https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [
            "storage"
          ],
          "description": "How much storage to allocate to the PVC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines if an object should be created, patched, or deleted. When set to C(present), an object will be created, if it does not already exist. If set to C(absent), an existing object will be deleted. If set to C(present), an existing object will be patched, if its attributes differ from those specified using module options and I(resource_definition).",
          "default": "present",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_class_name": {
          "aliases": [],
          "description": "Name of the StorageClass required by the claim.\nMore info: U(https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.\nPlease note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the M(community.okd.k8s_auth) module, as that might do what you need.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_mode": {
          "aliases": [],
          "description": "This defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is an alpha feature of kubernetes and may change in the future.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume_name": {
          "aliases": [],
          "description": "This is the binding reference to the PersistentVolume backing this claim.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If set, this module will wait for the PVC to become bound and CDI (if enabled) to finish its operation before returning.\nUsed only if I(state) set to C(present).\nUnless used in conjunction with I(cdi_source), this might result in a timeout, as clusters may be configured to not bind PVCs until first usage.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "Specifies how much time in seconds to wait for PVC creation to complete if I(wait) option is enabled.\nDefault value is reasonably high due to an expectation that CDI might take a while to finish its operation.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "openshift >= 0.8.2"
      ],
      "short_description": "Manage PVCs on Kubernetes"
    },
    "examples": "\n- name: Create a PVC and import data from an external source\n  community.kubevirt.kubevirt_pvc:\n    name: pvc1\n    namespace: default\n    size: 100Mi\n    access_modes:\n      - ReadWriteOnce\n    cdi_source:\n      http:\n        url: https://www.source.example/path/of/data/vm.img\n      # If the URL points to a tar.gz containing the disk image, uncomment the line below:\n      #content_type: archive\n\n- name: Create a PVC as a clone from a different PVC\n  community.kubevirt.kubevirt_pvc:\n    name: pvc2\n    namespace: default\n    size: 100Mi\n    access_modes:\n      - ReadWriteOnce\n    cdi_source:\n      pvc:\n        namespace: source-ns\n        name: source-pvc\n\n- name: Create a PVC ready for data upload\n  community.kubevirt.kubevirt_pvc:\n    name: pvc3\n    namespace: default\n    size: 100Mi\n    access_modes:\n      - ReadWriteOnce\n    cdi_source:\n      upload: yes\n    # You need the kubevirt_cdi_upload module to actually upload something\n\n- name: Create a PVC with a blank raw image\n  community.kubevirt.kubevirt_pvc:\n    name: pvc4\n    namespace: default\n    size: 100Mi\n    access_modes:\n      - ReadWriteOnce\n    cdi_source:\n      blank: yes\n\n- name: Create a PVC and fill it with data from a container\n  community.kubevirt.kubevirt_pvc:\n    name: pvc5\n    namespace: default\n    size: 100Mi\n    access_modes:\n      - ReadWriteOnce\n    cdi_source:\n      registry:\n        url: \"docker://kubevirt/fedora-cloud-registry-disk-demo\"\n\n"
  },
  "community.kubevirt.kubevirt_rs": {
    "doc": {
      "description": "Use Openshift Python SDK to manage the state of KubeVirt virtual machine replica sets.",
      "has_action": false,
      "notes": "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file.\nIn order to use this module you have to install Openshift Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=openshift>=0.8.2)",
      "options": {
        "affinity": {
          "aliases": [],
          "description": "Describes node affinity scheduling rules for the vm.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to a vm label update), the system may or may not try to eventually evict the vm from its node. When there are multiple elements, the lists of nodes corresponding to each C(term) are intersected, i.e. all terms must be satisfied.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node has vms which matches the corresponding C(term); the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "anti_affinity": {
          "aliases": [],
          "description": "Describes vm anti-affinity scheduling rules e.g. avoid putting this vm in the same node, zone, etc. as some other vms.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to a vm label update), the system may or may not try to eventually evict the vm from its node. When there are multiple elements, the lists of nodes corresponding to each C(term) are intersected, i.e. all terms must be satisfied.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node has vms which matches the corresponding C(term); the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "api_key": {
          "aliases": [],
          "description": "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bootloader": {
          "aliases": [],
          "description": "Specify the bootloader of the virtual machine.\nAll virtual machines use BIOS by default for booting.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "ssl_ca_cert"
          ],
          "description": "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert_file"
          ],
          "description": "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key_file"
          ],
          "description": "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "cloud_init_nocloud": {
          "aliases": [],
          "description": "Represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the virtual machine. A proper cloud-init installation is required inside the guest. More information U(https://kubevirt.io/api-reference/master/definitions.html#_v1_cloudinitnocloudsource)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "context": {
          "aliases": [],
          "description": "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_cores": {
          "aliases": [],
          "description": "Number of CPU cores.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_features": {
          "aliases": [],
          "description": "List of dictionary to fine-tune features provided by the selected CPU model.\nI(Note): Policy attribute can either be omitted or contain one of the following policies: force, require, optional, disable, forbid.\nI(Note): In case a policy is omitted for a feature, it will default to require.\nMore information about policies: U(https://libvirt.org/formatdomain.html#elementsCPU)",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "cpu_limit": {
          "aliases": [],
          "description": "Is converted to its millicore value and multiplied by 100. The resulting value is the total amount of CPU time that a container can use every 100ms. A virtual machine cannot use more than its share of CPU time during this interval.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_model": {
          "aliases": [],
          "description": "CPU model.\nYou can check list of available models here: U(https://github.com/libvirt/libvirt/blob/master/src/cpu_map/index.xml).\nI(Note:) User can define default CPU model via as I(default-cpu-model) in I(kubevirt-config) I(ConfigMap), if not set I(host-model) is used.\nI(Note:) Be sure that node CPU model where you run a VM, has the same or higher CPU family.\nI(Note:) If CPU model wasn't defined, the VM will have CPU model closest to one that used on the node where the VM is running.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_shares": {
          "aliases": [],
          "description": "Specify CPU shares.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "disks": {
          "aliases": [],
          "description": "List of dictionaries which specify disks of the virtual machine.\nA disk can be made accessible via four different types: I(disk), I(lun), I(cdrom), I(floppy).\nAll possible configuration options are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_disk)\nEach disk must have specified a I(volume) that declares which volume type of the disk All possible configuration options of volume are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_volume).",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If set to C(no), and I(state) is C(present), an existing object will be replaced.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "headless": {
          "aliases": [],
          "description": "Specify if the virtual machine should have attached a  minimal Video and Graphics device configuration.\nBy default a minimal Video and Graphics device configuration will be applied to the VirtualMachineInstance. The video device is vga compatible and comes with a memory size of 16 MB.",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Specifies the hostname of the virtual machine. The hostname will be set either by dhcp, cloud-init if configured or virtual machine name will be used.",
          "required": false,
          "suboptions": {}
        },
        "hugepage_size": {
          "aliases": [],
          "description": "Specify huge page size.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "An interface defines a virtual network interface of a virtual machine (also called a frontend).\nAll possible configuration options interfaces are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_interface)\nEach interface must have specified a I(network) that declares which logical or physical device it is connected to (also called as backend). All possible configuration options of network are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_network).",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "kubeconfig": {
          "aliases": [],
          "description": "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the Kubernetes client will attempt to load the default configuration file from I(~/.kube/config). Can also be specified via K8S_AUTH_KUBECONFIG environment variable.\nThe kubernetes configuration can be provided as dictionary. This feature requires a python kubernetes client version >= 17.17.0. Added in version 2.2.0.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Labels are key/value pairs that are attached to virtual machines. Labels are intended to be used to specify identifying attributes of virtual machines that are meaningful and relevant to users, but do not directly imply semantics to the core system. Labels can be used to organize and to select subsets of virtual machines. Labels can be attached to virtual machines at creation time and subsequently added and modified at any time.\nMore on labels that are used for internal implementation U(https://kubevirt.io/user-guide/#/misc/annotations_and_labels)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "machine_type": {
          "aliases": [],
          "description": "QEMU machine type is the actual chipset of the virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "The amount of memory to be requested by virtual machine.\nFor example 1024Mi.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_limit": {
          "aliases": [],
          "description": "The maximum memory to be used by virtual machine.\nFor example 1024Mi.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "merge_type": {
          "aliases": [],
          "description": "Whether to override the default patch merge approach with a specific type.\nIf more than one merge type is given, the merge types will be tried in order.\nDefaults to C(['strategic-merge', 'merge']), which is ideal for using the same parameters on resource kinds that combine Custom Resources and built-in resources, as Custom Resource Definitions typically aren't updatable by the usual strategic merge.\nSee U(https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment)",
          "type": "list",
          "required": false,
          "choices": [
            "json",
            "merge",
            "strategic-merge"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine replica set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace where the virtual machine replica set exists.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "node_affinity": {
          "aliases": [],
          "description": "Describes vm affinity scheduling rules e.g. co-locate this vm in the same node, zone, etc. as some other vms",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to an update), the system may or may not try to eventually evict the vm from its node.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node matches the corresponding match_expressions; the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [],
          "description": "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.\nPlease read the description of the C(username) option for a discussion of when this option is applicable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "persist_config": {
          "aliases": [],
          "description": "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.\nWhen the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.\nDefault to false.\nPlease note that the current version of the k8s python client library does not support setting this flag to True yet.\nThe fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.\nPlease note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_headers": {
          "aliases": [],
          "description": "The Header used for the HTTP proxy.\nDocumentation can be found here U(https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html?highlight=proxy_headers#urllib3.util.make_headers).",
          "type": "dict",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {
            "basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "proxy_basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for proxy basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_PROXY_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user_agent": {
              "aliases": [],
              "description": "String representing the user-agent you want, such as foo/1.0.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_USER_AGENT environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "replicas": {
          "aliases": [],
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified.\nReplicas defaults to 1 if newly created replica set.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resource_definition": {
          "aliases": [
            "definition",
            "inline"
          ],
          "description": "A partial YAML definition of the object being created/updated. Here you can define Kubernetes resource parameters not covered by this module's parameters.\nNOTE: I(resource_definition) has lower priority than module parameters. If you try to define e.g. I(metadata.namespace) here, that value will be ignored and I(namespace) used instead.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "selector": {
          "aliases": [],
          "description": "Selector is a label query over a set of virtual machine.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "smbios_uuid": {
          "aliases": [],
          "description": "In order to provide a consistent view on the virtualized hardware for the guest OS, the SMBIOS UUID can be set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create or delete virtual machine replica sets.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subdomain": {
          "aliases": [],
          "description": "If specified, the fully qualified virtual machine hostname will be hostname.subdomain.namespace.svc.cluster_domain. If not specified, the virtual machine will not have a domain name at all. The DNS entry will resolve to the virtual machine, no matter if the virtual machine itself can pick up a hostname.",
          "required": false,
          "suboptions": {}
        },
        "tablets": {
          "aliases": [],
          "description": "Specify tablets to be used as input devices",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.\nPlease note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the M(community.okd.k8s_auth) module, as that might do what you need.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "I(True) if the module should wait for the resource to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_sleep": {
          "aliases": [],
          "description": "Number of seconds to sleep between checks.",
          "default": "5",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the resource to get into desired state.",
          "default": "120",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openshift >= 0.8.2",
        "python >= 2.7"
      ],
      "short_description": "Manage KubeVirt virtual machine replica sets"
    },
    "examples": "\n- name: Create virtual machine replica set 'myvmir'\n  community.kubevirt.kubevirt_rs:\n      state: present\n      name: myvmir\n      namespace: vms\n      wait: true\n      replicas: 3\n      memory: 64M\n      labels:\n        myvmi: myvmi\n      selector:\n        matchLabels:\n            myvmi: myvmi\n      disks:\n         - name: containerdisk\n           volume:\n             containerDisk:\n               image: kubevirt/cirros-container-disk-demo:latest\n               path: /custom-disk/cirros.img\n           disk:\n             bus: virtio\n\n- name: Remove virtual machine replica set 'myvmir'\n  community.kubevirt.kubevirt_rs:\n      state: absent\n      name: myvmir\n      namespace: vms\n      wait: true\n"
  },
  "community.kubevirt.kubevirt_template": {
    "doc": {
      "description": "Use Openshift Python SDK to manage the state of KubeVirt templates.",
      "has_action": false,
      "notes": "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file.",
      "options": {
        "api_key": {
          "aliases": [],
          "description": "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "ssl_ca_cert"
          ],
          "description": "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert_file"
          ],
          "description": "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key_file"
          ],
          "description": "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "context": {
          "aliases": [],
          "description": "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_disk": {
          "aliases": [],
          "description": "The goal of default disk is to define what kind of disk is supported by the OS mainly in terms of bus (ide, scsi, sata, virtio, ...)\nThe C(default_disk) parameter define configuration overlay for disks that will be applied on top of disks during virtual machine creation to define global compatibility and/or performance defaults defined here.\nThis is parameter can be used only when kubevirt addon is installed on your openshift cluster.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "default_network": {
          "aliases": [],
          "description": "The goal of default network is similar to I(default_volume) and should be used as a template that specifies performance and connection parameters (L2 bridge for example)\nThe C(default_network) parameter define configuration overlay for networks that will be applied on top of networks during virtual machine creation to define global compatibility and/or performance defaults defined here.\nThis is parameter can be used only when kubevirt addon is installed on your openshift cluster.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "default_nic": {
          "aliases": [],
          "description": "The goal of default network is similar to I(default_disk) and should be used as a template to ensure OS compatibility and performance.\nThe C(default_nic) parameter define configuration overlay for nic that will be applied on top of nics during virtual machine creation to define global compatibility and/or performance defaults defined here.\nThis is parameter can be used only when kubevirt addon is installed on your openshift cluster.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "default_volume": {
          "aliases": [],
          "description": "The goal of default volume is to be able to configure mostly performance parameters like caches if those are exposed by the underlying volume implementation.\nThe C(default_volume) parameter define configuration overlay for volumes that will be applied on top of volumes during virtual machine creation to define global compatibility and/or performance defaults defined here.\nThis is parameter can be used only when kubevirt addon is installed on your openshift cluster.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "A description of the template.\nInclude enough detail that the user will understand what is being deployed... and any caveats they need to know before deploying. It should also provide links to additional information, such as a README file.\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [],
          "description": "A brief, user-friendly name, which can be employed by user interfaces.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "documentation_url": {
          "aliases": [],
          "description": "A URL referencing further documentation for the template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "editable": {
          "aliases": [],
          "description": "Extension for hinting at which elements should be considered editable. List of jsonpath selectors. The jsonpath root is the objects: element of the template.\nThis is parameter can be used only when kubevirt addon is installed on your openshift cluster.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If set to C(yes), and I(state) is C(present), an existing object will be replaced.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "icon_class": {
          "aliases": [],
          "description": "An icon to be displayed with your template in the web console. Choose from our existing logo icons when possible. You can also use icons from FontAwesome. Alternatively, provide icons through CSS customizations that can be added to an OpenShift Container Platform cluster that uses your template. You must specify an icon class that exists, or it will prevent falling back to the generic icon.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kubeconfig": {
          "aliases": [],
          "description": "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the Kubernetes client will attempt to load the default configuration file from I(~/.kube/config). Can also be specified via K8S_AUTH_KUBECONFIG environment variable.\nThe kubernetes configuration can be provided as dictionary. This feature requires a python kubernetes client version >= 17.17.0. Added in version 2.2.0.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "long_description": {
          "aliases": [],
          "description": "Additional template description. This may be displayed by the service catalog, for example.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "merge_type": {
          "aliases": [],
          "description": "Whether to override the default patch merge approach with a specific type. By default, the strategic merge will typically be used.",
          "type": "list",
          "required": false,
          "choices": [
            "json",
            "merge",
            "strategic-merge"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Template object.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace where the Template object exists.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "objects": {
          "aliases": [],
          "description": "List of any valid API objects, such as a I(DeploymentConfig), I(Service), etc. The object will be created exactly as defined here, with any parameter values substituted in prior to creation. The definition of these objects can reference parameters defined earlier.\nAs part of the list user can pass also I(VirtualMachine) kind. When passing I(VirtualMachine) user must use Ansible structure of the parameters not the Kubernetes API structure. For more information please take a look at M(community.kubevirt.kubevirt_vm) module and at EXAMPLES section, where you can see example.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "parameters": {
          "aliases": [],
          "description": "Parameters allow a value to be supplied by the user or generated when the template is instantiated. Then, that value is substituted wherever the parameter is referenced. References can be defined in any field in the objects list field. This is useful for generating random passwords or allowing the user to supply a host name or other user-specific value that is required to customize the template.\nMore information can be found at: U(https://docs.openshift.com/container-platform/3.6/dev_guide/templates.html#writing-parameters)",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.\nPlease read the description of the C(username) option for a discussion of when this option is applicable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "persist_config": {
          "aliases": [],
          "description": "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.\nWhen the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.\nDefault to false.\nPlease note that the current version of the k8s python client library does not support setting this flag to True yet.\nThe fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provider_display_name": {
          "aliases": [],
          "description": "The name of the person or organization providing the template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.\nPlease note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_headers": {
          "aliases": [],
          "description": "The Header used for the HTTP proxy.\nDocumentation can be found here U(https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html?highlight=proxy_headers#urllib3.util.make_headers).",
          "type": "dict",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {
            "basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "proxy_basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for proxy basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_PROXY_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user_agent": {
              "aliases": [],
              "description": "String representing the user-agent you want, such as foo/1.0.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_USER_AGENT environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Determines if an object should be created, patched, or deleted. When set to C(present), an object will be created, if it does not already exist. If set to C(absent), an existing object will be deleted. If set to C(present), an existing object will be patched, if its attributes differ from those specified using I(resource_definition) or I(src).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "support_url": {
          "aliases": [],
          "description": "A URL where support can be obtained for the template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.\nPlease note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the M(community.okd.k8s_auth) module, as that might do what you need.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Template structure version.\nThis is parameter can be used only when kubevirt addon is installed on your openshift cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "openshift >= 0.8.2"
      ],
      "short_description": "Manage KubeVirt templates"
    },
    "examples": "\n- name: Create template 'mytemplate'\n  community.kubevirt.kubevirt_template:\n    state: present\n    name: myvmtemplate\n    namespace: templates\n    display_name: Generic cirros template\n    description: Basic cirros template\n    long_description: Verbose description of cirros template\n    provider_display_name: Just Be Cool, Inc.\n    documentation_url: http://theverycoolcompany.com\n    support_url: http://support.theverycoolcompany.com\n    icon_class: icon-linux\n    default_disk:\n      disk:\n        bus: virtio\n    default_nic:\n      model: virtio\n    default_network:\n      resource:\n        resourceName: bridge.network.kubevirt.io/cnvmgmt\n    default_volume:\n      containerDisk:\n        image: kubevirt/cirros-container-disk-demo:latest\n    objects:\n      - name: ${NAME}\n        kind: VirtualMachine\n        memory: ${MEMORY_SIZE}\n        state: present\n        namespace: vms\n    parameters:\n      - name: NAME\n        description: VM name\n        generate: expression\n        from: 'vm-[A-Za-z0-9]{8}'\n      - name: MEMORY_SIZE\n        description: Memory size\n        value: 1Gi\n\n- name: Remove template 'myvmtemplate'\n  community.kubevirt.kubevirt_template:\n    state: absent\n    name: myvmtemplate\n    namespace: templates\n"
  },
  "community.kubevirt.kubevirt_vm": {
    "doc": {
      "description": "Use Openshift Python SDK to manage the state of KubeVirt virtual machines.",
      "has_action": false,
      "notes": "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file.\nIn order to use this module you have to install Openshift Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=openshift>=0.8.2)",
      "options": {
        "affinity": {
          "aliases": [],
          "description": "Describes node affinity scheduling rules for the vm.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to a vm label update), the system may or may not try to eventually evict the vm from its node. When there are multiple elements, the lists of nodes corresponding to each C(term) are intersected, i.e. all terms must be satisfied.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node has vms which matches the corresponding C(term); the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "anti_affinity": {
          "aliases": [],
          "description": "Describes vm anti-affinity scheduling rules e.g. avoid putting this vm in the same node, zone, etc. as some other vms.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to a vm label update), the system may or may not try to eventually evict the vm from its node. When there are multiple elements, the lists of nodes corresponding to each C(term) are intersected, i.e. all terms must be satisfied.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node has vms which matches the corresponding C(term); the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "api_key": {
          "aliases": [],
          "description": "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bootloader": {
          "aliases": [],
          "description": "Specify the bootloader of the virtual machine.\nAll virtual machines use BIOS by default for booting.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "ssl_ca_cert"
          ],
          "description": "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert_file"
          ],
          "description": "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key_file"
          ],
          "description": "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "cloud_init_nocloud": {
          "aliases": [],
          "description": "Represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the virtual machine. A proper cloud-init installation is required inside the guest. More information U(https://kubevirt.io/api-reference/master/definitions.html#_v1_cloudinitnocloudsource)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "context": {
          "aliases": [],
          "description": "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_cores": {
          "aliases": [],
          "description": "Number of CPU cores.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_features": {
          "aliases": [],
          "description": "List of dictionary to fine-tune features provided by the selected CPU model.\nI(Note): Policy attribute can either be omitted or contain one of the following policies: force, require, optional, disable, forbid.\nI(Note): In case a policy is omitted for a feature, it will default to require.\nMore information about policies: U(https://libvirt.org/formatdomain.html#elementsCPU)",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "cpu_limit": {
          "aliases": [],
          "description": "Is converted to its millicore value and multiplied by 100. The resulting value is the total amount of CPU time that a container can use every 100ms. A virtual machine cannot use more than its share of CPU time during this interval.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_model": {
          "aliases": [],
          "description": "CPU model.\nYou can check list of available models here: U(https://github.com/libvirt/libvirt/blob/master/src/cpu_map/index.xml).\nI(Note:) User can define default CPU model via as I(default-cpu-model) in I(kubevirt-config) I(ConfigMap), if not set I(host-model) is used.\nI(Note:) Be sure that node CPU model where you run a VM, has the same or higher CPU family.\nI(Note:) If CPU model wasn't defined, the VM will have CPU model closest to one that used on the node where the VM is running.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_shares": {
          "aliases": [],
          "description": "Specify CPU shares.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "datavolumes": {
          "aliases": [],
          "description": "DataVolumes are a way to automate importing virtual machine disks onto pvcs during the virtual machine's launch flow. Without using a DataVolume, users have to prepare a pvc with a disk image before assigning it to a VM or VMI manifest. With a DataVolume, both the pvc creation and import is automated on behalf of the user.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "disks": {
          "aliases": [],
          "description": "List of dictionaries which specify disks of the virtual machine.\nA disk can be made accessible via four different types: I(disk), I(lun), I(cdrom), I(floppy).\nAll possible configuration options are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_disk)\nEach disk must have specified a I(volume) that declares which volume type of the disk All possible configuration options of volume are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_volume).",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "ephemeral": {
          "aliases": [],
          "description": "If (true) ephemeral virtual machine will be created. When destroyed it won't be accessible again.\nWorks only with C(state) I(present) and I(absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "If set to C(no), and I(state) is C(present), an existing object will be replaced.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "headless": {
          "aliases": [],
          "description": "Specify if the virtual machine should have attached a  minimal Video and Graphics device configuration.\nBy default a minimal Video and Graphics device configuration will be applied to the VirtualMachineInstance. The video device is vga compatible and comes with a memory size of 16 MB.",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Specifies the hostname of the virtual machine. The hostname will be set either by dhcp, cloud-init if configured or virtual machine name will be used.",
          "required": false,
          "suboptions": {}
        },
        "hugepage_size": {
          "aliases": [],
          "description": "Specify huge page size.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "An interface defines a virtual network interface of a virtual machine (also called a frontend).\nAll possible configuration options interfaces are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_interface)\nEach interface must have specified a I(network) that declares which logical or physical device it is connected to (also called as backend). All possible configuration options of network are available in U(https://kubevirt.io/api-reference/master/definitions.html#_v1_network).",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "kubeconfig": {
          "aliases": [],
          "description": "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the Kubernetes client will attempt to load the default configuration file from I(~/.kube/config). Can also be specified via K8S_AUTH_KUBECONFIG environment variable.\nThe kubernetes configuration can be provided as dictionary. This feature requires a python kubernetes client version >= 17.17.0. Added in version 2.2.0.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Labels are key/value pairs that are attached to virtual machines. Labels are intended to be used to specify identifying attributes of virtual machines that are meaningful and relevant to users, but do not directly imply semantics to the core system. Labels can be used to organize and to select subsets of virtual machines. Labels can be attached to virtual machines at creation time and subsequently added and modified at any time.\nMore on labels that are used for internal implementation U(https://kubevirt.io/user-guide/#/misc/annotations_and_labels)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "machine_type": {
          "aliases": [],
          "description": "QEMU machine type is the actual chipset of the virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "The amount of memory to be requested by virtual machine.\nFor example 1024Mi.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_limit": {
          "aliases": [],
          "description": "The maximum memory to be used by virtual machine.\nFor example 1024Mi.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "merge_type": {
          "aliases": [],
          "description": "Whether to override the default patch merge approach with a specific type.\nIf more than one merge type is given, the merge types will be tried in order.\nDefaults to C(['strategic-merge', 'merge']), which is ideal for using the same parameters on resource kinds that combine Custom Resources and built-in resources, as Custom Resource Definitions typically aren't updatable by the usual strategic merge.\nSee U(https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment)",
          "type": "list",
          "required": false,
          "choices": [
            "json",
            "merge",
            "strategic-merge"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "Namespace where the virtual machine exists.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "node_affinity": {
          "aliases": [],
          "description": "Describes vm affinity scheduling rules e.g. co-locate this vm in the same node, zone, etc. as some other vms",
          "type": "dict",
          "required": false,
          "suboptions": {
            "hard": {
              "aliases": [],
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the vm will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during vm execution (e.g. due to an update), the system may or may not try to eventually evict the vm from its node.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "soft": {
              "aliases": [],
              "description": "The scheduler will prefer to schedule vms to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding C(weight) to the sum if the node matches the corresponding match_expressions; the nodes with the highest sum are the most preferred.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [],
          "description": "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.\nPlease read the description of the C(username) option for a discussion of when this option is applicable.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "persist_config": {
          "aliases": [],
          "description": "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.\nWhen the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.\nDefault to false.\nPlease note that the current version of the k8s python client library does not support setting this flag to True yet.\nThe fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "proxy": {
          "aliases": [],
          "description": "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.\nPlease note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_headers": {
          "aliases": [],
          "description": "The Header used for the HTTP proxy.\nDocumentation can be found here U(https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html?highlight=proxy_headers#urllib3.util.make_headers).",
          "type": "dict",
          "required": false,
          "version_added": "2.0.0",
          "suboptions": {
            "basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "proxy_basic_auth": {
              "aliases": [],
              "description": "Colon-separated username:password for proxy basic authentication header.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_PROXY_BASIC_AUTH environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "user_agent": {
              "aliases": [],
              "description": "String representing the user-agent you want, such as foo/1.0.\nCan also be specified via K8S_AUTH_PROXY_HEADERS_USER_AGENT environment.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "resource_definition": {
          "aliases": [
            "definition",
            "inline"
          ],
          "description": "A partial YAML definition of the object being created/updated. Here you can define Kubernetes resource parameters not covered by this module's parameters.\nNOTE: I(resource_definition) has lower priority than module parameters. If you try to define e.g. I(metadata.namespace) here, that value will be ignored and I(namespace) used instead.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "smbios_uuid": {
          "aliases": [],
          "description": "In order to provide a consistent view on the virtualized hardware for the guest OS, the SMBIOS UUID can be set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set the virtual machine to either I(present), I(absent), I(running) or I(stopped).\nI(present) - Create or update a virtual machine. (And run it if it's ephemeral.)\nI(absent) - Remove a virtual machine.\nI(running) - Create or update a virtual machine and run it.\nI(stopped) - Stop a virtual machine. (This deletes ephemeral VMs.)",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "running",
            "stopped"
          ],
          "suboptions": {}
        },
        "subdomain": {
          "aliases": [],
          "description": "If specified, the fully qualified virtual machine hostname will be hostname.subdomain.namespace.svc.cluster_domain. If not specified, the virtual machine will not have a domain name at all. The DNS entry will resolve to the virtual machine, no matter if the virtual machine itself can pick up a hostname.",
          "required": false,
          "suboptions": {}
        },
        "tablets": {
          "aliases": [],
          "description": "Specify tablets to be used as input devices",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Name of Template to be used in creation of a virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template_parameters": {
          "aliases": [],
          "description": "New values of parameters from Template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.\nPlease note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the M(community.okd.k8s_auth) module, as that might do what you need.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_ssl"
          ],
          "description": "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "I(True) if the module should wait for the resource to get into desired state.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_sleep": {
          "aliases": [],
          "description": "Number of seconds to sleep between checks.",
          "default": "5",
          "required": false,
          "suboptions": {}
        },
        "wait_timeout": {
          "aliases": [],
          "description": "The amount of time in seconds the module should wait for the resource to get into desired state.",
          "default": "120",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openshift >= 0.8.2",
        "python >= 2.7"
      ],
      "short_description": "Manage KubeVirt virtual machine"
    },
    "examples": "\n- name: Start virtual machine 'myvm'\n  community.kubevirt.kubevirt_vm:\n      state: running\n      name: myvm\n      namespace: vms\n\n- name: Create virtual machine 'myvm' and start it\n  community.kubevirt.kubevirt_vm:\n      state: running\n      name: myvm\n      namespace: vms\n      memory: 64Mi\n      cpu_cores: 1\n      bootloader: efi\n      smbios_uuid: 5d307ca9-b3ef-428c-8861-06e72d69f223\n      cpu_model: Conroe\n      headless: true\n      hugepage_size: 2Mi\n      tablets:\n        - bus: virtio\n          name: tablet1\n      cpu_limit: 3\n      cpu_shares: 2\n      disks:\n        - name: containerdisk\n          volume:\n            containerDisk:\n              image: kubevirt/cirros-container-disk-demo:latest\n              path: /custom-disk/cirros.img\n          disk:\n            bus: virtio\n\n- name: Create virtual machine 'myvm' with multus network interface\n  community.kubevirt.kubevirt_vm:\n      name: myvm\n      namespace: vms\n      memory: 512M\n      interfaces:\n        - name: default\n          bridge: {}\n          network:\n            pod: {}\n        - name: mynet\n          bridge: {}\n          network:\n            multus:\n              networkName: mynetconf\n\n- name: Combine inline definition with Ansible parameters\n  community.kubevirt.kubevirt_vm:\n      # Kubernetes specification:\n      definition:\n        metadata:\n          labels:\n            app: galaxy\n            service: web\n            origin: vmware\n\n      # Ansible parameters:\n      state: running\n      name: myvm\n      namespace: vms\n      memory: 64M\n      disks:\n        - name: containerdisk\n          volume:\n            containerDisk:\n              image: kubevirt/cirros-container-disk-demo:latest\n              path: /custom-disk/cirros.img\n          disk:\n            bus: virtio\n\n- name: Start ephemeral virtual machine 'myvm' and wait to be running\n  community.kubevirt.kubevirt_vm:\n      ephemeral: true\n      state: running\n      wait: true\n      wait_timeout: 180\n      name: myvm\n      namespace: vms\n      memory: 64M\n      labels:\n        kubevirt.io/vm: myvm\n      disks:\n        - name: containerdisk\n          volume:\n            containerDisk:\n              image: kubevirt/cirros-container-disk-demo:latest\n              path: /custom-disk/cirros.img\n          disk:\n            bus: virtio\n\n- name: Start fedora vm with cloud init\n  community.kubevirt.kubevirt_vm:\n      state: running\n      wait: true\n      name: myvm\n      namespace: vms\n      memory: 1024M\n      cloud_init_nocloud:\n        userData: |-\n          #cloud-config\n          password: fedora\n          chpasswd: { expire: False }\n      disks:\n        - name: containerdisk\n          volume:\n            containerDisk:\n              image: kubevirt/fedora-cloud-container-disk-demo:latest\n              path: /disk/fedora.qcow2\n          disk:\n            bus: virtio\n      node_affinity:\n        soft:\n          - weight: 1\n            term:\n              match_expressions:\n                - key: security\n                  operator: In\n                  values:\n                    - S2\n\n- name: Create virtual machine with datavolume and specify node affinity\n  community.kubevirt.kubevirt_vm:\n    name: myvm\n    namespace: default\n    memory: 1024Mi\n    datavolumes:\n      - name: mydv\n        source:\n          http:\n            url: https://url/disk.qcow2\n        pvc:\n          accessModes:\n            - ReadWriteOnce\n          storage: 5Gi\n    node_affinity:\n      hard:\n        - term:\n            match_expressions:\n              - key: security\n                operator: In\n                values:\n                  - S1\n\n- name: Remove virtual machine 'myvm'\n  community.kubevirt.kubevirt_vm:\n      state: absent\n      name: myvm\n      namespace: vms\n"
  }
}