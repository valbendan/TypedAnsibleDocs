{
  "netbox.netbox.netbox_aggregate": {
    "doc": {
      "description": "Creates or removes aggregates from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the aggregate configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "date_added": {
              "aliases": [],
              "description": "Date added, format: YYYY-MM-DD",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the aggregate",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "prefix": {
              "aliases": [],
              "description": "The aggregate prefix",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "rir": {
              "aliases": [],
              "description": "The RIR the aggregate will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the aggregate may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes aggregates from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox aggregate module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create aggregate within NetBox with only required information\n      netbox_aggregate:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 192.168.0.0/16\n          rir: Test RIR\n        state: present\n\n    - name: Create aggregate with several specified options\n      netbox_aggregate:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 192.168.0.0/16\n          rir: Test RIR\n          date_added: 1989-01-18\n          description: Test description\n          tags:\n            - Schnozzberry\n        state: present\n\n    - name: Delete aggregate within netbox\n      netbox_aggregate:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 192.168.0.0/16\n        state: absent\n"
  },
  "netbox.netbox.netbox_cable": {
    "doc": {
      "description": "Creates, updates or removes cables from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the cable configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "color": {
              "aliases": [],
              "description": "The color of the cable",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "label": {
              "aliases": [],
              "description": "The label of the cable",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "length": {
              "aliases": [],
              "description": "The length of the cable",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "length_unit": {
              "aliases": [],
              "description": "The unit in which the length of the cable is measured",
              "type": "str",
              "required": false,
              "choices": [
                "m",
                "cm",
                "ft",
                "in"
              ],
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the cable",
              "type": "str",
              "required": false,
              "choices": [
                "connected",
                "planned",
                "decommissioning"
              ],
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the cable may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "termination_a": {
              "aliases": [],
              "description": "The termination a",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "termination_a_type": {
              "aliases": [],
              "description": "The type of the termination a",
              "type": "str",
              "required": true,
              "choices": [
                "circuits.circuittermination",
                "dcim.consoleport",
                "dcim.consoleserverport",
                "dcim.frontport",
                "dcim.interface",
                "dcim.powerfeed",
                "dcim.poweroutlet",
                "dcim.powerport",
                "dcim.rearport"
              ],
              "suboptions": {}
            },
            "termination_b": {
              "aliases": [],
              "description": "The termination b",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "termination_b_type": {
              "aliases": [],
              "description": "The type of the termination b",
              "type": "str",
              "required": true,
              "choices": [
                "circuits.circuittermination",
                "dcim.consoleport",
                "dcim.consoleserverport",
                "dcim.frontport",
                "dcim.interface",
                "dcim.powerfeed",
                "dcim.poweroutlet",
                "dcim.powerport",
                "dcim.rearport"
              ],
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the cable",
              "type": "str",
              "required": false,
              "choices": [
                "cat3",
                "cat5",
                "cat5e",
                "cat6",
                "cat6a",
                "cat7",
                "dac-active",
                "dac-passive",
                "mrj21-trunk",
                "coaxial",
                "mmf",
                "mmf-om1",
                "mmf-om2",
                "mmf-om3",
                "mmf-om4",
                "smf",
                "smf-os1",
                "smf-os2",
                "aoc",
                "power"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete cables within NetBox",
      "version_added": "0.3.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create cable within NetBox with only required information\n      netbox_cable:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          termination_a_type: dcim.interface\n          termination_a:\n            device: Test Nexus Child One\n            name: Ethernet2/2\n          termination_b_type: dcim.interface\n          termination_b:\n            device: Test Nexus Child One\n            name: Ethernet2/1\n        state: present\n\n    - name: Update cable with other fields\n      netbox_cable:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          termination_a_type: dcim.interface\n          termination_a:\n            device: Test Nexus Child One\n            name: Ethernet2/2\n          termination_b_type: dcim.interface\n          termination_b:\n            device: Test Nexus Child One\n            name: Ethernet2/1\n          type: mmf-om4\n          status: planned\n          label: label123\n          color: abcdef\n          length: 30\n          length_unit: m\n          tags:\n            - foo\n        state: present\n\n    - name: Delete cable within netbox\n      netbox_cable:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          termination_a_type: dcim.interface\n          termination_a:\n            device: Test Nexus Child One\n            name: Ethernet2/2\n          termination_b_type: dcim.interface\n          termination_b:\n            device: Test Nexus Child One\n            name: Ethernet2/1\n        state: absent\n"
  },
  "netbox.netbox.netbox_circuit": {
    "doc": {
      "description": "Creates, updates or removes circuits from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the circuit configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "cid": {
              "aliases": [],
              "description": "The circuit id of the circuit",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "circuit_type": {
              "aliases": [],
              "description": "The circuit type of the circuit",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "comments": {
              "aliases": [],
              "description": "Comments related to circuit",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "commit_rate": {
              "aliases": [],
              "description": "Commit rate of the circuit (Kbps)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Description of the circuit",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "install_date": {
              "aliases": [],
              "description": "The date the circuit was installed. e.g. YYYY-MM-DD",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "provider": {
              "aliases": [],
              "description": "The provider of the circuit",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the circuit",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the device may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant assigned to the circuit",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete circuits within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create circuit within NetBox with only required information\n      netbox_circuit:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          cid: Test Circuit\n          provider: Test Provider\n          circuit_type: Test Circuit Type\n        state: present\n\n    - name: Update circuit with other fields\n      netbox_circuit:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          cid: Test-Circuit-1000\n          provider: Test Provider\n          circuit_type: Test Circuit Type\n          status: Active\n          tenant: Test Tenant\n          install_date: \"2018-12-25\"\n          commit_rate: 10000\n          description: Test circuit\n          comments: \"FAST CIRCUIT\"\n        state: present\n\n    - name: Delete circuit within netbox\n      netbox_circuit:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          cid: Test-Circuit-1000\n        state: absent\n"
  },
  "netbox.netbox.netbox_circuit_termination": {
    "doc": {
      "description": "Creates, updates or removes circuit terminations from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the circuit termination configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "circuit": {
              "aliases": [],
              "description": "The circuit to assign to circuit termination",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Description of the circuit termination",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "port_speed": {
              "aliases": [],
              "description": "The speed of the port (Kbps)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "pp_info": {
              "aliases": [],
              "description": "Patch panel information",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "provider_network": {
              "aliases": [],
              "description": "The provider_network the circuit termination will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "The site the circuit termination will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "term_side": {
              "aliases": [],
              "description": "The side of the circuit termination",
              "type": "str",
              "required": true,
              "choices": [
                "A",
                "Z"
              ],
              "suboptions": {}
            },
            "upstream_speed": {
              "aliases": [],
              "description": "The upstream speed of the circuit termination",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "xconnect_id": {
              "aliases": [],
              "description": "The cross connect ID of the circuit termination",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete circuit terminations within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create circuit termination within NetBox with only required information\n      netbox_circuit_termination:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          circuit: Test Circuit\n          term_side: A\n          site: Test Site\n          port_speed: 10000\n        state: present\n\n    - name: Update circuit termination with other fields\n      netbox_circuit_termination:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          circuit: Test Circuit\n          term_side: A\n          upstream_speed: 1000\n          xconnect_id: 10X100\n          pp_info: PP10-24\n          description: \"Test description\"\n        state: present\n\n    - name: Delete circuit termination within netbox\n      netbox_circuit_termination:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          circuit: Test Circuit\n          term_side: A\n        state: absent\n"
  },
  "netbox.netbox.netbox_circuit_type": {
    "doc": {
      "description": "Creates, updates or removes circuit types from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the circuit type configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "The name of the circuit type",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete circuit types within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create type within NetBox with only required information\n      netbox_circuit_type:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Circuit Type\n        state: present\n\n    - name: Delete circuit type within netbox\n      netbox_circuit_type:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Circuit Type\n        state: absent\n"
  },
  "netbox.netbox.netbox_cluster": {
    "doc": {
      "description": "Creates, updates or removes clusters from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the cluster configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "cluster_group": {
              "aliases": [],
              "description": "group of the cluster",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "cluster_type": {
              "aliases": [],
              "description": "type of the cluster",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "comments": {
              "aliases": [],
              "description": "Comments that may include additional information in regards to the cluster",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the cluster",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "Required if I(state=present) and the cluster does not exist yet",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the cluster may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "Tenant the cluster will be assigned to.",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete clusters within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create cluster within NetBox with only required information\n      netbox_cluster:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Cluster\n          cluster_type: libvirt\n        state: present\n\n    - name: Delete cluster within netbox\n      netbox_cluster:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Cluster\n        state: absent\n\n    - name: Create cluster with tags\n      netbox_cluster:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Another Test Cluster\n          cluster_type: libvirt\n          tags:\n            - Schnozzberry\n        state: present\n\n    - name: Update the group and site of an existing cluster\n      netbox_cluster:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Cluster\n          cluster_type: qemu\n          cluster_group: GROUP\n          site: SITE\n        state: present\n"
  },
  "netbox.netbox.netbox_cluster_group": {
    "doc": {
      "description": "Creates, updates or removes cluster groups from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the cluster group configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "The name of the cluster group",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete cluster groups within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create cluster group within NetBox with only required information\n      netbox_cluster_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Cluster Group\n        state: present\n\n    - name: Delete cluster within netbox\n      netbox_cluster_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Cluster Group\n        state: absent\n"
  },
  "netbox.netbox.netbox_cluster_type": {
    "doc": {
      "description": "Creates, updates or removes cluster types from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the cluster type configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the cluster type",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the cluster type",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete cluster types within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create cluster type within NetBox with only required information\n      netbox_cluster_type:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Cluster Type\n        state: present\n\n    - name: Delete cluster within netbox\n      netbox_cluster_type:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Cluster Type\n        state: absent\n"
  },
  "netbox.netbox.netbox_config_context": {
    "doc": {
      "description": "Creates, updates or removes configuration contexts from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the configuration context",
          "type": "dict",
          "required": true,
          "suboptions": {
            "cluster_groups": {
              "aliases": [],
              "description": "List of cluster_groups to which configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "clusters": {
              "aliases": [],
              "description": "List of clusters to which configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "data": {
              "aliases": [],
              "description": "JSON-formatted configuration context data",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the configuration context",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device_types": {
              "aliases": [],
              "description": "List of device_types to which configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "is_active": {
              "aliases": [],
              "description": "Whether configuration context is active",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the context",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "platforms": {
              "aliases": [],
              "description": "List of platforms to which configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "regions": {
              "aliases": [],
              "description": "List of regions where configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "roles": {
              "aliases": [],
              "description": "List of roles to which configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "sites": {
              "aliases": [],
              "description": "List of sites where configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the configuration context associates with",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "tenant_groups": {
              "aliases": [],
              "description": "List of tenant_groups to which configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "tenants": {
              "aliases": [],
              "description": "List of tenants to which configuration context applies",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "The weight of the configuration context",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates, updates or deletes configuration contexts within NetBox",
      "version_added": "3.3.0"
    },
    "examples": "\n- name: \"Test NetBox config_context module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create config context and apply it to sites euc1-az1, euc1-az2 with the default weight of 1000\n      netbox_config_context:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"dns_nameservers-quadnine\"\n          description: \"9.9.9.9\"\n          data: \"{ \\\"dns\\\": { \\\"nameservers\\\": [ \\\"9.9.9.9\\\" ] } }\"\n          sites: [ euc1-az1, euc1-az2 ]\n\n    - name: Detach config context from euc1-az1, euc1-az2 and attach to euc1-az3\n      netbox_config_context:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"dns_nameservers-quadnine\"\n          data: \"{ \\\"dns\\\": { \\\"nameservers\\\": [ \\\"9.9.9.9\\\" ] } }\"\n          sites: [ euc1-az3 ]\n\n    - name: Delete config context\n      netbox_config_context:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"dns_nameservers-quadnine\"\n          data: \"{ \\\"dns\\\": { \\\"nameservers\\\": [ \\\"9.9.9.9\\\" ] } }\"\n        state: absent\n"
  },
  "netbox.netbox.netbox_console_port": {
    "doc": {
      "description": "Creates, updates or removes console ports from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the console port configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Description of the console port",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "The device the console port is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the console port",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the console port may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the console port",
              "type": "str",
              "required": false,
              "choices": [
                "de-9",
                "db-25",
                "rj-11",
                "rj-12",
                "rj-45",
                "usb-a",
                "usb-b",
                "usb-c",
                "usb-mini-a",
                "usb-mini-b",
                "usb-micro-a",
                "usb-micro-b",
                "other"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete console ports within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create console port within NetBox with only required information\n      netbox_console_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Port\n          device: Test Device\n        state: present\n\n    - name: Update console port with other fields\n      netbox_console_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Port\n          device: Test Device\n          type: usb-a\n          description: console port description\n        state: present\n\n    - name: Delete console port within netbox\n      netbox_console_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Port\n          device: Test Device\n        state: absent\n"
  },
  "netbox.netbox.netbox_console_port_template": {
    "doc": {
      "description": "Creates, updates or removes console port templates from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the console port template configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "device_type": {
              "aliases": [],
              "description": "The device type the console port template is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the console port template",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the console port template",
              "type": "str",
              "required": false,
              "choices": [
                "de-9",
                "db-25",
                "rj-11",
                "rj-12",
                "rj-45",
                "usb-a",
                "usb-b",
                "usb-c",
                "usb-mini-a",
                "usb-mini-b",
                "usb-micro-a",
                "usb-micro-b",
                "other"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete console port templates within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create console port template within NetBox with only required information\n      netbox_console_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Port Template\n          device_type: Test Device Type\n        state: present\n\n    - name: Update console port template with other fields\n      netbox_console_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Port Template\n          device_type: Test Device Type\n          type: iec-60320-c6\n        state: present\n\n    - name: Delete console port template within netbox\n      netbox_console_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Port Template\n          device_type: Test Device Type\n        state: absent\n"
  },
  "netbox.netbox.netbox_console_server_port": {
    "doc": {
      "description": "Creates, updates or removes console server ports from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the console server port configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Description of the console server port",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "The device the console server port is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the console server port",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the console server port may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the console server port",
              "type": "str",
              "required": false,
              "choices": [
                "de-9",
                "db-25",
                "rj-11",
                "rj-12",
                "rj-45",
                "usb-a",
                "usb-b",
                "usb-c",
                "usb-mini-a",
                "usb-mini-b",
                "usb-micro-a",
                "usb-micro-b",
                "other"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete console server ports within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create console server port within NetBox with only required information\n      netbox_console_server_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Server Port\n          device: Test Device\n        state: present\n\n    - name: Update console server port with other fields\n      netbox_console_server_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Server Port\n          device: Test Device\n          type: usb-a\n          description: console server port description\n        state: present\n\n    - name: Delete console server port within netbox\n      netbox_console_server_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Server Port\n          device: Test Device\n        state: absent\n"
  },
  "netbox.netbox.netbox_console_server_port_template": {
    "doc": {
      "description": "Creates, updates or removes console server port templates from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the console server port template configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "device_type": {
              "aliases": [],
              "description": "The device type the console server port template is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the console server port template",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the console server port template",
              "type": "str",
              "required": false,
              "choices": [
                "de-9",
                "db-25",
                "rj-11",
                "rj-12",
                "rj-45",
                "usb-a",
                "usb-b",
                "usb-c",
                "usb-mini-a",
                "usb-mini-b",
                "usb-micro-a",
                "usb-micro-b",
                "other"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete console server port templates within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create console server port template within NetBox with only required information\n      netbox_console_server_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Server Port Template\n          device_type: Test Device Type\n        state: present\n\n    - name: Update console server port template with other fields\n      netbox_console_server_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Server Port Template\n          device_type: Test Device Type\n          type: iec-60320-c6\n        state: present\n\n    - name: Delete console server port template within netbox\n      netbox_console_server_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Console Server Port Template\n          device_type: Test Device Type\n        state: absent\n"
  },
  "netbox.netbox.netbox_device": {
    "doc": {
      "description": "Creates, updates or removes devices from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the device configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "asset_tag": {
              "aliases": [],
              "description": "Asset tag that is associated to the device",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "cluster": {
              "aliases": [],
              "description": "Cluster that the device will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "comments": {
              "aliases": [],
              "description": "Comments that may include additional information in regards to the device",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "device_role": {
              "aliases": [],
              "description": "Required if I(state=present) and the device does not exist yet",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "device_type": {
              "aliases": [],
              "description": "Required if I(state=present) and the device does not exist yet",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "face": {
              "aliases": [],
              "description": "Required if I(rack) is defined",
              "type": "str",
              "required": false,
              "choices": [
                "Front",
                "front",
                "Rear",
                "rear"
              ],
              "suboptions": {}
            },
            "local_context_data": {
              "aliases": [],
              "description": "Arbitrary JSON data to define the devices configuration variables.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "location": {
              "aliases": [],
              "description": "The location the device will be associated to (NetBox 2.11+)",
              "type": "raw",
              "required": false,
              "version_added": "3.3.0",
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the device",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "platform": {
              "aliases": [],
              "description": "The platform of the device",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "position": {
              "aliases": [],
              "description": "The position of the device in the rack defined above",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "primary_ip4": {
              "aliases": [],
              "description": "Primary IPv4 address assigned to the device",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "primary_ip6": {
              "aliases": [],
              "description": "Primary IPv6 address assigned to the device",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "rack": {
              "aliases": [],
              "description": "The name of the rack to assign the device to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "serial": {
              "aliases": [],
              "description": "Serial number of the device",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "Required if I(state=present) and the device does not exist yet",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the device",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the device may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant that the device will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "vc_position": {
              "aliases": [],
              "description": "Position in the assigned virtual chassis",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "vc_priority": {
              "aliases": [],
              "description": "Priority in the assigned virtual chassis",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "virtual_chassis": {
              "aliases": [],
              "description": "Virtual chassis the device will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete devices within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create device within NetBox with only required information\n      netbox_device:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Device\n          device_type: C9410R\n          device_role: Core Switch\n          site: Main\n        state: present\n\n    - name: Create device within NetBox with empty string name to generate UUID\n      netbox_device:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"\"\n          device_type: C9410R\n          device_role: Core Switch\n          site: Main\n        state: present\n\n    - name: Delete device within netbox\n      netbox_device:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Device\n        state: absent\n\n    - name: Create device with tags\n      netbox_device:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Another Test Device\n          device_type: C9410R\n          device_role: Core Switch\n          site: Main\n          local_context_data:\n            bgp: \"65000\"\n          tags:\n            - Schnozzberry\n        state: present\n\n    - name: Update the rack and position of an existing device\n      netbox_device:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Device\n          rack: Test Rack\n          position: 10\n          face: Front\n        state: present\n"
  },
  "netbox.netbox.netbox_device_bay": {
    "doc": {
      "description": "Creates, updates or removes device bays from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the device bay configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the device bay. This is supported on v2.6+ of NetBox",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "The device the device bay will be associated to. The device type must be \"parent\".",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "installed_device": {
              "aliases": [],
              "description": "The ddevice that will be installed into the bay. The device type must be \"child\".",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the device bay",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the device bay may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete device bays within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create device bay within NetBox with only required information\n      netbox_device_bay:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: Test Nexus One\n          name: \"Device Bay One\"\n        state: present\n\n    - name: Add device into device bay\n      netbox_device_bay:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: Test Nexus One\n          name: \"Device Bay One\"\n          description: \"First child\"\n          installed_device: Test Nexus Child One\n        state: absent\n\n    - name: Delete device bay within netbox\n      netbox_device_bay:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Device Bay One\n        state: absent\n\n"
  },
  "netbox.netbox.netbox_device_bay_template": {
    "doc": {
      "description": "Creates, updates or removes device bay templates from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the device bay template configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "device_type": {
              "aliases": [],
              "description": "The device type the device bay template will be associated to. The device type must be \"parent\".",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the device bay template",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete device bay templates within NetBox",
      "version_added": "0.3.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create device bay template within NetBox with only required information\n      netbox_device_bay_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: device bay template One\n          device_type: Device Type One\n        state: present\n\n    - name: Delete device bay template within netbox\n      netbox_device_bay_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: device bay template One\n          device_type: Device Type One\n        state: absent\n\n"
  },
  "netbox.netbox.netbox_device_interface": {
    "doc": {
      "description": "Creates or removes interfaces from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the interface configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the interface",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "Name of the device the interface will be associated with (case-sensitive)",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Sets whether interface shows enabled or disabled",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "form_factor": {
              "aliases": [],
              "description": "Form factor of the interface:\nex. 1000Base-T (1GE), Virtual, 10GBASE-T (10GE)\nThis has to be specified exactly as what is found within UI\n",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "label": {
              "aliases": [],
              "description": "Physical label of the interface",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "lag": {
              "aliases": [],
              "description": "Parent LAG interface will be a member of",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "mac_address": {
              "aliases": [],
              "description": "The MAC address of the interface",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mark_connected": {
              "aliases": [],
              "description": "Mark an interface as connected without a cable attached (netbox >= 2.11 required)",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mgmt_only": {
              "aliases": [],
              "description": "This interface is used only for out-of-band management",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "The mode of the interface",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "mtu": {
              "aliases": [],
              "description": "The MTU of the interface",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the interface to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "parent_interface": {
              "aliases": [],
              "description": "The device's parent interface",
              "type": "raw",
              "required": false,
              "version_added": "3.2.0",
              "suboptions": {}
            },
            "tagged_vlans": {
              "aliases": [],
              "description": "A list of tagged VLANS to be assigned to interface. Mode must be set to either C(Tagged) or C(Tagged All)",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the interface may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Form factor of the interface:\nex. 1000Base-T (1GE), Virtual, 10GBASE-T (10GE)\nThis has to be specified exactly as what is found within UI\n",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "untagged_vlan": {
              "aliases": [],
              "description": "The untagged VLAN to be assigned to interface",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "update_vc_child": {
          "aliases": [],
          "description": "Use when master device is specified for C(device) and the specified interface exists on a child device\nand needs updated\n",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes interfaces on devices from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox interface module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create interface within NetBox with only required information\n      netbox_device_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: GigabitEthernet1\n        state: present\n    - name: Delete interface within netbox\n      netbox_device_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: GigabitEthernet1\n        state: absent\n    - name: Create LAG with several specified options\n      netbox_device_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: port-channel1\n          type: Link Aggregation Group (LAG)\n          mtu: 1600\n          mgmt_only: false\n          mode: Access\n        state: present\n    - name: Create interface and assign it to parent LAG\n      netbox_device_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: GigabitEthernet1\n          enabled: false\n          type: 1000Base-t (1GE)\n          lag:\n            name: port-channel1\n          mtu: 1600\n          mgmt_only: false\n          mode: Access\n        state: present\n    - name: Create interface as a trunk port\n      netbox_device_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: GigabitEthernet25\n          enabled: false\n          type: 1000Base-t (1GE)\n          untagged_vlan:\n            name: Wireless\n            site: Test Site\n          tagged_vlans:\n            - name: Data\n              site: Test Site\n            - name: VoIP\n              site: Test Site\n          mtu: 1600\n          mgmt_only: true\n          mode: Tagged\n        state: present\n    - name: Update interface on child device on virtual chassis\n      netbox_device_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: GigabitEthernet2/0/1\n          enabled: false\n        update_vc_child: True\n    - name: Mark interface as connected without a cable (netbox >= 2.11 required)\n      netbox.netbox.netbox_device_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: GigabitEthernet1\n          mark_connected: true\n        state: present\n"
  },
  "netbox.netbox.netbox_device_interface_template": {
    "doc": {
      "description": "Creates or removes interfaces from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the prefix configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "device_type": {
              "aliases": [],
              "description": "Name of the device the interface template will be associated with (case-sensitive)",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "mgmt_only": {
              "aliases": [],
              "description": "This interface template is used only for out-of-band management",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the interface template to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Form factor of the interface:\nex. 1000Base-T (1GE), Virtual, 10GBASE-T (10GE)\nThis has to be specified exactly as what is found within UI\n",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes interfaces on devices from NetBox",
      "version_added": "0.3.0"
    },
    "examples": "\n- name: \"Test NetBox interface template module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create interface template within NetBox with only required information\n      netbox_device_interface_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device_type: Arista Test\n          name: 10GBASE-T (10GE)\n          type: 10gbase-t\n        state: present\n    - name: Delete interface template within netbox\n      netbox_device_interface_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device_type: Arista Test\n          name: 10GBASE-T (10GE)\n          type: 10gbase-t\n        state: absent\n"
  },
  "netbox.netbox.netbox_device_role": {
    "doc": {
      "description": "Creates, updates or removes devices roles from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the device role configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "color": {
              "aliases": [],
              "description": "Hexidecimal code for a color, ex. FFFFFF",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the device role",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the device role",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vm_role": {
              "aliases": [],
              "description": "Whether the role is a VM role",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete devices roles within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create device role within NetBox with only required information\n      netbox_device_role:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test device role\n          color: FFFFFF\n        state: present\n\n    - name: Delete device role within netbox\n      netbox_device_role:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rack role\n        state: absent\n"
  },
  "netbox.netbox.netbox_device_type": {
    "doc": {
      "description": "Creates, updates or removes device types from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the device type configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "comments": {
              "aliases": [],
              "description": "Comments that may include additional information in regards to the device_type",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "is_full_depth": {
              "aliases": [],
              "description": "Whether or not the device consumes both front and rear rack faces",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "manufacturer": {
              "aliases": [],
              "description": "The manufacturer of the device type",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "model": {
              "aliases": [],
              "description": "The model of the device type",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "part_number": {
              "aliases": [],
              "description": "The part number of the device type",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slug of the device type. Must follow slug formatting (URL friendly)\nIf not specified, it will slugify the model\nex. test-device-type",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "subdevice_role": {
              "aliases": [],
              "description": "Whether the device type is parent, child, or neither",
              "type": "str",
              "required": false,
              "choices": [
                "Parent",
                "parent",
                "Child",
                "child"
              ],
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the device type may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "u_height": {
              "aliases": [],
              "description": "The height of the device type in rack units",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete device types within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create device type within NetBox with only required information\n      netbox_device_type:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          slug: test-device-type\n          model: ws-test-3750\n          manufacturer: Test Manufacturer\n        state: present\n\n    - name: Create device type within NetBox with only required information\n      netbox_device_type:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          slug: test-device-type\n          model: ws-test-3750\n          manufacturer: Test Manufacturer\n          part_number: ws-3750g-v2\n          u_height: 1\n          is_full_depth: False\n          subdevice_role: parent\n        state: present\n\n    - name: Delete device type within netbox\n      netbox_device_type:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          slug: test-device-type\n        state: absent\n"
  },
  "netbox.netbox.netbox_front_port": {
    "doc": {
      "description": "Creates, updates or removes front ports from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the front port configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Description of the front port",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "The device the front port is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the front port",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "rear_port": {
              "aliases": [],
              "description": "The rear_port the front port is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "rear_port_position": {
              "aliases": [],
              "description": "The position of the rear port this front port is connected to",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the front port may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the front port",
              "type": "str",
              "required": true,
              "choices": [
                "8p8c",
                "110-punch",
                "bnc",
                "mrj21",
                "fc",
                "lc",
                "lc-apc",
                "lsh",
                "lsh-apc",
                "mpo",
                "mtrj",
                "sc",
                "sc-apc",
                "st"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete front ports within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create front port within NetBox with only required information\n      netbox_front_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Front Port\n          device: Test Device\n          type: bnc\n          rear_port: Test Rear Port\n        state: present\n\n    - name: Update front port with other fields\n      netbox_front_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Front Port\n          device: Test Device\n          type: bnc\n          rear_port: Test Rear Port\n          rear_port_position: 5\n          description: front port description\n        state: present\n\n    - name: Delete front port within netbox\n      netbox_front_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Front Port\n          device: Test Device\n          type: bnc\n          rear_port: Test Rear Port\n        state: absent\n"
  },
  "netbox.netbox.netbox_front_port_template": {
    "doc": {
      "description": "Creates, updates or removes front port templates from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the front port template configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "device_type": {
              "aliases": [],
              "description": "The device type the front port template is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the front port template",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "rear_port_template": {
              "aliases": [],
              "description": "The rear_port_template the front port template is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "rear_port_template_position": {
              "aliases": [],
              "description": "The position of the rear port template this front port template is connected to",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the front port template",
              "type": "str",
              "required": false,
              "choices": [
                "8p8c",
                "110-punch",
                "bnc",
                "mrj21",
                "fc",
                "lc",
                "lc-apc",
                "lsh",
                "lsh-apc",
                "mpo",
                "mtrj",
                "sc",
                "sc-apc",
                "st"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete front port templates within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create front port template within NetBox with only required information\n      netbox_front_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Front Port Template\n          device_type: Test Device Type\n          type: bnc\n          rear_port_template: Test Rear Port Template\n        state: present\n\n    - name: Update front port template with other fields\n      netbox_front_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Front Port Template\n          device_type: Test Device Type\n          type: bnc\n          rear_port_template: Test Rear Port Template\n          rear_port_template_position: 5\n        state: present\n\n    - name: Delete front port template within netbox\n      netbox_front_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Front Port Template\n          device_type: Test Device Type\n          type: bnc\n          rear_port_template: Test Rear Port Template\n        state: absent\n"
  },
  "netbox.netbox.netbox_inventory_item": {
    "doc": {
      "description": "Creates or removes inventory items from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the inventory item configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "asset_tag": {
              "aliases": [],
              "description": "The asset tag of the inventory item",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in Netbox",
              "type": "dict",
              "required": false,
              "version_added": "3.4.0",
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the inventory item",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "Name of the device the inventory item belongs to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "discovered": {
              "aliases": [],
              "description": "Set the discovery flag for the inventory item",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "label": {
              "aliases": [],
              "description": "The physical label of the inventory item",
              "type": "str",
              "required": false,
              "version_added": "3.4.0",
              "suboptions": {}
            },
            "manufacturer": {
              "aliases": [],
              "description": "The manufacturer of the inventory item",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the inventory item to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "part_id": {
              "aliases": [],
              "description": "The part ID of the inventory item",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "serial": {
              "aliases": [],
              "description": "The serial number of the inventory item",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the device may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes inventory items from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox inventory_item module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create inventory item within NetBox with only required information\n      netbox_inventory_item:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: \"10G-SFP+\"\n        state: present\n\n    - name: Update inventory item\n      netbox_inventory_item:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: \"10G-SFP+\"\n          manufacturer: \"Cisco\"\n          part_id: \"10G-SFP+\"\n          serial: \"1234\"\n          asset_tag: \"1234\"\n          description: \"New SFP\"\n        state: present\n\n    - name: Delete inventory item within netbox\n      netbox_inventory_item:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          device: test100\n          name: \"10G-SFP+\"\n        state: absent\n"
  },
  "netbox.netbox.netbox_ip_address": {
    "doc": {
      "description": "Creates or removes IP addresses from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the IP address configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Required if state is C(present)",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "assigned_object": {
              "aliases": [],
              "description": "Definition of the assigned object.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "device": {
                  "aliases": [],
                  "description": "The device the interface is attached to.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "The name of the interface",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "virtual_machine": {
                  "aliases": [],
                  "description": "The virtual machine the interface is attached to.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the interface",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dns_name": {
              "aliases": [],
              "description": "Hostname or FQDN",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "family": {
              "aliases": [],
              "description": "(DEPRECATED) - NetBox now handles determining the IP family natively.\nSpecifies with address family the IP address belongs to",
              "type": "int",
              "required": false,
              "choices": [
                "4",
                "6"
              ],
              "suboptions": {}
            },
            "interface": {
              "aliases": [],
              "description": "The name and device of the interface that the IP address should be assigned to\nRequired if state is C(present) and a prefix specified.\n",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "nat_inside": {
              "aliases": [],
              "description": "The inside IP address this IP is assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "prefix": {
              "aliases": [],
              "description": "With state C(present), if an interface is given, it will ensure\nthat an IP inside this prefix (and vrf, if given) is attached\nto this interface. Otherwise, it will get the next available IP\nof this prefix and attach it.\nWith state C(new), it will force to get the next available IP in\nthis prefix. If an interface is given, it will also force to attach\nit.\nRequired if state is C(present) or C(new) when no address is given.\nUnused if an address is specified.\n",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "role": {
              "aliases": [],
              "description": "The role of the IP address",
              "type": "str",
              "required": false,
              "choices": [
                "Loopback",
                "Secondary",
                "Anycast",
                "VIP",
                "VRRP",
                "HSRP",
                "GLBP",
                "CARP"
              ],
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the IP address",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the IP address may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant that the device will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "vrf": {
              "aliases": [],
              "description": "VRF that IP address is associated with",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Use C(present), C(new) or C(absent) for adding, force adding or removing.\nC(present) will check if the IP is already created, and return it if\ntrue. C(new) will force to create it anyway (useful for anycasts, for\nexample).\n",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "new",
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes IP addresses from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox IP address module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create IP address within NetBox with only required information\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          address: 192.168.1.10\n        state: present\n    - name: Force to create (even if it already exists) the IP\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          address: 192.168.1.10\n        state: new\n    - name: Get a new available IP inside 192.168.1.0/24\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 192.168.1.0/24\n        state: new\n    - name: Delete IP address within netbox\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          address: 192.168.1.10\n        state: absent\n    - name: Create IP address with several specified options\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          address: 192.168.1.20\n          vrf: Test\n          tenant: Test Tenant\n          status: Reserved\n          role: Loopback\n          description: Test description\n          tags:\n            - Schnozzberry\n        state: present\n    - name: Create IP address and assign a nat_inside IP\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          address: 192.168.1.30\n          vrf: Test\n          nat_inside:\n            address: 192.168.1.20\n            vrf: Test\n          interface:\n            name: GigabitEthernet1\n            device: test100\n    - name: Ensure that an IP inside 192.168.1.0/24 is attached to GigabitEthernet1\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 192.168.1.0/24\n          vrf: Test\n          interface:\n            name: GigabitEthernet1\n            device: test100\n        state: present\n    - name: Attach a new available IP of 192.168.1.0/24 to GigabitEthernet1\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 192.168.1.0/24\n          vrf: Test\n          interface:\n            name: GigabitEthernet1\n            device: test100\n        state: new\n    - name: Attach a new available IP of 192.168.1.0/24 to GigabitEthernet1 (NetBox 2.9+)\n      netbox_ip_address:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 192.168.1.0/24\n          vrf: Test\n          assigned_object:\n            name: GigabitEthernet1\n            device: test100\n        state: new\n"
  },
  "netbox.netbox.netbox_ipam_role": {
    "doc": {
      "description": "Creates or removes ipam roles from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the ipam role configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the ipam role",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the ipam role to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "weight": {
              "aliases": [],
              "description": "The weight of the ipam role to be created",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes ipam roles from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create ipam role within NetBox with only required information\n      netbox_ipam_role:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test IPAM Role\n        state: present\n\n    - name: Delete ipam role within netbox\n      netbox_ipam_role:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test IPAM Role\n        state: absent\n"
  },
  "netbox.netbox.netbox_location": {
    "doc": {
      "description": "Creates, updates or removes locations from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the location configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the location",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the location",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "parent_location": {
              "aliases": [],
              "description": "The parent location the location will be associated with",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "Required if I(state=present) and the location does not exist yet",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete locations within NetBox",
      "version_added": "3.3.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create location within NetBox with only required information\n      netbox.netbox.netbox_location:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test location\n          site: Test Site\n        state: present\n\n    - name: Create location within NetBox with a parent location\n      netbox.netbox.netbox_location:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Child location\n          site: Test Site\n          parent_location: Test location\n        state: present\n\n    - name: Delete location within NetBox\n      netbox.netbox.netbox_location:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test location\n        state: absent\n"
  },
  "netbox.netbox.netbox_manufacturer": {
    "doc": {
      "description": "Creates or removes manufacturers from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the manufacturer configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the manufacturer",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the manufacturer",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create or delete manufacturers within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create manufacturer within NetBox with only required information\n      netbox_manufacturer:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Manufacturer\n        state: present\n\n    - name: Delete manufacturer within netbox\n      netbox_manufacturer:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Manufacturer\n        state: absent\n"
  },
  "netbox.netbox.netbox_platform": {
    "doc": {
      "description": "Creates or removes platforms from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the platform configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the platform",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "manufacturer": {
              "aliases": [],
              "description": "The manufacturer the platform will be tied to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the platform",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "napalm_args": {
              "aliases": [],
              "description": "The optional arguments used for NAPALM connections",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "napalm_driver": {
              "aliases": [],
              "description": "The name of the NAPALM driver to be used when using the NAPALM plugin",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create or delete platforms within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create platform within NetBox with only required information\n      netbox_platform:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Platform\n        state: present\n\n    - name: Create platform within NetBox with only required information\n      netbox_platform:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Platform All\n          manufacturer: Test Manufacturer\n          napalm_driver: ios\n          napalm_args:\n            global_delay_factor: 2\n        state: present\n\n    - name: Delete platform within netbox\n      netbox_platform:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Platform\n        state: absent\n"
  },
  "netbox.netbox.netbox_power_feed": {
    "doc": {
      "description": "Creates, updates or removes power feeds from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the power feed configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "amperage": {
              "aliases": [],
              "description": "The amperage of the power feed",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "comments": {
              "aliases": [],
              "description": "Comments related to the power feed",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "max_utilization": {
              "aliases": [],
              "description": "The maximum permissible draw of the power feed in percent",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the power feed",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "phase": {
              "aliases": [],
              "description": "The phase type of the power feed",
              "type": "str",
              "required": false,
              "choices": [
                "single-phase",
                "three-phase"
              ],
              "suboptions": {}
            },
            "power_panel": {
              "aliases": [],
              "description": "The power panel the power feed is terminated on",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "rack": {
              "aliases": [],
              "description": "The rack the power feed is assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the power feed",
              "type": "str",
              "required": false,
              "choices": [
                "offline",
                "active",
                "planned",
                "failed"
              ],
              "suboptions": {}
            },
            "supply": {
              "aliases": [],
              "description": "The supply type of the power feed",
              "type": "str",
              "required": false,
              "choices": [
                "ac",
                "dc"
              ],
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the power feed may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the power feed",
              "type": "str",
              "required": false,
              "choices": [
                "primary",
                "redundant"
              ],
              "suboptions": {}
            },
            "voltage": {
              "aliases": [],
              "description": "The voltage of the power feed",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete power feeds within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create power feed within NetBox with only required information\n      netbox_power_feed:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Feed\n          power_panel: Test Power Panel\n        state: present\n\n    - name: Update power feed with other fields\n      netbox_power_feed:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Feed\n          power_panel: Test Power Panel\n          status: offline\n          type: primary\n          supply: ac\n          phase: single-phase\n          voltage: 230\n          amperage: 16\n          max_utilization: 80\n          comments: normal power feed\n        state: present\n\n    - name: Delete power feed within netbox\n      netbox_power_feed:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Feed\n          power_panel: Test Power Panel\n        state: absent\n"
  },
  "netbox.netbox.netbox_power_outlet": {
    "doc": {
      "description": "Creates, updates or removes power outlets from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the power outlet configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Description of the power outlet",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "The device the power outlet is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "feed_leg": {
              "aliases": [],
              "description": "The phase, in case of three-phase feed",
              "type": "str",
              "required": false,
              "choices": [
                "A",
                "B",
                "C"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the power outlet",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "power_port": {
              "aliases": [],
              "description": "The attached power port",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the power outlet may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the power outlet",
              "type": "str",
              "required": false,
              "choices": [
                "iec-60320-c5",
                "iec-60320-c7",
                "iec-60320-c13",
                "iec-60320-c15",
                "iec-60320-c19",
                "iec-60309-p-n-e-4h",
                "iec-60309-p-n-e-6h",
                "iec-60309-p-n-e-9h",
                "iec-60309-2p-e-4h",
                "iec-60309-2p-e-6h",
                "iec-60309-2p-e-9h",
                "iec-60309-3p-e-4h",
                "iec-60309-3p-e-6h",
                "iec-60309-3p-e-9h",
                "iec-60309-3p-n-e-4h",
                "iec-60309-3p-n-e-6h",
                "iec-60309-3p-n-e-9h",
                "nema-5-15r",
                "nema-5-20r",
                "nema-5-30r",
                "nema-5-50r",
                "nema-6-15r",
                "nema-6-20r",
                "nema-6-30r",
                "nema-6-50r",
                "nema-l5-15r",
                "nema-l5-20r",
                "nema-l5-30r",
                "nema-l5-50r",
                "nema-l6-20r",
                "nema-l6-30r",
                "nema-l6-50r",
                "nema-l14-20r",
                "nema-l14-30r",
                "nema-l21-20r",
                "nema-l21-30r",
                "CS6360C",
                "CS6364C",
                "CS8164C",
                "CS8264C",
                "CS8364C",
                "CS8464C",
                "ita-e",
                "ita-f",
                "ita-g",
                "ita-h",
                "ita-i",
                "ita-j",
                "ita-k",
                "ita-l",
                "ita-m",
                "ita-n",
                "ita-o",
                "hdot-cx"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete power outlets within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create power port within NetBox with only required information\n      netbox_power_outlet:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Outlet\n          device: Test Device\n        state: present\n\n    - name: Update power port with other fields\n      netbox_power_outlet:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Outlet\n          device: Test Device\n          type: iec-60320-c6\n          power_port: Test Power Port\n          feed_leg: A\n          description: power port description\n        state: present\n\n    - name: Delete power port within netbox\n      netbox_power_outlet:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Outlet\n          device: Test Device\n        state: absent\n"
  },
  "netbox.netbox.netbox_power_outlet_template": {
    "doc": {
      "description": "Creates, updates or removes power outlet templates from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the power outlet configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "device_type": {
              "aliases": [],
              "description": "The device type the power outlet is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "feed_leg": {
              "aliases": [],
              "description": "The phase, in case of three-phase feed",
              "type": "str",
              "required": false,
              "choices": [
                "A",
                "B",
                "C"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the power outlet",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "power_port_template": {
              "aliases": [],
              "description": "The attached power port template",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the power outlet",
              "type": "str",
              "required": false,
              "choices": [
                "iec-60320-c5",
                "iec-60320-c7",
                "iec-60320-c13",
                "iec-60320-c15",
                "iec-60320-c19",
                "iec-60309-p-n-e-4h",
                "iec-60309-p-n-e-6h",
                "iec-60309-p-n-e-9h",
                "iec-60309-2p-e-4h",
                "iec-60309-2p-e-6h",
                "iec-60309-2p-e-9h",
                "iec-60309-3p-e-4h",
                "iec-60309-3p-e-6h",
                "iec-60309-3p-e-9h",
                "iec-60309-3p-n-e-4h",
                "iec-60309-3p-n-e-6h",
                "iec-60309-3p-n-e-9h",
                "nema-5-15r",
                "nema-5-20r",
                "nema-5-30r",
                "nema-5-50r",
                "nema-6-15r",
                "nema-6-20r",
                "nema-6-30r",
                "nema-6-50r",
                "nema-l5-15r",
                "nema-l5-20r",
                "nema-l5-30r",
                "nema-l5-50r",
                "nema-l6-20r",
                "nema-l6-30r",
                "nema-l6-50r",
                "nema-l14-20r",
                "nema-l14-30r",
                "nema-l21-20r",
                "nema-l21-30r",
                "CS6360C",
                "CS6364C",
                "CS8164C",
                "CS8264C",
                "CS8364C",
                "CS8464C",
                "ita-e",
                "ita-f",
                "ita-g",
                "ita-h",
                "ita-i",
                "ita-j",
                "ita-k",
                "ita-l",
                "ita-m",
                "ita-n",
                "ita-o",
                "hdot-cx"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete power outlet templates within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create power outlet template within NetBox with only required information\n      netbox_power_outlet_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Outlet Template\n          device_type: Test Device Type\n        state: present\n\n    - name: Update power outlet template with other fields\n      netbox_power_outlet_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Outlet Template\n          device_type: Test Device Type\n          type: iec-60320-c6\n          power_port_template: Test Power Port Template\n          feed_leg: A\n        state: present\n\n    - name: Delete power outlet template within netbox\n      netbox_power_outlet_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Outlet Template\n          device_type: Test Device Type\n        state: absent\n"
  },
  "netbox.netbox.netbox_power_panel": {
    "doc": {
      "description": "Creates, updates or removes power panels from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the power panel configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "location": {
              "aliases": [],
              "description": "The location the power panel is assigned to (NetBox 2.11+)",
              "type": "raw",
              "required": false,
              "version_added": "3.1.0",
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the power panel",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "rack_group": {
              "aliases": [],
              "description": "The rack group the power panel is assigned to (NetBox < 2.11)\nWill be removed in version 5.0.0",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "The site the power panel is located in",
              "type": "raw",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete power panels within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create power panel within NetBox with only required information\n      netbox_power_panel:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Panel\n          site: Test Site\n        state: present\n\n    - name: Update power panel with other fields - Pre 2.11\n      netbox_power_panel:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Panel\n          site: Test Site\n          rack_group: Test Rack Group\n        state: present\n\n    - name: Create power panel within NetBox with only required information - Post 2.11\n      netbox_power_panel:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Panel\n          site: Test Site\n          location: Test Location\n        state: present\n\n    - name: Delete power panel within netbox\n      netbox_power_panel:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Panel\n          site: Test Site\n        state: absent\n"
  },
  "netbox.netbox.netbox_power_port": {
    "doc": {
      "description": "Creates, updates or removes power ports from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the power port configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "allocated_draw": {
              "aliases": [],
              "description": "The allocated draw of the power port in watt",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Description of the power port",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "The device the power port is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "maximum_draw": {
              "aliases": [],
              "description": "The maximum permissible draw of the power port in watt",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the power port",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the power port may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the power port",
              "type": "str",
              "required": false,
              "choices": [
                "iec-60320-c6",
                "iec-60320-c8",
                "iec-60320-c14",
                "iec-60320-c16",
                "iec-60320-c20",
                "iec-60309-p-n-e-4h",
                "iec-60309-p-n-e-6h",
                "iec-60309-p-n-e-9h",
                "iec-60309-2p-e-4h",
                "iec-60309-2p-e-6h",
                "iec-60309-2p-e-9h",
                "iec-60309-3p-e-4h",
                "iec-60309-3p-e-6h",
                "iec-60309-3p-e-9h",
                "iec-60309-3p-n-e-4h",
                "iec-60309-3p-n-e-6h",
                "iec-60309-3p-n-e-9h",
                "nema-5-15p",
                "nema-5-20p",
                "nema-5-30p",
                "nema-5-50p",
                "nema-6-15p",
                "nema-6-20p",
                "nema-6-30p",
                "nema-6-50p",
                "nema-l5-15p",
                "nema-l5-20p",
                "nema-l5-30p",
                "nema-l5-50p",
                "nema-l6-20p",
                "nema-l6-30p",
                "nema-l6-50p",
                "nema-l14-20p",
                "nema-l14-30p",
                "nema-l21-20p",
                "nema-l21-30p",
                "cs6361c",
                "cs6365c",
                "cs8165c",
                "cs8265c",
                "cs8365c",
                "cs8465c",
                "ita-e",
                "ita-f",
                "ita-ef",
                "ita-g",
                "ita-h",
                "ita-i",
                "ita-j",
                "ita-k",
                "ita-l",
                "ita-m",
                "ita-n",
                "ita-o"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete power ports within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create power port within NetBox with only required information\n      netbox_power_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Port\n          device: Test Device\n        state: present\n\n    - name: Update power port with other fields\n      netbox_power_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Port\n          device: Test Device\n          type: iec-60320-c6\n          allocated_draw: 16\n          maximum_draw: 80\n          description: power port description\n        state: present\n\n    - name: Delete power port within netbox\n      netbox_power_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Port\n          device: Test Device\n        state: absent\n"
  },
  "netbox.netbox.netbox_power_port_template": {
    "doc": {
      "description": "Creates, updates or removes power port templates from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the power port configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "allocated_draw": {
              "aliases": [],
              "description": "The allocated draw of the power port in watt",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "device_type": {
              "aliases": [],
              "description": "The device type the power port is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "maximum_draw": {
              "aliases": [],
              "description": "The maximum permissible draw of the power port in watt",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the power port",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the power port",
              "type": "str",
              "required": false,
              "choices": [
                "iec-60320-c6",
                "iec-60320-c8",
                "iec-60320-c14",
                "iec-60320-c16",
                "iec-60320-c20",
                "iec-60309-p-n-e-4h",
                "iec-60309-p-n-e-6h",
                "iec-60309-p-n-e-9h",
                "iec-60309-2p-e-4h",
                "iec-60309-2p-e-6h",
                "iec-60309-2p-e-9h",
                "iec-60309-3p-e-4h",
                "iec-60309-3p-e-6h",
                "iec-60309-3p-e-9h",
                "iec-60309-3p-n-e-4h",
                "iec-60309-3p-n-e-6h",
                "iec-60309-3p-n-e-9h",
                "nema-5-15p",
                "nema-5-20p",
                "nema-5-30p",
                "nema-5-50p",
                "nema-6-15p",
                "nema-6-20p",
                "nema-6-30p",
                "nema-6-50p",
                "nema-l5-15p",
                "nema-l5-20p",
                "nema-l5-30p",
                "nema-l5-50p",
                "nema-l6-20p",
                "nema-l6-30p",
                "nema-l6-50p",
                "nema-l14-20p",
                "nema-l14-30p",
                "nema-l21-20p",
                "nema-l21-30p",
                "cs6361c",
                "cs6365c",
                "cs8165c",
                "cs8265c",
                "cs8365c",
                "cs8465c",
                "ita-e",
                "ita-f",
                "ita-ef",
                "ita-g",
                "ita-h",
                "ita-i",
                "ita-j",
                "ita-k",
                "ita-l",
                "ita-m",
                "ita-n",
                "ita-o"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete power port templates within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create power port within NetBox with only required information\n      netbox_power_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Port Template\n          device_type: Test Device Type\n        state: present\n\n    - name: Update power port with other fields\n      netbox_power_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Port Template\n          device_type: Test Device Type\n          type: iec-60320-c6\n          allocated_draw: 16\n          maximum_draw: 80\n        state: present\n\n    - name: Delete power port within netbox\n      netbox_power_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Power Port Template\n          device_type: Test Device Type\n        state: absent\n"
  },
  "netbox.netbox.netbox_prefix": {
    "doc": {
      "description": "Creates or removes prefixes from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the prefix configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "Must exist in NetBox and in key/value format",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the prefix",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "family": {
              "aliases": [],
              "description": "Specifies which address family the prefix prefix belongs to",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "is_pool": {
              "aliases": [],
              "description": "All IP Addresses within this prefix are considered usable",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "parent": {
              "aliases": [],
              "description": "Required if state is C(present) and first_available is C(yes). Will get a new available prefix in this parent prefix.",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "prefix": {
              "aliases": [],
              "description": "Required if state is C(present) and first_available is False. Will allocate or free this prefix.",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "prefix_length": {
              "aliases": [],
              "description": "Required ONLY if state is C(present) and first_available is C(yes).\nWill get a new available prefix of the given prefix_length in this parent prefix.\n",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "prefix_role": {
              "aliases": [],
              "description": "The role of the prefix",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "Site that prefix is associated with",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the prefix",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the prefix may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant that the prefix will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "vlan": {
              "aliases": [],
              "description": "The VLAN the prefix will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "vrf": {
              "aliases": [],
              "description": "VRF that prefix is associated with",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "first_available": {
          "aliases": [],
          "description": "If C(yes) and state C(present), if an parent is given, it will get the first available prefix of the given prefix_length inside the given parent (and vrf, if given). Unused with state C(absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes prefixes from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox prefix module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create prefix within NetBox with only required information\n      netbox_prefix:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 10.156.0.0/19\n        state: present\n\n    - name: Delete prefix within netbox\n      netbox_prefix:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 10.156.0.0/19\n        state: absent\n\n    - name: Create prefix with several specified options\n      netbox_prefix:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          family: 4\n          prefix: 10.156.32.0/19\n          site: Test Site\n          vrf: Test VRF\n          tenant: Test Tenant\n          vlan:\n            name: Test VLAN\n            site: Test Site\n            tenant: Test Tenant\n            vlan_group: Test Vlan Group\n          status: Reserved\n          prefix_role: Network of care\n          description: Test description\n          is_pool: true\n          tags:\n            - Schnozzberry\n        state: present\n\n    - name: Get a new /24 inside 10.156.0.0/19 within NetBox - Parent doesn't exist\n      netbox_prefix:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          parent: 10.156.0.0/19\n          prefix_length: 24\n        state: present\n        first_available: yes\n\n    - name: Create prefix within NetBox with only required information\n      netbox_prefix:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 10.156.0.0/19\n        state: present\n\n    - name: Get a new /24 inside 10.156.0.0/19 within NetBox\n      netbox_prefix:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          parent: 10.156.0.0/19\n          prefix_length: 24\n        state: present\n        first_available: yes\n\n    - name: Get a new /24 inside 10.157.0.0/19 within NetBox with additional values\n      netbox_prefix:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          parent: 10.157.0.0/19\n          prefix_length: 24\n          vrf: Test VRF\n          site: Test Site\n        state: present\n        first_available: yes\n"
  },
  "netbox.netbox.netbox_provider": {
    "doc": {
      "description": "Creates, updates or removes providers from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the provider configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "account": {
              "aliases": [],
              "description": "The account number of the provider",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "admin_contact": {
              "aliases": [],
              "description": "The admin contact of the provider",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "asn": {
              "aliases": [],
              "description": "The provider ASN",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "comments": {
              "aliases": [],
              "description": "Comments related to the provider",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the provider",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "noc_contact": {
              "aliases": [],
              "description": "The NOC contact of the provider",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "portal_url": {
              "aliases": [],
              "description": "The URL of the provider",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the device may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete providers within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create provider within NetBox with only required information\n      netbox_provider:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Provider\n        state: present\n\n    - name: Update provider with other fields\n      netbox_provider:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Provider\n          asn: 65001\n          account: 200129104\n          portal_url: http://provider.net\n          noc_contact: noc@provider.net\n          admin_contact: admin@provider.net\n          comments: \"BAD PROVIDER\"\n        state: present\n\n    - name: Delete provider within netbox\n      netbox_provider:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Provider\n        state: absent\n"
  },
  "netbox.netbox.netbox_provider_network": {
    "doc": {
      "description": "Creates, updates or removes provider networks from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the provider network configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "comments": {
              "aliases": [],
              "description": "Comments related to the provider network",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Description related to the provider network",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the provider network",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "provider": {
              "aliases": [],
              "description": "The name of the provider",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the provdier_network may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete provider networks within NetBox",
      "version_added": "3.4.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create provider network within NetBox with only required information\n      netbox_provider_network:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          provider: Test Provider\n          name: Test Provider Network\n        state: present\n\n    - name: Update provider with other fields\n      netbox_provider_network:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          provider: Test Provider\n          name: Test Provider Network\n          description: Describe a Provider Network\n          comments: \"A Provider Network\"\n        state: present\n\n    - name: Delete provider within netbox\n      netbox_provider_network:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          provider: test Provider\n          name: Test Provider Network\n        state: absent\n"
  },
  "netbox.netbox.netbox_rack": {
    "doc": {
      "description": "Creates, updates or removes racks from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the rack configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "asset_tag": {
              "aliases": [],
              "description": "Asset tag that is associated to the rack",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "comments": {
              "aliases": [],
              "description": "Comments that may include additional information in regards to the rack",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "desc_units": {
              "aliases": [],
              "description": "Rack units will be numbered top-to-bottom",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "facility_id": {
              "aliases": [],
              "description": "The unique rack ID assigned by the facility",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "location": {
              "aliases": [],
              "description": "The location the rack will be associated to (NetBox 2.11+)",
              "type": "raw",
              "required": false,
              "version_added": "3.1.0",
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the rack",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "outer_depth": {
              "aliases": [],
              "description": "The outer depth of the rack",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "outer_unit": {
              "aliases": [],
              "description": "Whether the rack unit is in Millimeters or Inches and is I(required) if outer_width/outer_depth is specified",
              "type": "str",
              "required": false,
              "choices": [
                "Millimeters",
                "Inches"
              ],
              "suboptions": {}
            },
            "outer_width": {
              "aliases": [],
              "description": "The outer width of the rack",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "rack_group": {
              "aliases": [],
              "description": "The rack group the rack will be associated to (NetBox < 2.11)\nWill be removed in version 5.0.0",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "rack_role": {
              "aliases": [],
              "description": "The rack role the rack will be associated to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "serial": {
              "aliases": [],
              "description": "Serial number of the rack",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "Required if I(state=present) and the rack does not exist yet",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the rack",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the rack may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant that the device will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of rack",
              "type": "str",
              "required": false,
              "choices": [
                "2-post frame",
                "4-post frame",
                "4-post cabinet",
                "Wall-mounted frame",
                "Wall-mounted cabinet"
              ],
              "suboptions": {}
            },
            "u_height": {
              "aliases": [],
              "description": "The height of the rack in rack units",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "width": {
              "aliases": [],
              "description": "The rail-to-rail width",
              "type": "int",
              "required": false,
              "choices": [
                "10",
                "19",
                "21",
                "23"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete racks within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create rack within NetBox with only required information\n      netbox_rack:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test rack\n          site: Test Site\n        state: present\n\n    - name: Create rack within NetBox with only required information - Pre 2.11\n      netbox_rack:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test rack\n          site: Test Site\n          rack_group: Test Rack Group\n        state: present\n\n    - name: Create rack within NetBox with only required information - Post 2.11\n      netbox_rack:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test rack\n          site: Test Site\n          location: Test Location\n        state: present\n\n    - name: Delete rack within netbox\n      netbox_rack:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rack\n        state: absent\n"
  },
  "netbox.netbox.netbox_rack_group": {
    "doc": {
      "description": "Creates, updates or removes racks groups from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the rack group configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "The name of the rack group",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "Required if I(state=present) and the rack does not exist yet",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete racks groups within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create rack group within NetBox with only required information\n      netbox_rack_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test rack group\n          site: Test Site\n        state: present\n\n    - name: Delete rack group within netbox\n      netbox_rack_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rack group\n          site: Test Site\n        state: absent\n"
  },
  "netbox.netbox.netbox_rack_role": {
    "doc": {
      "description": "Creates, updates or removes racks roles from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the rack role configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "color": {
              "aliases": [],
              "description": "Hexidecimal code for a color, ex. FFFFFF",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the rack role",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete racks roles within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create rack role within NetBox with only required information\n      netbox_rack_role:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test rack role\n          color: FFFFFF\n        state: present\n\n    - name: Delete rack role within netbox\n      netbox_rack_role:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rack role\n        state: absent\n"
  },
  "netbox.netbox.netbox_rear_port": {
    "doc": {
      "description": "Creates, updates or removes rear ports from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the rear port configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Description of the rear port",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "The device the rear port is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the rear port",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "positions": {
              "aliases": [],
              "description": "The number of front ports which may be mapped to each rear port",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the rear port may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the rear port",
              "type": "str",
              "required": true,
              "choices": [
                "8p8c",
                "110-punch",
                "bnc",
                "mrj21",
                "fc",
                "lc",
                "lc-apc",
                "lsh",
                "lsh-apc",
                "mpo",
                "mtrj",
                "sc",
                "sc-apc",
                "st"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete rear ports within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create rear port within NetBox with only required information\n      netbox_rear_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rear Port\n          device: Test Device\n          type: bnc\n        state: present\n\n    - name: Update rear port with other fields\n      netbox_rear_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rear Port\n          device: Test Device\n          type: bnc\n          positions: 5\n          description: rear port description\n        state: present\n\n    - name: Delete rear port within netbox\n      netbox_rear_port:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rear Port\n          device: Test Device\n          type: bnc\n        state: absent\n"
  },
  "netbox.netbox.netbox_rear_port_template": {
    "doc": {
      "description": "Creates, updates or removes rear port templates from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the rear port template configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "device_type": {
              "aliases": [],
              "description": "The device type the rear port template is attached to",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the rear port template",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "positions": {
              "aliases": [],
              "description": "The number of front ports which may be mapped to each rear port",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of the rear port",
              "type": "str",
              "required": false,
              "choices": [
                "8p8c",
                "110-punch",
                "bnc",
                "mrj21",
                "fc",
                "lc",
                "lc-apc",
                "lsh",
                "lsh-apc",
                "mpo",
                "mtrj",
                "sc",
                "sc-apc",
                "st"
              ],
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete rear port templates within NetBox",
      "version_added": "0.2.3"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create rear port template within NetBox with only required information\n      netbox_rear_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rear Port Template\n          device_type: Test Device Type\n          type: bnc\n        state: present\n\n    - name: Update rear port template with other fields\n      netbox_rear_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rear Port Template\n          device_type: Test Device Type\n          type: bnc\n          positions: 5\n        state: present\n\n    - name: Delete rear port template within netbox\n      netbox_rear_port_template:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Rear Port Template\n          device_type: Test Device Type\n          type: bnc\n        state: absent\n"
  },
  "netbox.netbox.netbox_region": {
    "doc": {
      "description": "Creates or removes regions from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the region configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the region to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "parent_region": {
              "aliases": [],
              "description": "The parent region this region should be tied to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes regions from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox region module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create region within NetBox with only required information\n      netbox.netbox.netbox_region:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"Test Region One\"\n        state: present\n\n    - name: Delete region within netbox\n      netbox.netbox.netbox_region:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"Test Region One\"\n        state: absent\n"
  },
  "netbox.netbox.netbox_rir": {
    "doc": {
      "description": "Creates, updates or removes RIRs from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the RIR configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the RIR",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "is_private": {
              "aliases": [],
              "description": "IP space managed by this RIR is considered private",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the RIR",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete RIRs within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create RIR within NetBox with only required information\n      netbox_rir:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test RIR One\n        state: present\n\n    - name: Update Test RIR One\n      netbox_rir:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test RIR One\n          is_private: True\n        state: present\n\n    - name: Delete RIR within netbox\n      netbox_rir:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test RIR One\n        state: absent\n"
  },
  "netbox.netbox.netbox_route_target": {
    "doc": {
      "description": "Creates or removes route targets from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the route target configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Tag description",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Route target name",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the device may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant that the route target will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes route targets from NetBox",
      "version_added": "2.0.0"
    },
    "examples": "\n- name: \"Test route target creation/deletion\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create Route Targets\n      netbox.netbox.netbox_route_target:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"{{ item.name }}\"\n          tenant: \"Test Tenant\"\n          tags:\n            - Schnozzberry\n      loop:\n        - { name: \"65000:65001\", description: \"management\" }\n        - { name: \"65000:65002\", description: \"tunnel\" }\n\n    - name: Update Description on Route Targets\n      netbox.netbox.netbox_route_target:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"{{ item.name }}\"\n          tenant: \"Test Tenant\"\n          description: \"{{ item.description }}\"\n          tags:\n            - Schnozzberry\n      loop:\n        - { name: \"65000:65001\", description: \"management\" }\n        - { name: \"65000:65002\", description: \"tunnel\" }\n\n    - name: Delete Route Targets\n      netbox.netbox.netbox_route_target:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"{{ item }}\"\n        state: absent\n      loop:\n        - \"65000:65001\"\n        - \"65000:65002\"\n"
  },
  "netbox.netbox.netbox_service": {
    "doc": {
      "description": "Creates or removes service from NetBox",
      "has_action": false,
      "notes": "This should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the service configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "Must exist in NetBox and in key/value format",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Service description",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "device": {
              "aliases": [],
              "description": "Specifies on which device the service is running",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "ipaddresses": {
              "aliases": [],
              "description": "Specifies which IPaddresses to associate with service.",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the region to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "Specifies which port used by service",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "ports": {
              "aliases": [],
              "description": "Specifies which ports used by service (NetBox 2.10 and newer)",
              "type": "list",
              "required": false,
              "elements": "int",
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "Specifies which protocol used by service",
              "type": "raw",
              "required": true,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "What tags to add/update",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "virtual_machine": {
              "aliases": [],
              "description": "Specifies on which virtual machine the service is running",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes service from NetBox",
      "version_added": "0.1.5"
    },
    "examples": "\n- name: \"Create netbox service\"\n  connection: local\n  hosts: all\n  gather_facts: False\n\n  tasks:\n    - name: Create service\n      netbox_service:\n        netbox_url: netbox_url\n        netbox_token: netbox_token\n        data:\n          device: Test666\n          name: node-exporter\n          port: 9100\n          protocol: TCP\n          ipaddresses:\n            - address: 127.0.0.1\n          tags:\n            - prometheus\n        state: present\n\n- name: \"Delete netbox service\"\n  connection: local\n  hosts: all\n  gather_facts: False\n\n  tasks:\n    - name: Delete service\n      netbox_service:\n        netbox_url: netbox_url\n        netbox_token: netbox_token\n        data:\n          device: Test666\n          name: node-exporter\n          port: 9100\n          protocol: TCP\n        state: absent\n"
  },
  "netbox.netbox.netbox_site": {
    "doc": {
      "description": "Creates or removes sites from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the site configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "asn": {
              "aliases": [],
              "description": "The ASN associated with the site",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "comments": {
              "aliases": [],
              "description": "Comments for the site. This can be markdown syntax",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "contact_email": {
              "aliases": [],
              "description": "Contact email for site",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "contact_name": {
              "aliases": [],
              "description": "Name of contact for site",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "contact_phone": {
              "aliases": [],
              "description": "Contact phone number for site",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the prefix",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "facility": {
              "aliases": [],
              "description": "Data center provider or facility, ex. Equinix NY7",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "latitude": {
              "aliases": [],
              "description": "Latitude in decimal format",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "longitude": {
              "aliases": [],
              "description": "Longitude in decimal format",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the site to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "physical_address": {
              "aliases": [],
              "description": "Physical address of site",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "region": {
              "aliases": [],
              "description": "The region that the site should be associated with",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "shipping_address": {
              "aliases": [],
              "description": "Shipping address of site",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "site_group": {
              "aliases": [],
              "description": "The site group the site will be associated with (NetBox 2.11+)",
              "type": "raw",
              "required": false,
              "version_added": "3.3.0",
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "URL-friendly unique shorthand",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "Status of the site",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the prefix may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant the site will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "time_zone": {
              "aliases": [],
              "description": "Timezone associated with the site, ex. America/Denver",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes sites from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox site module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create site within NetBox with only required information\n      netbox_site:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test - Colorado\n        state: present\n\n    - name: Delete site within netbox\n      netbox_site:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test - Colorado\n        state: absent\n\n    - name: Create site with all parameters\n      netbox_site:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test - California\n          status: Planned\n          region: Test Region\n          site_group: Test Site Group\n          tenant: Test Tenant\n          facility: EquinoxCA7\n          asn: 65001\n          time_zone: America/Los Angeles\n          description: This is a test description\n          physical_address: Hollywood, CA, 90210\n          shipping_address: Hollywood, CA, 90210\n          latitude: 10.100000\n          longitude: 12.200000\n          contact_name: Jenny\n          contact_phone: 867-5309\n          contact_email: jenny@changednumber.com\n          slug: test-california\n          comments: ### Placeholder\n        state: present\n"
  },
  "netbox.netbox.netbox_site_group": {
    "doc": {
      "description": "Creates, updates, or deletes site groups within NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the site group configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the site group",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the site group to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "parent_site_group": {
              "aliases": [],
              "description": "The parent site group the site group will be associated with",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update, or delete site groups within NetBox",
      "version_added": "3.4.0"
    },
    "examples": "\n- name: \"Test NetBox site group module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create site group within NetBox with only required information\n      netbox.netbox.netbox_site_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Site group\n        state: present\n\n    - name: Create site group within NetBox with a parent site group\n      netbox.netbox.netbox_site_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Child site group\n          parent_site_group: Site group\n        state: present\n\n    - name: Delete site group within NetBox\n      netbox.netbox.netbox_site_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Site group\n        state: absent\n"
  },
  "netbox.netbox.netbox_tag": {
    "doc": {
      "description": "Creates or removes tags from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the tag configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "color": {
              "aliases": [],
              "description": "Tag color",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Tag description",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Tag name",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes tags from NetBox",
      "version_added": "1.2.0"
    },
    "examples": "\n- name: \"Test tags creation/deletion\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create tags\n      netbox_tag:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"{{ item.name }}\"\n          description: \"{{ item.description }}\"\n      loop:\n        - { name: mgmt, description: \"management\" }\n        - { name: tun, description: \"tunnel\" }\n\n    - name: Delete tags\n      netbox_tag:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"{{ item }}\"\n        state: absent\n      loop:\n        - mgmt\n        - tun\n"
  },
  "netbox.netbox.netbox_tenant": {
    "doc": {
      "description": "Creates or removes tenants from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the tenant configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "comments": {
              "aliases": [],
              "description": "Comments for the tenant. This can be markdown syntax",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the tenant",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the tenant to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "URL-friendly unique shorthand",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the tenant may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant_group": {
              "aliases": [],
              "description": "Tenant group this tenant should be in",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes tenants from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create tenant within NetBox with only required information\n      netbox_tenant:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Tenant ABC\n        state: present\n\n    - name: Delete tenant within netbox\n      netbox_tenant:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Tenant ABC\n        state: absent\n\n    - name: Create tenant with all parameters\n      netbox_tenant:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Tenant ABC\n          tenant_group: Very Special Tenants\n          description: ABC Incorporated\n          comments: '### This tenant is super cool'\n          slug: tenant_abc\n          tags:\n            - tagA\n            - tagB\n            - tagC\n        state: present\n"
  },
  "netbox.netbox.netbox_tenant_group": {
    "doc": {
      "description": "Creates or removes tenant groups from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the tenant group configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "The description of the tenant group",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the tenant group to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "parent_tenant_group": {
              "aliases": [],
              "description": "Slug of the parent tenant group",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "URL-friendly unique shorthand",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes tenant groups from NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox tenant group module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create tenant within NetBox with only required information\n      netbox_tenant_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Tenant Group ABC\n          slug: \"tenant_group_abc\"\n        state: present\n\n    - name: Delete tenant within netbox\n      netbox_tenant_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Tenant ABC\n        state: absent\n\n"
  },
  "netbox.netbox.netbox_virtual_chassis": {
    "doc": {
      "description": "Creates, updates or removes virtual chassis from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the virtual chassis configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "domain": {
              "aliases": [],
              "description": "domain of the virtual chassis",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "master": {
              "aliases": [],
              "description": "The master device the virtual chassis is attached to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the virtual chassis may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete virtual chassis within NetBox",
      "version_added": "0.3.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create virtual chassis within NetBox with only required information\n      netbox_virtual_chassis:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"Virtual Chassis 1\"\n          master: Test Device\n        state: present\n\n    - name: Update virtual chassis with other fields\n      netbox_virtual_chassis:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"Virtual Chassis 1\"\n          domain: Domain Text\n        state: present\n\n    - name: Delete virtual chassis within netbox\n      netbox_virtual_chassis:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: \"Virtual Chassis 1\"\n        state: absent\n"
  },
  "netbox.netbox.netbox_virtual_machine": {
    "doc": {
      "description": "Creates, updates or removes virtual_machines from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the virtual machine configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "cluster": {
              "aliases": [],
              "description": "The name of the cluster attach to the virtual machine",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "comments": {
              "aliases": [],
              "description": "Comments of the virtual machine",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "custom_fields": {
              "aliases": [],
              "description": "Must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "disk": {
              "aliases": [],
              "description": "Disk of the virtual machine (GB)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "local_context_data": {
              "aliases": [],
              "description": "configuration context of the virtual machine",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "memory": {
              "aliases": [],
              "description": "Memory of the virtual machine (MB)",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the virtual machine",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "platform": {
              "aliases": [],
              "description": "The platform of the virtual machine",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "primary_ip4": {
              "aliases": [],
              "description": "Primary IPv4 address assigned to the virtual machine",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "primary_ip6": {
              "aliases": [],
              "description": "Primary IPv6 address assigned to the virtual machine",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "The name of the site attach to the virtual machine",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the virtual machine",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the virtual machine may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant that the virtual machine will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "vcpus": {
              "aliases": [],
              "description": "Number of vcpus of the virtual machine",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "virtual_machine_role": {
              "aliases": [],
              "description": "The role of the virtual machine",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete virtual_machines within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create virtual machine within NetBox with only required information\n      netbox_virtual_machine:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Virtual Machine\n          cluster: test cluster\n        state: present\n\n    - name: Delete virtual machine within netbox\n      netbox_virtual_machine:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Virtual Machine\n        state: absent\n\n    - name: Create virtual machine with tags\n      netbox_virtual_machine:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Another Test Virtual Machine\n          cluster: test cluster\n          site: Test Site\n          tags:\n            - Schnozzberry\n        state: present\n\n    - name: Update vcpus, memory and disk of an existing virtual machine\n      netbox_virtual_machine:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test Virtual Machine\n          cluster: test cluster\n          vcpus: 8\n          memory: 8\n          disk: 8\n        state: present\n"
  },
  "netbox.netbox.netbox_vlan": {
    "doc": {
      "description": "Creates, updates or removes vlans from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the vlan configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the vlan",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the vlan",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "The site the VLAN will be associated to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "The status of the vlan",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the vlan may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant that the vlan will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "vid": {
              "aliases": [],
              "description": "The VLAN ID",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "vlan_group": {
              "aliases": [],
              "description": "The VLAN group the VLAN will be associated to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "vlan_role": {
              "aliases": [],
              "description": "Required if I(state=present) and the vlan does not exist yet",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete vlans within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create vlan within NetBox with only required information\n      netbox_vlan:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test VLAN\n          vid: 400\n        state: present\n\n    - name: Delete vlan within netbox\n      netbox_vlan:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test VLAN\n          vid: 400\n        state: absent\n\n    - name: Create vlan with all information\n      netbox_vlan:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test VLAN\n          vid: 400\n          site: Test Site\n          group: Test VLAN Group\n          tenant: Test Tenant\n          status: Deprecated\n          vlan_role: Test VLAN Role\n          description: Just a test\n          tags:\n            - Schnozzberry\n        state: present\n"
  },
  "netbox.netbox.netbox_vlan_group": {
    "doc": {
      "description": "Creates, updates or removes vlans groups from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the vlan group configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "version_added": "3.1.0",
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Description for VLAN group",
              "type": "str",
              "required": false,
              "version_added": "3.1.0",
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the vlan group",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "scope": {
              "aliases": [],
              "description": "Object related to scope type (NetBox 2.11+)",
              "type": "raw",
              "required": false,
              "version_added": "3.1.0",
              "suboptions": {}
            },
            "scope_type": {
              "aliases": [],
              "description": "Type of scope to be applied (NetBox 2.11+)",
              "type": "str",
              "required": false,
              "choices": [
                "dcim.location",
                "dcim.rack",
                "dcim.region",
                "dcim.site",
                "dcim.sitegroup",
                "virtualization.cluster",
                "virtualization.clustergroup"
              ],
              "version_added": "3.1.0",
              "suboptions": {}
            },
            "site": {
              "aliases": [],
              "description": "The site the vlan will be assigned to (NetBox < 2.11)\nWill be removed in version 5.0.0",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "slug": {
              "aliases": [],
              "description": "The slugified version of the name or custom slug.\nThis is auto-generated following NetBox rules if not provided",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete vlans groups within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create vlan group within NetBox with only required information - Pre 2.11\n      netbox_vlan_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test vlan group\n          site: Test Site\n        state: present\n\n    - name: Create vlan group within NetBox with only required information - Post 2.11\n      netbox_vlan_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test vlan group\n          scope_type: \"dcim.site\"\n          scope: Test Site\n        state: present\n\n    - name: Delete vlan group within netbox\n      netbox_vlan_group:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test vlan group\n        state: absent\n"
  },
  "netbox.netbox.netbox_vm_interface": {
    "doc": {
      "description": "Creates or removes interfaces from virtual machines in NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the vm interface configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "Must exist in NetBox",
              "type": "dict",
              "required": false,
              "version_added": "3.4.0",
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the interface",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Sets whether interface shows enabled or disabled",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mac_address": {
              "aliases": [],
              "description": "The MAC address of the interface",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "The mode of the interface",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "mtu": {
              "aliases": [],
              "description": "The MTU of the interface",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the interface to be created",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "parent_vm_interface": {
              "aliases": [],
              "description": "The virtual machine interface's parent interface.",
              "type": "raw",
              "required": false,
              "version_added": "3.2.0",
              "suboptions": {}
            },
            "tagged_vlans": {
              "aliases": [],
              "description": "A list of tagged VLANS to be assigned to interface. Mode must be set to either C(Tagged) or C(Tagged All)",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the prefix may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "untagged_vlan": {
              "aliases": [],
              "description": "The untagged VLAN to be assigned to interface",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "virtual_machine": {
              "aliases": [],
              "description": "Name of the virtual machine the interface will be associated with (case-sensitive)",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Creates or removes interfaces from virtual machines in NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox interface module\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create interface within NetBox with only required information\n      netbox_vm_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          virtual_machine: test100\n          name: GigabitEthernet1\n        state: present\n\n    - name: Delete interface within netbox\n      netbox_vm_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          virtual_machine: test100\n          name: GigabitEthernet1\n        state: absent\n\n    - name: Create interface as a trunk port\n      netbox_vm_interface:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          virtual_machine: test100\n          name: GigabitEthernet25\n          enabled: false\n          untagged_vlan:\n            name: Wireless\n            site: Test Site\n          tagged_vlans:\n            - name: Data\n              site: Test Site\n            - name: VoIP\n              site: Test Site\n          mtu: 1600\n          mode: Tagged\n        state: present\n"
  },
  "netbox.netbox.netbox_vrf": {
    "doc": {
      "description": "Creates, updates or removes vrfs from NetBox",
      "has_action": false,
      "notes": "Tags should be defined as a YAML list\nThis should be ran with connection C(local) and hosts C(localhost)",
      "options": {
        "cert": {
          "aliases": [],
          "description": "Certificate path",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Defines the vrf configuration",
          "type": "dict",
          "required": true,
          "suboptions": {
            "custom_fields": {
              "aliases": [],
              "description": "must exist in NetBox",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "The description of the vrf",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enforce_unique": {
              "aliases": [],
              "description": "Prevent duplicate prefixes/IP addresses within this VRF",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "export_targets": {
              "aliases": [],
              "description": "Export targets tied to VRF",
              "type": "list",
              "required": false,
              "elements": "str",
              "version_added": "2.0.0",
              "suboptions": {}
            },
            "import_targets": {
              "aliases": [],
              "description": "Import targets tied to VRF",
              "type": "list",
              "required": false,
              "elements": "str",
              "version_added": "2.0.0",
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the vrf",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "rd": {
              "aliases": [],
              "description": "The RD of the VRF. Must be quoted to pass as a string.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "Any tags that the vrf may need to be associated with",
              "type": "list",
              "required": false,
              "elements": "raw",
              "suboptions": {}
            },
            "tenant": {
              "aliases": [],
              "description": "The tenant that the vrf will be assigned to",
              "type": "raw",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "netbox_token": {
          "aliases": [],
          "description": "The NetBox API token.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netbox_url": {
          "aliases": [],
          "description": "The URL of the NetBox instance.\nMust be accessible by the Ansible control host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "query_params": {
          "aliases": [],
          "description": "This can be used to override the specified values in ALLOWED_QUERY_PARAMS that are defined\nin plugins/module_utils/netbox_utils.py and provides control to users on what may make\nan object unique in their environment.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the object.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using a self-signed certificates.",
          "default": "True",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pynetbox"
      ],
      "short_description": "Create, update or delete vrfs within NetBox",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: \"Test NetBox modules\"\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  tasks:\n    - name: Create vrf within NetBox with only required information\n      netbox_vrf:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test VRF\n        state: present\n\n    - name: Delete vrf within netbox\n      netbox_vrf:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test VRF\n        state: absent\n\n    - name: Create vrf with all information\n      netbox_vrf:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          name: Test VRF\n          rd: \"65000:1\"\n          tenant: Test Tenant\n          enforce_unique: true\n          import_targets:\n            - \"65000:65001\"\n          export_targets:\n            - \"65000:65001\"\n          description: VRF description\n          tags:\n            - Schnozzberry\n        state: present\n"
  }
}